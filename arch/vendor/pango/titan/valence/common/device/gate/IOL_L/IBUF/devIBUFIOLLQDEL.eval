*****************************************************************

  Device    [devIBUFIOLLQDEL]

  Author    [hzhang]

  Abstract  [device base on IOL, used as inout path through to IOB
             with OFF IFF TFF]

  Revision History:

********************************************************************************/

gate
device devIBUFIOLLQDEL : device IOL_L
{
    parameter
    (
        config string DELAY_MODE    := "INDELAY",    //"NODELAY", "INDELAY", "OUTDELAY"
  
        config bit    IFF_CE_EN      = 1'b0,
        config bit    IFF_LRS_EN     = 1'b0,
        config bit    IFF_SET        = 1'b0,      //1'b1 => set; 1'b0 => reset
        config bit    IFF_SYNC       = 1'b0,      //1'b1 => sync; 1'b0 => async
        config bit    IFF_LATCH      = 1'b0,      //1'b1 => latch; 1'b0 => flip flop

        config bit    CLK_I_INV      = 1'b0,
        config bit    CLK_O_INV      = 1'b0,
        config bit    CE_INV         = 1'b0,
        config bit    LRS_INV        = 1'b0,

        config bit    IFF_USED       := 1'b1,

        config bit    GRS_EN          = 1'b0,
        config bit    TRI_FORCE[1:0]  := 2'b00,
        config string DELAY_SEL       = "DEFAULT",   //"DEFAULT":  offset      delay offset
                                             //"25PS":     offset+25ps
                                             //"50PS":     offset+50ps
                                             //"100PS":    offset+100ps

        config bit    IODLY_CTRL_EN   = 1'b0,        // The enable signal of IODLY_CTRL,  enable iol auto incr. or decr. .              
        config bit    IODLY_STEP[6:0] = 7'b000_0000  // IOL input delay chain value control. Each delay step is ~50ps.   
                                             // Delay value is linear increased with the binary code increase.
                                             // 0000000: minimum input delay
                                             // 1000000: mid point input delay
                                             // 1111111: maximum input delay
    );
    port
    (
        input   TX_DATA[0:0],
        output  RX_DATA[0:0],
        output  RX_DATA_DD,
     
        input   SYSCLK,
        input   CE,
        input   LRS,
    
        input   IODLY_CTRL[2:0],
        output  IODLY_OV,

        // from/to IOB
        output  TO,
        input   DIN
    );

}// end of device devIBUFIOLLQDEL

/*******************************************************************************

  Device    [devIBUFIOLLQDEL]

  Author    []

  Abstract  [The structure netlist of devIBUFIOLLQDEL is described in the similar fashion
             as in HDL. In unit instantiation statement, the formal pin may be
             connected to net which is declared explicitly.

             In Valence, the connection can also be made from formal pin to other
             pin or port, in which case Valence compiler shall create the net to
             fulfil the connection. The built-in naming convention is kicked in
             to name the automatically created net. However, the objects (net, instance)
             of this netlist are going to mapped from schematic. The compiler-generated
             names cause trouble for the mapping. Therefore, all wires are declared
             explicitly in the following description]

  Revision History:

********************************************************************************/
structure netlist of devIBUFIOLLQDEL
{
    // Wires for input ports

    wire ntSYSCLK, ntCE, ntLRS;
    wire ntDIN;

    ntSYSCLK          <= SYSCLK;
    ntCE              <= CE;
    ntLRS             <= LRS;
    ntDIN             <= DIN;

    // Wires connecting to output ports
    
    wire ntIODLY_OV;
    wire ntIN_DELSEL_MUX;
    
    wire ntIFF;

    RX_DATA_DD   <= ntIN_DELSEL_MUX ;
    IODLY_OV   <= ntIODLY_OV;


    // Internal wires
    wire ntLRS_MUX;
    wire ntCE_MUX;
    wire ntSYSCLK_MUX_I;

    wire ntIFF_CE_MUX;
    wire ntIFF_LRS_MUX;

    wire ntIN_OUT_DELSEL_MUX;
    wire ntDELAY_DOUT;
 
    device LRS_MUX_L LRS_MUX_L
        parameter map
        (
            LRS_INV => LRS_INV
        )
        port map
        (
            I1  => ntLRS,
            I0  => ntLRS,
            Y   => ntLRS_MUX
        );

    device CE_MUX_L CE_MUX_L
        parameter map
        (
            CE_INV => CE_INV
        )
        port map
        (
            I1   => ntCE,
            I0   => ntCE,
            Y    => ntCE_MUX
        );

    device SYSCLK_MUX_I_L SYSCLK_MUX_I_L
        parameter map
        (
            CLK_INV => CLK_I_INV
        )
        port map
        (
            I1   => ntSYSCLK,
            I0   => ntSYSCLK,
            Y    => ntSYSCLK_MUX_I
        );
 
    // IFF
    device IFF_CE_MUX_L IFF_CE_MUX_L
        parameter map
        (
           CE_USED  => IFF_CE_EN
        )
        port map
        (
            CE  => ntCE_MUX,
            ONE => 1'b1,
            Y   => ntIFF_CE_MUX
        );

    device IFF_LRS_MUX_L IFF_LRS_MUX_L
        parameter map
        (
           LRS_USED   => IFF_LRS_EN
        )
        port map
        (
            LRS  => ntLRS_MUX,
            ZERO  => 1'b0,
            Y    => ntIFF_LRS_MUX
        );

    device IFF_L IFF_L
        parameter map
        (
           SET    => IFF_SET,      //1'b1 => set; 1'b0 => reset
           SYNC   => IFF_SYNC,     //1'b1 => sync; 1'b0 => async
           LATCH  => IFF_LATCH,     //1'b1 => latch; 1'b0 => flip flop
           GRS_EN => GRS_EN,
           LRS_EN => IFF_LRS_EN
        )
        port map
        (
           D   => ntIN_DELSEL_MUX,
           CLK => ntSYSCLK_MUX_I,
           CE  => ntIFF_CE_MUX,
           LRS => ntIFF_LRS_MUX,
           Q   => ntIFF
        );

     device IDDR_IFF_MUX_L IDDR_IFF_MUX_L
        parameter map
        (
           DDR_USED => "DISABLE"
        )
        port map
        (
            IFF  => ntIFF,
            Y    => RX_DATA[0]
        );

   // DELAY

    device IN_DELSEL_MUX_L IN_DELSEL_MUX_L
        parameter map
        (
           DELAY_MODE => DELAY_MODE
        )
        port map
        (
            I1  => ntDELAY_DOUT,
            I0  => ntDIN,
            Y   => ntIN_DELSEL_MUX
        );
        
    device IN_OUT_DELSEL_MUX_L IN_OUT_DELSEL_MUX_L
        parameter map
        (
           DELAY_MODE => DELAY_MODE
        )
        port map
        (
            I1  => ntDIN,
            I0  => ntDELAY_DOUT,            
            Y   => ntIN_OUT_DELSEL_MUX
        );

   device DELAY_L DELAY_L
       port map
       (
           DIN        => ntIN_OUT_DELSEL_MUX,
           DOUT       => ntDELAY_DOUT,
           IODLY_CTRL => IODLY_CTRL,
           IODLY_OV   => ntIODLY_OV
       );

}; // end of structure netlist of devIBUFIOLLQDEL

timing tnl of devIBUFIOLLQDEL
{
    wire ntDLY_OUT;

    wire ntCK_I_INV;    
    wire ntCE_INV;
    wire ntRS_INV;
    
    operator V_BUF buf
    parameter map
    (
        SECTION => "IBUF_IOL_DEL"
    )
    port map
    (
        I => ntDLY_OUT,
        Z => RX_DATA_DD
    );
    
    operator V_INV ckinv
        parameter map
        (
            SECTION => "IOL_CLK_I_INV"
        )
        port map
        (
            I => SYSCLK,
            Z => ntCK_I_INV
        );

    if (CE_INV == 1'b1)
    {
        operator V_INV ceinv
            parameter map
            (
                SECTION => "IOL_CE_INV"
            )
            port map
            (
                I => CE,
                Z => ntCE_INV
            );
    }

    if (LRS_INV == 1'b1)
    {
        operator V_INV srinv
            parameter map
            (
                SECTION => "IOL_SR_INV"
            )
            port map
            (
                I => LRS,
                Z => ntRS_INV
            );
    }

    if ( IFF_LATCH == 1'b0 && IFF_SYNC == 1'b1 )   //FF SYNC
    {
        operator V_FFSYN IFF_FF
            parameter map 
            (
                GRS_EN    => (GRS_EN == 1'b1)  ? "TRUE" : "FALSE",
                LRS_EN    => (IFF_LRS_EN == 1'b1) ? "TRUE" : "FALSE",
                SET_RESET => (IFF_SET == 1'b1) ? "SET" : "RESET",
                SECTION => "IFF"
            )
            port map 
            (
                Q => RX_DATA[0],
                D => ntDLY_OUT,
                SR => (IFF_LRS_EN == 1'b1) ? ((LRS_INV == 1'b1) ?  ntRS_INV : LRS) : 1'b0,
                CK => (CLK_I_INV == 1'b1) ?  ntCK_I_INV : SYSCLK,
                CE => (IFF_CE_EN == 1'b1) ? ((CE_INV == 1'b1) ?  ntCE_INV : CE) : 1'b1
            );

    } else if ( IFF_LATCH == 1'b0 && IFF_SYNC == 1'b0 )   //FF ASYNC
    {
        operator V_FFASYN IFF_FF
            parameter map 
            (
                GRS_EN    => (GRS_EN == 1'b1)  ? "TRUE" : "FALSE",
                LRS_EN    => (IFF_LRS_EN == 1'b1) ? "TRUE" : "FALSE",
                SET_RESET => (IFF_SET == 1'b1) ? "SET" : "RESET",
                SECTION => "IFF"
            )
            port map 
            (
                Q => RX_DATA[0],
                D => ntDLY_OUT,
                SR => (IFF_LRS_EN == 1'b1) ? ((LRS_INV == 1'b1) ?  ntRS_INV : LRS) : 1'b0,
                CK => (CLK_I_INV == 1'b1) ?  ntCK_I_INV : SYSCLK,
                CE => (IFF_CE_EN == 1'b1) ? ((CE_INV == 1'b1) ?  ntCE_INV : CE) : 1'b1
            );

    } else if ( IFF_LATCH == 1'b1)   //LATCH ASYNC
    {
        operator V_LAASYN ILATCH
            parameter map 
            (
                GRS_EN    => (GRS_EN == 1'b1)  ? "TRUE" : "FALSE",
                LRS_EN    => (IFF_LRS_EN == 1'b1) ? "TRUE" : "FALSE",
                SET_RESET => (IFF_SET == 1'b1) ? "SET" : "RESET",
                SECTION => "IFF"
            )
            port map 
            (
                Q => RX_DATA[0],
                D => ntDLY_OUT,
                SR => (IFF_LRS_EN == 1'b1) ? ((LRS_INV == 1'b1) ?  ntRS_INV : LRS) : 1'b0,
                CK => (CLK_I_INV == 1'b0) ?  ntCK_I_INV : SYSCLK,
                CE => (IFF_CE_EN == 1'b1) ? ((CE_INV == 1'b1) ?  ntCE_INV : CE) : 1'b1
            );

    }
    
    operator V_IODELAY delay
       parameter map 
       (
           DELAY_STEP  => IODLY_STEP,
           DELAY_DEPTH => 7
       )
       port map
       (
           DI        => DIN,
           DO        => ntDLY_OUT,
           DIRECTION => IODLY_CTRL[0],
           MOVE      => IODLY_CTRL[1],
           LOAD_N    => IODLY_CTRL[2],
           DELAY_OB  => IODLY_OV
       );
};

