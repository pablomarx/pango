*****************************************************************

  Device    [devIOGDDRIOLLDEL]

  Author    [hzhang]

  Abstract  [devIOGDDRIOLLDEL on the TOP/RIGHT/BOTTOM of Arch.]

  Revision History:

********************************************************************************/

gate
device devIOGDDRIOLLDEL : device IOL_L
{
    parameter
    (
        config string TS_MUX_SEL    := "TS_ODDR",
        config string OUT_MUX_SEL   := "ODDR_DO",
        config string DO_SEL         = "DO",   // "DO", "DO_COMP"
        config string TO_SEL         = "TO",   // "TO", "TO_COMP"
        config string IDDR_MODE     := "IGDDR",      //" DISABLE", "IGDDR" 
        config string ODDR_MODE     := "OGDDR",      //" DISABLE", "OGDDR" 
        config bit    GRS_EN         = 1'b0,
        config string DELAY_MODE     = "INDELAY",   //"NODELAY", "INDELAY", "OUTDELAY",
        config bit    IDDR_LRS_EN    = 1'b0,
        config bit    ODDR_LRS_EN    = 1'b0,
        config bit    CLK_I_INV      = 1'b0,
        config bit    CLK_O_INV      = 1'b0,
        config bit    LRS_INV        = 1'b0,
        config bit    TRI_FORCE[1:0]:= 2'b11,
        config string DELAY_SEL      = "DEFAULT",   //"DEFAULT":  offset      delay offset
                                                     //"25PS":     offset+25ps
                                                     //"50PS":     offset+50ps
                                                     //"100PS":    offset+100ps

        config bit    IODLY_CTRL_EN   = 1'b0,        // The enable signal of IODLY_CTRL,  enable iol auto incr. or decr. .              
        config bit    IODLY_STEP[6:0] = 7'b000_0000  // IOL input delay chain value control. Each delay step is ~50ps.   
                                                     // Delay value is linear increased with the binary code increase.
                                                     // 0000000: minimum input delay
                                                     // 1000000: mid point input delay
                                                     // 1111111: maximum input delay
        
    );
    port
    (
        input   TX_DATA[1:0],
        input   TS_CTRL,
    
        output  RX_DATA[1:0],
        output  RX_DATA_DD,

        input   IODLY_CTRL[2:0],
        output  IODLY_OV,
        
        input   DPI_CTRL[1:0],
        input   DPI_STS_CLR,
        output  DPI_STS[1:0],

        input   SYSCLK,
        input   LRS,
        input   SLIP,

        // from/to IOB
    
        input   DIN,
    
        output  TO,
        output  DO,

        output  DO_OUT,
        output  TO_OUT
    );

}// end of device devIOGDDRIOLLDEL

/*******************************************************************************

  Device    [devIOGDDRIOLLDEL]

  Author    []

  Abstract  [The structure netlist of devIOGDDRIOLLDEL is described in the similar fashion
             as in HDL. In unit instantiation statement, the formal pin may be
             connected to net which is declared explicitly.

             In Valence, the connection can also be made from formal pin to other
             pin or port, in which case Valence compiler shall create the net to
             fulfil the connection. The built-in naming convention is kicked in
             to name the automatically created net. However, the objects (net, instance)
             of this netlist are going to mapped from schematic. The compiler-generated
             names cause trouble for the mapping. Therefore, all wires are declared
             explicitly in the following description]

  Revision History:

********************************************************************************/
structure netlist of devIOGDDRIOLLDEL
{
    // Wires for input ports

    wire ntSYSCLK, ntLRS;
    wire ntDIN, ntTS_CTRL;

    ntSYSCLK          <= SYSCLK;
    ntLRS             <= LRS;
    ntDIN             <= DIN;

    ntTS_CTRL         <= TS_CTRL;
    
    // Wires connecting to output ports
    wire ntIODLY_OV;
    wire ntIN_DELSEL_MUX;
    RX_DATA_DD     <= ntIN_DELSEL_MUX;

    wire ntTS_MUX;
    
    wire ntOUT_DELSEL_MUX;

    IODLY_OV   <= ntIODLY_OV;


    wire  ntDO_MUX, ntTO_MUX;

    TO_OUT    <= ntTS_MUX;
    DO_OUT    <= ntOUT_DELSEL_MUX;
    
    TO        <= ntTO_MUX;
    DO        <= ntDO_MUX;

    // Internal wires
    wire ntLRS_MUX;
    
    wire ntSYSCLK_MUX_I;
    wire ntSYSCLK_MUX_O;


    wire ntIDDR_LRS_MUX;
    wire ntRX_DATA0;

    wire ntODDR_LRS_MUX;
    wire ntODDR_TS;
    wire ntODDR_TX;

    wire ntIN_OUT_DELSEL_MUX;
    wire ntDELAY_DOUT;
    wire ntOUTPUT_MUX;

    device LRS_MUX_L LRS_MUX_L
        parameter map
        (
            LRS_INV => LRS_INV
        )
        port map
        (
            I1  => ntLRS,
            I0  => ntLRS,
            Y   => ntLRS_MUX
        );

    device SYSCLK_MUX_I_L SYSCLK_MUX_I_L
        parameter map
        (
            CLK_INV => CLK_I_INV
        )
        port map
        (
            I1   => ntSYSCLK,
            I0   => ntSYSCLK,
            Y    => ntSYSCLK_MUX_I
        );

    device SYSCLK_MUX_O_L SYSCLK_MUX_O_L
        parameter map
        (
            CLK_INV => CLK_O_INV
        )
        port map
        (
            I1   => ntSYSCLK,
            I0   => ntSYSCLK,
            Y    => ntSYSCLK_MUX_O
        );

    device ODDR_LRS_MUX_L ODDR_LRS_MUX_L
        parameter map
        (
            LRS_USED => ODDR_LRS_EN
        )
        port map
        (
            LRS  => ntLRS_MUX,
            ZERO  => 1'b0,
            Y     => ntODDR_LRS_MUX
        );

    device ODDR_L ODDR_L

        port map
        (
            LRS          => ntODDR_LRS_MUX,
            DATA         => TX_DATA,
            TS           => ntTS_CTRL,

            SYSCLK         => ntSYSCLK_MUX_O,

             DO          => ntODDR_TX,       
             TO          => ntODDR_TS
        );

    // connected with TSFF & ODDR
    device TS_MUX_L TS_MUX_L
        parameter map
        (
            TS_SEL => TS_MUX_SEL
        )
        port map
        (
            I0  => ntODDR_TS,
            Y   => ntTS_MUX
        );
  
    // connected with OFF & ODDR

    device OUTPUT_MUX_L OUTPUT_MUX_L
        parameter map
        (
           OUT_SEL    => OUT_MUX_SEL
        )
        port map
        (
            I1  => ntODDR_TX,
            Y   => ntOUTPUT_MUX
        );


   // IDDR
    device IDDR_LRS_MUX_L IDDR_LRS_MUX_L
        parameter map
        (
            LRS_USED => IDDR_LRS_EN
        )
        port map
        (
            LRS   => ntLRS_MUX,
            ZERO  => 1'b0,
            Y     => ntIDDR_LRS_MUX
        );

    device IDDR_L IDDR_L
        port map
        (
            LRS            => ntIDDR_LRS_MUX,
            DATAOUT        => { RX_DATA[1:1], ntRX_DATA0 },
            IN             => ntIN_DELSEL_MUX,
            SYSCLK         => ntSYSCLK_MUX_I
        );

     device IDDR_IFF_MUX_L IDDR_IFF_MUX_L
        parameter map
        (
           DDR_USED => IDDR_MODE
        )
        port map
        (
            IDDR => ntRX_DATA0,
  
            Y    => RX_DATA[0]
        );

   // DELAY

    device IN_DELSEL_MUX_L IN_DELSEL_MUX_L
        parameter map
        (
           DELAY_MODE => DELAY_MODE
        )
        port map
        (
            I1  => ntDELAY_DOUT,
            I0  => ntDIN,
            Y   => ntIN_DELSEL_MUX
        );

    device OUT_DELSEL_MUX_L OUT_DELSEL_MUX_L
        parameter map
        (
           DELAY_MODE => DELAY_MODE
        )
        port map
        (
            I0   => ntOUTPUT_MUX,
            I1   => ntDELAY_DOUT,
            Y    => ntOUT_DELSEL_MUX
        );

    device IN_OUT_DELSEL_MUX_L IN_OUT_DELSEL_MUX_L
        parameter map
        (
           DELAY_MODE => DELAY_MODE
        )
        port map
        (
            I0  => ntOUTPUT_MUX,
            I1  => ntDIN,
            Y   => ntIN_OUT_DELSEL_MUX
        );

   device DELAY_L DELAY_L
       port map
       (
           DIN        => ntIN_OUT_DELSEL_MUX,
           DOUT       => ntDELAY_DOUT,
           IODLY_CTRL => IODLY_CTRL,
           IODLY_OV   => ntIODLY_OV
       );

    device DO_MUX_L DO_MUX_L
       parameter map
       (
           DO_SEL  => DO_SEL
       )
       port map
       (
           I0   => ntOUT_DELSEL_MUX,

           Y    => ntDO_MUX
       );

    device TO_MUX_L TO_MUX_L
       parameter map
       (
           TO_SEL  => TO_SEL
       )
       port map
       (
           I0   => ntTS_MUX,

           Y    => ntTO_MUX
       );
}; // end of structure netlist of devIOGDDRIOLLDEL

timing tnl of devIOGDDRIOLLDEL
{
    wire ntCK_I_INV;    
    wire ntCK_O_INV;
    wire ntCE_INV;
    wire ntRS_INV;
    wire ntDLY;

    if (CLK_I_INV == 1'b1)
    {
        operator V_INV ckiinv
            parameter map
            (
                SECTION => "IOL_CLK_I_INV"
            )
            port map
            (
                I => SYSCLK,
                Z => ntCK_I_INV
            );
    }

    if (CLK_O_INV == 1'b1)
    {
        operator V_INV ckoinv
            parameter map
            (
                SECTION => "IOL_CLK_O_INV"
            )
            port map
            (
                I => SYSCLK,
                Z => ntCK_O_INV
            );
    }
    
    if (LRS_INV == 1'b1)
    {
        operator V_INV srinv
            parameter map
            (
                SECTION => "IOL_SR_INV"
            )
            port map
            (
                I => LRS,
                Z => ntRS_INV
            );
    }

     operator V_IGDDR igddr
        parameter map
        (
            LRS_EN      =>  ( IDDR_LRS_EN == 1'b1) ? "TRUE" : "FALSE", 
            GRS_EN      =>  ( GRS_EN == 1'b1)      ? "TRUE" : "FALSE"
        )
        port map
        (
            PADI           =>   (DELAY_MODE == "INDELAY") ? ntDLY : DIN,      
            Q              =>   RX_DATA,

            RCLK           =>   (CLK_I_INV == 1'b1) ?  ntCK_I_INV : SYSCLK,
            RST            =>   (LRS_INV   == 1'b1) ?  ntRS_INV   : LRS
        );   

     operator V_OGDDR ogddr
        parameter map
        (
            LRS_EN      =>  ( ODDR_LRS_EN == 1'b1) ? "TRUE" : "FALSE", 
            GRS_EN      =>  ( GRS_EN == 1'b1)      ? "TRUE" : "FALSE"
        )
        port map
        (
            D         =>   TX_DATA,
            T         =>   TS_CTRL,
            RCLK      =>   (CLK_O_INV == 1'b1) ?  ntCK_O_INV : SYSCLK,
            RST       =>   (LRS_INV   == 1'b1) ?  ntRS_INV   : LRS ,  
            PADO      =>   (DELAY_MODE == "OUTDELAY") ? ntDLY : DO,
            PADT      =>   TO
        );

    operator V_IODELAY delay
       parameter map 
       (
           DELAY_STEP  => IODLY_STEP,
           DELAY_DEPTH => 7
       )
       port map
       (
           DI        => (DELAY_MODE == "INDELAY")  ? DIN : ntDLY,
           DO        => (DELAY_MODE == "OUTDELAY") ? DO : ntDLY,
           DIRECTION => IODLY_CTRL[0],
           MOVE      => IODLY_CTRL[1],
           LOAD_N    => IODLY_CTRL[2],
           DELAY_OB  => IODLY_OV
       );
       
    operator V_BUF ibuf
        parameter map
        (
           SECTION => "IBUF_IOL"
        )
        port map
        (
            I => DIN,
            Z => RX_DATA_DD
        );
};
