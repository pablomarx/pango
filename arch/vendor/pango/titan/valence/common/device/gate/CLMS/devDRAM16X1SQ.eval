*******************************************************************

  Device    [devDRAM16X1SQ]

  Author    [clwang]

  Abstract  [RAM16X1SQ]

  Revision History:

********************************************************************************/
gate
device devDRAM16X1SQ : device CLMS
{

    parameter
    (
        config bit INITD[31:0]       = 32'h0000_0000,        
        config string FGD_MODE       = "LUT5",              // "LUT5" "ROM" "WMUX" "ARITH"
        config string RAM_LUT_SEL   := "RAM",               // "RAM"  "LUT" 
        config string GRS_EN         = "FALSE",             // "TRUE" "FALSE"
        config string LRS_EN         = "FALSE",             // "TRUE" "FALSE"
        config string Y3MUX_SEL     := "FG",                // "L8"  "FG" "CY"
        config string Q3MUX_SEL      = "Y3",                // "Y3"  "FFCD" "M3"
   
        config string CEMUX_SEL      = "CE",                // "CE" "CEIN" 
        config string RSMUX_SEL      = "RS",                // "RS" "RSIN"
        config bit    CLK_POS        = 1'b0,                // 1'b0: "CLK"; 1'b1: "CLK_B"   
        config string CLK_SEL       := "SCLK",              // "SCLK" "ACLK"
        config bit    CE_POS         = 1'b0,                // 1'b0: "CE";  1'b1: "CE_B"
        config bit    RS_POS         = 1'b0,                // 1'b0: "RS"   1'b1:  "RS_B"                     
        config string SYNC_MODE      = "SYNC",              // "SYNC" "ASYNC"
        config string FF3_SET        = "RESET"              // "RESET" "SET"  
    );
    port
    (        
        // These are the ports of FGD.
        input    D0, D1, D2, D3, DD,
        output   Y3, Q3,

        // These are the ports of RAM.
        // Here are the ports of RAM write adress( WA[3:0] ), and shared with ROM. 
        input    M1, M3, 
        input    M0, M2,

        // Here are the ports of CLMS for controlling.
        input    RS, CE, CLK,
     
        // These are the Ports for Global Controlling, such as Global Reset.
        input    RSIN,
        output   RSOUT,

        input    CEIN,
        output   CEOUT

    );

}// end of device devDRAM16X1SQ

/*******************************************************************************

  Device    [devDRAM16X1SQ]

  Author    [clwang]

  Abstract  [The structure netlist of devDRAM16X1SQ is described in the similar fashion 
             as in HDL. In unit instantiation statement, the formal pin may be 
             connected to net which is declared explicitly. 
             
             In Valence, the connection can also be made from formal pin to other 
             pin or port, in which case Valence compiler shall create the net to 
             fulfil the connection. The built-in naming convention is kicked in 
             to name the automatically created net. However, the objects (net, instance)
             of this netlist are going to mapped from schematic. The compiler-generated
             names cause trouble for the mapping. Therefore, all wires are declared
             explicitly in the following description]

  Revision History:

********************************************************************************/
structure netlist of devDRAM16X1SQ
{
    // Wires for input ports
    wire ntD0, ntD1, ntD2, ntD3, ntDD; 
    wire ntM1, ntM3;
    wire ntM0, ntM2;
    wire ntRS, ntCE, ntCLK;
    wire ntRSIN;
    wire ntCEIN;

    // Wires connecting to output ports
    wire ntY3MUX,ntFF3_Q;

    wire ntRSMUX;
    wire ntCEMUX;
    // Internal wires

    wire ntFGD_Z;
    wire ntQ3MUX;    

    wire ntRSPOLMUX, ntCEPOLMUX, ntCLKPOLMUX, ntRAMCLKMUX;
    //
    // Connection to ports
    //
    ntD0      <= D0;
    ntD1      <= D1;
    ntD2      <= D2;
    ntD3      <= D3;
    ntDD      <= DD;
 
    ntM1      <= M1;
    ntM3      <= M3;
    ntM0      <= M0;
    ntM2      <= M2;

    ntRS      <= RS;
    ntCE      <= CE;
    ntCLK     <= CLK;

    ntRSIN    <= RSIN;
    ntCEIN    <= CEIN;

    Y3        <= ntY3MUX;
    Q3        <= ntFF3_Q;

    RSOUT     <= ntRSMUX;
    CEOUT     <= ntCEMUX;   
    //
    // Instances. FGD section
    //

    device FGS FGD
        parameter map
        (
            INIT        => INITD,
            MODE        => FGD_MODE,
            RAM_LUT_SEL => RAM_LUT_SEL
        )
        port map 
        (
            A0  => ntD0, A1  => ntD1, A2  => ntD2, A3  => ntD3,
            WD  => ntDD,  
           
            // SOME PORTS HAVE NOT BEEN FIXED. FIXED ME
            WA0  => ntM0, WA1 => ntM1, WA2 => ntM2, WA3 => ntM3, 
            WCK  => ntRAMCLKMUX,
            WE   => ntRSPOLMUX,
            Z    => ntFGD_Z 
        );

    device Y3MUX Y3MUX
        parameter map
        (
            CFG  => Y3MUX_SEL
        )
        port map
        (
            FG  => ntFGD_Z,
            Z   => ntY3MUX
        );
    
    device Q3MUX Q3MUX
        parameter map
        (
            CFG  => Q3MUX_SEL
        )    
        port map
        (
            Y3  => ntY3MUX, M3  => ntM3,
            Z   => ntQ3MUX
        );
    
    device FF FF3
        parameter map
        (
            GRS_EN => GRS_EN,
            LRS_EN => LRS_EN,
            SET  => FF3_SET,
            SYNC => SYNC_MODE
        )
        port map
        (
            D  => ntQ3MUX,
            RS => ntRSMUX, CE => ntCEMUX, CK => ntCLKPOLMUX,
            Q  => ntFF3_Q
        );


    device RSMUX RSMUX
        parameter map
        (
            CFG  => RSMUX_SEL
        )     
        port map
        (
            RS  => ntRSPOLMUX, RSIN => ntRSIN,
            Y   => ntRSMUX
        );

    device CEMUX CEMUX
        parameter map
        (
            CFG  => CEMUX_SEL
        )     
        port map
        (
            CE  => ntCEPOLMUX, CEIN => ntCEIN,
            Y   => ntCEMUX
        );


    device RSPOLMUX RSPOLMUX
        parameter map
        (
            CFG  => RS_POS
        )     
        port map
        (
            RS  => ntRS, RS_B => ntRS,
            Y   => ntRSPOLMUX
        );

    device CEPOLMUX CEPOLMUX
        parameter map
        (
            CFG  => CE_POS
        )     
        port map
        (
            CE  => ntCE, CE_B => ntCE,
            Y   => ntCEPOLMUX
        );

    device CLKPOLMUX CLKPOLMUX
        parameter map
        (
            CFG  => CLK_POS
        )      
        port map
        (
            CLK => ntCLK, CLK_B => ntCLK,
            Y   => ntCLKPOLMUX
        );
    device RAMCLKMUX RAMCLKMUX
        parameter map
        (
            CFG  => CLK_SEL
        )      
        port map
        (
            SCLK => ntCLKPOLMUX,
            Z   => ntRAMCLKMUX
        );        

}; // end of structure netlist of devDRAM16X1SQ

timing tnl of devDRAM16X1SQ
{ 
    wire ntCLK;
    wire ntRS;
    wire ntCE; 
    wire ntRAM;
    
    Y3 <= ntRAM;

    operator V_BUF V_CEMUX
        parameter map
        (
            SECTION => (CEMUX_SEL == "CE")? "CE" : "CEIN"
        )
        port map 
        (
            I => (CEMUX_SEL == "CE") ? ((CE_POS == 1'b1) ? ntCE : CE) : CEIN,
            Z => CEOUT
        );      
    
    operator V_BUF V_RSMUX
        parameter map
        (
            SECTION => (RSMUX_SEL == "RS") ? "RS" : "RSIN"
        )
        port map 
        (
             I => (RSMUX_SEL == "RS") ? ((RS_POS == 1'b1) ? ntRS : RS ) : RSIN,
             Z => RSOUT
        ); 
            
    if (CLK_POS == 1'b1)
    {
        operator V_INV V_CLKPOLMUX
            parameter map
            (
                SECTION => "CLK_INV_DUMY"
            )
            port map 
            (
                I => CLK,
                Z => ntCLK
            );    
    }
     
    if (RS_POS == 1'b1)
    {
        operator V_INV V_RSPOLMUX
            parameter map
            (
                SECTION => "RS_INV_DUMY"
            )
            port map 
            (
                I => RS,
                Z => ntRS
            );    
    }
    
    if (CE_POS == 1'b1)
    {
        operator V_INV V_CEPOLMUX
            parameter map
            (
                SECTION => "CE_INV_DUMY"
            )
            port map 
            (
                I => CE,
                Z => ntCE
            );    
    }  
        
   operator V_RAM16X1 V_FGD
       parameter map 
       (
           INIT => INITD[15:0],
           SECTION  => "D"
       )
       port map 
       (
           RDO   => ntRAM,       
           WDI   => DD,       
           RADDR => {D3, D2, D1, D0},
           WADDR => {M3, M2, M1, M0},
           WCLK  => (CLK_POS == 1'b1) ? ntCLK : CLK ,        
           WE    => (RS_POS == 1'b1) ? ntRS : RS      
       );   

    if ( SYNC_MODE == "SYNC" )
    {
        operator V_FFSYN FF3_FF
            parameter map 
            (
                GRS_EN    => GRS_EN,
                LRS_EN    => LRS_EN,
                SET_RESET => FF3_SET,
                SECTION  => "D"
            )
            port map 
            (
                Q  => Q3,
                D  => ntRAM,
                SR => (LRS_EN == "TRUE") ?(( RSMUX_SEL == "RS") ? (RS_POS == 1'b1 ? ntRS : RS) : RSIN) : 1'b0,
                CK => (CLK_POS == 1'b1) ? ntCLK : CLK,
                CE => ( CEMUX_SEL == "CE") ? ((CE_POS == 1'b1) ? ntCE : CE) : CEIN
            );

    } else if ( SYNC_MODE == "ASYNC" ) {

        operator V_FFASYN FF3_FF
            parameter map 
            (
                GRS_EN    => GRS_EN,
                LRS_EN    => LRS_EN,
                SET_RESET => FF3_SET,
                SECTION  => "D"
            )
            port map 
            (
                Q  => Q3,
                D  => ntRAM,
                SR => (LRS_EN == "TRUE") ?(( RSMUX_SEL == "RS") ? (RS_POS == 1'b1 ? ntRS : RS) : RSIN) : 1'b0,
                CK => (CLK_POS == 1'b1) ? ntCLK : CLK,
                CE => ( CEMUX_SEL == "CE") ? ((CE_POS == 1'b1) ? ntCE : CE) : CEIN
            );

    }  

}



