*****************************************************************

  Device    [devDLQ]

  Author    []

  Abstract  [THE DEVICE CAN BE USED FOR ADDIDTION+FF.]

  Revision History:

********************************************************************************/
gate
device devDLQ : device devD
{
    parameter
    (
        config bit INITD[31:0]     = 32'h0000_0000,
        config string FGD_MODE     = "LUT5",               // "LUT5" "ROM" "WMUX" "ARITH"        
        config string GRS_EN       = "FALSE",              // "TRUE" "FALSE"
        config string LRS_EN       = "TRUE",               // "TRUE" "FALSE"
        config string Y3MUX_SEL   := "FG",                 // "L8"  "FG" "CY"
        config string Q3MUX_SEL   := "Y3",                 // "Y3"  "FFCD" "M3"                
        config string CEMUX_SEL    = "CE",                 // "CE" "CEIN" 
        config string RSMUX_SEL    = "RS",                 // "RS" "RSIN"
        config bit    CLK_POS      = 1'b0,                 // 1'b0: "CLK"; 1'b1: "CLK_B"   
        config bit    CE_POS       = 1'b0,                 // 1'b0: "CE";  1'b1: "CE_B"
        config bit    RS_POS       = 1'b0,                 // 1'b0: "RS"   1'b1:  "RS_B"
        config string SYNC_MODE    = "SYNC",               // "SYNC" "ASYNC"
        config string FF3_SET      = "RESET"               // "RESET" "SET"
    );
    
    port
    (
        input    D0, D1, D2, D3, D4, DD,
        output   Y3, Q3,                 
        input    RS, CE, CLK,
        input    RSIN,
        output   RSOUT,
        input    CEIN,
        output   CEOUT
    );
}; // end of device devDLQ


/*******************************************************************************

  Device    [devDLQ]

  Author    []

  Abstract  []

  Revision History:

********************************************************************************/
structure netlist of devDLQ
{
    // Wires for input ports
    wire ntD0,ntD1,ntD2,ntD3,ntD4,ntDD; 

    wire ntRS, ntCE, ntCLK;
    wire ntRSIN;
    wire ntCEIN;

    // Wires connecting to output ports
    wire ntY3MUX,ntFF3_Q;

    wire ntRSMUX;
    wire ntCEMUX;

    // Internal wires

    wire ntFGD_Z;
    wire ntQ3MUX;    
    wire ntRSPOLMUX, ntCEPOLMUX, ntCLKPOLMUX;

    //
    // Connection to ports
    //
 
    ntD0      <= D0;
    ntD1      <= D1;
    ntD2      <= D2;
    ntD3      <= D3;
    ntD4      <= D4;
    ntDD      <= DD;
 

    ntRS      <= RS;
    ntCE      <= CE;
    ntCLK     <= CLK;
    
    ntRSIN    <= RSIN;
    ntCEIN    <= CEIN;

    Y3        <= ntY3MUX;
    Q3        <= ntFF3_Q;

    RSOUT     <= ntRSMUX;
    CEOUT     <= ntCEMUX;    
    //
    // Instances. FGA section
    //

    device FGA FGD 
        parameter map
        (
            INIT        => INITD,
            MODE        => FGD_MODE
        )
        port map 
        (
            A0  => ntD0,A1  => ntD1,A2  => ntD2,A3  => ntD3,A4  => ntD4,A5  => ntDD,
            Z    => ntFGD_Z 
        );

    device Y3MUX Y3MUX
        parameter map
        (
            CFG  => Y3MUX_SEL
        )      
        port map
        (
            FG  => ntFGD_Z, 
            Z   => ntY3MUX
        );
    
    device Q3MUX Q3MUX
        parameter map
        (
            CFG  => Q3MUX_SEL
        )      
        port map
        (
            Y3  => ntY3MUX,
            Z   => ntQ3MUX
        );
    
    device FF FF3
        parameter map
        (
            GRS_EN => GRS_EN,
            LRS_EN => LRS_EN,
            SET     => FF3_SET,
            SYNC    => SYNC_MODE
        )
        port map
        (
            D  => ntQ3MUX,
            RS => ntRSMUX, CE => ntCEMUX, CK => ntCLKPOLMUX,
            Q  => ntFF3_Q
        );

    device RSMUX RSMUX
        parameter map
        (
            CFG  => RSMUX_SEL
        )      
        port map
        (
            RS  => ntRSPOLMUX, RSIN => ntRSIN,
            Y   => ntRSMUX
        );

    device CEMUX CEMUX
        parameter map
        (
            CFG  => CEMUX_SEL
        )        
        port map
        (
            CE  => ntCEPOLMUX, CEIN => ntCEIN,
            Y   => ntCEMUX
        );


    device RSPOLMUX RSPOLMUX
        parameter map
        (
            CFG  => RS_POS
        )    
        port map
        (
            RS  => ntRS, RS_B => ntRS,
            Y   => ntRSPOLMUX
        );

    device CEPOLMUX CEPOLMUX
        parameter map
        (
            CFG  => CE_POS
        )       
        port map
        (
            CE  => ntCE, CE_B => ntCE,
            Y   => ntCEPOLMUX
        );

    device CLKPOLMUX CLKPOLMUX
        parameter map
        (
            CFG  => CLK_POS
        )     
        port map
        (
            CLK => ntCLK, CLK_B => ntCLK,
            Y   => ntCLKPOLMUX
        );
}; // end of structure netlist of devDLQ

timing tnl of devDLQ
{
    // the delay CEIN->CEOUT RSIN->RSOUT describe in the cell timing file.
    wire lut_o;
    wire ntCLK;
    wire ntRS;
    wire ntCE;
    
    Y3 <= lut_o;
    
    operator V_BUF V_CEMUX
        parameter map
        (
            SECTION => (CEMUX_SEL == "CE")? "CE" : "CEIN"
        )
        port map 
        (
            I => (CEMUX_SEL == "CE") ? ((CE_POS == 1'b1) ? ntCE : CE) : CEIN,
            Z => CEOUT
        );      

    operator V_BUF V_RSMUX
        parameter map
        (
            SECTION => (RSMUX_SEL == "RS") ? "RS" : "RSIN"
        )
        port map 
        (
             I => (RSMUX_SEL == "RS") ? ((RS_POS == 1'b1) ? ntRS : RS ) : RSIN,
             Z => RSOUT
        );   
    
    if (FGD_MODE == "WMUX")
    {
       operator V_LUT5M V_FGD   
           parameter map 
           (
               INIT => INITD,
               SECTION  => "D"
           )
           port map
           (
               I0   => D0,
               I1   => D1,
               I2   => D2,
               I3   => D3,
               I4   => D4,
               ID   => DD,
               Z    => lut_o
           );
   }
    else
    {
        operator V_LUT5 V_FGD     
            parameter map           
            (                   
                INIT => INITD,
                SECTION  => "D"  
            )                   
            port map                
            (                   
                I0   => D0,       
                I1   => D1,       
                I2   => D2,       
                I3   => D3,       
                I4   => D4,                        
                Y    => lut_o        
            );  
    }
    
    if (CLK_POS == 1'b1)
    {
        operator V_INV V_CLKPOLMUX
            parameter map
            (
                SECTION => "CLK_INV_DUMY"
            )
            port map 
            (
                I => CLK,
                Z => ntCLK
            );    
    }
    
    if (CE_POS == 1'b1)
    {
        operator V_INV V_CEPOLMUX
            parameter map
            (
                SECTION => "CE_INV_DUMY"
            )
            port map 
            (
                I => CE,
                Z => ntCE
            );    
    }
    
    if (RS_POS == 1'b1)
    {
        operator V_INV V_RSPOLMUX
            parameter map
            (
                SECTION => "RS_INV_DUMY"
            )
            port map 
            (
                I => RS,
                Z => ntRS
            );    
    }    
        
    if ( SYNC_MODE == "SYNC" )
    {      
        operator V_FFSYN FF3_FF
            parameter map 
            (
                GRS_EN    => GRS_EN,
                LRS_EN    => LRS_EN,
                SET_RESET => FF3_SET,
                SECTION  => "D"
            )
            port map 
            (
                Q  => Q3,
                D  => lut_o,
                SR => (LRS_EN == "TRUE") ?(( RSMUX_SEL == "RS") ? (RS_POS == 1'b1 ? ntRS : RS) : RSIN) : 1'b0,
                CK => (CLK_POS == 1'b1) ? ntCLK : CLK,
                CE => ( CEMUX_SEL == "CE") ? ((CE_POS == 1'b1) ? ntCE : CE) : CEIN
            );

    } 
    else if ( SYNC_MODE == "ASYNC" ) 
    {

        operator V_FFASYN FF3_FF
            parameter map 
            (
                GRS_EN    => GRS_EN,
                LRS_EN    => LRS_EN,
                SET_RESET => FF3_SET,
                SECTION  => "D"
            )
            port map 
            (
                Q  => Q3,
                D  => lut_o,
                SR => (LRS_EN == "TRUE") ?(( RSMUX_SEL == "RS") ? (RS_POS == 1'b1 ? ntRS : RS) : RSIN) : 1'b0,
                CK => (CLK_POS == 1'b1) ? ntCLK : CLK,
                CE => ( CEMUX_SEL == "CE") ? ((CE_POS == 1'b1) ? ntCE : CE) : CEIN
            );

    }  

}