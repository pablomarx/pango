*****************************************************************

  Device    [REG_HMUX]

  Author    [clwang]

  Abstract  []

  Revision History:

********************************************************************************/
grid
device REG_HMUX
{

    parameter
    (
        // These are the config parameters that are used to enable formal flow. They
        // should be present in the declaration only if a MACRO is set. In normal
        // implementation flow they should be turned off.
        config string TEST_MODE        = "DISABLE",    // "ENABLE" "DISABLE"
        config bit    LOCAL_MODE[3:0]  = 4'b0000       // 4'b1111 ~ 4'b0000

    );
    port
    (
        // These are the config ports.
        config input   SC_TESTMODEN_N       = 1'b0             /*pragma PAP_CFG_BIT_NAME = "SC_TESTMODEN_N" */,
        config input   SC_LOCALMODEN_N[3:0] = 4'b0000          /*pragma PAP_CFG_BIT_NAME = "SC_LOCALMODEN_N<3>, SC_LOCALMODEN_N<2>, SC_LOCALMODEN_N<1>, SC_LOCALMODEN_N<0>" */,        
        config input   SC_REG_HMUX[15:0]    = 16'h0000  
        /*pragma PAP_CFG_BIT_NAME = "SC_REG_HMUX<15>, SC_REG_HMUX<14>, SC_REG_HMUX<13>, SC_REG_HMUX<12>, SC_REG_HMUX<11>, SC_REG_HMUX<10>, SC_REG_HMUX<9>, SC_REG_HMUX<8>, SC_REG_HMUX<7>, SC_REG_HMUX<6>, SC_REG_HMUX<5>, SC_REG_HMUX<4>, SC_REG_HMUX<3>, SC_REG_HMUX<2>, SC_REG_HMUX<1>, SC_REG_HMUX<0>" */,
        
        
        input  PLLOUT[1:0]     = 2'b11,
        input  PLLOUT_NEI[1:0] = 2'b11,
        input  CLKDIV[3:0]     = 4'b1111,
        input  DQSCLKDIV[9:0]  = 10'h3ff,
        input  PCS[7:0]        = 8'hff,
        input  CLKDIV_NEI[3:0] = 4'b1111,
        input  CIM_NEI[3:0]    = 4'b1111,
        input  PCLK_NEI[1:0]   = 2'b11,
        input  PCLK[1:0]       = 2'b11,
        input  SIG_FR_CIM[4:0] = 5'h1f,
        input  CIM[3:0]        = 4'b1111,
        output HCLK[3:0]          
    );

}// end of device REG_HMUX

/*******************************************************************************

  Device    [REG_HMUX]

  Author    []

  Abstract  [The structure netlist of REG_HMUX is described in the similar fashion 
             as in HDL. In unit instantiation statement, the formal pin may be 
             connected to net which is declared explicitly. 
             
             In Valence, the connection can also be made from formal pin to other 
             pin or port, in which case Valence compiler shall create the net to 
             fulfil the connection. The built-in naming convention is kicked in 
             to name the automatically created net. However, the objects (net, instance)
             of this netlist are going to mapped from schematic. The compiler-generated
             names cause trouble for the mapping. Therefore, all wires are declared
             explicitly in the following description]

  Revision History:

********************************************************************************/
structure netlist of REG_HMUX
{
    // Wires for input ports


   // Wires connecting to output ports
    routing
    {
        /*(
             CIM[0] ,
             PCLK[0] ,
             PLLOUT[0] ,
             CLKDIV[0] ,
             CIM_NEI[0] ,
             PCLK_NEI[0] ,
             PLLOUT_NEI[0] ,
             CLKDIV_NEI[0] ,
             PCS[0] ,
             PCS[1] ,
             DQSCLKDIV[0] ,
             DQSCLKDIV[1] -->  HCLK[0] ) = 150;

        (
             CIM[1] ,
             DQSCLKDIV[2] ,
             DQSCLKDIV[3] ,
             CLKDIV[1] ,
             CIM_NEI[1] ,
             CLKDIV_NEI[1] ,
             PCS[2] ,
             PCS[3] -->  HCLK[1] ) = 150;

        (
             CIM[2] ,
             PCLK[1] ,
             PLLOUT[1] ,
             CLKDIV[2] ,
             CIM_NEI[2] ,
             PCLK_NEI[1] ,
             PLLOUT_NEI[1] ,
             CLKDIV_NEI[2] ,
             PCS[4] ,
             PCS[5] ,
             DQSCLKDIV[4] ,
             DQSCLKDIV[5] -->  HCLK[2] ) = 150;

        (
             CIM[3] ,
             DQSCLKDIV[6] ,
             DQSCLKDIV[7] ,
             DQSCLKDIV[8] ,
             CLKDIV[3] ,
             CIM_NEI[3] ,
             CLKDIV_NEI[3] ,
             PCS[6] ,
             PCS[7] ,
             DQSCLKDIV[9] -->  HCLK[3] ) = 150;*/
        
        ( CIM[0] --> HCLK[0] ) = 303;
        ( PCLK[0] --> HCLK[0] ) = 206;
        ( PLLOUT[0] --> HCLK[0] ) = 277;
        ( CLKDIV[0] --> HCLK[0] ) = 100;
        ( CIM_NEI[0] --> HCLK[0] ) = 303;
        ( PCLK_NEI[0] --> HCLK[0] ) = 206;
        ( PLLOUT_NEI[0] --> HCLK[0] ) = 277;
        ( CLKDIV_NEI[0] --> HCLK[0] ) = 100;
        ( PCS[0] --> HCLK[0] ) = 150;
        ( PCS[1] --> HCLK[0] ) = 150;
        ( DQSCLKDIV[0] --> HCLK[0] ) = 379;
        ( DQSCLKDIV[1] --> HCLK[0] ) = 379;
        ( CIM[1] --> HCLK[1] ) = 303;
        ( DQSCLKDIV[2] --> HCLK[1] ) = 379;
        ( DQSCLKDIV[3] --> HCLK[1] ) = 379;
        ( CLKDIV[1] --> HCLK[1] ) = 100;
        ( CIM_NEI[1] --> HCLK[1] ) = 303;
        ( CLKDIV_NEI[1] --> HCLK[1] ) = 100;
        ( PCS[2] --> HCLK[1] ) = 150;
        ( PCS[3] --> HCLK[1] ) = 150;
        ( CIM[2] --> HCLK[2] ) = 303;
        ( PCLK[1] --> HCLK[2] ) = 206;
        ( PLLOUT[1] --> HCLK[2] ) = 277;
        ( CLKDIV[2] --> HCLK[2] ) = 100;
        ( CIM_NEI[2] --> HCLK[2] ) = 303;
        ( PCLK_NEI[1] --> HCLK[2] ) = 206;
        ( PLLOUT_NEI[1] --> HCLK[2] ) = 277;
        ( CLKDIV_NEI[2] --> HCLK[2] ) = 100;
        ( PCS[4] --> HCLK[2] ) = 150;
        ( PCS[5] --> HCLK[2] ) = 150;
        ( DQSCLKDIV[4] --> HCLK[2] ) = 379;
        ( DQSCLKDIV[5] --> HCLK[2] ) = 379;
        ( CIM[3] --> HCLK[3] ) = 303;
        ( DQSCLKDIV[6] --> HCLK[3] ) = 379;
        ( DQSCLKDIV[7] --> HCLK[3] ) = 379;
        ( DQSCLKDIV[8] --> HCLK[3] ) = 379;
        ( CLKDIV[3] --> HCLK[3] ) = 100;
        ( CIM_NEI[3] --> HCLK[3] ) = 303;
        ( CLKDIV_NEI[3] --> HCLK[3] ) = 100;
        ( PCS[6] --> HCLK[3] ) = 150;
        ( PCS[7] --> HCLK[3] ) = 150;
        ( DQSCLKDIV[9] --> HCLK[3] ) = 379;            
    }

   // Internal wires



}; // end of structure netlist of REG_HMUX

/*******************************************************************************

  Device    [REG_HMUX]

  Author    []

  Abstract  [Configure the configuration bits based on the value of config parameter]

  Revision History:

********************************************************************************/
configuration cfg of REG_HMUX
{
    if (TEST_MODE == "DISABLE")
    {
        if ( CIM[0] --> HCLK[0] )
        {
            SC_REG_HMUX[3:0] := 4'b0100;
        }
        
        if ( PCLK[0] --> HCLK[0] )
        {
            SC_REG_HMUX[3:0] := 4'b0101;
        }
        
        if ( PLLOUT[0] --> HCLK[0] )
        {
            SC_REG_HMUX[3:0] := 4'b0110;
        }
        
        if ( CLKDIV[0] --> HCLK[0] )
        {
            SC_REG_HMUX[3:0] := 4'b0111;
        }
        
        if ( CIM_NEI[0] --> HCLK[0] )
        {
            SC_REG_HMUX[3:0] := 4'b1000;
        }
        
        if ( PCLK_NEI[0] --> HCLK[0] )
        {
            SC_REG_HMUX[3:0] := 4'b1001;
        }
        
        if ( PLLOUT_NEI[0] --> HCLK[0] )
        {
            SC_REG_HMUX[3:0] := 4'b1010;
        }
        
        if ( CLKDIV_NEI[0] --> HCLK[0] )
        {
            SC_REG_HMUX[3:0] := 4'b1011;
        }
        
        if ( PCS[0] --> HCLK[0] )
        {
            SC_REG_HMUX[3:0] := 4'b1100;
        }
        
        if ( PCS[1] --> HCLK[0] )
        {
            SC_REG_HMUX[3:0] := 4'b1101;
        }
        
        if ( DQSCLKDIV[0] --> HCLK[0] )
        {
            SC_REG_HMUX[3:0] := 4'b1110;
        }
        
        if ( DQSCLKDIV[1] --> HCLK[0] )
        {
            SC_REG_HMUX[3:0] := 4'b1111;
        }
        
        if ( CIM[2] --> HCLK[2] )
        {
            SC_REG_HMUX[10:7] := 4'b0100;
        }
        
        if ( PCLK[1] --> HCLK[2] )
        {
            SC_REG_HMUX[10:7] := 4'b0101;
        }
        
        if ( PLLOUT[1] --> HCLK[2] )
        {
            SC_REG_HMUX[10:7] := 4'b0110;
        }
        
        if ( CLKDIV[2] --> HCLK[2] )
        {
            SC_REG_HMUX[10:7] := 4'b0111;
        }
        
        if ( CIM_NEI[2] --> HCLK[2] )
        {
            SC_REG_HMUX[10:7] := 4'b1000;
        }
        
        if ( PCLK_NEI[1] --> HCLK[2] )
        {
            SC_REG_HMUX[10:7] := 4'b1001;
        }
        
        if ( PLLOUT_NEI[1] --> HCLK[2] )
        {
            SC_REG_HMUX[10:7] := 4'b1010;
        }
        
        if ( CLKDIV_NEI[2] --> HCLK[2] )
        {
            SC_REG_HMUX[10:7] := 4'b1011;
        }
        
        if ( PCS[4] --> HCLK[2] )
        {
            SC_REG_HMUX[10:7] := 4'b1100;
        }
        
        if ( PCS[5] --> HCLK[2] )
        {
            SC_REG_HMUX[10:7] := 4'b1101;
        }
        
        if ( DQSCLKDIV[4] --> HCLK[2] )
        {
            SC_REG_HMUX[10:7] := 4'b1110;
        }
        
        if ( DQSCLKDIV[5] --> HCLK[2] )
        {
            SC_REG_HMUX[10:7] := 4'b1111;
        }
        
        if ( CIM[1] --> HCLK[1] )
        {
            SC_REG_HMUX[6:4] := 3'b000;
        }
        
        if ( DQSCLKDIV[2] --> HCLK[1] )
        {
            SC_REG_HMUX[6:4] := 3'b001;
        }
        
        if ( DQSCLKDIV[3] --> HCLK[1] )
        {
            SC_REG_HMUX[6:4] := 3'b010;
        }
        
        if ( CLKDIV[1] --> HCLK[1] )
        {
            SC_REG_HMUX[6:4] := 3'b011;
        }
        
        if ( CIM_NEI[1] --> HCLK[1] )
        {
            SC_REG_HMUX[6:4] := 3'b100;
        }
        
        if ( CLKDIV_NEI[1] --> HCLK[1] )
        {
            SC_REG_HMUX[6:4] := 3'b101;
        }
        
        if ( PCS[2] --> HCLK[1] )
        {
            SC_REG_HMUX[6:4] := 3'b110;
        }
        
        if ( PCS[3] --> HCLK[1] )
        {
            SC_REG_HMUX[6:4] := 3'b111;
        }
        
        if ( CIM[3] --> HCLK[3] )
        {
            SC_REG_HMUX[15:11] := 5'b10000;
        }
        
        if ( DQSCLKDIV[6] --> HCLK[3] )
        {
            SC_REG_HMUX[15:11] := 5'b10001;
        }
        
        if ( DQSCLKDIV[7] --> HCLK[3] )
        {
            SC_REG_HMUX[15:11] := 5'b10010;
        }
        
        if ( DQSCLKDIV[8] --> HCLK[3] )
        {
            SC_REG_HMUX[15:11] := 5'b10011;
        }
        
        if ( CLKDIV[3] --> HCLK[3] )
        {
            SC_REG_HMUX[15:11] := 5'b10100;
        }
        
        if ( CIM_NEI[3] --> HCLK[3] )
        {
            SC_REG_HMUX[15:11] := 5'b10101;
        }
        
        if ( CLKDIV_NEI[3] --> HCLK[3] )
        {
            SC_REG_HMUX[15:11] := 5'b10110;
        }
        
        if ( PCS[6] --> HCLK[3] )
        {
            SC_REG_HMUX[15:11] := 5'b10111;
        }
        
        if ( PCS[7] --> HCLK[3] )
        {
            SC_REG_HMUX[15:11] := 5'b01000;
        }
        
        if ( DQSCLKDIV[9] --> HCLK[3] )
        {
            SC_REG_HMUX[15:11] := 5'b00000;
        } 
        SC_TESTMODEN_N       := 1'b0;
        SC_LOCALMODEN_N      := LOCAL_MODE;        
    }
    else // if (TEST_MODE == "ENABLE")
    {                
        SC_TESTMODEN_N       := 1'b1;
        SC_LOCALMODEN_N      := LOCAL_MODE;
    }        
}; // end of configuration cfg of REG_HMUX





