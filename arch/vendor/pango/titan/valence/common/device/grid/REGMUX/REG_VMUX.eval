*****************************************************************

  Device    [REG_VMUX]

  Author    [clwang]

  Abstract  []

  Revision History:

********************************************************************************/
grid
device REG_VMUX
{

    parameter
    (
        // These are the config parameters that are used to enable formal flow. They
        // should be present in the declaration only if a MACRO is set. In normal
        // implementation flow they should be turned off.
        config string TEST_MODE        = "DISABLE",    // "ENABLE" "DISABLE"
        config bit    LOCAL_MODE[1:0]  = 2'b00         // 2'b11 2'b00 2'b01 2'b10

    );
    port
    (
        // These are the config ports.
        config input   SC_TESTMODEN_N       = 1'b0             /*pragma PAP_CFG_BIT_NAME = "SC_TESTMODEN_N" */,
        config input   SC_LOCALMODEN_N[1:0] = 2'b00            /*pragma PAP_CFG_BIT_NAME = "SC_LOCALMODEN_N<5>, SC_LOCALMODEN_N<4>" */,        
        config input   SC_REG_VMUX[9:0]     = 10'b00_0000_0000 /*pragma PAP_CFG_BIT_NAME = "SC_REG_VMUX<9>, SC_REG_VMUX<8>, SC_REG_VMUX<7>, SC_REG_VMUX<6>, SC_REG_VMUX<5>, SC_REG_VMUX<4>, SC_REG_VMUX<3>, SC_REG_VMUX<2>, SC_REG_VMUX<1>, SC_REG_VMUX<0>" */,
               
        
        input   SIG_FR_CIM[4:0] = 5'h1f,
        input   CIM[3:0]        = 4'b1111,
        input   HCLK[3:0]       = 4'b1111,
        input   PCS[7:0]        = 8'hff,
        input   CLKDIV[3:0]     = 4'b1111,
        input   PLLOUT[1:0]     = 2'b11,
        input   PCLK[1:0]       = 2'b11,
        input   DQSCLKDIV[9:0]  = 10'h3ff,
        output  REGCLK[1:0]    
    );

}// end of device REG_VMUX

/*******************************************************************************

  Device    [REG_VMUX]

  Author    []

  Abstract  [The structure netlist of REG_VMUX is described in the similar fashion 
             as in HDL. In unit instantiation statement, the formal pin may be 
             connected to net which is declared explicitly. 
             
             In Valence, the connection can also be made from formal pin to other 
             pin or port, in which case Valence compiler shall create the net to 
             fulfil the connection. The built-in naming convention is kicked in 
             to name the automatically created net. However, the objects (net, instance)
             of this netlist are going to mapped from schematic. The compiler-generated
             names cause trouble for the mapping. Therefore, all wires are declared
             explicitly in the following description]

  Revision History:

********************************************************************************/
structure netlist of REG_VMUX
{
    // Wires for input ports


   // Wires connecting to output ports
    routing
    {
        /*(
             CIM[0] ,
             CIM[1] ,
             PCLK[0] ,
             PLLOUT[0] ,
             HCLK[0] ,
             HCLK[1] ,
             PCS[0] ,
             PCS[1] ,
             PCS[2] ,
             PCS[3] ,
             CLKDIV[0] ,
             CLKDIV[1] ,
             DQSCLKDIV[0] ,
             DQSCLKDIV[1] ,
             DQSCLKDIV[2] ,
             DQSCLKDIV[3] ,
             DQSCLKDIV[4]  -->  REGCLK[0] ) = 150;

        (
             CIM[2] ,
             CIM[3] ,
             PCLK[1] ,
             PLLOUT[1] ,
             HCLK[2] ,
             HCLK[3] ,
             PCS[4] ,
             PCS[5] ,
             PCS[6] ,
             PCS[7] ,
             CLKDIV[2] ,
             CLKDIV[3] ,
             DQSCLKDIV[5] ,
             DQSCLKDIV[6] ,
             DQSCLKDIV[7] ,
             DQSCLKDIV[8] ,
             DQSCLKDIV[9]  -->  REGCLK[1] ) = 150;
             */
    
        ( CIM[0] --> REGCLK[0] ) = 130;
        ( CIM[1] --> REGCLK[0] ) = 130;
        ( PCLK[0] --> REGCLK[0] ) = 317;
        ( PLLOUT[0] --> REGCLK[0] ) = 371;
        ( HCLK[0] --> REGCLK[0] ) = 278;
        ( HCLK[1] --> REGCLK[0] ) = 278;
        ( PCS[0] --> REGCLK[0] ) = 150;
        ( PCS[1] --> REGCLK[0] ) = 150;
        ( PCS[2] --> REGCLK[0] ) = 150;
        ( PCS[3] --> REGCLK[0] ) = 150;
        ( CLKDIV[0] --> REGCLK[0] ) = 213;
        ( CLKDIV[1] --> REGCLK[0] ) = 213;
        ( DQSCLKDIV[0] --> REGCLK[0] ) = 110;
        ( DQSCLKDIV[1] --> REGCLK[0] ) = 110;
        ( DQSCLKDIV[2] --> REGCLK[0] ) = 110;
        ( DQSCLKDIV[3] --> REGCLK[0] ) = 110;
        ( DQSCLKDIV[4] --> REGCLK[0] ) = 110;
        ( CIM[2] --> REGCLK[1] ) = 130;
        ( CIM[3] --> REGCLK[1] ) = 130;
        ( PCLK[1] --> REGCLK[1] ) = 317;
        ( PLLOUT[1] --> REGCLK[1] ) = 371;
        ( HCLK[2] --> REGCLK[1] ) = 278;
        ( HCLK[3] --> REGCLK[1] ) = 278;
        ( PCS[4] --> REGCLK[1] ) = 150;
        ( PCS[5] --> REGCLK[1] ) = 150;
        ( PCS[6] --> REGCLK[1] ) = 150;
        ( PCS[7] --> REGCLK[1] ) = 150;
        ( CLKDIV[2] --> REGCLK[1] ) = 213;
        ( CLKDIV[3] --> REGCLK[1] ) = 213;
        ( DQSCLKDIV[5] --> REGCLK[1] ) = 110;
        ( DQSCLKDIV[6] --> REGCLK[1] ) = 110;
        ( DQSCLKDIV[7] --> REGCLK[1] ) = 110;
        ( DQSCLKDIV[8] --> REGCLK[1] ) = 110;
        ( DQSCLKDIV[9] --> REGCLK[1] ) = 110;        
    }

   // Internal wires



}; // end of structure netlist of REG_VMUX

/*******************************************************************************

  Device    [REG_VMUX]

  Author    []

  Abstract  [Configure the configuration bits based on the value of config parameter]

  Revision History:

********************************************************************************/
configuration cfg of REG_VMUX
{
    if (TEST_MODE == "DISABLE")
    {
        if ( CIM[0] --> REGCLK[0] )
        {
            SC_REG_VMUX[4:0] := 5'b01000;
        }
        
        if ( CIM[1] --> REGCLK[0] )
        {
            SC_REG_VMUX[4:0] := 5'b01001;
        }
        
        if ( PCLK[0] --> REGCLK[0] )
        {
            SC_REG_VMUX[4:0] := 5'b01010;
        }
        
        if ( PLLOUT[0] --> REGCLK[0] )
        {
            SC_REG_VMUX[4:0] := 5'b01011;
        }
        
        if ( HCLK[0] --> REGCLK[0] )
        {
            SC_REG_VMUX[4:0] := 5'b01100;
        }
        
        if ( HCLK[1] --> REGCLK[0] )
        {
            SC_REG_VMUX[4:0] := 5'b01101;
        }
        
        if ( PCS[0] --> REGCLK[0] )
        {
            SC_REG_VMUX[4:0] := 5'b01110;
        }
        
        if ( PCS[1] --> REGCLK[0] )
        {
            SC_REG_VMUX[4:0] := 5'b01111;
        }
        
        if ( PCS[2] --> REGCLK[0] )
        {
            SC_REG_VMUX[4:0] := 5'b10000;
        }
        
        if ( PCS[3] --> REGCLK[0] )
        {
            SC_REG_VMUX[4:0] := 5'b10001;
        }
        
        if ( CLKDIV[0] --> REGCLK[0] )
        {
            SC_REG_VMUX[4:0] := 5'b10010;
        }
        
        if ( CLKDIV[1] --> REGCLK[0] )
        {
            SC_REG_VMUX[4:0] := 5'b10011;
        }
        
        if ( DQSCLKDIV[0] --> REGCLK[0] )
        {
            SC_REG_VMUX[4:0] := 5'b10100;
        }
        
        if ( DQSCLKDIV[1] --> REGCLK[0] )
        {
            SC_REG_VMUX[4:0] := 5'b10101;
        }
        
        if ( DQSCLKDIV[2] --> REGCLK[0] )
        {
            SC_REG_VMUX[4:0] := 5'b10110;
        }
        
        if ( DQSCLKDIV[3] --> REGCLK[0] )
        {
            SC_REG_VMUX[4:0] := 5'b10111;
        }
        
        if ( DQSCLKDIV[4] --> REGCLK[0] )
        {
            SC_REG_VMUX[4:0] := 5'b11000;
        }
        
        if ( CIM[2] --> REGCLK[1] )
        {
            SC_REG_VMUX[9:5] := 5'b01000;
        }
        
        if ( CIM[3] --> REGCLK[1] )
        {
            SC_REG_VMUX[9:5] := 5'b01001;
        }
        
        if ( PCLK[1] --> REGCLK[1] )
        {
            SC_REG_VMUX[9:5] := 5'b01010;
        }
        
        if ( PLLOUT[1] --> REGCLK[1] )
        {
            SC_REG_VMUX[9:5] := 5'b01011;
        }
        
        if ( HCLK[2] --> REGCLK[1] )
        {
            SC_REG_VMUX[9:5] := 5'b01100;
        }
        
        if ( HCLK[3] --> REGCLK[1] )
        {
            SC_REG_VMUX[9:5] := 5'b01101;
        }
        
        if ( PCS[4] --> REGCLK[1] )
        {
            SC_REG_VMUX[9:5] := 5'b01110;
        }
        
        if ( PCS[5] --> REGCLK[1] )
        {
            SC_REG_VMUX[9:5] := 5'b01111;
        }
        
        if ( PCS[6] --> REGCLK[1] )
        {
            SC_REG_VMUX[9:5] := 5'b10000;
        }
        
        if ( PCS[7] --> REGCLK[1] )
        {
            SC_REG_VMUX[9:5] := 5'b10001;
        }
        
        if ( CLKDIV[2] --> REGCLK[1] )
        {
            SC_REG_VMUX[9:5] := 5'b10010;
        }
        
        if ( CLKDIV[3] --> REGCLK[1] )
        {
            SC_REG_VMUX[9:5] := 5'b10011;
        }
        
        if ( DQSCLKDIV[5] --> REGCLK[1] )
        {
            SC_REG_VMUX[9:5] := 5'b10100;
        }
        
        if ( DQSCLKDIV[6] --> REGCLK[1] )
        {
            SC_REG_VMUX[9:5] := 5'b10101;
        }
        
        if ( DQSCLKDIV[7] --> REGCLK[1] )
        {
            SC_REG_VMUX[9:5] := 5'b10110;
        }
        
        if ( DQSCLKDIV[8] --> REGCLK[1] )
        {
            SC_REG_VMUX[9:5] := 5'b10111;
        }
        
        if ( DQSCLKDIV[9] --> REGCLK[1] )
        {
            SC_REG_VMUX[9:5] := 5'b11000;
        }
        SC_TESTMODEN_N       := 1'b0;
        SC_LOCALMODEN_N      := LOCAL_MODE;        
    }
    else // if (TEST_MODE == "ENABLE")
    {                
        SC_TESTMODEN_N       := 1'b1;
        SC_LOCALMODEN_N      := LOCAL_MODE;
    }    
}; // end of configuration cfg of REG_VMUX





