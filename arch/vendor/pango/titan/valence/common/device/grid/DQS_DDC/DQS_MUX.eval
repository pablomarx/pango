*****************************************************************

  Device    [DQS]

  Author    [clwang]

  Abstract  []

  Revision History:

********************************************************************************/
grid
device DQS_MUX
{
    port
    (
        config input SC_DLLCODESEL[1:0]     = 2'b00           /*pragma PAP_CFG_BIT_NAME = "SC_DLLCODESEL<1>, SC_DLLCODESEL<0>" */,

        input   DLL_CODE0[7:0] = 8'hff,
        input   DLL_CODE1[7:0] = 8'hff,
        input   DLL_CODE2[7:0] = 8'hff,
        input   DLL_CODE3[7:0] = 8'hff,
        
        output DLL_CODE[7:0]
    );

}// end of device DQS_MUX

/*******************************************************************************

  Device    [DQS]

  Author    []

  Abstract  [The structure netlist of DQS DDC is described in the similar fashion
             as in HDL. In unit instantiation statement, the formal pin may be
             connected to net which is declared explicitly.

             In Valence, the connection can also be made from formal pin to other
             pin or port, in which case Valence compiler shall create the net to
             fulfil the connection. The built-in naming convention is kicked in
             to name the automatically created net. However, the objects (net, instance)
             of this netlist are going to mapped from schematic. The compiler-generated
             names cause trouble for the mapping. Therefore, all wires are declared
             explicitly in the following description]

  Revision History:

********************************************************************************/
structure netlist of DQS_MUX
{
    // Routing arc specification
    routing
    {
        (
            DLL_CODE0[0] ,
            DLL_CODE1[0] ,
            DLL_CODE2[0] ,
            DLL_CODE3[0] -->  DLL_CODE[0] ) = 150;
      
        (
            DLL_CODE0[1] ,
            DLL_CODE1[1] ,
            DLL_CODE2[1] ,
            DLL_CODE3[1] -->  DLL_CODE[1] ) = 150;      
            
        (
            DLL_CODE0[2] ,
            DLL_CODE1[2] ,
            DLL_CODE2[2] ,
            DLL_CODE3[2] -->  DLL_CODE[2] ) = 150;  

        (
            DLL_CODE0[3] ,
            DLL_CODE1[3] ,
            DLL_CODE2[3] ,
            DLL_CODE3[3] -->  DLL_CODE[3] ) = 150;  
            
        (
            DLL_CODE0[4] ,
            DLL_CODE1[4] ,
            DLL_CODE2[4] ,
            DLL_CODE3[4] -->  DLL_CODE[4] ) = 150;  
            
        (
            DLL_CODE0[5] ,
            DLL_CODE1[5] ,
            DLL_CODE2[5] ,
            DLL_CODE3[5] -->  DLL_CODE[5] ) = 150; 
            
        (
            DLL_CODE0[6] ,
            DLL_CODE1[6] ,
            DLL_CODE2[6] ,
            DLL_CODE3[6] -->  DLL_CODE[6] ) = 150; 
            
        (
            DLL_CODE0[7] ,
            DLL_CODE1[7] ,
            DLL_CODE2[7] ,
            DLL_CODE3[7] -->  DLL_CODE[7] ) = 150; 

    }



}; // end of structure netlist of DQS_MUX

/*******************************************************************************

  Device    [DQS_MUX]

  Author    []

  Abstract  [Configure the configuration bits based on the value of config parameter]

  Revision History:

********************************************************************************/
configuration cfg of DQS_MUX // pragma PAP_ARC_REGULAR_ROUTING_CFG_BODY
{  
    if (DLL_CODE0[0] --> DLL_CODE[0])
    {
        SC_DLLCODESEL := 2'b00;
    }
    
    if (DLL_CODE1[0] --> DLL_CODE[0])
    {
        SC_DLLCODESEL := 2'b01;
    }
    
    if (DLL_CODE2[0] --> DLL_CODE[0])
    {
        SC_DLLCODESEL := 2'b10;
    }
    
    if (DLL_CODE3[0] --> DLL_CODE[0])
    {
        SC_DLLCODESEL := 2'b11;
    }                                                                 
}; // end of configuration cfg of DQS_MUX





