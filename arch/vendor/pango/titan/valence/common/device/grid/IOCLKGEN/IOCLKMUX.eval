*****************************************************************

  Device    [IOCLKMUX]

  Author    [clwang]

  Abstract  [IOCLK MUX]

  Revision History:

********************************************************************************/
grid
device IOCLKMUX
{
    parameter
    (
        config string TEST_MODE        = "DISABLE",    // "ENABLE" "DISABLE"
        config bit    LOCAL_MODE[3:0]  = 4'b0000       // 4'b1111 ~ 4'b0000
    );
    port
    (
        config input SC_TESTMODEN_N       = 1'b0       /*pragma PAP_CFG_BIT_NAME = "SC_TESTMODEN_N" */,
        config input SC_LOCALMODEN_N[3:0] = 4'b0000    /*pragma PAP_CFG_BIT_NAME = "SC_LOCALMODEN_N<3>, SC_LOCALMODEN_N<2>, SC_LOCALMODEN_N<1>, SC_LOCALMODEN_N<0>" */,
        config input SC_IOCLKMUX[19:0]    = 20'h0_0000
        /*pragma PAP_CFG_BIT_NAME = "SC_IOCLKMUX<19>, SC_IOCLKMUX<18>, SC_IOCLKMUX<17>, SC_IOCLKMUX<16>, SC_IOCLKMUX<15>, SC_IOCLKMUX<14>, SC_IOCLKMUX<13>, SC_IOCLKMUX<12>, SC_IOCLKMUX<11>, SC_IOCLKMUX<10>, SC_IOCLKMUX<9>, SC_IOCLKMUX<8>, SC_IOCLKMUX<7>, SC_IOCLKMUX<6>, SC_IOCLKMUX<5>, SC_IOCLKMUX<4>, SC_IOCLKMUX<3>, SC_IOCLKMUX<2>, SC_IOCLKMUX<1>, SC_IOCLKMUX<0>"*/,

       //input  SC_TESTMODEN_N,
       //input  SC_IOCLKMUX[19:0],
       //input  SC_LOCALMODEN_N[3:0],
       
       input  PCLK[11:0]      = 12'hfff,
       input  PLLOUT[7:0]     = 8'hff,
       input  CIM[3:0]        = 4'b1111,
       input  SIG_FR_CIM[4:0] = 5'h1f,
       output IOCLK[3:0]
    );
}; // end of device IOCLKMUX


/*******************************************************************************

  Device    [IOCLKMUX]

  Author    [clwang]

  Abstract  [The structure netlist of IO CLK(MUX) is described in the similar fashion 
             as in HDL. In unit instantiation statement, the formal pin may be 
             connected to net which is declared explicitly. 
             
             In Valence, the connection can also be made from formal pin to other 
             pin or port, in which case Valence compiler shall create the net to 
             fulfil the connection. The built-in naming convention is kicked in 
             to name the automatically created net. However, the objects (net, instance)
             of this netlist are going to mapped from schematic. The compiler-generated
             names cause trouble for the mapping. Therefore, all wires are declared
             explicitly in the following description]

  Revision History:

********************************************************************************/

structure netlist of IOCLKMUX
{
    routing
    {
        /*(
             PLLOUT[0] ,
             PLLOUT[1] ,
             PLLOUT[2] ,
             PLLOUT[3] ,
             PLLOUT[4] ,
             PLLOUT[5] ,
             PLLOUT[6] ,
             PLLOUT[7] ,
             PCLK[0] ,
             PCLK[1] ,
             PCLK[2] ,
             PCLK[3] ,
             PCLK[4] ,
             PCLK[5] ,
             PCLK[6] ,
             PCLK[7] ,
             PCLK[8] ,
             PCLK[9] ,
             PCLK[10] ,
             PCLK[11] ,
             CIM[0]  -->  IOCLK[0] ) = 150;

        (
             PLLOUT[0] ,
             PLLOUT[1] ,
             PLLOUT[2] ,
             PLLOUT[3] ,
             PLLOUT[4] ,
             PLLOUT[5] ,
             PLLOUT[6] ,
             PLLOUT[7] ,
             PCLK[0] ,
             PCLK[1] ,
             PCLK[2] ,
             PCLK[3] ,
             PCLK[4] ,
             PCLK[5] ,
             PCLK[6] ,
             PCLK[7] ,
             PCLK[8] ,
             PCLK[9] ,
             PCLK[10] ,
             PCLK[11] ,
             CIM[1]  -->  IOCLK[1] ) = 150;

        (
             PLLOUT[0] ,
             PLLOUT[1] ,
             PLLOUT[2] ,
             PLLOUT[3] ,
             PLLOUT[4] ,
             PLLOUT[5] ,
             PLLOUT[6] ,
             PLLOUT[7] ,
             PCLK[0] ,
             PCLK[1] ,
             PCLK[2] ,
             PCLK[3] ,
             PCLK[4] ,
             PCLK[5] ,
             PCLK[6] ,
             PCLK[7] ,
             PCLK[8] ,
             PCLK[9] ,
             PCLK[10] ,
             PCLK[11] ,
             CIM[2]  -->  IOCLK[2] ) = 150;

        (
             PLLOUT[0] ,
             PLLOUT[1] ,
             PLLOUT[2] ,
             PLLOUT[3] ,
             PLLOUT[4] ,
             PLLOUT[5] ,
             PLLOUT[6] ,
             PLLOUT[7] ,
             PCLK[0] ,
             PCLK[1] ,
             PCLK[2] ,
             PCLK[3] ,
             PCLK[4] ,
             PCLK[5] ,
             PCLK[6] ,
             PCLK[7] ,
             PCLK[8] ,
             PCLK[9] ,
             PCLK[10] ,
             PCLK[11] ,
             CIM[3]  -->  IOCLK[3] ) = 150;
*/

        ( PLLOUT[0] --> IOCLK[0] ) = 607;
        ( PLLOUT[1] --> IOCLK[0] ) = 607;
        ( PLLOUT[2] --> IOCLK[0] ) = 620;
        ( PLLOUT[3] --> IOCLK[0] ) = 620;
        ( PLLOUT[4] --> IOCLK[0] ) = 620;
        ( PLLOUT[5] --> IOCLK[0] ) = 620;
        ( PLLOUT[6] --> IOCLK[0] ) = 620;
        ( PLLOUT[7] --> IOCLK[0] ) = 620;
        ( PCLK[0] --> IOCLK[0] ) = 239;
        ( PCLK[1] --> IOCLK[0] ) = 239;
        ( PCLK[2] --> IOCLK[0] ) = 239;
        ( PCLK[3] --> IOCLK[0] ) = 239;
        ( PCLK[4] --> IOCLK[0] ) = 239;
        ( PCLK[5] --> IOCLK[0] ) = 239;
        ( PCLK[6] --> IOCLK[0] ) = 239;
        ( PCLK[7] --> IOCLK[0] ) = 239;
        ( PCLK[8] --> IOCLK[0] ) = 239;
        ( PCLK[9] --> IOCLK[0] ) = 239;
        ( PCLK[10] --> IOCLK[0] ) = 239;
        ( PCLK[11] --> IOCLK[0] ) = 239;
        ( CIM[0] --> IOCLK[0] ) = 59;
        ( PLLOUT[0] --> IOCLK[1] ) = 607;
        ( PLLOUT[1] --> IOCLK[1] ) = 607;
        ( PLLOUT[2] --> IOCLK[1] ) = 620;
        ( PLLOUT[3] --> IOCLK[1] ) = 620;
        ( PLLOUT[4] --> IOCLK[1] ) = 620;
        ( PLLOUT[5] --> IOCLK[1] ) = 620;
        ( PLLOUT[6] --> IOCLK[1] ) = 620;
        ( PLLOUT[7] --> IOCLK[1] ) = 620;
        ( PCLK[0] --> IOCLK[1] ) = 239;
        ( PCLK[1] --> IOCLK[1] ) = 239;
        ( PCLK[2] --> IOCLK[1] ) = 239;
        ( PCLK[3] --> IOCLK[1] ) = 239;
        ( PCLK[4] --> IOCLK[1] ) = 239;
        ( PCLK[5] --> IOCLK[1] ) = 239;
        ( PCLK[6] --> IOCLK[1] ) = 239;
        ( PCLK[7] --> IOCLK[1] ) = 239;
        ( PCLK[8] --> IOCLK[1] ) = 239;
        ( PCLK[9] --> IOCLK[1] ) = 239;
        ( PCLK[10] --> IOCLK[1] ) = 239;
        ( PCLK[11] --> IOCLK[1] ) = 239;
        ( CIM[1] --> IOCLK[1] ) = 59;
        ( PLLOUT[0] --> IOCLK[2] ) = 607;
        ( PLLOUT[1] --> IOCLK[2] ) = 607;
        ( PLLOUT[2] --> IOCLK[2] ) = 620;
        ( PLLOUT[3] --> IOCLK[2] ) = 620;
        ( PLLOUT[4] --> IOCLK[2] ) = 620;
        ( PLLOUT[5] --> IOCLK[2] ) = 620;
        ( PLLOUT[6] --> IOCLK[2] ) = 620;
        ( PLLOUT[7] --> IOCLK[2] ) = 620;
        ( PCLK[0] --> IOCLK[2] ) = 239;
        ( PCLK[1] --> IOCLK[2] ) = 239;
        ( PCLK[2] --> IOCLK[2] ) = 239;
        ( PCLK[3] --> IOCLK[2] ) = 239;
        ( PCLK[4] --> IOCLK[2] ) = 239;
        ( PCLK[5] --> IOCLK[2] ) = 239;
        ( PCLK[6] --> IOCLK[2] ) = 239;
        ( PCLK[7] --> IOCLK[2] ) = 239;
        ( PCLK[8] --> IOCLK[2] ) = 239;
        ( PCLK[9] --> IOCLK[2] ) = 239;
        ( PCLK[10] --> IOCLK[2] ) = 239;
        ( PCLK[11] --> IOCLK[2] ) = 239;
        ( CIM[2] --> IOCLK[2] ) = 59;
        ( PLLOUT[0] --> IOCLK[3] ) = 607;
        ( PLLOUT[1] --> IOCLK[3] ) = 607;
        ( PLLOUT[2] --> IOCLK[3] ) = 620;
        ( PLLOUT[3] --> IOCLK[3] ) = 620;
        ( PLLOUT[4] --> IOCLK[3] ) = 620;
        ( PLLOUT[5] --> IOCLK[3] ) = 620;
        ( PLLOUT[6] --> IOCLK[3] ) = 620;
        ( PLLOUT[7] --> IOCLK[3] ) = 620;
        ( PCLK[0] --> IOCLK[3] ) = 239;
        ( PCLK[1] --> IOCLK[3] ) = 239;
        ( PCLK[2] --> IOCLK[3] ) = 239;
        ( PCLK[3] --> IOCLK[3] ) = 239;
        ( PCLK[4] --> IOCLK[3] ) = 239;
        ( PCLK[5] --> IOCLK[3] ) = 239;
        ( PCLK[6] --> IOCLK[3] ) = 239;
        ( PCLK[7] --> IOCLK[3] ) = 239;
        ( PCLK[8] --> IOCLK[3] ) = 239;
        ( PCLK[9] --> IOCLK[3] ) = 239;
        ( PCLK[10] --> IOCLK[3] ) = 239;
        ( PCLK[11] --> IOCLK[3] ) = 239;
        ( CIM[3] --> IOCLK[3] ) = 59;

             
    }
    
}; // end of structure netlist of IOCLKMUX


/*******************************************************************************

  Device    [IOCLKMUX]

  Author    [clwang]

  Abstract  [Configure the configuration bits based on the value of config parameter]

  Revision History:

********************************************************************************/
configuration cfg of IOCLKMUX
{
    if (TEST_MODE == "DISABLE")
    {
        if ( PLLOUT[0] --> IOCLK[0] )
        {
            SC_IOCLKMUX[4:0] := 5'b01000;
        }
        if ( PLLOUT[1] --> IOCLK[0] )
        {
            SC_IOCLKMUX[4:0] := 5'b01001;
        }
        if ( PLLOUT[2] --> IOCLK[0] )
        {
            SC_IOCLKMUX[4:0] := 5'b01010;
        }
        if ( PLLOUT[3] --> IOCLK[0] )
        {
            SC_IOCLKMUX[4:0] := 5'b01011;
        }
        if ( PLLOUT[4] --> IOCLK[0] )
        {
            SC_IOCLKMUX[4:0] := 5'b01100;
        }
        if ( PLLOUT[5] --> IOCLK[0] )
        {
            SC_IOCLKMUX[4:0] := 5'b01101;
        }
        if ( PLLOUT[6] --> IOCLK[0] )
        {
            SC_IOCLKMUX[4:0] := 5'b01110;
        }
        if ( PLLOUT[7] --> IOCLK[0] )
        {
            SC_IOCLKMUX[4:0] := 5'b01111;
        }
        if ( PCLK[0] --> IOCLK[0] )
        {
            SC_IOCLKMUX[4:0] := 5'b10000;
        }
        if ( PCLK[1] --> IOCLK[0] )
        {
            SC_IOCLKMUX[4:0] := 5'b10001;
        }
        if ( PCLK[2] --> IOCLK[0] )
        {
            SC_IOCLKMUX[4:0] := 5'b10010;
        }
        if ( PCLK[3] --> IOCLK[0] )
        {
            SC_IOCLKMUX[4:0] := 5'b10011;
        }
        if ( PCLK[4] --> IOCLK[0] )
        {
            SC_IOCLKMUX[4:0] := 5'b10100;
        }
        if ( PCLK[5] --> IOCLK[0] )
        {
            SC_IOCLKMUX[4:0] := 5'b10101;
        }
        if ( PCLK[6] --> IOCLK[0] )
        {
            SC_IOCLKMUX[4:0] := 5'b10110;
        }
        if ( PCLK[7] --> IOCLK[0] )
        {
            SC_IOCLKMUX[4:0] := 5'b10111;
        }
        if ( PCLK[8] --> IOCLK[0] )
        {
            SC_IOCLKMUX[4:0] := 5'b11000;
        }
        if ( PCLK[9] --> IOCLK[0] )
        {
            SC_IOCLKMUX[4:0] := 5'b11001;
        }
        if ( PCLK[10] --> IOCLK[0] )
        {
            SC_IOCLKMUX[4:0] := 5'b11010;
        }
        if ( PCLK[11] --> IOCLK[0] )
        {
            SC_IOCLKMUX[4:0] := 5'b11011;
        }
        if ( CIM[0] --> IOCLK[0] )
        {
            SC_IOCLKMUX[4:0] := 5'b11100;
        }
        if ( PLLOUT[0] --> IOCLK[1] )
        {
            SC_IOCLKMUX[9:5] := 5'b01000;
        }
        if ( PLLOUT[1] --> IOCLK[1] )
        {
            SC_IOCLKMUX[9:5] := 5'b01001;
        }
        if ( PLLOUT[2] --> IOCLK[1] )
        {
            SC_IOCLKMUX[9:5] := 5'b01010;
        }
        if ( PLLOUT[3] --> IOCLK[1] )
        {
            SC_IOCLKMUX[9:5] := 5'b01011;
        }
        if ( PLLOUT[4] --> IOCLK[1] )
        {
            SC_IOCLKMUX[9:5] := 5'b01100;
        }
        if ( PLLOUT[5] --> IOCLK[1] )
        {
            SC_IOCLKMUX[9:5] := 5'b01101;
        }
        if ( PLLOUT[6] --> IOCLK[1] )
        {
            SC_IOCLKMUX[9:5] := 5'b01110;
        }
        if ( PLLOUT[7] --> IOCLK[1] )
        {
            SC_IOCLKMUX[9:5] := 5'b01111;
        }
        if ( PCLK[0] --> IOCLK[1] )
        {
            SC_IOCLKMUX[9:5] := 5'b10000;
        }
        if ( PCLK[1] --> IOCLK[1] )
        {
            SC_IOCLKMUX[9:5] := 5'b10001;
        }
        if ( PCLK[2] --> IOCLK[1] )
        {
            SC_IOCLKMUX[9:5] := 5'b10010;
        }
        if ( PCLK[3] --> IOCLK[1] )
        {
            SC_IOCLKMUX[9:5] := 5'b10011;
        }
        if ( PCLK[4] --> IOCLK[1] )
        {
            SC_IOCLKMUX[9:5] := 5'b10100;
        }
        if ( PCLK[5] --> IOCLK[1] )
        {
            SC_IOCLKMUX[9:5] := 5'b10101;
        }
        if ( PCLK[6] --> IOCLK[1] )
        {
            SC_IOCLKMUX[9:5] := 5'b10110;
        }
        if ( PCLK[7] --> IOCLK[1] )
        {
            SC_IOCLKMUX[9:5] := 5'b10111;
        }
        if ( PCLK[8] --> IOCLK[1] )
        {
            SC_IOCLKMUX[9:5] := 5'b11000;
        }
        if ( PCLK[9] --> IOCLK[1] )
        {
            SC_IOCLKMUX[9:5] := 5'b11001;
        }
        if ( PCLK[10] --> IOCLK[1] )
        {
            SC_IOCLKMUX[9:5] := 5'b11010;
        }
        if ( PCLK[11] --> IOCLK[1] )
        {
            SC_IOCLKMUX[9:5] := 5'b11011;
        }
        if ( CIM[1] --> IOCLK[1] )
        {
            SC_IOCLKMUX[9:5] := 5'b11100;
        }
        if ( PLLOUT[0] --> IOCLK[2] )
        {
            SC_IOCLKMUX[14:10] := 5'b01000;
        }
        if ( PLLOUT[1] --> IOCLK[2] )
        {
            SC_IOCLKMUX[14:10] := 5'b01001;
        }
        if ( PLLOUT[2] --> IOCLK[2] )
        {
            SC_IOCLKMUX[14:10] := 5'b01010;
        }
        if ( PLLOUT[3] --> IOCLK[2] )
        {
            SC_IOCLKMUX[14:10] := 5'b01011;
        }
        if ( PLLOUT[4] --> IOCLK[2] )
        {
            SC_IOCLKMUX[14:10] := 5'b01100;
        }
        if ( PLLOUT[5] --> IOCLK[2] )
        {
            SC_IOCLKMUX[14:10] := 5'b01101;
        }
        if ( PLLOUT[6] --> IOCLK[2] )
        {
            SC_IOCLKMUX[14:10] := 5'b01110;
        }
        if ( PLLOUT[7] --> IOCLK[2] )
        {
            SC_IOCLKMUX[14:10] := 5'b01111;
        }
        if ( PCLK[0] --> IOCLK[2] )
        {
            SC_IOCLKMUX[14:10] := 5'b10000;
        }
        if ( PCLK[1] --> IOCLK[2] )
        {
            SC_IOCLKMUX[14:10] := 5'b10001;
        }
        if ( PCLK[2] --> IOCLK[2] )
        {
            SC_IOCLKMUX[14:10] := 5'b10010;
        }
        if ( PCLK[3] --> IOCLK[2] )
        {
            SC_IOCLKMUX[14:10] := 5'b10011;
        }
        if ( PCLK[4] --> IOCLK[2] )
        {
            SC_IOCLKMUX[14:10] := 5'b10100;
        }
        if ( PCLK[5] --> IOCLK[2] )
        {
            SC_IOCLKMUX[14:10] := 5'b10101;
        }
        if ( PCLK[6] --> IOCLK[2] )
        {
            SC_IOCLKMUX[14:10] := 5'b10110;
        }
        if ( PCLK[7] --> IOCLK[2] )
        {
            SC_IOCLKMUX[14:10] := 5'b10111;
        }
        if ( PCLK[8] --> IOCLK[2] )
        {
            SC_IOCLKMUX[14:10] := 5'b11000;
        }
        if ( PCLK[9] --> IOCLK[2] )
        {
            SC_IOCLKMUX[14:10] := 5'b11001;
        }
        if ( PCLK[10] --> IOCLK[2] )
        {
            SC_IOCLKMUX[14:10] := 5'b11010;
        }
        if ( PCLK[11] --> IOCLK[2] )
        {
            SC_IOCLKMUX[14:10] := 5'b11011;
        }
        if ( CIM[2] --> IOCLK[2] )
        {
            SC_IOCLKMUX[14:10] := 5'b11100;
        }
        if ( PLLOUT[0] --> IOCLK[3] )
        {
            SC_IOCLKMUX[19:15] := 5'b01000;
        }
        if ( PLLOUT[1] --> IOCLK[3] )
        {
            SC_IOCLKMUX[19:15] := 5'b01001;
        }
        if ( PLLOUT[2] --> IOCLK[3] )
        {
            SC_IOCLKMUX[19:15] := 5'b01010;
        }
        if ( PLLOUT[3] --> IOCLK[3] )
        {
            SC_IOCLKMUX[19:15] := 5'b01011;
        }
        if ( PLLOUT[4] --> IOCLK[3] )
        {
            SC_IOCLKMUX[19:15] := 5'b01100;
        }
        if ( PLLOUT[5] --> IOCLK[3] )
        {
            SC_IOCLKMUX[19:15] := 5'b01101;
        }
        if ( PLLOUT[6] --> IOCLK[3] )
        {
            SC_IOCLKMUX[19:15] := 5'b01110;
        }
        if ( PLLOUT[7] --> IOCLK[3] )
        {
            SC_IOCLKMUX[19:15] := 5'b01111;
        }
        if ( PCLK[0] --> IOCLK[3] )
        {
            SC_IOCLKMUX[19:15] := 5'b10000;
        }
        if ( PCLK[1] --> IOCLK[3] )
        {
            SC_IOCLKMUX[19:15] := 5'b10001;
        }
        if ( PCLK[2] --> IOCLK[3] )
        {
            SC_IOCLKMUX[19:15] := 5'b10010;
        }
        if ( PCLK[3] --> IOCLK[3] )
        {
            SC_IOCLKMUX[19:15] := 5'b10011;
        }
        if ( PCLK[4] --> IOCLK[3] )
        {
            SC_IOCLKMUX[19:15] := 5'b10100;
        }
        
        if ( PCLK[5] --> IOCLK[3] )
        {
            SC_IOCLKMUX[19:15] := 5'b10101;
        }
        if ( PCLK[6] --> IOCLK[3] )
        {
            SC_IOCLKMUX[19:15] := 5'b10110;
        }
        if ( PCLK[7] --> IOCLK[3] )
        {
            SC_IOCLKMUX[19:15] := 5'b10111;
        }
        if ( PCLK[8] --> IOCLK[3] )
        {
            SC_IOCLKMUX[19:15] := 5'b11000;
        }
        if ( PCLK[9] --> IOCLK[3] )
        {
            SC_IOCLKMUX[19:15] := 5'b11001;
        }
        if ( PCLK[10] --> IOCLK[3] )
        {
            SC_IOCLKMUX[19:15] := 5'b11010;
        }
        if ( PCLK[11] --> IOCLK[3] )
        {
            SC_IOCLKMUX[19:15] := 5'b11011;
        }
        if ( CIM[3] --> IOCLK[3] )
        {
            SC_IOCLKMUX[19:15] := 5'b11100;
        }
        SC_TESTMODEN_N       := 1'b0;
        SC_LOCALMODEN_N      := LOCAL_MODE;
    }
    else //if (TEST_MODE == "ENABLE")
    {
        SC_LOCALMODEN_N := LOCAL_MODE;
        SC_TESTMODEN_N  := 1'b1      ;
    }

}; // end of configuration cfg of IOCLKMUX










