*****************************************************************

  Device    [APM]

  Author    [clwang]

  Abstract  []

  Revision History:

********************************************************************************/
grid
device APM
{
    parameter
    (
        // SC_PRAD_EN[1:0]      9:ADD9 18:ADD18 27:ADD27
        // SC_PRAD27_EN         27:ADD27
        config int OP_PRAD_A = 0, // 0, 9, 18, 27
        config int OP_PRAD_B = 0, // 0, 9, 18, 27
        // SC_M9_MODE[1:0]      9:MULT9X9
        // SC_M19_MODE[1:0]     19:MULT18X19
        // SC_M27_MODE          27:MULT27X27
        config int OP_MULT_A = 18,
        config int OP_MULT_B = 18,
        // SC_TERNARY
        config string ALU_MODE  = "DISABLE",

        config bit IR_BD_BYP   = 1'b1,

//      for Input Unit Registers
//      config bit CLK_IR[27:0]   = 28'h000_0000 ,
//      config bit CE_IR[27:0]    = 28'h000_0000 ,
//      config bit RST_IR[27:0]   = 28'h000_0000 ,
//      config bit SYNC_IR[13:0]  = 14'h0000 ,
//      config bit IR_BYP[13:0]   = 14'h0000 ,
    //==========================================================
        config bit IR_BYP_0_XA  = 1'b0 , // dxia[8:0]
        config bit IR_BYP_1_XA  = 1'b0 , // dxia[17:9]_signed
        config bit IR_BYP_2_YA  = 1'b0 , // dyia[8:0]         cyi[8:0]
        config bit IR_BYP_3_YA  = 1'b0 , // dyia[17:9]_signed cyi[17:9]_signed opcd_ir[0]
        config bit IR_BYP_4_ZA  = 1'b0 , // dzia[8:0]
        config bit IR_BYP_5_ZA  = 1'b0 , // dzia[17:9]_signed                  opcd_ir[2:1]
        config bit IR_BYP_6_ZA  = 1'b0 , // dzia[31:18]
        config bit IR_BYP_7_XB  = 1'b0 , // dxib[8:0]
        config bit IR_BYP_8_XB  = 1'b0 , // dxib[17:9]_signed
        config bit IR_BYP_9_YB  = 1'b0 , // dyib[8:0]                          opcd_ir[4:3]
        config bit IR_BYP_10_YB = 1'b0 , // dyib[17:9]_signed                  opcd_ir[5]
        config bit IR_BYP_11_ZB = 1'b0 , // dzib[8:0]                          opcd_ir[8:6]
        config bit IR_BYP_12_ZB = 1'b0 , // dzib[17:9]_signed
        config bit IR_BYP_13_ZB = 1'b0 , // dzib[31:18]
    //==========================================================
        config bit SYNC_IR_0_XA  = 1'b0, // 0: ASYNC
        config bit SYNC_IR_1_XA  = 1'b0, // 1: SYNC
        config bit SYNC_IR_2_YA  = 1'b0,
        config bit SYNC_IR_3_YA  = 1'b0,
        config bit SYNC_IR_4_ZA  = 1'b0,
        config bit SYNC_IR_5_ZA  = 1'b0,
        config bit SYNC_IR_6_ZA  = 1'b0,
        config bit SYNC_IR_7_XB  = 1'b0,
        config bit SYNC_IR_8_XB  = 1'b0,
        config bit SYNC_IR_9_YB  = 1'b0,
        config bit SYNC_IR_10_YB = 1'b0,
        config bit SYNC_IR_11_ZB = 1'b0,
        config bit SYNC_IR_12_ZB = 1'b0,
        config bit SYNC_IR_13_ZB = 1'b0,
    //==========================================================
        config bit RST_IR_0_XA[1:0]  = 2'b00, // 00: CLK0
        config bit RST_IR_1_XA[1:0]  = 2'b00, // 01: CLK1
        config bit RST_IR_2_YA[1:0]  = 2'b00, // 10: CLK2
        config bit RST_IR_3_YA[1:0]  = 2'b00, // 11: CLK3
        config bit RST_IR_4_ZA[1:0]  = 2'b00,
        config bit RST_IR_5_ZA[1:0]  = 2'b00,
        config bit RST_IR_6_ZA[1:0]  = 2'b00,
        config bit RST_IR_7_XB[1:0]  = 2'b00,
        config bit RST_IR_8_XB[1:0]  = 2'b00,
        config bit RST_IR_9_YB[1:0]  = 2'b00,
        config bit RST_IR_10_YB[1:0] = 2'b00,
        config bit RST_IR_11_ZB[1:0] = 2'b00,
        config bit RST_IR_12_ZB[1:0] = 2'b00,
        config bit RST_IR_13_ZB[1:0] = 2'b00,
    //==========================================================
        config bit CLK_IR_0_XA[1:0]  = 2'b00, // 00: RST0
        config bit CLK_IR_1_XA[1:0]  = 2'b00, // 01: RST1
        config bit CLK_IR_2_YA[1:0]  = 2'b00, // 10: RST2
        config bit CLK_IR_3_YA[1:0]  = 2'b00, // 11: RST3
        config bit CLK_IR_4_ZA[1:0]  = 2'b00,
        config bit CLK_IR_5_ZA[1:0]  = 2'b00,
        config bit CLK_IR_6_ZA[1:0]  = 2'b00,
        config bit CLK_IR_7_XB[1:0]  = 2'b00,
        config bit CLK_IR_8_XB[1:0]  = 2'b00,
        config bit CLK_IR_9_YB[1:0]  = 2'b00,
        config bit CLK_IR_10_YB[1:0] = 2'b00,
        config bit CLK_IR_11_ZB[1:0] = 2'b00,
        config bit CLK_IR_12_ZB[1:0] = 2'b00,
        config bit CLK_IR_13_ZB[1:0] = 2'b00,
    //==========================================================
        config bit CE_IR_0_XA[1:0]  = 2'b00 , // 00: CE0
        config bit CE_IR_1_XA[1:0]  = 2'b00 , // 01: CE1
        config bit CE_IR_2_YA[1:0]  = 2'b00 , // 10: CE2
        config bit CE_IR_3_YA[1:0]  = 2'b00 , // 11: CE3
        config bit CE_IR_4_ZA[1:0]  = 2'b00 ,
        config bit CE_IR_5_ZA[1:0]  = 2'b00 ,
        config bit CE_IR_6_ZA[1:0]  = 2'b00 ,
        config bit CE_IR_7_XB[1:0]  = 2'b00 ,
        config bit CE_IR_8_XB[1:0]  = 2'b00 ,
        config bit CE_IR_9_YB[1:0]  = 2'b00 ,
        config bit CE_IR_10_YB[1:0] = 2'b00 ,
        config bit CE_IR_11_ZB[1:0] = 2'b00 ,
        config bit CE_IR_12_ZB[1:0] = 2'b00 ,
        config bit CE_IR_13_ZB[1:0] = 2'b00 ,


//      for Pre-Adder Unit Registers
//      config bit CLK_PRAD[15:0]   = 16'h0000 ,
//      config bit CE_PRAD[15:0]    = 16'h0000 ,
//      config bit RST_PRAD[15:0]   = 16'h0000 ,
//      config bit SYNC_PRAD[7:0]   = 8'h00 ,
//      config bit PRADOR_BYP[7:0]  = 8'h00 ,
    //==========================================================
        config bit PRADOR_BYP_0_XA = 1'b0, // xa[8:0]
        config bit PRADOR_BYP_1_XA = 1'b0, // xa[17:9] xasigned
        config bit PRADOR_BYP_2_YA = 1'b0, // ya[8:0]             preadd_out0[8:0]
        config bit PRADOR_BYP_3_YA = 1'b0, // ya[17:9] y/zasigned preadd_out0[18:9]
        config bit PRADOR_BYP_4_XB = 1'b0, // xb[8:0]
        config bit PRADOR_BYP_5_XB = 1'b0, // xb[17:9] xbsigned
        config bit PRADOR_BYP_6_YB = 1'b0, // yb[8:0]             preadd_out1[8:0]
        config bit PRADOR_BYP_7_YB = 1'b0, // yb[17:9] y/zbsigned preadd_out1[18:9]
        config bit SYNC_PRAD_0_XA  = 1'b0,
        config bit SYNC_PRAD_1_XA  = 1'b0,
        config bit SYNC_PRAD_2_YA  = 1'b0,
        config bit SYNC_PRAD_3_YA  = 1'b0,
        config bit SYNC_PRAD_4_XB  = 1'b0,
        config bit SYNC_PRAD_5_XB  = 1'b0,
        config bit SYNC_PRAD_6_YB  = 1'b0,
        config bit SYNC_PRAD_7_YB  = 1'b0,
        config bit RST_PRAD_0_XA[1:0] = 2'b00,
        config bit RST_PRAD_1_XA[1:0] = 2'b00,
        config bit RST_PRAD_2_YA[1:0] = 2'b00,
        config bit RST_PRAD_3_YA[1:0] = 2'b00,
        config bit RST_PRAD_4_XB[1:0] = 2'b00,
        config bit RST_PRAD_5_XB[1:0] = 2'b00,
        config bit RST_PRAD_6_YB[1:0] = 2'b00,
        config bit RST_PRAD_7_YB[1:0] = 2'b00,
        config bit CLK_PRAD_0_XA[1:0] = 2'b00,
        config bit CLK_PRAD_1_XA[1:0] = 2'b00,
        config bit CLK_PRAD_2_YA[1:0] = 2'b00,
        config bit CLK_PRAD_3_YA[1:0] = 2'b00,
        config bit CLK_PRAD_4_XB[1:0] = 2'b00,
        config bit CLK_PRAD_5_XB[1:0] = 2'b00,
        config bit CLK_PRAD_6_YB[1:0] = 2'b00,
        config bit CLK_PRAD_7_YB[1:0] = 2'b00,
        config bit CE_PRAD_0_XA[1:0]  = 2'b00,
        config bit CE_PRAD_1_XA[1:0]  = 2'b00,
        config bit CE_PRAD_2_YA[1:0]  = 2'b00,
        config bit CE_PRAD_3_YA[1:0]  = 2'b00,
        config bit CE_PRAD_4_XB[1:0]  = 2'b00,
        config bit CE_PRAD_5_XB[1:0]  = 2'b00,
        config bit CE_PRAD_6_YB[1:0]  = 2'b00,
        config bit CE_PRAD_7_YB[1:0]  = 2'b00,


        // For Pipeline Register
//      config bit CLK_PR[19:0]     = 20'h0_0000 ,
//      config bit CE_PR[19:0]      = 20'h0_0000 ,
//      config bit RST_PR[19:0]     = 20'h0_0000 ,
//      config bit SYNC_PR[9:0]     = 10'h000 ,
//      config bit PR_BYP[9:0]      = 10'h000 ,
    //==================================================================
        config bit PR_BYP_0_MA = 1'b0, // pr0=mult_out0[17:0]
        config bit PR_BYP_1_MA = 1'b0, // pr0=mult_out0[36:18]
        config bit PR_BYP_2_MB = 1'b0, // pr1=mult_out1[17:0]
        config bit PR_BYP_3_MB = 1'b0, // pr1=mult_out1[36:18]
        config bit PR_BYP_4_XA = 1'b0, // pr2=asign_ext1[0]
        config bit PR_BYP_5_XB = 1'b0, // pr2=asign_ext1[1]
        config bit PR_BYP_6_YA = 1'b0, // pr2=bsign_ext1[0]
        config bit PR_BYP_7_YB = 1'b0, // pr2=bsign_ext1[1]
        config bit PR_BYP_8_ZA = 1'b0, // pr2=csign_ext1[0]
        config bit PR_BYP_9_ZB = 1'b0, // pr2=csign_ext1[1]
        config bit SYNC_PR_0_MA = 1'b0,
        config bit SYNC_PR_1_MA = 1'b0,
        config bit SYNC_PR_2_MB = 1'b0,
        config bit SYNC_PR_3_MB = 1'b0,
        config bit SYNC_PR_4_XA = 1'b0,
        config bit SYNC_PR_5_XB = 1'b0,
        config bit SYNC_PR_6_YA = 1'b0,
        config bit SYNC_PR_7_YB = 1'b0,
        config bit SYNC_PR_8_ZA = 1'b0,
        config bit SYNC_PR_9_ZB = 1'b0,
        config bit RST_PR_0_MA[1:0] = 2'b00,
        config bit RST_PR_1_MA[1:0] = 2'b00,
        config bit RST_PR_2_MB[1:0] = 2'b00,
        config bit RST_PR_3_MB[1:0] = 2'b00,
        config bit RST_PR_4_XA[1:0] = 2'b00,
        config bit RST_PR_5_XB[1:0] = 2'b00,
        config bit RST_PR_6_YA[1:0] = 2'b00,
        config bit RST_PR_7_YB[1:0] = 2'b00,
        config bit RST_PR_8_ZA[1:0] = 2'b00,
        config bit RST_PR_9_ZB[1:0] = 2'b00,
        config bit CLK_PR_0_MA[1:0] = 2'b00,
        config bit CLK_PR_1_MA[1:0] = 2'b00,
        config bit CLK_PR_2_MB[1:0] = 2'b00,
        config bit CLK_PR_3_MB[1:0] = 2'b00,
        config bit CLK_PR_4_XA[1:0] = 2'b00,
        config bit CLK_PR_5_XB[1:0] = 2'b00,
        config bit CLK_PR_6_YA[1:0] = 2'b00,
        config bit CLK_PR_7_YB[1:0] = 2'b00,
        config bit CLK_PR_8_ZA[1:0] = 2'b00,
        config bit CLK_PR_9_ZB[1:0] = 2'b00,
        config bit CE_PR_0_MA[1:0]  = 2'b00,
        config bit CE_PR_1_MA[1:0]  = 2'b00,
        config bit CE_PR_2_MB[1:0]  = 2'b00,
        config bit CE_PR_3_MB[1:0]  = 2'b00,
        config bit CE_PR_4_XA[1:0]  = 2'b00,
        config bit CE_PR_5_XB[1:0]  = 2'b00,
        config bit CE_PR_6_YA[1:0]  = 2'b00,
        config bit CE_PR_7_YB[1:0]  = 2'b00,
        config bit CE_PR_8_ZA[1:0]  = 2'b00,
        config bit CE_PR_9_ZB[1:0]  = 2'b00,


        // For Output Register
//      config bit CLK_OR[7:0]      = 8'h00 ,
//      config bit CE_OR[7:0]       = 8'h00 ,
//      config bit RST_OR[7:0]      = 8'h00 ,
//      config bit SYNC_OR[3:0]     = 4'h0 ,
//      config bit OR_BYP[3:0]      = 4'h0 ,
    //==================================================================
        config bit OR_BYP_0_A  = 1'b0 , // or0=osel0[17:0]
        config bit OR_BYP_1_A  = 1'b0 , // or0=osel0[36:18]
        config bit OR_BYP_2_B  = 1'b0 , // or1=osel1[17:0] cr=alu_r[64]
        config bit OR_BYP_3_B  = 1'b0 , // or1=osel1[36:18]
        config bit SYNC_OR_0_A = 1'b0 ,
        config bit SYNC_OR_1_A = 1'b0 ,
        config bit SYNC_OR_2_B = 1'b0 ,
        config bit SYNC_OR_3_B = 1'b0 ,
        config bit RST_OR_0_A[1:0] = 2'b00 ,
        config bit RST_OR_1_A[1:0] = 2'b00 ,
        config bit RST_OR_2_B[1:0] = 2'b00 ,
        config bit RST_OR_3_B[1:0] = 2'b00 ,
        config bit CLK_OR_0_A[1:0] = 2'b00 ,
        config bit CLK_OR_1_A[1:0] = 2'b00 ,
        config bit CLK_OR_2_B[1:0] = 2'b00 ,
        config bit CLK_OR_3_B[1:0] = 2'b00 ,
        config bit CE_OR_0_A[1:0] = 2'b00 ,
        config bit CE_OR_1_A[1:0] = 2'b00 ,
        config bit CE_OR_2_B[1:0] = 2'b00 ,
        config bit CE_OR_3_B[1:0] = 2'b00 ,

        // For post adder opcode input Register
        config bit CTRL_IRBYP_0_OP0 = 1'b0, // APM_OP_POST[6:0]
        config bit CTRL_IRBYP_1_OP7 = 1'b0, // APM_OP_POST[7]
        config bit CTRL_IRBYP_2_OPA = 1'b0, // APM_OP_PRAD[0]
        config bit CTRL_IRBYP_3_OPB = 1'b0, // APM_OP_PRAD[1]
        config bit CTRL_IRBYP_4_OP8 = 1'b0, // APM_OP_POST[10:8]
        config bit SYNC_CTIR[3:0]   = 4'h0,
        config bit CLK_CTIR[7:0]    = 8'h00,
        config bit CE_CTIR[7:0]     = 8'h00,
        config bit RST_CTIR[7:0]    = 8'h00,

        // For post adder opcode pipeline Register
        config bit CTRL_PRBYP_0_OP0 = 1'b0, // APM_OP_POST[6:0]
        config bit CTRL_PRBYP_1_OP7 = 1'b0, // APM_OP_POST[7]
        config bit CTRL_PRBYP_2_OP8 = 1'b0, // APM_OP_POST[10:8]
        config bit SYNC_CTPR[1:0]   = 2'b00,
        config bit CLK_CTPR[3:0]    = 4'b0000,
        config bit CE_CTPR[3:0]     = 4'b0000,
        config bit RST_CTPR[3:0]    = 4'b0000,

        //For apm_op_ir[8:0] input register bypass enable
        config bit OPCD_BYP[8:0]    = 9'b0_0000_0000 ,

        config bit DXIA_SIGNED_POL = 1'b0, // dxia_signed/dxib_signed polarity setting
        config bit DYIA_SIGNED_POL = 1'b0,
        config bit DZIA_SIGNED_POL = 1'b0, // dyia_signed/dyib_signed polarity setting
        config bit DXIB_SIGNED_POL = 1'b0,
        config bit DYIB_SIGNED_POL = 1'b0, // dzia_signed/dzib_signed polarity setting
        config bit DZIB_SIGNED_POL = 1'b0,

        config bit SIGNED_ENA[1:0] = 2'b00,
        config bit SIGNED_ENB[1:0] = 2'b00,
        config bit SIGNED_ENC[1:0] = 2'b00,

        config bit OPCD[10:0]         = 11'b000_0000_0000, // post adder statice opcode
        config bit OPCD_DYN_SEL[10:0] = 11'b000_0000_0000, // post adder opcode dynamic input enable
        config bit OPCD_DYN_POL[10:0] = 11'b000_0000_0000, // post adder opcode dynamic input polarity setting

        // APM_OP_PRAD polarity 0:inverted 1:normal
        config bit OP_PRAD_A_POL = 1'b0,
        config bit OP_PRAD_B_POL = 1'b0,

        // For input unit output PSE bits
        config bit DXIA_PSE[16:0]   = 17'h0_0000 ,
        config bit DXIB_PSE[16:0]   = 17'h0_0000 ,
        config bit DYIA_PSE[16:0]   = 17'h0_0000 ,
        config bit DYIB_PSE[16:0]   = 17'h0_0000 ,
        config bit DZIA_PSE[31:0]    = 32'h0000_0000 ,
        config bit DZIB_PSE[30:0]    = 31'h0000_0000 ,
        config bit PSE64            = 1'b0 ,

        // CYO signed output selector   ? 0:from bd0 output  1:from bd1 output
        config bit CYSIGNED_SEL     = 1'b0,
        // CZO signed output selector   ? 0:from IR0 output  1:from IR1 output
        config bit CZSIGNED_SEL     = 1'b0,


        // For DXIA data & signed input mux constant inputs
        config bit CONST_IA0[18:0]  = 19'h0_0000 ,
        // For DXIB data & signed input mux constant inputs
        config bit CONST_IA1[18:0]  = 19'h0_0000 ,

        // For DXIA/B data & signed input mux selector
        config bit SOURCEA[1:0]     = 2'b00 , // bit1: for DXIB  bit0: for DXIA
        // For DYIA/B data & signed input mux selector
        config bit SOURCEB[1:0]     = 2'b00 ,
        // For DZIA/B data & signed input mux selector
        config bit SOURCEC[1:0]     = 2'b00 ,

        // For DYIA/B data & signed input mux dynamic selector enable
        config bit IRDSEL_B[1:0]    = 2'b00 ,

        // For DYIB data & signed input premux selector
        config bit IRSHF_B_SEL      = 1'b0 ,
        config bit IRSHF_C_SEL      = 1'b0 ,

        //For DZIA data & signed input mux dynamic selector enable
        config bit IRDSEL_C[1:0]    = 2'b00 ,
        // For DZIA input register dynamic bypass enable
        config bit DBYP_C[1:0]      = 2'b00 ,

        // IRB shift enable
        config bit IRB_SHFEN[1:0]   = 2'b00 ,

        // IRC shift enable
        config bit IRC_SHFEN[1:0]   = 2'b00 ,

        // Output to CIM enable
//      config bit OR2CIM_EN[3:0]   = 4'b0000 ,
        config bit OR2CIM_EN_0_A  = 1'b0, // DPO[17:0]  = or_out0[17:0]
        config bit OR2CIM_EN_1_A  = 1'b0, // DPO[36:18] = or_out0[36:18]
        config bit OR2CIM_EN_2_B  = 1'b0, // DPO[54:37] = or_out1[17:0]
        config bit OR2CIM_EN_3_B  = 1'b0, // DPO[73:55] = or_out1[36:18]

        // Output cascading enable
        //              CPO[64:0] = {alu_cout_reg, or_out1[27:0], or_out0[35:0]}
        config bit OR2CASCADE_EN  = 1'b0 ,

        config bit TERNARY          = 1'b0 ,
        config bit MMC_DIS_C        = 1'b0 ,

        // For Post adder flag calculate
        config bit ALU_FLAGEN       = 1'b0 ,
        config bit ALU_MASKPATSEL   = 1'b0 ,
        config bit ALU_MCPATSEL     = 1'b0 ,
        config bit MCPAT[63:0]      = 64'h0000_0000_0000_0000 ,
        config bit MASKPAT[63:0]    = 64'h0000_0000_0000_0000 ,
        config bit MASK01[64:0]     = 65'h0_0000_0000_0000_0000 ,
        config bit RTI[63:0]        = 64'h0000_0000_0000_0000 ,
        config bit CSIGN_EXT        = 1'b0 ,
        config bit CSIGN_PRE        = 1'b0 ,
        config bit SIGN_SELIR[1:0]  = 2'b00 ,
        config bit CR64_SAB         = 1'b0 ,
        config bit SEL_SAB_CR27     = 1'b0 ,
        config bit SEL_SAB_CR59     = 1'b0 ,
        config bit SEL_SYO          = 1'b0 ,
        config bit SEL_SZO          = 1'b0 ,

        // Global Reset enable
        config bit GRS_DIS          = 1'b0,
        config bit PRAD_FIR_INPUT_OP[7:0] = 8'b0000_0000
    );
    port
    (
        // For Input unit Register
        config input SC_CLK_IR[27:0]    = 28'h000_0000
        /*pragma PAP_CFG_BIT_NAME = "SC_CLK_IR<27>, SC_CLK_IR<26>, SC_CLK_IR<25>, SC_CLK_IR<24>, SC_CLK_IR<23>, SC_CLK_IR<22>, SC_CLK_IR<21>, SC_CLK_IR<20>, SC_CLK_IR<19>, SC_CLK_IR<18>, SC_CLK_IR<17>, SC_CLK_IR<16>, SC_CLK_IR<15>, SC_CLK_IR<14>, SC_CLK_IR<13>, SC_CLK_IR<12>, SC_CLK_IR<11>, SC_CLK_IR<10>, SC_CLK_IR<9>, SC_CLK_IR<8>, SC_CLK_IR<7>, SC_CLK_IR<6>, SC_CLK_IR<5>, SC_CLK_IR<4>, SC_CLK_IR<3>, SC_CLK_IR<2>, SC_CLK_IR<1>, SC_CLK_IR<0>"*/,

        config input SC_CE_IR[27:0]     = 28'h000_0000
        /*pragma PAP_CFG_BIT_NAME = "SC_CE_IR<27>, SC_CE_IR<26>, SC_CE_IR<25>, SC_CE_IR<24>, SC_CE_IR<23>, SC_CE_IR<22>, SC_CE_IR<21>, SC_CE_IR<20>, SC_CE_IR<19>, SC_CE_IR<18>, SC_CE_IR<17>, SC_CE_IR<16>, SC_CE_IR<15>, SC_CE_IR<14>, SC_CE_IR<13>, SC_CE_IR<12>, SC_CE_IR<11>, SC_CE_IR<10>, SC_CE_IR<9>, SC_CE_IR<8>, SC_CE_IR<7>, SC_CE_IR<6>, SC_CE_IR<5>, SC_CE_IR<4>, SC_CE_IR<3>, SC_CE_IR<2>, SC_CE_IR<1>, SC_CE_IR<0>"*/,

        config input SC_RST_IR[27:0]    = 28'h000_0000
        /*pragma PAP_CFG_BIT_NAME = "SC_RST_IR<27>, SC_RST_IR<26>, SC_RST_IR<25>, SC_RST_IR<24>, SC_RST_IR<23>, SC_RST_IR<22>, SC_RST_IR<21>, SC_RST_IR<20>, SC_RST_IR<19>, SC_RST_IR<18>, SC_RST_IR<17>, SC_RST_IR<16>, SC_RST_IR<15>, SC_RST_IR<14>, SC_RST_IR<13>, SC_RST_IR<12>, SC_RST_IR<11>, SC_RST_IR<10>, SC_RST_IR<9>, SC_RST_IR<8>, SC_RST_IR<7>, SC_RST_IR<6>, SC_RST_IR<5>, SC_RST_IR<4>, SC_RST_IR<3>, SC_RST_IR<2>, SC_RST_IR<1>, SC_RST_IR<0>"*/,

        config input SC_SYNC_IR[13:0]   = 14'h0000
        /*pragma PAP_CFG_BIT_NAME = "SC_SYNC_IR<13>, SC_SYNC_IR<12>, SC_SYNC_IR<11>, SC_SYNC_IR<10>, SC_SYNC_IR<9>, SC_SYNC_IR<8>, SC_SYNC_IR<7>, SC_SYNC_IR<6>, SC_SYNC_IR<5>, SC_SYNC_IR<4>, SC_SYNC_IR<3>, SC_SYNC_IR<2>, SC_SYNC_IR<1>, SC_SYNC_IR<0>"*/,
        config input SC_IR_BYP[13:0]    = 14'h0000
        /*pragma PAP_CFG_BIT_NAME = "SC_IR_BYP<13>, SC_IR_BYP<12>, SC_IR_BYP<11>, SC_IR_BYP<10>, SC_IR_BYP<9>, SC_IR_BYP<8>, SC_IR_BYP<7>, SC_IR_BYP<6>, SC_IR_BYP<5>, SC_IR_BYP<4>, SC_IR_BYP<3>, SC_IR_BYP<2>, SC_IR_BYP<1>, SC_IR_BYP<0>"*/,

        // For Preadd unit  Register
        config input SC_CLK_PRAD[15:0]  = 16'h0000
        /*pragma PAP_CFG_BIT_NAME = "SC_CLK_PRAD<15>, SC_CLK_PRAD<14>, SC_CLK_PRAD<13>, SC_CLK_PRAD<12>, SC_CLK_PRAD<11>, SC_CLK_PRAD<10>, SC_CLK_PRAD<9>, SC_CLK_PRAD<8>, SC_CLK_PRAD<7>, SC_CLK_PRAD<6>, SC_CLK_PRAD<5>, SC_CLK_PRAD<4>, SC_CLK_PRAD<3>, SC_CLK_PRAD<2>, SC_CLK_PRAD<1>, SC_CLK_PRAD<0>"*/,

        config input SC_CE_PRAD[15:0]   = 16'h0000
        /*pragma PAP_CFG_BIT_NAME = "SC_CE_PRAD<15>, SC_CE_PRAD<14>, SC_CE_PRAD<13>, SC_CE_PRAD<12>, SC_CE_PRAD<11>, SC_CE_PRAD<10>, SC_CE_PRAD<9>, SC_CE_PRAD<8>, SC_CE_PRAD<7>, SC_CE_PRAD<6>, SC_CE_PRAD<5>, SC_CE_PRAD<4>, SC_CE_PRAD<3>, SC_CE_PRAD<2>, SC_CE_PRAD<1>, SC_CE_PRAD<0>"*/,

        config input SC_RST_PRAD[15:0]  = 16'h0000
        /*pragma PAP_CFG_BIT_NAME = "SC_RST_PRAD<15>, SC_RST_PRAD<14>, SC_RST_PRAD<13>, SC_RST_PRAD<12>, SC_RST_PRAD<11>, SC_RST_PRAD<10>, SC_RST_PRAD<9>, SC_RST_PRAD<8>, SC_RST_PRAD<7>, SC_RST_PRAD<6>, SC_RST_PRAD<5>, SC_RST_PRAD<4>, SC_RST_PRAD<3>, SC_RST_PRAD<2>, SC_RST_PRAD<1>, SC_RST_PRAD<0>"*/,

        config input SC_SYNC_PRAD[7:0]  = 8'h00
        /*pragma PAP_CFG_BIT_NAME = "SC_SYNC_PRAD<7>, SC_SYNC_PRAD<6>, SC_SYNC_PRAD<5>, SC_SYNC_PRAD<4>, SC_SYNC_PRAD<3>, SC_SYNC_PRAD<2>, SC_SYNC_PRAD<1>, SC_SYNC_PRAD<0>"*/,

        config input SC_PRADOR_BYP[7:0] = 8'h00
        /*pragma PAP_CFG_BIT_NAME = "SC_PRADOR_BYP<7>, SC_PRADOR_BYP<6>, SC_PRADOR_BYP<5>, SC_PRADOR_BYP<4>, SC_PRADOR_BYP<3>, SC_PRADOR_BYP<2>, SC_PRADOR_BYP<1>, SC_PRADOR_BYP<0>"*/,

        // For Pipeline Register
        config input SC_CLK_PR[19:0]    = 20'h0_0000
        /*pragma PAP_CFG_BIT_NAME = "SC_CLK_PR<19>, SC_CLK_PR<18>, SC_CLK_PR<17>, SC_CLK_PR<16>, SC_CLK_PR<15>, SC_CLK_PR<14>, SC_CLK_PR<13>, SC_CLK_PR<12>, SC_CLK_PR<11>, SC_CLK_PR<10>, SC_CLK_PR<9>, SC_CLK_PR<8>, SC_CLK_PR<7>, SC_CLK_PR<6>, SC_CLK_PR<5>, SC_CLK_PR<4>, SC_CLK_PR<3>, SC_CLK_PR<2>, SC_CLK_PR<1>, SC_CLK_PR<0>"*/,

        config input SC_CE_PR[19:0]     = 20'h0_0000
        /*pragma PAP_CFG_BIT_NAME = "SC_CE_PR<19>, SC_CE_PR<18>, SC_CE_PR<17>, SC_CE_PR<16>, SC_CE_PR<15>, SC_CE_PR<14>, SC_CE_PR<13>, SC_CE_PR<12>, SC_CE_PR<11>, SC_CE_PR<10>, SC_CE_PR<9>, SC_CE_PR<8>, SC_CE_PR<7>, SC_CE_PR<6>, SC_CE_PR<5>, SC_CE_PR<4>, SC_CE_PR<3>, SC_CE_PR<2>, SC_CE_PR<1>, SC_CE_PR<0>"*/,

        config input SC_RST_PR[19:0]    = 20'h0_0000
        /*pragma PAP_CFG_BIT_NAME = "SC_RST_PR<19>, SC_RST_PR<18>, SC_RST_PR<17>, SC_RST_PR<16>, SC_RST_PR<15>, SC_RST_PR<14>, SC_RST_PR<13>, SC_RST_PR<12>, SC_RST_PR<11>, SC_RST_PR<10>, SC_RST_PR<9>, SC_RST_PR<8>, SC_RST_PR<7>, SC_RST_PR<6>, SC_RST_PR<5>, SC_RST_PR<4>, SC_RST_PR<3>, SC_RST_PR<2>, SC_RST_PR<1>, SC_RST_PR<0>"*/,

        config input SC_SYNC_PR[9:0]    = 10'h000
        /*pragma PAP_CFG_BIT_NAME = "SC_SYNC_PR<9>, SC_SYNC_PR<8>, SC_SYNC_PR<7>, SC_SYNC_PR<6>, SC_SYNC_PR<5>, SC_SYNC_PR<4>, SC_SYNC_PR<3>, SC_SYNC_PR<2>, SC_SYNC_PR<1>, SC_SYNC_PR<0>"*/,

        config input SC_PR_BYP[9:0]     = 10'h000
        /*pragma PAP_CFG_BIT_NAME = "SC_PR_BYP<9>, SC_PR_BYP<8>, SC_PR_BYP<7>, SC_PR_BYP<6>, SC_PR_BYP<5>, SC_PR_BYP<4>, SC_PR_BYP<3>, SC_PR_BYP<2>, SC_PR_BYP<1>, SC_PR_BYP<0>"*/,

        // For Output Register
        config input SC_CLK_OR[7:0]     = 8'h00
        /*pragma PAP_CFG_BIT_NAME = "SC_CLK_OR<7>, SC_CLK_OR<6>, SC_CLK_OR<5>, SC_CLK_OR<4>, SC_CLK_OR<3>, SC_CLK_OR<2>, SC_CLK_OR<1>, SC_CLK_OR<0>"*/,

        config input SC_CE_OR[7:0]      = 8'h00
        /*pragma PAP_CFG_BIT_NAME = "SC_CE_OR<7>, SC_CE_OR<6>, SC_CE_OR<5>, SC_CE_OR<4>, SC_CE_OR<3>, SC_CE_OR<2>, SC_CE_OR<1>, SC_CE_OR<0>"*/,

        config input SC_RST_OR[7:0]     = 8'h00
        /*pragma PAP_CFG_BIT_NAME = "SC_RST_OR<7>, SC_RST_OR<6>, SC_RST_OR<5>, SC_RST_OR<4>, SC_RST_OR<3>, SC_RST_OR<2>, SC_RST_OR<1>, SC_RST_OR<0>"*/,

        config input SC_SYNC_OR[3:0]    = 4'b0000
        /*pragma PAP_CFG_BIT_NAME = "SC_SYNC_OR<3>, SC_SYNC_OR<2>, SC_SYNC_OR<1>, SC_SYNC_OR<0>"*/,

        config input SC_OR_BYP[3:0]     = 4'b0000
        /*pragma PAP_CFG_BIT_NAME = "SC_OR_BYP<3>, SC_OR_BYP<2>, SC_OR_BYP<1>, SC_OR_BYP<0>"*/,

        config input SC_CLK_CTIR[7:0]   = 8'h00
        /*pragma PAP_CFG_BIT_NAME = "SC_CLK_CTIR<7>, SC_CLK_CTIR<6>, SC_CLK_CTIR<5>, SC_CLK_CTIR<4>, SC_CLK_CTIR<3>, SC_CLK_CTIR<2>, SC_CLK_CTIR<1>, SC_CLK_CTIR<0>"*/,

        config input SC_CE_CTIR[7:0]    = 8'h00
        /*pragma PAP_CFG_BIT_NAME = "SC_CE_CTIR<7>, SC_CE_CTIR<6>, SC_CE_CTIR<5>, SC_CE_CTIR<4>, SC_CE_CTIR<3>, SC_CE_CTIR<2>, SC_CE_CTIR<1>, SC_CE_CTIR<0>"*/,

        config input SC_RST_CTIR[7:0]   = 8'h00
        /*pragma PAP_CFG_BIT_NAME = "SC_RST_CTIR<7>, SC_RST_CTIR<6>, SC_RST_CTIR<5>, SC_RST_CTIR<4>, SC_RST_CTIR<3>, SC_RST_CTIR<2>, SC_RST_CTIR<1>, SC_RST_CTIR<0>"*/,

        config input SC_SYNC_CTIR[3:0]  = 4'b0000
        /*pragma PAP_CFG_BIT_NAME = "SC_SYNC_CTIR<3>, SC_SYNC_CTIR<2>, SC_SYNC_CTIR<1>, SC_SYNC_CTIR<0>"*/,

        config input SC_CTRL_IRBYP[4:0] = 5'b0_0000
        /*pragma PAP_CFG_BIT_NAME = "SC_CTRL_IRBYP<4>, SC_CTRL_IRBYP<3>, SC_CTRL_IRBYP<2>, SC_CTRL_IRBYP<1>, SC_CTRL_IRBYP<0>"*/,

        config input SC_CLK_CTPR[3:0]   = 4'b0000 /*pragma PAP_CFG_BIT_NAME = "SC_CLK_CTPR<3>, SC_CLK_CTPR<2>, SC_CLK_CTPR<1>, SC_CLK_CTPR<0>"*/,
        config input SC_CE_CTPR[3:0]    = 4'b0000 /*pragma PAP_CFG_BIT_NAME = "SC_CE_CTPR<3>, SC_CE_CTPR<2>, SC_CE_CTPR<1>, SC_CE_CTPR<0>"*/,
        config input SC_RST_CTPR[3:0]   = 4'b0000 /*pragma PAP_CFG_BIT_NAME = "SC_RST_CTPR<3>, SC_RST_CTPR<2>, SC_RST_CTPR<1>, SC_RST_CTPR<0>"*/,
        config input SC_SYNC_CTPR[1:0]  = 2'b00  /*pragma PAP_CFG_BIT_NAME = "SC_SYNC_CTPR<1>, SC_SYNC_CTPR<0>"*/,
        config input SC_CTRL_PRBYP[2:0] = 3'b000 /*pragma PAP_CFG_BIT_NAME = "SC_CTRL_PRBYP<2>, SC_CTRL_PRBYP<1>, SC_CTRL_PRBYP<0>"*/,

        config input SC_OPCD_BYP[8:0]   = 9'b0_0000_0000
        /*pragma PAP_CFG_BIT_NAME = "SC_OPCD_BYP<8>, SC_OPCD_BYP<7>, SC_OPCD_BYP<6>, SC_OPCD_BYP<5>, SC_OPCD_BYP<4>, SC_OPCD_BYP<3>, SC_OPCD_BYP<2>, SC_OPCD_BYP<1>, SC_OPCD_BYP<0>"*/,

        config input SC_ASIGN_POL[1:0]  = 2'b00 /*pragma PAP_CFG_BIT_NAME = "SC_ASIGN_POL<1>, SC_ASIGN_POL<0>"*/,
        config input SC_BSIGN_POL[1:0]  = 2'b00 /*pragma PAP_CFG_BIT_NAME = "SC_BSIGN_POL<1>, SC_BSIGN_POL<0>"*/,
        config input SC_CSIGN_POL[1:0]  = 2'b00 /*pragma PAP_CFG_BIT_NAME = "SC_CSIGN_POL<1>, SC_CSIGN_POL<0>"*/,

        config input SC_SIGNED_ENA[1:0] = 2'b00 /*pragma PAP_CFG_BIT_NAME = "SC_SIGNED_ENA<1>, SC_SIGNED_ENA<0>"*/,
        config input SC_SIGNED_ENB[1:0] = 2'b00 /*pragma PAP_CFG_BIT_NAME = "SC_SIGNED_ENB<1>, SC_SIGNED_ENB<0>"*/,
        config input SC_SIGNED_ENC[1:0] = 2'b00 /*pragma PAP_CFG_BIT_NAME = "SC_SIGNED_ENC<1>, SC_SIGNED_ENC<0>"*/,

        config input SC_OPCD_DYN_SEL[10:0]  = 11'b000_0000_0000
        /*pragma PAP_CFG_BIT_NAME = "SC_OPCD_DYN_SEL<10>,SC_OPCD_DYN_SEL<9>,SC_OPCD_DYN_SEL<8>, SC_OPCD_DYN_SEL<7>, SC_OPCD_DYN_SEL<6>, SC_OPCD_DYN_SEL<5>, SC_OPCD_DYN_SEL<4>, SC_OPCD_DYN_SEL<3>, SC_OPCD_DYN_SEL<2>, SC_OPCD_DYN_SEL<1>, SC_OPCD_DYN_SEL<0>"*/,

        config input SC_OPCD_DYN_POL[10:0]  = 11'b000_0000_0000
        /*pragma PAP_CFG_BIT_NAME = "SC_OPCD_DYN_POL<10>, SC_OPCD_DYN_POL<9>, SC_OPCD_DYN_POL<8>, SC_OPCD_DYN_POL<7>, SC_OPCD_DYN_POL<6>, SC_OPCD_DYN_POL<5>, SC_OPCD_DYN_POL<4>, SC_OPCD_DYN_POL<3>, SC_OPCD_DYN_POL<2>, SC_OPCD_DYN_POL<1>, SC_OPCD_DYN_POL<0>"*/,

        config input SC_OPCD[10:0]      = 11'b000_0000_0000
        /*pragma PAP_CFG_BIT_NAME = "SC_OPCD<10>, SC_OPCD<9>, SC_OPCD<8>, SC_OPCD<7>, SC_OPCD<6>, SC_OPCD<5>, SC_OPCD<4>, SC_OPCD<3>, SC_OPCD<2>, SC_OPCD<1>, SC_OPCD<0>"*/,

        config input SC_OPCDPA_POL[1:0] = 2'b00 /*pragma PAP_CFG_BIT_NAME = "SC_OPCDPA_POL<1>, SC_OPCDPA_POL<0>"*/,

        config input SC_IRA_PSE0[16:0]  = 17'h0_0000
        /*pragma PAP_CFG_BIT_NAME = "SC_IRA_PSE0<16>, SC_IRA_PSE0<15>, SC_IRA_PSE0<14>, SC_IRA_PSE0<13>, SC_IRA_PSE0<12>, SC_IRA_PSE0<11>, SC_IRA_PSE0<10>, SC_IRA_PSE0<9>, SC_IRA_PSE0<8>, SC_IRA_PSE0<7>, SC_IRA_PSE0<6>, SC_IRA_PSE0<5>, SC_IRA_PSE0<4>, SC_IRA_PSE0<3>, SC_IRA_PSE0<2>, SC_IRA_PSE0<1>, SC_IRA_PSE0<0>"*/,

        config input SC_IRA_PSE1[16:0]  = 17'h0_0000
        /*pragma PAP_CFG_BIT_NAME = "SC_IRA_PSE1<16>, SC_IRA_PSE1<15>, SC_IRA_PSE1<14>, SC_IRA_PSE1<13>, SC_IRA_PSE1<12>, SC_IRA_PSE1<11>, SC_IRA_PSE1<10>, SC_IRA_PSE1<9>, SC_IRA_PSE1<8>, SC_IRA_PSE1<7>, SC_IRA_PSE1<6>, SC_IRA_PSE1<5>, SC_IRA_PSE1<4>, SC_IRA_PSE1<3>, SC_IRA_PSE1<2>, SC_IRA_PSE1<1>, SC_IRA_PSE1<0>"*/,

        config input SC_IRB_PSE0[16:0]  = 17'h0_0000
        /*pragma PAP_CFG_BIT_NAME = "SC_IRB_PSE0<16>, SC_IRB_PSE0<15>, SC_IRB_PSE0<14>, SC_IRB_PSE0<13>, SC_IRB_PSE0<12>, SC_IRB_PSE0<11>, SC_IRB_PSE0<10>, SC_IRB_PSE0<9>, SC_IRB_PSE0<8>, SC_IRB_PSE0<7>, SC_IRB_PSE0<6>, SC_IRB_PSE0<5>, SC_IRB_PSE0<4>, SC_IRB_PSE0<3>, SC_IRB_PSE0<2>, SC_IRB_PSE0<1>, SC_IRB_PSE0<0>"*/,

        config input SC_IRB_PSE1[16:0]  = 17'h0_0000
        /*pragma PAP_CFG_BIT_NAME = "SC_IRB_PSE1<16>, SC_IRB_PSE1<15>, SC_IRB_PSE1<14>, SC_IRB_PSE1<13>, SC_IRB_PSE1<12>, SC_IRB_PSE1<11>, SC_IRB_PSE1<10>, SC_IRB_PSE1<9>, SC_IRB_PSE1<8>, SC_IRB_PSE1<7>, SC_IRB_PSE1<6>, SC_IRB_PSE1<5>, SC_IRB_PSE1<4>, SC_IRB_PSE1<3>, SC_IRB_PSE1<2>, SC_IRB_PSE1<1>, SC_IRB_PSE1<0>"*/,

        config input SC_IRC_PSE[62:0]   = 63'h0000_0000_0000_0000
        /*pragma PAP_CFG_BIT_NAME = "SC_IRC_PSE<62>, SC_IRC_PSE<61>, SC_IRC_PSE<60>, SC_IRC_PSE<59>, SC_IRC_PSE<58>, SC_IRC_PSE<57>, SC_IRC_PSE<56>, SC_IRC_PSE<55>, SC_IRC_PSE<54>, SC_IRC_PSE<53>, SC_IRC_PSE<52>, SC_IRC_PSE<51>, SC_IRC_PSE<50>, SC_IRC_PSE<49>, SC_IRC_PSE<48>, SC_IRC_PSE<47>, SC_IRC_PSE<46>, SC_IRC_PSE<45>, SC_IRC_PSE<44>, SC_IRC_PSE<43>, SC_IRC_PSE<42>, SC_IRC_PSE<41>, SC_IRC_PSE<40>, SC_IRC_PSE<39>, SC_IRC_PSE<38>, SC_IRC_PSE<37>, SC_IRC_PSE<36>, SC_IRC_PSE<35>, SC_IRC_PSE<34>, SC_IRC_PSE<33>, SC_IRC_PSE<32>, SC_IRC_PSE<31>, SC_IRC_PSE<30>, SC_IRC_PSE<29>, SC_IRC_PSE<28>, SC_IRC_PSE<27>, SC_IRC_PSE<26>, SC_IRC_PSE<25>, SC_IRC_PSE<24>, SC_IRC_PSE<23>, SC_IRC_PSE<22>, SC_IRC_PSE<21>, SC_IRC_PSE<20>, SC_IRC_PSE<19>, SC_IRC_PSE<18>, SC_IRC_PSE<17>, SC_IRC_PSE<16>, SC_IRC_PSE<15>, SC_IRC_PSE<14>, SC_IRC_PSE<13>, SC_IRC_PSE<12>, SC_IRC_PSE<11>, SC_IRC_PSE<10>, SC_IRC_PSE<9>, SC_IRC_PSE<8>, SC_IRC_PSE<7>, SC_IRC_PSE<6>, SC_IRC_PSE<5>, SC_IRC_PSE<4>, SC_IRC_PSE<3>, SC_IRC_PSE<2>, SC_IRC_PSE<1>, SC_IRC_PSE<0>"*/,

        config input SC_PSE64           = 1'b0 /*pragma PAP_CFG_BIT_NAME = "SC_PSE64"*/,

        config input SC_CYSIGNED_SEL    = 1'b0 /*pragma PAP_CFG_BIT_NAME = "SC_CYSIGNED_SEL" */ ,
        config input SC_CZSIGNED_SEL    = 1'b0 /*pragma PAP_CFG_BIT_NAME = "SC_CZSIGNED_SEL" */ ,

        config input SC_CONST_IA1[18:0] = 19'h0_0000
        /*pragma PAP_CFG_BIT_NAME = "SC_CONST_IA1<18>, SC_CONST_IA1<17>, SC_CONST_IA1<16>, SC_CONST_IA1<15>, SC_CONST_IA1<14>, SC_CONST_IA1<13>, SC_CONST_IA1<12>, SC_CONST_IA1<11>, SC_CONST_IA1<10>, SC_CONST_IA1<9>, SC_CONST_IA1<8>, SC_CONST_IA1<7>, SC_CONST_IA1<6>, SC_CONST_IA1<5>, SC_CONST_IA1<4>, SC_CONST_IA1<3>, SC_CONST_IA1<2>, SC_CONST_IA1<1>, SC_CONST_IA1<0>"*/,

        config input SC_CONST_IA0[18:0] = 19'h0_0000
        /*pragma PAP_CFG_BIT_NAME = "SC_CONST_IA0<18>, SC_CONST_IA0<17>, SC_CONST_IA0<16>, SC_CONST_IA0<15>, SC_CONST_IA0<14>, SC_CONST_IA0<13>, SC_CONST_IA0<12>, SC_CONST_IA0<11>, SC_CONST_IA0<10>, SC_CONST_IA0<9>, SC_CONST_IA0<8>, SC_CONST_IA0<7>, SC_CONST_IA0<6>, SC_CONST_IA0<5>, SC_CONST_IA0<4>, SC_CONST_IA0<3>, SC_CONST_IA0<2>, SC_CONST_IA0<1>, SC_CONST_IA0<0>"*/,

        config input SC_SOURCEA[1:0]    = 2'b00 /*pragma PAP_CFG_BIT_NAME = "SC_SOURCEA<1>, SC_SOURCEA<0>"*/,
        config input SC_SOURCEB[1:0]    = 2'b00 /*pragma PAP_CFG_BIT_NAME = "SC_SOURCEB<1>, SC_SOURCEB<0>"*/,
        config input SC_SOURCEC[1:0]    = 2'b00 /*pragma PAP_CFG_BIT_NAME = "SC_SOURCEC<1>, SC_SOURCEC<0>"*/,

        config input SC_IRDSEL_B[1:0]   = 2'b00 /*pragma PAP_CFG_BIT_NAME = "SC_IRDSEL_B<1>, SC_IRDSEL_B<0>"*/,
        config input SC_IRDSEL_C[1:0]   = 2'b00 /*pragma PAP_CFG_BIT_NAME = "SC_IRDSEL_C<1>,SC_IRDSEL_C<0>"*/,

        config input SC_IRSHF_B_SEL     = 1'b0  /*pragma PAP_CFG_BIT_NAME = "SC_IRSHF_B_SEL"*/,
        config input SC_IRSHF_C_SEL     = 1'b0  /*pragma PAP_CFG_BIT_NAME = "SC_IRSHF_C_SEL"*/,

        config input SC_DBYP_C[1:0]     = 2'b00 /*pragma PAP_CFG_BIT_NAME = "SC_DBYP_C<1>,SC_DBYP_C<0>"*/,

        config input SC_IRB_SHFEN[1:0]  = 2'b00 /*pragma PAP_CFG_BIT_NAME = "SC_IRB_SHFEN<1>, SC_IRB_SHFEN<0>"*/,
        config input SC_IRC_SHFEN[1:0]  = 2'b00 /*pragma PAP_CFG_BIT_NAME = "SC_IRC_SHFEN<1>, SC_IRC_SHFEN<0>"*/,

        config input SC_OR2CIM_EN[3:0]  = 4'b0000
        /*pragma PAP_CFG_BIT_NAME = "SC_OR2CIM_EN<3>, SC_OR2CIM_EN<2>, SC_OR2CIM_EN<1>, SC_OR2CIM_EN<0>"*/,

        config input SC_OR2CASCADE_EN   = 1'b0  /*pragma PAP_CFG_BIT_NAME = "SC_OR2CASCADE_EN"*/,

        config input SC_M9_MODE[1:0]  = 2'b00   /*pragma PAP_CFG_BIT_NAME = "SC_M9_MODE<1>, SC_M9_MODE<0>"*/,
        config input SC_M19_MODE[1:0] = 2'b00   /*pragma PAP_CFG_BIT_NAME = "SC_M19_MODE<1>, SC_M19_MODE<0>"*/,
        config input SC_M27_MODE      = 1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_M27_MODE"*/,

        config input SC_PRAD_EN[1:0]  = 2'b00   /*pragma PAP_CFG_BIT_NAME = "SC_PRAD_EN<1>, SC_PRAD_EN<0>"*/,
        config input SC_PRAD27_EN     = 1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PRAD27_EN"*/,

        config input SC_ALUEN       = 1'b0      /*pragma PAP_CFG_BIT_NAME = "SC_ALUEN"*/,
        config input SC_TERNARY     = 1'b0      /*pragma PAP_CFG_BIT_NAME = "SC_TERNARY"*/,
        config input SC_MMC_DIS_C   = 1'b0      /*pragma PAP_CFG_BIT_NAME = "SC_MMC_DIS_C"*/,

        config input SC_ALU_FLAGEN      = 1'b0  /*pragma PAP_CFG_BIT_NAME = "SC_ALU_FLAGEN"*/,
        config input SC_ALU_MASKPATSEL  = 1'b0  /*pragma PAP_CFG_BIT_NAME = "SC_ALU_MASKPATSEL"*/,
        config input SC_ALU_MCPATSEL    = 1'b0  /*pragma PAP_CFG_BIT_NAME = "SC_ALU_MCPATSEL"*/,

        config input SC_MCPAT[63:0]     = 64'h0000_0000_0000_0000
        /*pragma PAP_CFG_BIT_NAME = "SC_MCPAT<63>, SC_MCPAT<62>, SC_MCPAT<61>, SC_MCPAT<60>, SC_MCPAT<59>, SC_MCPAT<58>, SC_MCPAT<57>, SC_MCPAT<56>, SC_MCPAT<55>, SC_MCPAT<54>, SC_MCPAT<53>, SC_MCPAT<52>, SC_MCPAT<51>, SC_MCPAT<50>, SC_MCPAT<49>, SC_MCPAT<48>, SC_MCPAT<47>, SC_MCPAT<46>, SC_MCPAT<45>, SC_MCPAT<44>, SC_MCPAT<43>, SC_MCPAT<42>, SC_MCPAT<41>, SC_MCPAT<40>, SC_MCPAT<39>, SC_MCPAT<38>, SC_MCPAT<37>, SC_MCPAT<36>, SC_MCPAT<35>, SC_MCPAT<34>, SC_MCPAT<33>, SC_MCPAT<32>, SC_MCPAT<31>, SC_MCPAT<30>, SC_MCPAT<29>, SC_MCPAT<28>, SC_MCPAT<27>, SC_MCPAT<26>, SC_MCPAT<25>, SC_MCPAT<24>, SC_MCPAT<23>, SC_MCPAT<22>, SC_MCPAT<21>, SC_MCPAT<20>, SC_MCPAT<19>, SC_MCPAT<18>, SC_MCPAT<17>, SC_MCPAT<16>, SC_MCPAT<15>, SC_MCPAT<14>, SC_MCPAT<13>, SC_MCPAT<12>, SC_MCPAT<11>, SC_MCPAT<10>, SC_MCPAT<9>, SC_MCPAT<8>, SC_MCPAT<7>, SC_MCPAT<6>, SC_MCPAT<5>, SC_MCPAT<4>, SC_MCPAT<3>, SC_MCPAT<2>, SC_MCPAT<1>, SC_MCPAT<0>"*/,

        config input SC_MASKPAT[63:0]   = 64'h0000_0000_0000_0000
        /*pragma PAP_CFG_BIT_NAME = "SC_MASKPAT<63>, SC_MASKPAT<62>, SC_MASKPAT<61>, SC_MASKPAT<60>, SC_MASKPAT<59>, SC_MASKPAT<58>, SC_MASKPAT<57>, SC_MASKPAT<56>, SC_MASKPAT<55>, SC_MASKPAT<54>, SC_MASKPAT<53>, SC_MASKPAT<52>, SC_MASKPAT<51>, SC_MASKPAT<50>, SC_MASKPAT<49>, SC_MASKPAT<48>, SC_MASKPAT<47>, SC_MASKPAT<46>, SC_MASKPAT<45>, SC_MASKPAT<44>, SC_MASKPAT<43>, SC_MASKPAT<42>, SC_MASKPAT<41>, SC_MASKPAT<40>, SC_MASKPAT<39>, SC_MASKPAT<38>, SC_MASKPAT<37>, SC_MASKPAT<36>, SC_MASKPAT<35>, SC_MASKPAT<34>, SC_MASKPAT<33>, SC_MASKPAT<32>, SC_MASKPAT<31>, SC_MASKPAT<30>, SC_MASKPAT<29>, SC_MASKPAT<28>, SC_MASKPAT<27>, SC_MASKPAT<26>, SC_MASKPAT<25>, SC_MASKPAT<24>, SC_MASKPAT<23>, SC_MASKPAT<22>, SC_MASKPAT<21>, SC_MASKPAT<20>, SC_MASKPAT<19>, SC_MASKPAT<18>, SC_MASKPAT<17>, SC_MASKPAT<16>, SC_MASKPAT<15>, SC_MASKPAT<14>, SC_MASKPAT<13>, SC_MASKPAT<12>, SC_MASKPAT<11>, SC_MASKPAT<10>, SC_MASKPAT<9>, SC_MASKPAT<8>, SC_MASKPAT<7>, SC_MASKPAT<6>, SC_MASKPAT<5>, SC_MASKPAT<4>, SC_MASKPAT<3>, SC_MASKPAT<2>, SC_MASKPAT<1>, SC_MASKPAT<0>"*/,

        config input SC_MASK01[64:0]    = 65'h0_0000_0000_0000_0000
        /*pragma PAP_CFG_BIT_NAME = "SC_MASK01<64>, SC_MASK01<63>, SC_MASK01<62>, SC_MASK01<61>, SC_MASK01<60>, SC_MASK01<59>, SC_MASK01<58>, SC_MASK01<57>, SC_MASK01<56>, SC_MASK01<55>, SC_MASK01<54>, SC_MASK01<53>, SC_MASK01<52>, SC_MASK01<51>, SC_MASK01<50>, SC_MASK01<49>, SC_MASK01<48>, SC_MASK01<47>, SC_MASK01<46>, SC_MASK01<45>, SC_MASK01<44>, SC_MASK01<43>, SC_MASK01<42>, SC_MASK01<41>, SC_MASK01<40>, SC_MASK01<39>, SC_MASK01<38>, SC_MASK01<37>, SC_MASK01<36>, SC_MASK01<35>, SC_MASK01<34>, SC_MASK01<33>, SC_MASK01<32>, SC_MASK01<31>, SC_MASK01<30>, SC_MASK01<29>, SC_MASK01<28>, SC_MASK01<27>, SC_MASK01<26>, SC_MASK01<25>, SC_MASK01<24>, SC_MASK01<23>, SC_MASK01<22>, SC_MASK01<21>, SC_MASK01<20>, SC_MASK01<19>, SC_MASK01<18>, SC_MASK01<17>, SC_MASK01<16>, SC_MASK01<15>, SC_MASK01<14>, SC_MASK01<13>, SC_MASK01<12>, SC_MASK01<11>, SC_MASK01<10>, SC_MASK01<9>, SC_MASK01<8>, SC_MASK01<7>, SC_MASK01<6>, SC_MASK01<5>, SC_MASK01<4>, SC_MASK01<3>, SC_MASK01<2>, SC_MASK01<1>, SC_MASK01<0>"*/,

        config input SC_RTI[63:0]       = 64'h0000_0000_0000_0000
        /*pragma PAP_CFG_BIT_NAME = "SC_RTI<63>, SC_RTI<62>, SC_RTI<61>, SC_RTI<60>, SC_RTI<59>, SC_RTI<58>, SC_RTI<57>, SC_RTI<56>, SC_RTI<55>, SC_RTI<54>, SC_RTI<53>, SC_RTI<52>, SC_RTI<51>, SC_RTI<50>, SC_RTI<49>, SC_RTI<48>, SC_RTI<47>, SC_RTI<46>, SC_RTI<45>, SC_RTI<44>, SC_RTI<43>, SC_RTI<42>, SC_RTI<41>, SC_RTI<40>, SC_RTI<39>, SC_RTI<38>, SC_RTI<37>, SC_RTI<36>, SC_RTI<35>, SC_RTI<34>, SC_RTI<33>, SC_RTI<32>, SC_RTI<31>, SC_RTI<30>, SC_RTI<29>, SC_RTI<28>, SC_RTI<27>, SC_RTI<26>, SC_RTI<25>, SC_RTI<24>, SC_RTI<23>, SC_RTI<22>, SC_RTI<21>, SC_RTI<20>, SC_RTI<19>, SC_RTI<18>, SC_RTI<17>, SC_RTI<16>, SC_RTI<15>, SC_RTI<14>, SC_RTI<13>, SC_RTI<12>, SC_RTI<11>, SC_RTI<10>, SC_RTI<9>, SC_RTI<8>, SC_RTI<7>, SC_RTI<6>, SC_RTI<5>, SC_RTI<4>, SC_RTI<3>, SC_RTI<2>, SC_RTI<1>, SC_RTI<0>"*/,

        config input SC_CSIGN_EXT       = 1'b0  /*pragma PAP_CFG_BIT_NAME = "SC_CSIGN_EXT"*/,
        config input SC_CSIGN_PRE       = 1'b0  /*pragma PAP_CFG_BIT_NAME = "SC_CSIGN_PRE"*/,
        config input SC_SIGN_SELIR[1:0] = 2'b00 /*pragma PAP_CFG_BIT_NAME = "SC_SIGN_SELIR<1>, SC_SIGN_SELIR<0>"*/,

        config input SC_CR64_SAB        = 1'b0  /*pragma PAP_CFG_BIT_NAME = "SC_CR64_SAB"*/,
        config input SC_SEL_SAB_CR27    = 1'b0  /*pragma PAP_CFG_BIT_NAME = "SC_SEL_SAB_CR27"*/,
        config input SC_SEL_SAB_CR59    = 1'b0  /*pragma PAP_CFG_BIT_NAME = "SC_SEL_SAB_CR59"*/,

        config input SC_SEL_SYO         = 1'b0  /*pragma PAP_CFG_BIT_NAME = "SC_SEL_SYO"*/,
        config input SC_SEL_SZO         = 1'b0  /*pragma PAP_CFG_BIT_NAME = "SC_SEL_SZO"*/,

        config input SC_GRS_DIS         = 1'b0  /*pragma PAP_CFG_BIT_NAME = "SC_GRS_DIS"*/,

        input  DXIA[17:0]  = 18'h3_ffff,
        input  DXIA_SIGNED = 1'b1,
        input  DYIA[17:0]  = 18'h3_ffff,
        input  DYIA_SIGNED = 1'b1,
        input  DZIA[31:0]  = 32'hffff_ffff,
        input  DZIA_SIGNED = 1'b1,

        input  DXIB[17:0]  = 18'h3_ffff,
        input  DXIB_SIGNED = 1'b1,
        input  DYIB[17:0]  = 18'h3_ffff,
        input  DYIB_SIGNED = 1'b1,
        input  DZIB[31:0]  = 32'hffff_ffff,
        input  DZIB_SIGNED = 1'b1,

        input  APM_OP_POST[10:0] = 11'h7ff,
        input  APM_OP_IR[8:0]    = 9'h1ff,
        input  APM_OP_PRAD[1:0]  = 2'b11,

        input  CLK[3:0] = 4'b1111, 
        input  CE[3:0]  = 4'b1111, 
        input  RST[3:0] = 4'b1111, 

        input  CYI[26:0]  = 27'h3ff_ffff,
        input  CYI_SIGNED = 1'b1,
        output CYO[26:0],
        output CYO_SIGNED,

        input  CZI[26:0]  = 27'h3ff_ffff,
        input  CZI_SIGNED = 1'b1,
        output CZO[26:0],
        output CZO_SIGNED,

        input  CPI[64:0]  = 65'h1_ffff_ffff_ffff_ffff,
        input  CPI_SIGNED = 1'b1,
        output CPO[64:0],
        output CPO_SIGNED,
        output DPO[73:0]
    );
} // end of device APM

/*******************************************************************************

  Device    [APM]

  Author    [clwang]

  Abstract  [The structure netlist of APM is described in the similar fashion
             as in HDL. In unit instantiation statement, the formal pin may be
             connected to net which is declared explicitly.

             In Valence, the connection can also be made from formal pin to other
             pin or port, in which case Valence compiler shall create the net to
             fulfil the connection. The built-in naming convention is kicked in
             to name the automatically created net. However, the objects (net, instance)
             of this netlist are going to mapped from schematic. The compiler-generated
             names cause trouble for the mapping. Therefore, all wires are declared
             explicitly in the following description]

  Revision History:

********************************************************************************/

structure netlist of APM
{
/*  device APM_INST APM_INST
        port map
        (
            DXIA          =>   DXIA,
            DXIA_SIGNED   =>   DXIA_SIGNED,
            DYIA          =>   DYIA,
            DYIA_SIGNED   =>   DYIA_SIGNED,
            DZIA          =>   DZIA,
            DZIA_SIGNED   =>   DZIA_SIGNED,

            DXIB          =>   DXIB,
            DXIB_SIGNED   =>   DXIB_SIGNED,
            DYIB          =>   DYIB,
            DYIB_SIGNED   =>   DYIB_SIGNED,
            DZIB          =>   DZIB,
            DZIB_SIGNED   =>   DZIB_SIGNED,

            APM_OP_POST   =>   APM_OP_POST,
            APM_OP_IR     =>   APM_OP_IR,
            APM_OP_PRAD   =>   APM_OP_PRAD,

            CLK           =>   CLK,
            CE            =>   CE,
            RST           =>   RST,

            CYI           =>   CYI,
            CYI_SIGNED    =>   CYI_SIGNED,
            CYO           =>   CYO,
            CYO_SIGNED    =>   CYO_SIGNED,

            CZI           =>   CZI,
            CZI_SIGNED    =>   CZI_SIGNED,
            CZO           =>   CZO,
            CZO_SIGNED    =>   CZO_SIGNED,

            CPI           =>   CPI,
            CPI_SIGNED    =>   CPI_SIGNED,
            CPO           =>   CPO,
            CPO_SIGNED    =>   CPO_SIGNED,
            DPO           =>   DPO   
        );
*/
 //unit_input
  wire  ntir_clk[13:0];
  wire    ntir_ce[13:0];
  wire    ntir_srst[13:0];
  wire    ntir_arst[13:0];
  wire    ntir_ctclk[3:0];    
  wire    ntir_ctce[3:0];    
  wire    ntir_ctsrst[3:0];    
  wire    ntir_ctarst[3:0];    
  wire  ntOPIR0IN,ntOPIR0OUT;
  wire  ntOPIR1IN,ntOPIR1OUT;
  wire  ntOPIR2IN,ntOPIR2OUT;
  wire  ntOPIR3IN,ntOPIR3OUT;
  wire  ntOPIR4IN,ntOPIR4OUT;
  wire  ntOPIR5IN,ntOPIR5OUT;
  wire  ntOPIR6IN,ntOPIR6OUT;
  wire  ntOPIR7IN,ntOPIR7OUT;
  wire  ntOPIR8IN,ntOPIR8OUT;
  wire  ntdyn_op_ir[8:0],ntinput_opcd[8:0];
  wire  ntinput_opcd_2,ntinput_opcd_8;
  wire  ntOP0IN[6:0],ntOP0OUT[6:0];
  wire  ntpost_op_ir[10:0],ntprad_op[1:0];
  wire  ntOP1IN[3:0],ntOP1OUT[3:0];
  wire  ntOP2IN,ntOP2OUT;
  wire  ntOP3IN,ntOP3OUT;
  wire  ntzia_post[35:0],ntzib_post[35:0],ntzic_post[63:0];
  wire  ntxa_signed,ntya_signed,ntza_signed;
  wire  ntxb_signed,ntyb_signed,ntzb_signed;
  wire  ntxa[17:0],ntya[17:0],ntza[17:0];
  wire  ntxb[17:0],ntyb[17:0],ntzb[17:0];
  wire  ntsric0[18:0],ntsric1[18:0],ntsrib[18:0];
  wire  ntcyo_sign_bd0,ntcyo_sign_bd1; 
  wire  ntA00IN[8:0],ntA00OUT[8:0];
  wire  ntA01IN[8:0],ntA01OUT[8:0];
  wire  ntA01SIGNIN,ntA01SIGNOUT;
  wire  ntB00IN[8:0],ntB00OUT[8:0];
  wire  ntB01IN[8:0],ntB01OUT[8:0];
  wire  ntB01SIGNIN,ntB01SIGNOUT;
  wire  ntC00IN[8:0],ntC00OUT[8:0];
  wire  ntC01IN[8:0],ntC01OUT[8:0];
  wire  ntC01SIGNIN,ntC01SIGNOUT;
  wire  ntC02IN[13:0],ntC02OUT[13:0];
  wire  ntA10IN[8:0],ntA10OUT[8:0];
  wire  ntA11IN[8:0],ntA11OUT[8:0];
  wire  ntA11SIGNIN,ntA11SIGNOUT;
  wire  ntB10IN[8:0],ntB10OUT[8:0];
  wire  ntB11IN[8:0],ntB11OUT[8:0];
  wire  ntB11SIGNIN,ntB11SIGNOUT;
  wire  ntC10IN[8:0],ntC10OUT[8:0];
  wire  ntC11IN[8:0],ntC11OUT[8:0];
  wire  ntC11SIGNIN,ntC11SIGNOUT;
  wire  ntC12IN[13:0],ntC12OUT[13:0];
  wire  ntBD0IN[18:0],ntBD0OUT[18:0];
  wire  ntBD1IN[9:0],ntBD1OUT[9:0];
  wire  ntsric1IN[18:0];
  
  //unit_prad
  wire    ntpradr_clk[7:0];    
  wire    ntpradr_ce[7:0];
  wire    ntpradr_srst[7:0];    
  wire    ntpradr_arst[7:0];    
  wire  ntprad_out0[18:0];
  wire  ntprad_out1[18:0];
  wire  ntpreadd_ya_h_9[8:0];
  wire  ntpreadd_ya_l_9[8:0];
  wire  ntpreadd_yb_h_9[8:0];
  wire  ntpreadd_yb_l_9[8:0];
  wire  ntpreadd_ya_19[18:0];
  wire  ntpreadd_yb_19[18:0];
  wire  ntpreadd_Y_27[26:0]; 
  wire  ntpreadd_xa[17:0],ntpreadd_ya[18:0];
  wire  ntpreadd_xb[17:0],ntpreadd_yb[18:0];
  wire  ntAA00IN[8:0],ntAA00OUT[8:0];
  wire  ntAA01IN[8:0],ntAA01OUT[8:0];
  wire  ntAA01SIGNIN,ntAA01SIGNOUT;
  wire  ntAB00IN[8:0],ntAB00OUT[8:0];
  wire  ntAB01IN[9:0],ntAB01OUT[9:0];
  wire  ntAB01SIGNIN,ntAB01SIGNOUT;
  wire  ntAB01CSIGNIN,ntAB01CSIGNOUT;
  wire  ntAA10IN[8:0],ntAA10OUT[8:0];
  wire  ntAA11IN[8:0],ntAA11OUT[8:0];
  wire  ntAA11SIGNIN,ntAA11SIGNOUT;
  wire  ntAB10IN[8:0],ntAB10OUT[8:0];
  wire  ntAB11IN[9:0],ntAB11OUT[9:0];
  wire  ntAB11SIGNIN,ntAB11SIGNOUT;
  wire  ntAB11CSIGNIN,ntAB11CSIGNOUT;
  
  //unit_mult
  wire  ntpost_op[10:0];
  wire  ntmult_a_p[45:0],ntmult_b_p[36:0];
  wire  ntPR0IN[45:0],ntPR0OUT[45:0];
  wire  ntpr_ce[9:0];
  wire  ntpr_clk[9:0];
  wire  ntpr_arst[9:0];
  wire  ntpr_srst[9:0];
  wire  ntPR1IN[36:0],ntPR1OUT[36:0];
  wire  ntpr_ctclk[1:0];
  wire  ntpr_ctce[1:0];
  wire  ntpr_ctsrst[1:0];
  wire  ntpr_ctarst[1:0];
  wire  ntPROP0IN[6:0],ntPROP0OUT[6:0];
  wire  ntPROP1IN[3:0],ntPROP1OUT[3:0];
  wire  ntSIGNIN[5:0],ntSIGNOUT[5:0];
  wire  ntsign_in[5:0],ntsign_out[5:0];
  wire  ntmult_a[45:0],ntmult_b[36:0];
  
  //unit_post
  wire  ntmout0[64:0],ntmout1[64:0],ntcr_ext[64:0];
  wire  ntc_int64;
  wire  ntRTZ[63:0];
  wire  ntai[64:0],ntbi[64:0],ntci[64:0];
  wire  ntopcd_code[5:0],ntsum[64:0];
  wire  ntout_sel0[36:0],ntout_sel1[36:0];
  wire  ntor_clk[3:0],ntor_ce[3:0];
  wire  ntor_arst[3:0],ntor_srst[3:0];
  wire  ntflag[8:0]; 
  wire  ntOR0IN[36:0],ntOR0OUT[36:0]; 
  wire  ntOR1IN[36:0],ntOR1OUT[36:0];
  wire  ntR64IN,ntR64OUT;
  wire  ntsum64_reg;
  wire  ntsum_flag[64:0],ntpattern[63:0],ntmaskpattern[63:0];
   
   //input_unit

    device REG_CTRL IR_CTRL_0
        parameter map
        (
             CLK_IR => CLK_IR_0_XA,
             CE_IR => CE_IR_0_XA,
             RST_IR => RST_IR_0_XA
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0] =>  CE[3:0],
             RST[3:0] => RST[3:0],       
             IR_CLK => ntir_clk[0],
             IR_CE =>  ntir_ce[0], 
             IR_RST => ntir_srst[0]
        );

    device REG_CTRL IR_CTRL_1
        parameter map
        (
             CLK_IR => CLK_IR_1_XA,
             CE_IR => CE_IR_1_XA,
             RST_IR => RST_IR_1_XA
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntir_clk[1],
             IR_CE =>  ntir_ce[1], 
             IR_RST => ntir_srst[1]
        ); 

    device REG_CTRL IR_CTRL_2
        parameter map
        (
             CLK_IR => CLK_IR_2_YA,
             CE_IR => CE_IR_2_YA,
             RST_IR => RST_IR_2_YA
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntir_clk[2],
             IR_CE =>  ntir_ce[2], 
             IR_RST => ntir_srst[2]
        );

    device REG_CTRL IR_CTRL_3
        parameter map
        (
             CLK_IR => CLK_IR_3_YA,
             CE_IR => CE_IR_3_YA,
             RST_IR => RST_IR_3_YA
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntir_clk[3],
             IR_CE =>  ntir_ce[3], 
             IR_RST => ntir_srst[3]
        );

    device REG_CTRL IR_CTRL_4
        parameter map
        (
             CLK_IR => CLK_IR_4_ZA,
             CE_IR => CE_IR_4_ZA,
             RST_IR => RST_IR_4_ZA
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntir_clk[4],
             IR_CE =>  ntir_ce[4], 
             IR_RST => ntir_srst[4]
        );

    device REG_CTRL IR_CTRL_5
        parameter map
        (
             CLK_IR => CLK_IR_5_ZA,
             CE_IR => CE_IR_5_ZA,
             RST_IR => RST_IR_5_ZA
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntir_clk[5],
             IR_CE =>  ntir_ce[5], 
             IR_RST => ntir_srst[5]
        );

    device REG_CTRL IR_CTRL_6
        parameter map
        (
             CLK_IR => CLK_IR_6_ZA,
             CE_IR => CE_IR_6_ZA,
             RST_IR => RST_IR_6_ZA
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntir_clk[6],
             IR_CE =>  ntir_ce[6], 
             IR_RST => ntir_srst[6]
        );

    device REG_CTRL IR_CTRL_7
        parameter map
        (
             CLK_IR => CLK_IR_7_XB,
             CE_IR => CE_IR_7_XB,
             RST_IR => RST_IR_7_XB
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntir_clk[7],
             IR_CE =>  ntir_ce[7], 
             IR_RST => ntir_srst[7]
        );

    device REG_CTRL IR_CTRL_8
        parameter map
        (
             CLK_IR => CLK_IR_8_XB,
             CE_IR => CE_IR_8_XB,
             RST_IR => RST_IR_8_XB
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntir_clk[8],
             IR_CE =>  ntir_ce[8], 
             IR_RST => ntir_srst[8]
        );

    device REG_CTRL IR_CTRL_9
        parameter map
        (
             CLK_IR => CLK_IR_9_YB,
             CE_IR => CE_IR_9_YB,
             RST_IR => RST_IR_9_YB
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntir_clk[9],
             IR_CE =>  ntir_ce[9], 
             IR_RST => ntir_srst[9]
        );

    device REG_CTRL IR_CTRL_10
        parameter map
        (
             CLK_IR => CLK_IR_10_YB,
             CE_IR => CE_IR_10_YB,
             RST_IR => RST_IR_10_YB
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntir_clk[10],
             IR_CE =>  ntir_ce[10], 
             IR_RST => ntir_srst[10]
        );

    device REG_CTRL IR_CTRL_11
        parameter map
        (
             CLK_IR => CLK_IR_11_ZB,
             CE_IR => CE_IR_11_ZB,
             RST_IR => RST_IR_11_ZB
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntir_clk[11],
             IR_CE =>  ntir_ce[11], 
             IR_RST => ntir_srst[11]
        );

    device REG_CTRL IR_CTRL_12
        parameter map
        (
             CLK_IR => CLK_IR_12_ZB,
             CE_IR => CE_IR_12_ZB,
             RST_IR => RST_IR_12_ZB
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntir_clk[12],
             IR_CE =>  ntir_ce[12], 
             IR_RST => ntir_srst[12]
        );

    device REG_CTRL IR_CTRL_13
        parameter map
        (
             CLK_IR => CLK_IR_13_ZB,
             CE_IR => CE_IR_13_ZB,
             RST_IR => RST_IR_13_ZB
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntir_clk[13],
             IR_CE =>  ntir_ce[13], 
             IR_RST => ntir_srst[13]
        );

    device REG_CTRL CTIR_CTRL_0
        parameter map
        ( 
             CLK_IR => {CLK_CTIR[1],CLK_CTIR[0]},
             CE_IR => {CE_CTIR[1],CE_CTIR[0]},
             RST_IR => {RST_CTIR[1],RST_CTIR[0]}
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntir_ctclk[0],
             IR_CE =>  ntir_ctce[0], 
             IR_RST => ntir_ctsrst[0]
        ); 

    device REG_CTRL CTIR_CTRL_1
        parameter map
        (
             CLK_IR => {CLK_CTIR[3],CLK_CTIR[2]},
             CE_IR => {CE_CTIR[3],CE_CTIR[2]},
             RST_IR => {RST_CTIR[3],RST_CTIR[2]}
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntir_ctclk[1],
             IR_CE =>  ntir_ctce[1], 
             IR_RST => ntir_ctsrst[1]
        ); 

    device REG_CTRL CTIR_CTRL_2
        parameter map
        (
             CLK_IR => {CLK_CTIR[5],CLK_CTIR[4]},
             CE_IR => {CE_CTIR[5],CE_CTIR[4]},
             RST_IR => {RST_CTIR[5],RST_CTIR[4]}
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntir_ctclk[2],
             IR_CE =>  ntir_ctce[2], 
             IR_RST => ntir_ctsrst[2]
        ); 

    device REG_CTRL CTIR_CTRL_3
        parameter map
        (
             CLK_IR => {CLK_CTIR[7],CLK_CTIR[6]},
             CE_IR => {CE_CTIR[7],CE_CTIR[6]},
             RST_IR => {RST_CTIR[7],RST_CTIR[6]}
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntir_ctclk[3],
             IR_CE =>  ntir_ctce[3], 
             IR_RST => ntir_ctsrst[3]
        ); 

    device IR_REG_1 REG_OPIR0
        parameter map
        (
             SYNC_RST => SYNC_IR_2_YA
        )
        port map 
        (
             D  => ntOPIR0IN,
             CLK => ntir_clk[2],
             CE => ntir_ce[2],
             RST => ntir_srst[2],
             Q => ntOPIR0OUT
        );
           
    device REG_MUX_1 OPIR0_SEL_MUX
        parameter map
        (
            IN_SEL => 1'b0
        )          
        port map                         
        (                                
             D0  => APM_OP_IR[0],           
             D1  => 1'b0,                        
             DOUT   => ntOPIR0IN      
        );                                   
           
    device REG_MUX_1 OPIR0_BYP_MUX
        parameter map
        (
            IN_SEL => OPCD_BYP[0]
        )         
        port map                          
        (                                 
             D0  => ntOPIR0OUT ,          
             D1  => ntOPIR0IN ,                                 
             DOUT   => ntdyn_op_ir[0]           
        );                                
                                              
    device IR_REG_1 REG_OPIR1   
        parameter map
        (
            SYNC_RST => SYNC_IR_4_ZA
        )     
        port map                    
        (                         
            D  => ntOPIR1IN,        
            CLK => ntir_clk[4],   
            CE => ntir_ce[4],     
            RST => ntir_srst[4], 
            Q => ntOPIR1OUT  
        );                      
       
    device REG_MUX_1 OPIR1_SEL_MUX  
        parameter map
        (
            IN_SEL => 1'b0 
        )  
        port map                   
        (                          
             D0  => APM_OP_IR[1],   
             D1  => 1'b0,       
             DOUT   => ntOPIR1IN    
        );                         
                                          
    device REG_MUX_1 OPIR1_BYP_MUX
        parameter map
        (
            IN_SEL => OPCD_BYP[1]
        )     
        port map                      
        (                             
             D0  => ntOPIR1OUT ,       
             D1  => ntOPIR1IN ,        
             DOUT   => ntdyn_op_ir[1]       
        );                            
       
    device IR_REG_1 REG_OPIR2
        parameter map
        (
            SYNC_RST => SYNC_IR_4_ZA
        )                        
        port map                                    
        (                                           
             D  => ntOPIR2IN,                    
             CLK => ntir_clk[4],                       
             CE => ntir_ce[4],                         
             RST => ntir_srst[4],                                        
             Q => ntOPIR2OUT                        
        );                                          
                                                     
    device REG_MUX_1 OPIR2_SEL_MUX
        parameter map
        (
            IN_SEL => 1'b0 
        )           
        port map                            
        (                                   
             D0  => APM_OP_IR[2],            
             D1  => 1'b0,                                   
             DOUT   => ntOPIR2IN             
        );                                  
                                                     
    device REG_MUX_1 OPIR2_BYP_MUX
        parameter map
        (
            IN_SEL => OPCD_BYP[2]
        )              
        port map                               
        (                                      
             D0  => ntOPIR2OUT ,                
             D1  => ntOPIR2IN ,                             
             DOUT   => ntdyn_op_ir[2]             
        );                                                                           
   
    device IR_REG_1 REG_OPIR3
        parameter map
        (
            SYNC_RST => SYNC_IR_9_YB
        )                        
        port map                                    
        (                                           
             D  => ntOPIR3IN,                    
             CLK => ntir_clk[9],                       
             CE => ntir_ce[9],                         
             RST => ntir_srst[9],                                        
             Q => ntOPIR3OUT                        
        );                                          
                                                     
    device REG_MUX_1 OPIR3_SEL_MUX
        parameter map
        (
            IN_SEL => 1'b0 
        )           
        port map                            
        (                                   
             D0  => APM_OP_IR[3],            
             D1  => 1'b0,                                  
             DOUT   => ntOPIR3IN             
        );                                  
                                                     
    device REG_MUX_1 OPIR3_BYP_MUX
        parameter map
        (
            IN_SEL => OPCD_BYP[3]
        )              
        port map                               
        (                                      
             D0  => ntOPIR3OUT ,                
             D1  => ntOPIR3IN ,                             
             DOUT   => ntdyn_op_ir[3]             
        );
   
    device IR_REG_1 REG_OPIR4 
        parameter map
        (
            SYNC_RST => SYNC_IR_9_YB
        )                       
        port map                                    
        (                                           
             D  => ntOPIR4IN,                    
             CLK => ntir_clk[9],                       
             CE => ntir_ce[9],                         
             RST => ntir_srst[9],                   
             Q => ntOPIR4OUT                        
        );                                          
                                                     
    device REG_MUX_1 OPIR4_SEL_MUX
        parameter map
        (
            IN_SEL => 1'b0 
        )               
        port map                            
        (                                   
             D0  => APM_OP_IR[4],            
             D1  => 1'b0,                                   
             DOUT   => ntOPIR4IN             
        );                                  
                                                     
    device REG_MUX_1 OPIR4_BYP_MUX
        parameter map
        (
            IN_SEL => OPCD_BYP[4]
        )              
        port map                               
        (                                      
             D0  => ntOPIR4OUT ,                
             D1  => ntOPIR4IN ,                             
             DOUT   => ntdyn_op_ir[4]             
        );
   
    device IR_REG_1 REG_OPIR5
        parameter map
        (
            SYNC_RST => SYNC_IR_10_YB
        )                            
        port map                                    
        (                                           
             D  => ntOPIR5IN,                    
             CLK => ntir_clk[10],                       
             CE => ntir_ce[10],                         
             RST => ntir_srst[10],
             Q => ntOPIR5OUT                        
        );                                          
                                                     
    device REG_MUX_1 OPIR5_SEL_MUX
        parameter map
        (
            IN_SEL => 1'b0 
        )              
        port map                            
        (                                   
             D0  => APM_OP_IR[5],            
             D1  => 1'b0,  
             DOUT   => ntOPIR5IN             
        );                                  
                                                     
    device REG_MUX_1 OPIR5_BYP_MUX
        parameter map
        (
            IN_SEL => OPCD_BYP[5]
        )                 
        port map                               
        (                                      
             D0  => ntOPIR5OUT ,                
             D1  => ntOPIR5IN ,
             DOUT   => ntdyn_op_ir[5]             
        );                                   
   
    device IR_REG_1 REG_OPIR6
        parameter map
        (
            SYNC_RST => SYNC_IR_11_ZB
        )                            
        port map                                    
        (                                           
             D  => ntOPIR6IN,                    
             CLK => ntir_clk[11],                       
             CE => ntir_ce[11],                         
             RST => ntir_srst[11],
             Q => ntOPIR6OUT                        
        );                                          
                                                     
    device REG_MUX_1 OPIR6_SEL_MUX
        parameter map
        (
            IN_SEL => 1'b0 
        )                
        port map                            
        (                                   
             D0  => APM_OP_IR[6],            
             D1  => 1'b0,            
             DOUT   => ntOPIR6IN             
        );                                  
                                                     
    device REG_MUX_1 OPIR6_BYP_MUX
        parameter map
        (
            IN_SEL => OPCD_BYP[6]
        )                  
        port map                               
        (                                      
             D0  => ntOPIR6OUT ,                
             D1  => ntOPIR6IN ,    
             DOUT   => ntdyn_op_ir[6]             
        );                     
  
    device IR_REG_1 REG_OPIR7 
        parameter map
        (
             SYNC_RST => SYNC_IR_11_ZB
        )                       
        port map                                    
        (                                           
             D  => ntOPIR7IN,                    
             CLK => ntir_clk[11],                       
             CE => ntir_ce[11],                         
             RST => ntir_srst[11],                        
             Q => ntOPIR7OUT                        
        );                                          
                                                     
    device REG_MUX_1 OPIR7_SEL_MUX
        parameter map
        (
            IN_SEL => 1'b0 
        )               
        port map                            
        (                                   
             D0  => APM_OP_IR[7],            
             D1  => 1'b0,                                
             DOUT   => ntOPIR7IN             
        );                                  
                                                     
    device REG_MUX_1 OPIR7_BYP_MUX
        parameter map
        (
            IN_SEL => OPCD_BYP[7]
        )                  
        port map                               
        (                                      
             D0  => ntOPIR7OUT,                
             D1  => ntOPIR7IN,                      
             DOUT   => ntdyn_op_ir[7]             
        );                
  
    device IR_REG_1 REG_OPIR8
        parameter map
        (
             SYNC_RST => SYNC_IR_11_ZB
        )                        
        port map                                    
        (                                           
             D  => ntOPIR8IN,                    
             CLK => ntir_clk[11],                       
             CE => ntir_ce[11],                         
             RST => ntir_srst[11],                                          
             Q => ntOPIR8OUT                        
        );                                          
                                                     
    device REG_MUX_1 OPIR8_SEL_MUX
        parameter map
        (
            IN_SEL => 1'b0
        )            
        port map                            
        (                                   
             D0  => APM_OP_IR[8],            
             D1  => 1'b0,                                   
             DOUT   => ntOPIR8IN             
        );                                  
                                                     
    device REG_MUX_1 OPIR8_BYP_MUX
        parameter map
        (
            IN_SEL => OPCD_BYP[8]
        )                 
        port map                               
        (                                      
             D0  => ntOPIR8OUT ,                
             D1  => ntOPIR8IN ,                    
             DOUT   => ntdyn_op_ir[8]             
        );                        
                            
    device OPCD_MUX OPCD0_MUX
        parameter map
        (
            IN_SEL => IRDSEL_B[0]
        )                                  
        port map                                    
        (                                           
             D1  => 1'b0,// SOURCEB[0],
             D0 => ntdyn_op_ir[0],                                 
             DOUT   => ntinput_opcd[0]                          
        );                                          
                                                     
    device OPCD_MUX OPCD1_MUX 
        parameter map
        (
            IN_SEL => IRDSEL_C[0]
        )          
        port map                      
        (                             
             D1  => 1'b0,//SOURCEC[0],        
             D0 => ntdyn_op_ir[1],          
             DOUT   => ntinput_opcd[1]   
        );                            
   
    device OPCD_MUX OPCD2_MUX 
        parameter map
        (
            IN_SEL => DBYP_C[0]
        )          
        port map                      
        (                             
             D1  => 1'b0,//IR_BYP_4_ZA,        
             D0 => ntdyn_op_ir[2],  
             DOUT   => ntinput_opcd[2]   
        );                            
   
    device OPCD_MUX OPCD_2_MUX
        parameter map
        (
            IN_SEL => DBYP_C[0]
        )           
        port map                      
        (                             
             D1  => 1'b0,//IR_BYP_5_ZA,        
             D0 => ntdyn_op_ir[2],           
             DOUT   => ntinput_opcd_2   
        );                            
   
    device OPCD_MUX OPCD3_MUX
        parameter map
        (
            IN_SEL => IRDSEL_B[1]
        )           
        port map                      
        (                             
             D1  => 1'b0,//SOURCEB[1],        
             D0 => ntdyn_op_ir[3],   
             DOUT   => ntinput_opcd[3]   
        );                            
   
    device OPCD_MUX OPCD7_MUX
        parameter map
        (
            IN_SEL => IRDSEL_C[1]
        )           
        port map                      
        (                             
             D1  => 1'b0,//SOURCEC[1],        
             D0 => ntdyn_op_ir[7],   
             DOUT   => ntinput_opcd[7]   
        );                            
 
    device OPCD_MUX OPCD8_MUX
        parameter map
        (
            IN_SEL => DBYP_C[1]
        )           
        port map                      
        (                             
             D1  => 1'b0,//IR_BYP_11_ZB,        
             D0 => ntdyn_op_ir[8],         
             DOUT   => ntinput_opcd[8]   
        );                            

    device OPCD_MUX OPCD_8_MUX
        parameter map
        (
            IN_SEL => DBYP_C[1]
        )           
        port map                      
        (                             
             D1  => 1'b0,//IR_BYP_12_ZB,        
             D0 => ntdyn_op_ir[8],          
             DOUT   => ntinput_opcd_8   
        );                                                

    device IR_REG_1 REG_OP0_0
        parameter map
        (
             SYNC_RST => SYNC_CTIR[0]
        )                             
        port map                                    
        (                                           
             D  => ntOP0IN[0],                    
             CLK => ntir_ctclk[0],                       
             CE => ntir_ctce[0],                                              
             RST => ntir_ctsrst[0],                     
             Q => ntOP0OUT[0]                        
        );                                          
                                                     
    device REG_MUX_1 OP0_0_SEL_MUX
        parameter map
        (
            IN_SEL => OPCD_DYN_SEL[0] 
        )               
        port map                            
        (                                   
             D0  => 1'b0,//OPCD[0],            
             D1  => APM_OP_POST[0],                                    
             DOUT   => ntOP0IN[0]             
        );                                  
                                                     
    device REG_MUX_1 OP0_0_BYP_MUX
        parameter map
        (
            IN_SEL => CTRL_IRBYP_0_OP0
        )                  
        port map                               
        (                                      
             D0  => ntOP0OUT[0] ,                
             D1  => ntOP0IN[0] ,                 
             DOUT   => ntpost_op_ir[0]             
        );  

    device IR_REG_1 REG_OP0_1 
        parameter map
        (
             SYNC_RST => SYNC_CTIR[0]
        )                           
        port map                                    
        (                                           
             D  => ntOP0IN[1],                    
             CLK => ntir_ctclk[0],                       
             CE => ntir_ctce[0],                                             
             RST => ntir_ctsrst[0],                     
             Q => ntOP0OUT[1]                        
        );                                          
                                                     
    device REG_MUX_1 OP0_1_SEL_MUX
        parameter map
        (
            IN_SEL => OPCD_DYN_SEL[1] 
        )               
        port map                            
        (                                   
             D0  => 1'b0,//OPCD[1],            
             D1  => APM_OP_POST[1],                 
             DOUT   => ntOP0IN[1]             
        );                                  
                                                     
    device REG_MUX_1 OP0_1_BYP_MUX
        parameter map
        (
            IN_SEL => CTRL_IRBYP_0_OP0
        )                  
        port map                               
        (                                      
             D0  => ntOP0OUT[1] ,                
             D1  => ntOP0IN[1] ,                        
             DOUT   => ntpost_op_ir[1]             
        );

    device IR_REG_1 REG_OP0_2 
        parameter map
        (
             SYNC_RST => SYNC_CTIR[0]
        )                           
        port map                                    
        (                                           
             D  => ntOP0IN[2],                    
             CLK => ntir_ctclk[0],                       
             CE => ntir_ctce[0],                                             
             RST => ntir_ctsrst[0],                     
             Q => ntOP0OUT[2]                        
        );                                          
                                                     
    device REG_MUX_1 OP0_2_SEL_MUX
        parameter map
        (
            IN_SEL => OPCD_DYN_SEL[2]
        )               
        port map                            
        (                                   
             D0  => 1'b0,//OPCD[2],            
             D1  => APM_OP_POST[2],                          
             DOUT   => ntOP0IN[2]             
        );                                  
                                                     
    device REG_MUX_1 OP0_2_BYP_MUX
        parameter map
        (
            IN_SEL => CTRL_IRBYP_0_OP0
        )                  
        port map                               
        (                                      
             D0  => ntOP0OUT[2] ,                
             D1  => ntOP0IN[2] ,           
             DOUT   => ntpost_op_ir[2]             
        );

    device IR_REG_1 REG_OP0_3 
        parameter map
        (
             SYNC_RST => SYNC_CTIR[0]
        )                           
        port map                                    
        (                                           
             D  => ntOP0IN[3],                    
             CLK => ntir_ctclk[0],                       
             CE => ntir_ctce[0],                                             
             RST => ntir_ctsrst[0],                     
             Q => ntOP0OUT[3]                        
        );                                          
                                                     
    device REG_MUX_1 OP0_3_SEL_MUX 
        parameter map
        (
            IN_SEL => OPCD_DYN_SEL[3]
        )              
        port map                            
        (                                   
             D0  => 1'b0,//OPCD[3],            
             D1  => APM_OP_POST[3],                                    
             DOUT   => ntOP0IN[3]             
        );                                  
                                                     
    device REG_MUX_1 OP0_3_BYP_MUX  
        parameter map
        (
            IN_SEL => CTRL_IRBYP_0_OP0
        )                
        port map                               
        (                                      
             D0  => ntOP0OUT[3] ,                
             D1  => ntOP0IN[3] ,                             
             DOUT   => ntpost_op_ir[3]             
        );

    device IR_REG_1 REG_OP0_4
        parameter map
        (
             SYNC_RST => SYNC_CTIR[0]
        )                            
        port map                                    
        (                                           
             D  => ntOP0IN[4],                    
             CLK => ntir_ctclk[0],                       
             CE => ntir_ctce[0],                                              
             RST => ntir_ctsrst[0],                     
             Q => ntOP0OUT[4]                        
        );                                          
                                                     
    device REG_MUX_1 OP0_4_SEL_MUX
        parameter map
        (
            IN_SEL => OPCD_DYN_SEL[4]
        )               
        port map                            
        (                                   
             D0  => 1'b0,//OPCD[4],            
             D1  => APM_OP_POST[4],                                     
             DOUT   => ntOP0IN[4]             
        );                                  
                                                     
    device REG_MUX_1 OP0_4_BYP_MUX
        parameter map
        (
            IN_SEL => CTRL_IRBYP_0_OP0
        )                  
        port map                               
        (                                      
             D0  => ntOP0OUT[4] ,                
             D1  => ntOP0IN[4] ,             
             DOUT   => ntpost_op_ir[4]             
        );

    device IR_REG_1 REG_OP0_5
        parameter map
        (
             SYNC_RST => SYNC_CTIR[0]
        )                            
        port map                                    
        (                                           
             D  => ntOP0IN[5],                    
             CLK => ntir_ctclk[0],                       
             CE => ntir_ctce[0],                                              
             RST => ntir_ctsrst[0],                     
             Q => ntOP0OUT[5]                        
        );                                          
                                                     
    device REG_MUX_1 OP0_5_SEL_MUX 
        parameter map
        (
            IN_SEL => OPCD_DYN_SEL[5]
        )              
        port map                            
        (                                   
             D0  => 1'b0,//OPCD[5],            
             D1  => APM_OP_POST[5],                                   
             DOUT   => ntOP0IN[5]             
        );                                  
                                                     
    device REG_MUX_1 OP0_5_BYP_MUX
        parameter map
        (
            IN_SEL => CTRL_IRBYP_0_OP0
        )                  
        port map                               
        (                                      
             D0  => ntOP0OUT[5] ,                
             D1  => ntOP0IN[5] ,                             
             DOUT   => ntpost_op_ir[5]             
        );

    device IR_REG_1 REG_OP0_6
        parameter map
        (
             SYNC_RST => SYNC_CTIR[0]
        )                                                        
        port map                                    
        (                                           
             D  => ntOP0IN[6],                    
             CLK => ntir_ctclk[0],                       
             CE => ntir_ctce[0],                                             
             RST => ntir_ctsrst[0],                     
             Q => ntOP0OUT[6]                        
        );                                          
                                                     
    device REG_MUX_1 OP0_6_SEL_MUX 
        parameter map
        (
            IN_SEL => OPCD_DYN_SEL[6]
        )              
        port map                            
        (                                   
             D0  => 1'b0,//OPCD[6],            
             D1  => APM_OP_POST[6],                                     
             DOUT   => ntOP0IN[6]             
        );                                  
                                                     
    device REG_MUX_1 OP0_6_BYP_MUX
        parameter map
        (
            IN_SEL => CTRL_IRBYP_0_OP0
        )                  
        port map                               
        (                                      
             D0  => ntOP0OUT[6] ,                
             D1  => ntOP0IN[6] ,                            
             DOUT   => ntpost_op_ir[6]             
        );

    device IR_REG_1 REG_OP1_0
        parameter map
        (
             SYNC_RST => SYNC_CTIR[1]
        )                            
        port map                                    
        (                                           
             D  => ntOP1IN[0],                    
             CLK => ntir_ctclk[1],                       
             CE => ntir_ctce[1],                                              
             RST => ntir_ctsrst[1],                     
             Q => ntOP1OUT[0]                        
        );                                          
                                                     
    device REG_MUX_1 OP1_0_SEL_MUX
        parameter map
        (
            IN_SEL => OPCD_DYN_SEL[7]
        )               
        port map                            
        (                                   
             D0  => 1'b0,//OPCD[7],            
             D1  => APM_OP_POST[7],                                    
             DOUT   => ntOP1IN[0]             
        );                                  
                                                     
    device REG_MUX_1 OP1_0_BYP_MUX
        parameter map
        (
            IN_SEL => CTRL_IRBYP_1_OP7
        )                  
        port map                               
        (                                      
             D0  => ntOP1OUT[0],                
             D1  => ntOP1IN[0],                             
             DOUT   => ntpost_op_ir[7]             
        );  

    device IR_REG_1 REG_OP1_1
        parameter map
        (
             SYNC_RST => SYNC_CTIR[1]
        )                            
        port map                                    
        (                                           
             D  => ntOP1IN[1],                    
             CLK => ntir_ctclk[1],                       
             CE => ntir_ctce[1],                                            
             RST => ntir_ctsrst[1],                     
             Q => ntOP1OUT[1]                        
        );                                          
                                                     
    device REG_MUX_1 OP1_1_SEL_MUX
        parameter map
        (
            IN_SEL => OPCD_DYN_SEL[8]
        )                
        port map                            
        (                                   
             D0  => 1'b0,//OPCD[8],            
             D1  => APM_OP_POST[8],                                    
             DOUT   => ntOP1IN[1]             
        );                                  
                                                     
    device REG_MUX_1 OP1_1_BYP_MUX
        parameter map
        (
            IN_SEL => CTRL_IRBYP_4_OP8
        )                   
        port map                               
        (                                      
             D0  => ntOP1OUT[1],                
             D1  => ntOP1IN[1],                              
             DOUT   => ntpost_op_ir[8]             
        );

    device IR_REG_1 REG_OP1_2
        parameter map
        (
             SYNC_RST => SYNC_CTIR[1]
        )                            
        port map                                    
        (                                           
             D  => ntOP1IN[2],                    
             CLK => ntir_ctclk[1],                       
             CE => ntir_ctce[1],                                              
             RST => ntir_ctsrst[1],                     
             Q => ntOP1OUT[2]                        
        );                                          
                                                     
    device REG_MUX_1 OP1_2_SEL_MUX
        parameter map
        (
            IN_SEL => OPCD_DYN_SEL[9]
        )               
        port map                            
        (                                   
             D0  => 1'b0,//OPCD[9],            
             D1  => APM_OP_POST[9],                                     
             DOUT   => ntOP1IN[2]             
        );                                  
                                                     
    device REG_MUX_1 OP1_2_BYP_MUX
        parameter map
        (
            IN_SEL => CTRL_IRBYP_4_OP8
        )                  
        port map                               
        (                                      
             D0  => ntOP1OUT[2],                
             D1  => ntOP1IN[2],                              
             DOUT   => ntpost_op_ir[9]             
        );

    device IR_REG_1 REG_OP1_3
        parameter map
        (
             SYNC_RST => SYNC_CTIR[1]
        )                              
        port map                                    
        (                                           
             D  => ntOP1IN[3],                    
             CLK => ntir_ctclk[1],                       
             CE => ntir_ctce[1],                                             
             RST => ntir_ctsrst[1],                     
             Q => ntOP1OUT[3]                        
        );                                          
                                                     
    device REG_MUX_1 OP1_3_SEL_MUX
        parameter map
        (
            IN_SEL => OPCD_DYN_SEL[10]
        )               
        port map                            
        (                                   
             D0  => 1'b0,//OPCD[10],            
             D1  => APM_OP_POST[10],                                    
             DOUT   => ntOP1IN[3]             
        );                                  
                                                     
    device REG_MUX_1 OP1_3_BYP_MUX 
        parameter map
        (
            IN_SEL => CTRL_IRBYP_4_OP8
        )                 
        port map                               
        (                                      
             D0  => ntOP1OUT[3],                
             D1  => ntOP1IN[3],                              
             DOUT   => ntpost_op_ir[10]             
        );

    device IR_REG_1 REG_OP2
        parameter map
        (
             SYNC_RST => SYNC_CTIR[2]
        )                            
        port map                                    
        (                                           
             D  => ntOP2IN,                    
             CLK => ntir_ctclk[2],                       
             CE => ntir_ctce[2],                                            
             RST => ntir_ctsrst[2],                     
             Q => ntOP2OUT                        
        );                                          
                                                     
    device REG_MUX_1 OP2_SEL_MUX
        parameter map
        (
            IN_SEL => 1'b1
        )               
        port map                            
        (                                   
             D0  => 1'b0,            
             D1  => APM_OP_PRAD[0],                                    
             DOUT   => ntOP2IN             
        );                                  
                                                     
    device REG_MUX_1 OP2_BYP_MUX
        parameter map
        (
            IN_SEL => CTRL_IRBYP_2_OPA
        )                   
        port map                               
        (                                      
             D0  => ntOP2OUT ,                
             D1  => ntOP2IN ,                              
             DOUT   => ntprad_op[0]             
        );                                    
                                                    
    device IR_REG_1 REG_OP3
        parameter map
        (
             SYNC_RST => SYNC_CTIR[3]
        )                            
        port map                                    
        (                                           
             D  => ntOP3IN,                    
             CLK => ntir_ctclk[3],                       
             CE => ntir_ctce[3],                                             
             RST => ntir_ctsrst[3],                     
             Q => ntOP3OUT                        
        );                                          
                                                     
    device REG_MUX_1 OP3_SEL_MUX
        parameter map
        (
            IN_SEL => 1'b1
        )               
        port map                            
        (                                   
             D0  => 1'b0,            
             D1  => APM_OP_PRAD[1],                                   
             DOUT   => ntOP3IN             
        );                                  
                                                     
    device REG_MUX_1 OP3_BYP_MUX 
        parameter map
        (
            IN_SEL => CTRL_IRBYP_3_OPB
        )                 
        port map                               
        (                                      
             D0  => ntOP3OUT ,                
             D1  => ntOP3IN ,                             
             DOUT   => ntprad_op[1]             
        );                                  
                                                                                        
    device IR_REG_9 REG_A00
        parameter map
        (
             SYNC_RST => SYNC_IR_0_XA
        )                            
        port map                                    
        (                                           
             D[8:0]  => ntA00IN[8:0],                    
             CLK => ntir_clk[0],                       
             CE => ntir_ce[0],                                            
             RST => ntir_srst[0],                     
             Q[8:0] => ntA00OUT[8:0]                        
        );                                          
                                                     
    device REG_MUX_9 A00_SEL_MUX
        parameter map
        (
            IN_SEL => SOURCEA[0]
        )                
        port map                            
        (                                   
             D0[8:0]  => DXIA[8:0],            
             D1[8:0]  => 9'b0000_0000_0,//CONST_IA0[8:0],                                    
             DOUT[8:0]   => ntA00IN[8:0]             
        );                                  
                                                     
    device REG_MUX_9 A00_BYP_MUX
        parameter map
        (
             IN_SEL => IR_BYP_0_XA
        )                  
        port map                               
        (                                      
             D0[8:0]  => ntA00OUT[8:0],                
             D1[8:0]  => ntA00IN[8:0],                             
             DOUT[8:0]   => ntzia_post[8:0]             
        );       
                                                   
    device IR_REG_9 REG_A01
        parameter map
        (
             SYNC_RST => SYNC_IR_1_XA
        )                            
        port map                                    
        (                                           
             D[8:0]  => ntA01IN[8:0],                    
             CLK => ntir_clk[1],                       
             CE => ntir_ce[1],                                              
             RST => ntir_srst[1],                     
             Q[8:0] => ntA01OUT[8:0]                        
        );                                          
                                                     
    device REG_MUX_9 A01_SEL_MUX 
        parameter map
        (
            IN_SEL => SOURCEA[0]
        )              
        port map                            
        (                                   
             D0[8:0]  => DXIA[17:9],            
             D1[8:0]  => 9'b0000_0000_0,//CONST_IA0[17:9],
             DOUT[8:0]   => ntA01IN[8:0]
        );                                  
                                                     
    device REG_MUX_9 A01_BYP_MUX
        parameter map
        (
             IN_SEL => IR_BYP_1_XA
        )                  
        port map                               
        (                                      
             D0[8:0]  => ntA01OUT[8:0],                
             D1[8:0]  => ntA01IN[8:0],                              
             DOUT[8:0]   => ntzia_post[17:9]             
        ); 
                                       
    device IR_REG_1 REG_A01_SIGN
        parameter map
        (
             SYNC_RST => SYNC_IR_1_XA
        )                            
        port map                                    
        (                                           
             D  => ntA01SIGNIN,                    
             CLK => ntir_clk[1],                       
             CE => ntir_ce[1],                                             
             RST => ntir_srst[1],                     
             Q => ntA01SIGNOUT                        
        );                                          
                                                     
    device REG_MUX_1 A01_SIGN_SEL_MUX 
        parameter map
        (
            IN_SEL => SOURCEA[0]
        )               
        port map                            
        (                                   
             D0  => DXIA_SIGNED,            
             D1  => 1'b0,//CONST_IA0[18],                                     
             DOUT   => ntA01SIGNIN             
        );                                  
                                                     
    device REG_MUX_1 A01_SIGN_BYP_MUX
        parameter map
        (
             IN_SEL => IR_BYP_1_XA
        )                   
        port map                               
        (                                      
             D0  => ntA01SIGNOUT,                
             D1  => ntA01SIGNIN,                              
             DOUT   => ntxa_signed             
        );
    
    device IR_REG_9 REG_B00
        parameter map
        (
             SYNC_RST => SYNC_IR_2_YA
        )                            
        port map                                    
        (                                           
             D[8:0]  => ntB00IN[8:0],                    
             CLK => ntir_clk[2],                       
             CE => ntir_ce[2],                                             
             RST => ntir_srst[2],                     
             Q[8:0] => ntB00OUT[8:0]                        
        );                                          
                                                     
    device REG_MUX1_9 B00_SEL_MUX           
        port map                            
        (                                   
             D0[8:0]  => DYIA[8:0],            
             D1[8:0]  => CYI[8:0],                    
             IN_SEL => ntinput_opcd[0],                 
             DOUT[8:0]   => ntB00IN[8:0]             
        );                                  
                                                     
    device REG_MUX_9 B00_BYP_MUX
        parameter map
        (
             IN_SEL => IR_BYP_2_YA
        )                  
        port map                               
        (                                      
             D0[8:0]  => ntB00OUT[8:0],                
             D1[8:0]  => ntB00IN[8:0],                             
             DOUT[8:0]   => ntzia_post[26:18]             
        );
    
    device IR_REG_9 REG_B01
        parameter map
        (
             SYNC_RST => SYNC_IR_3_YA
        )                             
        port map                                    
        (                                           
             D[8:0]  => ntB01IN[8:0],                    
             CLK => ntir_clk[3],                       
             CE => ntir_ce[3],                                             
             RST => ntir_srst[3],                     
             Q[8:0] => ntB01OUT[8:0]                        
        );                                          
                                                     
    device REG_MUX1_9 B01_SEL_MUX           
        port map                            
        (                                   
             D0[8:0]  => DYIA[17:9],            
             D1[8:0]  => CYI[17:9],                    
             IN_SEL => ntinput_opcd[0],                 
             DOUT[8:0]   => ntB01IN[8:0]             
        );                                  
                                                     
    device REG_MUX_9 B01_BYP_MUX
        parameter map
        (
             IN_SEL => IR_BYP_3_YA
        )                  
        port map                               
        (                                      
             D0[8:0]  => ntB01OUT[8:0],                
             D1[8:0]  => ntB01IN[8:0],                            
             DOUT[8:0]   => ntzia_post[35:27]             
        );
    
    device IR_REG_1 REG_B01_SIGN
        parameter map
        (
             SYNC_RST => SYNC_IR_3_YA
        )                            
        port map                                    
        (                                           
             D  => ntB01SIGNIN,                    
             CLK => ntir_clk[3],                       
             CE => ntir_ce[3],                                             
             RST => ntir_srst[3],                     
             Q => ntB01SIGNOUT                        
        );                                          
                                                     
    device REG_MUX1_1 B01_SIGN_SEL_MUX           
        port map                            
        (                                   
             D0  => DYIA_SIGNED,            
             D1  => CYI_SIGNED,                    
             IN_SEL => ntinput_opcd[0],                 
             DOUT   => ntB01SIGNIN             
        );                                  
                                                     
    device REG_MUX_1 B01_SIGN_BYP_MUX
        parameter map
        (
             IN_SEL => IR_BYP_3_YA
        )                 
        port map                               
        (                                      
             D0  => ntB01SIGNOUT,                
             D1  => ntB01SIGNIN,                             
             DOUT   => ntya_signed             
        );
    
    device IR_REG_9 REG_C00
        parameter map
        (
             SYNC_RST => SYNC_IR_4_ZA
        )                            
        port map                                    
        (                                           
             D  => ntC00IN[8:0],                    
             CLK => ntir_clk[4],                       
             CE => ntir_ce[4],                                              
             RST => ntir_srst[4],                     
             Q => ntC00OUT[8:0]                        
        );                                          
                                                     
    device REG_MUX1_9 C00_SEL_MUX           
        port map                            
        (                                   
             D0[8:0]  => DZIA[8:0],            
             D1[8:0]  => ntsric0[8:0],                    
             IN_SEL => ntinput_opcd[1],                 
             DOUT[8:0]   => ntC00IN[8:0]             
        );                                  
                                                     
    device REG_MUX1_9 C00_BYP_MUX              
        port map                               
        (                                      
             D0[8:0]  => ntC00OUT[8:0],                
             D1[8:0]  => ntC00IN[8:0],                 
             IN_SEL => ntinput_opcd[2],             
             DOUT[8:0]   => ntzic_post[8:0]             
        );
    
    device IR_REG_9 REG_C01   
        parameter map
        (
             SYNC_RST => SYNC_IR_5_ZA
        )                         
        port map                                    
        (                                           
             D[8:0]  => ntC01IN[8:0],                    
             CLK => ntir_clk[5],                       
             CE => ntir_ce[5],                                             
             RST => ntir_srst[5],                     
             Q[8:0] => ntC01OUT[8:0]                        
         );                                          
                                                     
    device REG_MUX1_9 C01_SEL_MUX           
        port map                            
        (                                   
             D0[8:0]  => DZIA[17:9],            
             D1[8:0]  => ntsric0[17:9],                    
             IN_SEL => ntinput_opcd[1],                 
             DOUT[8:0]   => ntC01IN[8:0]             
        );                                  
                                                     
    device REG_MUX1_9 C01_BYP_MUX              
        port map                               
        (                                      
             D0[8:0]  => ntC01OUT[8:0],                
             D1[8:0]  => ntC01IN[8:0],                 
             IN_SEL => ntinput_opcd_2,             
             DOUT[8:0]   => ntzic_post[17:9]             
        );    
        
    device IR_REG_1 REG_C01_SIGN 
        parameter map
        (
             SYNC_RST => SYNC_IR_5_ZA
        )                           
        port map                                    
        (                                           
             D  => ntC01SIGNIN,                    
             CLK => ntir_clk[5],                       
             CE => ntir_ce[5],                                            
             RST => ntir_srst[5],                     
             Q => ntC01SIGNOUT
         );                                          
                                                     
    device REG_MUX1_1 C01_SIGN_SEL_MUX           
        port map                            
        (                                   
             D0  => DZIA_SIGNED,            
             D1  => ntsric0[18],                    
             IN_SEL => ntinput_opcd[1],                 
             DOUT   => ntC01SIGNIN
        );                                  
                                                     
    device REG_MUX1_1 C01_SIGN_BYP_MUX              
        port map                               
        (                                      
             D0  => ntC01SIGNOUT,                
             D1  => ntC01SIGNIN,                 
             IN_SEL => ntinput_opcd_2,             
             DOUT   => ntza_signed             
        );      
    
    device IR_REG_14 REG_C02 
        parameter map
        (
             SYNC_RST => SYNC_IR_6_ZA
        )                            
        port map                                    
        (                                           
             D[13:0]  => ntC02IN[13:0],                    
             CLK => ntir_clk[6],                       
             CE => ntir_ce[6],                                            
             RST => ntir_srst[6],                     
             Q[13:0] => ntC02OUT[13:0]                        
         );                                          
                                                     
    device REG_MUX1_14 C02_SEL_MUX           
        port map                            
        (                                   
             D0[13:0]  => DZIA[31:18],            
             D1[13:0]  => 14'b0,                    
             IN_SEL => ntinput_opcd[1],                 
             DOUT[13:0]   => ntC02IN[13:0]             
        );                                  
                                                     
    device REG_MUX_14 C02_BYP_MUX  
        parameter map
        (
             IN_SEL => IR_BYP_6_ZA
        )                
        port map                               
        (                                      
             D0[13:0]  => ntC02OUT[13:0],                
             D1[13:0]  => ntC02IN[13:0],                              
             DOUT[13:0]   => ntzic_post[31:18]             
        );     
    
    device IR_REG_9 REG_A10
        parameter map
        (
             SYNC_RST => SYNC_IR_7_XB
        )                            
        port map                                    
        (                                           
             D[8:0]  => ntA10IN[8:0],                    
             CLK => ntir_clk[7],                       
             CE => ntir_ce[7],                                              
             RST => ntir_srst[7],                     
             Q[8:0] => ntA10OUT[8:0]                        
         );                                          
                                                     
    device REG_MUX_9 A10_SEL_MUX
        parameter map
        (
             IN_SEL => SOURCEA[1]
        )               
        port map                            
        (                                   
             D0[8:0]  => DXIB[8:0],            
             D1[8:0]  => 9'b0000_0000_0,//CONST_IA1[8:0],                                    
             DOUT[8:0]   => ntA10IN[8:0]             
        );                                  
                                                     
    device REG_MUX_9 A10_BYP_MUX 
        parameter map
        (
             IN_SEL => IR_BYP_7_XB
        )                  
        port map                               
        (                                      
             D0[8:0]  => ntA10OUT[8:0],                
             D1[8:0]  => ntA10IN[8:0],                              
             DOUT[8:0]   => ntzib_post[8:0]             
        );    
    
    device IR_REG_9 REG_A11
        parameter map
        (
             SYNC_RST => SYNC_IR_8_XB
        )                             
        port map                                    
        (                                           
             D[8:0]  => ntA11IN[8:0],                    
             CLK => ntir_clk[8],                       
             CE => ntir_ce[8],                                             
             RST => ntir_srst[8],                     
             Q[8:0] => ntA11OUT[8:0]                        
         );                                          
                                                     
    device REG_MUX_9 A11_SEL_MUX  
        parameter map
        (
             IN_SEL => SOURCEA[1]
        )              
        port map                            
        (                                   
             D0[8:0]  => DXIB[17:9],            
             D1[8:0]  => 9'b0000_0000_0,//CONST_IA1[17:9],                                     
             DOUT[8:0]   => ntA11IN[8:0]             
        );                                  
                                                     
    device REG_MUX_9 A11_BYP_MUX 
        parameter map
        (
             IN_SEL => IR_BYP_8_XB
        )                  
        port map                               
        (                                      
             D0[8:0]  => ntA11OUT[8:0],                
             D1[8:0]  => ntA11IN[8:0],                             
             DOUT[8:0]   => ntzib_post[17:9]             
        );     
    
    device IR_REG_1 REG_A11_SIGN
        parameter map
        (
             SYNC_RST => SYNC_IR_8_XB
        )                            
        port map                                    
        (                                           
             D  => ntA11SIGNIN,                    
             CLK => ntir_clk[8],                       
             CE => ntir_ce[8],                                              
             RST => ntir_srst[8],                     
             Q => ntA11SIGNOUT                        
         );                                          
                                                     
    device REG_MUX_1 A11_SIGN_SEL_MUX 
        parameter map
        (
             IN_SEL => SOURCEA[1]
        )              
        port map                            
        (                                   
             D0  => DXIB_SIGNED,            
             D1  => 1'b0,//CONST_IA1[18],                                    
             DOUT   => ntA11SIGNIN             
        );                                  
                                                     
    device REG_MUX_1 A11_SIGN_BYP_MUX  
        parameter map
        (
             IN_SEL => IR_BYP_8_XB
        )                 
        port map                               
        (                                      
             D0  => ntA11SIGNOUT,                
             D1  => ntA11SIGNIN,                            
             DOUT   => ntxb_signed             
        );    
    
    device IR_REG_9 REG_B10
        parameter map
        (
             SYNC_RST => SYNC_IR_9_YB
        )                             
        port map                                    
        (                                           
             D[8:0]  => ntB10IN[8:0],                    
             CLK => ntir_clk[9],                       
             CE => ntir_ce[9],                                
             RST => ntir_srst[9],                     
             Q[8:0] => ntB10OUT[8:0]                        
         );                                          
                                                     
    device REG_MUX1_9 B10_SEL_MUX           
        port map                            
        (                                   
             D0[8:0]  => DYIB[8:0],            
             D1[8:0]  => ntsrib[8:0],                    
             IN_SEL => ntinput_opcd[3],                 
             DOUT[8:0]   => ntB10IN[8:0]             
        );                                  
                                                     
    device REG_MUX_9 B10_BYP_MUX 
        parameter map
        (
             IN_SEL => IR_BYP_9_YB
        )                 
        port map                               
        (                                      
             D0[8:0]  => ntB10OUT[8:0],                
             D1[8:0]  => ntB10IN[8:0],                              
             DOUT[8:0]   => ntzib_post[26:18]             
        );      
    
    device IR_REG_9 REG_B11 
        parameter map
        (
             SYNC_RST => SYNC_IR_10_YB
        )                           
        port map                                    
        (                                           
             D[8:0]  => ntB11IN[8:0],                    
             CLK => ntir_clk[10],                       
             CE => ntir_ce[10],                                              
             RST => ntir_srst[10],                     
             Q[8:0] => ntB11OUT[8:0]                        
         );                                          
                                                     
    device REG_MUX1_9 B11_SEL_MUX           
        port map                            
        (                                   
             D0[8:0]  => DYIB[17:9],            
             D1[8:0]  => ntsrib[17:9],                    
             IN_SEL => ntinput_opcd[3],                 
             DOUT[8:0]   => ntB11IN[8:0]             
        );                                  
                                                     
    device REG_MUX_9 B11_BYP_MUX 
        parameter map
        (
             IN_SEL => IR_BYP_10_YB
        )                 
        port map                               
        (                                      
             D0[8:0]  => ntB11OUT[8:0],                
             D1[8:0]  => ntB11IN[8:0],                             
             DOUT[8:0]   => ntzib_post[35:27]             
        );    
    
    device IR_REG_1 REG_B11_SIGN
        parameter map
        (
             SYNC_RST => SYNC_IR_10_YB
        )                             
        port map                                    
        (                                           
             D  => ntB11SIGNIN,                    
             CLK => ntir_clk[10],                       
             CE => ntir_ce[10],                                             
             RST => ntir_srst[10],                     
             Q => ntB11SIGNOUT                        
         );                                          
                                                     
    device REG_MUX1_1 B11_SIGN_SEL_MUX           
        port map                            
        (                                   
             D0  => DYIB_SIGNED,            
             D1  => ntsrib[18],                    
             IN_SEL => ntinput_opcd[3],                 
             DOUT   => ntB11SIGNIN             
        );                                  
                                                     
    device REG_MUX_1 B11_SIGN_BYP_MUX   
        parameter map
        (
             IN_SEL => IR_BYP_10_YB
        )               
        port map                               
        (                                      
             D0  => ntB11SIGNOUT,                
             D1  => ntB11SIGNIN,                             
             DOUT   => ntyb_signed             
        );     
    
    device IR_REG_9 REG_C10
        parameter map
        (
             SYNC_RST => SYNC_IR_11_ZB
        )                             
        port map                                    
        (                                           
             D[8:0]  => ntC10IN[8:0],                    
             CLK => ntir_clk[11],                       
             CE => ntir_ce[11],                                             
             RST => ntir_srst[11],                     
             Q[8:0] => ntC10OUT[8:0]                        
         );                                          
                                                     
    device REG_MUX1_9 C10_SEL_MUX           
        port map                            
        (                                   
             D0[8:0]  => DZIB[8:0],            
             D1[8:0]  => ntsric1[8:0],                    
             IN_SEL => ntinput_opcd[7],                 
             DOUT[8:0]   => ntC10IN[8:0]             
        );                                  
                                                     
    device REG_MUX1_9 C10_BYP_MUX              
        port map                               
        (                                      
             D0[8:0]  => ntC10OUT[8:0],                
             D1[8:0]  => ntC10IN[8:0],                 
             IN_SEL => ntinput_opcd[8],             
             DOUT[8:0]   => ntzic_post[40:32]             
        );    
    
    device IR_REG_9 REG_C11
        parameter map
        (
             SYNC_RST => SYNC_IR_12_ZB
        )                            
        port map                                    
        (                                           
             D[8:0]  => ntC11IN[8:0],                    
             CLK => ntir_clk[12],                       
             CE => ntir_ce[12],                      
             RST => ntir_srst[12],                     
             Q[8:0] => ntC11OUT[8:0]                        
         );                                          
                                                     
    device REG_MUX1_9 C11_SEL_MUX           
        port map                            
        (                                   
             D0[8:0]  => DZIB[17:9],            
             D1[8:0]  => ntsric1[17:9],                    
             IN_SEL => ntinput_opcd[7],                 
             DOUT[8:0]   => ntC11IN[8:0]             
        );                                  
                                                     
    device REG_MUX1_9 C11_BYP_MUX              
        port map                               
        (                                      
             D0[8:0]  => ntC11OUT[8:0],                
             D1[8:0]  => ntC11IN[8:0],                 
             IN_SEL => ntinput_opcd_8,             
             DOUT[8:0]   => ntzic_post[49:41]             
        );    
    
    device IR_REG_1 REG_C11_SIGN 
        parameter map
        (
             SYNC_RST => SYNC_IR_12_ZB
        )                           
        port map                                    
        (                                           
             D  => ntC11SIGNIN,                    
             CLK => ntir_clk[12],                       
             CE => ntir_ce[12],                                            
             RST => ntir_srst[12],                     
             Q => ntC11SIGNOUT                        
         );                                          
                                                     
    device REG_MUX1_1 C11_SIGN_SEL_MUX           
        port map                            
        (                                   
             D0  => DZIB_SIGNED,            
             D1  => ntsric1[18],                    
             IN_SEL => ntinput_opcd[7],                 
             DOUT   => ntC11SIGNIN             
        );                                  
                                                     
    device REG_MUX1_1 C11_SIGN_BYP_MUX              
        port map                               
        (                                      
             D0  => ntC11SIGNOUT ,                
             D1  => ntC11SIGNIN ,                 
             IN_SEL => ntinput_opcd_8,             
             DOUT   => ntzb_signed             
        );     
    
    device IR_REG_14 REG_C12   
        parameter map
        (
             SYNC_RST => SYNC_IR_13_ZB
        )                          
        port map                                    
        (                                           
             D[13:0]  => ntC12IN[13:0],                    
             CLK => ntir_clk[13],                       
             CE => ntir_ce[13],                                             
             RST => ntir_srst[13],                     
             Q[13:0] => ntC12OUT[13:0]                        
         );                                          
                                                     
    device REG_MUX1_14 C12_SEL_MUX           
        port map                            
        (                                   
             D0[13:0]  => DZIB[31:18],            
             D1[13:0]  => 14'b0,                    
             IN_SEL => ntinput_opcd[7],                 
             DOUT[13:0]   => ntC12IN[13:0]             
        );                                  
                                                     
    device REG_MUX_14 C12_BYP_MUX 
        parameter map
        (
             IN_SEL => IR_BYP_13_ZB
        )                  
        port map                               
        (                                      
             D0[13:0]  => ntC12OUT[13:0] ,                
             D1[13:0]  => ntC12IN[13:0] ,                             
             DOUT[13:0]   => ntzic_post[63:50]             
        );    
    
    device IR_REG_19 REG_BD0
        parameter map
        (
             SYNC_RST => SYNC_IR_9_YB
        )                            
        port map                                    
        (                                           
             D[18:0]  => ntBD0IN[18:0],                    
             CLK => ntir_clk[9],                       
             CE => ntir_ce[9],                                            
             RST => ntir_srst[9],                     
             Q[18:0] => ntBD0OUT[18:0]                        
         );                                          
                                                     
    device REG_MUX_19 BD0_SEL_MUX 
        parameter map
        (
             IN_SEL => IR_BD_BYP
        )          
        port map                            
        (                                   
             D0[18:0]  => {ntyb_signed,ntyb[17:0]},            
             D1[18:0]  => {ntya_signed,ntya[17:0]},                                    
             DOUT[18:0]   => ntBD0IN[18:0]             
        );                                  
                                                     
    device REG_MUX_19 BD0_BYP_MUX 
        parameter map
        (
             IN_SEL => IR_BD_BYP
        )             
        port map                               
        (                                      
             D0[18:0]  => ntBD0OUT[18:0] ,                
             D1[18:0]  => ntBD0IN[18:0] ,                             
             DOUT[18:0]   => {ntcyo_sign_bd0,CYO[17:0]}             
        );     
    
    device IR_REG_10 REG_BD1
        parameter map
        (
             SYNC_RST => SYNC_IR_10_YB
        )                            
        port map                                    
        (                                           
             D[9:0]  => ntBD1IN[9:0],                    
             CLK => ntir_clk[10],                       
             CE => ntir_ce[10],                                             
             RST => ntir_srst[10],                     
             Q[9:0] => ntBD1OUT[9:0]                        
         );                                          
                                                     
    device REG_MUX_10 BD1_SEL_MUX
        parameter map
        (
             IN_SEL => 1'b1
        )               
        port map                            
        (                                   
             D0[9:0]  => 10'b0,            
             D1[9:0]  => {ntyb_signed,ntyb[8:0]},              
             DOUT[9:0]   => ntBD1IN[9:0]             
        );                                  
                                                     
    device REG_MUX_10 BD1_BYP_MUX              
        parameter map
        (
             IN_SEL => IR_BD_BYP
        )     
        port map                               
        (                                      
             D0[9:0]  => ntBD1OUT[9:0] ,                
             D1[9:0]  => ntBD1IN[9:0] ,                             
             DOUT[9:0]   => {ntcyo_sign_bd1,CYO[26:18]}             
        );
        
    
    device REG_MUX_19 srib_MUX
        parameter map
        (
             IN_SEL => 1'b1//IRSHF_B_SEL
        )                  
        port map                               
        (                                      
             D0[18:0]  => {ntya_signed,ntya[17:0]} ,                
             D1[18:0]  => {CYI_SIGNED,CYI[26],{8'b0},CYI[26:18]},               
             DOUT[18:0]   => ntsrib[18:0]             
        );     
    
    device REG_MUX_19 sric0_MUX              
        parameter map
        (
             IN_SEL => IR_BD_BYP
        )
        port map                               
        (                                      
             D1[18:0]  => {CZI_SIGNED,CZI[17:0]} ,                
             D0[18:0]  => {ntcyo_sign_bd0,CYO[17:0]},                 
             //IN_SEL => ntdyn_op_ir[6],             
             DOUT[18:0]   => ntsric0[18:0]             
        );     
    
    device REG_MUX_19 sric1_MUX_IN              
        parameter map
        (
             IN_SEL => IR_BD_BYP
        )
        port map                               
        (                                      
             D1[18:0]  => {CZI_SIGNED,CZI[26],{8'b0},CZI[26:18]} ,                
             D0[18:0]  => {ntcyo_sign_bd1,CYO[26],{8'b0},CYO[26:18]},                 
             //IN_SEL => ntdyn_op_ir[6],             
             DOUT[18:0]   => ntsric1IN[18:0]             
        );     
        
    device REG_MUX_19 sric1_MUX
        parameter map
        (
             IN_SEL => IRSHF_C_SEL
        )                  
        port map                               
        (                                      
             D0[18:0]  =>  ntsric0[18:0],                
             D1[18:0]  => ntsric1IN,            
             DOUT[18:0]   => ntsric1[18:0]             
        );     
    
    device REG_MUX_1 CYO_SIGNED_MUX 
        parameter map
        (
             IN_SEL => CYSIGNED_SEL
        )                 
        port map                               
        (                                      
             D0  =>  ntcyo_sign_bd0,                
             D1  => ntcyo_sign_bd1,                              
             DOUT   => CYO_SIGNED             
        );     
    
    device REG_MUX_1 CZO_SIGNED_MUX 
        parameter map
        (
             IN_SEL => CZSIGNED_SEL
        )                  
        port map                               
        (                                      
             D0  =>  ntza_signed,                
             D1  =>  ntzb_signed,                              
             DOUT   => CZO_SIGNED             
        );    

    device REG_CTRL_MUX_1 XA_PSE_SIGN 
        parameter map
        (
             IN_SEL => SIGNED_ENA[0]
        )                 
        port map                               
        (                                      
             D0  =>  ntzia_post[17],                
             D1  => ntxa_signed,                             
             DOUT   => ntxa[17]            
        ); 

    device REG_CTRL_MUX1_17 XA_PSE                  
        port map                               
        (                                      
             D0  => ntzia_post[16:0],                
             D1  => 17'h00000,//DXIA_PSE,
             D2  => ntxa[17],                             
             DOUT   => ntxa[16:0]            
        ); 

    device REG_CTRL_MUX_1 YA_PSE_SIGN 
        parameter map
        (
             IN_SEL => SIGNED_ENB[0]
        )                 
        port map                               
        (                                      
             D0  =>  ntzia_post[35],                
             D1  => ntya_signed,                             
             DOUT   => ntya[17]            
        ); 

    device REG_CTRL_MUX1_17 YA_PSE                  
        port map                               
        (                                      
             D0  => ntzia_post[34:18],                
             D1  => 17'h00000,//DYIA_PSE,
             D2  => ntya[17],                             
             DOUT   => ntya[16:0]            
        );

    device REG_CTRL_MUX_1 ZA_PSE_SIGN 
        parameter map
        (
             IN_SEL => SIGNED_ENC[0]
        )                 
        port map                               
        (                                      
             D0  =>  ntzic_post[17],                
             D1  => ntza_signed,                             
             DOUT   => ntza[17]            
        ); 

    device REG_CTRL_MUX1_17 ZA_PSE                  
        port map                               
        (                                      
             D0  => ntzic_post[16:0],                
             D1  => 17'h00000,//DZIA_PSE[16:0],
             D2  => ntza[17],                             
             DOUT   => ntza[16:0]            
        );

    device REG_CTRL_MUX_1 XB_PSE_SIGN 
        parameter map
        (
             IN_SEL => SIGNED_ENA[1]
        )                 
        port map                               
        (                                      
             D0  =>  ntzib_post[17],                
             D1  => ntxb_signed,                             
             DOUT   => ntxb[17]            
        ); 

    device REG_CTRL_MUX1_17 XB_PSE                  
        port map                               
        (                                      
             D0  => ntzib_post[16:0],                
             D1  => 17'h00000,//DXIB_PSE,
             D2  => ntxb[17],                             
             DOUT   => ntxb[16:0]            
        );

    device REG_CTRL_MUX_1 YB_PSE_SIGN 
        parameter map
        (
             IN_SEL => SIGNED_ENB[1]
        )                 
        port map                               
        (                                      
             D0  =>  ntzib_post[35],                
             D1  => ntyb_signed,                             
             DOUT   => ntyb[17]            
        ); 

    device REG_CTRL_MUX1_17 YB_PSE                  
        port map                               
        (                                      
             D0  => ntzib_post[34:18],                
             D1  => 17'h00000,//DYIB_PSE,
             D2  => ntyb[17],                             
             DOUT   => ntyb[16:0]            
        );

    device REG_CTRL_MUX_1 ZB_PSE_SIGN 
        parameter map
        (
             IN_SEL => SIGNED_ENC[1]
        )                 
        port map                               
        (                                      
             D0  =>  ntzic_post[49],                
             D1  => ntzb_signed,                             
             DOUT   => ntzb[17]            
        ); 

    device REG_CTRL_MUX1_17 ZB_PSE                  
        port map                               
        (                                      
             D0  => ntzic_post[48:32],                
             D1  => 17'h00000,//DZIB_PSE[16:0],
             D2  => ntzb[17],                             
             DOUT   => ntzb[16:0]            
        );
    
 //prad_unit

    device REG_CTRL PRADR_CTRL_0
        parameter map
        (
             CLK_IR => CLK_PRAD_0_XA,
             CE_IR => CE_PRAD_0_XA,
             RST_IR => RST_PRAD_0_XA
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntpradr_clk[0],
             IR_CE =>  ntpradr_ce[0], 
             IR_RST => ntpradr_srst[0]
        );

    device REG_CTRL PRADR_CTRL_1
        parameter map
        (
             CLK_IR => CLK_PRAD_1_XA,
             CE_IR => CE_PRAD_1_XA,
             RST_IR => RST_PRAD_1_XA
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntpradr_clk[1],
             IR_CE =>  ntpradr_ce[1], 
             IR_RST => ntpradr_srst[1]
        );

    device REG_CTRL PRADR_CTRL_2
        parameter map
        (
             CLK_IR => CLK_PRAD_2_YA,
             CE_IR => CE_PRAD_2_YA,
             RST_IR => RST_PRAD_2_YA
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntpradr_clk[2],
             IR_CE =>  ntpradr_ce[2], 
             IR_RST => ntpradr_srst[2]
        );

    device REG_CTRL PRADR_CTRL_3
        parameter map
        (
             CLK_IR => CLK_PRAD_3_YA,
             CE_IR => CE_PRAD_3_YA,
             RST_IR => RST_PRAD_3_YA
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntpradr_clk[3],
             IR_CE =>  ntpradr_ce[3], 
             IR_RST => ntpradr_srst[3]
        );

    device REG_CTRL PRADR_CTRL_4
        parameter map
        (
             CLK_IR => CLK_PRAD_4_XB,
             CE_IR => CE_PRAD_4_XB,
             RST_IR => RST_PRAD_4_XB
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntpradr_clk[4],
             IR_CE =>  ntpradr_ce[4], 
             IR_RST => ntpradr_srst[4]
        );

    device REG_CTRL PRADR_CTRL_5
        parameter map
        (
             CLK_IR => CLK_PRAD_5_XB,
             CE_IR => CE_PRAD_5_XB,
             RST_IR => RST_PRAD_5_XB
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntpradr_clk[5],
             IR_CE =>  ntpradr_ce[5], 
             IR_RST => ntpradr_srst[5]
        );

    device REG_CTRL PRADR_CTRL_6
        parameter map
        (
             CLK_IR => CLK_PRAD_6_YB,
             CE_IR => CE_PRAD_6_YB,
             RST_IR => RST_PRAD_6_YB
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntpradr_clk[6],
             IR_CE =>  ntpradr_ce[6], 
             IR_RST => ntpradr_srst[6]
        );

    device REG_CTRL PRADR_CTRL_7
        parameter map 
        (
             CLK_IR => CLK_PRAD_7_YB,
             CE_IR => CE_PRAD_7_YB,
             RST_IR => RST_PRAD_7_YB
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntpradr_clk[7],
             IR_CE =>  ntpradr_ce[7], 
             IR_RST => ntpradr_srst[7]
        );
 
    device PREADD_9 preadd_ya_h_9              
        port map                               
        (                                      
             D0[7:0]  =>  ntya[16:9], 
             D1[7:0]  =>  ntza[16:9],                 
             D2 => ntya_signed,
             D3 => ntza_signed,
             D4 => ntprad_op[0],
             DOUT[8:0]   => ntpreadd_ya_h_9[8:0]             
        );     
    
    device PREADD_9 preadd_ya_l_9             
        port map                               
        (    
             D0[7:0]  =>  ntya[7:0], 
             D1[7:0]  =>  ntza[7:0],                 
             D2 => ntya_signed,
             D3 => ntza_signed,
             D4 => ntprad_op[0],                              
             DOUT[8:0]   => ntpreadd_ya_l_9[8:0]             
        );    
    
    device PREADD_9 preadd_yb_h_9              
        port map                               
        (                                      
             D0[7:0]  =>  ntyb[16:9], 
             D1[7:0]  =>  ntzb[16:9],                 
             D2 => ntyb_signed,
             D3 => ntzb_signed,                           
             D4 => ntprad_op[1],             
             DOUT[8:0]   => ntpreadd_yb_h_9[8:0]             
        );    
    
    device PREADD_9 preadd_yb_l_9              
        port map                               
        (                                      
             D0[7:0]  =>  ntyb[7:0], 
             D1[7:0]  =>  ntzb[7:0],
             D2 => ntyb_signed,
             D3 => ntzb_signed,
             D4 => ntprad_op[1],             
             DOUT[8:0]   => ntpreadd_yb_l_9[8:0]             
        );    
    
    device PREADD_19 preadd_ya_l9              
        port map                               
        (                                      
             D0[17:0]  =>  ntya[17:0], 
             D1[17:0]  =>  ntza[17:0],
             D2 => ntya_signed,
             D3 => ntza_signed,                
             D4 => ntprad_op[0],             
             DOUT[18:0]   => ntpreadd_ya_19[18:0]             
        );    
    
    device PREADD_19 preadd_yb_l9              
        port map                               
        (                                      
             D0[17:0]  =>  ntyb[17:0], 
             D1[17:0]  =>  ntzb[17:0],
             D2 => ntyb_signed,
             D3 => ntzb_signed,                
             D4 => ntprad_op[1],             
             DOUT[18:0]   => ntpreadd_yb_19[18:0]             
        );    
    
    device PREADD_27 preadd_Y_27              
        port map                               
        (                                      
             D0[17:0]  =>  ntya[17:0],
             D1[17:0]  =>  ntza[17:0],
             D2[7:0]  =>  ntyb[7:0],
             D3[7:0]  =>  ntzb[7:0],
             D4  =>  ntyb_signed,
             D5  =>  ntzb_signed,                                
             D6[1:0] => ntprad_op[1:0],             
             DOUT[26:0]   => ntpreadd_Y_27[26:0]             
        );     
     
    device PRAD_OUT_MUX prad_out_MUX              
        parameter map
        (      
            OP_PRAD_A => OP_PRAD_A,
            OP_MULT_A => OP_MULT_A,
            OP_MULT_B => OP_MULT_B
        )
        port map                               
        (                                      
             PREADD_YA_19[18:0]  =>  ntpreadd_ya_19[18:0],
             PREADD_YB_19[18:0]  =>  ntpreadd_yb_19[18:0],               
             PREADD_YA_H_9[8:0]  =>  ntpreadd_ya_h_9[8:0],
             PREADD_YA_L_9[8:0]  =>  ntpreadd_ya_l_9[8:0],
             PREADD_YB_H_9[8:0]  =>  ntpreadd_yb_h_9[8:0],
             PREADD_YB_L_9[8:0]  =>  ntpreadd_yb_l_9[8:0],
             PREADD_Y_27[26:0]  =>  ntpreadd_Y_27[26:0],               
             PRAD_OUT0[18:0]   => ntprad_out0[18:0],
             PRAD_OUT1[18:0]   => ntprad_out1[18:0]             
        );     
    
    device PR_REG_9 REG_AA00 
        parameter map
        (
             SYNC_RST => SYNC_PRAD_0_XA
        )                           
        port map                                    
        (                                           
             D[8:0]  => ntAA00IN[8:0],                    
             CLK => ntpradr_clk[0],                       
             CE => ntpradr_ce[0],                      
             RST => ntpradr_srst[0],                     
             Q[8:0] => ntAA00OUT[8:0]                        
         );                                          
                                                     
    device REG_MUX_9 AA00_SEL_MUX
        parameter map
        (
             IN_SEL => 1'b0
        )              
        port map                            
        (                                   
             D0[8:0]  => ntxa[8:0],            
             D1[8:0]  => 9'b0,                                    
             DOUT[8:0]   => ntAA00IN[8:0]             
        );                                  
                                                     
    device REG_MUX_9 AA00_BYP_MUX 
        parameter map
        (
             IN_SEL => PRADOR_BYP_0_XA
        )                  
        port map                               
        (                                      
             D0[8:0]  => ntAA00OUT[8:0],                
             D1[8:0]  => ntAA00IN[8:0],             
             DOUT[8:0]   => ntpreadd_xa[8:0]             
        );    
    
    device PR_REG_9 REG_AA01
        parameter map
        (
             SYNC_RST => SYNC_PRAD_1_XA
        )                            
        port map                                    
        (                                           
             D[8:0]  => ntAA01IN[8:0],                    
             CLK => ntpradr_clk[1],                       
             CE => ntpradr_ce[1],                      
             RST => ntpradr_srst[1],                     
             Q[8:0] => ntAA01OUT[8:0]                        
         );                                          
                                                     
    device REG_MUX_9 AA01_SEL_MUX 
        parameter map
        (
             IN_SEL => 1'b0
        )               
        port map                            
        (                                   
             D0[8:0]  => ntxa[17:9],            
             D1[8:0]  => 9'b0,                   
             DOUT[8:0]   => ntAA01IN[8:0]             
        );                                  
                                                     
    device REG_MUX_9 AA01_BYP_MUX 
        parameter map
        (
             IN_SEL => PRADOR_BYP_1_XA
        )                 
        port map                               
        (                                      
             D0[8:0]  => ntAA01OUT[8:0],                
             D1[8:0]  => ntAA01IN[8:0],                             
             DOUT[8:0]   => ntpreadd_xa[17:9]             
        );    
    
    device PR_REG_1 REG_AA01_SIGN 
        parameter map
        (
             SYNC_RST => SYNC_PRAD_1_XA
        )                           
        port map                                    
        (                                           
             D  => ntAA01SIGNIN,                    
             CLK => ntpradr_clk[1],                       
             CE => ntpradr_ce[1],                                             
             RST => ntpradr_srst[1],                     
             Q => ntAA01SIGNOUT                        
         );                                          
                                                     
    device REG_MUX_1 AA01_SIGN_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b0
        )
        port map                            
        (                                   
             D0  => ntxa_signed,            
             D1  => 1'b0,                                    
             DOUT   => ntAA01SIGNIN             
        );                                  
                                                     
    device REG_MUX_1 AA01_SIGN_BYP_MUX              
        parameter map
        (
             IN_SEL => PRADOR_BYP_1_XA
        )
        port map                               
        (                                      
             D0  => ntAA01SIGNOUT,                
             D1  => ntAA01SIGNIN,                             
             DOUT   => ntsign_in[0]
        );     
    
    device PR_REG_9 REG_AB00                        
        parameter map
        (
             SYNC_RST => SYNC_PRAD_2_YA
        )
        port map                                    
        (                                           
             D[8:0]  => ntAB00IN[8:0],                    
             CLK => ntpradr_clk[2],                       
             CE => ntpradr_ce[2],                                              
             RST => ntpradr_srst[2],                     
             Q[8:0] => ntAB00OUT[8:0]                        
         );                                          
                                                     
    device REG_MUX_9_INT AB00_SEL_MUX           
        parameter map
        (
             OP_PRAD_A => OP_PRAD_A
        )
        port map                            
        (                                   
             D0[8:0]  => ntya[8:0],            
             D1[8:0]  => ntprad_out0[8:0],                   
             DOUT[8:0]   => ntAB00IN[8:0]             
        );                                 
                                                     
    device REG_MUX_9 AB00_BYP_MUX              
        parameter map
        (
             IN_SEL => PRADOR_BYP_2_YA
        )
        port map                               
        (                                      
             D0[8:0]  => ntAB00OUT[8:0],                
             D1[8:0]  => ntAB00IN[8:0],                              
             DOUT[8:0]   => ntpreadd_ya[8:0]             
        );    
    
    device PR_REG_10 REG_AB01                        
        parameter map
        (
             SYNC_RST => SYNC_PRAD_3_YA
        )
        port map                                    
        (                                           
             D[9:0]  => ntAB01IN[9:0],                    
             CLK => ntpradr_clk[3],                       
             CE => ntpradr_ce[3],                                              
             RST => ntpradr_srst[3],                     
             Q[9:0] => ntAB01OUT[9:0]                        
         );                                          
                                              
    device REG_MUX_10_INT AB01_SEL_MUX           
        parameter map
        (
             OP_PRAD_A => OP_PRAD_A
        )
        port map                            
        (                                   
             D0[9:0]  => {{1'b0},ntya[17:9]},            
             D1[9:0]  => ntprad_out0[18:9],                  
             DOUT[9:0]   => ntAB01IN[9:0]             
        );                                  
                                                     
    device REG_MUX_10 AB01_BYP_MUX              
        parameter map
        (
             IN_SEL => PRADOR_BYP_3_YA
        )
        port map                               
        (                                      
             D0[9:0]  => ntAB01OUT[9:0],                
             D1[9:0]  => ntAB01IN[9:0],                             
             DOUT[9:0]   => ntpreadd_ya[18:9]             
        );
   
    device PR_REG_1 REG_AB01_SIGN                        
        parameter map
        (
             SYNC_RST => SYNC_PRAD_3_YA
        )
        port map                                    
        (                                           
             D  => ntAB01SIGNIN,                    
             CLK => ntpradr_clk[3],                       
             CE => ntpradr_ce[3],                                              
             RST => ntpradr_srst[3],                     
             Q => ntAB01SIGNOUT                        
         );                                          
                                                     
    device REG_MUX_1_INT AB01_SIGN_SEL_MUX           
        parameter map
        (
             OP_PRAD_A => OP_PRAD_A
        )
        port map                            
        (                                   
             D0  => ntya_signed,            
             D1  => ntza_signed,                
             DOUT   => ntAB01SIGNIN             
        );                                  
                                                     
    device REG_MUX_1 AB01_SIGN_BYP_MUX              
        parameter map
        (
             IN_SEL => PRADOR_BYP_3_YA
        )
        port map                               
        (                                      
             D0  => ntAB01SIGNOUT,                
             D1  => ntAB01SIGNIN,            
             DOUT   => ntsign_in[2]
        );   
   
    device PR_REG_1 REG_AB01_CSIGN                        
        parameter map
        (
             SYNC_RST => SYNC_PRAD_3_YA
        )
        port map                                    
        (                                           
             D  => ntAB01CSIGNIN,                    
             CLK => ntpradr_clk[3],                       
             CE => ntpradr_ce[3],                     
             RST => ntpradr_srst[3],                     
             Q => ntAB01CSIGNOUT                        
         );                                          
                                                     
    device REG_MUX_1 AB01_CSIGN_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b0
        )
        port map                            
        (                                   
             D0  => ntza_signed,            
             D1  => 1'b0,                   
             DOUT   => ntAB01CSIGNIN             
        );                                  
                                                     
    device REG_MUX_1 AB01_CSIGN_BYP_MUX              
        parameter map
        (
             IN_SEL => PRADOR_BYP_3_YA
        )
        port map                               
        (                                      
             D0  => ntAB01CSIGNOUT,                
             D1  => ntAB01CSIGNIN,              
             DOUT   => ntsign_in[4]
        ); 
        
    device PR_REG_9 REG_AA10                        
        parameter map
        (
             SYNC_RST => SYNC_PRAD_4_XB
        )
        port map                                    
        (                                           
             D[8:0]  => ntAA10IN[8:0],                    
             CLK => ntpradr_clk[4],                       
             CE => ntpradr_ce[4],                                              
             RST => ntpradr_srst[4],                     
             Q[8:0] => ntAA10OUT[8:0]                        
         );                                          
                                                     
    device REG_MUX_9 AA10_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b0
        )
        port map                            
        (                                   
             D0[8:0]  => ntxb[8:0],            
             D1[8:0]  => 9'b0,                 
             DOUT[8:0]   => ntAA10IN[8:0]             
        );                                  
                                                     
    device REG_MUX_9 AA10_BYP_MUX              
        parameter map
        (
             IN_SEL => PRADOR_BYP_4_XB
        )
        port map                               
        (                                      
             D0[8:0]  => ntAA10OUT[8:0],                
             D1[8:0]  => ntAA10IN[8:0],             
             DOUT[8:0]   => ntpreadd_xb[8:0]             
        );         
        
    device PR_REG_9 REG_AA11                        
        parameter map
        (
             SYNC_RST => SYNC_PRAD_5_XB
        )
        port map                                    
        (                                           
             D[8:0]  => ntAA11IN[8:0],                    
             CLK => ntpradr_clk[5],                       
             CE => ntpradr_ce[5],                     
             RST => ntpradr_srst[5],                     
             Q[8:0] => ntAA11OUT[8:0]                        
         );                                          
                                                     
    device REG_MUX_9 AA11_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b0
        )
        port map                            
        (                                   
             D0[8:0]  => ntxb[17:9],            
             D1[8:0]  => 9'b0,                  
             DOUT[8:0]   => ntAA11IN[8:0]             
        );                                  
                                                     
    device REG_MUX_9 AA11_BYP_MUX              
        parameter map
        (
             IN_SEL => PRADOR_BYP_5_XB
        )
        port map                               
        (                                      
             D0[8:0]  => ntAA11OUT[8:0],                
             D1[8:0]  => ntAA11IN[8:0],            
             DOUT[8:0]   => ntpreadd_xb[17:9]             
        );        
        
        device PR_REG_1 REG_AA11_SIGN                        
        parameter map
        (
             SYNC_RST => SYNC_PRAD_5_XB
        )
        port map                                    
        (                                           
             D  => ntAA11SIGNIN,                    
             CLK => ntpradr_clk[5],                       
             CE => ntpradr_ce[5],                     
             RST => ntpradr_srst[5],                     
             Q => ntAA11SIGNOUT                        
         );                                          
                                                     
    device REG_MUX_1 AA11_SIGN_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b0
        )
        port map  
        (  
             D0  => ntxb_signed,  
             D1  => 1'b0,     
             DOUT   => ntAA11SIGNIN     
        );                                  
                                                     
    device REG_MUX_1 AA11_SIGN_BYP_MUX              
        parameter map
        (
             IN_SEL => PRADOR_BYP_5_XB
        )
        port map 
        (
             D0  => ntAA11SIGNOUT,  
             D1  => ntAA11SIGNIN,  
             DOUT   => ntsign_in[1]
        );    
        
    device PR_REG_9 REG_AB10                        
        parameter map
        (
             SYNC_RST => SYNC_PRAD_6_YB
        )
        port map                                    
        (                                           
             D[8:0]  => ntAB10IN[8:0],                    
             CLK => ntpradr_clk[6],                       
             CE => ntpradr_ce[6],                      
             RST => ntpradr_srst[6],                     
             Q[8:0] => ntAB10OUT[8:0]                        
         );                                          
                                                     
    device REG_MUX_9_INT AB10_SEL_MUX           
        parameter map
        (
             OP_PRAD_A => OP_PRAD_B
        )
        port map                            
        (                                   
             D0[8:0]  => ntyb[8:0],            
             D1[8:0]  => ntprad_out1[8:0],                  
             DOUT[8:0]   => ntAB10IN[8:0]             
        );                                  
                                                     
    device REG_MUX_9 AB10_BYP_MUX              
        parameter map
        (
             IN_SEL => PRADOR_BYP_6_YB
        )
        port map                               
        (                                      
             D0[8:0]  => ntAB10OUT[8:0],                
             D1[8:0]  => ntAB10IN[8:0],              
             DOUT[8:0]   => ntpreadd_yb[8:0]             
        );    
    
    device PR_REG_10 REG_AB11                        
        parameter map
        (
             SYNC_RST => SYNC_PRAD_7_YB
        )
        port map                                    
        (                                           
             D[9:0]  => ntAB11IN[9:0],                    
             CLK => ntpradr_clk[7],                       
             CE => ntpradr_ce[7],                     
             RST => ntpradr_srst[7],                     
             Q[9:0] => ntAB11OUT[9:0]                        
        );                                          
                                                     
    device REG_MUX_10_INT AB11_SEL_MUX           
        parameter map
        (
             OP_PRAD_A => OP_PRAD_B
        )
        port map                            
        (                                   
             D0[9:0]  => {{1'b0},ntyb[17:9]},            
             D1[9:0]  => ntprad_out1[18:9],                 
             DOUT[9:0]   => ntAB11IN[9:0]             
        );                                  
                                                     
    device REG_MUX_10 AB11_BYP_MUX              
        parameter map
        (
             IN_SEL => PRADOR_BYP_7_YB
        )
        port map                               
        (                                      
             D0[9:0]  => ntAB11OUT[9:0],                
             D1[9:0]  => ntAB11IN[9:0],              
             DOUT[9:0]   => ntpreadd_yb[18:9]             
        );
   
    device PR_REG_1 REG_AB11_SIGN                        
        parameter map
        (
             SYNC_RST => SYNC_PRAD_7_YB
        )
        port map   
        (   
             D  => ntAB11SIGNIN,                    
             CLK => ntpradr_clk[7],  
             CE => ntpradr_ce[7],
             RST => ntpradr_srst[7],   
             Q => ntAB11SIGNOUT  
         );                                          
                                                     
    device REG_MUX_1_INT AB11_SIGN_SEL_MUX           
        parameter map
        (
             OP_PRAD_A => OP_PRAD_A
        )
        port map
        (   
             D0  => ntyb_signed,
             D1  => ntzb_signed,
             DOUT   => ntAB11SIGNIN 
        );                                  
                                                     
    device REG_MUX_1 AB11_SIGN_BYP_MUX              
        parameter map
        (
             IN_SEL => PRADOR_BYP_7_YB
        )
        port map                               
        (                                      
             D0  => ntAB11SIGNOUT,                
             D1  => ntAB11SIGNIN,             
             DOUT   => ntsign_in[3]
        );   
   
    device PR_REG_1 REG_AB11_CSIGN                        
        parameter map
        (
             SYNC_RST => SYNC_PRAD_7_YB
        )
        port map                                    
        (                                           
             D  => ntAB11CSIGNIN,                    
             CLK => ntpradr_clk[7],                       
             CE => ntpradr_ce[7],                    
             RST => ntpradr_srst[7],                     
             Q => ntAB11CSIGNOUT                        
         );                                          
                                                     
    device REG_MUX_1 AB11_CSIGN_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b0
        )
        port map                            
        (                                   
             D0  => ntzb_signed,            
             D1  => 1'b0,                 
             DOUT   => ntAB11CSIGNIN             
        );                                  
                                                     
    device REG_MUX_1 AB11_CSIGN_BYP_MUX              
        parameter map
        (
             IN_SEL => PRADOR_BYP_7_YB
        )
        port map                               
        (                                      
             D0  => ntAB11CSIGNOUT,                
             D1  => ntAB11CSIGNIN,              
             DOUT   => ntsign_in[5]
        );        
        
    //mult_unit

    device REG_CTRL PR_CTRL_0
        parameter map
        (
             CLK_IR => CLK_PR_0_MA,
             CE_IR => CE_PR_0_MA,
             RST_IR => RST_PR_0_MA
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntpr_clk[0],
             IR_CE =>  ntpr_ce[0], 
             IR_RST => ntpr_srst[0]
        );

    device REG_CTRL PR_CTRL_1
        parameter map
        (
             CLK_IR => CLK_PR_1_MA,
             CE_IR => CE_PR_1_MA,
             RST_IR => RST_PR_1_MA
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntpr_clk[1],
             IR_CE =>  ntpr_ce[1], 
             IR_RST => ntpr_srst[1]
        );

    device REG_CTRL PR_CTRL_2
        parameter map
        (
             CLK_IR => CLK_PR_2_MB,
             CE_IR => CE_PR_2_MB,
             RST_IR => RST_PR_2_MB
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntpr_clk[2],
             IR_CE =>  ntpr_ce[2], 
             IR_RST => ntpr_srst[2]
        );

    device REG_CTRL PR_CTRL_3
        parameter map
        (
             CLK_IR => CLK_PR_3_MB,
             CE_IR => CE_PR_3_MB,
             RST_IR => RST_PR_3_MB
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntpr_clk[3],
             IR_CE =>  ntpr_ce[3], 
             IR_RST => ntpr_srst[3]
        );

    device REG_CTRL PR_CTRL_4
        parameter map
        (
             CLK_IR => CLK_PR_4_XA,
             CE_IR => CE_PR_4_XA,
             RST_IR => RST_PR_4_XA
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntpr_clk[4],
             IR_CE =>  ntpr_ce[4], 
             IR_RST => ntpr_srst[4]
        );

    device REG_CTRL PR_CTRL_5
        parameter map
        (
             CLK_IR => CLK_PR_5_XB,
             CE_IR => CE_PR_5_XB,
             RST_IR => RST_PR_5_XB
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntpr_clk[5],
             IR_CE =>  ntpr_ce[5], 
             IR_RST => ntpr_srst[5]
        );

    device REG_CTRL PR_CTRL_6
        parameter map
        (
             CLK_IR => CLK_PR_6_YA,
             CE_IR => CE_PR_6_YA,
             RST_IR => RST_PR_6_YA
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntpr_clk[6],
             IR_CE =>  ntpr_ce[6], 
             IR_RST => ntpr_srst[6]
        );

    device REG_CTRL PR_CTRL_7
        parameter map
        (
             CLK_IR => CLK_PR_7_YB,
             CE_IR => CE_PR_7_YB,
             RST_IR => RST_PR_7_YB
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntpr_clk[7],
             IR_CE =>  ntpr_ce[7], 
             IR_RST => ntpr_srst[7]
        );

    device REG_CTRL PR_CTRL_8
        parameter map
        (
             CLK_IR => CLK_PR_8_ZA,
             CE_IR => CE_PR_8_ZA,
             RST_IR => RST_PR_8_ZA
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntpr_clk[8],
             IR_CE =>  ntpr_ce[8], 
             IR_RST => ntpr_srst[8]
        );

    device REG_CTRL PR_CTRL_9
        parameter map
        (
             CLK_IR => CLK_PR_9_ZB,
             CE_IR => CE_PR_9_ZB,
             RST_IR => RST_PR_9_ZB
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntpr_clk[9],
             IR_CE =>  ntpr_ce[9], 
             IR_RST => ntpr_srst[9]
        );

    device REG_CTRL CTPR_CTRL_0
       parameter map
        (
             CLK_IR => {CLK_CTPR[1],CLK_CTPR[0]},
             CE_IR => {CE_CTPR[1],CE_CTPR[0]},
             RST_IR => {RST_CTPR[1],RST_CTPR[0]}
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntpr_ctclk[0],
             IR_CE =>  ntpr_ctce[0], 
             IR_RST => ntpr_ctsrst[0]
        );

    device REG_CTRL CTPR_CTRL_1
        parameter map
        (
             CLK_IR => {CLK_CTPR[3],CLK_CTPR[2]},
             CE_IR => {CE_CTPR[3],CE_CTPR[2]},
             RST_IR => {RST_CTPR[3],RST_CTPR[2]}
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],      
             IR_CLK => ntpr_ctclk[1],
             IR_CE =>  ntpr_ctce[1], 
             IR_RST => ntpr_ctsrst[1]
        );
           
    device MULT_A_P MULT_A_P
        parameter map
        (
            // M9_MODE => (OP_MULT_A == 9) ? 1'b1  :  1'b0,
            // M19_MODE => (OP_MULT_A == 19) ? 1'b1 : 1'b0,
            // M27_MODE => (OP_MULT_A == 27) ? 1'b1 : 1'b0
            OP_MULT_A => OP_MULT_A
        )                 
        port map                               
        (                                      
             PREADD_XA[17:0]  => ntpreadd_xa[17:0],                
             PREADD_YA[18:0]  => ntpreadd_ya[18:0],
             PREADD_XB[8:0]  => ntpreadd_xb[8:0],
             PREADD_YB[8:0]  => ntpreadd_yb[8:0],                 
             xa_signed  => ntsign_in[0],
             ya_signed  => ntsign_in[2],
            // za_signed  => ntsign_in[4],
             xb_signed  => ntsign_in[1],             
             MULT_A_P[45:0]   => ntmult_a_p[45:0]
        );        
        
    device MULT_B_P MULT_B_P
        parameter map
        (
           // M9_MODE => (OP_MULT_B == 9) ? 1'b1  :  1'b0,
            // //M19_MODE => (OP_MULT_B == 19) ? 1'b1 : 1'b0,
            // M27_MODE => (OP_MULT_A == 27) ? 1'b1 : 1'b0
            OP_MULT_B  =>  OP_MULT_B,
            OP_MULT_A  =>  OP_MULT_A
        ) 
        port map                               
        (                                      
             PREADD_XB[17:0]  => ntpreadd_xb[17:0],                
             PREADD_YB[18:0]  => ntpreadd_yb[18:0], 
             PREADD_XA[17:0]  => ntpreadd_xa[17:0],                             
             xb_signed  => ntsign_in[1],
             yb_signed  => ntsign_in[3],
            // zb_signed  => ntsign_in[5],
             MULT_B_P[36:0]   => ntmult_b_p[36:0]
        );        
        
    device MU_REG_18 REG_PR0_18                        
        parameter map
        (
             SYNC_RST => SYNC_PR_0_MA
        )
        port map                                    
        (                                           
             D[17:0]  => ntPR0IN[17:0],                    
             CLK => ntpr_clk[0],                       
             CE => ntpr_ce[0],                                            
             RST => ntpr_srst[0],                     
             Q[17:0] => ntPR0OUT[17:0]                        
        );                                          
                                                     
    device REG_MUX_18 PR0_18_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b0
        )
        port map                            
        (                                   
             D0[17:0]  => ntmult_a_p[17:0], 
             D1[17:0] => 18'b0, 
             DOUT[17:0]   => ntPR0IN[17:0]             
        );  
                                                     
    device REG_MUX_18 PR0_18_BYP_MUX              
        parameter map
        (
             IN_SEL => PR_BYP_0_MA
        )
        port map                               
        (                                      
             D0[17:0]  => ntPR0OUT[17:0],                
             D1[17:0]  => ntPR0IN[17:0],                              
             DOUT[17:0]   => ntmult_a[17:0]             
        );        

    device MU_REG_28 REG_PR0_28                        
        parameter map
        (
             SYNC_RST => SYNC_PR_1_MA
        )
        port map                                    
        (                                           
             D[27:0]  => ntPR0IN[45:18],                    
             CLK => ntpr_clk[1],                       
             CE => ntpr_ce[1],
             RST => ntpr_srst[1],                     
             Q[27:0] => ntPR0OUT[45:18]                        
        );                                          
                                                     
    device REG_MUX_28 PR0_28_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b0
        )
        port map 
        (  
             D0[27:0]  => ntmult_a_p[45:18], 
             D1[27:0]  => 28'b0,
             DOUT[27:0]   => ntPR0IN[45:18]             
        );                                  
                                                     
    device REG_MUX_28 PR0_28_BYP_MUX              
        parameter map
        (
             IN_SEL => PR_BYP_1_MA
        )
        port map                               
        (                                      
             D0[27:0]  => ntPR0OUT[45:18],                
             D1[27:0]  => ntPR0IN[45:18],                             
             DOUT[27:0]   => ntmult_a[45:18]             
        );
        
    device MU_REG_18 REG_PR1_18                        
        parameter map
        (
             SYNC_RST => SYNC_PR_2_MB
        )
        port map                                    
        (                                           
             D[17:0]  => ntPR1IN[17:0],                    
             CLK => ntpr_clk[2],                       
             CE => ntpr_ce[2], 
             RST => ntpr_srst[2],      
             Q[17:0] => ntPR1OUT[17:0]                        
        );                                          
                                                     
    device REG_MUX_18 PR1_18_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b0
        )
        port map                            
        (                                   
             D0[17:0]  => ntmult_b_p[17:0],            
             D1[17:0]  => 18'b0,                                   
             DOUT[17:0]   => ntPR1IN[17:0]             
        );                                  
                                                     
    device REG_MUX_18 PR1_18_BYP_MUX              
        parameter map
        (
             IN_SEL => PR_BYP_2_MB
        )
        port map
        (
             D0[17:0]  => ntPR1OUT[17:0],                
             D1[17:0]  => ntPR1IN[17:0],            
             DOUT[17:0]   => ntmult_b[17:0]             
        );        
 
     device MU_REG_19 REG_PR1_19
        parameter map
        (
             SYNC_RST => SYNC_PR_3_MB
        )
        port map
        (
             D[18:0]  => ntPR1IN[36:18],
             CLK => ntpr_clk[3],
             CE => ntpr_ce[3],
             RST => ntpr_srst[3],
             Q[18:0] => ntPR1OUT[36:18]
        );
                                                     
    device REG_MUX_19 PR1_19_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b0
        )
        port map                            
        (                                   
             D0[18:0]  => ntmult_b_p[36:18],            
             D1[18:0]  => 19'b0,
             DOUT[18:0]   => ntPR1IN[36:18]             
        );                                  
                                                     
    device REG_MUX_19 PR1_19_BYP_MUX              
        parameter map
        (
             IN_SEL => PR_BYP_3_MB
        )
        port map                               
        (                                      
             D0[18:0]  => ntPR1OUT[36:18],                
             D1[18:0]  => ntPR1IN[36:18],            
             DOUT[18:0]   => ntmult_b[36:18]             
        ); 
        
    device MU_REG_7 REG_PR_OP0                        
        parameter map
        (
             SYNC_RST => SYNC_CTPR[0]
        )
        port map                                    
        (                                           
             D[6:0]  => ntPROP0IN[6:0],                    
             CLK => ntpr_ctclk[0],
             CE => ntpr_ctce[0],                     
             RST => ntpr_ctsrst[0],                     
             Q[6:0] => ntPROP0OUT[6:0]                        
        );                                          
                                                     
    device REG_MUX_7 OP0_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b1
        )
        port map
        (
             D0[6:0]  => 7'b0,
             D1[6:0]  => ntpost_op_ir[6:0],   
             DOUT[6:0]   => ntPROP0IN[6:0]
        );                                  
                                                     
    device REG_MUX_7 OP0_BYP_MUX              
        parameter map
        (
             IN_SEL => CTRL_PRBYP_0_OP0
        )
        port map                               
        (                                      
             D0[6:0]  => ntPROP0OUT[6:0],                
             D1[6:0]  => ntPROP0IN[6:0],              
             DOUT[6:0]   => ntpost_op[6:0]             
        );                                                      

    device MU_REG_1 REG_PR_OP1_0                        
        parameter map
        (
             SYNC_RST => SYNC_CTPR[1]
        )
        port map                                    
        (                                           
             D  => ntPROP1IN[0],                    
             CLK => ntpr_ctclk[1],                       
             CE => ntpr_ctce[1],                    
             RST => ntpr_ctsrst[1],                     
             Q => ntPROP1OUT[0]                        
        );                                          
                                                     
    device REG_MUX_1 PR_OP1_0_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b1
        )
        port map                            
        (                                   
             D0  => 1'b0,            
             D1  => ntpost_op_ir[7],                
             DOUT   => ntPROP1IN[0]             
        );                                  
                                                     
    device REG_MUX_1 PR_OP1_0_BYP_MUX              
        parameter map
        (
             IN_SEL => CTRL_PRBYP_1_OP7
        )
        port map                               
        (                                      
             D0  => ntPROP1OUT[0],                
             D1  => ntPROP1IN[0],                             
             DOUT   => ntpost_op[7]             
        );

    device MU_REG_1 REG_PR_OP1_1                        
        parameter map
        (
             SYNC_RST => SYNC_CTPR[1]
        )
        port map                                    
        (                                           
             D  => ntPROP1IN[1],                    
             CLK => ntpr_ctclk[1],                       
             CE => ntpr_ctce[1],                       
             RST => ntpr_ctsrst[1],                     
             Q => ntPROP1OUT[1]                        
        );                                          
                                                     
    device REG_MUX_1 PR_OP1_1_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b1
        )
        port map                            
        (                                   
             D0  => 1'b0,            
             D1  => ntpost_op_ir[8],                                 
             DOUT   => ntPROP1IN[1]             
        );                                  
                                                     
    device REG_MUX_1 PR_OP1_1_BYP_MUX              
        parameter map
        (
             IN_SEL => CTRL_PRBYP_2_OP8
        )
        port map                               
        (                                      
             D0  => ntPROP1OUT[1],                
             D1  => ntPROP1IN[1],                        
             DOUT   => ntpost_op[8]             
        );

    device MU_REG_1 REG_PR_OP1_2                        
        parameter map
        (
             SYNC_RST => SYNC_CTPR[1]
        )
        port map                                    
        (                                           
             D  => ntPROP1IN[2],                    
             CLK => ntpr_ctclk[1],                       
             CE => ntpr_ctce[1],                         
             RST => ntpr_ctsrst[1],                     
             Q => ntPROP1OUT[2]                        
        );                                          
                                                     
    device REG_MUX_1 PR_OP1_2_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b1
        )
        port map                            
        (                                   
             D0  => 1'b0,            
             D1  => ntpost_op_ir[9],                    
             DOUT   => ntPROP1IN[2]             
        );                                  
                                                     
    device REG_MUX_1 PR_OP1_2_BYP_MUX              
        parameter map
        (
             IN_SEL => CTRL_PRBYP_2_OP8
        )
        port map                               
        (                                      
             D0  => ntPROP1OUT[2],                
             D1  => ntPROP1IN[2],            
             DOUT   => ntpost_op[9]             
        );

    device MU_REG_1 REG_PR_OP1_3                        
        parameter map
        (
             SYNC_RST => SYNC_CTPR[1]
        )
        port map                                    
        (                                           
             D  => ntPROP1IN[3],                    
             CLK => ntpr_ctclk[1],                       
             CE => ntpr_ctce[1],                                              
             RST => ntpr_ctsrst[1],                     
             Q => ntPROP1OUT[3]                        
        );                                          
                                                     
    device REG_MUX_1 PR_OP1_3_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b1
        )
        port map                            
        (                                   
             D0  => 1'b0,            
             D1  => ntpost_op_ir[10],                                    
             DOUT   => ntPROP1IN[3]             
        );                                  
                                                     
    device REG_MUX_1 PR_OP1_3_BYP_MUX              
        parameter map
        (
             IN_SEL => CTRL_PRBYP_2_OP8
        )
       port map
        (
             D0  => ntPROP1OUT[3],
             D1  => ntPROP1IN[3],
             DOUT   => ntpost_op[10]
        );
        
    device MU_REG_1 REG_SIGN_0                        
        parameter map
        (
             SYNC_RST => SYNC_PR_4_XA
        )
        port map                                    
        (                                           
             D  => ntSIGNIN[0],                    
             CLK => ntpr_clk[4],                       
             CE => ntpr_ce[4],                                    
             RST => ntpr_srst[4],                     
             Q => ntSIGNOUT[0]                        
        );                                          
                                                     
    device REG_MUX_1 SIGN_0_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b0
        )
        port map                            
        (                                   
             D0  => ntsign_in[0],            
             D1  => 1'b0,                               
             DOUT   => ntSIGNIN[0]             
        );                                  
                                                     
    device REG_MUX_1 SIGN_0_BYP_MUX              
        parameter map
        (
             IN_SEL => PR_BYP_4_XA
        )
        port map                               
        (                                      
             D0  => ntSIGNOUT[0],                
             D1  => ntSIGNIN[0],           
             DOUT   => ntsign_out[0]             
        );        

    device MU_REG_1 REG_SIGN_1                        
        parameter map
        (
             SYNC_RST => SYNC_PR_5_XB
        )
        port map                                    
        (                                           
             D  => ntSIGNIN[1],                    
             CLK => ntpr_clk[5],                       
             CE => ntpr_ce[5],                                            
             RST => ntpr_srst[5],                     
             Q => ntSIGNOUT[1]                        
        );                                          
                                                     
    device REG_MUX_1 SIGN_1_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b0
        )
        port map                            
        (                                   
             D0  => ntsign_in[1],            
             D1  => 1'b0,                               
             DOUT   => ntSIGNIN[1]             
        );                                  
                                                     
    device REG_MUX_1 SIGN_1_BYP_MUX              
        parameter map
        (
             IN_SEL => PR_BYP_5_XB
        )
        port map                               
        (                                      
             D0  => ntSIGNOUT[1],                
             D1  => ntSIGNIN[1],                              
             DOUT   => ntsign_out[1]             
        );
        
    device MU_REG_1 REG_SIGN_2                        
        parameter map
        (
             SYNC_RST => SYNC_PR_6_YA
        )
        port map                                    
        (                                           
             D  => ntSIGNIN[2],                    
             CLK => ntpr_clk[6],                       
             CE => ntpr_ce[6],                               
             RST => ntpr_srst[6],                     
             Q => ntSIGNOUT[2]                        
        );                                          
                                                     
    device REG_MUX_1 SIGN_2_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b0
        )
        port map                            
        (                                   
             D0  => ntsign_in[2],            
             D1  => 1'b0,                                     
             DOUT   => ntSIGNIN[2]             
        );                                  
                                                     
    device REG_MUX_1 SIGN_2_BYP_MUX              
        parameter map
        (
             IN_SEL => PR_BYP_6_YA
        )
        port map                               
        (                                      
             D0  => ntSIGNOUT[2],                
             D1  => ntSIGNIN[2],               
             DOUT   => ntsign_out[2]             
        );        

    device MU_REG_1 REG_SIGN_3                        
        parameter map
        (
             SYNC_RST => SYNC_PR_7_YB
        )
        port map                                    
        (                                           
             D  => ntSIGNIN[3],                    
             CLK => ntpr_clk[7],                       
             CE => ntpr_ce[7],                                              
             RST => ntpr_srst[7],                     
             Q => ntSIGNOUT[3]                        
        );                                          
                                                     
    device REG_MUX_1 SIGN_3_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b0
        )
        port map                            
        (                                   
             D0  => ntsign_in[3],            
             D1  => 1'b0,
             DOUT   => ntSIGNIN[3]             
        );                                  
                                                     
    device REG_MUX_1 SIGN_3_BYP_MUX              
        parameter map
        (
             IN_SEL => PR_BYP_7_YB
        )
        port map                               
        (                                      
             D0  => ntSIGNOUT[3],                
             D1  => ntSIGNIN[3],                              
             DOUT   => ntsign_out[3]             
        );

    device MU_REG_1 REG_SIGN_4                        
        parameter map
        (
             SYNC_RST => SYNC_PR_8_ZA
        )
        port map                                    
        (                                           
             D  => ntSIGNIN[4],                    
             CLK => ntpr_clk[8],                       
             CE => ntpr_ce[8],                                            
             RST => ntpr_srst[8],                     
             Q => ntSIGNOUT[4]                        
        );                                          
                                                     
    device REG_MUX_1 SIGN_4_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b0
        )
        port map                            
        (                                   
             D0  => ntsign_in[4],            
             D1  => 1'b0,                 
             DOUT   => ntSIGNIN[4]             
        );                                  
                                                     
    device REG_MUX_1 SIGN_4_BYP_MUX              
        parameter map
        (
             IN_SEL => PR_BYP_8_ZA
        )
        port map                               
        (                                      
             D0  => ntSIGNOUT[4],                
             D1  => ntSIGNIN[4],                       
             DOUT   => ntsign_out[4]             
        );

    device MU_REG_1 REG_SIGN_5                        
        parameter map
        (
             SYNC_RST => SYNC_PR_9_ZB
        ) 
        port map                                    
        (                                           
             D  => ntSIGNIN[5],                    
             CLK => ntpr_clk[9],                       
             CE => ntpr_ce[9],                                            
             RST => ntpr_srst[9],                     
             Q => ntSIGNOUT[5]                        
        );                                          
                                                     
    device REG_MUX_1 SIGN_5_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b0
        )
        port map                            
        (                                   
             D0  => ntsign_in[5],            
             D1  => 1'b0,                                     
             DOUT   => ntSIGNIN[5]             
        );                                  
                                                     
    device REG_MUX_1 SIGN_5_BYP_MUX              
        parameter map
        (
             IN_SEL => PR_BYP_9_ZB
        )
        port map                               
        (                                      
             D0  => ntSIGNOUT[5],                
             D1  => ntSIGNIN[5],                              
             DOUT   => ntsign_out[5]             
        );

   //post_unit

    device POST_MOUT0 MOUT0              
        parameter map
        (
   //          M27_MODE => (OP_MULT_A == 27) ? 1'b1 : 1'b0,
    //         M9_MODE => (OP_MULT_B == 9) ? 1'b1 : 1'b0
             OP_MULT_A => OP_MULT_A,
             OP_MULT_B => OP_MULT_B
             
        )
        port map                               
        (                                      
             MULT_A[45:0]  => ntmult_a[45:0],              
             SIGN_OUT[3:0]  =>  ntsign_out[3:0],                          
             MOUT0[64:0]   => ntmout0[64:0]             
        );

    device POST_MOUT1 MOUT1              
        parameter map
        (
    //         M9_MODE => (OP_MULT_B == 9) ? 1'b1 : 1'b0
             OP_MULT_B  =>  OP_MULT_B
        )
        port map                               
        (                                      
             MULT_B[36:0]  => ntmult_b[36:0],              
             SIGN_OUT[3:0]  =>  ntsign_out[3:0],
             D2  =>  ntmult_a[17],                          
             MOUT1[64:0]   => ntmout1[64:0]             
        );  

    device POST_CPO_SIGN CPO_SIGNED              
        port map                               
        (    
             D0 =>  ntsign_out[1],                                  
             D1  =>  ntsign_out[3],                          
             CPO_SIGNED   => CPO_SIGNED             
        );
        
    device POST_AI  AI              
        parameter map
        (
             SEL_SAB_CR27 => SEL_SAB_CR27
        )
        port map                               
        (                                      
             POST_OP[1:0]  => ntpost_op[1:0],                
            // CPO[64:0]  => CPO[64:0],
             MOUT0[64:0]  => ntmout0[64:0],
             AR[35:0]  => ntzia_post[35:0],
             CR[27:0]  => ntzic_post[27:0],
             xb_signed  =>  ntxb_signed,
             yb_signed  =>  ntyb_signed,      
             AI   => ntai[64:0]             
        );        
        
    device POST_BI  BI             
        parameter map
        (
             SEL_SAB_CR59 => SEL_SAB_CR59
        )
        port map                               
        (                                      
             POST_OP[1:0]  => ntpost_op[3:2],                
             MULT_B[36:0]  => ntmult_b[36:0],
             MOUT1[64:0]  => ntmout1[64:0],
             BR[35:0]  => ntzib_post[35:0],
             CR[27:0]  => ntzic_post[59:32],
             xb_signed  =>  ntxb_signed,
             yb_signed  =>  ntyb_signed, 
             asign_ext2 => ntsign_out[1],
             bsign_ext2 => ntsign_out[3],         
             BI   => ntbi[64:0]             
        );                

    device POST_CR_EXT  CR_EXT              
        parameter map
        (
             CR64_SAB => CR64_SAB,
             SIGN_SELIR => SIGN_SELIR[0]
        )
        port map                               
        (                                      
             CR[63:0]  => ntzic_post[63:0],                
             xa_signed  =>  ntxa_signed,
             ya_signed  =>  ntya_signed,            
             xb_signed  =>  ntxb_signed,
             yb_signed  =>  ntyb_signed,      
             CR_EXT   => ntcr_ext             
        );

    device POST_C_INT64  C_INT64              
        parameter map
        (
             CSIGN_PRE => CSIGN_PRE,
             SIGN_SELIR => SIGN_SELIR[1],
             CSIGN_EXT => CSIGN_EXT
        )
        port map                               
        (                                      
             CPI_SIGNED  => CPI_SIGNED,                
             asign_ext2  =>  ntsign_out[1],
             bsign_ext2  =>  ntsign_out[3],            
             CPI63  =>  CPI[63],
             CPI64  =>  CPI[64],      
             C_INT64   => ntc_int64             
        );
        
    device CI_MUX CI_MUX              
        parameter map
        (
             SEL_SAB_CR27 => SEL_SAB_CR27
        )
        port map                               
        (                                      
             POST_OP[2:0]  => ntpost_op[6:4],                
             CPI[63:0]  =>  CPI[63:0],
             C_INT64  => ntc_int64,
             CR_EXT[64:0]  => ntcr_ext,
             AR[35:0]  => ntzia_post[35:0], 
             CR[27:0]  => ntzic_post[27:0], 
             //CPO[64:0] => CPO[64:0],
             xb_signed => ntxb_signed,
             yb_signed => ntyb_signed,         
             CI[64:0]   => ntci[64:0]             
        );
                        
    device POST_ADDER POST_ADDER   
        parameter map
        (
     //     M9_MODE  => (OP_MULT_A == 9) ? ((OP_MULT_B == 9) ? 2'b11 : 2'b01) : ((OP_MULT_B == 9) ? 2'b10 : 2'b00)
            OP_MULT_B  =>  OP_MULT_B,
            TERNARY  => TERNARY
        )
        port map                               
        (                                      
             POST_OP_CODE[3:0] => ntpost_op[10:7],
             AI[64:0]  => ntai[64:0],
             BI[64:0]  => ntbi[64:0],
             CI[64:0]  => ntci[64:0],             
             DOUT[64:0]  => ntsum[64:0]             
        ); 

    device REG_MUX_65 sum_flag_MUX              
        parameter map
        (
             IN_SEL => ALU_FLAGEN
        )
        port map                               
        (                                      
             D0[64:0]  => 65'b0,                
             D1[64:0]  => ntsum[64:0],         
             DOUT[64:0]   => ntsum_flag[64:0]            
        );

    device REG_MUX_64 pattern_MUX              
        parameter map
        (
             IN_SEL => ALU_MCPATSEL
        )
        port map                               
        (                                      
             D0[63:0]  => ntzic_post,                
             D1[63:0]  => 64'b0,//MCPAT,
             DOUT[63:0]   => ntpattern[63:0]            
        );

    device REG_MUX_64 maskpattern_MUX              
        parameter map
        (
             IN_SEL => ALU_MASKPATSEL
        )
        port map                               
        (                                      
             D0[63:0]  => ntzic_post,                
             D1[63:0]  => 64'b0,//MASKPAT,
             DOUT[63:0]   => ntmaskpattern[63:0]            
        );

    device OUT_SEL out_sel0             
        parameter map
       (
     //        IN_SEL => SEL_SZO ? ((ALU_MODE == "DISABLE") ? 2'b10 : 2'b11) :  ((ALU_MODE == "DISABLE") ? 2'b00 : 2'b01)
               IN_SEL => SEL_SZO,
               ALU_MODE => ALU_MODE                     
        )
        port map                               
        (                                      
             D0[36:0]  => ntmult_a[36:0],                
             D1[36:0]  => {ntflag[0],ntsum[35:0]},
             D2[36:0]  => {ntmult_a[36],{8'b0},CZO_SIGNED,CZO},
             D3[36:0]  => {ntflag[0],{8'b0},CZO_SIGNED,CZO},            
             DOUT[36:0]   => ntout_sel0[36:0]          
        );

    device OUT_SEL out_sel1              
        parameter map
        (
  //           IN_SEL => SEL_SYO ? ((ALU_MODE == "DISABLE") ? 2'b10 : 2'b11) :  ((ALU_MODE == "DISABLE") ? 2'b00 : 2'b01)
               IN_SEL => SEL_SYO,
               ALU_MODE => ALU_MODE 
        )
        port map                               
        (                                      
             D0[36:0]  => ntmult_b,                
             D1[36:0]  => {ntflag[8:1],ntsum[64:36]},
             D2[36:0]  => {ntmult_b[36],{8'b0},CYO_SIGNED,CYO},
             D3[36:0]  => {ntflag[0],{8'b0},CYO_SIGNED,CYO},             
             DOUT[36:0]   => ntout_sel1[36:0]          
        );

    device REG_CTRL OR_CTRL_0 
        parameter map
        (
             CLK_IR => CLK_OR_0_A,
             CE_IR => CE_OR_0_A,
             RST_IR => RST_OR_0_A
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],   
             IR_CLK => ntor_clk[0],
             IR_CE =>  ntor_ce[0], 
             IR_RST => ntor_srst[0]
        );

    device REG_CTRL OR_CTRL_1 
        parameter map
        (
             CLK_IR => CLK_OR_1_A,
             CE_IR => CE_OR_1_A,
             RST_IR => RST_OR_1_A
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],   
             IR_CLK => ntor_clk[1],
             IR_CE =>  ntor_ce[1], 
             IR_RST => ntor_srst[1]
        );

    device REG_CTRL OR_CTRL_2 
        parameter map
        (
             CLK_IR => CLK_OR_2_B,
             CE_IR => CE_OR_2_B,
             RST_IR => RST_OR_2_B
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],   
             IR_CLK => ntor_clk[2],
             IR_CE =>  ntor_ce[2], 
             IR_RST => ntor_srst[2]
        );

    device REG_CTRL OR_CTRL_3 
        parameter map
        (
             CLK_IR => CLK_OR_3_B,
             CE_IR => CE_OR_3_B,
             RST_IR => RST_OR_3_B
        )
        port map 
        (
             CLK[3:0] =>  CLK[3:0],   
             CE[3:0]  =>  CE[3:0],  
             RST[3:0] =>  RST[3:0],   
             IR_CLK => ntor_clk[3],
             IR_CE =>  ntor_ce[3], 
             IR_RST => ntor_srst[3]
        );

    device PO_REG_18 REG_OR0_18                        
        parameter map
        (
             SYNC_RST => SYNC_OR_0_A
        ) 
        port map                                    
        (                                           
             D[17:0]  => ntOR0IN[17:0],                    
             CLK => ntor_clk[0],                       
             CE => ntor_ce[0],
             RST => ntor_srst[0],
             Q[17:0] => ntOR0OUT[17:0]                        
        );                                          
                                                     
    device REG_MUX_18 OR0_18_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b0
        ) 
        port map                            
        (                                   
             D0[17:0]  => ntout_sel0[17:0],
             D1[17:0]  => 18'b0,                                   
             DOUT[17:0]   => ntOR0IN[17:0]             
        );                                  
                                                     
    device REG_MUX_18 OR0_18_BYP_MUX              
        parameter map
        (
             IN_SEL => OR_BYP_0_A
        )
        port map                               
        (                                      
             D0[17:0]  => ntOR0OUT[17:0],                
             D1[17:0]  => ntOR0IN[17:0],                            
             DOUT[17:0]   => DPO[17:0]             
        );

    device PO_REG_19 REG_OR0_19                        
        parameter map
        (
             SYNC_RST => SYNC_OR_1_A
        ) 
        port map                                    
        (                                           
             D[18:0]  => ntOR0IN[36:18],                    
             CLK => ntor_clk[1],                       
             CE => ntor_ce[1],
             RST => ntor_srst[1],                     
             Q[18:0] => ntOR0OUT[36:18]                        
        );                                          
                                                     
    device REG_MUX_19 OR0_19_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b0
        ) 
        port map                            
        (                                   
             D0[18:0]  => ntout_sel0[36:18],
             D1[18:0]  => 19'b0,                                   
             DOUT[18:0]   => ntOR0IN[36:18]             
        );                                  
                                                     
    device REG_MUX_19 OR0_19_BYP_MUX              
        parameter map
        (
             IN_SEL => OR_BYP_1_A
        )
        port map                               
        (                                      
             D0[18:0]  => ntOR0OUT[36:18],                
             D1[18:0]  => ntOR0IN[36:18],
             DOUT[18:0]   => DPO[36:18]             
        );

    device PO_REG_18 REG_OR1_18                        
        parameter map
        (
             SYNC_RST => SYNC_OR_2_B
        ) 
        port map                                    
        (                                           
             D[17:0]  => ntOR1IN[17:0],                    
             CLK => ntor_clk[2],                       
             CE => ntor_ce[2],                                              
             RST => ntor_srst[2],                     
             Q[17:0] => ntOR1OUT[17:0]                        
        );                                          
                                                     
    device REG_MUX_18 OR1_18_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b0
        ) 
        port map                            
        (                                   
             D0[17:0]  => ntout_sel1[17:0],
             D1[17:0]  => 18'b0,                                    
             DOUT[17:0]   => ntOR1IN[17:0]             
        );                                  
                                                     
    device REG_MUX_18 OR1_18_BYP_MUX              
        parameter map
        (
             IN_SEL => OR_BYP_2_B
        )
        port map                               
        (                                      
             D0[17:0]  => ntOR1OUT[17:0],                
             D1[17:0]  => ntOR1IN[17:0],
             DOUT[17:0]   => DPO[54:37]             
        );

    device PO_REG_19 REG_OR1_19                        
        parameter map
        (
             SYNC_RST => SYNC_OR_3_B
        ) 
        port map                                    
        (                                           
             D[18:0]  => ntOR1IN[36:18],                    
             CLK => ntor_clk[3],                       
             CE => ntor_ce[3],                                             
             RST => ntor_srst[3],                     
             Q[18:0] => ntOR1OUT[36:18]                        
        );                                          
                                                     
    device REG_MUX_19 OR1_19_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b0
        ) 
        port map                            
        (                                   
             D0[18:0]  => ntout_sel1[36:18],
             D1  => 19'b0,
             DOUT[18:0]   => ntOR1IN[36:18]             
        );                                  
                                                     
    device REG_MUX_19 OR1_19_BYP_MUX              
        parameter map
        (
             IN_SEL => OR_BYP_3_B
        )
        port map                               
        (                                      
             D0[18:0]  => ntOR1OUT[36:18],                
             D1[18:0]  => ntOR1IN[36:18],        
             DOUT[18:0]   => DPO[73:55]             
        );

    device PO_REG_1 REG_R64                        
        parameter map
        (
             SYNC_RST => SYNC_OR_3_B
        )
        port map                                    
        (                                           
             D  => ntR64IN,                    
             CLK => ntor_clk[3],                       
             CE => ntor_ce[3],                                              
             RST => ntor_srst[3],                     
             Q => ntR64OUT                        
        );                                          
                                                     
    device REG_MUX_1 R64_SEL_MUX           
        parameter map
        (
             IN_SEL => 1'b0
        ) 
        port map                            
        (                                   
             D0  => ntsum[64],
             D1  => 1'b0,                                     
             DOUT   => ntR64IN 
        );                                  
                                                     
    device REG_MUX_1 R64_BYP_MUX              
        parameter map
        (
             IN_SEL => OR_BYP_3_B
        )
        port map
        (
             D0  => ntR64OUT,
             D1  => ntR64IN,
             DOUT   => ntsum64_reg             
        );

    device REG_MUX_65 CPO_MUX              
        parameter map
        (
             IN_SEL => OR2CASCADE_EN
        )
        port map                               
        (                                      
             D0[64:0]  => 65'b0,                
             D1[64:0]  => {ntsum64_reg,DPO[64:37],DPO[35:0]},            
             DOUT[64:0]   => CPO[64:0]            
        );

    //dummy instances for constraint editor
    device DUM_INST APM9A ;
    device DUM_INST APM9A18A;
    device DUM_INST APM9B ;
    device DUM_INST APM9B18B;
    
     // add dumy inst for itt
    
    device APM_INST APM_INST
        parameter map
        (
            IS_DUMMY_INST => "TRUE"
        )
        port map
        (
            DXIA_8_0            =>   DXIA[0],
            DXIA_17_9           =>   DXIA[9],

            DYIA_8_0            =>   DYIA[0],
            DYIA_17_9           =>   DYIA[9],

            DZIA_8_0            =>   DZIA[0],    
            DZIA_17_9           =>   DZIA[9],    
            DZIA_31_18          =>   DZIA[18],

            DXIB_8_0            =>   DXIB[0],    
            DXIB_17_9           =>   DXIB[9],    

            DYIB_8_0            =>   DYIB[0],    
            DYIB_17_9           =>   DYIB[9],    
                                                 
            DZIB_8_0            =>   DZIB[0],    
            DZIB_17_9           =>   DZIB[9],    
            DZIB_31_18          =>   DZIB[18],   

            APM_OP_POST_10_0    =>   APM_OP_POST[0],
            APM_OP_IR_8_0       =>   APM_OP_IR[0],
            APM_OP_PRAD_1_0     =>   APM_OP_PRAD[0],

            CYI_8_0             =>   CYI[0],
            CYI_17_9            =>   CYI[9],
            CYI_26_18           =>   CYI[18],

            CYO_8_0             =>   CYO[0],
            CYO_17_9            =>   CYO[9],
            CYO_26_18           =>   CYO[18],

            CZI_8_0             =>   CZI[0],
            CZI_17_9            =>   CZI[9],
            CZI_26_18           =>   CZI[18],

            CZO_8_0             =>   CZO[0],
            CZO_17_9            =>   CZO[9],
            CZO_26_18           =>   CZO[18],

            CPI_64_0            =>   CPI[0],
            CPO_64_0            =>   CPO[0],
            DPO_17_0            =>   DPO[0],
            DPO_36_18           =>   DPO[18],
            DPO_54_37           =>   DPO[37],
            DPO_73_55           =>   DPO[55]
        );
     

}; // end of structure netlist of APM

/*******************************************************************************

  Device    [APM]

  Author    []

  Abstract  [The floorplan structure]

  Revision History:

********************************************************************************/
floorplan
structure fp_struct of APM
{
    device DUM_INST APM9A ;
    device DUM_INST APM9A18A;
    device DUM_INST APM9B ;
    device DUM_INST APM9B18B;            

}; // end of structure fp_struct of APM

timing tnl of APM
{
    wire floating_w;
    wire dxia_signed, dyia_signed, dzia_signed;
    wire dxib_signed, dyib_signed, dzib_signed;
    wire apm_op_prad[1:0];

    bit polEn[7:0] = {DXIA_SIGNED_POL, DYIA_SIGNED_POL, DZIA_SIGNED_POL, DXIB_SIGNED_POL, DYIB_SIGNED_POL, DZIB_SIGNED_POL, OP_PRAD_A_POL, OP_PRAD_B_POL};
    &wire ntRefsPol[7:0] = {dxia_signed, dyia_signed, dzia_signed, dxib_signed, dyib_signed, dzib_signed, apm_op_prad[0], apm_op_prad[1]};
    &port ptRefsPol[7:0] = {DXIA_SIGNED, DYIA_SIGNED, DZIA_SIGNED, DXIB_SIGNED, DYIB_SIGNED, DZIB_SIGNED, APM_OP_PRAD[0], APM_OP_PRAD[1]};
    string instNamePol[7:0] = {"DXIA_SIGNED", "DYIA_SIGNED", "DZIA_SIGNED", "DXIB_SIGNED", "DYIB_SIGNED", "DZIB_SIGNED", "OP_PRAD_A", "OP_PRAD_B"};

    int i;
    for (i = 0; i < 8; i += 1)
    {
        string strVal;
        if (polEn[i] == 1'b0)
        {
            sprintf(strVal, "%s_INV", instNamePol[i]);
            operator V_INV *strVal
            port map (
                I => ptRefsPol[i],
                Z => ntRefsPol[i]
            );
        }
        else
        {
            sprintf(strVal, "%s_BUF", instNamePol[i]);
            operator V_BUF *strVal
            port map (
                I => ptRefsPol[i],
                Z => ntRefsPol[i]
            );
        }
    }

    wire dxia[17:0];
    wire dyia[17:0];
    wire dzia[17:0];
    wire dxib[17:0];
    wire dyib[17:0];
    wire dzib[17:0];

    bit pseEn[5:0] = {SIGNED_ENA[0], SIGNED_ENB[0], SIGNED_ENC[0], SIGNED_ENA[1], SIGNED_ENB[1], SIGNED_ENC[1]};
    string ptNamePse[5:0] = {"DXIA", "DYIA", "DZIA", "DXIB", "DYIB", "DZIB"};
    string ntNamePse[5:0] = {"dxia", "dyia", "dzia", "dxib", "dyib", "dzib"};
    bit pseBit[101:0] = {DXIA_PSE, DYIA_PSE, DZIA_PSE[16:0], DXIB_PSE, DYIB_PSE, DZIB_PSE[16:0]};

    for (i = 0; i < 6; i += 1)
    {
        string strVal;
        sprintf(strVal, "%s[17]", ptNamePse[i]);
        &port ptPse = <port *strVal>;
        sprintf(strVal, "%s[17]", ntNamePse[i]);
        &wire ntPse = <wire *strVal>;

        if (pseEn[i] == 1'b1)
        {
            sprintf(strVal, "%s_SIGNED", ptNamePse[i]);
            &port ptSign = <port *strVal>;

            sprintf(strVal, "%s_PSE_17_AND", ptNamePse[i]);
            operator V_MUX2 *strVal
            port map (
                I0  => 1'b0,
                I1  => ptSign,
                SEL => ptPse,
                Z   => ntPse
            );
        }
        else
        {
            sprintf(strVal, "%s_PSE_17", ptNamePse[i]);
            operator V_BUF *strVal
            port map (
                I => ptPse, 
                Z => ntPse
            );
        }

        int j;
        for (j = 0; j < 17; j += 1)
        {
            string strVar;
            sprintf(strVal, "%s[%d]", ptNamePse[i], j);
            &port ptRef = <port *strVal>;
            sprintf(strVal, "%s[%d]", ntNamePse[i], j);
            &wire ntRef = <wire *strVal>;

            sprintf(strVar, "%s_PSE_%d", ptNamePse[i], j);
            operator V_BUF *strVar
            port map (
                I => (pseBit[i*17+j] == 1'b1 && pseEn[i] == 1'b1) ? ntPse :
                     (pseBit[i*17+j] == 1'b1) ? ptPse : ptRef,
                Z => ntRef
            );
        }
    }

    //wire apm_op_post[10:0];
    //for (i = 0; i < 11; i += 1)
    //{
    //    string strVal;
    //    sprintf(strVal, "%s_%d", "APM_OP_POST", i);
    //
    //    if (OPCD_DYN_POL[i] == 1'b0)
    //    {
    //        operator V_INV *strVar
    //        port map (
    //            I => APM_OP_POST[i],
    //            Z => apm_op_post[i]
    //        );
    //    }
    //    else {
    //        operator V_BUF *strVar
    //        port map (
    //            I => APM_OP_POST[i],
    //            Z => apm_op_post[i]
    //        );
    //    }
    //}

    //bool IS_ACC_MODE = (ALU_MCPATSEL == 1'b1 && ALU_MASKPATSEL == 1'b1) ? TRUE : FALSE;
    string GRS_EN = (GRS_DIS == 1'b0) ? "TRUE": "FALSE";
    string HIGH_MULT_EN = (OPCD[3:0] == 4'b0001) ? "TRUE" : "FALSE"; // (A[31:18] * B) << 18 + (A[17:0] * B)
                                                                     // (A * B[26:18]) << 18 + (A * B[17:0])

    // OR2CASCADE_EN == 1'b1 means use CPO.
    // OPCD[6:4] == 3'b010 means use CPI.
    // OPCD[6:4] == 3'b001 means ci is 64'b0.
    if (OR2CASCADE_EN == 1'b1 && (OPCD[6:0] == 7'b001_0101 || OPCD[6:0] == 7'b010_0101)) // USED CPO
    {
         //P = CPI + A0[17:0] * B0[17:0] + A1[17:0] * B1[17:0];
         if (OP_PRAD_A != 0 && OP_PRAD_B != 0)
         {
            operator V_APM_PREADD_FIR_A V_APM_PREADD_FIR_A
            parameter map (
                GRS_EN        =>  GRS_EN,
                SYNC_RST      => (SYNC_CTIR[0] == 1'b0) ? "FALSE" : "TRUE",    //"TRUE"; "FALSE"
                INREG_EN      => (IR_BYP_0_XA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                OUTREG_EN     => (OR_BYP_0_A == 1'b0) ? "TRUE" : "FALSE",      //"TRUE"; "FALSE"
                INREG_Z1_EN   => (IR_BYP_11_ZB == 1'b0) ? "TRUE" : "FALSE",    //"TRUE"; "FALSE"
              //INPUT_OP      => {SOURCEB[0], SOURCEB[1], 3'b000, SOURCEC, IR_BYP_4_ZA},
                INPUT_OP      =>  PRAD_FIR_INPUT_OP[7:0],
                DYN_OP_SEL    => {IRDSEL_B[0], IRDSEL_B[1], 3'b111, IRDSEL_C, DBYP_C[0]},
                OPCD_CPI_SEL  =>  OPCD[4],
                OPCD_DYN_SEL  =>  OPCD_DYN_SEL[4]
            )
            port map(
                CE            =>  CE[0],
                RST           =>  RST[0],
                CLK           =>  CLK[0],
                CYO           =>  CYO[17:0],
                CYO_SIGNED    =>  CYO_SIGNED,
                CZO           =>  CZO[17:0],
                CZO_SIGNED    =>  CZO_SIGNED,
                CPO           =>  CPO[63:0],
                CPO_SIGNED    =>  CPO_SIGNED,
                P             => {DPO[64:37], DPO[35:0]},
                CYI           =>  CYI[17:0],
                CYI_SIGNED    =>  CYI_SIGNED,
                Y0            =>  dyia,
                Y0_SIGNED     =>  dyia_signed,
                H0            =>  dxia,
                H0_SIGNED     =>  dxia_signed,
                CZI           =>  CZI[17:0],
                CZI_SIGNED    =>  CZI_SIGNED,
                Z0            =>  dzia[17:0],
                Z0_SIGNED     =>  dzia_signed,
                H1            =>  dxib,
                H1_SIGNED     =>  dxib_signed,
                Y1            =>  dyib,
                Y1_SIGNED     =>  dyib_signed,
                Z1            =>  dzib[17:0],
                Z1_SIGNED     =>  dzib_signed,
                OPCD_CPI_DYN  =>  APM_OP_POST[5],
                CPI           =>  CPI[63:0],
                CPI_SIGNED    =>  CPI_SIGNED,
                S0            =>  APM_OP_IR[0],
                S1            =>  APM_OP_IR[3],
                DYN_OP[5:0]   => {APM_OP_IR[6:4], APM_OP_IR[7], APM_OP_IR[1], APM_OP_IR[2]}
            );
         }
         else
         {
            operator V_APM_FIR_A V_APM_FIR_A
            parameter map (
                GRS_EN       =>  GRS_EN,
                SYNC_RST     => (SYNC_CTIR[0] == 1'b0) ? "FALSE" : "TRUE",    //"TRUE"; "FALSE"
                INREG_EN     => (IR_BYP_0_XA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                OUTREG_EN    => (OR_BYP_0_A == 1'b0) ? "TRUE" : "FALSE",      //"TRUE"; "FALSE"
                INPUT_OP     =>  SOURCEB,
                DYN_OP_SEL   =>  IRDSEL_B,
                OPCD_CPI_SEL =>  OPCD[4],
                OPCD_DYN_SEL =>  OPCD_DYN_SEL[4]
            )
            port map(
                CE           =>  CE[0],
                RST          =>  RST[0],
                CLK          =>  CLK[0],
                CYO          =>  CYO[17:0],
                CYO_SIGNED   =>  CYO_SIGNED,
                CPO          =>  CPO[63:0],
                CPO_SIGNED   =>  CPO_SIGNED,
                P            => {DPO[64:37], DPO[35:0]},
                CYI          =>  CYI[17:0],
                CYI_SIGNED   =>  CYI_SIGNED,
                Y0           =>  dyia,
                Y0_SIGNED    =>  dyia_signed,
                H0           =>  dxia,
                H0_SIGNED    =>  dxia_signed,
                H1           =>  dxib,
                H1_SIGNED    =>  dxib_signed,
                Y1           =>  dyib,
                Y1_SIGNED    =>  dyib_signed,
                OPCD_CPI_DYN =>  APM_OP_POST[5],
                CPI          =>  CPI[63:0],
                CPI_SIGNED   =>  CPI_SIGNED,
                S0           =>  APM_OP_IR[0],
                S1           =>  APM_OP_IR[3]
            );
         }
    }
    else if (OR2CASCADE_EN == 1'b1 && (OPCD[6:0] == 7'b001_0001 || OPCD[6:0] == 7'b010_0001))
    {
        //P = CPI + A[26:0] * B[26:0];
         if (OP_PRAD_A != 0 && OP_PRAD_B != 0)
         {
            operator V_APM_PREADD_FIR_B V_APM_PREADD_FIR_B
            parameter map (
                GRS_EN        =>  GRS_EN,
                SYNC_RST      => (SYNC_CTIR[0] == 1'b0) ? "FALSE" : "TRUE",    //"TRUE"; "FALSE"
                INREG_EN      => (IR_BYP_0_XA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                OUTREG_EN     => (OR_BYP_0_A == 1'b0) ? "TRUE" : "FALSE",      //"TRUE"; "FALSE"
                INREG_Z0_EN   => (IR_BYP_4_ZA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
              //INPUT_OP      => {1'b0, SOURCEC[0], 1'b0, SOURCEB[0]},
                INPUT_OP      =>  PRAD_FIR_INPUT_OP[3:0],
                DYN_OP_SEL    => {1'b1, IRDSEL_C[0], 1'b1, IRDSEL_B[0]},
                OPCD_CPI_SEL  =>  OPCD[4],
                OPCD_DYN_SEL  =>  OPCD_DYN_SEL[4]
            )
            port map(
                CE            =>  CE[0],
                RST           =>  RST[0],
                CLK           =>  CLK[0],
                CYO           =>  CYO[25:0],
                CYO_SIGNED    =>  CYO_SIGNED,
                CZO           =>  CZO[25:0],
                CZO_SIGNED    =>  CZO_SIGNED,
                CPO           =>  CPO[63:0],
                CPO_SIGNED    =>  CPO_SIGNED,
                P             => {DPO[64:37], DPO[35:0]},
                CYI           =>  CYI[25:0],
                CYI_SIGNED    =>  CYI_SIGNED,
                Y0            => {dyib[7:0], dyia},
                Y0_SIGNED     =>  dyib_signed,
                H0            => {dxib[8:0], dxia},
                H0_SIGNED     =>  dxib_signed,
                CZI           =>  CZI[25:0],
                CZI_SIGNED    =>  CZI_SIGNED,
                Z0            => {dzib[7:0], dzia[17:0]},
                Z0_SIGNED     =>  dzib_signed,
                OPCD_CPI_DYN  =>  APM_OP_POST[5],
                CPI           =>  CPI[63:0],
                CPI_SIGNED    =>  CPI_SIGNED,
                S0            =>  APM_OP_IR[0],
                S1            =>  APM_OP_IR[5],
                DYN_OP[1:0]   => {APM_OP_IR[6], APM_OP_IR[1]}
            );
         }
         else
         {
            operator V_APM_FIR_B V_APM_FIR_B
            parameter map (
                GRS_EN       =>  GRS_EN,
                SYNC_RST     => (SYNC_CTIR[0] == 1'b0) ? "FALSE" : "TRUE",    //"TRUE"; "FALSE"
                INREG_EN     => (IR_BYP_0_XA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                OUTREG_EN    => (OR_BYP_0_A == 1'b0) ? "TRUE" : "FALSE",      //"TRUE"; "FALSE"
                INPUT_OP     =>  SOURCEB[0],
                DYN_OP_SEL   =>  IRDSEL_B[0],
                OPCD_CPI_SEL =>  OPCD[4],
                OPCD_DYN_SEL =>  OPCD_DYN_SEL[4]
            )
            port map(
                CE           =>  CE[0],
                RST          =>  RST[0],
                CLK          =>  CLK[0],
                CYO          =>  CYO[26:0],
                CYO_SIGNED   =>  CYO_SIGNED,
                CPO          =>  CPO[63:0],
                CPO_SIGNED   =>  CPO_SIGNED,
                P            => {DPO[64:37], DPO[35:0]},
                CYI          =>  CYI[26:0],
                CYI_SIGNED   =>  CYI_SIGNED,
                Y0           => {dyib[8:0], dyia},
                Y0_SIGNED    =>  dyib_signed,
                H0           => {dxib[8:0], dxia},
                H0_SIGNED    =>  dxib_signed,
                OPCD_CPI_DYN =>  APM_OP_POST[5],
                CPI          =>  CPI[63:0],
                CPI_SIGNED   =>  CPI_SIGNED,
                S0           =>  APM_OP_IR[0]
            );
         }
    }
    // ALU_MODE is disable : MULT9 or MULT18
    // if ((OP_MULT_A == 9 || OP_MULT_B == 9 || OP_MULT_A == 18 || OP_MULT_B == 18 || OP_MULT_A == 19 || OP_MULT_B == 19) && ALU_MODE == "DISABLE" && SEL_SYO == 1'b0 && SEL_SZO == 1'b0)
    else if (ALU_MODE == "DISABLE" && SEL_SYO == 1'b0 && SEL_SZO == 1'b0)
    {
        if (OP_MULT_A == 9)
        {
            operator V_APM_MULT9 V_MULT9A
            parameter map (
                GRS_EN       =>   GRS_EN,
                SYNC_RST     =>  (SYNC_CTIR[0] == 1'b0) ? "FALSE" : "TRUE",    //"TRUE"; "FALSE"
                INREG_EN     =>  (IR_BYP_0_XA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                PREREG_EN    =>  (PRADOR_BYP_0_XA == 1'b0) ? "TRUE" : "FALSE", //"TRUE"; "FALSE"
                MULTREG_EN   =>  (PR_BYP_0_MA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                POSTREG_EN   =>  (OR_BYP_0_A == 1'b0) ? "TRUE" : "FALSE",      //"TRUE"; "FALSE"
                USED_PREADD  =>  (OP_PRAD_A == 0) ? "FALSE" : "TRUE",          //"TRUE"; "FALSE"
                USED_POSTADD =>   "FALSE",
                USED_ACC     =>   "FALSE"
            )
            port map (
                CLK        =>  CLK[0],
                CE         =>  CE [0],
                RST        =>  RST[0],
                PRE_ADDSUB =>  apm_op_prad[0],
                A          =>  dxia[8:0],
                B          =>  dyia[8:0],
                C          => (OP_PRAD_A != 0) ? dzia[7:0] : 8'h00,
                A_SIGNED   =>  dxia_signed,
                B_SIGNED   =>  dyia_signed,
                C_SIGNED   => (OP_PRAD_A != 0) ? dzia_signed : 1'b0,
                P[17:0]    =>  DPO[17:0]
            );
            operator V_APM_MULT9 V_MULT9A18A
            parameter map (
                GRS_EN       =>   GRS_EN,
                SYNC_RST     =>  (SYNC_CTIR[1] == 1'b0) ? "FALSE" : "TRUE",    //"TRUE"; "FALSE"
                INREG_EN     =>  (IR_BYP_1_XA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                PREREG_EN    =>  (PRADOR_BYP_1_XA == 1'b0) ? "TRUE" : "FALSE", //"TRUE"; "FALSE"
                MULTREG_EN   =>  (PR_BYP_1_MA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                POSTREG_EN   =>  (OR_BYP_1_A == 1'b0) ? "TRUE" : "FALSE",      //"TRUE"; "FALSE"
                USED_PREADD  =>  (OP_PRAD_A == 0) ? "FALSE" : "TRUE",          //"TRUE"; "FALSE"
                USED_POSTADD =>   "FALSE",
                USED_ACC     =>   "FALSE"
            )
            port map (
                CLK        =>  CLK[0],
                CE         =>  CE [0],
                RST        =>  RST[0],
                PRE_ADDSUB =>  apm_op_prad[0],
                A          =>  dxia[17:9],
                B          =>  dyia[17:9],
                C          => (OP_PRAD_A != 0) ? dzia[16:9] : 8'h00,
                A_SIGNED   =>  dxia_signed,
                B_SIGNED   =>  dyia_signed,
                C_SIGNED   => (OP_PRAD_A != 0) ? dzia_signed : 1'b0,
                P[17:0]    =>  DPO[35:18]
            );
        }
        else //if (OP_MULT_A == 18 || OP_MULT_A == 19)
        {
            operator V_APM_MULT18 V_MULT18A
            parameter map (
                GRS_EN       =>   GRS_EN,
                SYNC_RST     =>  (SYNC_CTIR[0] == 1'b0) ? "FALSE" : "TRUE",    //"TRUE"; "FALSE"
                INREG_EN     =>  (IR_BYP_0_XA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                PREREG_EN    =>  (PRADOR_BYP_0_XA == 1'b0) ? "TRUE" : "FALSE", //"TRUE"; "FALSE"
                MULTREG_EN   =>  (PR_BYP_0_MA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                POSTREG_EN   =>  (OR_BYP_0_A == 1'b0) ? "TRUE" : "FALSE",      //"TRUE"; "FALSE"
                USED_PREADD  =>  (OP_PRAD_A == 0) ? "FALSE" : "TRUE",          //"TRUE"; "FALSE"
                USED_POSTADD =>   "FALSE",
                USED_ACC     =>   "FALSE"
            )
            port map (
                CLK        =>  CLK[0],
                CE         =>  CE [0],
                RST        =>  RST[0],
                PRE_ADDSUB =>  apm_op_prad[0],
                A          =>  dxia[17:0],
                B          =>  dyia[17:0],
                C          => (OP_PRAD_A != 0) ? dzia[17:0] : 18'h0_0000,
                A_SIGNED   =>  dxia_signed,
                B_SIGNED   =>  dyia_signed,
                C_SIGNED   => (OP_PRAD_A != 0) ? dzia_signed : 1'b0,
                P[36:0]    =>  DPO[36:0]
            );
        }
        if (OP_MULT_B == 9)
        {
            operator V_APM_MULT9 V_MULT9B
            parameter map (
                GRS_EN       =>   GRS_EN,
                SYNC_RST     =>  (SYNC_CTIR[2] == 1'b0) ? "FALSE" : "TRUE",    //"TRUE"; "FALSE"
                INREG_EN     =>  (IR_BYP_7_XB == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                PREREG_EN    =>  (PRADOR_BYP_4_XB == 1'b0) ? "TRUE" : "FALSE", //"TRUE"; "FALSE"
                MULTREG_EN   =>  (PR_BYP_2_MB == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                POSTREG_EN   =>  (OR_BYP_2_B == 1'b0) ? "TRUE" : "FALSE",      //"TRUE"; "FALSE"
                USED_PREADD  =>  (OP_PRAD_B == 0) ? "FALSE" : "TRUE",          //"TRUE"; "FALSE"
                USED_POSTADD =>   "FALSE",
                USED_ACC     =>   "FALSE"
            )
            port map (
                CLK        =>  CLK[1],
                CE         =>  CE [1],
                RST        =>  RST[1],
                PRE_ADDSUB =>  apm_op_prad[1],
                A          =>  dxib[8:0],
                B          =>  dyib[8:0],
                C          => (OP_PRAD_B != 0) ? dzib[7:0] : 8'h00,
                A_SIGNED   =>  dxib_signed,
                B_SIGNED   =>  dyib_signed,
                C_SIGNED   => (OP_PRAD_B != 0) ? dzib_signed : 1'b0,
                P[17:0]    =>  DPO[54:37]
            ); 

            operator V_APM_MULT9 V_MULT9B18B
            parameter map (
                GRS_EN       =>   GRS_EN,
                SYNC_RST     =>  (SYNC_CTIR[3] == 1'b0) ? "FALSE" : "TRUE",    //"TRUE"; "FALSE"
                INREG_EN     =>  (IR_BYP_8_XB == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                PREREG_EN    =>  (PRADOR_BYP_5_XB == 1'b0) ? "TRUE" : "FALSE", //"TRUE"; "FALSE"
                MULTREG_EN   =>  (PR_BYP_3_MB == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                POSTREG_EN   =>  (OR_BYP_3_B == 1'b0) ? "TRUE" : "FALSE",      //"TRUE"; "FALSE"
                USED_PREADD  =>  (OP_PRAD_B == 0) ? "FALSE" : "TRUE",          //"TRUE"; "FALSE"
                USED_POSTADD =>   "FALSE",
                USED_ACC     =>   "FALSE"
            )
            port map (
                CLK        =>  CLK[1],
                CE         =>  CE [1],
                RST        =>  RST[1],
                PRE_ADDSUB =>  apm_op_prad[1],
                A          =>  dxib[17:9],
                B          =>  dyib[17:9],
                C          => (OP_PRAD_B != 0) ? dzib[16:9] : 8'h00,
                A_SIGNED   =>  dxib_signed,
                B_SIGNED   =>  dyib_signed,
                C_SIGNED   => (OP_PRAD_B != 0) ? dzib_signed : 1'b0,
                P[17:0]    =>  DPO[72:55]
            );
        }
        else //if (OP_MULT_B == 18 || OP_MULT_B == 19)
        {
            operator V_APM_MULT18 V_MULT18B
            parameter map (
                GRS_EN       =>   GRS_EN,
                SYNC_RST     =>  (SYNC_CTIR[2] == 1'b0) ? "FALSE" : "TRUE",    //"TRUE"; "FALSE"
                INREG_EN     =>  (IR_BYP_7_XB == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                PREREG_EN    =>  (PRADOR_BYP_4_XB == 1'b0) ? "TRUE" : "FALSE", //"TRUE"; "FALSE"
                MULTREG_EN   =>  (PR_BYP_2_MB == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                POSTREG_EN   =>  (OR_BYP_2_B == 1'b0) ? "TRUE" : "FALSE",      //"TRUE"; "FALSE"
                USED_PREADD  =>  (OP_PRAD_B == 0) ? "FALSE" : "TRUE",          //"TRUE"; "FALSE"
                USED_POSTADD =>   "FALSE",
                USED_ACC     =>   "FALSE"
            )
            port map (
                CLK        =>  CLK[1],
                CE         =>  CE [1],
                RST        =>  RST[1],
                PRE_ADDSUB =>  apm_op_prad[1],
                A          =>  dxib[17:0],
                B          =>  dyib[17:0],
                C          => (OP_PRAD_B != 0) ? dzib[17:0] : 18'h0_0000,
                A_SIGNED   =>  dxib_signed,
                B_SIGNED   =>  dyib_signed,
                C_SIGNED   => (OP_PRAD_B != 0) ? dzib_signed : 1'b0,
                P[36:0]    =>  DPO[73:37]
            );
        }
    }
    else if (HIGH_MULT_EN == "FALSE" && ALU_MODE == "ENABLE")
    //else if ((OP_MULT_A == 9 || OP_MULT_B == 9 || OP_MULT_A == 18 || OP_MULT_B == 18 || OP_MULT_A == 19 || OP_MULT_B == 19) && ALU_MODE == "ENABLE" && HIGH_MULT_EN == "FALSE")
    {
        string USED_POSTADD = "FALSE";
        string USED_POSTADD_SUM = "FALSE";
        string USED_ACC = "FALSE";
        string DYN_INIT_EN = "FALSE";

        if (OPCD[6:0] == 7'b000_0101 && OPCD_DYN_SEL[6:0] == 7'b000_0000) // P = mult_a + mult_b
        {
            USED_POSTADD = "TRUE";
        }
        else if (OPCD[6:0] == 7'b101_1101 && (OPCD_DYN_SEL[6:0] == 7'b110_0010 || OPCD_DYN_SEL[6:0] == 7'b011_0010))
        {
            USED_ACC = "TRUE";
            DYN_INIT_EN = (OPCD_DYN_SEL[6:0] == 7'b110_0010) ? "TRUE" : "FALSE";
        }
        else if (OPCD[6:0] == 7'b101_0101 && (OPCD_DYN_SEL[6:0] == 7'b110_1010 || OPCD_DYN_SEL[6:0] == 7'b011_1010))
        {
            USED_POSTADD = "TRUE";
            USED_ACC = "TRUE";
            DYN_INIT_EN = (OPCD_DYN_SEL[6:0] == 7'b110_1010) ? "TRUE" : "FALSE";
        }
        else if (OPCD[6:0] == 7'b010_0101 && OPCD_DYN_SEL[6:0] == 7'b000_0000) // P = mult_a + mult_b + cpi
        {
            USED_POSTADD = "TRUE";
            USED_POSTADD_SUM = "TRUE";
        }

        if (USED_POSTADD == "TRUE" && OP_MULT_A == 9 && OP_MULT_B == 9)
        {
            wire cpi_w[63:0];
            wire cpi_signed_w[1:0];

            operator V_APM_MULT9 V_MULT9A
            parameter map (
                GRS_EN       =>   GRS_EN,
                SYNC_RST     =>  (SYNC_CTIR[0] == 1'b0) ? "FALSE" : "TRUE",    //"TRUE"; "FALSE"
                INREG_EN     =>  (IR_BYP_0_XA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                PREREG_EN    =>  (PRADOR_BYP_0_XA == 1'b0) ? "TRUE" : "FALSE", //"TRUE"; "FALSE"
                MULTREG_EN   =>  (PR_BYP_0_MA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                POSTREG_EN   =>  "FALSE", //(OR_BYP_0_A == 1'b0) ? "TRUE" : "FALSE",      //"TRUE"; "FALSE"
                USED_PREADD  =>  (OP_PRAD_A == 0) ? "FALSE" : "TRUE",          //"TRUE"; "FALSE"
                USED_POSTADD =>   USED_POSTADD_SUM,
                USED_ACC     =>   "FALSE",
                POSTADD_INPUT_ORDER => "MULT_CPI"
            )
            port map (
                CLK         =>  CLK[0],
                CE          =>  CE [0],
                RST         =>  RST[0],
                PRE_ADDSUB  =>  apm_op_prad[0],
                A           =>  dxia[8:0],
                B           =>  dyia[8:0],
                C           => (OP_PRAD_A != 0) ? dzia[7:0] : 8'h00,
                A_SIGNED    =>  dxia_signed,
                B_SIGNED    =>  dyia_signed,
                C_SIGNED    => (OP_PRAD_A != 0) ? dzia_signed : 1'b0,
                POST_ADDSUB => (USED_POSTADD_SUM == "TRUE" && OPCD_DYN_SEL[8] == 1'b1) ? APM_OP_POST[8] : 
                               (USED_POSTADD_SUM == "TRUE" && OPCD[8] == 1'b1) ? 1'b1 :
                               (USED_POSTADD_SUM == "TRUE") ? 1'b0 : floating_w,
                CPI_SIGNED  =>  CPI_SIGNED,
                CPI         =>  CPI[31:0],
                CPO_SIGNED  =>  cpi_signed_w[0],
                CPO         =>  cpi_w[31:0]
            );

            operator V_APM_MULT9 V_MULT9B
            parameter map (
                GRS_EN        =>   GRS_EN,
                SYNC_RST      =>  (SYNC_CTIR[2] == 1'b0) ? "FALSE" : "TRUE",    //"TRUE"; "FALSE"
                INREG_EN      =>  (IR_BYP_7_XB == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                PREREG_EN     =>  (PRADOR_BYP_4_XB == 1'b0) ? "TRUE" : "FALSE", //"TRUE"; "FALSE"
                MULTREG_EN    =>  (PR_BYP_2_MB == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                POSTREG_EN    =>  (OR_BYP_3_B == 1'b0) ? "TRUE" : "FALSE",      //"TRUE"; "FALSE"
                USED_PREADD   =>  (OP_PRAD_B == 0) ? "FALSE" : "TRUE",          //"TRUE"; "FALSE"
                USED_POSTADD  =>   USED_POSTADD,
                USED_ACC      =>   USED_ACC,
                DYN_INIT_EN   =>   DYN_INIT_EN,  //"TRUE"; "FALSE"
                SINIT_VALUE   =>   RTI[31:0],
                MASKPAT       =>   MASKPAT[31:0],
                PATTERN       =>   MCPAT[31:0],
                OVERFLOW_MASK =>   MASK01[31:0]
            )
            port map (
                CLK         =>  CLK[0],
                CE          =>  CE [0],
                RST         =>  RST[0],
                PRE_ADDSUB  =>  apm_op_prad[1],
                A           =>  dxib[8:0],
                B           =>  dyib[8:0],
                C           => (OP_PRAD_B != 0) ? dzib[7:0] : 8'h00,
                A_SIGNED    =>  dxib_signed,
                B_SIGNED    =>  dyib_signed,
                C_SIGNED    => (OP_PRAD_B != 0) ? dzib_signed : 1'b0,
                POST_ADDSUB => (USED_ACC == "TRUE" && OPCD_DYN_SEL[8] == 1'b1) ? APM_OP_POST[8] :
                               (USED_ACC == "TRUE" && OPCD[8] == 1'b1) ? 1'b1 :
                               (USED_ACC == "TRUE") ? 1'b0 : 
                               (OPCD_DYN_SEL[7] == 1'b1) ? APM_OP_POST[7] :
                               (OPCD[7] == 1'b1) ? 1'b1 : 1'b0,
                ACC_ADDSUB  => (USED_ACC == "TRUE" && OPCD_DYN_SEL[7] == 1'b1) ? APM_OP_POST[7] :
                               (USED_ACC == "TRUE" && OPCD[7] == 1'b1) ? 1'b1 :
                               (USED_ACC == "TRUE") ? 1'b0 : floating_w,
                P[31:0]     =>  DPO[31:0],
                CPI_SIGNED  =>  cpi_signed_w[0],
                CPI         =>  cpi_w[31:0],
                CPO_SIGNED  =>  CPO_SIGNED,
                CPO         =>  CPO[31:0],
                RELOAD      => (USED_ACC == "TRUE") ? APM_OP_POST[1] : floating_w,
                DINIT_VALUE => (DYN_INIT_EN == "TRUE") ? DZIA : 32'h0,
                EQZ         =>  DPO[72],
                EQZM        =>  DPO[71],
                EQOM        =>  DPO[70],
                EQPAT       =>  DPO[69],
                EQPATN      =>  DPO[68],
                OVER        =>  DPO[67],
                UNDER       =>  DPO[66]
            );

            operator V_APM_MULT9 V_MULT9A18A
            parameter map (
                GRS_EN       =>   GRS_EN,
                SYNC_RST     =>  (SYNC_CTIR[1] == 1'b0) ? "FALSE" : "TRUE",    //"TRUE"; "FALSE"
                INREG_EN     =>  (IR_BYP_1_XA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                PREREG_EN    =>  (PRADOR_BYP_1_XA == 1'b0) ? "TRUE" : "FALSE", //"TRUE"; "FALSE"
                MULTREG_EN   =>  (PR_BYP_1_MA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                POSTREG_EN   =>  "FALSE", //(OR_BYP_1_A == 1'b0) ? "TRUE" : "FALSE",      //"TRUE"; "FALSE"
                USED_PREADD  =>  (OP_PRAD_A == 0) ? "FALSE" : "TRUE",          //"TRUE"; "FALSE"
                USED_POSTADD =>   USED_POSTADD_SUM,
                USED_ACC     =>   "FALSE",
                POSTADD_INPUT_ORDER => "MULT_CPI"
            )
            port map (
                CLK         =>  CLK[0],
                CE          =>  CE [0],
                RST         =>  RST[0],
                PRE_ADDSUB  =>  APM_OP_PRAD[0],
                A           =>  dxia[17:9],
                B           =>  dyia[17:9],
                C           => (OP_PRAD_A != 0) ? dzia[16:9] : 8'h00,
                A_SIGNED    =>  dxia_signed,
                B_SIGNED    =>  dyia_signed,
                C_SIGNED    => (OP_PRAD_A != 0) ? dzia_signed : 1'b0,
                POST_ADDSUB => (USED_POSTADD_SUM == "TRUE" && OPCD_DYN_SEL[8] == 1'b1) ? APM_OP_POST[8] : 
                               (USED_POSTADD_SUM == "TRUE" && OPCD[8] == 1'b1) ? 1'b1 :
                               (USED_POSTADD_SUM == "TRUE") ? 1'b0 : floating_w,
                CPI_SIGNED  =>  CPI_SIGNED,
                CPI         =>  CPI[63:32],
                CPO_SIGNED  =>  cpi_signed_w[1],
                CPO         =>  cpi_w[63:32]
            );

            operator V_APM_MULT9 V_MULT9B18B
            parameter map (
                GRS_EN       =>   GRS_EN,
                SYNC_RST     =>  (SYNC_CTIR[3] == 1'b0) ? "FALSE" : "TRUE",    //"TRUE"; "FALSE"
                INREG_EN     =>  (IR_BYP_8_XB == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                PREREG_EN    =>  (PRADOR_BYP_5_XB == 1'b0) ? "TRUE" : "FALSE", //"TRUE"; "FALSE"
                MULTREG_EN   =>  (PR_BYP_3_MB == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                POSTREG_EN   =>  (OR_BYP_3_B == 1'b0) ? "TRUE" : "FALSE",      //"TRUE"; "FALSE"
                USED_PREADD  =>  (OP_PRAD_B == 0) ? "FALSE" : "TRUE",          //"TRUE"; "FALSE"
                USED_POSTADD =>   USED_POSTADD,
                USED_ACC     =>   USED_ACC,
                DYN_INIT_EN  =>   DYN_INIT_EN,  //"TRUE"; "FALSE"
                SINIT_VALUE  =>   RTI[63:32]
            )
            port map (
                CLK         =>  CLK[0],
                CE          =>  CE [0],
                RST         =>  RST[0],
                PRE_ADDSUB  =>  apm_op_prad[1],
                A           =>  dxib[17:9],
                B           =>  dyib[17:9],
                C           => (OP_PRAD_B != 0) ? dzib[16:9] : 8'h00,
                A_SIGNED    =>  dxib_signed,
                B_SIGNED    =>  dyib_signed,
                C_SIGNED    => (OP_PRAD_B != 0) ? dzib_signed : 1'b0,
                POST_ADDSUB => (USED_ACC == "TRUE" && OPCD_DYN_SEL[8] == 1'b1) ? APM_OP_POST[8] :
                               (USED_ACC == "TRUE" && OPCD[8] == 1'b1) ? 1'b1 :
                               (USED_ACC == "TRUE") ? 1'b0 : 
                               (OPCD_DYN_SEL[7] == 1'b1) ? APM_OP_POST[7] :
                               (OPCD[7] == 1'b1) ? 1'b1 : 1'b0,
                ACC_ADDSUB  => (USED_ACC == "TRUE" && OPCD_DYN_SEL[7] == 1'b1) ? APM_OP_POST[7] :
                               (USED_ACC == "TRUE" && OPCD[7] == 1'b1) ? 1'b1 :
                               (USED_ACC == "TRUE") ? 1'b0 : floating_w,
                P[31:0]     => {DPO[64:37], DPO[35:32]},
                CPI_SIGNED  =>  cpi_signed_w[1],
                CPI         =>  cpi_w[63:32],
                CPO_SIGNED  =>  CPO_SIGNED,
                CPO         =>  CPO[63:32],
                RELOAD      => (USED_ACC == "TRUE") ? APM_OP_POST[1] : floating_w,
                DINIT_VALUE => (DYN_INIT_EN == "TRUE") ? DZIB : 32'h0
            );
        }
        else if (USED_POSTADD == "TRUE") // OP_MULT_A == 18 && OP_MULT_B == 18
        {
            wire cpi_w[63:0];
            wire cpi_signed_w;
            operator V_APM_MULT18 V_MULT18A
            parameter map (
                GRS_EN        =>   GRS_EN,
                SYNC_RST      =>  (SYNC_CTIR[0] == 1'b0) ? "FALSE" : "TRUE",    //"TRUE"; "FALSE"
                INREG_EN      =>  (IR_BYP_0_XA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                PREREG_EN     =>  (PRADOR_BYP_0_XA == 1'b0) ? "TRUE" : "FALSE", //"TRUE"; "FALSE"
                MULTREG_EN    =>  (PR_BYP_0_MA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                POSTREG_EN    =>  "FALSE", //(OR_BYP_0_A == 1'b0) ? "TRUE" : "FALSE",      //"TRUE"; "FALSE"
                USED_PREADD   =>  (OP_PRAD_A == 0) ? "FALSE" : "TRUE",          //"TRUE"; "FALSE"
                USED_POSTADD  =>   USED_POSTADD_SUM,
                USED_ACC      =>   "FALSE",
                POSTADD_INPUT_ORDER => "MULT_CPI"
            )
            port map (
                CLK         =>  CLK[0],
                CE          =>  CE [0],
                RST         =>  RST[0],
                PRE_ADDSUB  =>  apm_op_prad[0],
                A           =>  dxia[17:0],
                B           =>  dyia[17:0],
                C           => (OP_PRAD_A != 0) ? dzia[17:0] : 18'h0_0000,
                A_SIGNED    =>  dxia_signed,
                B_SIGNED    =>  dyia_signed,
                C_SIGNED    => (OP_PRAD_A != 0) ? dzia_signed : 1'b0,
                POST_ADDSUB => (USED_POSTADD_SUM == "TRUE" && OPCD_DYN_SEL[8] == 1'b1) ? APM_OP_POST[8] : 
                               (USED_POSTADD_SUM == "TRUE" && OPCD[8] == 1'b1) ? 1'b1 :
                               (USED_POSTADD_SUM == "TRUE") ? 1'b0 : floating_w,
                CPI_SIGNED  =>  CPI_SIGNED,
                CPI         =>  CPI[63:0],
                CPO_SIGNED  =>  cpi_signed_w,
                CPO         =>  cpi_w
            );
            operator V_APM_MULT18 V_MULT18B
            parameter map (
                GRS_EN        =>   GRS_EN,
                SYNC_RST      =>  (SYNC_CTIR[0] == 1'b0) ? "FALSE" : "TRUE",    //"TRUE"; "FALSE"
                INREG_EN      =>  (IR_BYP_7_XB == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                PREREG_EN     =>  (PRADOR_BYP_4_XB == 1'b0) ? "TRUE" : "FALSE", //"TRUE"; "FALSE"
                MULTREG_EN    =>  (PR_BYP_2_MB == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                POSTREG_EN    =>  (OR_BYP_2_B == 1'b0) ? "TRUE" : "FALSE",      //"TRUE"; "FALSE"
                USED_PREADD   =>  (OP_PRAD_B == 0) ? "FALSE" : "TRUE",          //"TRUE"; "FALSE"
                USED_POSTADD  =>   USED_POSTADD,
                USED_ACC      =>   USED_ACC,
                DYN_INIT_EN   =>   DYN_INIT_EN,  //"TRUE"; "FALSE"
                SINIT_VALUE   =>   RTI[63:0],
                MASKPAT       =>   MASKPAT[63:0],
                PATTERN       =>   MCPAT[63:0],
                OVERFLOW_MASK =>   MASK01[63:0]
            )
            port map (
                CLK         =>  CLK[0],
                CE          =>  CE [0],
                RST         =>  RST[0],
                PRE_ADDSUB  =>  APM_OP_PRAD[1],
                A           =>  dxib[17:0],
                B           =>  dyib[17:0],
                C           => (OP_PRAD_B != 0) ? dzib[17:0] : 18'h0_0000,
                A_SIGNED    =>  dxib_signed,
                B_SIGNED    =>  dyib_signed,
                C_SIGNED    => (OP_PRAD_B != 0) ? dzib_signed : 1'b0,
                POST_ADDSUB => (USED_ACC == "TRUE" && OPCD_DYN_SEL[8] == 1'b1) ? APM_OP_POST[8] :
                               (USED_ACC == "TRUE" && OPCD[8] == 1'b1) ? 1'b1 :
                               (USED_ACC == "TRUE") ? 1'b0 : 
                               (OPCD_DYN_SEL[7] == 1'b1) ? APM_OP_POST[7] :
                               (OPCD[7] == 1'b1) ? 1'b1 : 1'b0,
                ACC_ADDSUB  => (USED_ACC == "TRUE" && OPCD_DYN_SEL[7] == 1'b1) ? APM_OP_POST[7] :
                               (USED_ACC == "TRUE" && OPCD[7] == 1'b1) ? 1'b1 :
                               (USED_ACC == "TRUE") ? 1'b0 : floating_w,
                P[63:0]     => {DPO[64:37], DPO[35:0]},
                CPI_SIGNED  =>  cpi_signed_w,
                CPI         =>  cpi_w,
                CPO_SIGNED  =>  CPO_SIGNED,
                CPO         =>  CPO[63:0],
                RELOAD      => (USED_ACC == "TRUE") ? APM_OP_POST[1] : floating_w,
                DINIT_VALUE => (DYN_INIT_EN == "TRUE") ? {DZIB, DZIA} : 64'h0,
                EQZ         =>  DPO[72],
                EQZM        =>  DPO[71],
                EQOM        =>  DPO[70],
                EQPAT       =>  DPO[69],
                EQPATN      =>  DPO[68],
                OVER        =>  DPO[67],
                UNDER       =>  DPO[66]
            );
        }
        else if (OP_MULT_A == 9 && OP_MULT_B == 9)
        {
            operator V_APM_MULT9 V_MULT9A
            parameter map (
                GRS_EN       =>   GRS_EN,
                SYNC_RST     =>  (SYNC_CTIR[0] == 1'b0) ? "FALSE" : "TRUE",    //"TRUE"; "FALSE"
                INREG_EN     =>  (IR_BYP_0_XA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                PREREG_EN    =>  (PRADOR_BYP_0_XA == 1'b0) ? "TRUE" : "FALSE", //"TRUE"; "FALSE"
                MULTREG_EN   =>  (PR_BYP_0_MA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                POSTREG_EN   =>  (OR_BYP_0_A == 1'b0) ? "TRUE" : "FALSE",      //"TRUE"; "FALSE"
                USED_PREADD  =>  (OP_PRAD_A == 0) ? "FALSE" : "TRUE",          //"TRUE"; "FALSE"
                USED_POSTADD  =>  "FALSE",
                USED_ACC      =>  USED_ACC,
                DYN_INIT_EN   =>  DYN_INIT_EN,  //"TRUE"; "FALSE"
                SINIT_VALUE   =>  RTI[31:0],
                MASKPAT       =>  MASKPAT[31:0],
                PATTERN       =>  MCPAT[31:0],
                OVERFLOW_MASK =>  MASK01[31:0]
            )
            port map (
                CLK         =>  CLK[0],
                CE          =>  CE [0],
                RST         =>  RST[0],
                PRE_ADDSUB  =>  apm_op_prad[0],
                A           =>  dxia[8:0],
                B           =>  dyia[8:0],
                C           => (OP_PRAD_A != 0) ? dzia[7:0] : 8'h00,
                A_SIGNED    =>  dxia_signed,
                B_SIGNED    =>  dyia_signed,
                C_SIGNED    => (OP_PRAD_A != 0) ? dzia_signed : 1'b0,
                ACC_ADDSUB  => (USED_ACC == "TRUE" && OPCD_DYN_SEL[7] == 1'b1) ? APM_OP_POST[7] :
                               (USED_ACC == "TRUE" && OPCD[7] == 1'b1) ? 1'b1 :
                               (USED_ACC == "TRUE") ? 1'b0 : floating_w,
                P[31:0]     =>  DPO[31:0],
                RELOAD      => (USED_ACC == "TRUE") ? APM_OP_POST[1] : floating_w,
                DINIT_VALUE => (DYN_INIT_EN == "TRUE") ? DZIA : 32'h0,
                EQZ         =>  DPO[72],
                EQZM        =>  DPO[71],
                EQOM        =>  DPO[70],
                EQPAT       =>  DPO[69],
                EQPATN      =>  DPO[68],
                OVER        =>  DPO[67],
                UNDER       =>  DPO[66]
            );

            operator V_APM_MULT9 V_MULT9A18A
            parameter map (
                GRS_EN       =>   GRS_EN,
                SYNC_RST     =>  (SYNC_CTIR[1] == 1'b0) ? "FALSE" : "TRUE",    //"TRUE"; "FALSE"
                INREG_EN     =>  (IR_BYP_1_XA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                PREREG_EN    =>  (PRADOR_BYP_1_XA == 1'b0) ? "TRUE" : "FALSE", //"TRUE"; "FALSE"
                MULTREG_EN   =>  (PR_BYP_1_MA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                POSTREG_EN   =>  (OR_BYP_1_A == 1'b0) ? "TRUE" : "FALSE",      //"TRUE"; "FALSE"
                USED_PREADD  =>  (OP_PRAD_A == 0) ? "FALSE" : "TRUE",          //"TRUE"; "FALSE"
                USED_POSTADD =>   "FALSE",
                USED_ACC     =>   USED_ACC,
                DYN_INIT_EN  =>   DYN_INIT_EN,  //"TRUE"; "FALSE"
                SINIT_VALUE  =>   RTI[63:32]
            )
            port map (
                CLK         =>  CLK[0],
                CE          =>  CE [0],
                RST         =>  RST[0],
                PRE_ADDSUB  =>  APM_OP_PRAD[0],
                A           =>  dxia[17:9],
                B           =>  dyia[17:9],
                C           => (OP_PRAD_A != 0) ? dzia[16:9] : 8'h00,
                A_SIGNED    =>  dxia_signed,
                B_SIGNED    =>  dyia_signed,
                C_SIGNED    => (OP_PRAD_A != 0) ? dzia_signed : 1'b0,
                ACC_ADDSUB  => (USED_ACC == "TRUE" && OPCD_DYN_SEL[7] == 1'b1) ? APM_OP_POST[7] :
                               (USED_ACC == "TRUE" && OPCD[7] == 1'b1) ? 1'b1 :
                               (USED_ACC == "TRUE") ? 1'b0 : floating_w,
                P[31:0]     => {DPO[64:37], DPO[35:32]},
                RELOAD      => (USED_ACC == "TRUE") ? APM_OP_POST[1] : floating_w,
                DINIT_VALUE => (DYN_INIT_EN == "TRUE") ? DZIB : 32'h0
            );
        }
        else
        {
            operator V_APM_MULT18 V_MULT18A
            parameter map (
                GRS_EN        =>   GRS_EN,
                SYNC_RST      =>  (SYNC_CTIR[0] == 1'b0) ? "FALSE" : "TRUE",    //"TRUE"; "FALSE"
                INREG_EN      =>  (IR_BYP_0_XA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                PREREG_EN     =>  (PRADOR_BYP_0_XA == 1'b0) ? "TRUE" : "FALSE", //"TRUE"; "FALSE"
                MULTREG_EN    =>  (PR_BYP_0_MA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
                POSTREG_EN    =>  (OR_BYP_0_A == 1'b0) ? "TRUE" : "FALSE",      //"TRUE"; "FALSE"
                USED_PREADD   =>  (OP_PRAD_A == 0) ? "FALSE" : "TRUE",          //"TRUE"; "FALSE"
                USED_POSTADD  =>   USED_POSTADD,
                USED_ACC      =>   USED_ACC,
                DYN_INIT_EN   =>   DYN_INIT_EN,  //"TRUE"; "FALSE"
                SINIT_VALUE   =>   RTI[63:0],
                MASKPAT       =>   MASKPAT[63:0],
                PATTERN       =>   MCPAT[63:0],
                OVERFLOW_MASK =>   MASK01[63:0]
            )
            port map (
                CLK         =>  CLK[0],
                CE          =>  CE [0],
                RST         =>  RST[0],
                PRE_ADDSUB  =>  apm_op_prad[0],
                A           =>  dxia[17:0],
                B           =>  dyia[17:0],
                C           => (OP_PRAD_A != 0) ? dzia[17:0] : 18'h0_0000,
                A_SIGNED    =>  dxia_signed,
                B_SIGNED    =>  dyia_signed,
                C_SIGNED    => (OP_PRAD_A != 0) ? dzia_signed : 1'b0,
                P[63:0]     => {DPO[64:37], DPO[35:0]},
                ACC_ADDSUB  => (USED_ACC == "TRUE" && OPCD_DYN_SEL[7] == 1'b1) ? APM_OP_POST[7] :
                               (USED_ACC == "TRUE" && OPCD[7] == 1'b1) ? 1'b1 :
                               (USED_ACC == "TRUE") ? 1'b0 : floating_w,
                RELOAD      => (USED_ACC == "TRUE") ? APM_OP_POST[1] : floating_w,
                DINIT_VALUE => (DYN_INIT_EN == "TRUE") ? {DZIB, DZIA} : 64'h0,
                EQZ         =>  DPO[72],
                EQZM        =>  DPO[71],
                EQOM        =>  DPO[70],
                EQPAT       =>  DPO[69],
                EQPATN      =>  DPO[68],
                OVER        =>  DPO[67],
                UNDER       =>  DPO[66]
            );
        }
    }
    else if (OP_MULT_A == 27 || OP_MULT_B == 27 && ALU_MODE == "ENABLE")
    {
        string USED_POSTADD = "FALSE";
        string USED_ACC = "FALSE";
        string DYN_INIT_EN = "FALSE";

        if (OPCD[6:0] == 7'b010_0001 && OPCD_DYN_SEL[6:0] == 7'b000_0000) // P = mult_a + mult_b
        {
            USED_POSTADD = "TRUE";
        }
        else if (OPCD[6:0] == 7'b101_0001 && (OPCD_DYN_SEL[6:0] == 7'b110_1110 || OPCD_DYN_SEL[6:0] == 7'b011_1110))
        {
            USED_ACC = "TRUE";
            DYN_INIT_EN = (OPCD_DYN_SEL[6:0] == 7'b110_1110) ? "TRUE" : "FALSE";
        }
        else if (OPCD == 11'b0100_000_0001 && OPCD_DYN_SEL == 11'b000_0000_0000)
        {
        }

        operator V_APM_MULT27 V_MULT27
        parameter map (
            GRS_EN        =>   GRS_EN,
            SYNC_RST      =>  (SYNC_CTIR[0] == 1'b0) ? "FALSE" : "TRUE",    //"TRUE"; "FALSE"
            INREG_EN      =>  (IR_BYP_0_XA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
            PREREG_EN     =>  (PRADOR_BYP_0_XA == 1'b0) ? "TRUE" : "FALSE", //"TRUE"; "FALSE"
            MULTREG_EN    =>  (PR_BYP_0_MA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
            POSTREG_EN    =>  (OR_BYP_0_A == 1'b0) ? "TRUE" : "FALSE",      //"TRUE"; "FALSE"
            USED_PREADD   =>  (OP_PRAD_A == 0) ? "FALSE" : "TRUE",           //"TRUE"; "FALSE"
            USED_POSTADD  =>   USED_POSTADD,
            USED_ACC      =>   USED_ACC,
            DYN_INIT_EN   =>   DYN_INIT_EN,  //"TRUE"; "FALSE"
            SINIT_VALUE   =>   RTI[63:0],
            MASKPAT       =>   MASKPAT[63:0],
            PATTERN       =>   MCPAT[63:0],
            OVERFLOW_MASK =>   MASK01[63:0]
        )
        port map (
            CLK         =>  CLK[0],
            CE          =>  CE [0],
            RST         =>  RST[0],
            PRE_ADDSUB  =>  apm_op_prad[0],
            A           => {dxib[8:0], dxia[17:0]},
            B           => (OP_PRAD_A != 0) ? {floating_w, dyib[7:0], dyia[17:0]} : {dyib[8:0], dyia[17:0]},
            C           => (OP_PRAD_A != 0) ? {dzib[7:0], dzia[17:0]} : 26'h000_0000,
            A_SIGNED    =>  dxib_signed,
            B_SIGNED    =>  dyib_signed,
            C_SIGNED    => (OP_PRAD_A != 0) ? dzib_signed : 1'b0,
            P[63:0]     => {DPO[64:37], DPO[35:0]},
            POST_ADDSUB => (USED_POSTADD == "TRUE" && OPCD_DYN_SEL[7] == 1'b1) ? APM_OP_POST[7] :
                           (USED_POSTADD == "TRUE" && OPCD[7] == 1'b1) ? 1'b1 :
                           (USED_POSTADD == "TRUE") ? 1'b0 : floating_w,
            ACC_ADDSUB  => (USED_ACC == "TRUE" && OPCD_DYN_SEL[7] == 1'b1) ? APM_OP_POST[7] :
                           (USED_ACC == "TRUE" && OPCD[7] == 1'b1) ? 1'b1 :
                           (USED_ACC == "TRUE") ? 1'b0 : floating_w,
            CPI_SIGNED  =>  CPI_SIGNED,
            CPI         =>  CPI[63:0],
            CPO_SIGNED  =>  CPO_SIGNED,
            CPO         =>  CPO[63:0],
            RELOAD      => (USED_ACC == "TRUE") ? APM_OP_POST[1] : floating_w,
            DINIT_VALUE => (DYN_INIT_EN == "TRUE") ? {DZIB, DZIA} : 64'h0,
            EQZ         =>  DPO[72],
            EQZM        =>  DPO[71],
            EQOM        =>  DPO[70],
            EQPAT       =>  DPO[69],
            EQPATN      =>  DPO[68],
            OVER        =>  DPO[67],
            UNDER       =>  DPO[66]
        );
    }
    else if ((OP_MULT_A == 18 || OP_MULT_A == 19) && (OP_MULT_B == 18 || OP_MULT_B == 19) && ALU_MODE == "ENABLE")
    {
        string USED_POSTADD = "FALSE";
        string USED_ACC = "FALSE";
        string DYN_INIT_EN = "FALSE";

        if (OPCD[6:0] == 7'b010_0001 && OPCD_DYN_SEL[6:0] == 7'b000_0000) // P = mult_a + mult_b
        {
            USED_POSTADD = "TRUE";
        }
        else if (OPCD[6:0] == 7'b101_0001 && (OPCD_DYN_SEL[6:0] == 7'b110_1110 || OPCD_DYN_SEL[6:0] == 7'b011_1110))
        {
            USED_ACC = "TRUE";
            DYN_INIT_EN = (OPCD_DYN_SEL[6:0] == 7'b110_1110) ? "TRUE" : "FALSE";
        }
        else if (OPCD == 11'b0100_000_0001 && OPCD_DYN_SEL == 11'b000_0000_0000)
        {
        }

        operator V_APM_MULT36 V_MULT36
        parameter map (
            GRS_EN        =>   GRS_EN,
            SYNC_RST      =>  (SYNC_CTIR[0] == 1'b0) ? "FALSE" : "TRUE",    //"TRUE"; "FALSE"
            INREG_EN      =>  (IR_BYP_0_XA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
            PREREG_EN     =>  (PRADOR_BYP_0_XA == 1'b0) ? "TRUE" : "FALSE", //"TRUE"; "FALSE"
            MULTREG_EN    =>  (PR_BYP_0_MA == 1'b0) ? "TRUE" : "FALSE",     //"TRUE"; "FALSE"
            POSTREG_EN    =>  (OR_BYP_0_A == 1'b0) ? "TRUE" : "FALSE",      //"TRUE"; "FALSE"
            USED_PREADD   =>  (OP_PRAD_A == 0) ? "FALSE" : "TRUE",           //"TRUE"; "FALSE"
            USED_POSTADD  =>   USED_POSTADD,
            USED_ACC      =>   USED_ACC,
            DYN_INIT_EN   =>   DYN_INIT_EN,  //"TRUE"; "FALSE"
            SINIT_VALUE   =>   RTI[63:0],
            MASKPAT       =>   MASKPAT[63:0],
            PATTERN       =>   MCPAT[63:0],
            OVERFLOW_MASK =>   MASK01[63:0]
        )
        port map (
            CLK         =>  CLK[0],
            CE          =>  CE [0],
            RST         =>  RST[0],
            PRE_ADDSUB  =>  apm_op_prad[0],
            A           => {dxib[17:0], dxia[17:0]},
            B[17:0]     =>  dyia[17:0],
            C[17:0]     => (OP_PRAD_A != 0) ? dzia[17:0] : 18'h0_0000,
            A_SIGNED    =>  dxib_signed,
            B_SIGNED    =>  dyib_signed,
            C_SIGNED    => (OP_PRAD_A != 0) ? dzib_signed : 1'b0,
            P[63:0]     => {DPO[64:37], DPO[35:0]},
            POST_ADDSUB => (USED_POSTADD == "TRUE" && OPCD_DYN_SEL[7] == 1'b1) ? APM_OP_POST[7] :
                           (USED_POSTADD == "TRUE" && OPCD[7] == 1'b1) ? 1'b1 :
                           (USED_POSTADD == "TRUE") ? 1'b0 : floating_w,
            ACC_ADDSUB  => (USED_ACC == "TRUE" && OPCD_DYN_SEL[7] == 1'b1) ? APM_OP_POST[7] :
                           (USED_ACC == "TRUE" && OPCD[7] == 1'b1) ? 1'b1 :
                           (USED_ACC == "TRUE") ? 1'b0 : floating_w,
            CPI_SIGNED  =>  CPI_SIGNED,
            CPI         =>  CPI[63:0],
            CPO_SIGNED  =>  CPO_SIGNED,
            CPO         =>  CPO[63:0],
            RELOAD      => (USED_ACC == "TRUE") ? APM_OP_POST[1] : floating_w,
            DINIT_VALUE => (DYN_INIT_EN == "TRUE") ? {DZIB, DZIA} : 64'h0,
            EQZ         =>  DPO[72],
            EQZM        =>  DPO[71],
            EQOM        =>  DPO[70],
            EQPAT       =>  DPO[69],
            EQPATN      =>  DPO[68],
            OVER        =>  DPO[67],
            UNDER       =>  DPO[66]
        );
    }
    else
    {
        // V_APM_H
    }
    
    //operator V_APM_H V_APM_H
    //    parameter map
    //    (
    //        GRS_EN                =>  (GRS_DIS == 1'b1) ? "FALSE" : "TRUE",
    //        CLK_IR_0_XA           =>   CLK_IR_0_XA,
    //        CLK_IR_1_XA           =>   CLK_IR_1_XA,
    //        CLK_IR_2_YA           =>   CLK_IR_2_YA,
    //        CLK_IR_3_YA           =>   CLK_IR_3_YA,
    //        CLK_IR_4_ZA           =>   CLK_IR_4_ZA,
    //        CLK_IR_5_ZA           =>   CLK_IR_5_ZA,
    //        CLK_IR_6_ZA           =>   CLK_IR_6_ZA,
    //        CLK_IR_7_XB           =>   CLK_IR_7_XB,
    //        CLK_IR_8_XB           =>   CLK_IR_8_XB,
    //        CLK_IR_9_YB           =>   CLK_IR_9_YB,
    //        CLK_IR_10_YB          =>   CLK_IR_10_YB,
    //        CLK_IR_11_ZB          =>   CLK_IR_11_ZB,
    //        CLK_IR_12_ZB          =>   CLK_IR_12_ZB,
    //        CLK_IR_13_ZB          =>   CLK_IR_13_ZB,
    //
    //        CE_IR_0_XA            =>   CE_IR_0_XA,
    //        CE_IR_1_XA            =>   CE_IR_1_XA,
    //        CE_IR_2_YA            =>   CE_IR_2_YA,
    //        CE_IR_3_YA            =>   CE_IR_3_YA,
    //        CE_IR_4_ZA            =>   CE_IR_4_ZA,
    //        CE_IR_5_ZA            =>   CE_IR_5_ZA,
    //        CE_IR_6_ZA            =>   CE_IR_6_ZA,
    //        CE_IR_7_XB            =>   CE_IR_7_XB,
    //        CE_IR_8_XB            =>   CE_IR_8_XB,
    //        CE_IR_9_YB            =>   CE_IR_9_YB,
    //        CE_IR_10_YB           =>   CE_IR_10_YB,
    //        CE_IR_11_ZB           =>   CE_IR_11_ZB,
    //        CE_IR_12_ZB           =>   CE_IR_12_ZB,
    //        CE_IR_13_ZB           =>   CE_IR_13_ZB,
    //        RST_IR_0_XA           =>   RST_IR_0_XA,
    //        RST_IR_1_XA           =>   RST_IR_1_XA,
    //        RST_IR_2_YA           =>   RST_IR_2_YA,
    //        RST_IR_3_YA           =>   RST_IR_3_YA,
    //        RST_IR_4_ZA           =>   RST_IR_4_ZA,
    //        RST_IR_5_ZA           =>   RST_IR_5_ZA,
    //        RST_IR_6_ZA           =>   RST_IR_6_ZA,
    //        RST_IR_7_XB           =>   RST_IR_7_XB,
    //        RST_IR_8_XB           =>   RST_IR_8_XB,
    //        RST_IR_9_YB           =>   RST_IR_9_YB,
    //        RST_IR_10_YB          =>   RST_IR_10_YB,
    //        RST_IR_11_ZB          =>   RST_IR_11_ZB,
    //        RST_IR_12_ZB          =>   RST_IR_12_ZB,
    //        RST_IR_13_ZB          =>   RST_IR_13_ZB,
    //        SYNC_IR_0_XA          =>   SYNC_IR_0_XA,
    //        SYNC_IR_1_XA          =>   SYNC_IR_1_XA,
    //        SYNC_IR_2_YA          =>   SYNC_IR_2_YA,
    //        SYNC_IR_3_YA          =>   SYNC_IR_3_YA,
    //        SYNC_IR_4_ZA          =>   SYNC_IR_4_ZA,
    //        SYNC_IR_5_ZA          =>   SYNC_IR_5_ZA,
    //        SYNC_IR_6_ZA          =>   SYNC_IR_6_ZA,
    //        SYNC_IR_7_XB          =>   SYNC_IR_7_XB,
    //        SYNC_IR_8_XB          =>   SYNC_IR_8_XB,
    //        SYNC_IR_9_YB          =>   SYNC_IR_9_YB,
    //        SYNC_IR_10_YB         =>   SYNC_IR_10_YB,
    //        SYNC_IR_11_ZB         =>   SYNC_IR_11_ZB,
    //        SYNC_IR_12_ZB         =>   SYNC_IR_12_ZB,
    //        SYNC_IR_13_ZB         =>   SYNC_IR_13_ZB,
    //        IR_BYP_0_XA           =>   IR_BYP_0_XA,
    //        IR_BYP_1_XA           =>   IR_BYP_1_XA,
    //        IR_BYP_2_YA           =>   IR_BYP_2_YA,
    //        IR_BYP_3_YA           =>   IR_BYP_3_YA,
    //        IR_BYP_4_ZA           =>   IR_BYP_4_ZA,
    //        IR_BYP_5_ZA           =>   IR_BYP_5_ZA,
    //        IR_BYP_6_ZA           =>   IR_BYP_6_ZA,
    //        IR_BYP_7_XB           =>   IR_BYP_7_XB,
    //        IR_BYP_8_XB           =>   IR_BYP_8_XB,
    //        IR_BYP_9_YB           =>   IR_BYP_9_YB,
    //        IR_BYP_10_YB          =>   IR_BYP_10_YB,
    //        IR_BYP_11_ZB          =>   IR_BYP_11_ZB,
    //        IR_BYP_12_ZB          =>   IR_BYP_12_ZB,
    //        IR_BYP_13_ZB          =>   IR_BYP_13_ZB,
    //
    //        OPCD_BYP              =>   OPCD_BYP,
    //        CONST_IA0             =>   CONST_IA0,
    //        CONST_IA1             =>   CONST_IA1,
    //        SOURCEA               =>   SOURCEA,
    //        SOURCEB               =>   SOURCEB,
    //        SOURCEC               =>   SOURCEC,
    //        IRDSEL_B              =>   IRDSEL_B,
    //        IRDSEL_C              =>   IRDSEL_C,
    //        DBYP_C                =>   DBYP_C,
    //
    //        DXIA_SIGNED_POL       =>   DXIA_SIGNED_POL,
    //        DYIA_SIGNED_POL       =>   DYIA_SIGNED_POL,
    //        DZIA_SIGNED_POL       =>   DZIA_SIGNED_POL,
    //        DXIB_SIGNED_POL       =>   DXIB_SIGNED_POL,
    //        DYIB_SIGNED_POL       =>   DYIB_SIGNED_POL,
    //        DZIB_SIGNED_POL       =>   DZIB_SIGNED_POL,
    //        OP_PRAD_A_POL         =>   OP_PRAD_A_POL,
    //        OP_PRAD_B_POL         =>   OP_PRAD_B_POL,
    //        OPCD_DYN_POL          =>   OPCD_DYN_POL,
    //
    //        OPCD                  =>   OPCD,
    //        OPCD_DYN_SEL          =>   OPCD_DYN_SEL,
    //        CLK_CTIR              =>   CLK_CTIR,
    //        CE_CTIR               =>   CE_CTIR,
    //        RST_CTIR              =>   RST_CTIR,
    //        SYNC_CTIR             =>   SYNC_CTIR,
    //        CTRL_IRBYP            =>  {CTRL_IRBYP_4_OP8, CTRL_IRBYP_3_OPB, CTRL_IRBYP_2_OPA, CTRL_IRBYP_1_OP7, CTRL_IRBYP_0_OP0},
    //
    //        IRSHF_B_SEL           =>   IRSHF_B_SEL,
    //        CYSIGNED_SEL          =>   CYSIGNED_SEL,
    //        IRSHF_C_SEL           =>   IRSHF_C_SEL,
    //        CZSIGNED_SEL          =>   CZSIGNED_SEL,
    //        SIGNED_ENA            =>   SIGNED_ENA,
    //        SIGNED_ENB            =>   SIGNED_ENB,
    //        SIGNED_ENC            =>   SIGNED_ENC,
    //
    //        DXIA_PSE              =>   DXIA_PSE,
    //        DYIA_PSE              =>   DYIA_PSE,
    //        DZIA_PSE              =>   DZIA_PSE,
    //        DXIB_PSE              =>   DXIB_PSE,
    //        DYIB_PSE              =>   DYIB_PSE,
    //        DZIB_PSE              =>   DZIB_PSE,
    //
    //        //parameter for PRADR UNIT
    //        PRAD_EN               =>  (OP_PRAD_A != 0) ? ((OP_PRAD_B != 0) ? 2'b11 : 2'b01) : ((OP_PRAD_B != 0) ? 2'b10 : 2'b00),
    //        PRAD26                =>  (OP_PRAD_A == 27) ? 1'b1 : 1'b0,
    //        CLK_PRAD_0_XA         =>   CLK_PRAD_0_XA,
    //        CLK_PRAD_1_XA         =>   CLK_PRAD_1_XA,
    //        CLK_PRAD_2_YA         =>   CLK_PRAD_2_YA,
    //        CLK_PRAD_3_YA         =>   CLK_PRAD_3_YA,
    //        CLK_PRAD_4_XB         =>   CLK_PRAD_4_XB,
    //        CLK_PRAD_5_XB         =>   CLK_PRAD_5_XB,
    //        CLK_PRAD_6_YB         =>   CLK_PRAD_6_YB,
    //        CLK_PRAD_7_YB         =>   CLK_PRAD_7_YB,
    //        CE_PRAD_0_XA          =>   CE_PRAD_0_XA,
    //        CE_PRAD_1_XA          =>   CE_PRAD_1_XA,
    //        CE_PRAD_2_YA          =>   CE_PRAD_2_YA,
    //        CE_PRAD_3_YA          =>   CE_PRAD_3_YA,
    //        CE_PRAD_4_XB          =>   CE_PRAD_4_XB,
    //        CE_PRAD_5_XB          =>   CE_PRAD_5_XB,
    //        CE_PRAD_6_YB          =>   CE_PRAD_6_YB,
    //        CE_PRAD_7_YB          =>   CE_PRAD_7_YB,
    //        RST_PRAD_0_XA         =>   RST_PRAD_0_XA,
    //        RST_PRAD_1_XA         =>   RST_PRAD_1_XA,
    //        RST_PRAD_2_YA         =>   RST_PRAD_2_YA,
    //        RST_PRAD_3_YA         =>   RST_PRAD_3_YA,
    //        RST_PRAD_4_XB         =>   RST_PRAD_4_XB,
    //        RST_PRAD_5_XB         =>   RST_PRAD_5_XB,
    //        RST_PRAD_6_YB         =>   RST_PRAD_6_YB,
    //        RST_PRAD_7_YB         =>   RST_PRAD_7_YB,
    //        
    //        SYNC_PRAD_0_XA        =>   SYNC_PRAD_0_XA,
    //        SYNC_PRAD_1_XA        =>   SYNC_PRAD_1_XA,
    //        SYNC_PRAD_2_YA        =>   SYNC_PRAD_2_YA,
    //        SYNC_PRAD_3_YA        =>   SYNC_PRAD_3_YA,
    //        SYNC_PRAD_4_XB        =>   SYNC_PRAD_4_XB,
    //        SYNC_PRAD_5_XB        =>   SYNC_PRAD_5_XB,
    //        SYNC_PRAD_6_YB        =>   SYNC_PRAD_6_YB,
    //        SYNC_PRAD_7_YB        =>   SYNC_PRAD_7_YB,
    //
    //        PRADOR_BYP_0_XA       =>   PRADOR_BYP_0_XA,
    //        PRADOR_BYP_1_XA       =>   PRADOR_BYP_1_XA,
    //        PRADOR_BYP_2_YA       =>   PRADOR_BYP_2_YA,
    //        PRADOR_BYP_3_YA       =>   PRADOR_BYP_3_YA,
    //        PRADOR_BYP_4_XB       =>   PRADOR_BYP_4_XB,
    //        PRADOR_BYP_5_XB       =>   PRADOR_BYP_5_XB,
    //        PRADOR_BYP_6_YB       =>   PRADOR_BYP_6_YB,
    //        PRADOR_BYP_7_YB       =>   PRADOR_BYP_7_YB,
    //
    //        //parameter for MULT UNIT
    //        CLK_PR_0_MA           =>   CLK_PR_0_MA,
    //        CLK_PR_1_MA           =>   CLK_PR_1_MA,
    //        CLK_PR_2_MB           =>   CLK_PR_2_MB,
    //        CLK_PR_3_MB           =>   CLK_PR_3_MB,
    //        CLK_PR_4_XA           =>   CLK_PR_4_XA,
    //        CLK_PR_5_XB           =>   CLK_PR_5_XB,
    //        CLK_PR_6_YA           =>   CLK_PR_6_YA,
    //        CLK_PR_7_YB           =>   CLK_PR_7_YB,
    //        CLK_PR_8_ZA           =>   CLK_PR_8_ZA,
    //        CLK_PR_9_ZB           =>   CLK_PR_9_ZB,
    //        CE_PR_0_MA            =>   CE_PR_0_MA,
    //        CE_PR_1_MA            =>   CE_PR_1_MA,
    //        CE_PR_2_MB            =>   CE_PR_2_MB,
    //        CE_PR_3_MB            =>   CE_PR_3_MB,
    //        CE_PR_4_XA            =>   CE_PR_4_XA,
    //        CE_PR_5_XB            =>   CE_PR_5_XB,
    //        CE_PR_6_YA            =>   CE_PR_6_YA,
    //        CE_PR_7_YB            =>   CE_PR_7_YB,
    //        CE_PR_8_ZA            =>   CE_PR_8_ZA,
    //        CE_PR_9_ZB            =>   CE_PR_9_ZB,
    //        RST_PR_0_MA           =>   RST_PR_0_MA,
    //        RST_PR_1_MA           =>   RST_PR_1_MA,
    //        RST_PR_2_MB           =>   RST_PR_2_MB,
    //        RST_PR_3_MB           =>   RST_PR_3_MB,
    //        RST_PR_4_XA           =>   RST_PR_4_XA,
    //        RST_PR_5_XB           =>   RST_PR_5_XB,
    //        RST_PR_6_YA           =>   RST_PR_6_YA,
    //        RST_PR_7_YB           =>   RST_PR_7_YB,
    //        RST_PR_8_ZA           =>   RST_PR_8_ZA,
    //        RST_PR_9_ZB           =>   RST_PR_9_ZB,
    //        SYNC_PR_0_MA          =>   SYNC_PR_0_MA,
    //        SYNC_PR_1_MA          =>   SYNC_PR_1_MA,
    //        SYNC_PR_2_MB          =>   SYNC_PR_2_MB,
    //        SYNC_PR_3_MB          =>   SYNC_PR_3_MB,
    //        SYNC_PR_4_XA          =>   SYNC_PR_4_XA,
    //        SYNC_PR_5_XB          =>   SYNC_PR_5_XB,
    //        SYNC_PR_6_YA          =>   SYNC_PR_6_YA,
    //        SYNC_PR_7_YB          =>   SYNC_PR_7_YB,
    //        SYNC_PR_8_ZA          =>   SYNC_PR_8_ZA,
    //        SYNC_PR_9_ZB          =>   SYNC_PR_9_ZB,
    //        PR_BYP_0_MA           =>   PR_BYP_0_MA,
    //        PR_BYP_1_MA           =>   PR_BYP_1_MA,
    //        PR_BYP_2_MB           =>   PR_BYP_2_MB,
    //        PR_BYP_3_MB           =>   PR_BYP_3_MB,
    //        PR_BYP_4_XA           =>   PR_BYP_4_XA,
    //        PR_BYP_5_XB           =>   PR_BYP_5_XB,
    //        PR_BYP_6_YA           =>   PR_BYP_6_YA,
    //        PR_BYP_7_YB           =>   PR_BYP_7_YB,
    //        PR_BYP_8_ZA           =>   PR_BYP_8_ZA,
    //        PR_BYP_9_ZB           =>   PR_BYP_9_ZB,
    //
    //        M9_MODE               =>  (OP_MULT_A == 9) ? ((OP_MULT_B == 9) ? 2'b11 : 2'b01) : ((OP_MULT_B == 9) ? 2'b10 : 2'b00),
    //        M19_MODE              =>  (OP_MULT_A == 19) ? ((OP_MULT_B == 19) ? 2'b11 : 2'b01) : ((OP_MULT_B == 19) ? 2'b10 : 2'b00),
    //        M27_MODE              =>  (OP_MULT_A == 27) ? 1'b1 : 1'b0,
    //        CLK_CTPR              =>   CLK_CTPR,
    //        CE_CTPR               =>   CE_CTPR,
    //        RST_CTPR              =>   RST_CTPR,
    //        SYNC_CTPR             =>   SYNC_CTPR,
    //        CTRL_PRBYP            =>  {CTRL_PRBYP_2_OP8, CTRL_PRBYP_1_OP7, CTRL_PRBYP_0_OP0},
    //
    //        //parameter for post unit
    //        CLK_OR_0_A            =>   CLK_OR_0_A,
    //        CLK_OR_1_A            =>   CLK_OR_1_A,
    //        CLK_OR_2_B            =>   CLK_OR_2_B,
    //        CLK_OR_3_B            =>   CLK_OR_3_B,
    //        CE_OR_0_A             =>   CE_OR_0_A,
    //        CE_OR_1_A             =>   CE_OR_1_A,
    //        CE_OR_2_B             =>   CE_OR_2_B,
    //        CE_OR_3_B             =>   CE_OR_3_B,
    //        RST_OR_0_A            =>   RST_OR_0_A,
    //        RST_OR_1_A            =>   RST_OR_1_A,
    //        RST_OR_2_B            =>   RST_OR_2_B,
    //        RST_OR_3_B            =>   RST_OR_3_B,
    //        SYNC_OR_0_A           =>   SYNC_OR_0_A,
    //        SYNC_OR_1_A           =>   SYNC_OR_1_A,
    //        SYNC_OR_2_B           =>   SYNC_OR_2_B,
    //        SYNC_OR_3_B           =>   SYNC_OR_3_B,
    //        OR_BYP_0_A            =>   OR_BYP_0_A,
    //        OR_BYP_1_A            =>   OR_BYP_1_A,
    //        OR_BYP_2_B            =>   OR_BYP_2_B,
    //        OR_BYP_3_B            =>   OR_BYP_3_B,
    //        RTI                   =>   RTI,     
    //        SEL_SAB_CR27          =>   SEL_SAB_CR27,
    //        SEL_SAB_CR59          =>   SEL_SAB_CR59,     
    //        FLAG_EN               =>   ALU_FLAGEN,            
    //        CR64_SAB              =>   CR64_SAB,
    //        SIGN_SELIR            =>   SIGN_SELIR,
    //        TERNARY               =>   TERNARY,
    //        MASK01                =>   MASK01,
    //        MASKPAT               =>   MASKPAT,
    //        MCPAT                 =>   MCPAT,
    //
    //        MASKPATSEL            =>   ALU_MASKPATSEL,
    //        MCPATSEL              =>   ALU_MCPATSEL,
    //        CSIGN_EXT             =>   CSIGN_EXT,
    //        CSIGN_PRE             =>   CSIGN_PRE,
    //        SC_ALUEN              =>  (ALU_MODE == "DISABLE") ? 1'b0 : 1'b1,
    //        SEL_SYO               =>   SEL_SYO,
    //        SEL_SZO               =>   SEL_SZO,
    //        OR2CASCADE_EN         =>   OR2CASCADE_EN
    //    )
    //    port map
    //    (
    //        DXIA          =>   DXIA,
    //        DXIA_SIGNED   =>   DXIA_SIGNED,
    //        DYIA          =>   DYIA,
    //        DYIA_SIGNED   =>   DYIA_SIGNED,
    //        DZIA          =>   DZIA,
    //        DZIA_SIGNED   =>   DZIA_SIGNED,
    //
    //        DXIB          =>   DXIB,
    //        DXIB_SIGNED   =>   DXIB_SIGNED,
    //        DYIB          =>   DYIB,
    //        DYIB_SIGNED   =>   DYIB_SIGNED,
    //        DZIB          =>   DZIB,
    //        DZIB_SIGNED   =>   DZIB_SIGNED,
    //
    //        APM_OP_POST   =>   APM_OP_POST,
    //        APM_OP_IR     =>   APM_OP_IR,
    //        APM_OP_PRAD   =>   APM_OP_PRAD,
    //
    //        CLK           =>   CLK,
    //        CE            =>   CE,
    //        RST           =>   RST,
    //
    //        CYI           =>   CYI,
    //        CYI_SIGNED    =>   CYI_SIGNED,
    //        CYO           =>   CYO,
    //        CYO_SIGNED    =>   CYO_SIGNED,
    //
    //        CZI           =>   CZI,
    //        CZI_SIGNED    =>   CZI_SIGNED,
    //        CZO           =>   CZO,
    //        CZO_SIGNED    =>   CZO_SIGNED,
    //
    //        CPI           =>   CPI,
    //        CPI_SIGNED    =>   CPI_SIGNED,
    //        CPO           =>   CPO,
    //        CPO_SIGNED    =>   CPO_SIGNED,
    //        DPO           =>   DPO 
    //    );
    //    
    //device APM_INST APM_INST
    //    parameter map
    //    (
    //        IS_DUMMY_INST => "TRUE"
    //    )
    //    port map
    //    (
    //        DXIA_8_0            =>   DXIA[0],
    //        DXIA_17_9           =>   DXIA[9],
    //
    //        DYIA_8_0            =>   DYIA[0],
    //        DYIA_17_9           =>   DYIA[9],
    //
    //        DZIA_8_0            =>   DZIA[0],    
    //        DZIA_17_9           =>   DZIA[9],    
    //        DZIA_31_18          =>   DZIA[18],
    //
    //        DXIB_8_0            =>   DXIB[0],    
    //        DXIB_17_9           =>   DXIB[9],    
    //
    //        DYIB_8_0            =>   DYIB[0],    
    //        DYIB_17_9           =>   DYIB[9],    
    //
    //        DZIB_8_0            =>   DZIB[0],    
    //        DZIB_17_9           =>   DZIB[9],    
    //        DZIB_31_18          =>   DZIB[18],   
    //
    //        APM_OP_POST_10_0    =>   APM_OP_POST[0],
    //        APM_OP_IR_8_0       =>   APM_OP_IR[0],
    //        APM_OP_PRAD_1_0     =>   APM_OP_PRAD[0],
    //
    //        CYI_8_0             =>   CYI[0],
    //        CYI_17_9            =>   CYI[9],
    //        CYI_26_18           =>   CYI[18],
    //
    //        CYO_8_0             =>   CYO[0],
    //        CYO_17_9            =>   CYO[9],
    //        CYO_26_18           =>   CYO[18],
    //
    //        CZI_8_0             =>   CZI[0],
    //        CZI_17_9            =>   CZI[9],
    //        CZI_26_18           =>   CZI[18],
    //
    //        CZO_8_0             =>   CZO[0],
    //        CZO_17_9            =>   CZO[9],
    //        CZO_26_18           =>   CZO[18],
    //
    //        CPI_64_0            =>   CPI[0],
    //        CPO_64_0            =>   CPO[0],
    //        DPO_17_0            =>   DPO[0],
    //        DPO_36_18           =>   DPO[18],
    //        DPO_54_37           =>   DPO[37],
    //        DPO_73_55           =>   DPO[55]
    //    );
};
/*******************************************************************************

  Device    [APM]

  Author    [clwang]

  Abstract  [Configure the configuration bits based on the value of config parameter]

  Revision History:

********************************************************************************/
configuration cfg of APM
{
    SC_CLK_CTIR     :=  CLK_CTIR    ;
    SC_CE_CTIR      :=  CE_CTIR     ;
    SC_RST_CTIR     :=  RST_CTIR    ;
    SC_SYNC_CTIR    :=  SYNC_CTIR   ;
    SC_CTRL_IRBYP[0]:=  CTRL_IRBYP_0_OP0;
    SC_CTRL_IRBYP[1]:=  CTRL_IRBYP_1_OP7;
    SC_CTRL_IRBYP[2]:=  CTRL_IRBYP_2_OPA;
    SC_CTRL_IRBYP[3]:=  CTRL_IRBYP_3_OPB;
    SC_CTRL_IRBYP[4]:=  CTRL_IRBYP_4_OP8;


    SC_CLK_CTPR     :=  CLK_CTPR    ;
    SC_CE_CTPR      :=  CE_CTPR     ;
    SC_RST_CTPR     :=  RST_CTPR    ;
    SC_SYNC_CTPR    :=  SYNC_CTPR   ;
    SC_CTRL_PRBYP[0]:=  CTRL_PRBYP_0_OP0;
    SC_CTRL_PRBYP[1]:=  CTRL_PRBYP_1_OP7;
    SC_CTRL_PRBYP[2]:=  CTRL_PRBYP_2_OP8;


    SC_IR_BYP[0]    :=  IR_BYP_0_XA ;
    SC_IR_BYP[1]    :=  IR_BYP_1_XA ;
    SC_IR_BYP[2]    :=  IR_BYP_2_YA ;
    SC_IR_BYP[3]    :=  IR_BYP_3_YA ;
    SC_IR_BYP[4]    :=  IR_BYP_4_ZA ;
    SC_IR_BYP[5]    :=  IR_BYP_5_ZA ;
    SC_IR_BYP[6]    :=  IR_BYP_6_ZA ;
    SC_IR_BYP[7]    :=  IR_BYP_7_XB ;
    SC_IR_BYP[8]    :=  IR_BYP_8_XB ;
    SC_IR_BYP[9]    :=  IR_BYP_9_YB ;
    SC_IR_BYP[10]   :=  IR_BYP_10_YB;
    SC_IR_BYP[11]   :=  IR_BYP_11_ZB;
    SC_IR_BYP[12]   :=  IR_BYP_12_ZB;
    SC_IR_BYP[13]   :=  IR_BYP_13_ZB;
    SC_SYNC_IR[0]   :=  SYNC_IR_0_XA ;
    SC_SYNC_IR[1]   :=  SYNC_IR_1_XA ;
    SC_SYNC_IR[2]   :=  SYNC_IR_2_YA ;
    SC_SYNC_IR[3]   :=  SYNC_IR_3_YA ;
    SC_SYNC_IR[4]   :=  SYNC_IR_4_ZA ;
    SC_SYNC_IR[5]   :=  SYNC_IR_5_ZA ;
    SC_SYNC_IR[6]   :=  SYNC_IR_6_ZA ;
    SC_SYNC_IR[7]   :=  SYNC_IR_7_XB ;
    SC_SYNC_IR[8]   :=  SYNC_IR_8_XB ;
    SC_SYNC_IR[9]   :=  SYNC_IR_9_YB ;
    SC_SYNC_IR[10]  :=  SYNC_IR_10_YB;
    SC_SYNC_IR[11]  :=  SYNC_IR_11_ZB;
    SC_SYNC_IR[12]  :=  SYNC_IR_12_ZB;
    SC_SYNC_IR[13]  :=  SYNC_IR_13_ZB;
    SC_RST_IR[1:0]  :=  RST_IR_0_XA ;
    SC_RST_IR[3:2]  :=  RST_IR_1_XA ;
    SC_RST_IR[5:4]  :=  RST_IR_2_YA ;
    SC_RST_IR[7:6]  :=  RST_IR_3_YA ;
    SC_RST_IR[9:8]  :=  RST_IR_4_ZA ;
    SC_RST_IR[11:10] := RST_IR_5_ZA ;
    SC_RST_IR[13:12] := RST_IR_6_ZA ;
    SC_RST_IR[15:14] := RST_IR_7_XB ;
    SC_RST_IR[17:16] := RST_IR_8_XB ;
    SC_RST_IR[19:18] := RST_IR_9_YB ;
    SC_RST_IR[21:20] := RST_IR_10_YB;
    SC_RST_IR[23:22] := RST_IR_11_ZB;
    SC_RST_IR[25:24] := RST_IR_12_ZB;
    SC_RST_IR[27:26] := RST_IR_13_ZB;
    SC_CLK_IR[1:0]  :=  CLK_IR_0_XA ;
    SC_CLK_IR[3:2]  :=  CLK_IR_1_XA ;
    SC_CLK_IR[5:4]  :=  CLK_IR_2_YA ;
    SC_CLK_IR[7:6]  :=  CLK_IR_3_YA ;
    SC_CLK_IR[9:8]  :=  CLK_IR_4_ZA ;
    SC_CLK_IR[11:10] := CLK_IR_5_ZA ;
    SC_CLK_IR[13:12] := CLK_IR_6_ZA ;
    SC_CLK_IR[15:14] := CLK_IR_7_XB ;
    SC_CLK_IR[17:16] := CLK_IR_8_XB ;
    SC_CLK_IR[19:18] := CLK_IR_9_YB ;
    SC_CLK_IR[21:20] := CLK_IR_10_YB;
    SC_CLK_IR[23:22] := CLK_IR_11_ZB;
    SC_CLK_IR[25:24] := CLK_IR_12_ZB;
    SC_CLK_IR[27:26] := CLK_IR_13_ZB;
    SC_CE_IR[1:0]   :=  CE_IR_0_XA ;
    SC_CE_IR[3:2]   :=  CE_IR_1_XA ;
    SC_CE_IR[5:4]   :=  CE_IR_2_YA ;
    SC_CE_IR[7:6]   :=  CE_IR_3_YA ;
    SC_CE_IR[9:8]   :=  CE_IR_4_ZA ;
    SC_CE_IR[11:10] :=  CE_IR_5_ZA ;
    SC_CE_IR[13:12] :=  CE_IR_6_ZA ;
    SC_CE_IR[15:14] :=  CE_IR_7_XB ;
    SC_CE_IR[17:16] :=  CE_IR_8_XB ;
    SC_CE_IR[19:18] :=  CE_IR_9_YB ;
    SC_CE_IR[21:20] :=  CE_IR_10_YB;
    SC_CE_IR[23:22] :=  CE_IR_11_ZB;
    SC_CE_IR[25:24] :=  CE_IR_12_ZB;
    SC_CE_IR[27:26] :=  CE_IR_13_ZB;


    SC_PRADOR_BYP[0]  :=  PRADOR_BYP_0_XA;
    SC_PRADOR_BYP[1]  :=  PRADOR_BYP_1_XA;
    SC_PRADOR_BYP[2]  :=  PRADOR_BYP_2_YA;
    SC_PRADOR_BYP[3]  :=  PRADOR_BYP_3_YA;
    SC_PRADOR_BYP[4]  :=  PRADOR_BYP_4_XB;
    SC_PRADOR_BYP[5]  :=  PRADOR_BYP_5_XB;
    SC_PRADOR_BYP[6]  :=  PRADOR_BYP_6_YB;
    SC_PRADOR_BYP[7]  :=  PRADOR_BYP_7_YB;
    SC_SYNC_PRAD[0]   :=  SYNC_PRAD_0_XA;
    SC_SYNC_PRAD[1]   :=  SYNC_PRAD_1_XA;
    SC_SYNC_PRAD[2]   :=  SYNC_PRAD_2_YA;
    SC_SYNC_PRAD[3]   :=  SYNC_PRAD_3_YA;
    SC_SYNC_PRAD[4]   :=  SYNC_PRAD_4_XB;
    SC_SYNC_PRAD[5]   :=  SYNC_PRAD_5_XB;
    SC_SYNC_PRAD[6]   :=  SYNC_PRAD_6_YB;
    SC_SYNC_PRAD[7]   :=  SYNC_PRAD_7_YB;
    SC_RST_PRAD[1:0]   := RST_PRAD_0_XA;
    SC_RST_PRAD[3:2]   := RST_PRAD_1_XA;
    SC_RST_PRAD[5:4]   := RST_PRAD_2_YA;
    SC_RST_PRAD[7:6]   := RST_PRAD_3_YA;
    SC_RST_PRAD[9:8]   := RST_PRAD_4_XB;
    SC_RST_PRAD[11:10] := RST_PRAD_5_XB;
    SC_RST_PRAD[13:12] := RST_PRAD_6_YB;
    SC_RST_PRAD[15:14] := RST_PRAD_7_YB;
    SC_CLK_PRAD[1:0]   := CLK_PRAD_0_XA;
    SC_CLK_PRAD[3:2]   := CLK_PRAD_1_XA;
    SC_CLK_PRAD[5:4]   := CLK_PRAD_2_YA;
    SC_CLK_PRAD[7:6]   := CLK_PRAD_3_YA;
    SC_CLK_PRAD[9:8]   := CLK_PRAD_4_XB;
    SC_CLK_PRAD[11:10] := CLK_PRAD_5_XB;
    SC_CLK_PRAD[13:12] := CLK_PRAD_6_YB;
    SC_CLK_PRAD[15:14] := CLK_PRAD_7_YB;
    SC_CE_PRAD[1:0]   :=  CE_PRAD_0_XA;
    SC_CE_PRAD[3:2]   :=  CE_PRAD_1_XA;
    SC_CE_PRAD[5:4]   :=  CE_PRAD_2_YA;
    SC_CE_PRAD[7:6]   :=  CE_PRAD_3_YA;
    SC_CE_PRAD[9:8]   :=  CE_PRAD_4_XB;
    SC_CE_PRAD[11:10] :=  CE_PRAD_5_XB;
    SC_CE_PRAD[13:12] :=  CE_PRAD_6_YB;
    SC_CE_PRAD[15:14] :=  CE_PRAD_7_YB;


    SC_PR_BYP[0]    :=  PR_BYP_0_MA;
    SC_PR_BYP[1]    :=  PR_BYP_1_MA;
    SC_PR_BYP[2]    :=  PR_BYP_2_MB;
    SC_PR_BYP[3]    :=  PR_BYP_3_MB;
    SC_PR_BYP[4]    :=  PR_BYP_4_XA;
    SC_PR_BYP[5]    :=  PR_BYP_5_XB;
    SC_PR_BYP[6]    :=  PR_BYP_6_YA;
    SC_PR_BYP[7]    :=  PR_BYP_7_YB;
    SC_PR_BYP[8]    :=  PR_BYP_8_ZA;
    SC_PR_BYP[9]    :=  PR_BYP_9_ZB;
    SC_SYNC_PR[0]   :=  SYNC_PR_0_MA;
    SC_SYNC_PR[1]   :=  SYNC_PR_1_MA;
    SC_SYNC_PR[2]   :=  SYNC_PR_2_MB;
    SC_SYNC_PR[3]   :=  SYNC_PR_3_MB;
    SC_SYNC_PR[4]   :=  SYNC_PR_4_XA;
    SC_SYNC_PR[5]   :=  SYNC_PR_5_XB;
    SC_SYNC_PR[6]   :=  SYNC_PR_6_YA;
    SC_SYNC_PR[7]   :=  SYNC_PR_7_YB;
    SC_SYNC_PR[8]   :=  SYNC_PR_8_ZA;
    SC_SYNC_PR[9]   :=  SYNC_PR_9_ZB;
    SC_RST_PR[1:0]   := RST_PR_0_MA;
    SC_RST_PR[3:2]   := RST_PR_1_MA;
    SC_RST_PR[5:4]   := RST_PR_2_MB;
    SC_RST_PR[7:6]   := RST_PR_3_MB;
    SC_RST_PR[9:8]   := RST_PR_4_XA;
    SC_RST_PR[11:10] := RST_PR_5_XB;
    SC_RST_PR[13:12] := RST_PR_6_YA;
    SC_RST_PR[15:14] := RST_PR_7_YB;
    SC_RST_PR[17:16] := RST_PR_8_ZA;
    SC_RST_PR[19:18] := RST_PR_9_ZB;
    SC_CLK_PR[1:0]   := CLK_PR_0_MA;
    SC_CLK_PR[3:2]   := CLK_PR_1_MA;
    SC_CLK_PR[5:4]   := CLK_PR_2_MB;
    SC_CLK_PR[7:6]   := CLK_PR_3_MB;
    SC_CLK_PR[9:8]   := CLK_PR_4_XA;
    SC_CLK_PR[11:10] := CLK_PR_5_XB;
    SC_CLK_PR[13:12] := CLK_PR_6_YA;
    SC_CLK_PR[15:14] := CLK_PR_7_YB;
    SC_CLK_PR[17:16] := CLK_PR_8_ZA;
    SC_CLK_PR[19:18] := CLK_PR_9_ZB;
    SC_CE_PR[1:0]   :=  CE_PR_0_MA;
    SC_CE_PR[3:2]   :=  CE_PR_1_MA;
    SC_CE_PR[5:4]   :=  CE_PR_2_MB;
    SC_CE_PR[7:6]   :=  CE_PR_3_MB;
    SC_CE_PR[9:8]   :=  CE_PR_4_XA;
    SC_CE_PR[11:10] :=  CE_PR_5_XB;
    SC_CE_PR[13:12] :=  CE_PR_6_YA;
    SC_CE_PR[15:14] :=  CE_PR_7_YB;
    SC_CE_PR[17:16] :=  CE_PR_8_ZA;
    SC_CE_PR[19:18] :=  CE_PR_9_ZB;


    SC_OR_BYP[0]    :=  OR_BYP_0_A ;
    SC_OR_BYP[1]    :=  OR_BYP_1_A ;
    SC_OR_BYP[2]    :=  OR_BYP_2_B ;
    SC_OR_BYP[3]    :=  OR_BYP_3_B ;
    SC_SYNC_OR[0]   :=  SYNC_OR_0_A ;
    SC_SYNC_OR[1]   :=  SYNC_OR_1_A ;
    SC_SYNC_OR[2]   :=  SYNC_OR_2_B ;
    SC_SYNC_OR[3]   :=  SYNC_OR_3_B ;
    SC_RST_OR[1:0]  :=  RST_OR_0_A ;
    SC_RST_OR[3:2]  :=  RST_OR_1_A ;
    SC_RST_OR[5:4]  :=  RST_OR_2_B ;
    SC_RST_OR[7:6]  :=  RST_OR_3_B ;
    SC_CLK_OR[1:0]  :=  CLK_OR_0_A ;
    SC_CLK_OR[3:2]  :=  CLK_OR_1_A ;
    SC_CLK_OR[5:4]  :=  CLK_OR_2_B ;
    SC_CLK_OR[7:6]  :=  CLK_OR_3_B ;
    SC_CE_OR[1:0]   :=  CE_OR_0_A ;
    SC_CE_OR[3:2]   :=  CE_OR_1_A ;
    SC_CE_OR[5:4]   :=  CE_OR_2_B ;
    SC_CE_OR[7:6]   :=  CE_OR_3_B ;


    SC_OPCD_BYP     :=  OPCD_BYP     ;  // apm_op_ir[8:0]   0:registered 1:bypassed
    SC_OPCD_DYN_SEL :=  OPCD_DYN_SEL ;  // apm_op_post      0:static     1:dynamic
    SC_OPCD_DYN_POL :=  OPCD_DYN_POL ;  // apm_op_post      0:inverted   1:normal
    SC_OPCD         :=  OPCD         ;  //        post adder static opcode
    SC_OPCDPA_POL[0] := OP_PRAD_A_POL;  // apm_op_prad[1:0] 0:inverted   1:normal
    SC_OPCDPA_POL[1] := OP_PRAD_B_POL;

    SC_ASIGN_POL[0] := DXIA_SIGNED_POL; // polarity  0:inverted 1:normal
    SC_BSIGN_POL[0] := DYIA_SIGNED_POL; // polarity  0:inverted 1:normal
    SC_CSIGN_POL[0] := DZIA_SIGNED_POL; // polarity  0:inverted 1:normal
    SC_ASIGN_POL[1] := DXIB_SIGNED_POL; // polarity  0:inverted 1:normal
    SC_BSIGN_POL[1] := DYIB_SIGNED_POL; // polarity  0:inverted 1:normal
    SC_CSIGN_POL[1] := DZIB_SIGNED_POL; // polarity  0:inverted 1:normal

    SC_IRA_PSE0     :=  DXIA_PSE;   // XA
    SC_IRA_PSE1     :=  DXIB_PSE;   // XB
    SC_IRB_PSE0     :=  DYIA_PSE;   // YA
    SC_IRB_PSE1     :=  DYIB_PSE;   // YB
    SC_IRC_PSE[31:0]  :=  DZIA_PSE; // {ZB, ZA}
    SC_IRC_PSE[62:32] :=  DZIB_PSE; // {ZB, ZA}
    SC_PSE64        :=  PSE64   ;   // 0:18bits-PSE 1:64bits-PSE

    SC_SIGNED_ENA   :=  SIGNED_ENA;   // 0:normal-PSE 1:PSE-with-signed
    SC_SIGNED_ENB   :=  SIGNED_ENB;
    SC_SIGNED_ENC   :=  SIGNED_ENC;

    SC_CYSIGNED_SEL :=  CYSIGNED_SEL; // 0:from-bd0-output 1:from-bd1-output
    SC_CZSIGNED_SEL :=  CZSIGNED_SEL; // 0:from-IR0-output 1:from-IR1-output

    SC_CONST_IA1    :=  CONST_IA1 ;
    SC_CONST_IA0    :=  CONST_IA0 ;
    // DXIA/B data & signed input selector  0:from-CIM 1:constants(SC bits)
    // DYIA/B data & signed input selector  0:from-CIM 1:from-shift-input
    // DZIA/B data & signed input selector  0:from-CIM 1:from-shift-input
    SC_SOURCEA      :=  SOURCEA ;
    SC_SOURCEB      :=  SOURCEB ;
    SC_SOURCEC      :=  SOURCEC ;

    SC_IRDSEL_B     :=  IRDSEL_B         ;
    SC_IRDSEL_C     :=  IRDSEL_C         ;
    SC_DBYP_C       :=  DBYP_C           ;
    SC_IRB_SHFEN    :=  IRB_SHFEN        ;
    SC_IRC_SHFEN    :=  IRC_SHFEN        ;
    SC_IRSHF_B_SEL  :=  IRSHF_B_SEL      ;
    SC_IRSHF_C_SEL  :=  IRSHF_C_SEL      ;

    SC_CSIGN_EXT    :=  CSIGN_EXT        ;
    SC_CSIGN_PRE    :=  CSIGN_PRE        ;
    SC_SIGN_SELIR   :=  SIGN_SELIR       ;
    SC_CR64_SAB     :=  CR64_SAB         ;
    SC_SEL_SAB_CR27 :=  SEL_SAB_CR27     ;
    SC_SEL_SAB_CR59 :=  SEL_SAB_CR59     ;
    // CYO data & signed output to CIM  0:disabled 1:enabled
    // CZO data & signed output to CIM  0:disabled 1:enabled
    SC_SEL_SYO      :=  SEL_SYO ;
    SC_SEL_SZO      :=  SEL_SZO ;

    // preadder mode            0:disabled 1:enabled
    SC_PRAD_EN[0]   := (OP_PRAD_A != 0) ? 1'b1 : 1'b0 ;
    SC_PRAD_EN[1]   := (OP_PRAD_B != 0) ? 1'b1 : 1'b0 ;
    SC_PRAD27_EN    := (OP_PRAD_A == 27) ? 1'b1 : 1'b0 ;

    // multiplier mode          0:disabled 1:enabled
    SC_M9_MODE[0]   := (OP_MULT_A == 9) ? 1'b1 : 1'b0;
    SC_M9_MODE[1]   := (OP_MULT_B == 9) ? 1'b1 : 1'b0;
    SC_M19_MODE[0]  := (OP_MULT_A == 19) ? 1'b1 : 1'b0;
    SC_M19_MODE[1]  := (OP_MULT_B == 19) ? 1'b1 : 1'b0;
    SC_M27_MODE     := (OP_MULT_A == 27) ? 1'b1 : 1'b0;

    // post adder enable        0:disabled 1:enabled
    // post adder flag enable   0:disabled 1:enabled
    // mask bit selection       0:{DZIB,DZIA} 1:static-setting
    // mcpat bit selection      0:{DZIB,DZIA} 1:static-setting
    // mmc mode disable for flag calculate
    SC_ALUEN          :=  (ALU_MODE == "DISABLE") ? 1'b0 : 1'b1;
    SC_ALU_FLAGEN     :=  ALU_FLAGEN    ;
    SC_ALU_MASKPATSEL :=  ALU_MASKPATSEL;
    SC_ALU_MCPATSEL   :=  ALU_MCPATSEL  ;
    SC_MASK01         :=  MASK01        ;
    SC_MASKPAT        :=  MASKPAT       ;
    SC_MCPAT          :=  MCPAT         ;
    SC_MMC_DIS_C      :=  MMC_DIS_C     ;
    SC_RTI            :=  RTI           ;
    SC_TERNARY        :=  TERNARY       ;
    SC_OR2CIM_EN[0]   :=  OR2CIM_EN_0_A;
    SC_OR2CIM_EN[1]   :=  OR2CIM_EN_1_A;
    SC_OR2CIM_EN[2]   :=  OR2CIM_EN_2_B;
    SC_OR2CIM_EN[3]   :=  OR2CIM_EN_3_B;
    SC_OR2CASCADE_EN  :=  OR2CASCADE_EN;

    SC_GRS_DIS      :=  GRS_DIS ;
}; // end of configuration cfg of APM











