*****************************************************************

  Device    [HSST]

  Author    [xiawei]

  Abstract  []

  Revision History:

********************************************************************************/
grid
device HSST
{
    parameter
    (
        //********************  parameter -- pma_quad ********************  
        config  string PMA_QUAD_TURN_ON_BANDGAP_AT_AOS_ON = "FALSE",    // TRUE , FALSE
        config  string PMA_QUAD_TURN_ON_BANDGAP_AT_RX_DETECTION_ON  = "FALSE",    // TRUE , FALSE
        config  string PMA_QUAD_TURN_ON_BANDGAP_AT_BOUNDARY_SCAN_ON = "FALSE",    // TRUE , FALSE                               
        config  string PMA_QUAD_CFG_HSST_RSTN   = "FALSE",    // TRUE , FALSE                                                       
        config  string PMA_QUAD_SELECT_LANE_TCK_FOR_QUAD_SYNC   = "LANE0",     // LANE0,LANE1,LANE2,LANE3                               
        config  string PMA_QUAD_CK_REN  = "DISABLE",    // DISABLE , ENABLE                                                         
        config  string PMA_QUAD_C1_EN   = "DISABLE",    // DISABLE , ENABLE                                                         
        config  string PMA_QUAD_C2_EN   = "DISABLE",    // DISABLE , ENABLE                                                         
        config  int PMA_QUAD_CLK_DIVIDER_SETTING_FROM_25M_TO_200K    = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11       
        config  string PMA_QUAD_ACMODE_SCANMODE_EN  = "DISABLE",    // DISABLE , ENABLE                                             
        config  string PMA_QUAD_REGISTER_ACMODE = "FALSE",    // TRUE , FALSE                                                   
        config  string PMA_QUAD_REGISTER_SCANMODE   = "FALSE",    // TRUE , FALSE                                                   
        config  string PMA_QUAD_REFCK2CORE_EN   = "DISABLE",    // DISABLE , ENABLE                                                 
        config  string PMA_QUAD_REG_EN  = "DISABLE",    // DISABLE , ENABLE                                                         
        config  string PMA_QUAD_REGR    = "100MV",      // 100MV, 75MV, 50MV, 25MV, 0MV                                             
        config  string PMA_QUAD_REGL    = "100MV",      // 100MV, 75MV, 50MV, 25MV, 0MV                                             
        config  int PMA_QUAD_DPCK_SEL    = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11                                   
        config  string PMA_QUAD_TX_REFCK_SEL    = "FALSE",    // TRUE , FALSE                                                       
        config  string PMA_QUAD_REFCK_SRC_SEL   = "FALSE",    // TRUE , FALSE                                                       
        config  string PMA_QUAD_RREFCK_PWRUP    = "FALSE",    // TRUE , FALSE                                                               
        config  string PMA_QUAD_REFCK_SK_SEL       = "BOTH",    // BOTH, UP, DOWN, NONE                                                                                                        
        config  string PMA_QUAD_REFCK_DIV2_SEL  = "FALSE",    // TRUE , FALSE                                                       
        config  string PMA_QUAD_REFCK_TO_NQ_EN  = "DISABLE",    // DISABLE , ENABLE                                                 
        config  string PMA_QUAD_AUXI_ADJ    = "100PCT",      //  100PCT , 111PCT , 125PCT , 143PCT , 71PCT , 77PCT , 83PCT ,91PCT                 
        config  string PMA_QUAD_DC496   = "39_6MHZ",        // 5MHZ, 8MHZ, 11_5MHZ, 20_6MHZ, 39_6MHZ                                  
        config  int PMA_QUAD_REG_FDET_TIMER  = 512,        // 256, 512 , 1024 , 2048                                           
        config  string PMA_QUAD_FREQ_LKO    = "10PCT",    // 1PCT , 2PCT , 5PCT , 10PCT                                                        
        config  string PMA_QUAD_FREQ_LKI    = "10PCT",    // 1PCT , 2PCT , 5PCT , 10PCT                                                                
        config  string PMA_QUAD_CLOCK_SRC_SEL    = "LOCAL",    // LOCAL, NEIGHBOR                                   
        config  string PMA_QUAD_FRE_DET_EN  = "DISABLE",    // DISABLE , ENABLE                                                     
        config  int    PMA_QUAD_TSO_LS_SEL  = 0,        // 0 to 127                                                         
        config  string PMA_QUAD_TXPLL_START = "FALSE",    // TRUE , FALSE                                                       
        config  int PMA_QUAD_VCODIV  = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11                                       
        config  int    PMA_QUAD_LC_BAND = 0,        // 0 to 31                                                          
        config  string PMA_QUAD_SET_VCO_HI  = "FALSE",    // TRUE , FALSE                                                           
        config  string PMA_QUAD_SET_VCO_LO  = "FALSE",    // TRUE , FALSE                                                           
        config  string PMA_QUAD_CALIB_FAIL  = "FALSE",    // TRUE , FALSE                                                           
        config  string PMA_QUAD_CALIB_DONE  = "FALSE",    // TRUE , FALSE                                                           
        config  string PMA_QUAD_BIST_DONE   = "FALSE",    // TRUE , FALSE                                                           
        config  string PMA_QUAD_TOTRANGE_FAIL   = "FALSE",    // TRUE , FALSE                                                       
        config  string PMA_QUAD_SUBRANGE_FAIL   = "FALSE",    // TRUE , FALSE                                                       
        config  string PMA_QUAD_OVLP_FAIL   = "FALSE",    // TRUE , FALSE                                                           
        config  string PMA_QUAD_TXPLL_LOCK  = "FALSE",    // TRUE , FALSE                                                           
        config  string PMA_QUAD_TXPLL_LOOP_ENABLE   = "DISABLE",    // DISABLE , ENABLE                                             
        config  int PMA_QUAD_TXPLL_DIVSEL_REF_STA    = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11                       
        config  string PMA_QUAD_TXPLL_DIVSEL45_FB_STA   = "FALSE",    // TRUE , FALSE                                               
        config  int    PMA_QUAD_TXPLL_DIVSEL_FB_STA = 0,        // 0 to 7                                               
        config  string PMA_QUAD_TXPLL_DIVSEL45_FB   = "FALSE",    // TRUE , FALSE                                                   
        config  int    PMA_QUAD_TXPLL_DIVSEL_FB = 0,        // 0 to 7                                                   
        config  int PMA_QUAD_TXPLL_DIVSEL_REF    = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11                           
        config  string PMA_QUAD_REG_DISABLE_HOLDCLK = "DISABLE",    // DISABLE , ENABLE                                         
        config  string PMA_QUAD_REG_DISABLE_SYNC    = "DISABLE",    // DISABLE , ENABLE                                             
        config  string PMA_QUAD_FORCE_OUTPUT_PLL_LOCK   = "FALSE",    // TRUE , FALSE                                               
        config  string PMA_QUAD_REGISTER_SET_SYNCTCK_SEL_ENABLE = "DISABLE",    // DISABLE , ENABLE                             
        config  string PMA_QUAD_REG_SET_SYNCTCK_SEL = "LANE0",     // LANE0,LANE1,LANE2,LANE3                                      
        config  string PMA_QUAD_CK4TEST_OUTPUT_ENABLE   = "DISABLE",    // DISABLE , ENABLE                                         
        config  string PMA_QUAD_RSTGENBAS   = "100PCT",    // 100PCT , 83PCT , 133PCT , 117PCT                                                 
        config  string PMA_QUAD_LCBUFBAS    = "100PCT",    // 100PCT , 83PCT , 133PCT , 117PCT                                                
        config  string PMA_QUAD_REGISTER_SET_CPCUR_ENABEL   = "DISABLE",    // DISABLE , ENABLE                                     
       config  int    PMA_QUAD_REG_SET_CPCUR    = 0,        // 0 to 31                                                      
       config  string PMA_QUAD_CPBAS    = "100PCT",       // 100PCT , 83PCT , 133PCT , 117PCT                      
       config  string PMA_QUAD_LCOBAS   = "100PCT",       // 100PCT , 83PCT , 133PCT , 117PCT                                                    
       config  string  PMA_QUAD_LCCUR   = "DEFAULT",        //  default , -1mA , +2mA , +1mA , +4mA , +3mA , +6mA ,+5mA             
       config  string PMA_QUAD_ENABLE_REGISTER_SETTING_BAND = "DISABLE",    // DISABLE , ENABLE                                 
       config  int PMA_QUAD_CALIB_WAIT   = 1024,       // 1024 , 2048 , 4096 , 512                                             
       config  int PMA_QUAD_CALIB_TIMER  = 512,        // 512 , 1024 , 2048 , 4096                                         
       config  int PMA_QUAD_TOT_RANGE    = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11                                   
       config  int PMA_QUAD_SUB_RANGE    = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11                                   
       config  int PMA_QUAD_OVLP = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11                                       
       config  int PMA_QUAD_BIST_WAIT    = 1024,       // 1024 , 2048 , 4096 , 512                                             
       config  int PMA_QUAD_BIST_TIMER   = 512,        // 512 , 1024 , 2048 , 4096                                             
       config  int    PMA_QUAD_BAND_LB  = 0,        // 0 to 7                                                           
       config  int    PMA_QUAD_BAND_HB  = 0,        // 0 to 31                                                          
       config  int  PMA_QUAD_FREQ_LOCK_ACCURACY  = 0,        //  000 , 001 , 010 , 011 , 100 , 101 , 110 , 111               
       config  int     PMA_QUAD_REG_SET_LC_BAND = 0,        // 0 to 31                                                  
       config  int  PMA_QUAD_REG_SET_VCODIV  = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11                               
       config  string  PMA_QUAD_REGISTER_SET_VCODIV_BAND_ENABLE = "DISABLE",    // DISABLE , ENABLE                             
       config  string  PMA_QUAD_REG_SET_PLL_LOCK    = "FALSE",    // TRUE , FALSE                                                   
       config  string  PMA_QUAD_REGISTER_SET_PLL_LOCK_ENABLE    = "DISABLE",    // DISABLE , ENABLE                                 
       config  string  PMA_QUAD_REG_SET_VCO_HI  = "FALSE",    // TRUE , FALSE                                                       
       config  string  PMA_QUAD_REG_SET_VCO_LO  = "FALSE",    // TRUE , FALSE                                                       
       config  string  PMA_QUAD_REGISTER_SET_VCO_HI_VCO_LO_ENABLE   = "DISABLE",    // DISABLE , ENABLE                             
       config  string  PMA_QUAD_FORCE_LC_PLL_LOOP_EN    = "DISABLE",    // DISABLE , ENABLE                                         
       config  string  PMA_QUAD_VCO_DIV_CALI_BYPASS = "FALSE",    // TRUE , FALSE                                               
       config  string  PMA_QUAD_BIST_EN = "DISABLE",    // DISABLE , ENABLE                                                     
       config  string  PMA_QUAD_ENABLE_TXPLL_BIST_BLOCK_CLOCKS  = "DISABLE",    // DISABLE , ENABLE 
       config  string  PMA_QUAD_LF_TESTBY2     = "DISABLE",    // DISABLE , ENABLE                            
       config  int  PMA_QUAD_REG_SET_DIVSEL_REF  = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11                           
       config  string  PMA_QUAD_REG_SET_DIVSEL45_FB = "FALSE",    // TRUE , FALSE                                               
       config  int     PMA_QUAD_REG_SET_DIVSEL_FB   = 0,        // 0 to 7                                                   
       config  string  PMA_QUAD_LF_TEST_EN     = "DISABLE",    // DISABLE , ENABLE                                         
       config  string  PMA_QUAD_REGISTER_SET_TXPLL_DIV_ENABLE   = "DISABLE",    // DISABLE , ENABLE                                 
       config  string  PMA_QUAD_FORCE_TXPLL_RESET   = "FALSE",    // TRUE , FALSE                                                   
       config  string  PMA_QUAD_FORCE_TXPLL_ON  = "FALSE",    // TRUE , FALSE                                                       
       //********************  parameter -- pcs_ch0 ********************
        config  string PCS_CH0_BYPASS_WORD_ALIGN    = "FALSE",      // 0,1
        config  string PCS_CH0_BYPASS_DENC  = "FALSE",      // 0,1
        config  string PCS_CH0_BYPASS_BONDING   = "FALSE",      // 0,1
        config  string PCS_CH0_BYPASS_CTC   = "FALSE",      // 0,1
        config  string PCS_CH0_BYPASS_GEAR  = "FALSE",      // 0,1
        config  string PCS_CH0_BYPASS_BRIDGE    = "FALSE",      // 0,1
        config  string PCS_CH0_DATA_MODE    = "X8",     // 8bit,10bit,16bit,20bit
        config  string PCS_CH0_RX_POLARITY_INV  = "DELAY",      // 00: delay 01: bit polarity inversion 10: bit reversal 11: polarity inversion and bit reversal
        config  string PCS_CH0_ALIGN_MODE   = "1GB",        // 1gb,10gb,RapidIO,outside
        config  string PCS_CH0_SAMP_16B = "X16",        // 16bit,20bit
       config  int PCS_CH0_COMMA_REG0 = 0,      // 
       config  int PCS_CH0_COMMA_MASK = 0,      // 
       config  string PCS_CH0_CEB_MODE = "10GB",        // 10gb,RapidIO,outside
       config  string PCS_CH0_CTC_MODE = "1SKIP",       // 00: add or del 1 skip,01: add or del 2 skips,10: reserved ,11:4 skips
       config  int PCS_CH0_A_REG = 0,       // 
       config  string       PCS_CH0_GE_AUTO_EN = "FALSE",       // CTC,0,1
       config  int   PCS_CH0_SKIP_REG0 = 0,     // 
       config  int   PCS_CH0_SKIP_REG1 = 0,     // 
       config  int   PCS_CH0_SKIP_REG2 = 0,     // 
       config  int   PCS_CH0_SKIP_REG3 = 0,     // 
       config  string  PCS_CH0_DEC_DUAL = "FALSE",      // signal for 8b10b decoder module
       config  string  PCS_CH0_SPLIT = "FALSE",     // signal for RX GEAR split, 1:split  0:no split, 
       config  string  PCS_CH0_FIFOFLAG_CTC = "FALSE",      // 0,1
       config  string  PCS_CH0_COMMA_DET_MODE = "COMMA_PATTERN",        // 0: comma pattern mode  1: RX_CLK_SLIP mode 
       config  string  PCS_CH0_ERRDETECT_SILENCE = "FALSE",     // 0: comma pattern mode  1: RX_CLK_SLIP mode 
       config  string  PCS_CH0_PMA_RCLK_POLINV = "PMA_RCLK",        // 1'b0:pma_rclk 1'b1:reverse of pma_rclk
       config  string  PCS_CH0_PCS_RCLK_SEL = "PMA_RCLK",       // 1'b0:pma_rclk,1'b1:pma_tclk,
       config  string  PCS_CH0_MCB_RCLK_POLINV = "MCB_RCLK",        // 1'b0:mcb_rclk 1'b1:reverse of mcb_rclk
       config  string  PCS_CH0_CB_RCLK_SEL = "PMA_RCLK",        // 2'b00:pma_rclk,2'b01:pma_tclk,2'b10:mcb_rclk,2'b11:reserved
       config  string  PCS_CH0_AFTER_CTC_RCLK_SEL = "PMA_RCLK",     // 2'b00:pma_rclk,2'b01:pma_tclk,2'b10:mcb_rclk,2'b11:reserved
       config  string  PCS_CH0_RCLK_POLINV = "RCLK",        // 1'b0:rclk 1'b1:reverse of rclk
       config  string  PCS_CH0_BRIDGE_RCLK_SEL = "PMA_RCLK",        // 2'b00:pma_rclk,2'b01:pma_tclk,2'b10:mcb_rclk,2'b11:rclk
       config  string  PCS_CH0_PCS_RCLK_EN = "FALSE",       // 0,1
       config  string  PCS_CH0_CB_RCLK_EN = "FALSE",        // 0,1
       config  string  PCS_CH0_AFTER_CTC_RCLK_EN = "FALSE",     // 0,1
       config  string  PCS_CH0_AFTER_CTC_RCLK_EN_GB = "FALSE",      // 0,1
       config  string  PCS_CH0_BRIDGE_RCLK_EN = "FALSE",        // 0,1
       config  string  PCS_CH0_PCS_RX_RSTN = "FALSE",       // 1:pcs_rx_rstn is valued,is 0,0:pcs_rx_rstn is released
       config  string  PCS_CH0_SLAVE = "MASTER",        // 1:slave channel 0:master channel
       config  string  PCS_CH0_PCIE_SLAVE = "MASTER",        // 1:slave channel 0:master channel
       config  string  PCS_CH0_PCS_CB_RSTN = "FALSE",       // 1: pcs_cb_rstn is valued,is 0,0: pcs_cb_rstn is released
       config  string  PCS_CH0_TX_BYPASS_BRIDGE_UINT    = "FALSE",      // 0,1
       config  string  PCS_CH0_TX_BYPASS_GEAR   = "FALSE",      // 0,1
       config  string  PCS_CH0_TX_BYPASS_ENC    = "FALSE",      // 0,1
       config  string  PCS_CH0_TX_BYPASS_BIT_SLIP   = "FALSE",      // 0,1
       config  string  PCS_CH0_TX_GEAR_SPLIT    = "FALSE",      // 1:spilt 44bits data to 22bits data,0: no spilt
       config  string  PCS_CH0_TX_DRIVE_REG_MODE    = "NO_CHANGE",      // 00:no change, 01:enable polarity reverse,10:enable bit reverse, 11:enable both
       config  int     PCS_CH0_TX_BIT_SLIP_CYCLES = 0,      // 
       config  string PCS_CH0_INT_TX_MASK_0 = "FALSE",      // 0,1  active high to mask int triggered by tx_bridge_unit async fifo overflow
       config  string PCS_CH0_INT_TX_MASK_1 = "FALSE",      // 0,1  active high to mask int triggered by tx bridge unit underflow,
       config  string PCS_CH0_INT_TX_MASK_2 = "FALSE",      // 0,1  active high to mask int triggered by tx_invalid_k 
       config  string PCS_CH0_INT_TX_CLR_0 = "FALSE",       // 0,1  active high to clr int triggered by tx bridge unit overflow,
       config  string PCS_CH0_INT_TX_CLR_1 = "FALSE",       // 0,1  active high to clr int triggered by tx_bridge_unit async fifo underflow
       config  string PCS_CH0_INT_TX_CLR_2 = "FALSE",       // 0,1  active high to clr int triggered by tx_invalid_k
       config  string PCS_CH0_TX_PMA_TCLK_POLINV = "PMA_TCLK",      // 1'b0:pma_tclk 1'b1:reverse of pma_tclk
       config  string PCS_CH0_TX_PCS_CLK_EN_SEL = "FALSE",      // 0,1
       config  string PCS_CH0_TX_BRIDGE_TCLK_SEL = "PCS_TCLK",      // 1'b0: pcs_tclk 1'b1:tclk
       config  string PCS_CH0_TX_TCLK_POLINV = "TCLK",      // 1'b0:tclk 1'b1:reverse of tclk
       config  string PCS_CH0_TX_PCS_TX_RSTN = "FALSE",     // 1:pcs_tx_rstn is valued,is 0,0:pcs_tx_rstn is released
       config  string PCS_CH0_TX_SLAVE = "SLAVE",       // 1:slave channel,0:master channel
       config  string PCS_CH0_TX_BRIDGE_CLK_EN_SEL = "FALSE",       // 0,1
       config  string PCS_CH0_DATA_WIDTH_MODE   = "X20",        // 20bit,16bit,10bit,8bit
       config  string PCS_CH0_TX_TCLK2FABRIC_SEL = "FALSE",     // 0,1
       config  string PCS_CH0_TX_OUTZZ = "FALSE",       // 1:16bit/32bit only,0:20bit/40bit only
       config  string PCS_CH0_ENC_DUAL = "FALSE",       // 0,1
       config  string PCS_CH0_TX_BITSLIP_DATA_MODE = "X10",     // 1: 20bit,0: 10bit
       config  int  PCS_CH0_COMMA_REG1 = 0,     // 
       config  int  PCS_CH0_RAPID_IMAX = 0,     // 
       config  int  PCS_CH0_RAPID_VMIN_1 = 0,       // 
       config  int  PCS_CH0_RAPID_VMIN_2 = 0,       // 
       config  string PCS_CH0_RX_PRBS_MODE = "DISABLE",      // Mode select:4'd0: reserved,4'd1: PRBS-7,4'd2: PRBS-15,4'd3: PRBS-23,4'd4: PRBS-31,4'd5: long "TRUE",4'd6: long "FALSE",4'd7: 20UI square wave,4'd8: D10_2,4'd9: PCIe complianece pattern,Others: reserved
       config  string PCS_CH0_RX_ERRCNT_CLR = "FALSE",      // 0,1
       config  string PCS_CH0_TX_PRBS_MODE = "DISABLE",      // Mode select:4'd0: reserved,4'd1: PRBS-7,4'd2: PRBS-15,4'd3: PRBS-23,4'd4: PRBS-31,4'd5: long "TRUE",4'd6: long "FALSE",4'd7: 20UI square wave,4'd8: D10_2,4'd9: PCIe complianece pattern,Others: reserved
       config  string PCS_CH0_TX_INSERT_ER = "FALSE",       // 0,1
       config  string PCS_CH0_ENABLE_PRBS_GEN = "FALSE",        // 0,1
       config  int PCS_CH0_ERR_CNT = 0,     // 
       config  int PCS_CH0_DEFAULT_RADDR = 0,       // 
       config  int PCS_CH0_MASTER_CHECK_OFFSET = 0,     // 
       config  int PCS_CH0_DELAY_SET = 0,       // 
       config  string PCS_CH0_SEACH_OFFSET = "20BIT",       // 20bit,30bit,40bit,50bit,60bit,70bit
       config  int PCS_CH0_CEB_RAPIDLS_MMAX = 0,        // 
       config  int PCS_CH0_CTC_AFULL = 0,       // 
       config  int PCS_CH0_CTC_AEMPTY = 0,      // 
        config  string PCS_CH0_FAR_LOOP = "FALSE",      // 0,1
        config  string PCS_CH0_NEAR_LOOP = "FALSE",     // 0,1
        config  string PCS_CH0_INT_RX_MASK_0 = "FALSE",     // 0,1  active high to mask int triggered by pcs_lsm_synced
        config  string PCS_CH0_INT_RX_MASK_1 = "FALSE",     // 0,1  active high to mask int triggered by pcs_rx_mcb_status
        config  string PCS_CH0_INT_RX_MASK_2 = "FALSE",     // 0,1  active high to mask int triggered by channel bonding async fifo overflow
        config  string PCS_CH0_INT_RX_MASK_3 = "FALSE",     // 0,1  active high to mask int triggered by channel bonding async fifo underflow
        config  string PCS_CH0_INT_RX_MASK_4 = "FALSE",     // 0,1  active high to mask int triggered by ctc unit async fifo overflow
        config  string PCS_CH0_INT_RX_MASK_5 = "FALSE",     // 0,1  active high to mask int triggered by ctc unit async fifo underflow
        config  string PCS_CH0_INT_RX_MASK_6 = "FALSE",     // 0,1  active high to mask int triggered by rx_bridge_unit async fifo overflow
        config  string PCS_CH0_INT_RX_MASK_7 = "FALSE",     // 0,1  active high to mask int triggered by rx_bridge_unit async fifo underflow
        config  string PCS_CH0_INT_RX_CLR_0 = "FALSE",      // 0,1  active high to clr int triggered by pcs_lsm_synced
        config  string PCS_CH0_INT_RX_CLR_1 = "FALSE",      // 0,1  active high to clr int triggered by pcs_rx_mcb_status
        config  string PCS_CH0_INT_RX_CLR_2 = "FALSE",      // 0,1  active high to clr int triggered by channel bonding async fifo overflow
        config  string PCS_CH0_INT_RX_CLR_3 = "FALSE",      // 0,1  active high to clr int triggered by channel bonding async fifo underflow
        config  string PCS_CH0_INT_RX_CLR_4 = "FALSE",      // 0,1  active high to clr int triggered by ctc unit async fifo overflow
        config  string PCS_CH0_INT_RX_CLR_5 = "FALSE",      // 0,1  active high to clr int triggered by ctc unit async fifo underflow
        config  string PCS_CH0_INT_RX_CLR_6 = "FALSE",      // 0,1  active high to clr int triggered by rx_bridge_unit async fifo overflow
        config  string PCS_CH0_INT_RX_CLR_7 = "FALSE",      // 0,1  active high to clr int triggered by rx_bridge_unit async fifo underflow
        //********************  parameter -- pcs_ch1 ********************
        config  string PCS_CH1_BYPASS_WORD_ALIGN    = "FALSE",      // 0,1
        config  string PCS_CH1_BYPASS_DENC  = "FALSE",      // 0,1
        config  string PCS_CH1_BYPASS_BONDING   = "FALSE",      // 0,1
        config  string PCS_CH1_BYPASS_CTC   = "FALSE",      // 0,1
        config  string PCS_CH1_BYPASS_GEAR  = "FALSE",      // 0,1
        config  string PCS_CH1_BYPASS_BRIDGE    = "FALSE",      // 0,1
        config  string PCS_CH1_DATA_MODE    = "X8",     // 8bit,10bit,16bit,20bit
        config  string PCS_CH1_RX_POLARITY_INV  = "DELAY",      // 00: delay 01: bit polarity inversion 10: bit reversal 11: polarity inversion and bit reversal
        config  string PCS_CH1_ALIGN_MODE   = "1GB",        // 1gb,10gb,RapidIO,outside
        config  string PCS_CH1_SAMP_16B = "X16",        // 16bit,20bit
       config  int PCS_CH1_COMMA_REG0 = 0,      // 
       config  int PCS_CH1_COMMA_MASK = 0,      // 
       config  string PCS_CH1_CEB_MODE = "10GB",        // 10gb,RapidIO,outside
       config  string PCS_CH1_CTC_MODE = "1SKIP",       // 00: add or del 1 skip,01: add or del 2 skips,10: reserved ,11:4 skips
       config  int PCS_CH1_A_REG = 0,       // 
       config  string PCS_CH1_GE_AUTO_EN = "FALSE",     // CTC,0,1
      config  int  PCS_CH1_SKIP_REG0 = 0,       // 
      config  int  PCS_CH1_SKIP_REG1 = 0,       // 
      config  int  PCS_CH1_SKIP_REG2 = 0,       // 
      config  int  PCS_CH1_SKIP_REG3 = 0,       // 
     config  string   PCS_CH1_DEC_DUAL = "FALSE",       // signal for 8b10b decoder module
     config  string   PCS_CH1_SPLIT = "FALSE",      // signal for RX GEAR split, 1:split  0:no split, 
     config  string   PCS_CH1_FIFOFLAG_CTC = "FALSE",       // 0,1
     config  string   PCS_CH1_COMMA_DET_MODE = "COMMA_PATTERN",     // 0: comma pattern mode  1: RX_CLK_SLIP mode 
     config  string   PCS_CH1_ERRDETECT_SILENCE = "FALSE",      // 0: comma pattern mode  1: RX_CLK_SLIP mode 
     config  string   PCS_CH1_PMA_RCLK_POLINV = "PMA_RCLK",     // 1'b0:pma_rclk 1'b1:reverse of pma_rclk
     config  string   PCS_CH1_PCS_RCLK_SEL = "PMA_RCLK",        // 1'b0:pma_rclk,1'b1:pma_tclk,
     config  string   PCS_CH1_MCB_RCLK_POLINV = "MCB_RCLK",     // 1'b0:mcb_rclk 1'b1:reverse of mcb_rclk
     config  string   PCS_CH1_CB_RCLK_SEL = "PMA_RCLK",     // 2'b00:pma_rclk,2'b01:pma_tclk,2'b10:mcb_rclk,2'b11:reserved
     config  string   PCS_CH1_AFTER_CTC_RCLK_SEL = "PMA_RCLK",      // 2'b00:pma_rclk,2'b01:pma_tclk,2'b10:mcb_rclk,2'b11:reserved
     config  string   PCS_CH1_RCLK_POLINV = "RCLK",     // 1'b0:rclk 1'b1:reverse of rclk
     config  string   PCS_CH1_BRIDGE_RCLK_SEL = "PMA_RCLK",     // 2'b00:pma_rclk,2'b01:pma_tclk,2'b10:mcb_rclk,2'b11:rclk
     config  string   PCS_CH1_PCS_RCLK_EN = "FALSE",        // 0,1
     config  string   PCS_CH1_CB_RCLK_EN = "FALSE",     // 0,1
     config  string   PCS_CH1_AFTER_CTC_RCLK_EN = "FALSE",      // 0,1
     config  string   PCS_CH1_AFTER_CTC_RCLK_EN_GB = "FALSE",       // 0,1
     config  string   PCS_CH1_BRIDGE_RCLK_EN = "FALSE",     // 0,1
     config  string   PCS_CH1_PCS_RX_RSTN = "FALSE",        // 1:pcs_rx_rstn is valued,is 0,0:pcs_rx_rstn is released
     config  string   PCS_CH1_SLAVE = "MASTER",     // 1:slave channel 0:master channel
     config  string   PCS_CH1_PCIE_SLAVE = "MASTER",        // 1:slave channel 0:master channel
     config  string   PCS_CH1_PCS_CB_RSTN = "FALSE",        // 1: pcs_cb_rstn is valued,is 0,0: pcs_cb_rstn is released
     config  string   PCS_CH1_TX_BYPASS_BRIDGE_UINT = "FALSE",      // 0,1
     config  string   PCS_CH1_TX_BYPASS_GEAR    = "FALSE",      // 0,1
     config  string   PCS_CH1_TX_BYPASS_ENC = "FALSE",      // 0,1
     config  string   PCS_CH1_TX_BYPASS_BIT_SLIP    = "FALSE",      // 0,1
     config  string   PCS_CH1_TX_GEAR_SPLIT = "FALSE",      // 1:spilt 44bits data to 22bits data,0: no spilt
     config  string   PCS_CH1_TX_DRIVE_REG_MODE = "NO_CHANGE",      // 00:no change, 01:enable polarity reverse,10:enable bit reverse, 11:enable both
     config int  PCS_CH1_TX_BIT_SLIP_CYCLES = 0,        // 
     config  string  PCS_CH1_INT_TX_MASK_0 = "FALSE",       // 0,1  active high to mask int triggered by tx_bridge_unit async fifo overflow
     config  string PCS_CH1_INT_TX_MASK_1 = "FALSE",        // 0,1  active high to mask int triggered by tx bridge unit underflow,
     config  string PCS_CH1_INT_TX_MASK_2 = "FALSE",        // 0,1  active high to mask int triggered by tx_invalid_k 
     config  string PCS_CH1_INT_TX_CLR_0 = "FALSE",     // 0,1  active high to clr int triggered by tx bridge unit overflow,
     config  string PCS_CH1_INT_TX_CLR_1 = "FALSE",     // 0,1  active high to clr int triggered by tx_bridge_unit async fifo underflow
     config  string PCS_CH1_INT_TX_CLR_2 = "FALSE",     // 0,1  active high to clr int triggered by tx_invalid_k
     config  string  PCS_CH1_TX_PMA_TCLK_POLINV = "PMA_TCLK",       // 1'b0:pma_tclk 1'b1:reverse of pma_tclk
     config  string  PCS_CH1_TX_PCS_CLK_EN_SEL = "FALSE",       // 0,1
     config  string  PCS_CH1_TX_BRIDGE_TCLK_SEL = "PCS_TCLK",       // 1'b0: pcs_tclk 1'b1:tclk
     config  string  PCS_CH1_TX_TCLK_POLINV = "TCLK",       // 1'b0:tclk 1'b1:reverse of tclk
     config  string  PCS_CH1_TX_PCS_TX_RSTN = "FALSE",      // 1:pcs_tx_rstn is valued,is 0,0:pcs_tx_rstn is released
     config  string  PCS_CH1_TX_SLAVE = "SLAVE",        // 1:slave channel,0:master channel
     config  string  PCS_CH1_TX_BRIDGE_CLK_EN_SEL = "FALSE",        // 0,1
     config  string  PCS_CH1_DATA_WIDTH_MODE    = "X20",        // 20bit,16bit,10bit,8bit
     config  string  PCS_CH1_TX_TCLK2FABRIC_SEL = "FALSE",      // 0,1
     config  string  PCS_CH1_TX_OUTZZ = "FALSE",        // 1:16bit/32bit only,0:20bit/40bit only
     config  string  PCS_CH1_ENC_DUAL = "FALSE",        // 0,1
     config  string  PCS_CH1_TX_BITSLIP_DATA_MODE = "X10",      // 1: 20bit,0: 10bit
     config  int PCS_CH1_COMMA_REG1 = 0,        // 
     config  int PCS_CH1_RAPID_IMAX = 0,        // 
     config  int PCS_CH1_RAPID_VMIN_1 = 0,      // 
     config  int PCS_CH1_RAPID_VMIN_2 = 0,      // 
     config  string   PCS_CH1_RX_PRBS_MODE = "DISABLE",      // Mode select:4'd0: reserved,4'd1: PRBS-7,4'd2: PRBS-15,4'd3: PRBS-23,4'd4: PRBS-31,4'd5: long "TRUE",4'd6: long "FALSE",4'd7: 20UI square wave,4'd8: D10_2,4'd9: PCIe complianece pattern,Others: reserved
     config  string   PCS_CH1_RX_ERRCNT_CLR = "FALSE",      // 0,1
     config  string   PCS_CH1_TX_PRBS_MODE = "DISABLE",      // Mode select:4'd0: reserved,4'd1: PRBS-7,4'd2: PRBS-15,4'd3: PRBS-23,4'd4: PRBS-31,4'd5: long "TRUE",4'd6: long "FALSE",4'd7: 20UI square wave,4'd8: D10_2,4'd9: PCIe complianece pattern,Others: reserved
     config  string   PCS_CH1_TX_INSERT_ER = "FALSE",       // 0,1
     config  string   PCS_CH1_ENABLE_PRBS_GEN = "FALSE",        // 0,1
    config  int PCS_CH1_ERR_CNT = 0,        // 
    config  int PCS_CH1_DEFAULT_RADDR = 0,      // 
    config  int PCS_CH1_MASTER_CHECK_OFFSET = 0,        // 
    config  int PCS_CH1_DELAY_SET = 0,      // 
    config  string    PCS_CH1_SEACH_OFFSET = "20BIT",       // 20bit,30bit,40bit,50bit,60bit,70bit
    config  int  PCS_CH1_CEB_RAPIDLS_MMAX = 0,      // 
    config  int  PCS_CH1_CTC_AFULL = 0,     // 
    config  int  PCS_CH1_CTC_AEMPTY = 0,        // 
     config  string   PCS_CH1_FAR_LOOP = "FALSE",       // 0,1
     config  string     PCS_CH1_NEAR_LOOP = "FALSE",        // 0,1
     config  string     PCS_CH1_INT_RX_MASK_0 = "FALSE",        // 0,1  active high to mask int triggered by pcs_lsm_synced
     config  string     PCS_CH1_INT_RX_MASK_1 = "FALSE",        // 0,1  active high to mask int triggered by pcs_rx_mcb_status
     config  string     PCS_CH1_INT_RX_MASK_2 = "FALSE",        // 0,1  active high to mask int triggered by channel bonding async fifo overflow
     config  string     PCS_CH1_INT_RX_MASK_3 = "FALSE",        // 0,1  active high to mask int triggered by channel bonding async fifo underflow
     config  string     PCS_CH1_INT_RX_MASK_4 = "FALSE",        // 0,1  active high to mask int triggered by ctc unit async fifo overflow
     config  string     PCS_CH1_INT_RX_MASK_5 = "FALSE",        // 0,1  active high to mask int triggered by ctc unit async fifo underflow
     config  string     PCS_CH1_INT_RX_MASK_6 = "FALSE",        // 0,1  active high to mask int triggered by rx_bridge_unit async fifo overflow
     config  string     PCS_CH1_INT_RX_MASK_7 = "FALSE",        // 0,1  active high to mask int triggered by rx_bridge_unit async fifo underflow
     config  string     PCS_CH1_INT_RX_CLR_0 = "FALSE",     // 0,1  active high to clr int triggered by pcs_lsm_synced
     config  string     PCS_CH1_INT_RX_CLR_1 = "FALSE",     // 0,1  active high to clr int triggered by pcs_rx_mcb_status
     config  string     PCS_CH1_INT_RX_CLR_2 = "FALSE",     // 0,1  active high to clr int triggered by channel bonding async fifo overflow
     config  string     PCS_CH1_INT_RX_CLR_3 = "FALSE",     // 0,1  active high to clr int triggered by channel bonding async fifo underflow
     config  string     PCS_CH1_INT_RX_CLR_4 = "FALSE",     // 0,1  active high to clr int triggered by ctc unit async fifo overflow
     config  string     PCS_CH1_INT_RX_CLR_5 = "FALSE",     // 0,1  active high to clr int triggered by ctc unit async fifo underflow
     config  string     PCS_CH1_INT_RX_CLR_6 = "FALSE",     // 0,1  active high to clr int triggered by rx_bridge_unit async fifo overflow
     config  string     PCS_CH1_INT_RX_CLR_7 = "FALSE",     // 0,1  active high to clr int triggered by rx_bridge_unit async fifo underflow
        //********************  parameter -- pcs_ch2 ********************
        config  string PCS_CH2_BYPASS_WORD_ALIGN    = "FALSE",      // 0,1
        config  string PCS_CH2_BYPASS_DENC  = "FALSE",      // 0,1
        config  string PCS_CH2_BYPASS_BONDING   = "FALSE",      // 0,1
        config  string PCS_CH2_BYPASS_CTC   = "FALSE",      // 0,1
        config  string PCS_CH2_BYPASS_GEAR  = "FALSE",      // 0,1
        config  string PCS_CH2_BYPASS_BRIDGE    = "FALSE",      // 0,1
        config  string PCS_CH2_DATA_MODE    = "X8",     // 8bit,10bit,16bit,20bit
        config  string PCS_CH2_RX_POLARITY_INV  = "DELAY",      // 00: delay 01: bit polarity inversion 10: bit reversal 11: polarity inversion and bit reversal
        config  string PCS_CH2_ALIGN_MODE   = "1GB",        // 1gb,10gb,RapidIO,outside
        config  string PCS_CH2_SAMP_16B = "X16",        // 16bit,20bit
       config  int   PCS_CH2_COMMA_REG0 = 0,        // 
       config  int   PCS_CH2_COMMA_MASK = 0,        // 
       config  string PCS_CH2_CEB_MODE = "10GB",        // 10gb,RapidIO,outside
       config  string PCS_CH2_CTC_MODE = "1SKIP",       // 00: add or del 1 skip,01: add or del 2 skips,10: reserved ,11:4 skips
       config  int    PCS_CH2_A_REG = 0,        // 
       config  string  PCS_CH2_GE_AUTO_EN = "FALSE",        // CTC,0,1
      config  int  PCS_CH2_SKIP_REG0 = 0,       // 
      config  int  PCS_CH2_SKIP_REG1 = 0,       // 
      config  int  PCS_CH2_SKIP_REG2 = 0,       // 
      config  int  PCS_CH2_SKIP_REG3 = 0,       // 
      config  string        PCS_CH2_DEC_DUAL = "FALSE",     // signal for 8b10b decoder module
      config  string        PCS_CH2_SPLIT = "FALSE",        // signal for RX GEAR split, 1:split  0:no split, 
      config  string        PCS_CH2_FIFOFLAG_CTC = "FALSE",     // 0,1
      config  string        PCS_CH2_COMMA_DET_MODE = "COMMA_PATTERN",       // 0: comma pattern mode  1: RX_CLK_SLIP mode 
      config  string        PCS_CH2_ERRDETECT_SILENCE = "FALSE",        // 0: comma pattern mode  1: RX_CLK_SLIP mode 
      config  string        PCS_CH2_PMA_RCLK_POLINV = "PMA_RCLK",       // 1'b0:pma_rclk 1'b1:reverse of pma_rclk
      config  string        PCS_CH2_PCS_RCLK_SEL = "PMA_RCLK",      // 1'b0:pma_rclk,1'b1:pma_tclk,
      config  string        PCS_CH2_MCB_RCLK_POLINV = "MCB_RCLK",       // 1'b0:mcb_rclk 1'b1:reverse of mcb_rclk
      config  string        PCS_CH2_CB_RCLK_SEL = "PMA_RCLK",       // 2'b00:pma_rclk,2'b01:pma_tclk,2'b10:mcb_rclk,2'b11:reserved
      config  string        PCS_CH2_AFTER_CTC_RCLK_SEL = "PMA_RCLK",        // 2'b00:pma_rclk,2'b01:pma_tclk,2'b10:mcb_rclk,2'b11:reserved
      config  string        PCS_CH2_RCLK_POLINV = "RCLK",       // 1'b0:rclk 1'b1:reverse of rclk
      config  string        PCS_CH2_BRIDGE_RCLK_SEL = "PMA_RCLK",       // 2'b00:pma_rclk,2'b01:pma_tclk,2'b10:mcb_rclk,2'b11:rclk
      config  string        PCS_CH2_PCS_RCLK_EN = "FALSE",      // 0,1
      config  string        PCS_CH2_CB_RCLK_EN = "FALSE",       // 0,1
      config  string        PCS_CH2_AFTER_CTC_RCLK_EN = "FALSE",        // 0,1
      config  string        PCS_CH2_AFTER_CTC_RCLK_EN_GB = "FALSE",     // 0,1
      config  string        PCS_CH2_BRIDGE_RCLK_EN = "FALSE",       // 0,1
      config  string        PCS_CH2_PCS_RX_RSTN = "FALSE",      // 1:pcs_rx_rstn is valued,is 0,0:pcs_rx_rstn is released
      config  string        PCS_CH2_SLAVE = "MASTER",       // 1:slave channel 0:master channel
      config  string        PCS_CH2_PCIE_SLAVE = "MASTER",        // 1:slave channel 0:master channel
      config  string        PCS_CH2_PCS_CB_RSTN = "FALSE",      // 1: pcs_cb_rstn is valued,is 0,0: pcs_cb_rstn is released
      config  string        PCS_CH2_TX_BYPASS_BRIDGE_UINT   = "FALSE",      // 0,1
      config  string        PCS_CH2_TX_BYPASS_GEAR  = "FALSE",      // 0,1
      config  string        PCS_CH2_TX_BYPASS_ENC   = "FALSE",      // 0,1
      config  string        PCS_CH2_TX_BYPASS_BIT_SLIP  = "FALSE",      // 0,1
      config  string        PCS_CH2_TX_GEAR_SPLIT   = "FALSE",      // 1:spilt 44bits data to 22bits data,0: no spilt
      config  string        PCS_CH2_TX_DRIVE_REG_MODE   = "NO_CHANGE",      // 00:no change, 01:enable polarity reverse,10:enable bit reverse, 11:enable both
      config  int     PCS_CH2_TX_BIT_SLIP_CYCLES = 0,       // 
     config  string   PCS_CH2_INT_TX_MASK_0 = "FALSE",      // 0,1  active high to mask int triggered by tx_bridge_unit async fifo overflow
     config  string         PCS_CH2_INT_TX_MASK_1 = "FALSE",        // 0,1  active high to mask int triggered by tx bridge unit underflow,
     config  string         PCS_CH2_INT_TX_MASK_2 = "FALSE",        // 0,1  active high to mask int triggered by tx_invalid_k 
     config  string         PCS_CH2_INT_TX_CLR_0 = "FALSE",     // 0,1  active high to clr int triggered by tx bridge unit overflow,
     config  string         PCS_CH2_INT_TX_CLR_1 = "FALSE",     // 0,1  active high to clr int triggered by tx_bridge_unit async fifo underflow
     config  string         PCS_CH2_INT_TX_CLR_2 = "FALSE",     // 0,1  active high to clr int triggered by tx_invalid_k
     config  string   PCS_CH2_TX_PMA_TCLK_POLINV = "PMA_TCLK",      // 1'b0:pma_tclk 1'b1:reverse of pma_tclk
     config  string   PCS_CH2_TX_PCS_CLK_EN_SEL = "FALSE",      // 0,1
     config  string   PCS_CH2_TX_BRIDGE_TCLK_SEL = "PCS_TCLK",      // 1'b0: pcs_tclk 1'b1:tclk
     config  string   PCS_CH2_TX_TCLK_POLINV = "TCLK",      // 1'b0:tclk 1'b1:reverse of tclk
     config  string   PCS_CH2_TX_PCS_TX_RSTN = "FALSE",     // 1:pcs_tx_rstn is valued,is 0,0:pcs_tx_rstn is released
     config  string   PCS_CH2_TX_SLAVE = "SLAVE",       // 1:slave channel,0:master channel
     config  string   PCS_CH2_TX_BRIDGE_CLK_EN_SEL = "FALSE",       // 0,1
     config  string   PCS_CH2_DATA_WIDTH_MODE   = "X20",        // 20bit,16bit,10bit,8bit
     config  string   PCS_CH2_TX_TCLK2FABRIC_SEL = "FALSE",     // 0,1
     config  string   PCS_CH2_TX_OUTZZ = "FALSE",       // 1:16bit/32bit only,0:20bit/40bit only
     config  string   PCS_CH2_ENC_DUAL = "FALSE",       // 0,1
     config  string   PCS_CH2_TX_BITSLIP_DATA_MODE = "X10",     // 1: 20bit,0: 10bit
     config  int      PCS_CH2_COMMA_REG1 = 0,       // 
     config  int      PCS_CH2_RAPID_IMAX = 0,       // 
     config  int      PCS_CH2_RAPID_VMIN_1 = 0,     // 
     config  int      PCS_CH2_RAPID_VMIN_2 = 0,     // 
     config  string   PCS_CH2_RX_PRBS_MODE = "DISABLE",      // Mode select:4'd0: reserved,4'd1: PRBS-7,4'd2: PRBS-15,4'd3: PRBS-23,4'd4: PRBS-31,4'd5: long "TRUE",4'd6: long "FALSE",4'd7: 20UI square wave,4'd8: D10_2,4'd9: PCIe complianece pattern,Others: reserved
     config  string   PCS_CH2_RX_ERRCNT_CLR = "FALSE",      // 0,1
     config  string   PCS_CH2_TX_PRBS_MODE = "DISABLE",      // Mode select:4'd0: reserved,4'd1: PRBS-7,4'd2: PRBS-15,4'd3: PRBS-23,4'd4: PRBS-31,4'd5: long "TRUE",4'd6: long "FALSE",4'd7: 20UI square wave,4'd8: D10_2,4'd9: PCIe complianece pattern,Others: reserved
     config  string   PCS_CH2_TX_INSERT_ER = "FALSE",       // 0,1
     config  string   PCS_CH2_ENABLE_PRBS_GEN = "FALSE",        // 0,1
     config  int      PCS_CH2_ERR_CNT = 0,      // 
     config  int      PCS_CH2_DEFAULT_RADDR = 0,        // 
     config  int      PCS_CH2_MASTER_CHECK_OFFSET = 0,      // 
     config  int      PCS_CH2_DELAY_SET = 0,        // 
     config  string   PCS_CH2_SEACH_OFFSET = "20BIT",       // 20bit,30bit,40bit,50bit,60bit,70bit
     config  int      PCS_CH2_CEB_RAPIDLS_MMAX = 0,     // 
     config  int      PCS_CH2_CTC_AFULL = 0,        // 
     config  int      PCS_CH2_CTC_AEMPTY = 0,       // 
     config  string   PCS_CH2_FAR_LOOP = "FALSE",       // 0,1
     config  string     PCS_CH2_NEAR_LOOP = "FALSE",        // 0,1
     config  string     PCS_CH2_INT_RX_MASK_0 = "FALSE",        // 0,1  active high to mask int triggered by pcs_lsm_synced
     config  string     PCS_CH2_INT_RX_MASK_1 = "FALSE",        // 0,1  active high to mask int triggered by pcs_rx_mcb_status
     config  string     PCS_CH2_INT_RX_MASK_2 = "FALSE",        // 0,1  active high to mask int triggered by channel bonding async fifo overflow
     config  string     PCS_CH2_INT_RX_MASK_3 = "FALSE",        // 0,1  active high to mask int triggered by channel bonding async fifo underflow
     config  string     PCS_CH2_INT_RX_MASK_4 = "FALSE",        // 0,1  active high to mask int triggered by ctc unit async fifo overflow
     config  string     PCS_CH2_INT_RX_MASK_5 = "FALSE",        // 0,1  active high to mask int triggered by ctc unit async fifo underflow
     config  string     PCS_CH2_INT_RX_MASK_6 = "FALSE",        // 0,1  active high to mask int triggered by rx_bridge_unit async fifo overflow
     config  string     PCS_CH2_INT_RX_MASK_7 = "FALSE",        // 0,1  active high to mask int triggered by rx_bridge_unit async fifo underflow
     config  string     PCS_CH2_INT_RX_CLR_0 = "FALSE",     // 0,1  active high to clr int triggered by pcs_lsm_synced
     config  string     PCS_CH2_INT_RX_CLR_1 = "FALSE",     // 0,1  active high to clr int triggered by pcs_rx_mcb_status
     config  string     PCS_CH2_INT_RX_CLR_2 = "FALSE",     // 0,1  active high to clr int triggered by channel bonding async fifo overflow
     config  string     PCS_CH2_INT_RX_CLR_3 = "FALSE",     // 0,1  active high to clr int triggered by channel bonding async fifo underflow
     config  string     PCS_CH2_INT_RX_CLR_4 = "FALSE",     // 0,1  active high to clr int triggered by ctc unit async fifo overflow
     config  string     PCS_CH2_INT_RX_CLR_5 = "FALSE",     // 0,1  active high to clr int triggered by ctc unit async fifo underflow
     config  string     PCS_CH2_INT_RX_CLR_6 = "FALSE",     // 0,1  active high to clr int triggered by rx_bridge_unit async fifo overflow
     config  string     PCS_CH2_INT_RX_CLR_7 = "FALSE",     // 0,1  active high to clr int triggered by rx_bridge_unit async fifo underflow
      //********************  parameter -- pcs_ch3 ********************
      config  string  PCS_CH3_BYPASS_WORD_ALIGN = "FALSE",      // 0,1
      config  string  PCS_CH3_BYPASS_DENC   = "FALSE",      // 0,1
      config  string  PCS_CH3_BYPASS_BONDING    = "FALSE",      // 0,1
      config  string  PCS_CH3_BYPASS_CTC    = "FALSE",      // 0,1
      config  string  PCS_CH3_BYPASS_GEAR   = "FALSE",      // 0,1
      config  string  PCS_CH3_BYPASS_BRIDGE = "FALSE",      // 0,1
      config  string  PCS_CH3_DATA_MODE = "X8",     // 8bit,10bit,16bit,20bit
      config  string  PCS_CH3_RX_POLARITY_INV   = "DELAY",      // 00: delay 01: bit polarity inversion 10: bit reversal 11: polarity inversion and bit reversal
      config  string  PCS_CH3_ALIGN_MODE    = "1GB",        // 1gb,10gb,RapidIO,outside
      config  string  PCS_CH3_SAMP_16B = "X16",     // 16bit,20bit
      config  int     PCS_CH3_COMMA_REG0 = 0,       // 
      config  int     PCS_CH3_COMMA_MASK = 0,       // 
      config  string  PCS_CH3_CEB_MODE = "10GB",        // 10gb,RapidIO,outside
      config  string  PCS_CH3_CTC_MODE = "1SKIP",       // 00: add or del 1 skip,01: add or del 2 skips,10: reserved ,11:4 skips
      config  int     PCS_CH3_A_REG = 0,        // 
      config  string  PCS_CH3_GE_AUTO_EN = "FALSE",     // CTC,0,1
     config  int     PCS_CH3_SKIP_REG0 = 0,     // 
     config  int     PCS_CH3_SKIP_REG1 = 0,     // 
     config  int     PCS_CH3_SKIP_REG2 = 0,     // 
     config  int     PCS_CH3_SKIP_REG3 = 0,     // 
     config  string   PCS_CH3_DEC_DUAL = "FALSE",       // signal for 8b10b decoder module
     config  string   PCS_CH3_SPLIT = "FALSE",      // signal for RX GEAR split, 1:split  0:no split, 
     config  string   PCS_CH3_FIFOFLAG_CTC = "FALSE",       // 0,1
     config  string   PCS_CH3_COMMA_DET_MODE = "COMMA_PATTERN",     // 0: comma pattern mode  1: RX_CLK_SLIP mode 
     config  string   PCS_CH3_ERRDETECT_SILENCE = "FALSE",      // 0: comma pattern mode  1: RX_CLK_SLIP mode 
     config  string   PCS_CH3_PMA_RCLK_POLINV = "PMA_RCLK",     // 1'b0:pma_rclk 1'b1:reverse of pma_rclk
     config  string   PCS_CH3_PCS_RCLK_SEL = "PMA_RCLK",        // 1'b0:pma_rclk,1'b1:pma_tclk,
     config  string   PCS_CH3_MCB_RCLK_POLINV = "MCB_RCLK",     // 1'b0:mcb_rclk 1'b1:reverse of mcb_rclk
     config  string   PCS_CH3_CB_RCLK_SEL = "PMA_RCLK",     // 2'b00:pma_rclk,2'b01:pma_tclk,2'b10:mcb_rclk,2'b11:reserved
     config  string   PCS_CH3_AFTER_CTC_RCLK_SEL = "PMA_RCLK",      // 2'b00:pma_rclk,2'b01:pma_tclk,2'b10:mcb_rclk,2'b11:reserved
     config  string   PCS_CH3_RCLK_POLINV = "RCLK",     // 1'b0:rclk 1'b1:reverse of rclk
     config  string   PCS_CH3_BRIDGE_RCLK_SEL = "PMA_RCLK",     // 2'b00:pma_rclk,2'b01:pma_tclk,2'b10:mcb_rclk,2'b11:rclk
     config  string   PCS_CH3_PCS_RCLK_EN = "FALSE",        // 0,1
     config  string   PCS_CH3_CB_RCLK_EN = "FALSE",     // 0,1
     config  string   PCS_CH3_AFTER_CTC_RCLK_EN = "FALSE",      // 0,1
     config  string   PCS_CH3_AFTER_CTC_RCLK_EN_GB = "FALSE",       // 0,1
     config  string   PCS_CH3_BRIDGE_RCLK_EN = "FALSE",     // 0,1
     config  string   PCS_CH3_PCS_RX_RSTN = "FALSE",        // 1:pcs_rx_rstn is valued,is 0,0:pcs_rx_rstn is released
     config  string   PCS_CH3_SLAVE = "MASTER",     // 1:slave channel 0:master channel
     config  string   PCS_CH3_PCIE_SLAVE = "MASTER",        // 1:slave channel 0:master channel
     config  string   PCS_CH3_PCS_CB_RSTN = "FALSE",        // 1: pcs_cb_rstn is valued,is 0,0: pcs_cb_rstn is released
     config  string   PCS_CH3_TX_BYPASS_BRIDGE_UINT = "FALSE",      // 0,1
     config  string   PCS_CH3_TX_BYPASS_GEAR    = "FALSE",      // 0,1
     config  string   PCS_CH3_TX_BYPASS_ENC = "FALSE",      // 0,1
     config  string   PCS_CH3_TX_BYPASS_BIT_SLIP    = "FALSE",      // 0,1
     config  string   PCS_CH3_TX_GEAR_SPLIT = "FALSE",      // 1:spilt 44bits data to 22bits data,0: no spilt
     config  string   PCS_CH3_TX_DRIVE_REG_MODE = "NO_CHANGE",      // 00:no change, 01:enable polarity reverse,10:enable bit reverse, 11:enable both
     config  int      PCS_CH3_TX_BIT_SLIP_CYCLES = 0,       // 
     config  string   PCS_CH3_INT_TX_MASK_0 = "FALSE",      // 0,1  active high to mask int triggered by tx_bridge_unit async fifo overflow
     config  string     PCS_CH3_INT_TX_MASK_1 = "FALSE",        // 0,1  active high to mask int triggered by tx bridge unit underflow,
     config  string     PCS_CH3_INT_TX_MASK_2 = "FALSE",        // 0,1  active high to mask int triggered by tx_invalid_k 
     config  string     PCS_CH3_INT_TX_CLR_0 = "FALSE",     // 0,1  active high to clr int triggered by tx bridge unit overflow,
     config  string     PCS_CH3_INT_TX_CLR_1 = "FALSE",     // 0,1  active high to clr int triggered by tx_bridge_unit async fifo underflow
     config  string     PCS_CH3_INT_TX_CLR_2 = "FALSE",     // 0,1  active high to clr int triggered by tx_invalid_k
     config  string   PCS_CH3_TX_PMA_TCLK_POLINV = "PMA_TCLK",      // 1'b0:pma_tclk 1'b1:reverse of pma_tclk
     config  string   PCS_CH3_TX_PCS_CLK_EN_SEL = "FALSE",      // 0,1
     config  string   PCS_CH3_TX_BRIDGE_TCLK_SEL = "PCS_TCLK",      // 1'b0: pcs_tclk 1'b1:tclk
     config  string   PCS_CH3_TX_TCLK_POLINV = "TCLK",      // 1'b0:tclk 1'b1:reverse of tclk
     config  string   PCS_CH3_TX_PCS_TX_RSTN = "FALSE",     // 1:pcs_tx_rstn is valued,is 0,0:pcs_tx_rstn is released
     config  string   PCS_CH3_TX_SLAVE = "SLAVE",       // 1:slave channel,0:master channel
     config  string   PCS_CH3_TX_BRIDGE_CLK_EN_SEL = "FALSE",       // 0,1
     config  string   PCS_CH3_DATA_WIDTH_MODE   = "X20",        // 20bit,16bit,10bit,8bit
     config  string   PCS_CH3_TX_TCLK2FABRIC_SEL = "FALSE",     // 0,1
     config  string   PCS_CH3_TX_OUTZZ = "FALSE",       // 1:16bit/32bit only,0:20bit/40bit only
     config  string   PCS_CH3_ENC_DUAL = "FALSE",       // 0,1
     config  string   PCS_CH3_TX_BITSLIP_DATA_MODE = "X10",     // 1: 20bit,0: 10bit
     config  int     PCS_CH3_COMMA_REG1 = 0,        // 
     config  int     PCS_CH3_RAPID_IMAX = 0,        // 
     config  int     PCS_CH3_RAPID_VMIN_1 = 0,      // 
     config  int     PCS_CH3_RAPID_VMIN_2 = 0,      // 
     config  string   PCS_CH3_RX_PRBS_MODE = "DISABLE",      // Mode select:4'd0: reserved,4'd1: PRBS-7,4'd2: PRBS-15,4'd3: PRBS-23,4'd4: PRBS-31,4'd5: long "TRUE",4'd6: long "FALSE",4'd7: 20UI square wave,4'd8: D10_2,4'd9: PCIe complianece pattern,Others: reserved
     config  string   PCS_CH3_RX_ERRCNT_CLR = "FALSE",      // 0,1
     config  string   PCS_CH3_TX_PRBS_MODE = "DISABLE",      // Mode select:4'd0: reserved,4'd1: PRBS-7,4'd2: PRBS-15,4'd3: PRBS-23,4'd4: PRBS-31,4'd5: long "TRUE",4'd6: long "FALSE",4'd7: 20UI square wave,4'd8: D10_2,4'd9: PCIe complianece pattern,Others: reserved
     config  string   PCS_CH3_TX_INSERT_ER = "FALSE",       // 0,1
     config  string   PCS_CH3_ENABLE_PRBS_GEN = "FALSE",        // 0,1
     config  int     PCS_CH3_ERR_CNT = 0,       // 
     config  int     PCS_CH3_DEFAULT_RADDR = 0,     // 
     config  int     PCS_CH3_MASTER_CHECK_OFFSET = 0,       // 
     config  int     PCS_CH3_DELAY_SET = 0,     // 
     config  string   PCS_CH3_SEACH_OFFSET = "20BIT",       // 20bit,30bit,40bit,50bit,60bit,70bit
     config  int     PCS_CH3_CEB_RAPIDLS_MMAX = 0,      // 
     config  int     PCS_CH3_CTC_AFULL = 0,     // 
     config  int     PCS_CH3_CTC_AEMPTY = 0,        // 
     config  string   PCS_CH3_FAR_LOOP = "FALSE",       // 0,1
     config  string     PCS_CH3_NEAR_LOOP = "FALSE",        // 0,1
     config  string     PCS_CH3_INT_RX_MASK_0 = "FALSE",        // 0,1  active high to mask int triggered by pcs_lsm_synced
     config  string     PCS_CH3_INT_RX_MASK_1 = "FALSE",        // 0,1  active high to mask int triggered by pcs_rx_mcb_status
     config  string     PCS_CH3_INT_RX_MASK_2 = "FALSE",        // 0,1  active high to mask int triggered by channel bonding async fifo overflow
     config  string     PCS_CH3_INT_RX_MASK_3 = "FALSE",        // 0,1  active high to mask int triggered by channel bonding async fifo underflow
     config  string     PCS_CH3_INT_RX_MASK_4 = "FALSE",        // 0,1  active high to mask int triggered by ctc unit async fifo overflow
     config  string     PCS_CH3_INT_RX_MASK_5 = "FALSE",        // 0,1  active high to mask int triggered by ctc unit async fifo underflow
     config  string     PCS_CH3_INT_RX_MASK_6 = "FALSE",        // 0,1  active high to mask int triggered by rx_bridge_unit async fifo overflow
     config  string     PCS_CH3_INT_RX_MASK_7 = "FALSE",        // 0,1  active high to mask int triggered by rx_bridge_unit async fifo underflow
     config  string     PCS_CH3_INT_RX_CLR_0 = "FALSE",     // 0,1  active high to clr int triggered by pcs_lsm_synced
     config  string     PCS_CH3_INT_RX_CLR_1 = "FALSE",     // 0,1  active high to clr int triggered by pcs_rx_mcb_status
     config  string     PCS_CH3_INT_RX_CLR_2 = "FALSE",     // 0,1  active high to clr int triggered by channel bonding async fifo overflow
     config  string     PCS_CH3_INT_RX_CLR_3 = "FALSE",     // 0,1  active high to clr int triggered by channel bonding async fifo underflow
     config  string     PCS_CH3_INT_RX_CLR_4 = "FALSE",     // 0,1  active high to clr int triggered by ctc unit async fifo overflow
     config  string     PCS_CH3_INT_RX_CLR_5 = "FALSE",     // 0,1  active high to clr int triggered by ctc unit async fifo underflow
     config  string     PCS_CH3_INT_RX_CLR_6 = "FALSE",     // 0,1  active high to clr int triggered by rx_bridge_unit async fifo overflow
     config  string     PCS_CH3_INT_RX_CLR_7 = "FALSE",     // 0,1  active high to clr int triggered by rx_bridge_unit async fifo underflow
     //********************  parameter -- pma_ch0 ********************
     config  string   PMA_CH0_TXDATA_WIDTH  = "8_BIT",      // 8-bit:2'b00, 10-bit:2'b01, 16-bit:2'b10, 20-bit:2'b11
     config  int   PMA_CH0_TX_TESTPATTERN    = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string   PMA_CH0_TESTPATTERN_O_ENABLE  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_DISABLE_BSMODE_DRVAMP = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_FORCE_BIST_ENABLE = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_FORCE_ELECTRICAL_IDLE = "FALSE",    // TRUE , FALSE 
     config  string   PMA_CH0_FORCE_RXDCT_ENABLE    = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_FORCE_EXTLB_ENABLE    = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_DISABLE_LANE_SYNC = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_DISABLE_ELECTRICAL_IDLE   = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_DISABLE_RXDCT_ENABLE  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_DISABLE_EXTLB_ENABLE  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_DISABLE_LOW_SPEED_PATH_ENABLE = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_FORCE_LANE_ENABLE = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_FORCE_LANE_RESETB_DISABLE = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_RXDCT_LGBW_ENABLE = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_RXDCT_VTH = "-MINUS_300MV",    // -300mv:1'b00 ,-375mv:1'b01 ,-150mv:1'b10 ,-225mv:1'b11 
     config  string   PMA_CH0_DE_EMPHASIS_ADDITIONAL_CONTROL    = "0DB",       // +0db:1'b00 ,+0.7db:1'b01 ,+1.4db:1'b11 
     config  string   PMA_CH0_DRV_RTERM_CONTROL = "100PCT",       //  100% , 95% , 91% , 87% , 105% , 111% , 117% ,highZ
     config  string   PMA_CH0_FDRV_AMP_CONTROL  = "100PCT",    // 100% , 92% , 109% , 120%
     config  string   PMA_CH0_PREPC_AMP_CONTROL = "100PCT",    // 100% , 83% , 133% , 117%
     config  string   PMA_CH0_PREMC_AMP_CONTROL = "100PCT",    // 100% , 83% , 133% , 117%
     config  string   PMA_CH0_SER_AMP_CONTROL   = "100PCT",    // 100% , 83% , 133% , 117%
     config  int   PMA_CH0_PFD_LOOP_RESISTOR_SETTING = 0,       // 0000 -> 1111 
     config  int   PMA_CH0_PD_LOOP_RESISTOR_SETTING  = 0,       // 0000 -> 1111 
     config  string   PMA_CH0_CDR_TEST_OUT_SELECT   = "FBCK",    // FBCK , PD
     config  string   PMA_CH0_PI_DIV1_BP    = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH0_PI_TEST_FOR_CKI   = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_PI_CURRENT_SETTING    = "100PCT",       // 100%,80%,140%,120%,160%,120%r,200%,180%
     config  int   PMA_CH0_PI_FREQUENCY_SETTING  = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string   PMA_CH0_TEST_OUT_SELECT_FOR_RCK   = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_TEST_OUT_SELECT_SOURCE    = "SLPI1UI",    // SLPI1UI , PD1
     config  string   PMA_CH0_TEST_DATA_OUT_SELECT_SOURCE   = "DO",    // DO , DE
     config  string   PMA_CH0_TEST_CK_OUT_SELECT_SOURCE = "DATA",    // DATA , CLOCK
     config  string   PMA_CH0_ENABLE_SLIP1UI_MODULE = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH0_PN_SWAP_ENABLE    = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH0_SIPO_BIT_SETTING  = "10_BIT",     // 10-bit:2'b00, 8-bit:2'b01, 20-bit:2'b10, 16-bit:2'b11
     config  string   PMA_CH0_OOB_EN    = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH0_ALOS_EN   = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH0_LFMODE    = "HIGH",    // HIGH , LOW
     config  string   PMA_CH0_TSO_HS_SEL    = "CDR",    // CDR , EQ
     config  string   PMA_CH0_LX_SELLC  = "RING",           // ring , LC
     config  int   PMA_CH0_LX_RXPLL_DIVSEL45_FB  = 4,          // 4 , 5
     config  int   PMA_CH0_LX_RXPLL_DIVSEL_FB    = 2,      // 2,4,5,8,10
     config  int   PMA_CH0_LX_RXPLL_DIVSEL_REF   = 1,      // 1:2'b00 ,2:1'b01 ,4:2'b10 ,4:2'b11 
     config  int      PMA_CH0_PICODE    = 0,        // 0 to 255 
     config  int   PMA_CH0_RX_REFCK_SEL  = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  string   PMA_CH0_PFDLPEN_REGISTER_CONTROL_ENABLE   = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH0_PFDLPEN_REGISTER_SETTING  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_PDLPEN_REGISTER_CONTROL_ENABLE    = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH0_PDLPEN_REGISTER_SETTING   = "FALSE",    // TRUE , FALSE
     config  int   PMA_CH0_DIV_CHANGE_ENABLE_DELAY_TIMER = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  string   PMA_CH0_DIV_CHANGE_ENABLE_SIGNAL_GATING   = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_CDR_ALIGN_REGISTER_SETTING_VALUE  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_FORCE_CDR_ALIGN_ENABLE    = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH0_SELLC_REGISTER_SETTING_VALUE  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_SELLC_CONTROL_BY_REGISTER = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_REG_PLLI_LDO_VREF_SETTING = "0_9V",       //  000:0.9v , 001:0.95v , 010:1.00v , 011:1.05v , 100: 1.1v(df) , 101:1.15v , 110:1.20v , 111:1.25v
     config  int   PMA_CH0_REG_PLLI_LDO_BYPASS_CURRENT   = 0,        //  000 , 001 , 010 , 011 , 100 , 101 , 110 , 111
     config  string   PMA_CH0_REG_PLL_HSTEST_ENABLE = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH0_REG_PLL_ISNK_CURRENT_CONTROL  = "5U",     // 5u:1'b00 ,15u:1'b01 ,25u:1'b10 ,35u:1'b11 
     config  int PMA_CH0_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING   = 0,        // 0 to 31 
     config  string   PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING = "100PCT",       //  100% , 89% , 122% , 111% , 144% , 133% , 167% ,156%
     config  int PMA_CH0_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING   = 0,        // 0 to 31 
     config  string   PMA_CH0_REG_PLL_CP0_BIAS_CONTROL  = "100PCT",       //  100% , 111% , 125% , 143% , 71% , 77% , 83% ,91%
     config  int PMA_CH0_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING    = 0,        // 0 to 31 
     config  string   PMA_CH0_REG_PLL_CP1_BIAS_CONTROL  = "100PCT",       //  100% , 111% , 125% , 143% , 71% , 77% , 83% ,91%
     config  int PMA_CH0_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING    = 0,        // 0 to 31 
     config  string   PMA_CH0_REG_PLL_CP0_CURRENT_SETTING   = "100PCT",       //  100% , 20% , 140% , 60% , 160% , 80% , 200% ,120%
     config  string   PMA_CH0_REG_PLL_CP1_CURRENT_SETTING   = "100PCT",       //  100% , 20% , 140% , 60% , 160% , 80% , 200% ,120%
     config  string   PMA_CH0_REG_PLL_GM1_CURRENT_SETTING   = "100PCT",       //  100% , 67% , 167% , 133% , 300% , 267% , 367% ,333%
     config  string   PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING    = "100PCT",       //  100% , 20% , 140% , 60% , 160% , 80% , 200% ,120%
     config  string   PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW    = "100PCT",       //  100% , 20% , 140% , 60% , 160% , 80% , 200% ,120%
     config  string   PMA_CH0_REG_PLL_REG_CUR   = "100PCT",       //  100% , 80% , 140% , 120% , 180% , 160% , 220% ,200%
     config  string   PMA_CH0_REG_PLL_LCCUR = "DEFAULT",        //  default , -1mA , +2mA , +1mA , +4mA , +3mA , +6mA ,+5mA
     config  string   PMA_CH0_REG_PLL_LCOBAS    = "100PCT",       // 100% , 75% , 150% , 125% 
     config  string   PMA_CH0_REG_PLL_FB_CK_TEST_OUT_ENABLE = "DISABLE",    // DISABLE , ENABLE
     config  int   PMA_CH0_CDR_ALIGN_TIMER   = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  int   PMA_CH0_CALIB_WAIT    = 1024,       // 1024 , 2048 , 4096 , 512 
     config  int   PMA_CH0_CALIB_TIMER   = 512,        // 512 , 1024 , 2048 , 4096 
     config  int   PMA_CH0_TOT_RANGE = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  int   PMA_CH0_SUB_RANGE = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  int   PMA_CH0_OVLP  = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  int   PMA_CH0_BIST_WAIT = 1024,       // 1024 , 2048 , 4096 , 512 
     config  int   PMA_CH0_BIST_TIMER    = 512,        // 512 , 1024 , 2048 , 4096 
     config  int PMA_CH0_BAND_LB    = 0,        // 0 to 7 
     config  int PMA_CH0_BAND_HB    = 0,        // 0 to 31 
     config  int   PMA_CH0_FREQ_LOCK_ACCURACY    = 0,        //  000 , 001 , 010 , 011 , 100 , 101 , 110 , 111
     config  int PMA_CH0_REG_SET_LC_BAND    = 0,        // 0 to 31 
     config  int   PMA_CH0_REG_SET_VCODIV    = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  string   PMA_CH0_REGISTER_SET_VCODIV_BAND_ENABLE   = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH0_REG_SET_PLL_LOCK  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_REGISTER_SET_PLL_LOCK_ENABLE  = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH0_REG_SET_VCO_HI    = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_REG_SET_VCO_LO    = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_REGISTER_SET_VCO_HI_VCO_LO_ENABLE = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH0_FORCE_LC_PLL_LOOP_EN  = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH0_VCO_DIV_CALI_BYPASS   = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_BIST_EN   = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH0_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE  = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH0_FREQ_DETECT_ENABLE_SOURCE     = "DISABLE",    // DISABLE , ENABLE
     config  int   PMA_CH0_REG_SET_DIVSEL_REF    = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  string   PMA_CH0_REG_SET_DIVSEL45_FB   = "FALSE",    // TRUE , FALSE
     config  int PMA_CH0_REG_SET_DIVSEL_FB  = 0,        // 0 to 7  
     config  string   PMA_CH0_PLL_LOOP_EN_SETTING   = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH0_REGISTER_SET_TXPLL_DIV_ENABLE     = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH0_FORCE_RXPLL_RESET = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_FORCE_RXPLL_ON    = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_DPCK_DIV2 = "FALSE",    // 0:1'b0, 1:1'b1 
     config  int   PMA_CH0_LFO_SETTING   = 0,        //  000 , 001 , 010 , 011 , 100 , 101 , 110 , 111
     config  string   PMA_CH0_ALOS_COUNTER_CLOCK_SELECTION  = "LOCAL",    // LOCAL , GLOBAL25M
     config  string   PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT    = "100PCT",       //  100% , 111% , 125% , 143% , 71% , 77% , 83% ,91%
     config  int   PMA_CH0_OOB_ENTER_DELAY_SETTING   = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  int   PMA_CH0_ALOS_LOW_TO_HIGH_COUNTER_SETTING  = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string   PMA_CH0_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL   = "DISABLE",    // DISABLE , ENABLE
     config  int   PMA_CH0_ALOS_EXIT_COUNTER_CLOCK_DIVIDER   = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  int   PMA_CH0_OOB_OSCILATER_FREQUENCY_SETTING   = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string   PMA_CH0_FORCE_OOB = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_OOB_VTH_SET   = "27MV",       // 27mv, 30mv, 35mv, 42.5mv, 52mv, 68mv 
     config  string   PMA_CH0_FORCE_DET_FORCE_ALOS_LOW  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_ALOS_THRESHOLD_VOLTAGE    = "27MV",       // 27mv, 30mv, 35mv, 42.5mv, 52mv, 68mv 
     config  int   PMA_CH0_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string   PMA_CH0_REGR_NEGATIVE_HYSTERESIS_SETTING  = "100MV",      // 100mv, 75mv, 50mv, 25mv, 25mv, 0mv 
     config  string   PMA_CH0_REGL_POSITIVE_HYSTERESIS_SETTING  = "100MV",      // 100mv, 75mv, 50mv, 25mv, 25mv, 0mv 
     config  string   PMA_CH0_REG_EN    = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH0_REGREF_SEL    = "VREF",    // Vref , self_DC
     config  string   PMA_CH0_DC496 = "39_6MHZ",        // 5MHz, 8MHz, 11.5MHz, 20.6MHz, 39.6MHz 
     config  int   PMA_CH0_EQ2_AC_VAR_SETTING    = 0,       // 11111111,11111110,11111100,11111000,11110000,11100000,11000000,10000000,00000000 
     config  int PMA_CH0_EQ2_AC_RES_SETTING = 0,        // 0 to 31 
     config  int   PMA_CH0_EQ2_DC_RESTOP_SETTING = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  int   PMA_CH0_EQ1_DC_RESTOP_SETTING = 50,     //  50, 60, 71, 78, 107 
     config  int   PMA_CH0_EQ1_AC_VAR_SETTING    = 0,       // 11111111,11111110,11111100,11111000,11110000,11100000,11000000,10000000,00000000 
     config  int   PMA_CH0_EQ2_CURRENT_SETTING   = 0,        // 111, 011, 001, 000 
     config  int PMA_CH0_EQ1_AC_RES_SETTING = 0,        // 0 to 31 
     config  int   PMA_CH0_EQ1_CURRENT_SETTING   = 0,        // 1111, 0111, 0011, 1001, 0001, 0000 
     config  int   PMA_CH0_RPLUS = 0,       // 0000,0001,0011,0111,1111 
     config  int   PMA_CH0_RMINUS    = 0,       // 0000,0001,0011,0111,1111 
     config  int   PMA_CH0_RVALSET   = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  int   PMA_CH0_RTERM = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string   PMA_CH0_DCFB_EN   = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH0_DCCOUP    = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH0_3G    = "FALSE",    // TRUE , FALSE
     //********************  parameter -- pma_ch1 ********************
     config  string   PMA_CH1_TXDATA_WIDTH  = "8_BIT",      // 8-bit:2'b00, 10-bit:2'b01, 16-bit:2'b10, 20-bit:2'b11
     config  int   PMA_CH1_TX_TESTPATTERN    = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string   PMA_CH1_TESTPATTERN_O_ENABLE  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_DISABLE_BSMODE_DRVAMP = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_FORCE_BIST_ENABLE = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_FORCE_ELECTRICAL_IDLE = "FALSE",    // TRUE , FALSE 
     config  string   PMA_CH1_FORCE_RXDCT_ENABLE    = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_FORCE_EXTLB_ENABLE    = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_DISABLE_LANE_SYNC = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_DISABLE_ELECTRICAL_IDLE   = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_DISABLE_RXDCT_ENABLE  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_DISABLE_EXTLB_ENABLE  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_DISABLE_LOW_SPEED_PATH_ENABLE = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_FORCE_LANE_ENABLE = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_FORCE_LANE_RESETB_DISABLE = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_RXDCT_LGBW_ENABLE = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_RXDCT_VTH = "-MINUS_300MV",    // -300mv:1'b00 ,-375mv:1'b01 ,-150mv:1'b10 ,-225mv:1'b11 
     config  string   PMA_CH1_DE_EMPHASIS_ADDITIONAL_CONTROL    = "0DB",       // +0db:1'b00 ,+0.7db:1'b01 ,+1.4db:1'b11 
     config  string   PMA_CH1_DRV_RTERM_CONTROL = "100PCT",       //  100% , 95% , 91% , 87% , 105% , 111% , 117% ,highZ
     config  string   PMA_CH1_FDRV_AMP_CONTROL  = "100PCT",    // 100% , 92% , 109% , 120%
     config  string   PMA_CH1_PREPC_AMP_CONTROL = "100PCT",    // 100% , 83% , 133% , 117%
     config  string   PMA_CH1_PREMC_AMP_CONTROL = "100PCT",    // 100% , 83% , 133% , 117%
     config  string   PMA_CH1_SER_AMP_CONTROL   = "100PCT",    // 100% , 83% , 133% , 117%
     config  int   PMA_CH1_PFD_LOOP_RESISTOR_SETTING = 0,       // 0000 -> 1111 
     config  int   PMA_CH1_PD_LOOP_RESISTOR_SETTING  = 0,       // 0000 -> 1111 
     config  string   PMA_CH1_CDR_TEST_OUT_SELECT   = "FBCK",    // FBCK , PD
     config  string   PMA_CH1_PI_DIV1_BP    = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH1_PI_TEST_FOR_CKI   = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_PI_CURRENT_SETTING    = "100PCT",       // 100%,80%,140%,120%,160%,120%r,200%,180%
     config  int   PMA_CH1_PI_FREQUENCY_SETTING  = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string   PMA_CH1_TEST_OUT_SELECT_FOR_RCK   = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_TEST_OUT_SELECT_SOURCE    = "SLPI1UI",    // SLPI1UI , PD1
     config  string   PMA_CH1_TEST_DATA_OUT_SELECT_SOURCE   = "DO",    // DO , DE
     config  string   PMA_CH1_TEST_CK_OUT_SELECT_SOURCE = "DATA",    // DATA , CLOCK
     config  string   PMA_CH1_ENABLE_SLIP1UI_MODULE = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH1_PN_SWAP_ENABLE    = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH1_SIPO_BIT_SETTING  = "10_BIT",     // 10-bit:2'b00, 8-bit:2'b01, 20-bit:2'b10, 16-bit:2'b11
     config  string   PMA_CH1_OOB_EN    = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH1_ALOS_EN   = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH1_LFMODE    = "HIGH",    // HIGH , LOW
     config  string   PMA_CH1_TSO_HS_SEL    = "CDR",    // CDR , EQ
     config  string   PMA_CH1_LX_SELLC  = "RING",           // ring , LC
     config  int   PMA_CH1_LX_RXPLL_DIVSEL45_FB  = 4,          // 4 , 5
     config  int   PMA_CH1_LX_RXPLL_DIVSEL_FB    = 2,      // 2,4,5,8,10
     config  int   PMA_CH1_LX_RXPLL_DIVSEL_REF   = 1,      // 1:2'b00 ,2:1'b01 ,4:2'b10 ,4:2'b11 
     config  int PMA_CH1_PICODE = 0,        // 0 to 255 
     config  int   PMA_CH1_RX_REFCK_SEL  = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  string   PMA_CH1_PFDLPEN_REGISTER_CONTROL_ENABLE   = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH1_PFDLPEN_REGISTER_SETTING  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_PDLPEN_REGISTER_CONTROL_ENABLE    = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH1_PDLPEN_REGISTER_SETTING   = "FALSE",    // TRUE , FALSE
     config  int   PMA_CH1_DIV_CHANGE_ENABLE_DELAY_TIMER = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  string   PMA_CH1_DIV_CHANGE_ENABLE_SIGNAL_GATING   = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_CDR_ALIGN_REGISTER_SETTING_VALUE  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_FORCE_CDR_ALIGN_ENABLE    = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH1_SELLC_REGISTER_SETTING_VALUE  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_SELLC_CONTROL_BY_REGISTER = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_REG_PLLI_LDO_VREF_SETTING = "0_9V",       //  000:0.9v , 001:0.95v , 010:1.00v , 011:1.05v , 100: 1.1v(df) , 101:1.15v , 110:1.20v , 111:1.25v
     config  int   PMA_CH1_REG_PLLI_LDO_BYPASS_CURRENT   = 0,        //  000 , 001 , 010 , 011 , 100 , 101 , 110 , 111
     config  string   PMA_CH1_REG_PLL_HSTEST_ENABLE = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH1_REG_PLL_ISNK_CURRENT_CONTROL  = "5U",     // 5u:1'b00 ,15u:1'b01 ,25u:1'b10 ,35u:1'b11 
     config  int PMA_CH1_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING   = 0,        // 0 to 31 
     config  string   PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING = "100PCT",       //  100% , 89% , 122% , 111% , 144% , 133% , 167% ,156%
     config  int PMA_CH1_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING   = 0,        // 0 to 31 
     config  string   PMA_CH1_REG_PLL_CP0_BIAS_CONTROL  = "100PCT",       //  100% , 111% , 125% , 143% , 71% , 77% , 83% ,91%
     config  int PMA_CH1_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING    = 0,        // 0 to 31 
     config  string   PMA_CH1_REG_PLL_CP1_BIAS_CONTROL  = "100PCT",       //  100% , 111% , 125% , 143% , 71% , 77% , 83% ,91%
     config  int PMA_CH1_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING    = 0,        // 0 to 31 
     config  string   PMA_CH1_REG_PLL_CP0_CURRENT_SETTING   = "100PCT",       //  100% , 20% , 140% , 60% , 160% , 80% , 200% ,120%
     config  string   PMA_CH1_REG_PLL_CP1_CURRENT_SETTING   = "100PCT",       //  100% , 20% , 140% , 60% , 160% , 80% , 200% ,120%
     config  string   PMA_CH1_REG_PLL_GM1_CURRENT_SETTING   = "100PCT",       //  100% , 67% , 167% , 133% , 300% , 267% , 367% ,333%
     config  string   PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING    = "100PCT",       //  100% , 20% , 140% , 60% , 160% , 80% , 200% ,120%
     config  string   PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW    = "100PCT",       //  100% , 20% , 140% , 60% , 160% , 80% , 200% ,120%
     config  string   PMA_CH1_REG_PLL_REG_CUR   = "100PCT",       //  100% , 80% , 140% , 120% , 180% , 160% , 220% ,200%
     config  string   PMA_CH1_REG_PLL_LCCUR = "DEFAULT",        //  default , -1mA , +2mA , +1mA , +4mA , +3mA , +6mA ,+5mA
     config  string   PMA_CH1_REG_PLL_LCOBAS    = "100PCT",       // 100% , 75% , 150% , 125% 
     config  string   PMA_CH1_REG_PLL_FB_CK_TEST_OUT_ENABLE = "DISABLE",    // DISABLE , ENABLE
     config  int   PMA_CH1_CDR_ALIGN_TIMER   = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  int   PMA_CH1_CALIB_WAIT    = 1024,       // 1024 , 2048 , 4096 , 512 
     config  int   PMA_CH1_CALIB_TIMER   = 512,        // 512 , 1024 , 2048 , 4096 
     config  int   PMA_CH1_TOT_RANGE = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  int   PMA_CH1_SUB_RANGE = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  int   PMA_CH1_OVLP  = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  int   PMA_CH1_BIST_WAIT = 1024,       // 1024 , 2048 , 4096 , 512 
     config  int   PMA_CH1_BIST_TIMER    = 512,        // 512 , 1024 , 2048 , 4096 
     config  int PMA_CH1_BAND_LB    = 0,        // 0 to 7 
     config  int PMA_CH1_BAND_HB    = 0,        // 0 to 31 
     config  int   PMA_CH1_FREQ_LOCK_ACCURACY    = 0,        //  000 , 001 , 010 , 011 , 100 , 101 , 110 , 111
     config  int PMA_CH1_REG_SET_LC_BAND    = 0,        // 0 to 31 
     config  int   PMA_CH1_REG_SET_VCODIV    = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  string   PMA_CH1_REGISTER_SET_VCODIV_BAND_ENABLE   = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH1_REG_SET_PLL_LOCK  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_REGISTER_SET_PLL_LOCK_ENABLE  = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH1_REG_SET_VCO_HI    = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_REG_SET_VCO_LO    = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_REGISTER_SET_VCO_HI_VCO_LO_ENABLE = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH1_FORCE_LC_PLL_LOOP_EN  = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH1_VCO_DIV_CALI_BYPASS   = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_BIST_EN   = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH1_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE  = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH1_FREQ_DETECT_ENABLE_SOURCE     = "DISABLE",    // DISABLE , ENABLE
     config  int   PMA_CH1_REG_SET_DIVSEL_REF    = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  string   PMA_CH1_REG_SET_DIVSEL45_FB   = "FALSE",    // TRUE , FALSE
     config  int PMA_CH1_REG_SET_DIVSEL_FB  = 0,        // 0 to 7  
     config  string   PMA_CH1_PLL_LOOP_EN_SETTING   = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH1_REGISTER_SET_TXPLL_DIV_ENABLE     = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH1_FORCE_RXPLL_RESET = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_FORCE_RXPLL_ON    = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_DPCK_DIV2 = "FALSE",    // 0:1'b0, 1:1'b1 
     config  int   PMA_CH1_LFO_SETTING   = 0,        //  000 , 001 , 010 , 011 , 100 , 101 , 110 , 111
     config  string   PMA_CH1_ALOS_COUNTER_CLOCK_SELECTION  = "LOCAL",    // LOCAL , GLOBAL25M
     config  string   PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT    = "100PCT",       //  100% , 111% , 125% , 143% , 71% , 77% , 83% ,91%
     config  int   PMA_CH1_OOB_ENTER_DELAY_SETTING   = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  int   PMA_CH1_ALOS_LOW_TO_HIGH_COUNTER_SETTING  = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string   PMA_CH1_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL   = "DISABLE",    // DISABLE , ENABLE
     config  int   PMA_CH1_ALOS_EXIT_COUNTER_CLOCK_DIVIDER   = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  int   PMA_CH1_OOB_OSCILATER_FREQUENCY_SETTING   = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string   PMA_CH1_FORCE_OOB = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_OOB_VTH_SET   = "27MV",       // 27mv, 30mv, 35mv, 42.5mv, 52mv, 68mv 
     config  string   PMA_CH1_FORCE_DET_FORCE_ALOS_LOW  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_ALOS_THRESHOLD_VOLTAGE    = "27MV",       // 27mv, 30mv, 35mv, 42.5mv, 52mv, 68mv 
     config  int   PMA_CH1_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string   PMA_CH1_REGR_NEGATIVE_HYSTERESIS_SETTING  = "100MV",      // 100mv, 75mv, 50mv, 25mv, 25mv, 0mv 
     config  string   PMA_CH1_REGL_POSITIVE_HYSTERESIS_SETTING  = "100MV",      // 100mv, 75mv, 50mv, 25mv, 25mv, 0mv 
     config  string   PMA_CH1_REG_EN    = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH1_REGREF_SEL    = "VREF",    // Vref , self_DC
     config  string   PMA_CH1_DC496 = "39_6MHZ",        // 5MHz, 8MHz, 11.5MHz, 20.6MHz, 39.6MHz 
     config  int   PMA_CH1_EQ2_AC_VAR_SETTING    = 0,       // 11111111,11111110,11111100,11111000,11110000,11100000,11000000,10000000,00000000 
     config  int PMA_CH1_EQ2_AC_RES_SETTING = 0,        // 0 to 31 
     config  int   PMA_CH1_EQ2_DC_RESTOP_SETTING = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  int   PMA_CH1_EQ1_DC_RESTOP_SETTING = 50,     //  50, 60, 71, 78, 107 
     config  int   PMA_CH1_EQ1_AC_VAR_SETTING    = 0,       // 11111111,11111110,11111100,11111000,11110000,11100000,11000000,10000000,00000000 
     config  int   PMA_CH1_EQ2_CURRENT_SETTING   = 0,        // 111, 011, 001, 000 
     config  int PMA_CH1_EQ1_AC_RES_SETTING = 0,        // 0 to 31 
     config  int   PMA_CH1_EQ1_CURRENT_SETTING   = 0,        // 1111, 0111, 0011, 1001, 0001, 0000 
     config  int   PMA_CH1_RPLUS = 0,       // 0000,0001,0011,0111,1111 
     config  int   PMA_CH1_RMINUS    = 0,       // 0000,0001,0011,0111,1111 
     config  int   PMA_CH1_RVALSET   = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  int   PMA_CH1_RTERM = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string   PMA_CH1_DCFB_EN   = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH1_DCCOUP    = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH1_3G    = "FALSE",    // TRUE , FALSE
     //********************  parameter -- pma_ch2 ********************
     config  string   PMA_CH2_TXDATA_WIDTH  = "8_BIT",      // 8-bit:2'b00, 10-bit:2'b01, 16-bit:2'b10, 20-bit:2'b11
     config  int   PMA_CH2_TX_TESTPATTERN    = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string   PMA_CH2_TESTPATTERN_O_ENABLE  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_DISABLE_BSMODE_DRVAMP = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_FORCE_BIST_ENABLE = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_FORCE_ELECTRICAL_IDLE = "FALSE",    // TRUE , FALSE 
     config  string   PMA_CH2_FORCE_RXDCT_ENABLE    = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_FORCE_EXTLB_ENABLE    = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_DISABLE_LANE_SYNC = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_DISABLE_ELECTRICAL_IDLE   = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_DISABLE_RXDCT_ENABLE  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_DISABLE_EXTLB_ENABLE  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_DISABLE_LOW_SPEED_PATH_ENABLE = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_FORCE_LANE_ENABLE = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_FORCE_LANE_RESETB_DISABLE = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_RXDCT_LGBW_ENABLE = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_RXDCT_VTH = "-MINUS_300MV",    // -300mv:1'b00 ,-375mv:1'b01 ,-150mv:1'b10 ,-225mv:1'b11 
     config  string   PMA_CH2_DE_EMPHASIS_ADDITIONAL_CONTROL    = "0DB",       // +0db:1'b00 ,+0.7db:1'b01 ,+1.4db:1'b11 
     config  string   PMA_CH2_DRV_RTERM_CONTROL = "100PCT",       //  100% , 95% , 91% , 87% , 105% , 111% , 117% ,highZ
     config  string   PMA_CH2_FDRV_AMP_CONTROL  = "100PCT",    // 100% , 92% , 109% , 120%
     config  string   PMA_CH2_PREPC_AMP_CONTROL = "100PCT",    // 100% , 83% , 133% , 117%
     config  string   PMA_CH2_PREMC_AMP_CONTROL = "100PCT",    // 100% , 83% , 133% , 117%
     config  string   PMA_CH2_SER_AMP_CONTROL   = "100PCT",    // 100% , 83% , 133% , 117%
     config  int   PMA_CH2_PFD_LOOP_RESISTOR_SETTING = 0,       // 0000 -> 1111 
     config  int   PMA_CH2_PD_LOOP_RESISTOR_SETTING  = 0,       // 0000 -> 1111 
     config  string   PMA_CH2_CDR_TEST_OUT_SELECT   = "FBCK",    // FBCK , PD
     config  string   PMA_CH2_PI_DIV1_BP    = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH2_PI_TEST_FOR_CKI   = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_PI_CURRENT_SETTING    = "100PCT",       // 100%,80%,140%,120%,160%,120%r,200%,180%
     config  int   PMA_CH2_PI_FREQUENCY_SETTING  = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string   PMA_CH2_TEST_OUT_SELECT_FOR_RCK   = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_TEST_OUT_SELECT_SOURCE    = "SLPI1UI",    // SLPI1UI , PD1
     config  string   PMA_CH2_TEST_DATA_OUT_SELECT_SOURCE   = "DO",    // DO , DE
     config  string   PMA_CH2_TEST_CK_OUT_SELECT_SOURCE = "DATA",    // DATA , CLOCK
     config  string   PMA_CH2_ENABLE_SLIP1UI_MODULE = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH2_PN_SWAP_ENABLE    = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH2_SIPO_BIT_SETTING  = "10_BIT",     // 10-bit:2'b00, 8-bit:2'b01, 20-bit:2'b10, 16-bit:2'b11
     config  string   PMA_CH2_OOB_EN    = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH2_ALOS_EN   = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH2_LFMODE    = "HIGH",    // HIGH , LOW
     config  string   PMA_CH2_TSO_HS_SEL    = "CDR",    // CDR , EQ
     config  string   PMA_CH2_LX_SELLC  = "RING",           // ring , LC
     config  int   PMA_CH2_LX_RXPLL_DIVSEL45_FB  = 4,          // 4 , 5
     config  int   PMA_CH2_LX_RXPLL_DIVSEL_FB    = 2,      // 2,4,5,8,10
     config  int   PMA_CH2_LX_RXPLL_DIVSEL_REF   = 1,      // 1:2'b00 ,2:1'b01 ,4:2'b10 ,4:2'b11 
     config  int PMA_CH2_PICODE = 0,        // 0 to 255 
     config  int   PMA_CH2_RX_REFCK_SEL  = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  string   PMA_CH2_PFDLPEN_REGISTER_CONTROL_ENABLE   = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH2_PFDLPEN_REGISTER_SETTING  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_PDLPEN_REGISTER_CONTROL_ENABLE    = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH2_PDLPEN_REGISTER_SETTING   = "FALSE",    // TRUE , FALSE
     config  int   PMA_CH2_DIV_CHANGE_ENABLE_DELAY_TIMER = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  string   PMA_CH2_DIV_CHANGE_ENABLE_SIGNAL_GATING   = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_CDR_ALIGN_REGISTER_SETTING_VALUE  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_FORCE_CDR_ALIGN_ENABLE    = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH2_SELLC_REGISTER_SETTING_VALUE  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_SELLC_CONTROL_BY_REGISTER = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_REG_PLLI_LDO_VREF_SETTING = "0_9V",       //  000:0.9v , 001:0.95v , 010:1.00v , 011:1.05v , 100: 1.1v(df) , 101:1.15v , 110:1.20v , 111:1.25v
     config  int   PMA_CH2_REG_PLLI_LDO_BYPASS_CURRENT   = 0,        //  000 , 001 , 010 , 011 , 100 , 101 , 110 , 111
     config  string   PMA_CH2_REG_PLL_HSTEST_ENABLE = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH2_REG_PLL_ISNK_CURRENT_CONTROL  = "5U",     // 5u:1'b00 ,15u:1'b01 ,25u:1'b10 ,35u:1'b11 
     config  int PMA_CH2_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING   = 0,        // 0 to 31 
     config  string   PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING = "100PCT",       //  100% , 89% , 122% , 111% , 144% , 133% , 167% ,156%
     config  int PMA_CH2_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING   = 0,        // 0 to 31 
     config  string   PMA_CH2_REG_PLL_CP0_BIAS_CONTROL  = "100PCT",       //  100% , 111% , 125% , 143% , 71% , 77% , 83% ,91%
     config  int PMA_CH2_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING    = 0,        // 0 to 31 
     config  string   PMA_CH2_REG_PLL_CP1_BIAS_CONTROL  = "100PCT",       //  100% , 111% , 125% , 143% , 71% , 77% , 83% ,91%
     config  int PMA_CH2_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING    = 0,        // 0 to 31 
     config  string   PMA_CH2_REG_PLL_CP0_CURRENT_SETTING   = "100PCT",       //  100% , 20% , 140% , 60% , 160% , 80% , 200% ,120%
     config  string   PMA_CH2_REG_PLL_CP1_CURRENT_SETTING   = "100PCT",       //  100% , 20% , 140% , 60% , 160% , 80% , 200% ,120%
     config  string   PMA_CH2_REG_PLL_GM1_CURRENT_SETTING   = "100PCT",       //  100% , 67% , 167% , 133% , 300% , 267% , 367% ,333%
     config  string   PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING    = "100PCT",       //  100% , 20% , 140% , 60% , 160% , 80% , 200% ,120%
     config  string   PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW    = "100PCT",       //  100% , 20% , 140% , 60% , 160% , 80% , 200% ,120%
     config  string   PMA_CH2_REG_PLL_REG_CUR   = "100PCT",       //  100% , 80% , 140% , 120% , 180% , 160% , 220% ,200%
     config  string   PMA_CH2_REG_PLL_LCCUR = "DEFAULT",        //  default , -1mA , +2mA , +1mA , +4mA , +3mA , +6mA ,+5mA
     config  string   PMA_CH2_REG_PLL_LCOBAS    = "100PCT",       // 100% , 75% , 150% , 125% 
     config  string   PMA_CH2_REG_PLL_FB_CK_TEST_OUT_ENABLE = "DISABLE",    // DISABLE , ENABLE
     config  int   PMA_CH2_CDR_ALIGN_TIMER   = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  int   PMA_CH2_CALIB_WAIT    = 1024,       // 1024 , 2048 , 4096 , 512 
     config  int   PMA_CH2_CALIB_TIMER   = 512,        // 512 , 1024 , 2048 , 4096 
     config  int   PMA_CH2_TOT_RANGE = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  int   PMA_CH2_SUB_RANGE = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  int   PMA_CH2_OVLP  = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  int   PMA_CH2_BIST_WAIT = 1024,       // 1024 , 2048 , 4096 , 512 
     config  int   PMA_CH2_BIST_TIMER    = 512,        // 512 , 1024 , 2048 , 4096 
     config  int PMA_CH2_BAND_LB    = 0,        // 0 to 7 
     config  int PMA_CH2_BAND_HB    = 0,        // 0 to 31 
     config  int   PMA_CH2_FREQ_LOCK_ACCURACY    = 0,        //  000 , 001 , 010 , 011 , 100 , 101 , 110 , 111
     config  int PMA_CH2_REG_SET_LC_BAND    = 0,        // 0 to 31 
     config  int   PMA_CH2_REG_SET_VCODIV    = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  string   PMA_CH2_REGISTER_SET_VCODIV_BAND_ENABLE   = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH2_REG_SET_PLL_LOCK  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_REGISTER_SET_PLL_LOCK_ENABLE  = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH2_REG_SET_VCO_HI    = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_REG_SET_VCO_LO    = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_REGISTER_SET_VCO_HI_VCO_LO_ENABLE = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH2_FORCE_LC_PLL_LOOP_EN  = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH2_VCO_DIV_CALI_BYPASS   = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH2_BIST_EN   = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH2_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE  = "DISABLE",    // DISABLE , ENABLE
     config  string  PMA_CH2_FREQ_DETECT_ENABLE_SOURCE  = "DISABLE",    // DISABLE , ENABLE
     config  int  PMA_CH2_REG_SET_DIVSEL_REF = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  string  PMA_CH2_REG_SET_DIVSEL45_FB    = "FALSE",    // TRUE , FALSE
     config  int PMA_CH2_REG_SET_DIVSEL_FB  = 0,        // 0 to 7  
     config  string  PMA_CH2_PLL_LOOP_EN_SETTING    = "DISABLE",    // DISABLE , ENABLE
     config  string  PMA_CH2_REGISTER_SET_TXPLL_DIV_ENABLE  = "DISABLE",    // DISABLE , ENABLE
     config  string  PMA_CH2_FORCE_RXPLL_RESET  = "FALSE",    // TRUE , FALSE
     config  string  PMA_CH2_FORCE_RXPLL_ON = "FALSE",    // TRUE , FALSE
     config  string  PMA_CH2_DPCK_DIV2  = "FALSE",    // 0:1'b0, 1:1'b1 
     config  int  PMA_CH2_LFO_SETTING    = 0,        //  000 , 001 , 010 , 011 , 100 , 101 , 110 , 111
     config  string  PMA_CH2_ALOS_COUNTER_CLOCK_SELECTION   = "LOCAL",    // LOCAL , GLOBAL25M
     config  string  PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT = "100PCT",       //  100% , 111% , 125% , 143% , 71% , 77% , 83% ,91%
     config  int  PMA_CH2_OOB_ENTER_DELAY_SETTING    = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  int  PMA_CH2_ALOS_LOW_TO_HIGH_COUNTER_SETTING   = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string  PMA_CH2_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL    = "DISABLE",    // DISABLE , ENABLE
     config  int  PMA_CH2_ALOS_EXIT_COUNTER_CLOCK_DIVIDER    = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  int  PMA_CH2_OOB_OSCILATER_FREQUENCY_SETTING    = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string  PMA_CH2_FORCE_OOB  = "FALSE",    // TRUE , FALSE
     config  string  PMA_CH2_OOB_VTH_SET    = "27MV",       // 27mv, 30mv, 35mv, 42.5mv, 52mv, 68mv 
     config  string  PMA_CH2_FORCE_DET_FORCE_ALOS_LOW   = "FALSE",    // TRUE , FALSE
     config  string  PMA_CH2_ALOS_THRESHOLD_VOLTAGE = "27MV",       // 27mv, 30mv, 35mv, 42.5mv, 52mv, 68mv 
     config  int  PMA_CH2_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE  = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string  PMA_CH2_REGR_NEGATIVE_HYSTERESIS_SETTING   = "100MV",      // 100mv, 75mv, 50mv, 25mv, 25mv, 0mv 
     config  string  PMA_CH2_REGL_POSITIVE_HYSTERESIS_SETTING   = "100MV",      // 100mv, 75mv, 50mv, 25mv, 25mv, 0mv 
     config  string  PMA_CH2_REG_EN = "DISABLE",    // DISABLE , ENABLE
     config  string  PMA_CH2_REGREF_SEL = "VREF",    // Vref , self_DC
     config  string  PMA_CH2_DC496  = "39_6MHZ",        // 5MHz, 8MHz, 11.5MHz, 20.6MHz, 39.6MHz 
     config  int  PMA_CH2_EQ2_AC_VAR_SETTING = 0,       // 11111111,11111110,11111100,11111000,11110000,11100000,11000000,10000000,00000000 
     config  int PMA_CH2_EQ2_AC_RES_SETTING = 0,        // 0 to 31 
     config  int  PMA_CH2_EQ2_DC_RESTOP_SETTING  = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  int  PMA_CH2_EQ1_DC_RESTOP_SETTING  = 50,     //  50, 60, 71, 78, 107 
     config  int  PMA_CH2_EQ1_AC_VAR_SETTING = 0,       // 11111111,11111110,11111100,11111000,11110000,11100000,11000000,10000000,00000000 
     config  int  PMA_CH2_EQ2_CURRENT_SETTING    = 0,        // 111, 011, 001, 000 
     config  int PMA_CH2_EQ1_AC_RES_SETTING = 0,        // 0 to 31 
     config  int  PMA_CH2_EQ1_CURRENT_SETTING    = 0,        // 1111, 0111, 0011, 1001, 0001, 0000 
     config  int  PMA_CH2_RPLUS  = 0,       // 0000,0001,0011,0111,1111 
     config  int  PMA_CH2_RMINUS = 0,       // 0000,0001,0011,0111,1111 
     config  int  PMA_CH2_RVALSET    = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  int  PMA_CH2_RTERM  = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string  PMA_CH2_DCFB_EN    = "DISABLE",    // DISABLE , ENABLE
     config  string  PMA_CH2_DCCOUP = "FALSE",    // TRUE , FALSE
     config  string  PMA_CH2_3G = "FALSE",    // TRUE , FALSE
     //********************  parameter -- pma_ch3 ********************
     config  string   PMA_CH3_TXDATA_WIDTH  = "8_BIT",      // 8-bit:2'b00, 10-bit:2'b01, 16-bit:2'b10, 20-bit:2'b11
     config  int   PMA_CH3_TX_TESTPATTERN    = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string   PMA_CH3_TESTPATTERN_O_ENABLE  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_DISABLE_BSMODE_DRVAMP = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_FORCE_BIST_ENABLE = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_FORCE_ELECTRICAL_IDLE = "FALSE",    // TRUE , FALSE 
     config  string   PMA_CH3_FORCE_RXDCT_ENABLE    = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_FORCE_EXTLB_ENABLE    = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_DISABLE_LANE_SYNC = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_DISABLE_ELECTRICAL_IDLE   = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_DISABLE_RXDCT_ENABLE  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_DISABLE_EXTLB_ENABLE  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_DISABLE_LOW_SPEED_PATH_ENABLE = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_FORCE_LANE_ENABLE = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_FORCE_LANE_RESETB_DISABLE = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_RXDCT_LGBW_ENABLE = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_RXDCT_VTH = "-MINUS_300MV",    // -300mv:1'b00 ,-375mv:1'b01 ,-150mv:1'b10 ,-225mv:1'b11 
     config  string   PMA_CH3_DE_EMPHASIS_ADDITIONAL_CONTROL    = "0DB",       // +0db:1'b00 ,+0.7db:1'b01 ,+1.4db:1'b11 
     config  string   PMA_CH3_DRV_RTERM_CONTROL = "100PCT",       //  100% , 95% , 91% , 87% , 105% , 111% , 117% ,highZ
     config  string   PMA_CH3_FDRV_AMP_CONTROL  = "100PCT",    // 100% , 92% , 109% , 120%
     config  string   PMA_CH3_PREPC_AMP_CONTROL = "100PCT",    // 100% , 83% , 133% , 117%
     config  string   PMA_CH3_PREMC_AMP_CONTROL = "100PCT",    // 100% , 83% , 133% , 117%
     config  string   PMA_CH3_SER_AMP_CONTROL   = "100PCT",    // 100% , 83% , 133% , 117%
     config  int   PMA_CH3_PFD_LOOP_RESISTOR_SETTING = 0,       // 0000 -> 1111 
     config  int   PMA_CH3_PD_LOOP_RESISTOR_SETTING  = 0,       // 0000 -> 1111 
     config  string   PMA_CH3_CDR_TEST_OUT_SELECT   = "FBCK",    // FBCK , PD
     config  string   PMA_CH3_PI_DIV1_BP    = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH3_PI_TEST_FOR_CKI   = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_PI_CURRENT_SETTING    = "100PCT",       // 100%,80%,140%,120%,160%,120%r,200%,180%
     config  int   PMA_CH3_PI_FREQUENCY_SETTING  = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string   PMA_CH3_TEST_OUT_SELECT_FOR_RCK   = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_TEST_OUT_SELECT_SOURCE    = "SLPI1UI",    // SLPI1UI , PD1
     config  string   PMA_CH3_TEST_DATA_OUT_SELECT_SOURCE   = "DO",    // DO , DE
     config  string   PMA_CH3_TEST_CK_OUT_SELECT_SOURCE = "DATA",    // DATA , CLOCK
     config  string   PMA_CH3_ENABLE_SLIP1UI_MODULE = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH3_PN_SWAP_ENABLE    = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH3_SIPO_BIT_SETTING  = "10_BIT",     // 10-bit:2'b00, 8-bit:2'b01, 20-bit:2'b10, 16-bit:2'b11
     config  string   PMA_CH3_OOB_EN    = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH3_ALOS_EN   = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH3_LFMODE    = "HIGH",    // HIGH , LOW
     config  string   PMA_CH3_TSO_HS_SEL    = "CDR",    // CDR , EQ
     config  string   PMA_CH3_LX_SELLC  = "RING",           // ring , LC
     config  int   PMA_CH3_LX_RXPLL_DIVSEL45_FB  = 4,          // 4 , 5
     config  int   PMA_CH3_LX_RXPLL_DIVSEL_FB    = 2,      // 2,4,5,8,10
     config  int   PMA_CH3_LX_RXPLL_DIVSEL_REF   = 1,      // 1:2'b00 ,2:1'b01 ,4:2'b10 ,4:2'b11 
     config  int PMA_CH3_PICODE = 0,        // 0 to 255 
     config  int   PMA_CH3_RX_REFCK_SEL  = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  string   PMA_CH3_PFDLPEN_REGISTER_CONTROL_ENABLE   = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH3_PFDLPEN_REGISTER_SETTING  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_PDLPEN_REGISTER_CONTROL_ENABLE    = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH3_PDLPEN_REGISTER_SETTING   = "FALSE",    // TRUE , FALSE
     config  int   PMA_CH3_DIV_CHANGE_ENABLE_DELAY_TIMER = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  string   PMA_CH3_DIV_CHANGE_ENABLE_SIGNAL_GATING   = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_CDR_ALIGN_REGISTER_SETTING_VALUE  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_FORCE_CDR_ALIGN_ENABLE    = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH3_SELLC_REGISTER_SETTING_VALUE  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_SELLC_CONTROL_BY_REGISTER = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_REG_PLLI_LDO_VREF_SETTING = "0_9V",       //  000:0.9v , 001:0.95v , 010:1.00v , 011:1.05v , 100: 1.1v(df) , 101:1.15v , 110:1.20v , 111:1.25v
     config  int   PMA_CH3_REG_PLLI_LDO_BYPASS_CURRENT   = 0,        //  000 , 001 , 010 , 011 , 100 , 101 , 110 , 111
     config  string   PMA_CH3_REG_PLL_HSTEST_ENABLE = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH3_REG_PLL_ISNK_CURRENT_CONTROL  = "5U",     // 5u:1'b00 ,15u:1'b01 ,25u:1'b10 ,35u:1'b11 
     config  int PMA_CH3_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING   = 0,        // 0 to 31 
     config  string   PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING = "100PCT",       //  100% , 89% , 122% , 111% , 144% , 133% , 167% ,156%
     config  int PMA_CH3_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING   = 0,        // 0 to 31 
     config  string   PMA_CH3_REG_PLL_CP0_BIAS_CONTROL  = "100PCT",       //  100% , 111% , 125% , 143% , 71% , 77% , 83% ,91%
     config  int PMA_CH3_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING    = 0,        // 0 to 31 
     config  string   PMA_CH3_REG_PLL_CP1_BIAS_CONTROL  = "100PCT",       //  100% , 111% , 125% , 143% , 71% , 77% , 83% ,91%
     config  int PMA_CH3_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING    = 0,        // 0 to 31 
     config  string   PMA_CH3_REG_PLL_CP0_CURRENT_SETTING   = "100PCT",       //  100% , 20% , 140% , 60% , 160% , 80% , 200% ,120%
     config  string   PMA_CH3_REG_PLL_CP1_CURRENT_SETTING   = "100PCT",       //  100% , 20% , 140% , 60% , 160% , 80% , 200% ,120%
     config  string   PMA_CH3_REG_PLL_GM1_CURRENT_SETTING   = "100PCT",       //  100% , 67% , 167% , 133% , 300% , 267% , 367% ,333%
     config  string   PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING    = "100PCT",       //  100% , 20% , 140% , 60% , 160% , 80% , 200% ,120%
     config  string   PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW    = "100PCT",       //  100% , 20% , 140% , 60% , 160% , 80% , 200% ,120%
     config  string   PMA_CH3_REG_PLL_REG_CUR   = "100PCT",       //  100% , 80% , 140% , 120% , 180% , 160% , 220% ,200%
     config  string   PMA_CH3_REG_PLL_LCCUR = "DEFAULT",        //  default , -1mA , +2mA , +1mA , +4mA , +3mA , +6mA ,+5mA
     config  string   PMA_CH3_REG_PLL_LCOBAS    = "100PCT",       // 100% , 75% , 150% , 125% 
     config  string   PMA_CH3_REG_PLL_FB_CK_TEST_OUT_ENABLE = "DISABLE",    // DISABLE , ENABLE
     config  int   PMA_CH3_CDR_ALIGN_TIMER   = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  int   PMA_CH3_CALIB_WAIT    = 1024,       // 1024 , 2048 , 4096 , 512 
     config  int   PMA_CH3_CALIB_TIMER   = 512,        // 512 , 1024 , 2048 , 4096 
     config  int   PMA_CH3_TOT_RANGE = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  int   PMA_CH3_SUB_RANGE = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  int   PMA_CH3_OVLP  = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  int   PMA_CH3_BIST_WAIT = 1024,       // 1024 , 2048 , 4096 , 512 
     config  int   PMA_CH3_BIST_TIMER    = 512,        // 512 , 1024 , 2048 , 4096 
     config  int PMA_CH3_BAND_LB    = 0,        // 0 to 7 
     config  int PMA_CH3_BAND_HB    = 0,        // 0 to 31 
     config  int   PMA_CH3_FREQ_LOCK_ACCURACY    = 0,        //  000 , 001 , 010 , 011 , 100 , 101 , 110 , 111
     config  int PMA_CH3_REG_SET_LC_BAND    = 0,        // 0 to 31 
     config  int   PMA_CH3_REG_SET_VCODIV    = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  string   PMA_CH3_REGISTER_SET_VCODIV_BAND_ENABLE   = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH3_REG_SET_PLL_LOCK  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_REGISTER_SET_PLL_LOCK_ENABLE  = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH3_REG_SET_VCO_HI    = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_REG_SET_VCO_LO    = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_REGISTER_SET_VCO_HI_VCO_LO_ENABLE = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH3_FORCE_LC_PLL_LOOP_EN  = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH3_VCO_DIV_CALI_BYPASS   = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_BIST_EN   = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH3_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE  = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH3_FREQ_DETECT_ENABLE_SOURCE     = "DISABLE",    // DISABLE , ENABLE
     config  int   PMA_CH3_REG_SET_DIVSEL_REF    = 0,     // 00:2'b00 ,01:2'b01 ,10:2'b10 ,11:2'b11 
     config  string   PMA_CH3_REG_SET_DIVSEL45_FB   = "FALSE",    // TRUE , FALSE
     config  int PMA_CH3_REG_SET_DIVSEL_FB  = 0,        // 0 to 7  
     config  string   PMA_CH3_PLL_LOOP_EN_SETTING   = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH3_REGISTER_SET_TXPLL_DIV_ENABLE     = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH3_FORCE_RXPLL_RESET = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_FORCE_RXPLL_ON    = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_DPCK_DIV2 = "FALSE",    // 0:1'b0, 1:1'b1 
     config  int   PMA_CH3_LFO_SETTING   = 0,        //  000 , 001 , 010 , 011 , 100 , 101 , 110 , 111
     config  string   PMA_CH3_ALOS_COUNTER_CLOCK_SELECTION  = "LOCAL",    // LOCAL , GLOBAL25M
     config  string   PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT    = "100PCT",       //  100% , 111% , 125% , 143% , 71% , 77% , 83% ,91%
     config  int   PMA_CH3_OOB_ENTER_DELAY_SETTING   = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  int   PMA_CH3_ALOS_LOW_TO_HIGH_COUNTER_SETTING  = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string   PMA_CH3_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL   = "DISABLE",    // DISABLE , ENABLE
     config  int   PMA_CH3_ALOS_EXIT_COUNTER_CLOCK_DIVIDER   = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  int   PMA_CH3_OOB_OSCILATER_FREQUENCY_SETTING   = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string   PMA_CH3_FORCE_OOB = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_OOB_VTH_SET   = "27MV",       // 27mv, 30mv, 35mv, 42.5mv, 52mv, 68mv 
     config  string   PMA_CH3_FORCE_DET_FORCE_ALOS_LOW  = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_ALOS_THRESHOLD_VOLTAGE    = "27MV",       // 27mv, 30mv, 35mv, 42.5mv, 52mv, 68mv 
     config  int   PMA_CH3_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string   PMA_CH3_REGR_NEGATIVE_HYSTERESIS_SETTING  = "100MV",      // 100mv, 75mv, 50mv, 25mv, 25mv, 0mv 
     config  string   PMA_CH3_REGL_POSITIVE_HYSTERESIS_SETTING  = "100MV",      // 100mv, 75mv, 50mv, 25mv, 25mv, 0mv 
     config  string   PMA_CH3_REG_EN    = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH3_REGREF_SEL    = "VREF",    // Vref , self_DC
     config  string   PMA_CH3_DC496 = "39_6MHZ",        // 5MHz, 8MHz, 11.5MHz, 20.6MHz, 39.6MHz 
     config  int   PMA_CH3_EQ2_AC_VAR_SETTING    = 0,       // 11111111,11111110,11111100,11111000,11110000,11100000,11000000,10000000,00000000 
     config  int PMA_CH3_EQ2_AC_RES_SETTING = 0,        // 0 to 31 
     config  int   PMA_CH3_EQ2_DC_RESTOP_SETTING = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  int   PMA_CH3_EQ1_DC_RESTOP_SETTING = 50,     //  50, 60, 71, 78, 107 
     config  int   PMA_CH3_EQ1_AC_VAR_SETTING    = 0,       // 11111111,11111110,11111100,11111000,11110000,11100000,11000000,10000000,00000000 
     config  int   PMA_CH3_EQ2_CURRENT_SETTING   = 0,        // 111, 011, 001, 000 
     config  int PMA_CH3_EQ1_AC_RES_SETTING = 0,        // 0 to 31 
     config  int   PMA_CH3_EQ1_CURRENT_SETTING   = 0,        // 1111, 0111, 0011, 1001, 0001, 0000 
     config  int   PMA_CH3_RPLUS = 0,       // 0000,0001,0011,0111,1111 
     config  int   PMA_CH3_RMINUS    = 0,       // 0000,0001,0011,0111,1111 
     config  int   PMA_CH3_RVALSET   = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  int   PMA_CH3_RTERM = 0,     // 00:1'b00 ,01:1'b01 ,10:1'b10 ,11:1'b11 
     config  string   PMA_CH3_DCFB_EN   = "DISABLE",    // DISABLE , ENABLE
     config  string   PMA_CH3_DCCOUP    = "FALSE",    // TRUE , FALSE
     config  string   PMA_CH3_3G    = "FALSE",    // TRUE , FALSE
     //********************  parameter -- others ********************
     config  int  CLK_ALIGNER_RX0   = 0,        // 
     config  int  CLK_ALIGNER_RX1   = 0,        // 
     config  int  CLK_ALIGNER_RX2   = 0,        // 
     config  int  CLK_ALIGNER_RX3   = 0,        // 
     config  int  CLK_ALIGNER_TX0   = 0,        // 
     config  int  CLK_ALIGNER_TX1   = 0,        // 
     config  int  CLK_ALIGNER_TX2   = 0,        // 
     config  int  CLK_ALIGNER_TX3   = 0,        // 
     config  string     DYN_DLY_EN_RX0  = "FALSE",      // 
     config  string     DYN_DLY_EN_RX1  = "FALSE",      // 
     config  string     DYN_DLY_EN_RX2  = "FALSE",      // 
     config  string     DYN_DLY_EN_RX3  = "FALSE",      // 
     config  string     DYN_DLY_EN_TX0  = "FALSE",      // 
     config  string     DYN_DLY_EN_TX1  = "FALSE",      // 
     config  string     DYN_DLY_EN_TX2  = "FALSE",      // 
     config  string     DYN_DLY_EN_TX3  = "FALSE",      // 
     config  string     DYN_DLY_SEL_RX0 = "FALSE",      // 
     config  string     DYN_DLY_SEL_RX1 = "FALSE",      // 
     config  string     DYN_DLY_SEL_RX2 = "FALSE",      // 
     config  string     DYN_DLY_SEL_RX3 = "FALSE",      // 
     config  string     DYN_DLY_SEL_TX0 = "FALSE",      // 
     config  string     DYN_DLY_SEL_TX1 = "FALSE",      // 
     config  string     DYN_DLY_SEL_TX2 = "FALSE",      // 
     config  string     DYN_DLY_SEL_TX3 = "FALSE",      // 
     config  int  CLK_ALIGNER_RSTN_RX   = 0,        // 
     config  int  CLK_ALIGNER_RSTN_TX   = 0,        // 
     config  int  PT_LX_BISTLB_EN   = 0,        // 
     config  int  PT_LX_ELECIDLE_EN_MSB = 0,        // 
     config  int  PT_LX_EXTLB_EN    = 0,        // 
     config  int  PT_LX_RXDCT_EN    = 0,        // 
     config  int  PT_LX_TX_LFMODE   = 0,        // 
     config  int  PT_RX_LANE_POWERUP    = 0,        // 
     config  int  PT_TX_LANE_POWERUP    = 0,        // 
     config  string     PT_PLL_RSTN = "FALSE",      // 
     config  string     PT_PLLPOWERDOWN = "FALSE",      // 
     config  string     PT_QUAD_PWRUP   = "FALSE",      // 
     config  string     GRSN_DIS    = "FALSE",      // 
     config  string     PT_HSST_RSTN    = "FALSE",      // 
     config  string     PMA_CH0_FORCE_LC_PLL_LOOP_EN_H    = "DISABLE",      // 
     config  string     PMA_CH0_FORCE_LC_PLL_LOOP_EN_L    = "DISABLE", 
     config  string     PMA_CH1_FORCE_LC_PLL_LOOP_EN_H    = "DISABLE",      //    
     config  string     PMA_CH1_FORCE_LC_PLL_LOOP_EN_L    = "DISABLE",            
     config  string     PMA_CH2_FORCE_LC_PLL_LOOP_EN_H    = "DISABLE",      //    
     config  string     PMA_CH2_FORCE_LC_PLL_LOOP_EN_L    = "DISABLE",            
     config  string     PMA_CH3_FORCE_LC_PLL_LOOP_EN_H    = "DISABLE",      //    
     config  string     PMA_CH3_FORCE_LC_PLL_LOOP_EN_L    = "DISABLE",            
     config  string     PMA_QUAD_FORCE_LC_PLL_LOOP_EN_H    = "DISABLE",      //    
     config  string     PMA_QUAD_FORCE_LC_PLL_LOOP_EN_L    = "DISABLE",            
     config  string     PT_CFG_RSTN = "FALSE"       // 
    );
    port
    (
        //********************  reg -- pma_quad ********************                     
       config input SC_PMA_QUAD_TURN_ON_BANDGAP_AT_AOS_ON_194    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_TURN_ON_BANDGAP_AT_AOS_ON_194" */,
       config input SC_PMA_QUAD_TURN_ON_BANDGAP_AT_RX_DETECTION_ON_193    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_TURN_ON_BANDGAP_AT_RX_DETECTION_ON_193" */,
       config input SC_PMA_QUAD_TURN_ON_BANDGAP_AT_BOUNDARY_SCAN_ON_192    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_TURN_ON_BANDGAP_AT_BOUNDARY_SCAN_ON_192" */,
       config input SC_PMA_QUAD_CFG_HSST_RSTN_184    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_CFG_HSST_RSTN_184" */,
       config input SC_PMA_QUAD_SELECT_LANE_TCK_FOR_QUAD_SYNC_183_182[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_SELECT_LANE_TCK_FOR_QUAD_SYNC_183_182<1>, SC_PMA_QUAD_SELECT_LANE_TCK_FOR_QUAD_SYNC_183_182<0>" */,
       config input SC_PMA_QUAD_CK_REN_170    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_CK_REN_170" */,
       config input SC_PMA_QUAD_C1_EN_169    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_C1_EN_169" */,
       config input SC_PMA_QUAD_C2_EN_168    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_C2_EN_168" */,
       config input SC_PMA_QUAD_CLK_DIVIDER_SETTING_FROM_25M_TO_200K_167_166[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_CLK_DIVIDER_SETTING_FROM_25M_TO_200K_167_166<1>, SC_PMA_QUAD_CLK_DIVIDER_SETTING_FROM_25M_TO_200K_167_166<0>" */,
       config input SC_PMA_QUAD_ACMODE_SCANMODE_EN_165    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_ACMODE_SCANMODE_EN_165" */,
       config input SC_PMA_QUAD_REGISTER_ACMODE_164    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REGISTER_ACMODE_164" */,
       config input SC_PMA_QUAD_REGISTER_SCANMODE_163    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REGISTER_SCANMODE_163" */,
       config input SC_PMA_QUAD_REFCK2CORE_EN_162    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REFCK2CORE_EN_162" */,
       config input SC_PMA_QUAD_REG_EN_161    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REG_EN_161" */,
       config input SC_PMA_QUAD_REGR_159_156[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REGR_159_156<3>, SC_PMA_QUAD_REGR_159_156<2>, SC_PMA_QUAD_REGR_159_156<1>, SC_PMA_QUAD_REGR_159_156<0>" */,
       config input SC_PMA_QUAD_REGL_155_152[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REGL_155_152<3>, SC_PMA_QUAD_REGL_155_152<2>, SC_PMA_QUAD_REGL_155_152<1>, SC_PMA_QUAD_REGL_155_152<0>" */,
       config input SC_PMA_QUAD_DPCK_SEL_151_150[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_DPCK_SEL_151_150<1>, SC_PMA_QUAD_DPCK_SEL_151_150<0>" */,
       config input SC_PMA_QUAD_TX_REFCK_SEL_149    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_TX_REFCK_SEL_149" */,
       config input SC_PMA_QUAD_REFCK_SRC_SEL_148    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REFCK_SRC_SEL_148" */,
       config input SC_PMA_QUAD_RREFCK_PWRUP_147    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_RREFCK_PWRUP_147" */,       
       config input SC_PMA_QUAD_REFCK_SK_SEL_146_145[1:0]   =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REFCK_SK_SEL_146_145<1>, SC_PMA_QUAD_REFCK_SK_SEL_146_145<0>" */,       
       config input SC_PMA_QUAD_REFCK_DIV2_SEL_144    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REFCK_DIV2_SEL_144" */,
       config input SC_PMA_QUAD_REFCK_TO_NQ_EN_143    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REFCK_TO_NQ_EN_143" */,
       config input SC_PMA_QUAD_AUXI_ADJ_142_140[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_AUXI_ADJ_142_140<2>, SC_PMA_QUAD_AUXI_ADJ_142_140<1>, SC_PMA_QUAD_AUXI_ADJ_142_140<0>" */,
       config input SC_PMA_QUAD_DC496_139_136[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_DC496_139_136<3>, SC_PMA_QUAD_DC496_139_136<2>, SC_PMA_QUAD_DC496_139_136<1>, SC_PMA_QUAD_DC496_139_136<0>" */,
       config input SC_PMA_QUAD_REG_FDET_TIMER_135_134[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REG_FDET_TIMER_135_134<1>, SC_PMA_QUAD_REG_FDET_TIMER_135_134<0>" */,
       config input SC_PMA_QUAD_FREQ_LKO_133_132[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_FREQ_LKO_133_132<1>, SC_PMA_QUAD_FREQ_LKO_133_132<0>" */,
       config input SC_PMA_QUAD_FREQ_LKI_131_130[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_FREQ_LKI_131_130<1>, SC_PMA_QUAD_FREQ_LKI_131_130<0>" */,
       config input SC_PMA_QUAD_CLOCK_SRC_SEL_129    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_CLOCK_SRC_SEL_129" */,
       config input SC_PMA_QUAD_FRE_DET_EN_128    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_FRE_DET_EN_128" */,
       config input SC_PMA_QUAD_TSO_LS_SEL_127_121[6:0]    =    7'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_TSO_LS_SEL_127_121<6>, SC_PMA_QUAD_TSO_LS_SEL_127_121<5>, SC_PMA_QUAD_TSO_LS_SEL_127_121<4>, SC_PMA_QUAD_TSO_LS_SEL_127_121<3>, SC_PMA_QUAD_TSO_LS_SEL_127_121<2>, SC_PMA_QUAD_TSO_LS_SEL_127_121<1>, SC_PMA_QUAD_TSO_LS_SEL_127_121<0>" */,
       config input SC_PMA_QUAD_TXPLL_START_119    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_TXPLL_START_119" */,
       config input SC_PMA_QUAD_VCODIV_118_117[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_VCODIV_118_117<1>, SC_PMA_QUAD_VCODIV_118_117<0>" */,
       config input SC_PMA_QUAD_LC_BAND_116_112[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_LC_BAND_116_112<4>, SC_PMA_QUAD_LC_BAND_116_112<3>, SC_PMA_QUAD_LC_BAND_116_112<2>, SC_PMA_QUAD_LC_BAND_116_112<1>, SC_PMA_QUAD_LC_BAND_116_112<0>" */,
       config input SC_PMA_QUAD_SET_VCO_HI_111    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_SET_VCO_HI_111" */,
       config input SC_PMA_QUAD_SET_VCO_LO_110    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_SET_VCO_LO_110" */,
       config input SC_PMA_QUAD_CALIB_FAIL_109    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_CALIB_FAIL_109" */,
       config input SC_PMA_QUAD_CALIB_DONE_108    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_CALIB_DONE_108" */,
       config input SC_PMA_QUAD_BIST_DONE_107    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_BIST_DONE_107" */,
       config input SC_PMA_QUAD_TOTRANGE_FAIL_106    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_TOTRANGE_FAIL_106" */,
       config input SC_PMA_QUAD_SUBRANGE_FAIL_105    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_SUBRANGE_FAIL_105" */,
       config input SC_PMA_QUAD_OVLP_FAIL_104    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_OVLP_FAIL_104" */,
       config input SC_PMA_QUAD_TXPLL_LOCK_103    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_TXPLL_LOCK_103" */,
       config input SC_PMA_QUAD_TXPLL_LOOP_ENABLE_102    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_TXPLL_LOOP_ENABLE_102" */,
       config input SC_PMA_QUAD_TXPLL_DIVSEL_REF_STA_101_100[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_TXPLL_DIVSEL_REF_STA_101_100<1>, SC_PMA_QUAD_TXPLL_DIVSEL_REF_STA_101_100<0>" */,
       config input SC_PMA_QUAD_TXPLL_DIVSEL45_FB_STA_99    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_TXPLL_DIVSEL45_FB_STA_99" */,
       config input SC_PMA_QUAD_TXPLL_DIVSEL_FB_STA_98_96[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_TXPLL_DIVSEL_FB_STA_98_96<2>, SC_PMA_QUAD_TXPLL_DIVSEL_FB_STA_98_96<1>, SC_PMA_QUAD_TXPLL_DIVSEL_FB_STA_98_96<0>" */,
       config input SC_PMA_QUAD_TXPLL_DIVSEL45_FB_95    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_TXPLL_DIVSEL45_FB_95" */,
       config input SC_PMA_QUAD_TXPLL_DIVSEL_FB_94_92[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_TXPLL_DIVSEL_FB_94_92<2>, SC_PMA_QUAD_TXPLL_DIVSEL_FB_94_92<1>, SC_PMA_QUAD_TXPLL_DIVSEL_FB_94_92<0>" */,
       config input SC_PMA_QUAD_TXPLL_DIVSEL_REF_91_90[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_TXPLL_DIVSEL_REF_91_90<1>, SC_PMA_QUAD_TXPLL_DIVSEL_REF_91_90<0>" */,
       config input SC_PMA_QUAD_REG_DISABLE_HOLDCLK_85    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REG_DISABLE_HOLDCLK_85" */,
       config input SC_PMA_QUAD_REG_DISABLE_SYNC_84    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REG_DISABLE_SYNC_84" */,
       config input SC_PMA_QUAD_FORCE_OUTPUT_PLL_LOCK_83    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_FORCE_OUTPUT_PLL_LOCK_83" */,
       config input SC_PMA_QUAD_REGISTER_SET_SYNCTCK_SEL_ENABLE_82    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REGISTER_SET_SYNCTCK_SEL_ENABLE_82" */,
       config input SC_PMA_QUAD_REG_SET_SYNCTCK_SEL_81_80[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REG_SET_SYNCTCK_SEL_81_80<1>, SC_PMA_QUAD_REG_SET_SYNCTCK_SEL_81_80<0>" */,
       config input SC_PMA_QUAD_CK4TEST_OUTPUT_ENABLE_74    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_CK4TEST_OUTPUT_ENABLE_74" */,
       config input SC_PMA_QUAD_RSTGENBAS_73_72[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_RSTGENBAS_73_72<1>, SC_PMA_QUAD_RSTGENBAS_73_72<0>" */,
       config input SC_PMA_QUAD_LCBUFBAS_71_70[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_LCBUFBAS_71_70<1>, SC_PMA_QUAD_LCBUFBAS_71_70<0>" */,
       config input SC_PMA_QUAD_REGISTER_SET_CPCUR_ENABEL_69    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REGISTER_SET_CPCUR_ENABEL_69" */,
       config input SC_PMA_QUAD_REG_SET_CPCUR_68_64[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REG_SET_CPCUR_68_64<4>, SC_PMA_QUAD_REG_SET_CPCUR_68_64<3>, SC_PMA_QUAD_REG_SET_CPCUR_68_64<2>, SC_PMA_QUAD_REG_SET_CPCUR_68_64<1>, SC_PMA_QUAD_REG_SET_CPCUR_68_64<0>" */,
       config input SC_PMA_QUAD_CPBAS_63_61[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_CPBAS_63_61<2>, SC_PMA_QUAD_CPBAS_63_61<1>, SC_PMA_QUAD_CPBAS_63_61<0>" */,
       config input SC_PMA_QUAD_LCOBAS_60_59[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_LCOBAS_60_59<1>, SC_PMA_QUAD_LCOBAS_60_59<0>" */,
       config input SC_PMA_QUAD_LCCUR_58_56[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_LCCUR_58_56<2>, SC_PMA_QUAD_LCCUR_58_56<1>, SC_PMA_QUAD_LCCUR_58_56<0>" */,
       config input SC_PMA_QUAD_ENABLE_REGISTER_SETTING_BAND_55    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_ENABLE_REGISTER_SETTING_BAND_55" */,
       config input SC_PMA_QUAD_CALIB_WAIT_53_52[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_CALIB_WAIT_53_52<1>, SC_PMA_QUAD_CALIB_WAIT_53_52<0>" */,
       config input SC_PMA_QUAD_CALIB_TIMER_51_50[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_CALIB_TIMER_51_50<1>, SC_PMA_QUAD_CALIB_TIMER_51_50<0>" */,
       config input SC_PMA_QUAD_TOT_RANGE_49_48[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_TOT_RANGE_49_48<1>, SC_PMA_QUAD_TOT_RANGE_49_48<0>" */,
       config input SC_PMA_QUAD_SUB_RANGE_47_46[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_SUB_RANGE_47_46<1>, SC_PMA_QUAD_SUB_RANGE_47_46<0>" */,
       config input SC_PMA_QUAD_OVLP_45_44[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_OVLP_45_44<1>, SC_PMA_QUAD_OVLP_45_44<0>" */,
       config input SC_PMA_QUAD_BIST_WAIT_43_42[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_BIST_WAIT_43_42<1>, SC_PMA_QUAD_BIST_WAIT_43_42<0>" */,
       config input SC_PMA_QUAD_BIST_TIMER_41_40[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_BIST_TIMER_41_40<1>, SC_PMA_QUAD_BIST_TIMER_41_40<0>" */,
       config input SC_PMA_QUAD_BAND_LB_39_37[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_BAND_LB_39_37<2>, SC_PMA_QUAD_BAND_LB_39_37<1>, SC_PMA_QUAD_BAND_LB_39_37<0>" */,
       config input SC_PMA_QUAD_BAND_HB_36_32[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_BAND_HB_36_32<4>, SC_PMA_QUAD_BAND_HB_36_32<3>, SC_PMA_QUAD_BAND_HB_36_32<2>, SC_PMA_QUAD_BAND_HB_36_32<1>, SC_PMA_QUAD_BAND_HB_36_32<0>" */,
       config input SC_PMA_QUAD_FREQ_LOCK_ACCURACY_31_29[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_FREQ_LOCK_ACCURACY_31_29<2>, SC_PMA_QUAD_FREQ_LOCK_ACCURACY_31_29<1>, SC_PMA_QUAD_FREQ_LOCK_ACCURACY_31_29<0>" */,
       config input SC_PMA_QUAD_REG_SET_LC_BAND_28_24[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REG_SET_LC_BAND_28_24<4>, SC_PMA_QUAD_REG_SET_LC_BAND_28_24<3>, SC_PMA_QUAD_REG_SET_LC_BAND_28_24<2>, SC_PMA_QUAD_REG_SET_LC_BAND_28_24<1>, SC_PMA_QUAD_REG_SET_LC_BAND_28_24<0>" */,
       config input SC_PMA_QUAD_REG_SET_VCODIV_23_22[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REG_SET_VCODIV_23_22<1>, SC_PMA_QUAD_REG_SET_VCODIV_23_22<0>" */,
       config input SC_PMA_QUAD_REGISTER_SET_VCODIV_BAND_ENABLE_21    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REGISTER_SET_VCODIV_BAND_ENABLE_21" */,
       config input SC_PMA_QUAD_REG_SET_PLL_LOCK_20    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REG_SET_PLL_LOCK_20" */,
       config input SC_PMA_QUAD_REGISTER_SET_PLL_LOCK_ENABLE_19    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REGISTER_SET_PLL_LOCK_ENABLE_19" */,
       config input SC_PMA_QUAD_REG_SET_VCO_HI_18    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REG_SET_VCO_HI_18" */,
       config input SC_PMA_QUAD_REG_SET_VCO_LO_17    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REG_SET_VCO_LO_17" */,
       config input SC_PMA_QUAD_REGISTER_SET_VCO_HI_VCO_LO_ENABLE_16    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REGISTER_SET_VCO_HI_VCO_LO_ENABLE_16" */,
       //config input SC_PMA_QUAD_FORCE_LC_PLL_LOOP_EN_15_14[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_FORCE_LC_PLL_LOOP_EN_15_14<1>, SC_PMA_QUAD_FORCE_LC_PLL_LOOP_EN_15_14<0>" */,
       config input SC_PMA_QUAD_VCO_DIV_CALI_BYPASS_13    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_VCO_DIV_CALI_BYPASS_13" */,
       config input SC_PMA_QUAD_BIST_EN_12    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_BIST_EN_12" */,
       config input SC_PMA_QUAD_ENABLE_TXPLL_BIST_BLOCK_CLOCKS_11    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_ENABLE_TXPLL_BIST_BLOCK_CLOCKS_11" */,
       config input SC_PMA_QUAD_LF_TESTBY2_10    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_LF_TESTBY2_10" */,
       config input SC_PMA_QUAD_REG_SET_DIVSEL_REF_9_8[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REG_SET_DIVSEL_REF_9_8<1>, SC_PMA_QUAD_REG_SET_DIVSEL_REF_9_8<0>" */,
       config input SC_PMA_QUAD_REG_SET_DIVSEL45_FB_7    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REG_SET_DIVSEL45_FB_7" */,
       config input SC_PMA_QUAD_REG_SET_DIVSEL_FB_6_4[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REG_SET_DIVSEL_FB_6_4<2>, SC_PMA_QUAD_REG_SET_DIVSEL_FB_6_4<1>, SC_PMA_QUAD_REG_SET_DIVSEL_FB_6_4<0>" */,
       config input SC_PMA_QUAD_LF_TEST_EN_3    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_LF_TEST_EN_3" */,
       config input SC_PMA_QUAD_REGISTER_SET_TXPLL_DIV_ENABLE_2    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_REGISTER_SET_TXPLL_DIV_ENABLE_2" */,
       config input SC_PMA_QUAD_FORCE_TXPLL_RESET_1    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_FORCE_TXPLL_RESET_1" */,
       config input SC_PMA_QUAD_FORCE_TXPLL_ON_0    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_FORCE_TXPLL_ON_0" */,
       config input SC_PCS_CH0_BYPASS_WORD_ALIGN_1    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_BYPASS_WORD_ALIGN_1" */,
       config input SC_PCS_CH0_BYPASS_DENC_2    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_BYPASS_DENC_2" */,
       config input SC_PCS_CH0_BYPASS_BONDING_3    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_BYPASS_BONDING_3" */,
       config input SC_PCS_CH0_BYPASS_CTC_4    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_BYPASS_CTC_4" */,
       config input SC_PCS_CH0_BYPASS_GEAR_5    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_BYPASS_GEAR_5" */,
       config input SC_PCS_CH0_BYPASS_BRIDGE_6    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_BYPASS_BRIDGE_6" */,
       config input SC_PCS_CH0_DATA_MODE_8    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_DATA_MODE_8" */,
       config input SC_PCS_CH0_RX_POLARITY_INV_10_9[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_RX_POLARITY_INV_10_9<1>, SC_PCS_CH0_RX_POLARITY_INV_10_9<0>" */,
       config input SC_PCS_CH0_ALIGN_MODE_12_11[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_ALIGN_MODE_12_11<1>, SC_PCS_CH0_ALIGN_MODE_12_11<0>" */,
       config input SC_PCS_CH0_SAMP_16B_13    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_SAMP_16B_13" */,
       config input SC_PCS_CH0_COMMA_REG0_25_16[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_COMMA_REG0_25_16<9>, SC_PCS_CH0_COMMA_REG0_25_16<8>, SC_PCS_CH0_COMMA_REG0_25_16<7>, SC_PCS_CH0_COMMA_REG0_25_16<6>, SC_PCS_CH0_COMMA_REG0_25_16<5>, SC_PCS_CH0_COMMA_REG0_25_16<4>, SC_PCS_CH0_COMMA_REG0_25_16<3>, SC_PCS_CH0_COMMA_REG0_25_16<2>, SC_PCS_CH0_COMMA_REG0_25_16<1>, SC_PCS_CH0_COMMA_REG0_25_16<0>" */,
       config input SC_PCS_CH0_COMMA_MASK_35_26[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_COMMA_MASK_35_26<9>, SC_PCS_CH0_COMMA_MASK_35_26<8>, SC_PCS_CH0_COMMA_MASK_35_26<7>, SC_PCS_CH0_COMMA_MASK_35_26<6>, SC_PCS_CH0_COMMA_MASK_35_26<5>, SC_PCS_CH0_COMMA_MASK_35_26<4>, SC_PCS_CH0_COMMA_MASK_35_26<3>, SC_PCS_CH0_COMMA_MASK_35_26<2>, SC_PCS_CH0_COMMA_MASK_35_26<1>, SC_PCS_CH0_COMMA_MASK_35_26<0>" */,
       config input SC_PCS_CH0_CEB_MODE_37_36[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_CEB_MODE_37_36<1>, SC_PCS_CH0_CEB_MODE_37_36<0>" */,
       config input SC_PCS_CH0_CTC_MODE_39_38[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_CTC_MODE_39_38<1>, SC_PCS_CH0_CTC_MODE_39_38<0>" */,
       config input SC_PCS_CH0_A_REG_47_40[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_A_REG_47_40<7>, SC_PCS_CH0_A_REG_47_40<6>, SC_PCS_CH0_A_REG_47_40<5>, SC_PCS_CH0_A_REG_47_40<4>, SC_PCS_CH0_A_REG_47_40<3>, SC_PCS_CH0_A_REG_47_40<2>, SC_PCS_CH0_A_REG_47_40<1>, SC_PCS_CH0_A_REG_47_40<0>" */,
       config input SC_PCS_CH0_GE_AUTO_EN_49    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_GE_AUTO_EN_49" */,
       config input SC_PCS_CH0_SKIP_REG0_59_50[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_SKIP_REG0_59_50<9>, SC_PCS_CH0_SKIP_REG0_59_50<8>, SC_PCS_CH0_SKIP_REG0_59_50<7>, SC_PCS_CH0_SKIP_REG0_59_50<6>, SC_PCS_CH0_SKIP_REG0_59_50<5>, SC_PCS_CH0_SKIP_REG0_59_50<4>, SC_PCS_CH0_SKIP_REG0_59_50<3>, SC_PCS_CH0_SKIP_REG0_59_50<2>, SC_PCS_CH0_SKIP_REG0_59_50<1>, SC_PCS_CH0_SKIP_REG0_59_50<0>" */,
       config input SC_PCS_CH0_SKIP_REG1_69_60[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_SKIP_REG1_69_60<9>, SC_PCS_CH0_SKIP_REG1_69_60<8>, SC_PCS_CH0_SKIP_REG1_69_60<7>, SC_PCS_CH0_SKIP_REG1_69_60<6>, SC_PCS_CH0_SKIP_REG1_69_60<5>, SC_PCS_CH0_SKIP_REG1_69_60<4>, SC_PCS_CH0_SKIP_REG1_69_60<3>, SC_PCS_CH0_SKIP_REG1_69_60<2>, SC_PCS_CH0_SKIP_REG1_69_60<1>, SC_PCS_CH0_SKIP_REG1_69_60<0>" */,
       config input SC_PCS_CH0_SKIP_REG2_79_70[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_SKIP_REG2_79_70<9>, SC_PCS_CH0_SKIP_REG2_79_70<8>, SC_PCS_CH0_SKIP_REG2_79_70<7>, SC_PCS_CH0_SKIP_REG2_79_70<6>, SC_PCS_CH0_SKIP_REG2_79_70<5>, SC_PCS_CH0_SKIP_REG2_79_70<4>, SC_PCS_CH0_SKIP_REG2_79_70<3>, SC_PCS_CH0_SKIP_REG2_79_70<2>, SC_PCS_CH0_SKIP_REG2_79_70<1>, SC_PCS_CH0_SKIP_REG2_79_70<0>" */,
       config input SC_PCS_CH0_SKIP_REG3_89_80[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_SKIP_REG3_89_80<9>, SC_PCS_CH0_SKIP_REG3_89_80<8>, SC_PCS_CH0_SKIP_REG3_89_80<7>, SC_PCS_CH0_SKIP_REG3_89_80<6>, SC_PCS_CH0_SKIP_REG3_89_80<5>, SC_PCS_CH0_SKIP_REG3_89_80<4>, SC_PCS_CH0_SKIP_REG3_89_80<3>, SC_PCS_CH0_SKIP_REG3_89_80<2>, SC_PCS_CH0_SKIP_REG3_89_80<1>, SC_PCS_CH0_SKIP_REG3_89_80<0>" */,
       config input SC_PCS_CH0_DEC_DUAL_90    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_DEC_DUAL_90" */,
       config input SC_PCS_CH0_SPLIT_91    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_SPLIT_91" */,
       config input SC_PCS_CH0_FIFOFLAG_CTC_92    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_FIFOFLAG_CTC_92" */,
       config input SC_PCS_CH0_COMMA_DET_MODE_93    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_COMMA_DET_MODE_93" */,
       config input SC_PCS_CH0_ERRDETECT_SILENCE_94    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_ERRDETECT_SILENCE_94" */,
       config input SC_PCS_CH0_PMA_RCLK_POLINV_96    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_PMA_RCLK_POLINV_96" */,
       config input SC_PCS_CH0_PCS_RCLK_SEL_97    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_PCS_RCLK_SEL_97" */,
       config input SC_PCS_CH0_MCB_RCLK_POLINV_98    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_MCB_RCLK_POLINV_98" */,
       config input SC_PCS_CH0_CB_RCLK_SEL_100_99[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_CB_RCLK_SEL_100_99<1>, SC_PCS_CH0_CB_RCLK_SEL_100_99<0>" */,
       config input SC_PCS_CH0_AFTER_CTC_RCLK_SEL_102_101[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_AFTER_CTC_RCLK_SEL_102_101<1>, SC_PCS_CH0_AFTER_CTC_RCLK_SEL_102_101<0>" */,
       config input SC_PCS_CH0_RCLK_POLINV_103    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_RCLK_POLINV_103" */,
       config input SC_PCS_CH0_BRIDGE_RCLK_SEL_105_104[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_BRIDGE_RCLK_SEL_105_104<1>, SC_PCS_CH0_BRIDGE_RCLK_SEL_105_104<0>" */,
       config input SC_PCS_CH0_PCS_RCLK_EN_106    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_PCS_RCLK_EN_106" */,
       config input SC_PCS_CH0_CB_RCLK_EN_107    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_CB_RCLK_EN_107" */,
       config input SC_PCS_CH0_AFTER_CTC_RCLK_EN_108    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_AFTER_CTC_RCLK_EN_108" */,
       config input SC_PCS_CH0_AFTER_CTC_RCLK_EN_GB_109    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_AFTER_CTC_RCLK_EN_GB_109" */,
       config input SC_PCS_CH0_BRIDGE_RCLK_EN_110    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_BRIDGE_RCLK_EN_110" */,
       config input SC_PCS_CH0_PCS_RX_RSTN_112    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_PCS_RX_RSTN_112" */,
       config input SC_PCS_CH0_SLAVE_113    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_SLAVE_113" */,
       config input SC_PCS_CH0_PCIE_SLAVE_114    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_PCIE_SLAVE_114" */,
       config input SC_PCS_CH0_PCS_CB_RSTN_120    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_PCS_CB_RSTN_120" */,
       config input SC_PCS_CH0_TX_BYPASS_BRIDGE_UINT_129    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_TX_BYPASS_BRIDGE_UINT_129" */,
       config input SC_PCS_CH0_TX_BYPASS_GEAR_130    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_TX_BYPASS_GEAR_130" */,
       config input SC_PCS_CH0_TX_BYPASS_ENC_131    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_TX_BYPASS_ENC_131" */,
       config input SC_PCS_CH0_TX_BYPASS_BIT_SLIP_132    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_TX_BYPASS_BIT_SLIP_132" */,
       config input SC_PCS_CH0_TX_GEAR_SPLIT_136    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_TX_GEAR_SPLIT_136" */,
       config input SC_PCS_CH0_TX_DRIVE_REG_MODE_138_137[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_TX_DRIVE_REG_MODE_138_137<1>, SC_PCS_CH0_TX_DRIVE_REG_MODE_138_137<0>" */,
       config input SC_PCS_CH0_TX_BIT_SLIP_CYCLES_143_139[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_TX_BIT_SLIP_CYCLES_143_139<4>, SC_PCS_CH0_TX_BIT_SLIP_CYCLES_143_139<3>, SC_PCS_CH0_TX_BIT_SLIP_CYCLES_143_139<2>, SC_PCS_CH0_TX_BIT_SLIP_CYCLES_143_139<1>, SC_PCS_CH0_TX_BIT_SLIP_CYCLES_143_139<0>" */,
       config input SC_PCS_CH0_INT_TX_MASK_0_144    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_INT_TX_MASK_0_144" */,
       config input SC_PCS_CH0_INT_TX_MASK_1_145    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_INT_TX_MASK_1_145" */,
       config input SC_PCS_CH0_INT_TX_MASK_2_146    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_INT_TX_MASK_2_146" */,
       config input SC_PCS_CH0_INT_TX_CLR_0_152    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_INT_TX_CLR_0_152" */,
       config input SC_PCS_CH0_INT_TX_CLR_1_153    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_INT_TX_CLR_1_153" */,
       config input SC_PCS_CH0_INT_TX_CLR_2_154    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_INT_TX_CLR_2_154" */,
       config input SC_PCS_CH0_TX_PMA_TCLK_POLINV_160    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_TX_PMA_TCLK_POLINV_160" */,
       config input SC_PCS_CH0_TX_PCS_CLK_EN_SEL_161    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_TX_PCS_CLK_EN_SEL_161" */,
       config input SC_PCS_CH0_TX_BRIDGE_TCLK_SEL_162    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_TX_BRIDGE_TCLK_SEL_162" */,
       config input SC_PCS_CH0_TX_TCLK_POLINV_163    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_TX_TCLK_POLINV_163" */,
       config input SC_PCS_CH0_TX_PCS_TX_RSTN_165    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_TX_PCS_TX_RSTN_165" */,
       config input SC_PCS_CH0_TX_SLAVE_166    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_TX_SLAVE_166" */,
       config input SC_PCS_CH0_TX_BRIDGE_CLK_EN_SEL_167    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_TX_BRIDGE_CLK_EN_SEL_167" */,
       config input SC_PCS_CH0_DATA_WIDTH_MODE_169_168[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_DATA_WIDTH_MODE_169_168<1>, SC_PCS_CH0_DATA_WIDTH_MODE_169_168<0>" */,
       config input SC_PCS_CH0_TX_TCLK2FABRIC_SEL_176    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_TX_TCLK2FABRIC_SEL_176" */,
       config input SC_PCS_CH0_TX_OUTZZ_177    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_TX_OUTZZ_177" */,
       config input SC_PCS_CH0_ENC_DUAL_178    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_ENC_DUAL_178" */,
       config input SC_PCS_CH0_TX_BITSLIP_DATA_MODE_179    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_TX_BITSLIP_DATA_MODE_179" */,
       config input SC_PCS_CH0_COMMA_REG1_193_184[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_COMMA_REG1_193_184<9>, SC_PCS_CH0_COMMA_REG1_193_184<8>, SC_PCS_CH0_COMMA_REG1_193_184<7>, SC_PCS_CH0_COMMA_REG1_193_184<6>, SC_PCS_CH0_COMMA_REG1_193_184<5>, SC_PCS_CH0_COMMA_REG1_193_184<4>, SC_PCS_CH0_COMMA_REG1_193_184<3>, SC_PCS_CH0_COMMA_REG1_193_184<2>, SC_PCS_CH0_COMMA_REG1_193_184<1>, SC_PCS_CH0_COMMA_REG1_193_184<0>" */,
       config input SC_PCS_CH0_RAPID_IMAX_202_200[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_RAPID_IMAX_202_200<2>, SC_PCS_CH0_RAPID_IMAX_202_200<1>, SC_PCS_CH0_RAPID_IMAX_202_200<0>" */,
       config input SC_PCS_CH0_RAPID_VMIN_1_215_208[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_RAPID_VMIN_1_215_208<7>, SC_PCS_CH0_RAPID_VMIN_1_215_208<6>, SC_PCS_CH0_RAPID_VMIN_1_215_208<5>, SC_PCS_CH0_RAPID_VMIN_1_215_208<4>, SC_PCS_CH0_RAPID_VMIN_1_215_208<3>, SC_PCS_CH0_RAPID_VMIN_1_215_208<2>, SC_PCS_CH0_RAPID_VMIN_1_215_208<1>, SC_PCS_CH0_RAPID_VMIN_1_215_208<0>" */,
       config input SC_PCS_CH0_RAPID_VMIN_2_223_216[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_RAPID_VMIN_2_223_216<7>, SC_PCS_CH0_RAPID_VMIN_2_223_216<6>, SC_PCS_CH0_RAPID_VMIN_2_223_216<5>, SC_PCS_CH0_RAPID_VMIN_2_223_216<4>, SC_PCS_CH0_RAPID_VMIN_2_223_216<3>, SC_PCS_CH0_RAPID_VMIN_2_223_216<2>, SC_PCS_CH0_RAPID_VMIN_2_223_216<1>, SC_PCS_CH0_RAPID_VMIN_2_223_216<0>" */,
       config input SC_PCS_CH0_RX_PRBS_MODE_227_224[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_RX_PRBS_MODE_227_224<3>, SC_PCS_CH0_RX_PRBS_MODE_227_224<2>, SC_PCS_CH0_RX_PRBS_MODE_227_224<1>, SC_PCS_CH0_RX_PRBS_MODE_227_224<0>" */,
       config input SC_PCS_CH0_RX_ERRCNT_CLR_228    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_RX_ERRCNT_CLR_228" */,
       config input SC_PCS_CH0_TX_PRBS_MODE_235_232[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_TX_PRBS_MODE_235_232<3>, SC_PCS_CH0_TX_PRBS_MODE_235_232<2>, SC_PCS_CH0_TX_PRBS_MODE_235_232<1>, SC_PCS_CH0_TX_PRBS_MODE_235_232<0>" */,
       config input SC_PCS_CH0_TX_INSERT_ER_236    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_TX_INSERT_ER_236" */,
       config input SC_PCS_CH0_ENABLE_PRBS_GEN_237    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_ENABLE_PRBS_GEN_237" */,
       config input SC_PCS_CH0_ERR_CNT_247_240[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_ERR_CNT_247_240<7>, SC_PCS_CH0_ERR_CNT_247_240<6>, SC_PCS_CH0_ERR_CNT_247_240<5>, SC_PCS_CH0_ERR_CNT_247_240<4>, SC_PCS_CH0_ERR_CNT_247_240<3>, SC_PCS_CH0_ERR_CNT_247_240<2>, SC_PCS_CH0_ERR_CNT_247_240<1>, SC_PCS_CH0_ERR_CNT_247_240<0>" */,
       config input SC_PCS_CH0_DEFAULT_RADDR_251_248[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_DEFAULT_RADDR_251_248<3>, SC_PCS_CH0_DEFAULT_RADDR_251_248<2>, SC_PCS_CH0_DEFAULT_RADDR_251_248<1>, SC_PCS_CH0_DEFAULT_RADDR_251_248<0>" */,
       config input SC_PCS_CH0_MASTER_CHECK_OFFSET_255_252[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_MASTER_CHECK_OFFSET_255_252<3>, SC_PCS_CH0_MASTER_CHECK_OFFSET_255_252<2>, SC_PCS_CH0_MASTER_CHECK_OFFSET_255_252<1>, SC_PCS_CH0_MASTER_CHECK_OFFSET_255_252<0>" */,
       config input SC_PCS_CH0_DELAY_SET_259_256[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_DELAY_SET_259_256<3>, SC_PCS_CH0_DELAY_SET_259_256<2>, SC_PCS_CH0_DELAY_SET_259_256<1>, SC_PCS_CH0_DELAY_SET_259_256<0>" */,
       config input SC_PCS_CH0_SEACH_OFFSET_262_260[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_SEACH_OFFSET_262_260<2>, SC_PCS_CH0_SEACH_OFFSET_262_260<1>, SC_PCS_CH0_SEACH_OFFSET_262_260<0>" */,
       config input SC_PCS_CH0_CEB_RAPIDLS_MMAX_266_264[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_CEB_RAPIDLS_MMAX_266_264<2>, SC_PCS_CH0_CEB_RAPIDLS_MMAX_266_264<1>, SC_PCS_CH0_CEB_RAPIDLS_MMAX_266_264<0>" */,
       config input SC_PCS_CH0_CTC_AFULL_276_272[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_CTC_AFULL_276_272<4>, SC_PCS_CH0_CTC_AFULL_276_272<3>, SC_PCS_CH0_CTC_AFULL_276_272<2>, SC_PCS_CH0_CTC_AFULL_276_272<1>, SC_PCS_CH0_CTC_AFULL_276_272<0>" */,
       config input SC_PCS_CH0_CTC_AEMPTY_284_280[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_CTC_AEMPTY_284_280<4>, SC_PCS_CH0_CTC_AEMPTY_284_280<3>, SC_PCS_CH0_CTC_AEMPTY_284_280<2>, SC_PCS_CH0_CTC_AEMPTY_284_280<1>, SC_PCS_CH0_CTC_AEMPTY_284_280<0>" */,
       config input SC_PCS_CH0_FAR_LOOP_288    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_FAR_LOOP_288" */,
       config input SC_PCS_CH0_NEAR_LOOP_289    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_NEAR_LOOP_289" */,
       config input SC_PCS_CH0_INT_RX_MASK_0_296    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_INT_RX_MASK_0_296" */,
       config input SC_PCS_CH0_INT_RX_MASK_1_297    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_INT_RX_MASK_1_297" */,
       config input SC_PCS_CH0_INT_RX_MASK_2_298    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_INT_RX_MASK_2_298" */,
       config input SC_PCS_CH0_INT_RX_MASK_3_299    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_INT_RX_MASK_3_299" */,
       config input SC_PCS_CH0_INT_RX_MASK_4_300    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_INT_RX_MASK_4_300" */,
       config input SC_PCS_CH0_INT_RX_MASK_5_301    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_INT_RX_MASK_5_301" */,
       config input SC_PCS_CH0_INT_RX_MASK_6_302    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_INT_RX_MASK_6_302" */,
       config input SC_PCS_CH0_INT_RX_MASK_7_303    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_INT_RX_MASK_7_303" */,
       config input SC_PCS_CH0_INT_RX_CLR_0_304    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_INT_RX_CLR_0_304" */,
       config input SC_PCS_CH0_INT_RX_CLR_1_305    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_INT_RX_CLR_1_305" */,
       config input SC_PCS_CH0_INT_RX_CLR_2_306    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_INT_RX_CLR_2_306" */,
       config input SC_PCS_CH0_INT_RX_CLR_3_307    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_INT_RX_CLR_3_307" */,
       config input SC_PCS_CH0_INT_RX_CLR_4_308    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_INT_RX_CLR_4_308" */,
       config input SC_PCS_CH0_INT_RX_CLR_5_309    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_INT_RX_CLR_5_309" */,
       config input SC_PCS_CH0_INT_RX_CLR_6_310    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_INT_RX_CLR_6_310" */,
       config input SC_PCS_CH0_INT_RX_CLR_7_311    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH0_INT_RX_CLR_7_311" */,
       config input SC_PCS_CH1_BYPASS_WORD_ALIGN_1    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_BYPASS_WORD_ALIGN_1" */,
       config input SC_PCS_CH1_BYPASS_DENC_2    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_BYPASS_DENC_2" */,
       config input SC_PCS_CH1_BYPASS_BONDING_3    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_BYPASS_BONDING_3" */,
       config input SC_PCS_CH1_BYPASS_CTC_4    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_BYPASS_CTC_4" */,
       config input SC_PCS_CH1_BYPASS_GEAR_5    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_BYPASS_GEAR_5" */,
       config input SC_PCS_CH1_BYPASS_BRIDGE_6    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_BYPASS_BRIDGE_6" */,
       config input SC_PCS_CH1_DATA_MODE_8    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_DATA_MODE_8" */,
       config input SC_PCS_CH1_RX_POLARITY_INV_10_9[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_RX_POLARITY_INV_10_9<1>, SC_PCS_CH1_RX_POLARITY_INV_10_9<0>" */,
       config input SC_PCS_CH1_ALIGN_MODE_12_11[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_ALIGN_MODE_12_11<1>, SC_PCS_CH1_ALIGN_MODE_12_11<0>" */,
       config input SC_PCS_CH1_SAMP_16B_13    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_SAMP_16B_13" */,
       config input SC_PCS_CH1_COMMA_REG0_25_16[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_COMMA_REG0_25_16<9>, SC_PCS_CH1_COMMA_REG0_25_16<8>, SC_PCS_CH1_COMMA_REG0_25_16<7>, SC_PCS_CH1_COMMA_REG0_25_16<6>, SC_PCS_CH1_COMMA_REG0_25_16<5>, SC_PCS_CH1_COMMA_REG0_25_16<4>, SC_PCS_CH1_COMMA_REG0_25_16<3>, SC_PCS_CH1_COMMA_REG0_25_16<2>, SC_PCS_CH1_COMMA_REG0_25_16<1>, SC_PCS_CH1_COMMA_REG0_25_16<0>" */,
       config input SC_PCS_CH1_COMMA_MASK_35_26[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_COMMA_MASK_35_26<9>, SC_PCS_CH1_COMMA_MASK_35_26<8>, SC_PCS_CH1_COMMA_MASK_35_26<7>, SC_PCS_CH1_COMMA_MASK_35_26<6>, SC_PCS_CH1_COMMA_MASK_35_26<5>, SC_PCS_CH1_COMMA_MASK_35_26<4>, SC_PCS_CH1_COMMA_MASK_35_26<3>, SC_PCS_CH1_COMMA_MASK_35_26<2>, SC_PCS_CH1_COMMA_MASK_35_26<1>, SC_PCS_CH1_COMMA_MASK_35_26<0>" */,
       config input SC_PCS_CH1_CEB_MODE_37_36[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_CEB_MODE_37_36<1>, SC_PCS_CH1_CEB_MODE_37_36<0>" */,
       config input SC_PCS_CH1_CTC_MODE_39_38[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_CTC_MODE_39_38<1>, SC_PCS_CH1_CTC_MODE_39_38<0>" */,
       config input SC_PCS_CH1_A_REG_47_40[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_A_REG_47_40<7>, SC_PCS_CH1_A_REG_47_40<6>, SC_PCS_CH1_A_REG_47_40<5>, SC_PCS_CH1_A_REG_47_40<4>, SC_PCS_CH1_A_REG_47_40<3>, SC_PCS_CH1_A_REG_47_40<2>, SC_PCS_CH1_A_REG_47_40<1>, SC_PCS_CH1_A_REG_47_40<0>" */,
       config input SC_PCS_CH1_GE_AUTO_EN_49    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_GE_AUTO_EN_49" */,
       config input SC_PCS_CH1_SKIP_REG0_59_50[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_SKIP_REG0_59_50<9>, SC_PCS_CH1_SKIP_REG0_59_50<8>, SC_PCS_CH1_SKIP_REG0_59_50<7>, SC_PCS_CH1_SKIP_REG0_59_50<6>, SC_PCS_CH1_SKIP_REG0_59_50<5>, SC_PCS_CH1_SKIP_REG0_59_50<4>, SC_PCS_CH1_SKIP_REG0_59_50<3>, SC_PCS_CH1_SKIP_REG0_59_50<2>, SC_PCS_CH1_SKIP_REG0_59_50<1>, SC_PCS_CH1_SKIP_REG0_59_50<0>" */,
       config input SC_PCS_CH1_SKIP_REG1_69_60[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_SKIP_REG1_69_60<9>, SC_PCS_CH1_SKIP_REG1_69_60<8>, SC_PCS_CH1_SKIP_REG1_69_60<7>, SC_PCS_CH1_SKIP_REG1_69_60<6>, SC_PCS_CH1_SKIP_REG1_69_60<5>, SC_PCS_CH1_SKIP_REG1_69_60<4>, SC_PCS_CH1_SKIP_REG1_69_60<3>, SC_PCS_CH1_SKIP_REG1_69_60<2>, SC_PCS_CH1_SKIP_REG1_69_60<1>, SC_PCS_CH1_SKIP_REG1_69_60<0>" */,
       config input SC_PCS_CH1_SKIP_REG2_79_70[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_SKIP_REG2_79_70<9>, SC_PCS_CH1_SKIP_REG2_79_70<8>, SC_PCS_CH1_SKIP_REG2_79_70<7>, SC_PCS_CH1_SKIP_REG2_79_70<6>, SC_PCS_CH1_SKIP_REG2_79_70<5>, SC_PCS_CH1_SKIP_REG2_79_70<4>, SC_PCS_CH1_SKIP_REG2_79_70<3>, SC_PCS_CH1_SKIP_REG2_79_70<2>, SC_PCS_CH1_SKIP_REG2_79_70<1>, SC_PCS_CH1_SKIP_REG2_79_70<0>" */,
       config input SC_PCS_CH1_SKIP_REG3_89_80[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_SKIP_REG3_89_80<9>, SC_PCS_CH1_SKIP_REG3_89_80<8>, SC_PCS_CH1_SKIP_REG3_89_80<7>, SC_PCS_CH1_SKIP_REG3_89_80<6>, SC_PCS_CH1_SKIP_REG3_89_80<5>, SC_PCS_CH1_SKIP_REG3_89_80<4>, SC_PCS_CH1_SKIP_REG3_89_80<3>, SC_PCS_CH1_SKIP_REG3_89_80<2>, SC_PCS_CH1_SKIP_REG3_89_80<1>, SC_PCS_CH1_SKIP_REG3_89_80<0>" */,
       config input SC_PCS_CH1_DEC_DUAL_90    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_DEC_DUAL_90" */,
       config input SC_PCS_CH1_SPLIT_91    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_SPLIT_91" */,
       config input SC_PCS_CH1_FIFOFLAG_CTC_92    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_FIFOFLAG_CTC_92" */,
       config input SC_PCS_CH1_COMMA_DET_MODE_93    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_COMMA_DET_MODE_93" */,
       config input SC_PCS_CH1_ERRDETECT_SILENCE_94    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_ERRDETECT_SILENCE_94" */,
       config input SC_PCS_CH1_PMA_RCLK_POLINV_96    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_PMA_RCLK_POLINV_96" */,
       config input SC_PCS_CH1_PCS_RCLK_SEL_97    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_PCS_RCLK_SEL_97" */,
       config input SC_PCS_CH1_MCB_RCLK_POLINV_98    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_MCB_RCLK_POLINV_98" */,
       config input SC_PCS_CH1_CB_RCLK_SEL_100_99[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_CB_RCLK_SEL_100_99<1>, SC_PCS_CH1_CB_RCLK_SEL_100_99<0>" */,
       config input SC_PCS_CH1_AFTER_CTC_RCLK_SEL_102_101[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_AFTER_CTC_RCLK_SEL_102_101<1>, SC_PCS_CH1_AFTER_CTC_RCLK_SEL_102_101<0>" */,
       config input SC_PCS_CH1_RCLK_POLINV_103    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_RCLK_POLINV_103" */,
       config input SC_PCS_CH1_BRIDGE_RCLK_SEL_105_104[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_BRIDGE_RCLK_SEL_105_104<1>, SC_PCS_CH1_BRIDGE_RCLK_SEL_105_104<0>" */,
       config input SC_PCS_CH1_PCS_RCLK_EN_106    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_PCS_RCLK_EN_106" */,
       config input SC_PCS_CH1_CB_RCLK_EN_107    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_CB_RCLK_EN_107" */,
       config input SC_PCS_CH1_AFTER_CTC_RCLK_EN_108    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_AFTER_CTC_RCLK_EN_108" */,
       config input SC_PCS_CH1_AFTER_CTC_RCLK_EN_GB_109    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_AFTER_CTC_RCLK_EN_GB_109" */,
       config input SC_PCS_CH1_BRIDGE_RCLK_EN_110    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_BRIDGE_RCLK_EN_110" */,
       config input SC_PCS_CH1_PCS_RX_RSTN_112    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_PCS_RX_RSTN_112" */,
       config input SC_PCS_CH1_SLAVE_113    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_SLAVE_113" */,
       config input SC_PCS_CH1_PCIE_SLAVE_114    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_PCIE_SLAVE_114" */,
       config input SC_PCS_CH1_PCS_CB_RSTN_120    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_PCS_CB_RSTN_120" */,
       config input SC_PCS_CH1_TX_BYPASS_BRIDGE_UINT_129    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_TX_BYPASS_BRIDGE_UINT_129" */,
       config input SC_PCS_CH1_TX_BYPASS_GEAR_130    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_TX_BYPASS_GEAR_130" */,
       config input SC_PCS_CH1_TX_BYPASS_ENC_131    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_TX_BYPASS_ENC_131" */,
       config input SC_PCS_CH1_TX_BYPASS_BIT_SLIP_132    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_TX_BYPASS_BIT_SLIP_132" */,
       config input SC_PCS_CH1_TX_GEAR_SPLIT_136    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_TX_GEAR_SPLIT_136" */,
       config input SC_PCS_CH1_TX_DRIVE_REG_MODE_138_137[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_TX_DRIVE_REG_MODE_138_137<1>, SC_PCS_CH1_TX_DRIVE_REG_MODE_138_137<0>" */,
       config input SC_PCS_CH1_TX_BIT_SLIP_CYCLES_143_139[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_TX_BIT_SLIP_CYCLES_143_139<4>, SC_PCS_CH1_TX_BIT_SLIP_CYCLES_143_139<3>, SC_PCS_CH1_TX_BIT_SLIP_CYCLES_143_139<2>, SC_PCS_CH1_TX_BIT_SLIP_CYCLES_143_139<1>, SC_PCS_CH1_TX_BIT_SLIP_CYCLES_143_139<0>" */,
       config input SC_PCS_CH1_INT_TX_MASK_0_144    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_INT_TX_MASK_0_144" */,
       config input SC_PCS_CH1_INT_TX_MASK_1_145    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_INT_TX_MASK_1_145" */,
       config input SC_PCS_CH1_INT_TX_MASK_2_146    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_INT_TX_MASK_2_146" */,
       config input SC_PCS_CH1_INT_TX_CLR_0_152    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_INT_TX_CLR_0_152" */,
       config input SC_PCS_CH1_INT_TX_CLR_1_153    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_INT_TX_CLR_1_153" */,
       config input SC_PCS_CH1_INT_TX_CLR_2_154    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_INT_TX_CLR_2_154" */,
       config input SC_PCS_CH1_TX_PMA_TCLK_POLINV_160    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_TX_PMA_TCLK_POLINV_160" */,
       config input SC_PCS_CH1_TX_PCS_CLK_EN_SEL_161    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_TX_PCS_CLK_EN_SEL_161" */,
       config input SC_PCS_CH1_TX_BRIDGE_TCLK_SEL_162    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_TX_BRIDGE_TCLK_SEL_162" */,
       config input SC_PCS_CH1_TX_TCLK_POLINV_163    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_TX_TCLK_POLINV_163" */,
       config input SC_PCS_CH1_TX_PCS_TX_RSTN_165    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_TX_PCS_TX_RSTN_165" */,
       config input SC_PCS_CH1_TX_SLAVE_166    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_TX_SLAVE_166" */,
       config input SC_PCS_CH1_TX_BRIDGE_CLK_EN_SEL_167    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_TX_BRIDGE_CLK_EN_SEL_167" */,
       config input SC_PCS_CH1_DATA_WIDTH_MODE_169_168[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_DATA_WIDTH_MODE_169_168<1>, SC_PCS_CH1_DATA_WIDTH_MODE_169_168<0>" */,
       config input SC_PCS_CH1_TX_TCLK2FABRIC_SEL_176    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_TX_TCLK2FABRIC_SEL_176" */,
       config input SC_PCS_CH1_TX_OUTZZ_177    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_TX_OUTZZ_177" */,
       config input SC_PCS_CH1_ENC_DUAL_178    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_ENC_DUAL_178" */,
       config input SC_PCS_CH1_TX_BITSLIP_DATA_MODE_179    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_TX_BITSLIP_DATA_MODE_179" */,
       config input SC_PCS_CH1_COMMA_REG1_193_184[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_COMMA_REG1_193_184<9>, SC_PCS_CH1_COMMA_REG1_193_184<8>, SC_PCS_CH1_COMMA_REG1_193_184<7>, SC_PCS_CH1_COMMA_REG1_193_184<6>, SC_PCS_CH1_COMMA_REG1_193_184<5>, SC_PCS_CH1_COMMA_REG1_193_184<4>, SC_PCS_CH1_COMMA_REG1_193_184<3>, SC_PCS_CH1_COMMA_REG1_193_184<2>, SC_PCS_CH1_COMMA_REG1_193_184<1>, SC_PCS_CH1_COMMA_REG1_193_184<0>" */,
       config input SC_PCS_CH1_RAPID_IMAX_202_200[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_RAPID_IMAX_202_200<2>, SC_PCS_CH1_RAPID_IMAX_202_200<1>, SC_PCS_CH1_RAPID_IMAX_202_200<0>" */,
       config input SC_PCS_CH1_RAPID_VMIN_1_215_208[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_RAPID_VMIN_1_215_208<7>, SC_PCS_CH1_RAPID_VMIN_1_215_208<6>, SC_PCS_CH1_RAPID_VMIN_1_215_208<5>, SC_PCS_CH1_RAPID_VMIN_1_215_208<4>, SC_PCS_CH1_RAPID_VMIN_1_215_208<3>, SC_PCS_CH1_RAPID_VMIN_1_215_208<2>, SC_PCS_CH1_RAPID_VMIN_1_215_208<1>, SC_PCS_CH1_RAPID_VMIN_1_215_208<0>" */,
       config input SC_PCS_CH1_RAPID_VMIN_2_223_216[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_RAPID_VMIN_2_223_216<7>, SC_PCS_CH1_RAPID_VMIN_2_223_216<6>, SC_PCS_CH1_RAPID_VMIN_2_223_216<5>, SC_PCS_CH1_RAPID_VMIN_2_223_216<4>, SC_PCS_CH1_RAPID_VMIN_2_223_216<3>, SC_PCS_CH1_RAPID_VMIN_2_223_216<2>, SC_PCS_CH1_RAPID_VMIN_2_223_216<1>, SC_PCS_CH1_RAPID_VMIN_2_223_216<0>" */,
       config input SC_PCS_CH1_RX_PRBS_MODE_227_224[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_RX_PRBS_MODE_227_224<3>, SC_PCS_CH1_RX_PRBS_MODE_227_224<2>, SC_PCS_CH1_RX_PRBS_MODE_227_224<1>, SC_PCS_CH1_RX_PRBS_MODE_227_224<0>" */,
       config input SC_PCS_CH1_RX_ERRCNT_CLR_228    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_RX_ERRCNT_CLR_228" */,
       config input SC_PCS_CH1_TX_PRBS_MODE_235_232[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_TX_PRBS_MODE_235_232<3>, SC_PCS_CH1_TX_PRBS_MODE_235_232<2>, SC_PCS_CH1_TX_PRBS_MODE_235_232<1>, SC_PCS_CH1_TX_PRBS_MODE_235_232<0>" */,
       config input SC_PCS_CH1_TX_INSERT_ER_236    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_TX_INSERT_ER_236" */,
       config input SC_PCS_CH1_ENABLE_PRBS_GEN_237    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_ENABLE_PRBS_GEN_237" */,
       config input SC_PCS_CH1_ERR_CNT_247_240[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_ERR_CNT_247_240<7>, SC_PCS_CH1_ERR_CNT_247_240<6>, SC_PCS_CH1_ERR_CNT_247_240<5>, SC_PCS_CH1_ERR_CNT_247_240<4>, SC_PCS_CH1_ERR_CNT_247_240<3>, SC_PCS_CH1_ERR_CNT_247_240<2>, SC_PCS_CH1_ERR_CNT_247_240<1>, SC_PCS_CH1_ERR_CNT_247_240<0>" */,
       config input SC_PCS_CH1_DEFAULT_RADDR_251_248[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_DEFAULT_RADDR_251_248<3>, SC_PCS_CH1_DEFAULT_RADDR_251_248<2>, SC_PCS_CH1_DEFAULT_RADDR_251_248<1>, SC_PCS_CH1_DEFAULT_RADDR_251_248<0>" */,
       config input SC_PCS_CH1_MASTER_CHECK_OFFSET_255_252[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_MASTER_CHECK_OFFSET_255_252<3>, SC_PCS_CH1_MASTER_CHECK_OFFSET_255_252<2>, SC_PCS_CH1_MASTER_CHECK_OFFSET_255_252<1>, SC_PCS_CH1_MASTER_CHECK_OFFSET_255_252<0>" */,
       config input SC_PCS_CH1_DELAY_SET_259_256[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_DELAY_SET_259_256<3>, SC_PCS_CH1_DELAY_SET_259_256<2>, SC_PCS_CH1_DELAY_SET_259_256<1>, SC_PCS_CH1_DELAY_SET_259_256<0>" */,
       config input SC_PCS_CH1_SEACH_OFFSET_262_260[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_SEACH_OFFSET_262_260<2>, SC_PCS_CH1_SEACH_OFFSET_262_260<1>, SC_PCS_CH1_SEACH_OFFSET_262_260<0>" */,
       config input SC_PCS_CH1_CEB_RAPIDLS_MMAX_266_264[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_CEB_RAPIDLS_MMAX_266_264<2>, SC_PCS_CH1_CEB_RAPIDLS_MMAX_266_264<1>, SC_PCS_CH1_CEB_RAPIDLS_MMAX_266_264<0>" */,
       config input SC_PCS_CH1_CTC_AFULL_276_272[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_CTC_AFULL_276_272<4>, SC_PCS_CH1_CTC_AFULL_276_272<3>, SC_PCS_CH1_CTC_AFULL_276_272<2>, SC_PCS_CH1_CTC_AFULL_276_272<1>, SC_PCS_CH1_CTC_AFULL_276_272<0>" */,
       config input SC_PCS_CH1_CTC_AEMPTY_284_280[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_CTC_AEMPTY_284_280<4>, SC_PCS_CH1_CTC_AEMPTY_284_280<3>, SC_PCS_CH1_CTC_AEMPTY_284_280<2>, SC_PCS_CH1_CTC_AEMPTY_284_280<1>, SC_PCS_CH1_CTC_AEMPTY_284_280<0>" */,
       config input SC_PCS_CH1_FAR_LOOP_288    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_FAR_LOOP_288" */,
       config input SC_PCS_CH1_NEAR_LOOP_289    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_NEAR_LOOP_289" */,
       config input SC_PCS_CH1_INT_RX_MASK_0_296    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_INT_RX_MASK_0_296" */,
       config input SC_PCS_CH1_INT_RX_MASK_1_297    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_INT_RX_MASK_1_297" */,
       config input SC_PCS_CH1_INT_RX_MASK_2_298    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_INT_RX_MASK_2_298" */,
       config input SC_PCS_CH1_INT_RX_MASK_3_299    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_INT_RX_MASK_3_299" */,
       config input SC_PCS_CH1_INT_RX_MASK_4_300    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_INT_RX_MASK_4_300" */,
       config input SC_PCS_CH1_INT_RX_MASK_5_301    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_INT_RX_MASK_5_301" */,
       config input SC_PCS_CH1_INT_RX_MASK_6_302    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_INT_RX_MASK_6_302" */,
       config input SC_PCS_CH1_INT_RX_MASK_7_303    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_INT_RX_MASK_7_303" */,
       config input SC_PCS_CH1_INT_RX_CLR_0_304    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_INT_RX_CLR_0_304" */,
       config input SC_PCS_CH1_INT_RX_CLR_1_305    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_INT_RX_CLR_1_305" */,
       config input SC_PCS_CH1_INT_RX_CLR_2_306    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_INT_RX_CLR_2_306" */,
       config input SC_PCS_CH1_INT_RX_CLR_3_307    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_INT_RX_CLR_3_307" */,
       config input SC_PCS_CH1_INT_RX_CLR_4_308    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_INT_RX_CLR_4_308" */,
       config input SC_PCS_CH1_INT_RX_CLR_5_309    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_INT_RX_CLR_5_309" */,
       config input SC_PCS_CH1_INT_RX_CLR_6_310    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_INT_RX_CLR_6_310" */,
       config input SC_PCS_CH1_INT_RX_CLR_7_311    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH1_INT_RX_CLR_7_311" */,
       config input SC_PCS_CH2_BYPASS_WORD_ALIGN_1    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_BYPASS_WORD_ALIGN_1" */,
       config input SC_PCS_CH2_BYPASS_DENC_2    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_BYPASS_DENC_2" */,
       config input SC_PCS_CH2_BYPASS_BONDING_3    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_BYPASS_BONDING_3" */,
       config input SC_PCS_CH2_BYPASS_CTC_4    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_BYPASS_CTC_4" */,
       config input SC_PCS_CH2_BYPASS_GEAR_5    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_BYPASS_GEAR_5" */,
       config input SC_PCS_CH2_BYPASS_BRIDGE_6    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_BYPASS_BRIDGE_6" */,
       config input SC_PCS_CH2_DATA_MODE_8    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_DATA_MODE_8" */,
       config input SC_PCS_CH2_RX_POLARITY_INV_10_9[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_RX_POLARITY_INV_10_9<1>, SC_PCS_CH2_RX_POLARITY_INV_10_9<0>" */,
       config input SC_PCS_CH2_ALIGN_MODE_12_11[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_ALIGN_MODE_12_11<1>, SC_PCS_CH2_ALIGN_MODE_12_11<0>" */,
       config input SC_PCS_CH2_SAMP_16B_13    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_SAMP_16B_13" */,
       config input SC_PCS_CH2_COMMA_REG0_25_16[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_COMMA_REG0_25_16<9>, SC_PCS_CH2_COMMA_REG0_25_16<8>, SC_PCS_CH2_COMMA_REG0_25_16<7>, SC_PCS_CH2_COMMA_REG0_25_16<6>, SC_PCS_CH2_COMMA_REG0_25_16<5>, SC_PCS_CH2_COMMA_REG0_25_16<4>, SC_PCS_CH2_COMMA_REG0_25_16<3>, SC_PCS_CH2_COMMA_REG0_25_16<2>, SC_PCS_CH2_COMMA_REG0_25_16<1>, SC_PCS_CH2_COMMA_REG0_25_16<0>" */,
       config input SC_PCS_CH2_COMMA_MASK_35_26[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_COMMA_MASK_35_26<9>, SC_PCS_CH2_COMMA_MASK_35_26<8>, SC_PCS_CH2_COMMA_MASK_35_26<7>, SC_PCS_CH2_COMMA_MASK_35_26<6>, SC_PCS_CH2_COMMA_MASK_35_26<5>, SC_PCS_CH2_COMMA_MASK_35_26<4>, SC_PCS_CH2_COMMA_MASK_35_26<3>, SC_PCS_CH2_COMMA_MASK_35_26<2>, SC_PCS_CH2_COMMA_MASK_35_26<1>, SC_PCS_CH2_COMMA_MASK_35_26<0>" */,
       config input SC_PCS_CH2_CEB_MODE_37_36[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_CEB_MODE_37_36<1>, SC_PCS_CH2_CEB_MODE_37_36<0>" */,
       config input SC_PCS_CH2_CTC_MODE_39_38[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_CTC_MODE_39_38<1>, SC_PCS_CH2_CTC_MODE_39_38<0>" */,
       config input SC_PCS_CH2_A_REG_47_40[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_A_REG_47_40<7>, SC_PCS_CH2_A_REG_47_40<6>, SC_PCS_CH2_A_REG_47_40<5>, SC_PCS_CH2_A_REG_47_40<4>, SC_PCS_CH2_A_REG_47_40<3>, SC_PCS_CH2_A_REG_47_40<2>, SC_PCS_CH2_A_REG_47_40<1>, SC_PCS_CH2_A_REG_47_40<0>" */,
       config input SC_PCS_CH2_GE_AUTO_EN_49    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_GE_AUTO_EN_49" */,
       config input SC_PCS_CH2_SKIP_REG0_59_50[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_SKIP_REG0_59_50<9>, SC_PCS_CH2_SKIP_REG0_59_50<8>, SC_PCS_CH2_SKIP_REG0_59_50<7>, SC_PCS_CH2_SKIP_REG0_59_50<6>, SC_PCS_CH2_SKIP_REG0_59_50<5>, SC_PCS_CH2_SKIP_REG0_59_50<4>, SC_PCS_CH2_SKIP_REG0_59_50<3>, SC_PCS_CH2_SKIP_REG0_59_50<2>, SC_PCS_CH2_SKIP_REG0_59_50<1>, SC_PCS_CH2_SKIP_REG0_59_50<0>" */,
       config input SC_PCS_CH2_SKIP_REG1_69_60[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_SKIP_REG1_69_60<9>, SC_PCS_CH2_SKIP_REG1_69_60<8>, SC_PCS_CH2_SKIP_REG1_69_60<7>, SC_PCS_CH2_SKIP_REG1_69_60<6>, SC_PCS_CH2_SKIP_REG1_69_60<5>, SC_PCS_CH2_SKIP_REG1_69_60<4>, SC_PCS_CH2_SKIP_REG1_69_60<3>, SC_PCS_CH2_SKIP_REG1_69_60<2>, SC_PCS_CH2_SKIP_REG1_69_60<1>, SC_PCS_CH2_SKIP_REG1_69_60<0>" */,
       config input SC_PCS_CH2_SKIP_REG2_79_70[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_SKIP_REG2_79_70<9>, SC_PCS_CH2_SKIP_REG2_79_70<8>, SC_PCS_CH2_SKIP_REG2_79_70<7>, SC_PCS_CH2_SKIP_REG2_79_70<6>, SC_PCS_CH2_SKIP_REG2_79_70<5>, SC_PCS_CH2_SKIP_REG2_79_70<4>, SC_PCS_CH2_SKIP_REG2_79_70<3>, SC_PCS_CH2_SKIP_REG2_79_70<2>, SC_PCS_CH2_SKIP_REG2_79_70<1>, SC_PCS_CH2_SKIP_REG2_79_70<0>" */,
       config input SC_PCS_CH2_SKIP_REG3_89_80[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_SKIP_REG3_89_80<9>, SC_PCS_CH2_SKIP_REG3_89_80<8>, SC_PCS_CH2_SKIP_REG3_89_80<7>, SC_PCS_CH2_SKIP_REG3_89_80<6>, SC_PCS_CH2_SKIP_REG3_89_80<5>, SC_PCS_CH2_SKIP_REG3_89_80<4>, SC_PCS_CH2_SKIP_REG3_89_80<3>, SC_PCS_CH2_SKIP_REG3_89_80<2>, SC_PCS_CH2_SKIP_REG3_89_80<1>, SC_PCS_CH2_SKIP_REG3_89_80<0>" */,
       config input SC_PCS_CH2_DEC_DUAL_90    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_DEC_DUAL_90" */,
       config input SC_PCS_CH2_SPLIT_91    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_SPLIT_91" */,
       config input SC_PCS_CH2_FIFOFLAG_CTC_92    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_FIFOFLAG_CTC_92" */,
       config input SC_PCS_CH2_COMMA_DET_MODE_93    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_COMMA_DET_MODE_93" */,
       config input SC_PCS_CH2_ERRDETECT_SILENCE_94    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_ERRDETECT_SILENCE_94" */,
       config input SC_PCS_CH2_PMA_RCLK_POLINV_96    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_PMA_RCLK_POLINV_96" */,
       config input SC_PCS_CH2_PCS_RCLK_SEL_97    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_PCS_RCLK_SEL_97" */,
       config input SC_PCS_CH2_MCB_RCLK_POLINV_98    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_MCB_RCLK_POLINV_98" */,
       config input SC_PCS_CH2_CB_RCLK_SEL_100_99[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_CB_RCLK_SEL_100_99<1>, SC_PCS_CH2_CB_RCLK_SEL_100_99<0>" */,
       config input SC_PCS_CH2_AFTER_CTC_RCLK_SEL_102_101[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_AFTER_CTC_RCLK_SEL_102_101<1>, SC_PCS_CH2_AFTER_CTC_RCLK_SEL_102_101<0>" */,
       config input SC_PCS_CH2_RCLK_POLINV_103    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_RCLK_POLINV_103" */,
       config input SC_PCS_CH2_BRIDGE_RCLK_SEL_105_104[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_BRIDGE_RCLK_SEL_105_104<1>, SC_PCS_CH2_BRIDGE_RCLK_SEL_105_104<0>" */,
       config input SC_PCS_CH2_PCS_RCLK_EN_106    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_PCS_RCLK_EN_106" */,
       config input SC_PCS_CH2_CB_RCLK_EN_107    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_CB_RCLK_EN_107" */,
       config input SC_PCS_CH2_AFTER_CTC_RCLK_EN_108    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_AFTER_CTC_RCLK_EN_108" */,
       config input SC_PCS_CH2_AFTER_CTC_RCLK_EN_GB_109    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_AFTER_CTC_RCLK_EN_GB_109" */,
       config input SC_PCS_CH2_BRIDGE_RCLK_EN_110    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_BRIDGE_RCLK_EN_110" */,
       config input SC_PCS_CH2_PCS_RX_RSTN_112    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_PCS_RX_RSTN_112" */,
       config input SC_PCS_CH2_SLAVE_113    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_SLAVE_113" */,
       config input SC_PCS_CH2_PCIE_SLAVE_114    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_PCIE_SLAVE_114" */,
       config input SC_PCS_CH2_PCS_CB_RSTN_120    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_PCS_CB_RSTN_120" */,
       config input SC_PCS_CH2_TX_BYPASS_BRIDGE_UINT_129    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_TX_BYPASS_BRIDGE_UINT_129" */,
       config input SC_PCS_CH2_TX_BYPASS_GEAR_130    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_TX_BYPASS_GEAR_130" */,
       config input SC_PCS_CH2_TX_BYPASS_ENC_131    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_TX_BYPASS_ENC_131" */,
       config input SC_PCS_CH2_TX_BYPASS_BIT_SLIP_132    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_TX_BYPASS_BIT_SLIP_132" */,
       config input SC_PCS_CH2_TX_GEAR_SPLIT_136    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_TX_GEAR_SPLIT_136" */,
       config input SC_PCS_CH2_TX_DRIVE_REG_MODE_138_137[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_TX_DRIVE_REG_MODE_138_137<1>, SC_PCS_CH2_TX_DRIVE_REG_MODE_138_137<0>" */,
       config input SC_PCS_CH2_TX_BIT_SLIP_CYCLES_143_139[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_TX_BIT_SLIP_CYCLES_143_139<4>, SC_PCS_CH2_TX_BIT_SLIP_CYCLES_143_139<3>, SC_PCS_CH2_TX_BIT_SLIP_CYCLES_143_139<2>, SC_PCS_CH2_TX_BIT_SLIP_CYCLES_143_139<1>, SC_PCS_CH2_TX_BIT_SLIP_CYCLES_143_139<0>" */,
       config input SC_PCS_CH2_INT_TX_MASK_0_144    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_INT_TX_MASK_0_144" */,
       config input SC_PCS_CH2_INT_TX_MASK_1_145    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_INT_TX_MASK_1_145" */,
       config input SC_PCS_CH2_INT_TX_MASK_2_146    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_INT_TX_MASK_2_146" */,
       config input SC_PCS_CH2_INT_TX_CLR_0_152    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_INT_TX_CLR_0_152" */,
       config input SC_PCS_CH2_INT_TX_CLR_1_153    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_INT_TX_CLR_1_153" */,
       config input SC_PCS_CH2_INT_TX_CLR_2_154    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_INT_TX_CLR_2_154" */,
       config input SC_PCS_CH2_TX_PMA_TCLK_POLINV_160    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_TX_PMA_TCLK_POLINV_160" */,
       config input SC_PCS_CH2_TX_PCS_CLK_EN_SEL_161    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_TX_PCS_CLK_EN_SEL_161" */,
       config input SC_PCS_CH2_TX_BRIDGE_TCLK_SEL_162    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_TX_BRIDGE_TCLK_SEL_162" */,
       config input SC_PCS_CH2_TX_TCLK_POLINV_163    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_TX_TCLK_POLINV_163" */,
       config input SC_PCS_CH2_TX_PCS_TX_RSTN_165    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_TX_PCS_TX_RSTN_165" */,
       config input SC_PCS_CH2_TX_SLAVE_166    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_TX_SLAVE_166" */,
       config input SC_PCS_CH2_TX_BRIDGE_CLK_EN_SEL_167    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_TX_BRIDGE_CLK_EN_SEL_167" */,
       config input SC_PCS_CH2_DATA_WIDTH_MODE_169_168[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_DATA_WIDTH_MODE_169_168<1>, SC_PCS_CH2_DATA_WIDTH_MODE_169_168<0>" */,
       config input SC_PCS_CH2_TX_TCLK2FABRIC_SEL_176    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_TX_TCLK2FABRIC_SEL_176" */,
       config input SC_PCS_CH2_TX_OUTZZ_177    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_TX_OUTZZ_177" */,
       config input SC_PCS_CH2_ENC_DUAL_178    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_ENC_DUAL_178" */,
       config input SC_PCS_CH2_TX_BITSLIP_DATA_MODE_179    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_TX_BITSLIP_DATA_MODE_179" */,
       config input SC_PCS_CH2_COMMA_REG1_193_184[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_COMMA_REG1_193_184<9>, SC_PCS_CH2_COMMA_REG1_193_184<8>, SC_PCS_CH2_COMMA_REG1_193_184<7>, SC_PCS_CH2_COMMA_REG1_193_184<6>, SC_PCS_CH2_COMMA_REG1_193_184<5>, SC_PCS_CH2_COMMA_REG1_193_184<4>, SC_PCS_CH2_COMMA_REG1_193_184<3>, SC_PCS_CH2_COMMA_REG1_193_184<2>, SC_PCS_CH2_COMMA_REG1_193_184<1>, SC_PCS_CH2_COMMA_REG1_193_184<0>" */,
       config input SC_PCS_CH2_RAPID_IMAX_202_200[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_RAPID_IMAX_202_200<2>, SC_PCS_CH2_RAPID_IMAX_202_200<1>, SC_PCS_CH2_RAPID_IMAX_202_200<0>" */,
       config input SC_PCS_CH2_RAPID_VMIN_1_215_208[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_RAPID_VMIN_1_215_208<7>, SC_PCS_CH2_RAPID_VMIN_1_215_208<6>, SC_PCS_CH2_RAPID_VMIN_1_215_208<5>, SC_PCS_CH2_RAPID_VMIN_1_215_208<4>, SC_PCS_CH2_RAPID_VMIN_1_215_208<3>, SC_PCS_CH2_RAPID_VMIN_1_215_208<2>, SC_PCS_CH2_RAPID_VMIN_1_215_208<1>, SC_PCS_CH2_RAPID_VMIN_1_215_208<0>" */,
       config input SC_PCS_CH2_RAPID_VMIN_2_223_216[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_RAPID_VMIN_2_223_216<7>, SC_PCS_CH2_RAPID_VMIN_2_223_216<6>, SC_PCS_CH2_RAPID_VMIN_2_223_216<5>, SC_PCS_CH2_RAPID_VMIN_2_223_216<4>, SC_PCS_CH2_RAPID_VMIN_2_223_216<3>, SC_PCS_CH2_RAPID_VMIN_2_223_216<2>, SC_PCS_CH2_RAPID_VMIN_2_223_216<1>, SC_PCS_CH2_RAPID_VMIN_2_223_216<0>" */,
       config input SC_PCS_CH2_RX_PRBS_MODE_227_224[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_RX_PRBS_MODE_227_224<3>, SC_PCS_CH2_RX_PRBS_MODE_227_224<2>, SC_PCS_CH2_RX_PRBS_MODE_227_224<1>, SC_PCS_CH2_RX_PRBS_MODE_227_224<0>" */,
       config input SC_PCS_CH2_RX_ERRCNT_CLR_228    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_RX_ERRCNT_CLR_228" */,
       config input SC_PCS_CH2_TX_PRBS_MODE_235_232[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_TX_PRBS_MODE_235_232<3>, SC_PCS_CH2_TX_PRBS_MODE_235_232<2>, SC_PCS_CH2_TX_PRBS_MODE_235_232<1>, SC_PCS_CH2_TX_PRBS_MODE_235_232<0>" */,
       config input SC_PCS_CH2_TX_INSERT_ER_236    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_TX_INSERT_ER_236" */,
       config input SC_PCS_CH2_ENABLE_PRBS_GEN_237    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_ENABLE_PRBS_GEN_237" */,
       config input SC_PCS_CH2_ERR_CNT_247_240[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_ERR_CNT_247_240<7>, SC_PCS_CH2_ERR_CNT_247_240<6>, SC_PCS_CH2_ERR_CNT_247_240<5>, SC_PCS_CH2_ERR_CNT_247_240<4>, SC_PCS_CH2_ERR_CNT_247_240<3>, SC_PCS_CH2_ERR_CNT_247_240<2>, SC_PCS_CH2_ERR_CNT_247_240<1>, SC_PCS_CH2_ERR_CNT_247_240<0>" */,
       config input SC_PCS_CH2_DEFAULT_RADDR_251_248[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_DEFAULT_RADDR_251_248<3>, SC_PCS_CH2_DEFAULT_RADDR_251_248<2>, SC_PCS_CH2_DEFAULT_RADDR_251_248<1>, SC_PCS_CH2_DEFAULT_RADDR_251_248<0>" */,
       config input SC_PCS_CH2_MASTER_CHECK_OFFSET_255_252[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_MASTER_CHECK_OFFSET_255_252<3>, SC_PCS_CH2_MASTER_CHECK_OFFSET_255_252<2>, SC_PCS_CH2_MASTER_CHECK_OFFSET_255_252<1>, SC_PCS_CH2_MASTER_CHECK_OFFSET_255_252<0>" */,
       config input SC_PCS_CH2_DELAY_SET_259_256[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_DELAY_SET_259_256<3>, SC_PCS_CH2_DELAY_SET_259_256<2>, SC_PCS_CH2_DELAY_SET_259_256<1>, SC_PCS_CH2_DELAY_SET_259_256<0>" */,
       config input SC_PCS_CH2_SEACH_OFFSET_262_260[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_SEACH_OFFSET_262_260<2>, SC_PCS_CH2_SEACH_OFFSET_262_260<1>, SC_PCS_CH2_SEACH_OFFSET_262_260<0>" */,
       config input SC_PCS_CH2_CEB_RAPIDLS_MMAX_266_264[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_CEB_RAPIDLS_MMAX_266_264<2>, SC_PCS_CH2_CEB_RAPIDLS_MMAX_266_264<1>, SC_PCS_CH2_CEB_RAPIDLS_MMAX_266_264<0>" */,
       config input SC_PCS_CH2_CTC_AFULL_276_272[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_CTC_AFULL_276_272<4>, SC_PCS_CH2_CTC_AFULL_276_272<3>, SC_PCS_CH2_CTC_AFULL_276_272<2>, SC_PCS_CH2_CTC_AFULL_276_272<1>, SC_PCS_CH2_CTC_AFULL_276_272<0>" */,
       config input SC_PCS_CH2_CTC_AEMPTY_284_280[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_CTC_AEMPTY_284_280<4>, SC_PCS_CH2_CTC_AEMPTY_284_280<3>, SC_PCS_CH2_CTC_AEMPTY_284_280<2>, SC_PCS_CH2_CTC_AEMPTY_284_280<1>, SC_PCS_CH2_CTC_AEMPTY_284_280<0>" */,
       config input SC_PCS_CH2_FAR_LOOP_288    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_FAR_LOOP_288" */,
       config input SC_PCS_CH2_NEAR_LOOP_289    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_NEAR_LOOP_289" */,
       config input SC_PCS_CH2_INT_RX_MASK_0_296    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_INT_RX_MASK_0_296" */,
       config input SC_PCS_CH2_INT_RX_MASK_1_297    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_INT_RX_MASK_1_297" */,
       config input SC_PCS_CH2_INT_RX_MASK_2_298    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_INT_RX_MASK_2_298" */,
       config input SC_PCS_CH2_INT_RX_MASK_3_299    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_INT_RX_MASK_3_299" */,
       config input SC_PCS_CH2_INT_RX_MASK_4_300    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_INT_RX_MASK_4_300" */,
       config input SC_PCS_CH2_INT_RX_MASK_5_301    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_INT_RX_MASK_5_301" */,
       config input SC_PCS_CH2_INT_RX_MASK_6_302    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_INT_RX_MASK_6_302" */,
       config input SC_PCS_CH2_INT_RX_MASK_7_303    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_INT_RX_MASK_7_303" */,
       config input SC_PCS_CH2_INT_RX_CLR_0_304    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_INT_RX_CLR_0_304" */,
       config input SC_PCS_CH2_INT_RX_CLR_1_305    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_INT_RX_CLR_1_305" */,
       config input SC_PCS_CH2_INT_RX_CLR_2_306    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_INT_RX_CLR_2_306" */,
       config input SC_PCS_CH2_INT_RX_CLR_3_307    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_INT_RX_CLR_3_307" */,
       config input SC_PCS_CH2_INT_RX_CLR_4_308    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_INT_RX_CLR_4_308" */,
       config input SC_PCS_CH2_INT_RX_CLR_5_309    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_INT_RX_CLR_5_309" */,
       config input SC_PCS_CH2_INT_RX_CLR_6_310    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_INT_RX_CLR_6_310" */,
       config input SC_PCS_CH2_INT_RX_CLR_7_311    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH2_INT_RX_CLR_7_311" */,
       config input SC_PCS_CH3_BYPASS_WORD_ALIGN_1    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_BYPASS_WORD_ALIGN_1" */,
       config input SC_PCS_CH3_BYPASS_DENC_2    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_BYPASS_DENC_2" */,
       config input SC_PCS_CH3_BYPASS_BONDING_3    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_BYPASS_BONDING_3" */,
       config input SC_PCS_CH3_BYPASS_CTC_4    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_BYPASS_CTC_4" */,
       config input SC_PCS_CH3_BYPASS_GEAR_5    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_BYPASS_GEAR_5" */,
       config input SC_PCS_CH3_BYPASS_BRIDGE_6    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_BYPASS_BRIDGE_6" */,
       config input SC_PCS_CH3_DATA_MODE_8    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_DATA_MODE_8" */,
       config input SC_PCS_CH3_RX_POLARITY_INV_10_9[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_RX_POLARITY_INV_10_9<1>, SC_PCS_CH3_RX_POLARITY_INV_10_9<0>" */,
       config input SC_PCS_CH3_ALIGN_MODE_12_11[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_ALIGN_MODE_12_11<1>, SC_PCS_CH3_ALIGN_MODE_12_11<0>" */,
       config input SC_PCS_CH3_SAMP_16B_13    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_SAMP_16B_13" */,
       config input SC_PCS_CH3_COMMA_REG0_25_16[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_COMMA_REG0_25_16<9>, SC_PCS_CH3_COMMA_REG0_25_16<8>, SC_PCS_CH3_COMMA_REG0_25_16<7>, SC_PCS_CH3_COMMA_REG0_25_16<6>, SC_PCS_CH3_COMMA_REG0_25_16<5>, SC_PCS_CH3_COMMA_REG0_25_16<4>, SC_PCS_CH3_COMMA_REG0_25_16<3>, SC_PCS_CH3_COMMA_REG0_25_16<2>, SC_PCS_CH3_COMMA_REG0_25_16<1>, SC_PCS_CH3_COMMA_REG0_25_16<0>" */,
       config input SC_PCS_CH3_COMMA_MASK_35_26[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_COMMA_MASK_35_26<9>, SC_PCS_CH3_COMMA_MASK_35_26<8>, SC_PCS_CH3_COMMA_MASK_35_26<7>, SC_PCS_CH3_COMMA_MASK_35_26<6>, SC_PCS_CH3_COMMA_MASK_35_26<5>, SC_PCS_CH3_COMMA_MASK_35_26<4>, SC_PCS_CH3_COMMA_MASK_35_26<3>, SC_PCS_CH3_COMMA_MASK_35_26<2>, SC_PCS_CH3_COMMA_MASK_35_26<1>, SC_PCS_CH3_COMMA_MASK_35_26<0>" */,
       config input SC_PCS_CH3_CEB_MODE_37_36[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_CEB_MODE_37_36<1>, SC_PCS_CH3_CEB_MODE_37_36<0>" */,
       config input SC_PCS_CH3_CTC_MODE_39_38[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_CTC_MODE_39_38<1>, SC_PCS_CH3_CTC_MODE_39_38<0>" */,
       config input SC_PCS_CH3_A_REG_47_40[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_A_REG_47_40<7>, SC_PCS_CH3_A_REG_47_40<6>, SC_PCS_CH3_A_REG_47_40<5>, SC_PCS_CH3_A_REG_47_40<4>, SC_PCS_CH3_A_REG_47_40<3>, SC_PCS_CH3_A_REG_47_40<2>, SC_PCS_CH3_A_REG_47_40<1>, SC_PCS_CH3_A_REG_47_40<0>" */,
       config input SC_PCS_CH3_GE_AUTO_EN_49    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_GE_AUTO_EN_49" */,
       config input SC_PCS_CH3_SKIP_REG0_59_50[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_SKIP_REG0_59_50<9>, SC_PCS_CH3_SKIP_REG0_59_50<8>, SC_PCS_CH3_SKIP_REG0_59_50<7>, SC_PCS_CH3_SKIP_REG0_59_50<6>, SC_PCS_CH3_SKIP_REG0_59_50<5>, SC_PCS_CH3_SKIP_REG0_59_50<4>, SC_PCS_CH3_SKIP_REG0_59_50<3>, SC_PCS_CH3_SKIP_REG0_59_50<2>, SC_PCS_CH3_SKIP_REG0_59_50<1>, SC_PCS_CH3_SKIP_REG0_59_50<0>" */,
       config input SC_PCS_CH3_SKIP_REG1_69_60[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_SKIP_REG1_69_60<9>, SC_PCS_CH3_SKIP_REG1_69_60<8>, SC_PCS_CH3_SKIP_REG1_69_60<7>, SC_PCS_CH3_SKIP_REG1_69_60<6>, SC_PCS_CH3_SKIP_REG1_69_60<5>, SC_PCS_CH3_SKIP_REG1_69_60<4>, SC_PCS_CH3_SKIP_REG1_69_60<3>, SC_PCS_CH3_SKIP_REG1_69_60<2>, SC_PCS_CH3_SKIP_REG1_69_60<1>, SC_PCS_CH3_SKIP_REG1_69_60<0>" */,
       config input SC_PCS_CH3_SKIP_REG2_79_70[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_SKIP_REG2_79_70<9>, SC_PCS_CH3_SKIP_REG2_79_70<8>, SC_PCS_CH3_SKIP_REG2_79_70<7>, SC_PCS_CH3_SKIP_REG2_79_70<6>, SC_PCS_CH3_SKIP_REG2_79_70<5>, SC_PCS_CH3_SKIP_REG2_79_70<4>, SC_PCS_CH3_SKIP_REG2_79_70<3>, SC_PCS_CH3_SKIP_REG2_79_70<2>, SC_PCS_CH3_SKIP_REG2_79_70<1>, SC_PCS_CH3_SKIP_REG2_79_70<0>" */,
       config input SC_PCS_CH3_SKIP_REG3_89_80[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_SKIP_REG3_89_80<9>, SC_PCS_CH3_SKIP_REG3_89_80<8>, SC_PCS_CH3_SKIP_REG3_89_80<7>, SC_PCS_CH3_SKIP_REG3_89_80<6>, SC_PCS_CH3_SKIP_REG3_89_80<5>, SC_PCS_CH3_SKIP_REG3_89_80<4>, SC_PCS_CH3_SKIP_REG3_89_80<3>, SC_PCS_CH3_SKIP_REG3_89_80<2>, SC_PCS_CH3_SKIP_REG3_89_80<1>, SC_PCS_CH3_SKIP_REG3_89_80<0>" */,
       config input SC_PCS_CH3_DEC_DUAL_90    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_DEC_DUAL_90" */,
       config input SC_PCS_CH3_SPLIT_91    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_SPLIT_91" */,
       config input SC_PCS_CH3_FIFOFLAG_CTC_92    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_FIFOFLAG_CTC_92" */,
       config input SC_PCS_CH3_COMMA_DET_MODE_93    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_COMMA_DET_MODE_93" */,
       config input SC_PCS_CH3_ERRDETECT_SILENCE_94    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_ERRDETECT_SILENCE_94" */,
       config input SC_PCS_CH3_PMA_RCLK_POLINV_96    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_PMA_RCLK_POLINV_96" */,
       config input SC_PCS_CH3_PCS_RCLK_SEL_97    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_PCS_RCLK_SEL_97" */,
       config input SC_PCS_CH3_MCB_RCLK_POLINV_98    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_MCB_RCLK_POLINV_98" */,
       config input SC_PCS_CH3_CB_RCLK_SEL_100_99[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_CB_RCLK_SEL_100_99<1>, SC_PCS_CH3_CB_RCLK_SEL_100_99<0>" */,
       config input SC_PCS_CH3_AFTER_CTC_RCLK_SEL_102_101[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_AFTER_CTC_RCLK_SEL_102_101<1>, SC_PCS_CH3_AFTER_CTC_RCLK_SEL_102_101<0>" */,
       config input SC_PCS_CH3_RCLK_POLINV_103    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_RCLK_POLINV_103" */,
       config input SC_PCS_CH3_BRIDGE_RCLK_SEL_105_104[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_BRIDGE_RCLK_SEL_105_104<1>, SC_PCS_CH3_BRIDGE_RCLK_SEL_105_104<0>" */,
       config input SC_PCS_CH3_PCS_RCLK_EN_106    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_PCS_RCLK_EN_106" */,
       config input SC_PCS_CH3_CB_RCLK_EN_107    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_CB_RCLK_EN_107" */,
       config input SC_PCS_CH3_AFTER_CTC_RCLK_EN_108    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_AFTER_CTC_RCLK_EN_108" */,
       config input SC_PCS_CH3_AFTER_CTC_RCLK_EN_GB_109    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_AFTER_CTC_RCLK_EN_GB_109" */,
       config input SC_PCS_CH3_BRIDGE_RCLK_EN_110    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_BRIDGE_RCLK_EN_110" */,
       config input SC_PCS_CH3_PCS_RX_RSTN_112    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_PCS_RX_RSTN_112" */,
       config input SC_PCS_CH3_SLAVE_113    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_SLAVE_113" */,
       config input SC_PCS_CH3_PCIE_SLAVE_114    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_PCIE_SLAVE_114" */,
       config input SC_PCS_CH3_PCS_CB_RSTN_120    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_PCS_CB_RSTN_120" */,
       config input SC_PCS_CH3_TX_BYPASS_BRIDGE_UINT_129    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_TX_BYPASS_BRIDGE_UINT_129" */,
       config input SC_PCS_CH3_TX_BYPASS_GEAR_130    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_TX_BYPASS_GEAR_130" */,
       config input SC_PCS_CH3_TX_BYPASS_ENC_131    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_TX_BYPASS_ENC_131" */,
       config input SC_PCS_CH3_TX_BYPASS_BIT_SLIP_132    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_TX_BYPASS_BIT_SLIP_132" */,
       config input SC_PCS_CH3_TX_GEAR_SPLIT_136    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_TX_GEAR_SPLIT_136" */,
       config input SC_PCS_CH3_TX_DRIVE_REG_MODE_138_137[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_TX_DRIVE_REG_MODE_138_137<1>, SC_PCS_CH3_TX_DRIVE_REG_MODE_138_137<0>" */,
       config input SC_PCS_CH3_TX_BIT_SLIP_CYCLES_143_139[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_TX_BIT_SLIP_CYCLES_143_139<4>, SC_PCS_CH3_TX_BIT_SLIP_CYCLES_143_139<3>, SC_PCS_CH3_TX_BIT_SLIP_CYCLES_143_139<2>, SC_PCS_CH3_TX_BIT_SLIP_CYCLES_143_139<1>, SC_PCS_CH3_TX_BIT_SLIP_CYCLES_143_139<0>" */,
       config input SC_PCS_CH3_INT_TX_MASK_0_144    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_INT_TX_MASK_0_144" */,
       config input SC_PCS_CH3_INT_TX_MASK_1_145    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_INT_TX_MASK_1_145" */,
       config input SC_PCS_CH3_INT_TX_MASK_2_146    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_INT_TX_MASK_2_146" */,
       config input SC_PCS_CH3_INT_TX_CLR_0_152    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_INT_TX_CLR_0_152" */,
       config input SC_PCS_CH3_INT_TX_CLR_1_153    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_INT_TX_CLR_1_153" */,
       config input SC_PCS_CH3_INT_TX_CLR_2_154    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_INT_TX_CLR_2_154" */,
       config input SC_PCS_CH3_TX_PMA_TCLK_POLINV_160    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_TX_PMA_TCLK_POLINV_160" */,
       config input SC_PCS_CH3_TX_PCS_CLK_EN_SEL_161    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_TX_PCS_CLK_EN_SEL_161" */,
       config input SC_PCS_CH3_TX_BRIDGE_TCLK_SEL_162    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_TX_BRIDGE_TCLK_SEL_162" */,
       config input SC_PCS_CH3_TX_TCLK_POLINV_163    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_TX_TCLK_POLINV_163" */,
       config input SC_PCS_CH3_TX_PCS_TX_RSTN_165    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_TX_PCS_TX_RSTN_165" */,
       config input SC_PCS_CH3_TX_SLAVE_166    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_TX_SLAVE_166" */,
       config input SC_PCS_CH3_TX_BRIDGE_CLK_EN_SEL_167    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_TX_BRIDGE_CLK_EN_SEL_167" */,
       config input SC_PCS_CH3_DATA_WIDTH_MODE_169_168[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_DATA_WIDTH_MODE_169_168<1>, SC_PCS_CH3_DATA_WIDTH_MODE_169_168<0>" */,
       config input SC_PCS_CH3_TX_TCLK2FABRIC_SEL_176    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_TX_TCLK2FABRIC_SEL_176" */,
       config input SC_PCS_CH3_TX_OUTZZ_177    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_TX_OUTZZ_177" */,
       config input SC_PCS_CH3_ENC_DUAL_178    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_ENC_DUAL_178" */,
       config input SC_PCS_CH3_TX_BITSLIP_DATA_MODE_179    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_TX_BITSLIP_DATA_MODE_179" */,
       config input SC_PCS_CH3_COMMA_REG1_193_184[9:0]    =    10'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_COMMA_REG1_193_184<9>, SC_PCS_CH3_COMMA_REG1_193_184<8>, SC_PCS_CH3_COMMA_REG1_193_184<7>, SC_PCS_CH3_COMMA_REG1_193_184<6>, SC_PCS_CH3_COMMA_REG1_193_184<5>, SC_PCS_CH3_COMMA_REG1_193_184<4>, SC_PCS_CH3_COMMA_REG1_193_184<3>, SC_PCS_CH3_COMMA_REG1_193_184<2>, SC_PCS_CH3_COMMA_REG1_193_184<1>, SC_PCS_CH3_COMMA_REG1_193_184<0>" */,
       config input SC_PCS_CH3_RAPID_IMAX_202_200[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_RAPID_IMAX_202_200<2>, SC_PCS_CH3_RAPID_IMAX_202_200<1>, SC_PCS_CH3_RAPID_IMAX_202_200<0>" */,
       config input SC_PCS_CH3_RAPID_VMIN_1_215_208[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_RAPID_VMIN_1_215_208<7>, SC_PCS_CH3_RAPID_VMIN_1_215_208<6>, SC_PCS_CH3_RAPID_VMIN_1_215_208<5>, SC_PCS_CH3_RAPID_VMIN_1_215_208<4>, SC_PCS_CH3_RAPID_VMIN_1_215_208<3>, SC_PCS_CH3_RAPID_VMIN_1_215_208<2>, SC_PCS_CH3_RAPID_VMIN_1_215_208<1>, SC_PCS_CH3_RAPID_VMIN_1_215_208<0>" */,
       config input SC_PCS_CH3_RAPID_VMIN_2_223_216[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_RAPID_VMIN_2_223_216<7>, SC_PCS_CH3_RAPID_VMIN_2_223_216<6>, SC_PCS_CH3_RAPID_VMIN_2_223_216<5>, SC_PCS_CH3_RAPID_VMIN_2_223_216<4>, SC_PCS_CH3_RAPID_VMIN_2_223_216<3>, SC_PCS_CH3_RAPID_VMIN_2_223_216<2>, SC_PCS_CH3_RAPID_VMIN_2_223_216<1>, SC_PCS_CH3_RAPID_VMIN_2_223_216<0>" */,
       config input SC_PCS_CH3_RX_PRBS_MODE_227_224[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_RX_PRBS_MODE_227_224<3>, SC_PCS_CH3_RX_PRBS_MODE_227_224<2>, SC_PCS_CH3_RX_PRBS_MODE_227_224<1>, SC_PCS_CH3_RX_PRBS_MODE_227_224<0>" */,
       config input SC_PCS_CH3_RX_ERRCNT_CLR_228    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_RX_ERRCNT_CLR_228" */,
       config input SC_PCS_CH3_TX_PRBS_MODE_235_232[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_TX_PRBS_MODE_235_232<3>, SC_PCS_CH3_TX_PRBS_MODE_235_232<2>, SC_PCS_CH3_TX_PRBS_MODE_235_232<1>, SC_PCS_CH3_TX_PRBS_MODE_235_232<0>" */,
       config input SC_PCS_CH3_TX_INSERT_ER_236    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_TX_INSERT_ER_236" */,
       config input SC_PCS_CH3_ENABLE_PRBS_GEN_237    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_ENABLE_PRBS_GEN_237" */,
       config input SC_PCS_CH3_ERR_CNT_247_240[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_ERR_CNT_247_240<7>, SC_PCS_CH3_ERR_CNT_247_240<6>, SC_PCS_CH3_ERR_CNT_247_240<5>, SC_PCS_CH3_ERR_CNT_247_240<4>, SC_PCS_CH3_ERR_CNT_247_240<3>, SC_PCS_CH3_ERR_CNT_247_240<2>, SC_PCS_CH3_ERR_CNT_247_240<1>, SC_PCS_CH3_ERR_CNT_247_240<0>" */,
       config input SC_PCS_CH3_DEFAULT_RADDR_251_248[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_DEFAULT_RADDR_251_248<3>, SC_PCS_CH3_DEFAULT_RADDR_251_248<2>, SC_PCS_CH3_DEFAULT_RADDR_251_248<1>, SC_PCS_CH3_DEFAULT_RADDR_251_248<0>" */,
       config input SC_PCS_CH3_MASTER_CHECK_OFFSET_255_252[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_MASTER_CHECK_OFFSET_255_252<3>, SC_PCS_CH3_MASTER_CHECK_OFFSET_255_252<2>, SC_PCS_CH3_MASTER_CHECK_OFFSET_255_252<1>, SC_PCS_CH3_MASTER_CHECK_OFFSET_255_252<0>" */,
       config input SC_PCS_CH3_DELAY_SET_259_256[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_DELAY_SET_259_256<3>, SC_PCS_CH3_DELAY_SET_259_256<2>, SC_PCS_CH3_DELAY_SET_259_256<1>, SC_PCS_CH3_DELAY_SET_259_256<0>" */,
       config input SC_PCS_CH3_SEACH_OFFSET_262_260[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_SEACH_OFFSET_262_260<2>, SC_PCS_CH3_SEACH_OFFSET_262_260<1>, SC_PCS_CH3_SEACH_OFFSET_262_260<0>" */,
       config input SC_PCS_CH3_CEB_RAPIDLS_MMAX_266_264[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_CEB_RAPIDLS_MMAX_266_264<2>, SC_PCS_CH3_CEB_RAPIDLS_MMAX_266_264<1>, SC_PCS_CH3_CEB_RAPIDLS_MMAX_266_264<0>" */,
       config input SC_PCS_CH3_CTC_AFULL_276_272[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_CTC_AFULL_276_272<4>, SC_PCS_CH3_CTC_AFULL_276_272<3>, SC_PCS_CH3_CTC_AFULL_276_272<2>, SC_PCS_CH3_CTC_AFULL_276_272<1>, SC_PCS_CH3_CTC_AFULL_276_272<0>" */,
       config input SC_PCS_CH3_CTC_AEMPTY_284_280[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_CTC_AEMPTY_284_280<4>, SC_PCS_CH3_CTC_AEMPTY_284_280<3>, SC_PCS_CH3_CTC_AEMPTY_284_280<2>, SC_PCS_CH3_CTC_AEMPTY_284_280<1>, SC_PCS_CH3_CTC_AEMPTY_284_280<0>" */,
       config input SC_PCS_CH3_FAR_LOOP_288    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_FAR_LOOP_288" */,
       config input SC_PCS_CH3_NEAR_LOOP_289    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_NEAR_LOOP_289" */,
       config input SC_PCS_CH3_INT_RX_MASK_0_296    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_INT_RX_MASK_0_296" */,
       config input SC_PCS_CH3_INT_RX_MASK_1_297    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_INT_RX_MASK_1_297" */,
       config input SC_PCS_CH3_INT_RX_MASK_2_298    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_INT_RX_MASK_2_298" */,
       config input SC_PCS_CH3_INT_RX_MASK_3_299    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_INT_RX_MASK_3_299" */,
       config input SC_PCS_CH3_INT_RX_MASK_4_300    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_INT_RX_MASK_4_300" */,
       config input SC_PCS_CH3_INT_RX_MASK_5_301    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_INT_RX_MASK_5_301" */,
       config input SC_PCS_CH3_INT_RX_MASK_6_302    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_INT_RX_MASK_6_302" */,
       config input SC_PCS_CH3_INT_RX_MASK_7_303    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_INT_RX_MASK_7_303" */,
       config input SC_PCS_CH3_INT_RX_CLR_0_304    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_INT_RX_CLR_0_304" */,
       config input SC_PCS_CH3_INT_RX_CLR_1_305    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_INT_RX_CLR_1_305" */,
       config input SC_PCS_CH3_INT_RX_CLR_2_306    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_INT_RX_CLR_2_306" */,
       config input SC_PCS_CH3_INT_RX_CLR_3_307    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_INT_RX_CLR_3_307" */,
       config input SC_PCS_CH3_INT_RX_CLR_4_308    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_INT_RX_CLR_4_308" */,
       config input SC_PCS_CH3_INT_RX_CLR_5_309    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_INT_RX_CLR_5_309" */,
       config input SC_PCS_CH3_INT_RX_CLR_6_310    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_INT_RX_CLR_6_310" */,
       config input SC_PCS_CH3_INT_RX_CLR_7_311    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PCS_CH3_INT_RX_CLR_7_311" */,
       config input SC_PMA_CH0_TXDATA_WIDTH_381_380[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_TXDATA_WIDTH_381_380<1>, SC_PMA_CH0_TXDATA_WIDTH_381_380<0>" */,
       config input SC_PMA_CH0_TX_TESTPATTERN_375_374[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_TX_TESTPATTERN_375_374<1>, SC_PMA_CH0_TX_TESTPATTERN_375_374<0>" */,
       config input SC_PMA_CH0_TESTPATTERN_O_ENABLE_373    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_TESTPATTERN_O_ENABLE_373" */,
       config input SC_PMA_CH0_DISABLE_BSMODE_DRVAMP_372    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_DISABLE_BSMODE_DRVAMP_372" */,
       config input SC_PMA_CH0_FORCE_BIST_ENABLE_371    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_FORCE_BIST_ENABLE_371" */,
       config input SC_PMA_CH0_FORCE_ELECTRICAL_IDLE_370    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_FORCE_ELECTRICAL_IDLE_370" */,
       config input SC_PMA_CH0_FORCE_RXDCT_ENABLE_369    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_FORCE_RXDCT_ENABLE_369" */,
       config input SC_PMA_CH0_FORCE_EXTLB_ENABLE_368    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_FORCE_EXTLB_ENABLE_368" */,
       config input SC_PMA_CH0_DISABLE_LANE_SYNC_367    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_DISABLE_LANE_SYNC_367" */,
       config input SC_PMA_CH0_DISABLE_ELECTRICAL_IDLE_366    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_DISABLE_ELECTRICAL_IDLE_366" */,
       config input SC_PMA_CH0_DISABLE_RXDCT_ENABLE_365    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_DISABLE_RXDCT_ENABLE_365" */,
       config input SC_PMA_CH0_DISABLE_EXTLB_ENABLE_364    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_DISABLE_EXTLB_ENABLE_364" */,
       config input SC_PMA_CH0_DISABLE_LOW_SPEED_PATH_ENABLE_363    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_DISABLE_LOW_SPEED_PATH_ENABLE_363" */,
       config input SC_PMA_CH0_FORCE_LANE_ENABLE_362    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_FORCE_LANE_ENABLE_362" */,
       config input SC_PMA_CH0_FORCE_LANE_RESETB_DISABLE_361    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_FORCE_LANE_RESETB_DISABLE_361" */,
       config input SC_PMA_CH0_RXDCT_LGBW_ENABLE_359    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_RXDCT_LGBW_ENABLE_359" */,
       config input SC_PMA_CH0_RXDCT_VTH_358_357[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_RXDCT_VTH_358_357<1>, SC_PMA_CH0_RXDCT_VTH_358_357<0>" */,
       config input SC_PMA_CH0_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355<1>, SC_PMA_CH0_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355<0>" */,
       config input SC_PMA_CH0_DRV_RTERM_CONTROL_354_352[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_DRV_RTERM_CONTROL_354_352<2>, SC_PMA_CH0_DRV_RTERM_CONTROL_354_352<1>, SC_PMA_CH0_DRV_RTERM_CONTROL_354_352<0>" */,
       config input SC_PMA_CH0_FDRV_AMP_CONTROL_351_350[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_FDRV_AMP_CONTROL_351_350<1>, SC_PMA_CH0_FDRV_AMP_CONTROL_351_350<0>" */,
       config input SC_PMA_CH0_PREPC_AMP_CONTROL_349_348[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_PREPC_AMP_CONTROL_349_348<1>, SC_PMA_CH0_PREPC_AMP_CONTROL_349_348<0>" */,
       config input SC_PMA_CH0_PREMC_AMP_CONTROL_347_346[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_PREMC_AMP_CONTROL_347_346<1>, SC_PMA_CH0_PREMC_AMP_CONTROL_347_346<0>" */,
       config input SC_PMA_CH0_SER_AMP_CONTROL_345_344[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_SER_AMP_CONTROL_345_344<1>, SC_PMA_CH0_SER_AMP_CONTROL_345_344<0>" */,
       config input SC_PMA_CH0_PFD_LOOP_RESISTOR_SETTING_327_324[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_PFD_LOOP_RESISTOR_SETTING_327_324<3>, SC_PMA_CH0_PFD_LOOP_RESISTOR_SETTING_327_324<2>, SC_PMA_CH0_PFD_LOOP_RESISTOR_SETTING_327_324<1>, SC_PMA_CH0_PFD_LOOP_RESISTOR_SETTING_327_324<0>" */,
       config input SC_PMA_CH0_PD_LOOP_RESISTOR_SETTING_323_320[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_PD_LOOP_RESISTOR_SETTING_323_320<3>, SC_PMA_CH0_PD_LOOP_RESISTOR_SETTING_323_320<2>, SC_PMA_CH0_PD_LOOP_RESISTOR_SETTING_323_320<1>, SC_PMA_CH0_PD_LOOP_RESISTOR_SETTING_323_320<0>" */,
       config input SC_PMA_CH0_CDR_TEST_OUT_SELECT_319    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_CDR_TEST_OUT_SELECT_319" */,
       config input SC_PMA_CH0_PI_DIV1_BP_318    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_PI_DIV1_BP_318" */,
       config input SC_PMA_CH0_PI_TEST_FOR_CKI_317    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_PI_TEST_FOR_CKI_317" */,
       config input SC_PMA_CH0_PI_CURRENT_SETTING_316_314[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_PI_CURRENT_SETTING_316_314<2>, SC_PMA_CH0_PI_CURRENT_SETTING_316_314<1>, SC_PMA_CH0_PI_CURRENT_SETTING_316_314<0>" */,
       config input SC_PMA_CH0_PI_FREQUENCY_SETTING_313_312[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_PI_FREQUENCY_SETTING_313_312<1>, SC_PMA_CH0_PI_FREQUENCY_SETTING_313_312<0>" */,
       config input SC_PMA_CH0_TEST_OUT_SELECT_FOR_RCK_311    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_TEST_OUT_SELECT_FOR_RCK_311" */,
       config input SC_PMA_CH0_TEST_OUT_SELECT_SOURCE_310    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_TEST_OUT_SELECT_SOURCE_310" */,
       config input SC_PMA_CH0_TEST_DATA_OUT_SELECT_SOURCE_309    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_TEST_DATA_OUT_SELECT_SOURCE_309" */,
       config input SC_PMA_CH0_TEST_CK_OUT_SELECT_SOURCE_308    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_TEST_CK_OUT_SELECT_SOURCE_308" */,
       config input SC_PMA_CH0_ENABLE_SLIP1UI_MODULE_307    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_ENABLE_SLIP1UI_MODULE_307" */,
       config input SC_PMA_CH0_PN_SWAP_ENABLE_306    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_PN_SWAP_ENABLE_306" */,
       config input SC_PMA_CH0_SIPO_BIT_SETTING_305_304[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_SIPO_BIT_SETTING_305_304<1>, SC_PMA_CH0_SIPO_BIT_SETTING_305_304<0>" */,
       config input SC_PMA_CH0_OOB_EN_303    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_OOB_EN_303" */,
       config input SC_PMA_CH0_ALOS_EN_302    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_ALOS_EN_302" */,
       config input SC_PMA_CH0_LFMODE_301    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_LFMODE_301" */,
       config input SC_PMA_CH0_TSO_HS_SEL_300    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_TSO_HS_SEL_300" */,
       config input SC_PMA_CH0_LX_SELLC_295    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_LX_SELLC_295" */,
       config input SC_PMA_CH0_LX_RXPLL_DIVSEL45_FB_287    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_LX_RXPLL_DIVSEL45_FB_287" */,
       config input SC_PMA_CH0_LX_RXPLL_DIVSEL_FB_286_284[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_LX_RXPLL_DIVSEL_FB_286_284<2>, SC_PMA_CH0_LX_RXPLL_DIVSEL_FB_286_284<1>, SC_PMA_CH0_LX_RXPLL_DIVSEL_FB_286_284<0>" */,
       config input SC_PMA_CH0_LX_RXPLL_DIVSEL_REF_283_282[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_LX_RXPLL_DIVSEL_REF_283_282<1>, SC_PMA_CH0_LX_RXPLL_DIVSEL_REF_283_282<0>" */,
       config input SC_PMA_CH0_PICODE_279_272[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_PICODE_279_272<7>, SC_PMA_CH0_PICODE_279_272<6>, SC_PMA_CH0_PICODE_279_272<5>, SC_PMA_CH0_PICODE_279_272<4>, SC_PMA_CH0_PICODE_279_272<3>, SC_PMA_CH0_PICODE_279_272<2>, SC_PMA_CH0_PICODE_279_272<1>, SC_PMA_CH0_PICODE_279_272<0>" */,
       config input SC_PMA_CH0_RX_REFCK_SEL_265_264[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_RX_REFCK_SEL_265_264<1>, SC_PMA_CH0_RX_REFCK_SEL_265_264<0>" */,
       config input SC_PMA_CH0_PFDLPEN_REGISTER_CONTROL_ENABLE_259    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_PFDLPEN_REGISTER_CONTROL_ENABLE_259" */,
       config input SC_PMA_CH0_PFDLPEN_REGISTER_SETTING_258    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_PFDLPEN_REGISTER_SETTING_258" */,
       config input SC_PMA_CH0_PDLPEN_REGISTER_CONTROL_ENABLE_257    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_PDLPEN_REGISTER_CONTROL_ENABLE_257" */,
       config input SC_PMA_CH0_PDLPEN_REGISTER_SETTING_256    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_PDLPEN_REGISTER_SETTING_256" */,
       config input SC_PMA_CH0_DIV_CHANGE_ENABLE_DELAY_TIMER_254_253[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_DIV_CHANGE_ENABLE_DELAY_TIMER_254_253<1>, SC_PMA_CH0_DIV_CHANGE_ENABLE_DELAY_TIMER_254_253<0>" */,
       config input SC_PMA_CH0_DIV_CHANGE_ENABLE_SIGNAL_GATING_252    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_DIV_CHANGE_ENABLE_SIGNAL_GATING_252" */,
       config input SC_PMA_CH0_CDR_ALIGN_REGISTER_SETTING_VALUE_251    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_CDR_ALIGN_REGISTER_SETTING_VALUE_251" */,
       config input SC_PMA_CH0_FORCE_CDR_ALIGN_ENABLE_250    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_FORCE_CDR_ALIGN_ENABLE_250" */,
       config input SC_PMA_CH0_SELLC_REGISTER_SETTING_VALUE_249    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_SELLC_REGISTER_SETTING_VALUE_249" */,
       config input SC_PMA_CH0_SELLC_CONTROL_BY_REGISTER_248    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_SELLC_CONTROL_BY_REGISTER_248" */,
       config input SC_PMA_CH0_REG_PLLI_LDO_VREF_SETTING_247_245[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_PLLI_LDO_VREF_SETTING_247_245<2>, SC_PMA_CH0_REG_PLLI_LDO_VREF_SETTING_247_245<1>, SC_PMA_CH0_REG_PLLI_LDO_VREF_SETTING_247_245<0>" */,
       config input SC_PMA_CH0_REG_PLLI_LDO_BYPASS_CURRENT_244_242[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_PLLI_LDO_BYPASS_CURRENT_244_242<2>, SC_PMA_CH0_REG_PLLI_LDO_BYPASS_CURRENT_244_242<1>, SC_PMA_CH0_REG_PLLI_LDO_BYPASS_CURRENT_244_242<0>" */,
       config input SC_PMA_CH0_REG_PLL_HSTEST_ENABLE_239    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_PLL_HSTEST_ENABLE_239" */,
       config input SC_PMA_CH0_REG_PLL_ISNK_CURRENT_CONTROL_238_237[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_PLL_ISNK_CURRENT_CONTROL_238_237<1>, SC_PMA_CH0_REG_PLL_ISNK_CURRENT_CONTROL_238_237<0>" */,
       config input SC_PMA_CH0_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232<4>, SC_PMA_CH0_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232<3>, SC_PMA_CH0_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232<2>, SC_PMA_CH0_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232<1>, SC_PMA_CH0_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232<0>" */,
       config input SC_PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229<2>, SC_PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229<1>, SC_PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229<0>" */,
       config input SC_PMA_CH0_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224<4>, SC_PMA_CH0_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224<3>, SC_PMA_CH0_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224<2>, SC_PMA_CH0_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224<1>, SC_PMA_CH0_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224<0>" */,
       config input SC_PMA_CH0_REG_PLL_CP0_BIAS_CONTROL_223_221[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_PLL_CP0_BIAS_CONTROL_223_221<2>, SC_PMA_CH0_REG_PLL_CP0_BIAS_CONTROL_223_221<1>, SC_PMA_CH0_REG_PLL_CP0_BIAS_CONTROL_223_221<0>" */,
       config input SC_PMA_CH0_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216<4>, SC_PMA_CH0_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216<3>, SC_PMA_CH0_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216<2>, SC_PMA_CH0_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216<1>, SC_PMA_CH0_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216<0>" */,
       config input SC_PMA_CH0_REG_PLL_CP1_BIAS_CONTROL_215_213[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_PLL_CP1_BIAS_CONTROL_215_213<2>, SC_PMA_CH0_REG_PLL_CP1_BIAS_CONTROL_215_213<1>, SC_PMA_CH0_REG_PLL_CP1_BIAS_CONTROL_215_213<0>" */,
       config input SC_PMA_CH0_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208<4>, SC_PMA_CH0_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208<3>, SC_PMA_CH0_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208<2>, SC_PMA_CH0_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208<1>, SC_PMA_CH0_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208<0>" */,
       config input SC_PMA_CH0_REG_PLL_CP0_CURRENT_SETTING_207_205[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_PLL_CP0_CURRENT_SETTING_207_205<2>, SC_PMA_CH0_REG_PLL_CP0_CURRENT_SETTING_207_205<1>, SC_PMA_CH0_REG_PLL_CP0_CURRENT_SETTING_207_205<0>" */,
       config input SC_PMA_CH0_REG_PLL_CP1_CURRENT_SETTING_204_202[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_PLL_CP1_CURRENT_SETTING_204_202<2>, SC_PMA_CH0_REG_PLL_CP1_CURRENT_SETTING_204_202<1>, SC_PMA_CH0_REG_PLL_CP1_CURRENT_SETTING_204_202<0>" */,
       config input SC_PMA_CH0_REG_PLL_GM1_CURRENT_SETTING_201_199[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_PLL_GM1_CURRENT_SETTING_201_199<2>, SC_PMA_CH0_REG_PLL_GM1_CURRENT_SETTING_201_199<1>, SC_PMA_CH0_REG_PLL_GM1_CURRENT_SETTING_201_199<0>" */,
       config input SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_198_196[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_198_196<2>, SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_198_196<1>, SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_198_196<0>" */,
       config input SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193<2>, SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193<1>, SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193<0>" */,
       config input SC_PMA_CH0_REG_PLL_REG_CUR_192_190[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_PLL_REG_CUR_192_190<2>, SC_PMA_CH0_REG_PLL_REG_CUR_192_190<1>, SC_PMA_CH0_REG_PLL_REG_CUR_192_190<0>" */,
       config input SC_PMA_CH0_REG_PLL_LCCUR_189_187[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_PLL_LCCUR_189_187<2>, SC_PMA_CH0_REG_PLL_LCCUR_189_187<1>, SC_PMA_CH0_REG_PLL_LCCUR_189_187<0>" */,
       config input SC_PMA_CH0_REG_PLL_LCOBAS_186_185[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_PLL_LCOBAS_186_185<1>, SC_PMA_CH0_REG_PLL_LCOBAS_186_185<0>" */,
       config input SC_PMA_CH0_REG_PLL_FB_CK_TEST_OUT_ENABLE_184    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_PLL_FB_CK_TEST_OUT_ENABLE_184" */,
       config input SC_PMA_CH0_CDR_ALIGN_TIMER_183_182[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_CDR_ALIGN_TIMER_183_182<1>, SC_PMA_CH0_CDR_ALIGN_TIMER_183_182<0>" */,
       config input SC_PMA_CH0_CALIB_WAIT_181_180[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_CALIB_WAIT_181_180<1>, SC_PMA_CH0_CALIB_WAIT_181_180<0>" */,
       config input SC_PMA_CH0_CALIB_TIMER_179_178[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_CALIB_TIMER_179_178<1>, SC_PMA_CH0_CALIB_TIMER_179_178<0>" */,
       config input SC_PMA_CH0_TOT_RANGE_177_176[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_TOT_RANGE_177_176<1>, SC_PMA_CH0_TOT_RANGE_177_176<0>" */,
       config input SC_PMA_CH0_SUB_RANGE_175_174[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_SUB_RANGE_175_174<1>, SC_PMA_CH0_SUB_RANGE_175_174<0>" */,
       config input SC_PMA_CH0_OVLP_173_172[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_OVLP_173_172<1>, SC_PMA_CH0_OVLP_173_172<0>" */,
       config input SC_PMA_CH0_BIST_WAIT_171_170[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_BIST_WAIT_171_170<1>, SC_PMA_CH0_BIST_WAIT_171_170<0>" */,
       config input SC_PMA_CH0_BIST_TIMER_169_168[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_BIST_TIMER_169_168<1>, SC_PMA_CH0_BIST_TIMER_169_168<0>" */,
       config input SC_PMA_CH0_BAND_LB_167_165[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_BAND_LB_167_165<2>, SC_PMA_CH0_BAND_LB_167_165<1>, SC_PMA_CH0_BAND_LB_167_165<0>" */,
       config input SC_PMA_CH0_BAND_HB_164_160[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_BAND_HB_164_160<4>, SC_PMA_CH0_BAND_HB_164_160<3>, SC_PMA_CH0_BAND_HB_164_160<2>, SC_PMA_CH0_BAND_HB_164_160<1>, SC_PMA_CH0_BAND_HB_164_160<0>" */,
       config input SC_PMA_CH0_FREQ_LOCK_ACCURACY_159_157[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_FREQ_LOCK_ACCURACY_159_157<2>, SC_PMA_CH0_FREQ_LOCK_ACCURACY_159_157<1>, SC_PMA_CH0_FREQ_LOCK_ACCURACY_159_157<0>" */,
       config input SC_PMA_CH0_REG_SET_LC_BAND_156_152[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_SET_LC_BAND_156_152<4>, SC_PMA_CH0_REG_SET_LC_BAND_156_152<3>, SC_PMA_CH0_REG_SET_LC_BAND_156_152<2>, SC_PMA_CH0_REG_SET_LC_BAND_156_152<1>, SC_PMA_CH0_REG_SET_LC_BAND_156_152<0>" */,
       config input SC_PMA_CH0_REG_SET_VCODIV_151_150[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_SET_VCODIV_151_150<1>, SC_PMA_CH0_REG_SET_VCODIV_151_150<0>" */,
       config input SC_PMA_CH0_REGISTER_SET_VCODIV_BAND_ENABLE_149    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REGISTER_SET_VCODIV_BAND_ENABLE_149" */,
       config input SC_PMA_CH0_REG_SET_PLL_LOCK_148    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_SET_PLL_LOCK_148" */,
       config input SC_PMA_CH0_REGISTER_SET_PLL_LOCK_ENABLE_147    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REGISTER_SET_PLL_LOCK_ENABLE_147" */,
       config input SC_PMA_CH0_REG_SET_VCO_HI_146    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_SET_VCO_HI_146" */,
       config input SC_PMA_CH0_REG_SET_VCO_LO_145    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_SET_VCO_LO_145" */,
       config input SC_PMA_CH0_REGISTER_SET_VCO_HI_VCO_LO_ENABLE_144    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REGISTER_SET_VCO_HI_VCO_LO_ENABLE_144" */,
       //config input SC_PMA_CH0_FORCE_LC_PLL_LOOP_EN_143_142[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_FORCE_LC_PLL_LOOP_EN_143_142<1>, SC_PMA_CH0_FORCE_LC_PLL_LOOP_EN_143_142<0>" */,
       config input SC_PMA_CH0_VCO_DIV_CALI_BYPASS_141    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_VCO_DIV_CALI_BYPASS_141" */,
       config input SC_PMA_CH0_BIST_EN_140    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_BIST_EN_140" */,
       config input SC_PMA_CH0_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE_139    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE_139" */,
       config input SC_PMA_CH0_FREQ_DETECT_ENABLE_SOURCE_138    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_FREQ_DETECT_ENABLE_SOURCE_138" */,
       config input SC_PMA_CH0_REG_SET_DIVSEL_REF_137_136[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_SET_DIVSEL_REF_137_136<1>, SC_PMA_CH0_REG_SET_DIVSEL_REF_137_136<0>" */,
       config input SC_PMA_CH0_REG_SET_DIVSEL45_FB_135    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_SET_DIVSEL45_FB_135" */,
       config input SC_PMA_CH0_REG_SET_DIVSEL_FB_134_132[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_SET_DIVSEL_FB_134_132<2>, SC_PMA_CH0_REG_SET_DIVSEL_FB_134_132<1>, SC_PMA_CH0_REG_SET_DIVSEL_FB_134_132<0>" */,
       config input SC_PMA_CH0_PLL_LOOP_EN_SETTING_131    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_PLL_LOOP_EN_SETTING_131" */,
       config input SC_PMA_CH0_REGISTER_SET_TXPLL_DIV_ENABLE_130    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REGISTER_SET_TXPLL_DIV_ENABLE_130" */,
       config input SC_PMA_CH0_FORCE_RXPLL_RESET_129    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_FORCE_RXPLL_RESET_129" */,
       config input SC_PMA_CH0_FORCE_RXPLL_ON_128    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_FORCE_RXPLL_ON_128" */,
       config input SC_PMA_CH0_DPCK_DIV2_126    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_DPCK_DIV2_126" */,
       config input SC_PMA_CH0_LFO_SETTING_122_120[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_LFO_SETTING_122_120<2>, SC_PMA_CH0_LFO_SETTING_122_120<1>, SC_PMA_CH0_LFO_SETTING_122_120<0>" */,
       config input SC_PMA_CH0_ALOS_COUNTER_CLOCK_SELECTION_119    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_ALOS_COUNTER_CLOCK_SELECTION_119" */,
       config input SC_PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT_116_114[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT_116_114<2>, SC_PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT_116_114<1>, SC_PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT_116_114<0>" */,
       config input SC_PMA_CH0_OOB_ENTER_DELAY_SETTING_111_110[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_OOB_ENTER_DELAY_SETTING_111_110<1>, SC_PMA_CH0_OOB_ENTER_DELAY_SETTING_111_110<0>" */,
       config input SC_PMA_CH0_ALOS_LOW_TO_HIGH_COUNTER_SETTING_109_108[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_ALOS_LOW_TO_HIGH_COUNTER_SETTING_109_108<1>, SC_PMA_CH0_ALOS_LOW_TO_HIGH_COUNTER_SETTING_109_108<0>" */,
       config input SC_PMA_CH0_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL_106    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL_106" */,
       config input SC_PMA_CH0_ALOS_EXIT_COUNTER_CLOCK_DIVIDER_105_104[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_ALOS_EXIT_COUNTER_CLOCK_DIVIDER_105_104<1>, SC_PMA_CH0_ALOS_EXIT_COUNTER_CLOCK_DIVIDER_105_104<0>" */,
       config input SC_PMA_CH0_OOB_OSCILATER_FREQUENCY_SETTING_103_102[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_OOB_OSCILATER_FREQUENCY_SETTING_103_102<1>, SC_PMA_CH0_OOB_OSCILATER_FREQUENCY_SETTING_103_102<0>" */,
       config input SC_PMA_CH0_FORCE_OOB_101    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_FORCE_OOB_101" */,
       config input SC_PMA_CH0_OOB_VTH_SET_100_96[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_OOB_VTH_SET_100_96<4>, SC_PMA_CH0_OOB_VTH_SET_100_96<3>, SC_PMA_CH0_OOB_VTH_SET_100_96<2>, SC_PMA_CH0_OOB_VTH_SET_100_96<1>, SC_PMA_CH0_OOB_VTH_SET_100_96<0>" */,
       config input SC_PMA_CH0_FORCE_DET_FORCE_ALOS_LOW_95    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_FORCE_DET_FORCE_ALOS_LOW_95" */,
       config input SC_PMA_CH0_ALOS_THRESHOLD_VOLTAGE_94_90[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_ALOS_THRESHOLD_VOLTAGE_94_90<4>, SC_PMA_CH0_ALOS_THRESHOLD_VOLTAGE_94_90<3>, SC_PMA_CH0_ALOS_THRESHOLD_VOLTAGE_94_90<2>, SC_PMA_CH0_ALOS_THRESHOLD_VOLTAGE_94_90<1>, SC_PMA_CH0_ALOS_THRESHOLD_VOLTAGE_94_90<0>" */,
       config input SC_PMA_CH0_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE_89_88[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE_89_88<1>, SC_PMA_CH0_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE_89_88<0>" */,
       config input SC_PMA_CH0_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84<3>, SC_PMA_CH0_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84<2>, SC_PMA_CH0_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84<1>, SC_PMA_CH0_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84<0>" */,
       config input SC_PMA_CH0_REGL_POSITIVE_HYSTERESIS_SETTING_83_80[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REGL_POSITIVE_HYSTERESIS_SETTING_83_80<3>, SC_PMA_CH0_REGL_POSITIVE_HYSTERESIS_SETTING_83_80<2>, SC_PMA_CH0_REGL_POSITIVE_HYSTERESIS_SETTING_83_80<1>, SC_PMA_CH0_REGL_POSITIVE_HYSTERESIS_SETTING_83_80<0>" */,
       config input SC_PMA_CH0_REG_EN_77    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REG_EN_77" */,
       config input SC_PMA_CH0_REGREF_SEL_76    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_REGREF_SEL_76" */,
       config input SC_PMA_CH0_DC496_75_72[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_DC496_75_72<3>, SC_PMA_CH0_DC496_75_72<2>, SC_PMA_CH0_DC496_75_72<1>, SC_PMA_CH0_DC496_75_72<0>" */,
       config input SC_PMA_CH0_EQ2_AC_VAR_SETTING_63_56[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_EQ2_AC_VAR_SETTING_63_56<7>, SC_PMA_CH0_EQ2_AC_VAR_SETTING_63_56<6>, SC_PMA_CH0_EQ2_AC_VAR_SETTING_63_56<5>, SC_PMA_CH0_EQ2_AC_VAR_SETTING_63_56<4>, SC_PMA_CH0_EQ2_AC_VAR_SETTING_63_56<3>, SC_PMA_CH0_EQ2_AC_VAR_SETTING_63_56<2>, SC_PMA_CH0_EQ2_AC_VAR_SETTING_63_56<1>, SC_PMA_CH0_EQ2_AC_VAR_SETTING_63_56<0>" */,
       config input SC_PMA_CH0_EQ2_AC_RES_SETTING_52_48[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_EQ2_AC_RES_SETTING_52_48<4>, SC_PMA_CH0_EQ2_AC_RES_SETTING_52_48<3>, SC_PMA_CH0_EQ2_AC_RES_SETTING_52_48<2>, SC_PMA_CH0_EQ2_AC_RES_SETTING_52_48<1>, SC_PMA_CH0_EQ2_AC_RES_SETTING_52_48<0>" */,
       config input SC_PMA_CH0_EQ2_DC_RESTOP_SETTING_47_46[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_EQ2_DC_RESTOP_SETTING_47_46<1>, SC_PMA_CH0_EQ2_DC_RESTOP_SETTING_47_46<0>" */,
       config input SC_PMA_CH0_EQ1_DC_RESTOP_SETTING_43_40[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_EQ1_DC_RESTOP_SETTING_43_40<3>, SC_PMA_CH0_EQ1_DC_RESTOP_SETTING_43_40<2>, SC_PMA_CH0_EQ1_DC_RESTOP_SETTING_43_40<1>, SC_PMA_CH0_EQ1_DC_RESTOP_SETTING_43_40<0>" */,
       config input SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32<7>, SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32<6>, SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32<5>, SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32<4>, SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32<3>, SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32<2>, SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32<1>, SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32<0>" */,
       config input SC_PMA_CH0_EQ2_CURRENT_SETTING_31_29[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_EQ2_CURRENT_SETTING_31_29<2>, SC_PMA_CH0_EQ2_CURRENT_SETTING_31_29<1>, SC_PMA_CH0_EQ2_CURRENT_SETTING_31_29<0>" */,
       config input SC_PMA_CH0_EQ1_AC_RES_SETTING_28_24[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_EQ1_AC_RES_SETTING_28_24<4>, SC_PMA_CH0_EQ1_AC_RES_SETTING_28_24<3>, SC_PMA_CH0_EQ1_AC_RES_SETTING_28_24<2>, SC_PMA_CH0_EQ1_AC_RES_SETTING_28_24<1>, SC_PMA_CH0_EQ1_AC_RES_SETTING_28_24<0>" */,
       config input SC_PMA_CH0_EQ1_CURRENT_SETTING_19_16[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_EQ1_CURRENT_SETTING_19_16<3>, SC_PMA_CH0_EQ1_CURRENT_SETTING_19_16<2>, SC_PMA_CH0_EQ1_CURRENT_SETTING_19_16<1>, SC_PMA_CH0_EQ1_CURRENT_SETTING_19_16<0>" */,
       config input SC_PMA_CH0_RPLUS_15_12[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_RPLUS_15_12<3>, SC_PMA_CH0_RPLUS_15_12<2>, SC_PMA_CH0_RPLUS_15_12<1>, SC_PMA_CH0_RPLUS_15_12<0>" */,
       config input SC_PMA_CH0_RMINUS_11_8[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_RMINUS_11_8<3>, SC_PMA_CH0_RMINUS_11_8<2>, SC_PMA_CH0_RMINUS_11_8<1>, SC_PMA_CH0_RMINUS_11_8<0>" */,
       config input SC_PMA_CH0_RVALSET_7_6[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_RVALSET_7_6<1>, SC_PMA_CH0_RVALSET_7_6<0>" */,
       config input SC_PMA_CH0_RTERM_5_4[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_RTERM_5_4<1>, SC_PMA_CH0_RTERM_5_4<0>" */,
       config input SC_PMA_CH0_DCFB_EN_2    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_DCFB_EN_2" */,
       config input SC_PMA_CH0_DCCOUP_1    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_DCCOUP_1" */,
       config input SC_PMA_CH0_3G_0    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_3G_0" */,
       config input SC_PMA_CH1_TXDATA_WIDTH_381_380[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_TXDATA_WIDTH_381_380<1>, SC_PMA_CH1_TXDATA_WIDTH_381_380<0>" */,
       config input SC_PMA_CH1_TX_TESTPATTERN_375_374[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_TX_TESTPATTERN_375_374<1>, SC_PMA_CH1_TX_TESTPATTERN_375_374<0>" */,
       config input SC_PMA_CH1_TESTPATTERN_O_ENABLE_373    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_TESTPATTERN_O_ENABLE_373" */,
       config input SC_PMA_CH1_DISABLE_BSMODE_DRVAMP_372    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_DISABLE_BSMODE_DRVAMP_372" */,
       config input SC_PMA_CH1_FORCE_BIST_ENABLE_371    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_FORCE_BIST_ENABLE_371" */,
       config input SC_PMA_CH1_FORCE_ELECTRICAL_IDLE_370    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_FORCE_ELECTRICAL_IDLE_370" */,
       config input SC_PMA_CH1_FORCE_RXDCT_ENABLE_369    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_FORCE_RXDCT_ENABLE_369" */,
       config input SC_PMA_CH1_FORCE_EXTLB_ENABLE_368    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_FORCE_EXTLB_ENABLE_368" */,
       config input SC_PMA_CH1_DISABLE_LANE_SYNC_367    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_DISABLE_LANE_SYNC_367" */,
       config input SC_PMA_CH1_DISABLE_ELECTRICAL_IDLE_366    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_DISABLE_ELECTRICAL_IDLE_366" */,
       config input SC_PMA_CH1_DISABLE_RXDCT_ENABLE_365    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_DISABLE_RXDCT_ENABLE_365" */,
       config input SC_PMA_CH1_DISABLE_EXTLB_ENABLE_364    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_DISABLE_EXTLB_ENABLE_364" */,
       config input SC_PMA_CH1_DISABLE_LOW_SPEED_PATH_ENABLE_363    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_DISABLE_LOW_SPEED_PATH_ENABLE_363" */,
       config input SC_PMA_CH1_FORCE_LANE_ENABLE_362    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_FORCE_LANE_ENABLE_362" */,
       config input SC_PMA_CH1_FORCE_LANE_RESETB_DISABLE_361    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_FORCE_LANE_RESETB_DISABLE_361" */,
       config input SC_PMA_CH1_RXDCT_LGBW_ENABLE_359    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_RXDCT_LGBW_ENABLE_359" */,
       config input SC_PMA_CH1_RXDCT_VTH_358_357[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_RXDCT_VTH_358_357<1>, SC_PMA_CH1_RXDCT_VTH_358_357<0>" */,
       config input SC_PMA_CH1_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355<1>, SC_PMA_CH1_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355<0>" */,
       config input SC_PMA_CH1_DRV_RTERM_CONTROL_354_352[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_DRV_RTERM_CONTROL_354_352<2>, SC_PMA_CH1_DRV_RTERM_CONTROL_354_352<1>, SC_PMA_CH1_DRV_RTERM_CONTROL_354_352<0>" */,
       config input SC_PMA_CH1_FDRV_AMP_CONTROL_351_350[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_FDRV_AMP_CONTROL_351_350<1>, SC_PMA_CH1_FDRV_AMP_CONTROL_351_350<0>" */,
       config input SC_PMA_CH1_PREPC_AMP_CONTROL_349_348[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_PREPC_AMP_CONTROL_349_348<1>, SC_PMA_CH1_PREPC_AMP_CONTROL_349_348<0>" */,
       config input SC_PMA_CH1_PREMC_AMP_CONTROL_347_346[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_PREMC_AMP_CONTROL_347_346<1>, SC_PMA_CH1_PREMC_AMP_CONTROL_347_346<0>" */,
       config input SC_PMA_CH1_SER_AMP_CONTROL_345_344[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_SER_AMP_CONTROL_345_344<1>, SC_PMA_CH1_SER_AMP_CONTROL_345_344<0>" */,
       config input SC_PMA_CH1_PFD_LOOP_RESISTOR_SETTING_327_324[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_PFD_LOOP_RESISTOR_SETTING_327_324<3>, SC_PMA_CH1_PFD_LOOP_RESISTOR_SETTING_327_324<2>, SC_PMA_CH1_PFD_LOOP_RESISTOR_SETTING_327_324<1>, SC_PMA_CH1_PFD_LOOP_RESISTOR_SETTING_327_324<0>" */,
       config input SC_PMA_CH1_PD_LOOP_RESISTOR_SETTING_323_320[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_PD_LOOP_RESISTOR_SETTING_323_320<3>, SC_PMA_CH1_PD_LOOP_RESISTOR_SETTING_323_320<2>, SC_PMA_CH1_PD_LOOP_RESISTOR_SETTING_323_320<1>, SC_PMA_CH1_PD_LOOP_RESISTOR_SETTING_323_320<0>" */,
       config input SC_PMA_CH1_CDR_TEST_OUT_SELECT_319    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_CDR_TEST_OUT_SELECT_319" */,
       config input SC_PMA_CH1_PI_DIV1_BP_318    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_PI_DIV1_BP_318" */,
       config input SC_PMA_CH1_PI_TEST_FOR_CKI_317    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_PI_TEST_FOR_CKI_317" */,
       config input SC_PMA_CH1_PI_CURRENT_SETTING_316_314[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_PI_CURRENT_SETTING_316_314<2>, SC_PMA_CH1_PI_CURRENT_SETTING_316_314<1>, SC_PMA_CH1_PI_CURRENT_SETTING_316_314<0>" */,
       config input SC_PMA_CH1_PI_FREQUENCY_SETTING_313_312[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_PI_FREQUENCY_SETTING_313_312<1>, SC_PMA_CH1_PI_FREQUENCY_SETTING_313_312<0>" */,
       config input SC_PMA_CH1_TEST_OUT_SELECT_FOR_RCK_311    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_TEST_OUT_SELECT_FOR_RCK_311" */,
       config input SC_PMA_CH1_TEST_OUT_SELECT_SOURCE_310    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_TEST_OUT_SELECT_SOURCE_310" */,
       config input SC_PMA_CH1_TEST_DATA_OUT_SELECT_SOURCE_309    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_TEST_DATA_OUT_SELECT_SOURCE_309" */,
       config input SC_PMA_CH1_TEST_CK_OUT_SELECT_SOURCE_308    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_TEST_CK_OUT_SELECT_SOURCE_308" */,
       config input SC_PMA_CH1_ENABLE_SLIP1UI_MODULE_307    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_ENABLE_SLIP1UI_MODULE_307" */,
       config input SC_PMA_CH1_PN_SWAP_ENABLE_306    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_PN_SWAP_ENABLE_306" */,
       config input SC_PMA_CH1_SIPO_BIT_SETTING_305_304[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_SIPO_BIT_SETTING_305_304<1>, SC_PMA_CH1_SIPO_BIT_SETTING_305_304<0>" */,
       config input SC_PMA_CH1_OOB_EN_303    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_OOB_EN_303" */,
       config input SC_PMA_CH1_ALOS_EN_302    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_ALOS_EN_302" */,
       config input SC_PMA_CH1_LFMODE_301    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_LFMODE_301" */,
       config input SC_PMA_CH1_TSO_HS_SEL_300    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_TSO_HS_SEL_300" */,
       config input SC_PMA_CH1_LX_SELLC_295    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_LX_SELLC_295" */,
       config input SC_PMA_CH1_LX_RXPLL_DIVSEL45_FB_287    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_LX_RXPLL_DIVSEL45_FB_287" */,
       config input SC_PMA_CH1_LX_RXPLL_DIVSEL_FB_286_284[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_LX_RXPLL_DIVSEL_FB_286_284<2>, SC_PMA_CH1_LX_RXPLL_DIVSEL_FB_286_284<1>, SC_PMA_CH1_LX_RXPLL_DIVSEL_FB_286_284<0>" */,
       config input SC_PMA_CH1_LX_RXPLL_DIVSEL_REF_283_282[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_LX_RXPLL_DIVSEL_REF_283_282<1>, SC_PMA_CH1_LX_RXPLL_DIVSEL_REF_283_282<0>" */,
       config input SC_PMA_CH1_PICODE_279_272[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_PICODE_279_272<7>, SC_PMA_CH1_PICODE_279_272<6>, SC_PMA_CH1_PICODE_279_272<5>, SC_PMA_CH1_PICODE_279_272<4>, SC_PMA_CH1_PICODE_279_272<3>, SC_PMA_CH1_PICODE_279_272<2>, SC_PMA_CH1_PICODE_279_272<1>, SC_PMA_CH1_PICODE_279_272<0>" */,
       config input SC_PMA_CH1_RX_REFCK_SEL_265_264[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_RX_REFCK_SEL_265_264<1>, SC_PMA_CH1_RX_REFCK_SEL_265_264<0>" */,
       config input SC_PMA_CH1_PFDLPEN_REGISTER_CONTROL_ENABLE_259    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_PFDLPEN_REGISTER_CONTROL_ENABLE_259" */,
       config input SC_PMA_CH1_PFDLPEN_REGISTER_SETTING_258    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_PFDLPEN_REGISTER_SETTING_258" */,
       config input SC_PMA_CH1_PDLPEN_REGISTER_CONTROL_ENABLE_257    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_PDLPEN_REGISTER_CONTROL_ENABLE_257" */,
       config input SC_PMA_CH1_PDLPEN_REGISTER_SETTING_256    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_PDLPEN_REGISTER_SETTING_256" */,
       config input SC_PMA_CH1_DIV_CHANGE_ENABLE_DELAY_TIMER_254_253[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_DIV_CHANGE_ENABLE_DELAY_TIMER_254_253<1>, SC_PMA_CH1_DIV_CHANGE_ENABLE_DELAY_TIMER_254_253<0>" */,
       config input SC_PMA_CH1_DIV_CHANGE_ENABLE_SIGNAL_GATING_252    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_DIV_CHANGE_ENABLE_SIGNAL_GATING_252" */,
       config input SC_PMA_CH1_CDR_ALIGN_REGISTER_SETTING_VALUE_251    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_CDR_ALIGN_REGISTER_SETTING_VALUE_251" */,
       config input SC_PMA_CH1_FORCE_CDR_ALIGN_ENABLE_250    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_FORCE_CDR_ALIGN_ENABLE_250" */,
       config input SC_PMA_CH1_SELLC_REGISTER_SETTING_VALUE_249    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_SELLC_REGISTER_SETTING_VALUE_249" */,
       config input SC_PMA_CH1_SELLC_CONTROL_BY_REGISTER_248    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_SELLC_CONTROL_BY_REGISTER_248" */,
       config input SC_PMA_CH1_REG_PLLI_LDO_VREF_SETTING_247_245[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_PLLI_LDO_VREF_SETTING_247_245<2>, SC_PMA_CH1_REG_PLLI_LDO_VREF_SETTING_247_245<1>, SC_PMA_CH1_REG_PLLI_LDO_VREF_SETTING_247_245<0>" */,
       config input SC_PMA_CH1_REG_PLLI_LDO_BYPASS_CURRENT_244_242[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_PLLI_LDO_BYPASS_CURRENT_244_242<2>, SC_PMA_CH1_REG_PLLI_LDO_BYPASS_CURRENT_244_242<1>, SC_PMA_CH1_REG_PLLI_LDO_BYPASS_CURRENT_244_242<0>" */,
       config input SC_PMA_CH1_REG_PLL_HSTEST_ENABLE_239    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_PLL_HSTEST_ENABLE_239" */,
       config input SC_PMA_CH1_REG_PLL_ISNK_CURRENT_CONTROL_238_237[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_PLL_ISNK_CURRENT_CONTROL_238_237<1>, SC_PMA_CH1_REG_PLL_ISNK_CURRENT_CONTROL_238_237<0>" */,
       config input SC_PMA_CH1_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232<4>, SC_PMA_CH1_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232<3>, SC_PMA_CH1_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232<2>, SC_PMA_CH1_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232<1>, SC_PMA_CH1_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232<0>" */,
       config input SC_PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229<2>, SC_PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229<1>, SC_PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229<0>" */,
       config input SC_PMA_CH1_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224<4>, SC_PMA_CH1_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224<3>, SC_PMA_CH1_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224<2>, SC_PMA_CH1_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224<1>, SC_PMA_CH1_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224<0>" */,
       config input SC_PMA_CH1_REG_PLL_CP0_BIAS_CONTROL_223_221[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_PLL_CP0_BIAS_CONTROL_223_221<2>, SC_PMA_CH1_REG_PLL_CP0_BIAS_CONTROL_223_221<1>, SC_PMA_CH1_REG_PLL_CP0_BIAS_CONTROL_223_221<0>" */,
       config input SC_PMA_CH1_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216<4>, SC_PMA_CH1_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216<3>, SC_PMA_CH1_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216<2>, SC_PMA_CH1_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216<1>, SC_PMA_CH1_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216<0>" */,
       config input SC_PMA_CH1_REG_PLL_CP1_BIAS_CONTROL_215_213[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_PLL_CP1_BIAS_CONTROL_215_213<2>, SC_PMA_CH1_REG_PLL_CP1_BIAS_CONTROL_215_213<1>, SC_PMA_CH1_REG_PLL_CP1_BIAS_CONTROL_215_213<0>" */,
       config input SC_PMA_CH1_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208<4>, SC_PMA_CH1_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208<3>, SC_PMA_CH1_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208<2>, SC_PMA_CH1_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208<1>, SC_PMA_CH1_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208<0>" */,
       config input SC_PMA_CH1_REG_PLL_CP0_CURRENT_SETTING_207_205[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_PLL_CP0_CURRENT_SETTING_207_205<2>, SC_PMA_CH1_REG_PLL_CP0_CURRENT_SETTING_207_205<1>, SC_PMA_CH1_REG_PLL_CP0_CURRENT_SETTING_207_205<0>" */,
       config input SC_PMA_CH1_REG_PLL_CP1_CURRENT_SETTING_204_202[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_PLL_CP1_CURRENT_SETTING_204_202<2>, SC_PMA_CH1_REG_PLL_CP1_CURRENT_SETTING_204_202<1>, SC_PMA_CH1_REG_PLL_CP1_CURRENT_SETTING_204_202<0>" */,
       config input SC_PMA_CH1_REG_PLL_GM1_CURRENT_SETTING_201_199[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_PLL_GM1_CURRENT_SETTING_201_199<2>, SC_PMA_CH1_REG_PLL_GM1_CURRENT_SETTING_201_199<1>, SC_PMA_CH1_REG_PLL_GM1_CURRENT_SETTING_201_199<0>" */,
       config input SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_198_196[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_198_196<2>, SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_198_196<1>, SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_198_196<0>" */,
       config input SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193<2>, SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193<1>, SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193<0>" */,
       config input SC_PMA_CH1_REG_PLL_REG_CUR_192_190[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_PLL_REG_CUR_192_190<2>, SC_PMA_CH1_REG_PLL_REG_CUR_192_190<1>, SC_PMA_CH1_REG_PLL_REG_CUR_192_190<0>" */,
       config input SC_PMA_CH1_REG_PLL_LCCUR_189_187[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_PLL_LCCUR_189_187<2>, SC_PMA_CH1_REG_PLL_LCCUR_189_187<1>, SC_PMA_CH1_REG_PLL_LCCUR_189_187<0>" */,
       config input SC_PMA_CH1_REG_PLL_LCOBAS_186_185[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_PLL_LCOBAS_186_185<1>, SC_PMA_CH1_REG_PLL_LCOBAS_186_185<0>" */,
       config input SC_PMA_CH1_REG_PLL_FB_CK_TEST_OUT_ENABLE_184    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_PLL_FB_CK_TEST_OUT_ENABLE_184" */,
       config input SC_PMA_CH1_CDR_ALIGN_TIMER_183_182[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_CDR_ALIGN_TIMER_183_182<1>, SC_PMA_CH1_CDR_ALIGN_TIMER_183_182<0>" */,
       config input SC_PMA_CH1_CALIB_WAIT_181_180[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_CALIB_WAIT_181_180<1>, SC_PMA_CH1_CALIB_WAIT_181_180<0>" */,
       config input SC_PMA_CH1_CALIB_TIMER_179_178[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_CALIB_TIMER_179_178<1>, SC_PMA_CH1_CALIB_TIMER_179_178<0>" */,
       config input SC_PMA_CH1_TOT_RANGE_177_176[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_TOT_RANGE_177_176<1>, SC_PMA_CH1_TOT_RANGE_177_176<0>" */,
       config input SC_PMA_CH1_SUB_RANGE_175_174[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_SUB_RANGE_175_174<1>, SC_PMA_CH1_SUB_RANGE_175_174<0>" */,
       config input SC_PMA_CH1_OVLP_173_172[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_OVLP_173_172<1>, SC_PMA_CH1_OVLP_173_172<0>" */,
       config input SC_PMA_CH1_BIST_WAIT_171_170[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_BIST_WAIT_171_170<1>, SC_PMA_CH1_BIST_WAIT_171_170<0>" */,
       config input SC_PMA_CH1_BIST_TIMER_169_168[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_BIST_TIMER_169_168<1>, SC_PMA_CH1_BIST_TIMER_169_168<0>" */,
       config input SC_PMA_CH1_BAND_LB_167_165[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_BAND_LB_167_165<2>, SC_PMA_CH1_BAND_LB_167_165<1>, SC_PMA_CH1_BAND_LB_167_165<0>" */,
       config input SC_PMA_CH1_BAND_HB_164_160[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_BAND_HB_164_160<4>, SC_PMA_CH1_BAND_HB_164_160<3>, SC_PMA_CH1_BAND_HB_164_160<2>, SC_PMA_CH1_BAND_HB_164_160<1>, SC_PMA_CH1_BAND_HB_164_160<0>" */,
       config input SC_PMA_CH1_FREQ_LOCK_ACCURACY_159_157[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_FREQ_LOCK_ACCURACY_159_157<2>, SC_PMA_CH1_FREQ_LOCK_ACCURACY_159_157<1>, SC_PMA_CH1_FREQ_LOCK_ACCURACY_159_157<0>" */,
       config input SC_PMA_CH1_REG_SET_LC_BAND_156_152[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_SET_LC_BAND_156_152<4>, SC_PMA_CH1_REG_SET_LC_BAND_156_152<3>, SC_PMA_CH1_REG_SET_LC_BAND_156_152<2>, SC_PMA_CH1_REG_SET_LC_BAND_156_152<1>, SC_PMA_CH1_REG_SET_LC_BAND_156_152<0>" */,
       config input SC_PMA_CH1_REG_SET_VCODIV_151_150[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_SET_VCODIV_151_150<1>, SC_PMA_CH1_REG_SET_VCODIV_151_150<0>" */,
       config input SC_PMA_CH1_REGISTER_SET_VCODIV_BAND_ENABLE_149    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REGISTER_SET_VCODIV_BAND_ENABLE_149" */,
       config input SC_PMA_CH1_REG_SET_PLL_LOCK_148    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_SET_PLL_LOCK_148" */,
       config input SC_PMA_CH1_REGISTER_SET_PLL_LOCK_ENABLE_147    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REGISTER_SET_PLL_LOCK_ENABLE_147" */,
       config input SC_PMA_CH1_REG_SET_VCO_HI_146    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_SET_VCO_HI_146" */,
       config input SC_PMA_CH1_REG_SET_VCO_LO_145    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_SET_VCO_LO_145" */,
       config input SC_PMA_CH1_REGISTER_SET_VCO_HI_VCO_LO_ENABLE_144    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REGISTER_SET_VCO_HI_VCO_LO_ENABLE_144" */,
       //config input SC_PMA_CH1_FORCE_LC_PLL_LOOP_EN_143_142[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_FORCE_LC_PLL_LOOP_EN_143_142<1>, SC_PMA_CH1_FORCE_LC_PLL_LOOP_EN_143_142<0>" */,
       config input SC_PMA_CH1_VCO_DIV_CALI_BYPASS_141    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_VCO_DIV_CALI_BYPASS_141" */,
       config input SC_PMA_CH1_BIST_EN_140    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_BIST_EN_140" */,
       config input SC_PMA_CH1_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE_139    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE_139" */,
       config input SC_PMA_CH1_FREQ_DETECT_ENABLE_SOURCE_138    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_FREQ_DETECT_ENABLE_SOURCE_138" */,
       config input SC_PMA_CH1_REG_SET_DIVSEL_REF_137_136[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_SET_DIVSEL_REF_137_136<1>, SC_PMA_CH1_REG_SET_DIVSEL_REF_137_136<0>" */,
       config input SC_PMA_CH1_REG_SET_DIVSEL45_FB_135    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_SET_DIVSEL45_FB_135" */,
       config input SC_PMA_CH1_REG_SET_DIVSEL_FB_134_132[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_SET_DIVSEL_FB_134_132<2>, SC_PMA_CH1_REG_SET_DIVSEL_FB_134_132<1>, SC_PMA_CH1_REG_SET_DIVSEL_FB_134_132<0>" */,
       config input SC_PMA_CH1_PLL_LOOP_EN_SETTING_131    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_PLL_LOOP_EN_SETTING_131" */,
       config input SC_PMA_CH1_REGISTER_SET_TXPLL_DIV_ENABLE_130    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REGISTER_SET_TXPLL_DIV_ENABLE_130" */,
       config input SC_PMA_CH1_FORCE_RXPLL_RESET_129    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_FORCE_RXPLL_RESET_129" */,
       config input SC_PMA_CH1_FORCE_RXPLL_ON_128    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_FORCE_RXPLL_ON_128" */,
       config input SC_PMA_CH1_DPCK_DIV2_126    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_DPCK_DIV2_126" */,
       config input SC_PMA_CH1_LFO_SETTING_122_120[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_LFO_SETTING_122_120<2>, SC_PMA_CH1_LFO_SETTING_122_120<1>, SC_PMA_CH1_LFO_SETTING_122_120<0>" */,
       config input SC_PMA_CH1_ALOS_COUNTER_CLOCK_SELECTION_119    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_ALOS_COUNTER_CLOCK_SELECTION_119" */,
       config input SC_PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT_116_114[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT_116_114<2>, SC_PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT_116_114<1>, SC_PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT_116_114<0>" */,
       config input SC_PMA_CH1_OOB_ENTER_DELAY_SETTING_111_110[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_OOB_ENTER_DELAY_SETTING_111_110<1>, SC_PMA_CH1_OOB_ENTER_DELAY_SETTING_111_110<0>" */,
       config input SC_PMA_CH1_ALOS_LOW_TO_HIGH_COUNTER_SETTING_109_108[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_ALOS_LOW_TO_HIGH_COUNTER_SETTING_109_108<1>, SC_PMA_CH1_ALOS_LOW_TO_HIGH_COUNTER_SETTING_109_108<0>" */,
       config input SC_PMA_CH1_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL_106    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL_106" */,
       config input SC_PMA_CH1_ALOS_EXIT_COUNTER_CLOCK_DIVIDER_105_104[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_ALOS_EXIT_COUNTER_CLOCK_DIVIDER_105_104<1>, SC_PMA_CH1_ALOS_EXIT_COUNTER_CLOCK_DIVIDER_105_104<0>" */,
       config input SC_PMA_CH1_OOB_OSCILATER_FREQUENCY_SETTING_103_102[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_OOB_OSCILATER_FREQUENCY_SETTING_103_102<1>, SC_PMA_CH1_OOB_OSCILATER_FREQUENCY_SETTING_103_102<0>" */,
       config input SC_PMA_CH1_FORCE_OOB_101    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_FORCE_OOB_101" */,
       config input SC_PMA_CH1_OOB_VTH_SET_100_96[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_OOB_VTH_SET_100_96<4>, SC_PMA_CH1_OOB_VTH_SET_100_96<3>, SC_PMA_CH1_OOB_VTH_SET_100_96<2>, SC_PMA_CH1_OOB_VTH_SET_100_96<1>, SC_PMA_CH1_OOB_VTH_SET_100_96<0>" */,
       config input SC_PMA_CH1_FORCE_DET_FORCE_ALOS_LOW_95    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_FORCE_DET_FORCE_ALOS_LOW_95" */,
       config input SC_PMA_CH1_ALOS_THRESHOLD_VOLTAGE_94_90[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_ALOS_THRESHOLD_VOLTAGE_94_90<4>, SC_PMA_CH1_ALOS_THRESHOLD_VOLTAGE_94_90<3>, SC_PMA_CH1_ALOS_THRESHOLD_VOLTAGE_94_90<2>, SC_PMA_CH1_ALOS_THRESHOLD_VOLTAGE_94_90<1>, SC_PMA_CH1_ALOS_THRESHOLD_VOLTAGE_94_90<0>" */,
       config input SC_PMA_CH1_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE_89_88[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE_89_88<1>, SC_PMA_CH1_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE_89_88<0>" */,
       config input SC_PMA_CH1_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84<3>, SC_PMA_CH1_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84<2>, SC_PMA_CH1_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84<1>, SC_PMA_CH1_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84<0>" */,
       config input SC_PMA_CH1_REGL_POSITIVE_HYSTERESIS_SETTING_83_80[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REGL_POSITIVE_HYSTERESIS_SETTING_83_80<3>, SC_PMA_CH1_REGL_POSITIVE_HYSTERESIS_SETTING_83_80<2>, SC_PMA_CH1_REGL_POSITIVE_HYSTERESIS_SETTING_83_80<1>, SC_PMA_CH1_REGL_POSITIVE_HYSTERESIS_SETTING_83_80<0>" */,
       config input SC_PMA_CH1_REG_EN_77    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REG_EN_77" */,
       config input SC_PMA_CH1_REGREF_SEL_76    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_REGREF_SEL_76" */,
       config input SC_PMA_CH1_DC496_75_72[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_DC496_75_72<3>, SC_PMA_CH1_DC496_75_72<2>, SC_PMA_CH1_DC496_75_72<1>, SC_PMA_CH1_DC496_75_72<0>" */,
       config input SC_PMA_CH1_EQ2_AC_VAR_SETTING_63_56[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_EQ2_AC_VAR_SETTING_63_56<7>, SC_PMA_CH1_EQ2_AC_VAR_SETTING_63_56<6>, SC_PMA_CH1_EQ2_AC_VAR_SETTING_63_56<5>, SC_PMA_CH1_EQ2_AC_VAR_SETTING_63_56<4>, SC_PMA_CH1_EQ2_AC_VAR_SETTING_63_56<3>, SC_PMA_CH1_EQ2_AC_VAR_SETTING_63_56<2>, SC_PMA_CH1_EQ2_AC_VAR_SETTING_63_56<1>, SC_PMA_CH1_EQ2_AC_VAR_SETTING_63_56<0>" */,
       config input SC_PMA_CH1_EQ2_AC_RES_SETTING_52_48[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_EQ2_AC_RES_SETTING_52_48<4>, SC_PMA_CH1_EQ2_AC_RES_SETTING_52_48<3>, SC_PMA_CH1_EQ2_AC_RES_SETTING_52_48<2>, SC_PMA_CH1_EQ2_AC_RES_SETTING_52_48<1>, SC_PMA_CH1_EQ2_AC_RES_SETTING_52_48<0>" */,
       config input SC_PMA_CH1_EQ2_DC_RESTOP_SETTING_47_46[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_EQ2_DC_RESTOP_SETTING_47_46<1>, SC_PMA_CH1_EQ2_DC_RESTOP_SETTING_47_46<0>" */,
       config input SC_PMA_CH1_EQ1_DC_RESTOP_SETTING_43_40[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_EQ1_DC_RESTOP_SETTING_43_40<3>, SC_PMA_CH1_EQ1_DC_RESTOP_SETTING_43_40<2>, SC_PMA_CH1_EQ1_DC_RESTOP_SETTING_43_40<1>, SC_PMA_CH1_EQ1_DC_RESTOP_SETTING_43_40<0>" */,
       config input SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32<7>, SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32<6>, SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32<5>, SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32<4>, SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32<3>, SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32<2>, SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32<1>, SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32<0>" */,
       config input SC_PMA_CH1_EQ2_CURRENT_SETTING_31_29[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_EQ2_CURRENT_SETTING_31_29<2>, SC_PMA_CH1_EQ2_CURRENT_SETTING_31_29<1>, SC_PMA_CH1_EQ2_CURRENT_SETTING_31_29<0>" */,
       config input SC_PMA_CH1_EQ1_AC_RES_SETTING_28_24[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_EQ1_AC_RES_SETTING_28_24<4>, SC_PMA_CH1_EQ1_AC_RES_SETTING_28_24<3>, SC_PMA_CH1_EQ1_AC_RES_SETTING_28_24<2>, SC_PMA_CH1_EQ1_AC_RES_SETTING_28_24<1>, SC_PMA_CH1_EQ1_AC_RES_SETTING_28_24<0>" */,
       config input SC_PMA_CH1_EQ1_CURRENT_SETTING_19_16[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_EQ1_CURRENT_SETTING_19_16<3>, SC_PMA_CH1_EQ1_CURRENT_SETTING_19_16<2>, SC_PMA_CH1_EQ1_CURRENT_SETTING_19_16<1>, SC_PMA_CH1_EQ1_CURRENT_SETTING_19_16<0>" */,
       config input SC_PMA_CH1_RPLUS_15_12[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_RPLUS_15_12<3>, SC_PMA_CH1_RPLUS_15_12<2>, SC_PMA_CH1_RPLUS_15_12<1>, SC_PMA_CH1_RPLUS_15_12<0>" */,
       config input SC_PMA_CH1_RMINUS_11_8[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_RMINUS_11_8<3>, SC_PMA_CH1_RMINUS_11_8<2>, SC_PMA_CH1_RMINUS_11_8<1>, SC_PMA_CH1_RMINUS_11_8<0>" */,
       config input SC_PMA_CH1_RVALSET_7_6[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_RVALSET_7_6<1>, SC_PMA_CH1_RVALSET_7_6<0>" */,
       config input SC_PMA_CH1_RTERM_5_4[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_RTERM_5_4<1>, SC_PMA_CH1_RTERM_5_4<0>" */,
       config input SC_PMA_CH1_DCFB_EN_2    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_DCFB_EN_2" */,
       config input SC_PMA_CH1_DCCOUP_1    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_DCCOUP_1" */,
       config input SC_PMA_CH1_3G_0    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_3G_0" */,
       config input SC_PMA_CH2_TXDATA_WIDTH_381_380[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_TXDATA_WIDTH_381_380<1>, SC_PMA_CH2_TXDATA_WIDTH_381_380<0>" */,
       config input SC_PMA_CH2_TX_TESTPATTERN_375_374[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_TX_TESTPATTERN_375_374<1>, SC_PMA_CH2_TX_TESTPATTERN_375_374<0>" */,
       config input SC_PMA_CH2_TESTPATTERN_O_ENABLE_373    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_TESTPATTERN_O_ENABLE_373" */,
       config input SC_PMA_CH2_DISABLE_BSMODE_DRVAMP_372    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_DISABLE_BSMODE_DRVAMP_372" */,
       config input SC_PMA_CH2_FORCE_BIST_ENABLE_371    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_FORCE_BIST_ENABLE_371" */,
       config input SC_PMA_CH2_FORCE_ELECTRICAL_IDLE_370    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_FORCE_ELECTRICAL_IDLE_370" */,
       config input SC_PMA_CH2_FORCE_RXDCT_ENABLE_369    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_FORCE_RXDCT_ENABLE_369" */,
       config input SC_PMA_CH2_FORCE_EXTLB_ENABLE_368    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_FORCE_EXTLB_ENABLE_368" */,
       config input SC_PMA_CH2_DISABLE_LANE_SYNC_367    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_DISABLE_LANE_SYNC_367" */,
       config input SC_PMA_CH2_DISABLE_ELECTRICAL_IDLE_366    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_DISABLE_ELECTRICAL_IDLE_366" */,
       config input SC_PMA_CH2_DISABLE_RXDCT_ENABLE_365    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_DISABLE_RXDCT_ENABLE_365" */,
       config input SC_PMA_CH2_DISABLE_EXTLB_ENABLE_364    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_DISABLE_EXTLB_ENABLE_364" */,
       config input SC_PMA_CH2_DISABLE_LOW_SPEED_PATH_ENABLE_363    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_DISABLE_LOW_SPEED_PATH_ENABLE_363" */,
       config input SC_PMA_CH2_FORCE_LANE_ENABLE_362    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_FORCE_LANE_ENABLE_362" */,
       config input SC_PMA_CH2_FORCE_LANE_RESETB_DISABLE_361    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_FORCE_LANE_RESETB_DISABLE_361" */,
       config input SC_PMA_CH2_RXDCT_LGBW_ENABLE_359    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_RXDCT_LGBW_ENABLE_359" */,
       config input SC_PMA_CH2_RXDCT_VTH_358_357[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_RXDCT_VTH_358_357<1>, SC_PMA_CH2_RXDCT_VTH_358_357<0>" */,
       config input SC_PMA_CH2_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355<1>, SC_PMA_CH2_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355<0>" */,
       config input SC_PMA_CH2_DRV_RTERM_CONTROL_354_352[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_DRV_RTERM_CONTROL_354_352<2>, SC_PMA_CH2_DRV_RTERM_CONTROL_354_352<1>, SC_PMA_CH2_DRV_RTERM_CONTROL_354_352<0>" */,
       config input SC_PMA_CH2_FDRV_AMP_CONTROL_351_350[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_FDRV_AMP_CONTROL_351_350<1>, SC_PMA_CH2_FDRV_AMP_CONTROL_351_350<0>" */,
       config input SC_PMA_CH2_PREPC_AMP_CONTROL_349_348[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_PREPC_AMP_CONTROL_349_348<1>, SC_PMA_CH2_PREPC_AMP_CONTROL_349_348<0>" */,
       config input SC_PMA_CH2_PREMC_AMP_CONTROL_347_346[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_PREMC_AMP_CONTROL_347_346<1>, SC_PMA_CH2_PREMC_AMP_CONTROL_347_346<0>" */,
       config input SC_PMA_CH2_SER_AMP_CONTROL_345_344[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_SER_AMP_CONTROL_345_344<1>, SC_PMA_CH2_SER_AMP_CONTROL_345_344<0>" */,
       config input SC_PMA_CH2_PFD_LOOP_RESISTOR_SETTING_327_324[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_PFD_LOOP_RESISTOR_SETTING_327_324<3>, SC_PMA_CH2_PFD_LOOP_RESISTOR_SETTING_327_324<2>, SC_PMA_CH2_PFD_LOOP_RESISTOR_SETTING_327_324<1>, SC_PMA_CH2_PFD_LOOP_RESISTOR_SETTING_327_324<0>" */,
       config input SC_PMA_CH2_PD_LOOP_RESISTOR_SETTING_323_320[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_PD_LOOP_RESISTOR_SETTING_323_320<3>, SC_PMA_CH2_PD_LOOP_RESISTOR_SETTING_323_320<2>, SC_PMA_CH2_PD_LOOP_RESISTOR_SETTING_323_320<1>, SC_PMA_CH2_PD_LOOP_RESISTOR_SETTING_323_320<0>" */,
       config input SC_PMA_CH2_CDR_TEST_OUT_SELECT_319    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_CDR_TEST_OUT_SELECT_319" */,
       config input SC_PMA_CH2_PI_DIV1_BP_318    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_PI_DIV1_BP_318" */,
       config input SC_PMA_CH2_PI_TEST_FOR_CKI_317    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_PI_TEST_FOR_CKI_317" */,
       config input SC_PMA_CH2_PI_CURRENT_SETTING_316_314[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_PI_CURRENT_SETTING_316_314<2>, SC_PMA_CH2_PI_CURRENT_SETTING_316_314<1>, SC_PMA_CH2_PI_CURRENT_SETTING_316_314<0>" */,
       config input SC_PMA_CH2_PI_FREQUENCY_SETTING_313_312[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_PI_FREQUENCY_SETTING_313_312<1>, SC_PMA_CH2_PI_FREQUENCY_SETTING_313_312<0>" */,
       config input SC_PMA_CH2_TEST_OUT_SELECT_FOR_RCK_311    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_TEST_OUT_SELECT_FOR_RCK_311" */,
       config input SC_PMA_CH2_TEST_OUT_SELECT_SOURCE_310    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_TEST_OUT_SELECT_SOURCE_310" */,
       config input SC_PMA_CH2_TEST_DATA_OUT_SELECT_SOURCE_309    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_TEST_DATA_OUT_SELECT_SOURCE_309" */,
       config input SC_PMA_CH2_TEST_CK_OUT_SELECT_SOURCE_308    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_TEST_CK_OUT_SELECT_SOURCE_308" */,
       config input SC_PMA_CH2_ENABLE_SLIP1UI_MODULE_307    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_ENABLE_SLIP1UI_MODULE_307" */,
       config input SC_PMA_CH2_PN_SWAP_ENABLE_306    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_PN_SWAP_ENABLE_306" */,
       config input SC_PMA_CH2_SIPO_BIT_SETTING_305_304[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_SIPO_BIT_SETTING_305_304<1>, SC_PMA_CH2_SIPO_BIT_SETTING_305_304<0>" */,
       config input SC_PMA_CH2_OOB_EN_303    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_OOB_EN_303" */,
       config input SC_PMA_CH2_ALOS_EN_302    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_ALOS_EN_302" */,
       config input SC_PMA_CH2_LFMODE_301    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_LFMODE_301" */,
       config input SC_PMA_CH2_TSO_HS_SEL_300    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_TSO_HS_SEL_300" */,
       config input SC_PMA_CH2_LX_SELLC_295    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_LX_SELLC_295" */,
       config input SC_PMA_CH2_LX_RXPLL_DIVSEL45_FB_287    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_LX_RXPLL_DIVSEL45_FB_287" */,
       config input SC_PMA_CH2_LX_RXPLL_DIVSEL_FB_286_284[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_LX_RXPLL_DIVSEL_FB_286_284<2>, SC_PMA_CH2_LX_RXPLL_DIVSEL_FB_286_284<1>, SC_PMA_CH2_LX_RXPLL_DIVSEL_FB_286_284<0>" */,
       config input SC_PMA_CH2_LX_RXPLL_DIVSEL_REF_283_282[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_LX_RXPLL_DIVSEL_REF_283_282<1>, SC_PMA_CH2_LX_RXPLL_DIVSEL_REF_283_282<0>" */,
       config input SC_PMA_CH2_PICODE_279_272[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_PICODE_279_272<7>, SC_PMA_CH2_PICODE_279_272<6>, SC_PMA_CH2_PICODE_279_272<5>, SC_PMA_CH2_PICODE_279_272<4>, SC_PMA_CH2_PICODE_279_272<3>, SC_PMA_CH2_PICODE_279_272<2>, SC_PMA_CH2_PICODE_279_272<1>, SC_PMA_CH2_PICODE_279_272<0>" */,
       config input SC_PMA_CH2_RX_REFCK_SEL_265_264[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_RX_REFCK_SEL_265_264<1>, SC_PMA_CH2_RX_REFCK_SEL_265_264<0>" */,
       config input SC_PMA_CH2_PFDLPEN_REGISTER_CONTROL_ENABLE_259    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_PFDLPEN_REGISTER_CONTROL_ENABLE_259" */,
       config input SC_PMA_CH2_PFDLPEN_REGISTER_SETTING_258    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_PFDLPEN_REGISTER_SETTING_258" */,
       config input SC_PMA_CH2_PDLPEN_REGISTER_CONTROL_ENABLE_257    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_PDLPEN_REGISTER_CONTROL_ENABLE_257" */,
       config input SC_PMA_CH2_PDLPEN_REGISTER_SETTING_256    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_PDLPEN_REGISTER_SETTING_256" */,
       config input SC_PMA_CH2_DIV_CHANGE_ENABLE_DELAY_TIMER_254_253[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_DIV_CHANGE_ENABLE_DELAY_TIMER_254_253<1>, SC_PMA_CH2_DIV_CHANGE_ENABLE_DELAY_TIMER_254_253<0>" */,
       config input SC_PMA_CH2_DIV_CHANGE_ENABLE_SIGNAL_GATING_252    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_DIV_CHANGE_ENABLE_SIGNAL_GATING_252" */,
       config input SC_PMA_CH2_CDR_ALIGN_REGISTER_SETTING_VALUE_251    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_CDR_ALIGN_REGISTER_SETTING_VALUE_251" */,
       config input SC_PMA_CH2_FORCE_CDR_ALIGN_ENABLE_250    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_FORCE_CDR_ALIGN_ENABLE_250" */,
       config input SC_PMA_CH2_SELLC_REGISTER_SETTING_VALUE_249    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_SELLC_REGISTER_SETTING_VALUE_249" */,
       config input SC_PMA_CH2_SELLC_CONTROL_BY_REGISTER_248    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_SELLC_CONTROL_BY_REGISTER_248" */,
       config input SC_PMA_CH2_REG_PLLI_LDO_VREF_SETTING_247_245[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_PLLI_LDO_VREF_SETTING_247_245<2>, SC_PMA_CH2_REG_PLLI_LDO_VREF_SETTING_247_245<1>, SC_PMA_CH2_REG_PLLI_LDO_VREF_SETTING_247_245<0>" */,
       config input SC_PMA_CH2_REG_PLLI_LDO_BYPASS_CURRENT_244_242[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_PLLI_LDO_BYPASS_CURRENT_244_242<2>, SC_PMA_CH2_REG_PLLI_LDO_BYPASS_CURRENT_244_242<1>, SC_PMA_CH2_REG_PLLI_LDO_BYPASS_CURRENT_244_242<0>" */,
       config input SC_PMA_CH2_REG_PLL_HSTEST_ENABLE_239    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_PLL_HSTEST_ENABLE_239" */,
       config input SC_PMA_CH2_REG_PLL_ISNK_CURRENT_CONTROL_238_237[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_PLL_ISNK_CURRENT_CONTROL_238_237<1>, SC_PMA_CH2_REG_PLL_ISNK_CURRENT_CONTROL_238_237<0>" */,
       config input SC_PMA_CH2_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232<4>, SC_PMA_CH2_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232<3>, SC_PMA_CH2_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232<2>, SC_PMA_CH2_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232<1>, SC_PMA_CH2_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232<0>" */,
       config input SC_PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229<2>, SC_PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229<1>, SC_PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229<0>" */,
       config input SC_PMA_CH2_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224<4>, SC_PMA_CH2_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224<3>, SC_PMA_CH2_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224<2>, SC_PMA_CH2_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224<1>, SC_PMA_CH2_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224<0>" */,
       config input SC_PMA_CH2_REG_PLL_CP0_BIAS_CONTROL_223_221[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_PLL_CP0_BIAS_CONTROL_223_221<2>, SC_PMA_CH2_REG_PLL_CP0_BIAS_CONTROL_223_221<1>, SC_PMA_CH2_REG_PLL_CP0_BIAS_CONTROL_223_221<0>" */,
       config input SC_PMA_CH2_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216<4>, SC_PMA_CH2_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216<3>, SC_PMA_CH2_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216<2>, SC_PMA_CH2_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216<1>, SC_PMA_CH2_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216<0>" */,
       config input SC_PMA_CH2_REG_PLL_CP1_BIAS_CONTROL_215_213[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_PLL_CP1_BIAS_CONTROL_215_213<2>, SC_PMA_CH2_REG_PLL_CP1_BIAS_CONTROL_215_213<1>, SC_PMA_CH2_REG_PLL_CP1_BIAS_CONTROL_215_213<0>" */,
       config input SC_PMA_CH2_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208<4>, SC_PMA_CH2_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208<3>, SC_PMA_CH2_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208<2>, SC_PMA_CH2_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208<1>, SC_PMA_CH2_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208<0>" */,
       config input SC_PMA_CH2_REG_PLL_CP0_CURRENT_SETTING_207_205[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_PLL_CP0_CURRENT_SETTING_207_205<2>, SC_PMA_CH2_REG_PLL_CP0_CURRENT_SETTING_207_205<1>, SC_PMA_CH2_REG_PLL_CP0_CURRENT_SETTING_207_205<0>" */,
       config input SC_PMA_CH2_REG_PLL_CP1_CURRENT_SETTING_204_202[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_PLL_CP1_CURRENT_SETTING_204_202<2>, SC_PMA_CH2_REG_PLL_CP1_CURRENT_SETTING_204_202<1>, SC_PMA_CH2_REG_PLL_CP1_CURRENT_SETTING_204_202<0>" */,
       config input SC_PMA_CH2_REG_PLL_GM1_CURRENT_SETTING_201_199[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_PLL_GM1_CURRENT_SETTING_201_199<2>, SC_PMA_CH2_REG_PLL_GM1_CURRENT_SETTING_201_199<1>, SC_PMA_CH2_REG_PLL_GM1_CURRENT_SETTING_201_199<0>" */,
       config input SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_198_196[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_198_196<2>, SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_198_196<1>, SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_198_196<0>" */,
       config input SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193<2>, SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193<1>, SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193<0>" */,
       config input SC_PMA_CH2_REG_PLL_REG_CUR_192_190[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_PLL_REG_CUR_192_190<2>, SC_PMA_CH2_REG_PLL_REG_CUR_192_190<1>, SC_PMA_CH2_REG_PLL_REG_CUR_192_190<0>" */,
       config input SC_PMA_CH2_REG_PLL_LCCUR_189_187[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_PLL_LCCUR_189_187<2>, SC_PMA_CH2_REG_PLL_LCCUR_189_187<1>, SC_PMA_CH2_REG_PLL_LCCUR_189_187<0>" */,
       config input SC_PMA_CH2_REG_PLL_LCOBAS_186_185[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_PLL_LCOBAS_186_185<1>, SC_PMA_CH2_REG_PLL_LCOBAS_186_185<0>" */,
       config input SC_PMA_CH2_REG_PLL_FB_CK_TEST_OUT_ENABLE_184    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_PLL_FB_CK_TEST_OUT_ENABLE_184" */,
       config input SC_PMA_CH2_CDR_ALIGN_TIMER_183_182[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_CDR_ALIGN_TIMER_183_182<1>, SC_PMA_CH2_CDR_ALIGN_TIMER_183_182<0>" */,
       config input SC_PMA_CH2_CALIB_WAIT_181_180[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_CALIB_WAIT_181_180<1>, SC_PMA_CH2_CALIB_WAIT_181_180<0>" */,
       config input SC_PMA_CH2_CALIB_TIMER_179_178[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_CALIB_TIMER_179_178<1>, SC_PMA_CH2_CALIB_TIMER_179_178<0>" */,
       config input SC_PMA_CH2_TOT_RANGE_177_176[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_TOT_RANGE_177_176<1>, SC_PMA_CH2_TOT_RANGE_177_176<0>" */,
       config input SC_PMA_CH2_SUB_RANGE_175_174[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_SUB_RANGE_175_174<1>, SC_PMA_CH2_SUB_RANGE_175_174<0>" */,
       config input SC_PMA_CH2_OVLP_173_172[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_OVLP_173_172<1>, SC_PMA_CH2_OVLP_173_172<0>" */,
       config input SC_PMA_CH2_BIST_WAIT_171_170[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_BIST_WAIT_171_170<1>, SC_PMA_CH2_BIST_WAIT_171_170<0>" */,
       config input SC_PMA_CH2_BIST_TIMER_169_168[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_BIST_TIMER_169_168<1>, SC_PMA_CH2_BIST_TIMER_169_168<0>" */,
       config input SC_PMA_CH2_BAND_LB_167_165[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_BAND_LB_167_165<2>, SC_PMA_CH2_BAND_LB_167_165<1>, SC_PMA_CH2_BAND_LB_167_165<0>" */,
       config input SC_PMA_CH2_BAND_HB_164_160[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_BAND_HB_164_160<4>, SC_PMA_CH2_BAND_HB_164_160<3>, SC_PMA_CH2_BAND_HB_164_160<2>, SC_PMA_CH2_BAND_HB_164_160<1>, SC_PMA_CH2_BAND_HB_164_160<0>" */,
       config input SC_PMA_CH2_FREQ_LOCK_ACCURACY_159_157[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_FREQ_LOCK_ACCURACY_159_157<2>, SC_PMA_CH2_FREQ_LOCK_ACCURACY_159_157<1>, SC_PMA_CH2_FREQ_LOCK_ACCURACY_159_157<0>" */,
       config input SC_PMA_CH2_REG_SET_LC_BAND_156_152[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_SET_LC_BAND_156_152<4>, SC_PMA_CH2_REG_SET_LC_BAND_156_152<3>, SC_PMA_CH2_REG_SET_LC_BAND_156_152<2>, SC_PMA_CH2_REG_SET_LC_BAND_156_152<1>, SC_PMA_CH2_REG_SET_LC_BAND_156_152<0>" */,
       config input SC_PMA_CH2_REG_SET_VCODIV_151_150[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_SET_VCODIV_151_150<1>, SC_PMA_CH2_REG_SET_VCODIV_151_150<0>" */,
       config input SC_PMA_CH2_REGISTER_SET_VCODIV_BAND_ENABLE_149    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REGISTER_SET_VCODIV_BAND_ENABLE_149" */,
       config input SC_PMA_CH2_REG_SET_PLL_LOCK_148    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_SET_PLL_LOCK_148" */,
       config input SC_PMA_CH2_REGISTER_SET_PLL_LOCK_ENABLE_147    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REGISTER_SET_PLL_LOCK_ENABLE_147" */,
       config input SC_PMA_CH2_REG_SET_VCO_HI_146    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_SET_VCO_HI_146" */,
       config input SC_PMA_CH2_REG_SET_VCO_LO_145    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_SET_VCO_LO_145" */,
       config input SC_PMA_CH2_REGISTER_SET_VCO_HI_VCO_LO_ENABLE_144    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REGISTER_SET_VCO_HI_VCO_LO_ENABLE_144" */,
       //config input SC_PMA_CH2_FORCE_LC_PLL_LOOP_EN_143_142[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_FORCE_LC_PLL_LOOP_EN_143_142<1>, SC_PMA_CH2_FORCE_LC_PLL_LOOP_EN_143_142<0>" */,
       config input SC_PMA_CH2_VCO_DIV_CALI_BYPASS_141    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_VCO_DIV_CALI_BYPASS_141" */,
       config input SC_PMA_CH2_BIST_EN_140    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_BIST_EN_140" */,
       config input SC_PMA_CH2_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE_139    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE_139" */,
       config input SC_PMA_CH2_FREQ_DETECT_ENABLE_SOURCE_138    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_FREQ_DETECT_ENABLE_SOURCE_138" */,
       config input SC_PMA_CH2_REG_SET_DIVSEL_REF_137_136[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_SET_DIVSEL_REF_137_136<1>, SC_PMA_CH2_REG_SET_DIVSEL_REF_137_136<0>" */,
       config input SC_PMA_CH2_REG_SET_DIVSEL45_FB_135    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_SET_DIVSEL45_FB_135" */,
       config input SC_PMA_CH2_REG_SET_DIVSEL_FB_134_132[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_SET_DIVSEL_FB_134_132<2>, SC_PMA_CH2_REG_SET_DIVSEL_FB_134_132<1>, SC_PMA_CH2_REG_SET_DIVSEL_FB_134_132<0>" */,
       config input SC_PMA_CH2_PLL_LOOP_EN_SETTING_131    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_PLL_LOOP_EN_SETTING_131" */,
       config input SC_PMA_CH2_REGISTER_SET_TXPLL_DIV_ENABLE_130    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REGISTER_SET_TXPLL_DIV_ENABLE_130" */,
       config input SC_PMA_CH2_FORCE_RXPLL_RESET_129    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_FORCE_RXPLL_RESET_129" */,
       config input SC_PMA_CH2_FORCE_RXPLL_ON_128    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_FORCE_RXPLL_ON_128" */,
       config input SC_PMA_CH2_DPCK_DIV2_126    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_DPCK_DIV2_126" */,
       config input SC_PMA_CH2_LFO_SETTING_122_120[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_LFO_SETTING_122_120<2>, SC_PMA_CH2_LFO_SETTING_122_120<1>, SC_PMA_CH2_LFO_SETTING_122_120<0>" */,
       config input SC_PMA_CH2_ALOS_COUNTER_CLOCK_SELECTION_119    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_ALOS_COUNTER_CLOCK_SELECTION_119" */,
       config input SC_PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT_116_114[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT_116_114<2>, SC_PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT_116_114<1>, SC_PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT_116_114<0>" */,
       config input SC_PMA_CH2_OOB_ENTER_DELAY_SETTING_111_110[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_OOB_ENTER_DELAY_SETTING_111_110<1>, SC_PMA_CH2_OOB_ENTER_DELAY_SETTING_111_110<0>" */,
       config input SC_PMA_CH2_ALOS_LOW_TO_HIGH_COUNTER_SETTING_109_108[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_ALOS_LOW_TO_HIGH_COUNTER_SETTING_109_108<1>, SC_PMA_CH2_ALOS_LOW_TO_HIGH_COUNTER_SETTING_109_108<0>" */,
       config input SC_PMA_CH2_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL_106    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL_106" */,
       config input SC_PMA_CH2_ALOS_EXIT_COUNTER_CLOCK_DIVIDER_105_104[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_ALOS_EXIT_COUNTER_CLOCK_DIVIDER_105_104<1>, SC_PMA_CH2_ALOS_EXIT_COUNTER_CLOCK_DIVIDER_105_104<0>" */,
       config input SC_PMA_CH2_OOB_OSCILATER_FREQUENCY_SETTING_103_102[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_OOB_OSCILATER_FREQUENCY_SETTING_103_102<1>, SC_PMA_CH2_OOB_OSCILATER_FREQUENCY_SETTING_103_102<0>" */,
       config input SC_PMA_CH2_FORCE_OOB_101    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_FORCE_OOB_101" */,
       config input SC_PMA_CH2_OOB_VTH_SET_100_96[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_OOB_VTH_SET_100_96<4>, SC_PMA_CH2_OOB_VTH_SET_100_96<3>, SC_PMA_CH2_OOB_VTH_SET_100_96<2>, SC_PMA_CH2_OOB_VTH_SET_100_96<1>, SC_PMA_CH2_OOB_VTH_SET_100_96<0>" */,
       config input SC_PMA_CH2_FORCE_DET_FORCE_ALOS_LOW_95    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_FORCE_DET_FORCE_ALOS_LOW_95" */,
       config input SC_PMA_CH2_ALOS_THRESHOLD_VOLTAGE_94_90[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_ALOS_THRESHOLD_VOLTAGE_94_90<4>, SC_PMA_CH2_ALOS_THRESHOLD_VOLTAGE_94_90<3>, SC_PMA_CH2_ALOS_THRESHOLD_VOLTAGE_94_90<2>, SC_PMA_CH2_ALOS_THRESHOLD_VOLTAGE_94_90<1>, SC_PMA_CH2_ALOS_THRESHOLD_VOLTAGE_94_90<0>" */,
       config input SC_PMA_CH2_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE_89_88[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE_89_88<1>, SC_PMA_CH2_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE_89_88<0>" */,
       config input SC_PMA_CH2_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84<3>, SC_PMA_CH2_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84<2>, SC_PMA_CH2_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84<1>, SC_PMA_CH2_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84<0>" */,
       config input SC_PMA_CH2_REGL_POSITIVE_HYSTERESIS_SETTING_83_80[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REGL_POSITIVE_HYSTERESIS_SETTING_83_80<3>, SC_PMA_CH2_REGL_POSITIVE_HYSTERESIS_SETTING_83_80<2>, SC_PMA_CH2_REGL_POSITIVE_HYSTERESIS_SETTING_83_80<1>, SC_PMA_CH2_REGL_POSITIVE_HYSTERESIS_SETTING_83_80<0>" */,
       config input SC_PMA_CH2_REG_EN_77    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REG_EN_77" */,
       config input SC_PMA_CH2_REGREF_SEL_76    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_REGREF_SEL_76" */,
       config input SC_PMA_CH2_DC496_75_72[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_DC496_75_72<3>, SC_PMA_CH2_DC496_75_72<2>, SC_PMA_CH2_DC496_75_72<1>, SC_PMA_CH2_DC496_75_72<0>" */,
       config input SC_PMA_CH2_EQ2_AC_VAR_SETTING_63_56[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_EQ2_AC_VAR_SETTING_63_56<7>, SC_PMA_CH2_EQ2_AC_VAR_SETTING_63_56<6>, SC_PMA_CH2_EQ2_AC_VAR_SETTING_63_56<5>, SC_PMA_CH2_EQ2_AC_VAR_SETTING_63_56<4>, SC_PMA_CH2_EQ2_AC_VAR_SETTING_63_56<3>, SC_PMA_CH2_EQ2_AC_VAR_SETTING_63_56<2>, SC_PMA_CH2_EQ2_AC_VAR_SETTING_63_56<1>, SC_PMA_CH2_EQ2_AC_VAR_SETTING_63_56<0>" */,
       config input SC_PMA_CH2_EQ2_AC_RES_SETTING_52_48[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_EQ2_AC_RES_SETTING_52_48<4>, SC_PMA_CH2_EQ2_AC_RES_SETTING_52_48<3>, SC_PMA_CH2_EQ2_AC_RES_SETTING_52_48<2>, SC_PMA_CH2_EQ2_AC_RES_SETTING_52_48<1>, SC_PMA_CH2_EQ2_AC_RES_SETTING_52_48<0>" */,
       config input SC_PMA_CH2_EQ2_DC_RESTOP_SETTING_47_46[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_EQ2_DC_RESTOP_SETTING_47_46<1>, SC_PMA_CH2_EQ2_DC_RESTOP_SETTING_47_46<0>" */,
       config input SC_PMA_CH2_EQ1_DC_RESTOP_SETTING_43_40[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_EQ1_DC_RESTOP_SETTING_43_40<3>, SC_PMA_CH2_EQ1_DC_RESTOP_SETTING_43_40<2>, SC_PMA_CH2_EQ1_DC_RESTOP_SETTING_43_40<1>, SC_PMA_CH2_EQ1_DC_RESTOP_SETTING_43_40<0>" */,
       config input SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32<7>, SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32<6>, SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32<5>, SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32<4>, SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32<3>, SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32<2>, SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32<1>, SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32<0>" */,
       config input SC_PMA_CH2_EQ2_CURRENT_SETTING_31_29[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_EQ2_CURRENT_SETTING_31_29<2>, SC_PMA_CH2_EQ2_CURRENT_SETTING_31_29<1>, SC_PMA_CH2_EQ2_CURRENT_SETTING_31_29<0>" */,
       config input SC_PMA_CH2_EQ1_AC_RES_SETTING_28_24[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_EQ1_AC_RES_SETTING_28_24<4>, SC_PMA_CH2_EQ1_AC_RES_SETTING_28_24<3>, SC_PMA_CH2_EQ1_AC_RES_SETTING_28_24<2>, SC_PMA_CH2_EQ1_AC_RES_SETTING_28_24<1>, SC_PMA_CH2_EQ1_AC_RES_SETTING_28_24<0>" */,
       config input SC_PMA_CH2_EQ1_CURRENT_SETTING_19_16[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_EQ1_CURRENT_SETTING_19_16<3>, SC_PMA_CH2_EQ1_CURRENT_SETTING_19_16<2>, SC_PMA_CH2_EQ1_CURRENT_SETTING_19_16<1>, SC_PMA_CH2_EQ1_CURRENT_SETTING_19_16<0>" */,
       config input SC_PMA_CH2_RPLUS_15_12[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_RPLUS_15_12<3>, SC_PMA_CH2_RPLUS_15_12<2>, SC_PMA_CH2_RPLUS_15_12<1>, SC_PMA_CH2_RPLUS_15_12<0>" */,
       config input SC_PMA_CH2_RMINUS_11_8[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_RMINUS_11_8<3>, SC_PMA_CH2_RMINUS_11_8<2>, SC_PMA_CH2_RMINUS_11_8<1>, SC_PMA_CH2_RMINUS_11_8<0>" */,
       config input SC_PMA_CH2_RVALSET_7_6[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_RVALSET_7_6<1>, SC_PMA_CH2_RVALSET_7_6<0>" */,
       config input SC_PMA_CH2_RTERM_5_4[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_RTERM_5_4<1>, SC_PMA_CH2_RTERM_5_4<0>" */,
       config input SC_PMA_CH2_DCFB_EN_2    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_DCFB_EN_2" */,
       config input SC_PMA_CH2_DCCOUP_1    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_DCCOUP_1" */,
       config input SC_PMA_CH2_3G_0    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_3G_0" */,
       config input SC_PMA_CH3_TXDATA_WIDTH_381_380[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_TXDATA_WIDTH_381_380<1>, SC_PMA_CH3_TXDATA_WIDTH_381_380<0>" */,
       config input SC_PMA_CH3_TX_TESTPATTERN_375_374[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_TX_TESTPATTERN_375_374<1>, SC_PMA_CH3_TX_TESTPATTERN_375_374<0>" */,
       config input SC_PMA_CH3_TESTPATTERN_O_ENABLE_373    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_TESTPATTERN_O_ENABLE_373" */,
       config input SC_PMA_CH3_DISABLE_BSMODE_DRVAMP_372    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_DISABLE_BSMODE_DRVAMP_372" */,
       config input SC_PMA_CH3_FORCE_BIST_ENABLE_371    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_FORCE_BIST_ENABLE_371" */,
       config input SC_PMA_CH3_FORCE_ELECTRICAL_IDLE_370    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_FORCE_ELECTRICAL_IDLE_370" */,
       config input SC_PMA_CH3_FORCE_RXDCT_ENABLE_369    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_FORCE_RXDCT_ENABLE_369" */,
       config input SC_PMA_CH3_FORCE_EXTLB_ENABLE_368    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_FORCE_EXTLB_ENABLE_368" */,
       config input SC_PMA_CH3_DISABLE_LANE_SYNC_367    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_DISABLE_LANE_SYNC_367" */,
       config input SC_PMA_CH3_DISABLE_ELECTRICAL_IDLE_366    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_DISABLE_ELECTRICAL_IDLE_366" */,
       config input SC_PMA_CH3_DISABLE_RXDCT_ENABLE_365    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_DISABLE_RXDCT_ENABLE_365" */,
       config input SC_PMA_CH3_DISABLE_EXTLB_ENABLE_364    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_DISABLE_EXTLB_ENABLE_364" */,
       config input SC_PMA_CH3_DISABLE_LOW_SPEED_PATH_ENABLE_363    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_DISABLE_LOW_SPEED_PATH_ENABLE_363" */,
       config input SC_PMA_CH3_FORCE_LANE_ENABLE_362    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_FORCE_LANE_ENABLE_362" */,
       config input SC_PMA_CH3_FORCE_LANE_RESETB_DISABLE_361    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_FORCE_LANE_RESETB_DISABLE_361" */,
       config input SC_PMA_CH3_RXDCT_LGBW_ENABLE_359    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_RXDCT_LGBW_ENABLE_359" */,
       config input SC_PMA_CH3_RXDCT_VTH_358_357[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_RXDCT_VTH_358_357<1>, SC_PMA_CH3_RXDCT_VTH_358_357<0>" */,
       config input SC_PMA_CH3_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355<1>, SC_PMA_CH3_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355<0>" */,
       config input SC_PMA_CH3_DRV_RTERM_CONTROL_354_352[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_DRV_RTERM_CONTROL_354_352<2>, SC_PMA_CH3_DRV_RTERM_CONTROL_354_352<1>, SC_PMA_CH3_DRV_RTERM_CONTROL_354_352<0>" */,
       config input SC_PMA_CH3_FDRV_AMP_CONTROL_351_350[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_FDRV_AMP_CONTROL_351_350<1>, SC_PMA_CH3_FDRV_AMP_CONTROL_351_350<0>" */,
       config input SC_PMA_CH3_PREPC_AMP_CONTROL_349_348[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_PREPC_AMP_CONTROL_349_348<1>, SC_PMA_CH3_PREPC_AMP_CONTROL_349_348<0>" */,
       config input SC_PMA_CH3_PREMC_AMP_CONTROL_347_346[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_PREMC_AMP_CONTROL_347_346<1>, SC_PMA_CH3_PREMC_AMP_CONTROL_347_346<0>" */,
       config input SC_PMA_CH3_SER_AMP_CONTROL_345_344[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_SER_AMP_CONTROL_345_344<1>, SC_PMA_CH3_SER_AMP_CONTROL_345_344<0>" */,
       config input SC_PMA_CH3_PFD_LOOP_RESISTOR_SETTING_327_324[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_PFD_LOOP_RESISTOR_SETTING_327_324<3>, SC_PMA_CH3_PFD_LOOP_RESISTOR_SETTING_327_324<2>, SC_PMA_CH3_PFD_LOOP_RESISTOR_SETTING_327_324<1>, SC_PMA_CH3_PFD_LOOP_RESISTOR_SETTING_327_324<0>" */,
       config input SC_PMA_CH3_PD_LOOP_RESISTOR_SETTING_323_320[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_PD_LOOP_RESISTOR_SETTING_323_320<3>, SC_PMA_CH3_PD_LOOP_RESISTOR_SETTING_323_320<2>, SC_PMA_CH3_PD_LOOP_RESISTOR_SETTING_323_320<1>, SC_PMA_CH3_PD_LOOP_RESISTOR_SETTING_323_320<0>" */,
       config input SC_PMA_CH3_CDR_TEST_OUT_SELECT_319    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_CDR_TEST_OUT_SELECT_319" */,
       config input SC_PMA_CH3_PI_DIV1_BP_318    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_PI_DIV1_BP_318" */,
       config input SC_PMA_CH3_PI_TEST_FOR_CKI_317    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_PI_TEST_FOR_CKI_317" */,
       config input SC_PMA_CH3_PI_CURRENT_SETTING_316_314[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_PI_CURRENT_SETTING_316_314<2>, SC_PMA_CH3_PI_CURRENT_SETTING_316_314<1>, SC_PMA_CH3_PI_CURRENT_SETTING_316_314<0>" */,
       config input SC_PMA_CH3_PI_FREQUENCY_SETTING_313_312[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_PI_FREQUENCY_SETTING_313_312<1>, SC_PMA_CH3_PI_FREQUENCY_SETTING_313_312<0>" */,
       config input SC_PMA_CH3_TEST_OUT_SELECT_FOR_RCK_311    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_TEST_OUT_SELECT_FOR_RCK_311" */,
       config input SC_PMA_CH3_TEST_OUT_SELECT_SOURCE_310    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_TEST_OUT_SELECT_SOURCE_310" */,
       config input SC_PMA_CH3_TEST_DATA_OUT_SELECT_SOURCE_309    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_TEST_DATA_OUT_SELECT_SOURCE_309" */,
       config input SC_PMA_CH3_TEST_CK_OUT_SELECT_SOURCE_308    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_TEST_CK_OUT_SELECT_SOURCE_308" */,
       config input SC_PMA_CH3_ENABLE_SLIP1UI_MODULE_307    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_ENABLE_SLIP1UI_MODULE_307" */,
       config input SC_PMA_CH3_PN_SWAP_ENABLE_306    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_PN_SWAP_ENABLE_306" */,
       config input SC_PMA_CH3_SIPO_BIT_SETTING_305_304[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_SIPO_BIT_SETTING_305_304<1>, SC_PMA_CH3_SIPO_BIT_SETTING_305_304<0>" */,
       config input SC_PMA_CH3_OOB_EN_303    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_OOB_EN_303" */,
       config input SC_PMA_CH3_ALOS_EN_302    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_ALOS_EN_302" */,
       config input SC_PMA_CH3_LFMODE_301    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_LFMODE_301" */,
       config input SC_PMA_CH3_TSO_HS_SEL_300    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_TSO_HS_SEL_300" */,
       config input SC_PMA_CH3_LX_SELLC_295    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_LX_SELLC_295" */,
       config input SC_PMA_CH3_LX_RXPLL_DIVSEL45_FB_287    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_LX_RXPLL_DIVSEL45_FB_287" */,
       config input SC_PMA_CH3_LX_RXPLL_DIVSEL_FB_286_284[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_LX_RXPLL_DIVSEL_FB_286_284<2>, SC_PMA_CH3_LX_RXPLL_DIVSEL_FB_286_284<1>, SC_PMA_CH3_LX_RXPLL_DIVSEL_FB_286_284<0>" */,
       config input SC_PMA_CH3_LX_RXPLL_DIVSEL_REF_283_282[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_LX_RXPLL_DIVSEL_REF_283_282<1>, SC_PMA_CH3_LX_RXPLL_DIVSEL_REF_283_282<0>" */,
       config input SC_PMA_CH3_PICODE_279_272[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_PICODE_279_272<7>, SC_PMA_CH3_PICODE_279_272<6>, SC_PMA_CH3_PICODE_279_272<5>, SC_PMA_CH3_PICODE_279_272<4>, SC_PMA_CH3_PICODE_279_272<3>, SC_PMA_CH3_PICODE_279_272<2>, SC_PMA_CH3_PICODE_279_272<1>, SC_PMA_CH3_PICODE_279_272<0>" */,
       config input SC_PMA_CH3_RX_REFCK_SEL_265_264[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_RX_REFCK_SEL_265_264<1>, SC_PMA_CH3_RX_REFCK_SEL_265_264<0>" */,
       config input SC_PMA_CH3_PFDLPEN_REGISTER_CONTROL_ENABLE_259    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_PFDLPEN_REGISTER_CONTROL_ENABLE_259" */,
       config input SC_PMA_CH3_PFDLPEN_REGISTER_SETTING_258    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_PFDLPEN_REGISTER_SETTING_258" */,
       config input SC_PMA_CH3_PDLPEN_REGISTER_CONTROL_ENABLE_257    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_PDLPEN_REGISTER_CONTROL_ENABLE_257" */,
       config input SC_PMA_CH3_PDLPEN_REGISTER_SETTING_256    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_PDLPEN_REGISTER_SETTING_256" */,
       config input SC_PMA_CH3_DIV_CHANGE_ENABLE_DELAY_TIMER_254_253[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_DIV_CHANGE_ENABLE_DELAY_TIMER_254_253<1>, SC_PMA_CH3_DIV_CHANGE_ENABLE_DELAY_TIMER_254_253<0>" */,
       config input SC_PMA_CH3_DIV_CHANGE_ENABLE_SIGNAL_GATING_252    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_DIV_CHANGE_ENABLE_SIGNAL_GATING_252" */,
       config input SC_PMA_CH3_CDR_ALIGN_REGISTER_SETTING_VALUE_251    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_CDR_ALIGN_REGISTER_SETTING_VALUE_251" */,
       config input SC_PMA_CH3_FORCE_CDR_ALIGN_ENABLE_250    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_FORCE_CDR_ALIGN_ENABLE_250" */,
       config input SC_PMA_CH3_SELLC_REGISTER_SETTING_VALUE_249    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_SELLC_REGISTER_SETTING_VALUE_249" */,
       config input SC_PMA_CH3_SELLC_CONTROL_BY_REGISTER_248    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_SELLC_CONTROL_BY_REGISTER_248" */,
       config input SC_PMA_CH3_REG_PLLI_LDO_VREF_SETTING_247_245[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_PLLI_LDO_VREF_SETTING_247_245<2>, SC_PMA_CH3_REG_PLLI_LDO_VREF_SETTING_247_245<1>, SC_PMA_CH3_REG_PLLI_LDO_VREF_SETTING_247_245<0>" */,
       config input SC_PMA_CH3_REG_PLLI_LDO_BYPASS_CURRENT_244_242[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_PLLI_LDO_BYPASS_CURRENT_244_242<2>, SC_PMA_CH3_REG_PLLI_LDO_BYPASS_CURRENT_244_242<1>, SC_PMA_CH3_REG_PLLI_LDO_BYPASS_CURRENT_244_242<0>" */,
       config input SC_PMA_CH3_REG_PLL_HSTEST_ENABLE_239    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_PLL_HSTEST_ENABLE_239" */,
       config input SC_PMA_CH3_REG_PLL_ISNK_CURRENT_CONTROL_238_237[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_PLL_ISNK_CURRENT_CONTROL_238_237<1>, SC_PMA_CH3_REG_PLL_ISNK_CURRENT_CONTROL_238_237<0>" */,
       config input SC_PMA_CH3_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232<4>, SC_PMA_CH3_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232<3>, SC_PMA_CH3_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232<2>, SC_PMA_CH3_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232<1>, SC_PMA_CH3_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232<0>" */,
       config input SC_PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229<2>, SC_PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229<1>, SC_PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229<0>" */,
       config input SC_PMA_CH3_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224<4>, SC_PMA_CH3_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224<3>, SC_PMA_CH3_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224<2>, SC_PMA_CH3_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224<1>, SC_PMA_CH3_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224<0>" */,
       config input SC_PMA_CH3_REG_PLL_CP0_BIAS_CONTROL_223_221[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_PLL_CP0_BIAS_CONTROL_223_221<2>, SC_PMA_CH3_REG_PLL_CP0_BIAS_CONTROL_223_221<1>, SC_PMA_CH3_REG_PLL_CP0_BIAS_CONTROL_223_221<0>" */,
       config input SC_PMA_CH3_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216<4>, SC_PMA_CH3_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216<3>, SC_PMA_CH3_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216<2>, SC_PMA_CH3_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216<1>, SC_PMA_CH3_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216<0>" */,
       config input SC_PMA_CH3_REG_PLL_CP1_BIAS_CONTROL_215_213[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_PLL_CP1_BIAS_CONTROL_215_213<2>, SC_PMA_CH3_REG_PLL_CP1_BIAS_CONTROL_215_213<1>, SC_PMA_CH3_REG_PLL_CP1_BIAS_CONTROL_215_213<0>" */,
       config input SC_PMA_CH3_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208<4>, SC_PMA_CH3_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208<3>, SC_PMA_CH3_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208<2>, SC_PMA_CH3_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208<1>, SC_PMA_CH3_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208<0>" */,
       config input SC_PMA_CH3_REG_PLL_CP0_CURRENT_SETTING_207_205[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_PLL_CP0_CURRENT_SETTING_207_205<2>, SC_PMA_CH3_REG_PLL_CP0_CURRENT_SETTING_207_205<1>, SC_PMA_CH3_REG_PLL_CP0_CURRENT_SETTING_207_205<0>" */,
       config input SC_PMA_CH3_REG_PLL_CP1_CURRENT_SETTING_204_202[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_PLL_CP1_CURRENT_SETTING_204_202<2>, SC_PMA_CH3_REG_PLL_CP1_CURRENT_SETTING_204_202<1>, SC_PMA_CH3_REG_PLL_CP1_CURRENT_SETTING_204_202<0>" */,
       config input SC_PMA_CH3_REG_PLL_GM1_CURRENT_SETTING_201_199[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_PLL_GM1_CURRENT_SETTING_201_199<2>, SC_PMA_CH3_REG_PLL_GM1_CURRENT_SETTING_201_199<1>, SC_PMA_CH3_REG_PLL_GM1_CURRENT_SETTING_201_199<0>" */,
       config input SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_198_196[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_198_196<2>, SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_198_196<1>, SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_198_196<0>" */,
       config input SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193<2>, SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193<1>, SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193<0>" */,
       config input SC_PMA_CH3_REG_PLL_REG_CUR_192_190[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_PLL_REG_CUR_192_190<2>, SC_PMA_CH3_REG_PLL_REG_CUR_192_190<1>, SC_PMA_CH3_REG_PLL_REG_CUR_192_190<0>" */,
       config input SC_PMA_CH3_REG_PLL_LCCUR_189_187[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_PLL_LCCUR_189_187<2>, SC_PMA_CH3_REG_PLL_LCCUR_189_187<1>, SC_PMA_CH3_REG_PLL_LCCUR_189_187<0>" */,
       config input SC_PMA_CH3_REG_PLL_LCOBAS_186_185[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_PLL_LCOBAS_186_185<1>, SC_PMA_CH3_REG_PLL_LCOBAS_186_185<0>" */,
       config input SC_PMA_CH3_REG_PLL_FB_CK_TEST_OUT_ENABLE_184    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_PLL_FB_CK_TEST_OUT_ENABLE_184" */,
       config input SC_PMA_CH3_CDR_ALIGN_TIMER_183_182[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_CDR_ALIGN_TIMER_183_182<1>, SC_PMA_CH3_CDR_ALIGN_TIMER_183_182<0>" */,
       config input SC_PMA_CH3_CALIB_WAIT_181_180[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_CALIB_WAIT_181_180<1>, SC_PMA_CH3_CALIB_WAIT_181_180<0>" */,
       config input SC_PMA_CH3_CALIB_TIMER_179_178[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_CALIB_TIMER_179_178<1>, SC_PMA_CH3_CALIB_TIMER_179_178<0>" */,
       config input SC_PMA_CH3_TOT_RANGE_177_176[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_TOT_RANGE_177_176<1>, SC_PMA_CH3_TOT_RANGE_177_176<0>" */,
       config input SC_PMA_CH3_SUB_RANGE_175_174[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_SUB_RANGE_175_174<1>, SC_PMA_CH3_SUB_RANGE_175_174<0>" */,
       config input SC_PMA_CH3_OVLP_173_172[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_OVLP_173_172<1>, SC_PMA_CH3_OVLP_173_172<0>" */,
       config input SC_PMA_CH3_BIST_WAIT_171_170[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_BIST_WAIT_171_170<1>, SC_PMA_CH3_BIST_WAIT_171_170<0>" */,
       config input SC_PMA_CH3_BIST_TIMER_169_168[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_BIST_TIMER_169_168<1>, SC_PMA_CH3_BIST_TIMER_169_168<0>" */,
       config input SC_PMA_CH3_BAND_LB_167_165[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_BAND_LB_167_165<2>, SC_PMA_CH3_BAND_LB_167_165<1>, SC_PMA_CH3_BAND_LB_167_165<0>" */,
       config input SC_PMA_CH3_BAND_HB_164_160[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_BAND_HB_164_160<4>, SC_PMA_CH3_BAND_HB_164_160<3>, SC_PMA_CH3_BAND_HB_164_160<2>, SC_PMA_CH3_BAND_HB_164_160<1>, SC_PMA_CH3_BAND_HB_164_160<0>" */,
       config input SC_PMA_CH3_FREQ_LOCK_ACCURACY_159_157[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_FREQ_LOCK_ACCURACY_159_157<2>, SC_PMA_CH3_FREQ_LOCK_ACCURACY_159_157<1>, SC_PMA_CH3_FREQ_LOCK_ACCURACY_159_157<0>" */,
       config input SC_PMA_CH3_REG_SET_LC_BAND_156_152[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_SET_LC_BAND_156_152<4>, SC_PMA_CH3_REG_SET_LC_BAND_156_152<3>, SC_PMA_CH3_REG_SET_LC_BAND_156_152<2>, SC_PMA_CH3_REG_SET_LC_BAND_156_152<1>, SC_PMA_CH3_REG_SET_LC_BAND_156_152<0>" */,
       config input SC_PMA_CH3_REG_SET_VCODIV_151_150[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_SET_VCODIV_151_150<1>, SC_PMA_CH3_REG_SET_VCODIV_151_150<0>" */,
       config input SC_PMA_CH3_REGISTER_SET_VCODIV_BAND_ENABLE_149    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REGISTER_SET_VCODIV_BAND_ENABLE_149" */,
       config input SC_PMA_CH3_REG_SET_PLL_LOCK_148    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_SET_PLL_LOCK_148" */,
       config input SC_PMA_CH3_REGISTER_SET_PLL_LOCK_ENABLE_147    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REGISTER_SET_PLL_LOCK_ENABLE_147" */,
       config input SC_PMA_CH3_REG_SET_VCO_HI_146    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_SET_VCO_HI_146" */,
       config input SC_PMA_CH3_REG_SET_VCO_LO_145    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_SET_VCO_LO_145" */,
       config input SC_PMA_CH3_REGISTER_SET_VCO_HI_VCO_LO_ENABLE_144    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REGISTER_SET_VCO_HI_VCO_LO_ENABLE_144" */,
       //config input SC_PMA_CH3_FORCE_LC_PLL_LOOP_EN_143_142[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_FORCE_LC_PLL_LOOP_EN_143_142<1>, SC_PMA_CH3_FORCE_LC_PLL_LOOP_EN_143_142<0>" */,
       config input SC_PMA_CH3_VCO_DIV_CALI_BYPASS_141    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_VCO_DIV_CALI_BYPASS_141" */,
       config input SC_PMA_CH3_BIST_EN_140    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_BIST_EN_140" */,
       config input SC_PMA_CH3_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE_139    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE_139" */,
       config input SC_PMA_CH3_FREQ_DETECT_ENABLE_SOURCE_138    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_FREQ_DETECT_ENABLE_SOURCE_138" */,
       config input SC_PMA_CH3_REG_SET_DIVSEL_REF_137_136[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_SET_DIVSEL_REF_137_136<1>, SC_PMA_CH3_REG_SET_DIVSEL_REF_137_136<0>" */,
       config input SC_PMA_CH3_REG_SET_DIVSEL45_FB_135    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_SET_DIVSEL45_FB_135" */,
       config input SC_PMA_CH3_REG_SET_DIVSEL_FB_134_132[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_SET_DIVSEL_FB_134_132<2>, SC_PMA_CH3_REG_SET_DIVSEL_FB_134_132<1>, SC_PMA_CH3_REG_SET_DIVSEL_FB_134_132<0>" */,
       config input SC_PMA_CH3_PLL_LOOP_EN_SETTING_131    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_PLL_LOOP_EN_SETTING_131" */,
       config input SC_PMA_CH3_REGISTER_SET_TXPLL_DIV_ENABLE_130    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REGISTER_SET_TXPLL_DIV_ENABLE_130" */,
       config input SC_PMA_CH3_FORCE_RXPLL_RESET_129    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_FORCE_RXPLL_RESET_129" */,
       config input SC_PMA_CH3_FORCE_RXPLL_ON_128    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_FORCE_RXPLL_ON_128" */,
       config input SC_PMA_CH3_DPCK_DIV2_126    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_DPCK_DIV2_126" */,
       config input SC_PMA_CH3_LFO_SETTING_122_120[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_LFO_SETTING_122_120<2>, SC_PMA_CH3_LFO_SETTING_122_120<1>, SC_PMA_CH3_LFO_SETTING_122_120<0>" */,
       config input SC_PMA_CH3_ALOS_COUNTER_CLOCK_SELECTION_119    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_ALOS_COUNTER_CLOCK_SELECTION_119" */,
       config input SC_PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT_116_114[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT_116_114<2>, SC_PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT_116_114<1>, SC_PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT_116_114<0>" */,
       config input SC_PMA_CH3_OOB_ENTER_DELAY_SETTING_111_110[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_OOB_ENTER_DELAY_SETTING_111_110<1>, SC_PMA_CH3_OOB_ENTER_DELAY_SETTING_111_110<0>" */,
       config input SC_PMA_CH3_ALOS_LOW_TO_HIGH_COUNTER_SETTING_109_108[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_ALOS_LOW_TO_HIGH_COUNTER_SETTING_109_108<1>, SC_PMA_CH3_ALOS_LOW_TO_HIGH_COUNTER_SETTING_109_108<0>" */,
       config input SC_PMA_CH3_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL_106    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL_106" */,
       config input SC_PMA_CH3_ALOS_EXIT_COUNTER_CLOCK_DIVIDER_105_104[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_ALOS_EXIT_COUNTER_CLOCK_DIVIDER_105_104<1>, SC_PMA_CH3_ALOS_EXIT_COUNTER_CLOCK_DIVIDER_105_104<0>" */,
       config input SC_PMA_CH3_OOB_OSCILATER_FREQUENCY_SETTING_103_102[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_OOB_OSCILATER_FREQUENCY_SETTING_103_102<1>, SC_PMA_CH3_OOB_OSCILATER_FREQUENCY_SETTING_103_102<0>" */,
       config input SC_PMA_CH3_FORCE_OOB_101    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_FORCE_OOB_101" */,
       config input SC_PMA_CH3_OOB_VTH_SET_100_96[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_OOB_VTH_SET_100_96<4>, SC_PMA_CH3_OOB_VTH_SET_100_96<3>, SC_PMA_CH3_OOB_VTH_SET_100_96<2>, SC_PMA_CH3_OOB_VTH_SET_100_96<1>, SC_PMA_CH3_OOB_VTH_SET_100_96<0>" */,
       config input SC_PMA_CH3_FORCE_DET_FORCE_ALOS_LOW_95    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_FORCE_DET_FORCE_ALOS_LOW_95" */,
       config input SC_PMA_CH3_ALOS_THRESHOLD_VOLTAGE_94_90[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_ALOS_THRESHOLD_VOLTAGE_94_90<4>, SC_PMA_CH3_ALOS_THRESHOLD_VOLTAGE_94_90<3>, SC_PMA_CH3_ALOS_THRESHOLD_VOLTAGE_94_90<2>, SC_PMA_CH3_ALOS_THRESHOLD_VOLTAGE_94_90<1>, SC_PMA_CH3_ALOS_THRESHOLD_VOLTAGE_94_90<0>" */,
       config input SC_PMA_CH3_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE_89_88[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE_89_88<1>, SC_PMA_CH3_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE_89_88<0>" */,
       config input SC_PMA_CH3_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84<3>, SC_PMA_CH3_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84<2>, SC_PMA_CH3_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84<1>, SC_PMA_CH3_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84<0>" */,
       config input SC_PMA_CH3_REGL_POSITIVE_HYSTERESIS_SETTING_83_80[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REGL_POSITIVE_HYSTERESIS_SETTING_83_80<3>, SC_PMA_CH3_REGL_POSITIVE_HYSTERESIS_SETTING_83_80<2>, SC_PMA_CH3_REGL_POSITIVE_HYSTERESIS_SETTING_83_80<1>, SC_PMA_CH3_REGL_POSITIVE_HYSTERESIS_SETTING_83_80<0>" */,
       config input SC_PMA_CH3_REG_EN_77    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REG_EN_77" */,
       config input SC_PMA_CH3_REGREF_SEL_76    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_REGREF_SEL_76" */,
       config input SC_PMA_CH3_DC496_75_72[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_DC496_75_72<3>, SC_PMA_CH3_DC496_75_72<2>, SC_PMA_CH3_DC496_75_72<1>, SC_PMA_CH3_DC496_75_72<0>" */,
       config input SC_PMA_CH3_EQ2_AC_VAR_SETTING_63_56[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_EQ2_AC_VAR_SETTING_63_56<7>, SC_PMA_CH3_EQ2_AC_VAR_SETTING_63_56<6>, SC_PMA_CH3_EQ2_AC_VAR_SETTING_63_56<5>, SC_PMA_CH3_EQ2_AC_VAR_SETTING_63_56<4>, SC_PMA_CH3_EQ2_AC_VAR_SETTING_63_56<3>, SC_PMA_CH3_EQ2_AC_VAR_SETTING_63_56<2>, SC_PMA_CH3_EQ2_AC_VAR_SETTING_63_56<1>, SC_PMA_CH3_EQ2_AC_VAR_SETTING_63_56<0>" */,
       config input SC_PMA_CH3_EQ2_AC_RES_SETTING_52_48[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_EQ2_AC_RES_SETTING_52_48<4>, SC_PMA_CH3_EQ2_AC_RES_SETTING_52_48<3>, SC_PMA_CH3_EQ2_AC_RES_SETTING_52_48<2>, SC_PMA_CH3_EQ2_AC_RES_SETTING_52_48<1>, SC_PMA_CH3_EQ2_AC_RES_SETTING_52_48<0>" */,
       config input SC_PMA_CH3_EQ2_DC_RESTOP_SETTING_47_46[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_EQ2_DC_RESTOP_SETTING_47_46<1>, SC_PMA_CH3_EQ2_DC_RESTOP_SETTING_47_46<0>" */,
       config input SC_PMA_CH3_EQ1_DC_RESTOP_SETTING_43_40[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_EQ1_DC_RESTOP_SETTING_43_40<3>, SC_PMA_CH3_EQ1_DC_RESTOP_SETTING_43_40<2>, SC_PMA_CH3_EQ1_DC_RESTOP_SETTING_43_40<1>, SC_PMA_CH3_EQ1_DC_RESTOP_SETTING_43_40<0>" */,
       config input SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32<7>, SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32<6>, SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32<5>, SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32<4>, SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32<3>, SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32<2>, SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32<1>, SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32<0>" */,
       config input SC_PMA_CH3_EQ2_CURRENT_SETTING_31_29[2:0]    =    3'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_EQ2_CURRENT_SETTING_31_29<2>, SC_PMA_CH3_EQ2_CURRENT_SETTING_31_29<1>, SC_PMA_CH3_EQ2_CURRENT_SETTING_31_29<0>" */,
       config input SC_PMA_CH3_EQ1_AC_RES_SETTING_28_24[4:0]    =    5'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_EQ1_AC_RES_SETTING_28_24<4>, SC_PMA_CH3_EQ1_AC_RES_SETTING_28_24<3>, SC_PMA_CH3_EQ1_AC_RES_SETTING_28_24<2>, SC_PMA_CH3_EQ1_AC_RES_SETTING_28_24<1>, SC_PMA_CH3_EQ1_AC_RES_SETTING_28_24<0>" */,
       config input SC_PMA_CH3_EQ1_CURRENT_SETTING_19_16[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_EQ1_CURRENT_SETTING_19_16<3>, SC_PMA_CH3_EQ1_CURRENT_SETTING_19_16<2>, SC_PMA_CH3_EQ1_CURRENT_SETTING_19_16<1>, SC_PMA_CH3_EQ1_CURRENT_SETTING_19_16<0>" */,
       config input SC_PMA_CH3_RPLUS_15_12[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_RPLUS_15_12<3>, SC_PMA_CH3_RPLUS_15_12<2>, SC_PMA_CH3_RPLUS_15_12<1>, SC_PMA_CH3_RPLUS_15_12<0>" */,
       config input SC_PMA_CH3_RMINUS_11_8[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_RMINUS_11_8<3>, SC_PMA_CH3_RMINUS_11_8<2>, SC_PMA_CH3_RMINUS_11_8<1>, SC_PMA_CH3_RMINUS_11_8<0>" */,
       config input SC_PMA_CH3_RVALSET_7_6[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_RVALSET_7_6<1>, SC_PMA_CH3_RVALSET_7_6<0>" */,
       config input SC_PMA_CH3_RTERM_5_4[1:0]    =    2'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_RTERM_5_4<1>, SC_PMA_CH3_RTERM_5_4<0>" */,
       config input SC_PMA_CH3_DCFB_EN_2    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_DCFB_EN_2" */,
       config input SC_PMA_CH3_DCCOUP_1    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_DCCOUP_1" */,
       config input SC_PMA_CH3_3G_0    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_3G_0" */,
       config input SC_CLK_ALIGNER_RX0[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_CLK_ALIGNER_RX0<7>, SC_CLK_ALIGNER_RX0<6>, SC_CLK_ALIGNER_RX0<5>, SC_CLK_ALIGNER_RX0<4>, SC_CLK_ALIGNER_RX0<3>, SC_CLK_ALIGNER_RX0<2>, SC_CLK_ALIGNER_RX0<1>, SC_CLK_ALIGNER_RX0<0>" */,
       config input SC_CLK_ALIGNER_RX1[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_CLK_ALIGNER_RX1<7>, SC_CLK_ALIGNER_RX1<6>, SC_CLK_ALIGNER_RX1<5>, SC_CLK_ALIGNER_RX1<4>, SC_CLK_ALIGNER_RX1<3>, SC_CLK_ALIGNER_RX1<2>, SC_CLK_ALIGNER_RX1<1>, SC_CLK_ALIGNER_RX1<0>" */,
       config input SC_CLK_ALIGNER_RX2[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_CLK_ALIGNER_RX2<7>, SC_CLK_ALIGNER_RX2<6>, SC_CLK_ALIGNER_RX2<5>, SC_CLK_ALIGNER_RX2<4>, SC_CLK_ALIGNER_RX2<3>, SC_CLK_ALIGNER_RX2<2>, SC_CLK_ALIGNER_RX2<1>, SC_CLK_ALIGNER_RX2<0>" */,
       config input SC_CLK_ALIGNER_RX3[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_CLK_ALIGNER_RX3<7>, SC_CLK_ALIGNER_RX3<6>, SC_CLK_ALIGNER_RX3<5>, SC_CLK_ALIGNER_RX3<4>, SC_CLK_ALIGNER_RX3<3>, SC_CLK_ALIGNER_RX3<2>, SC_CLK_ALIGNER_RX3<1>, SC_CLK_ALIGNER_RX3<0>" */,
       config input SC_CLK_ALIGNER_TX0[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_CLK_ALIGNER_TX0<7>, SC_CLK_ALIGNER_TX0<6>, SC_CLK_ALIGNER_TX0<5>, SC_CLK_ALIGNER_TX0<4>, SC_CLK_ALIGNER_TX0<3>, SC_CLK_ALIGNER_TX0<2>, SC_CLK_ALIGNER_TX0<1>, SC_CLK_ALIGNER_TX0<0>" */,
       config input SC_CLK_ALIGNER_TX1[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_CLK_ALIGNER_TX1<7>, SC_CLK_ALIGNER_TX1<6>, SC_CLK_ALIGNER_TX1<5>, SC_CLK_ALIGNER_TX1<4>, SC_CLK_ALIGNER_TX1<3>, SC_CLK_ALIGNER_TX1<2>, SC_CLK_ALIGNER_TX1<1>, SC_CLK_ALIGNER_TX1<0>" */,
       config input SC_CLK_ALIGNER_TX2[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_CLK_ALIGNER_TX2<7>, SC_CLK_ALIGNER_TX2<6>, SC_CLK_ALIGNER_TX2<5>, SC_CLK_ALIGNER_TX2<4>, SC_CLK_ALIGNER_TX2<3>, SC_CLK_ALIGNER_TX2<2>, SC_CLK_ALIGNER_TX2<1>, SC_CLK_ALIGNER_TX2<0>" */,
       config input SC_CLK_ALIGNER_TX3[7:0]    =    8'b0    /*pragma PAP_CFG_BIT_NAME = "SC_CLK_ALIGNER_TX3<7>, SC_CLK_ALIGNER_TX3<6>, SC_CLK_ALIGNER_TX3<5>, SC_CLK_ALIGNER_TX3<4>, SC_CLK_ALIGNER_TX3<3>, SC_CLK_ALIGNER_TX3<2>, SC_CLK_ALIGNER_TX3<1>, SC_CLK_ALIGNER_TX3<0>" */,
       config input SC_DYN_DLY_EN_RX0    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_DYN_DLY_EN_RX0" */,
       config input SC_DYN_DLY_EN_RX1    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_DYN_DLY_EN_RX1" */,
       config input SC_DYN_DLY_EN_RX2    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_DYN_DLY_EN_RX2" */,
       config input SC_DYN_DLY_EN_RX3    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_DYN_DLY_EN_RX3" */,
       config input SC_DYN_DLY_EN_TX0    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_DYN_DLY_EN_TX0" */,
       config input SC_DYN_DLY_EN_TX1    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_DYN_DLY_EN_TX1" */,
       config input SC_DYN_DLY_EN_TX2    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_DYN_DLY_EN_TX2" */,
       config input SC_DYN_DLY_EN_TX3    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_DYN_DLY_EN_TX3" */,
       config input SC_DYN_DLY_SEL_RX0    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_DYN_DLY_SEL_RX0" */,
       config input SC_DYN_DLY_SEL_RX1    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_DYN_DLY_SEL_RX1" */,
       config input SC_DYN_DLY_SEL_RX2    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_DYN_DLY_SEL_RX2" */,
       config input SC_DYN_DLY_SEL_RX3    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_DYN_DLY_SEL_RX3" */,
       config input SC_DYN_DLY_SEL_TX0    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_DYN_DLY_SEL_TX0" */,
       config input SC_DYN_DLY_SEL_TX1    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_DYN_DLY_SEL_TX1" */,
       config input SC_DYN_DLY_SEL_TX2    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_DYN_DLY_SEL_TX2" */,
       config input SC_DYN_DLY_SEL_TX3    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_DYN_DLY_SEL_TX3" */,
       config input SC_CLK_ALIGNER_RSTN_RX[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_CLK_ALIGNER_RSTN_RX<3>, SC_CLK_ALIGNER_RSTN_RX<2>, SC_CLK_ALIGNER_RSTN_RX<1>, SC_CLK_ALIGNER_RSTN_RX<0>" */,
       config input SC_CLK_ALIGNER_RSTN_TX[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_CLK_ALIGNER_RSTN_TX<3>, SC_CLK_ALIGNER_RSTN_TX<2>, SC_CLK_ALIGNER_RSTN_TX<1>, SC_CLK_ALIGNER_RSTN_TX<0>" */,
       config input SC_LX_BISTLB_EN[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_LX_BISTLB_EN<3>, SC_LX_BISTLB_EN<2>, SC_LX_BISTLB_EN<1>, SC_LX_BISTLB_EN<0>" */,
       config input SC_LX_ELECIDLE_EN_MSB[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_LX_ELECIDLE_EN_MSB<3>, SC_LX_ELECIDLE_EN_MSB<2>, SC_LX_ELECIDLE_EN_MSB<1>, SC_LX_ELECIDLE_EN_MSB<0>" */,
       config input SC_LX_EXTLB_EN[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_LX_EXTLB_EN<3>, SC_LX_EXTLB_EN<2>, SC_LX_EXTLB_EN<1>, SC_LX_EXTLB_EN<0>" */,
       config input SC_LX_RXDCT_EN[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_LX_RXDCT_EN<3>, SC_LX_RXDCT_EN<2>, SC_LX_RXDCT_EN<1>, SC_LX_RXDCT_EN<0>" */,
       config input SC_LX_TX_LFMODE[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_LX_TX_LFMODE<3>, SC_LX_TX_LFMODE<2>, SC_LX_TX_LFMODE<1>, SC_LX_TX_LFMODE<0>" */,
       config input SC_RX_LANE_POWERUP[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_RX_LANE_POWERUP<3>, SC_RX_LANE_POWERUP<2>, SC_RX_LANE_POWERUP<1>, SC_RX_LANE_POWERUP<0>" */,
       config input SC_TX_LANE_POWERUP[3:0]    =    4'b0    /*pragma PAP_CFG_BIT_NAME = "SC_TX_LANE_POWERUP<3>, SC_TX_LANE_POWERUP<2>, SC_TX_LANE_POWERUP<1>, SC_TX_LANE_POWERUP<0>" */,
       config input SC_PLL_RSTN    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PLL_RSTN" */,
       config input SC_PLLPOWERDOWN    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PLLPOWERDOWN" */,
       config input SC_QUAD_PWRUP    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_QUAD_PWRUP" */,
       config input SC_GRSN_DIS    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_GRSN_DIS" */,
       config input SC_HSST_RSTN    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_HSST_RSTN" */,
       config input SC_CFG_RSTN    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_CFG_RSTN" */,
       config input SC_PMA_CH0_FORCE_LC_PLL_LOOP_EN_H_143    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_FORCE_LC_PLL_LOOP_EN_H_143" */,
       config input SC_PMA_CH0_FORCE_LC_PLL_LOOP_EN_L_142    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH0_FORCE_LC_PLL_LOOP_EN_L_142" */,  
       config input SC_PMA_CH1_FORCE_LC_PLL_LOOP_EN_H_143    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_FORCE_LC_PLL_LOOP_EN_H_143" */, 
       config input SC_PMA_CH1_FORCE_LC_PLL_LOOP_EN_L_142    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH1_FORCE_LC_PLL_LOOP_EN_L_142" */, 
       config input SC_PMA_CH2_FORCE_LC_PLL_LOOP_EN_H_143    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_FORCE_LC_PLL_LOOP_EN_H_143" */,    
       config input SC_PMA_CH2_FORCE_LC_PLL_LOOP_EN_L_142    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH2_FORCE_LC_PLL_LOOP_EN_L_142" */,    
       config input SC_PMA_CH3_FORCE_LC_PLL_LOOP_EN_H_143    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_FORCE_LC_PLL_LOOP_EN_H_143" */,    
       config input SC_PMA_CH3_FORCE_LC_PLL_LOOP_EN_L_142    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_CH3_FORCE_LC_PLL_LOOP_EN_L_142" */,   
       config input SC_PMA_QUAD_FORCE_LC_PLL_LOOP_EN_H_15    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_FORCE_LC_PLL_LOOP_EN_H_15" */,        
       config input SC_PMA_QUAD_FORCE_LC_PLL_LOOP_EN_L_14    =    1'b0    /*pragma PAP_CFG_BIT_NAME = "SC_PMA_QUAD_FORCE_LC_PLL_LOOP_EN_L_14" */,   
 


            
        output    L0TXN,
        output    L0TXP,
        input     L0RXN         = 1'b1,
        input     L0RXP         = 1'b1,
        output    RDATA_0[46:0],
        output    LX_ALOS_STA_0,
        output    LX_CDR_ALIGN_0,
        output    LX_LFO_0,
        output    LX_OOB_STA_0,
        output    LX_RXDCT_DONE_0,
        output    LX_RXDCT_OUT_0,
        input     LX_LFD_FRCORE_0      = 1'b1,
        input     LX_RX_CKDIV_DYNSEL_0 = 1'b1,
        input     PCS_RX_RSTN_0        = 1'b1,
        input     PCS_TX_RSTN_0        = 1'b1,
        input     RX0_CLK_FR_CORE      = 1'b1,
        input     RX_PLL_RSTN_0        = 1'b1,
        input     RX_PMA_RSTN_0        = 1'b1,
        input     RX_REF_CLK_0         = 1'b1,
        input     TX0_CLK_FR_CORE      = 1'b1,
        input     TX_PMA_RSTN_0        = 1'b1,
        input     LANE_SYNC_EN_0       = 1'b1,
        input     LX_AMP_CTL_0[3:0]    = 4'b1111,
        input     CIM_CLK_ALIGNER_RX0[7:0] = 8'hff,
        input     CIM_CLK_ALIGNER_TX0[7:0] = 8'hff,
        input     LX_DEEMP_CTL_0[2:0]   = 3'b111,
        input     LX_RX_CKDIV_0[1:0]    = 2'b11,
        input     TX_CKDIV_0[1:0]       = 2'b11,
        input     TDATA_0[43:0]         = 44'hfff_ffff_ffff,
        input     LX_ELECIDLE_EN_0[1:0] = 2'b11,
        output    L1TXN,
        output    L1TXP,
        input     L1RXN = 1'b1,
        input     L1RXP = 1'b1,
        output    RDATA_1[46:0],
        output    LX_ALOS_STA_1,
        output    LX_CDR_ALIGN_1,
        output    LX_LFO_1,
        output    LX_OOB_STA_1,
        output    LX_RXDCT_DONE_1,
        output    LX_RXDCT_OUT_1,
        input     LX_LFD_FRCORE_1      = 1'b1,
        input     LX_RX_CKDIV_DYNSEL_1 = 1'b1,
        input     PCS_RX_RSTN_1        = 1'b1,
        input     PCS_TX_RSTN_1        = 1'b1,
        input     RX1_CLK_FR_CORE      = 1'b1,
        input     RX_PLL_RSTN_1        = 1'b1,
        input     RX_PMA_RSTN_1        = 1'b1,
        input     RX_REF_CLK_1         = 1'b1,
        input     TX1_CLK_FR_CORE      = 1'b1,
        input     TX_PMA_RSTN_1        = 1'b1,
        input     LANE_SYNC_EN_1       = 1'b1,
        input     LX_AMP_CTL_1[3:0]    = 4'b1111,
        input     CIM_CLK_ALIGNER_RX1[7:0] = 8'hff,
        input     CIM_CLK_ALIGNER_TX1[7:0] = 8'hff,
        input     LX_DEEMP_CTL_1[2:0]   = 3'b111,
        input     LX_RX_CKDIV_1[1:0]    = 2'b11,
        input     TX_CKDIV_1[1:0]       = 2'b11,
        input     TDATA_1[43:0]         = 44'hfff_ffff_ffff,
        input     LX_ELECIDLE_EN_1[1:0] = 2'b11,
        output    L2TXN,
        output    L2TXP,
        input     L2RXN = 1'b1,
        input     L2RXP = 1'b1,
        output    RDATA_2[46:0],
        output    LX_ALOS_STA_2,
        output    LX_CDR_ALIGN_2,
        output    LX_LFO_2,
        output    LX_OOB_STA_2,
        output    LX_RXDCT_DONE_2,
        output    LX_RXDCT_OUT_2,
        input     LX_LFD_FRCORE_2      = 1'b1,
        input     LX_RX_CKDIV_DYNSEL_2 = 1'b1,
        input     PCS_RX_RSTN_2        = 1'b1,
        input     PCS_TX_RSTN_2        = 1'b1,
        input     RX2_CLK_FR_CORE      = 1'b1,
        input     RX_PLL_RSTN_2        = 1'b1,
        input     RX_PMA_RSTN_2        = 1'b1,
        input     RX_REF_CLK_2         = 1'b1,
        input     TX2_CLK_FR_CORE      = 1'b1,
        input     TX_PMA_RSTN_2        = 1'b1,
        input     LANE_SYNC_EN_2       = 1'b1,
        input     LX_AMP_CTL_2[3:0]    = 4'b1111,
        input     CIM_CLK_ALIGNER_RX2[7:0] = 8'hff,
        input     CIM_CLK_ALIGNER_TX2[7:0] = 8'hff,
        input     LX_DEEMP_CTL_2[2:0]   = 3'b111,
        input     LX_RX_CKDIV_2[1:0]    = 2'b11,
        input     TX_CKDIV_2[1:0]       = 2'b11,
        input     TDATA_2[43:0]         = 44'hfff_ffff_ffff,
        input     LX_ELECIDLE_EN_2[1:0] = 2'b11,
        output    L3TXN,
        output    L3TXP,
        input     L3RXN = 1'b1,
        input     L3RXP = 1'b1,
        output    RDATA_3[46:0],
        output    LX_ALOS_STA_3,
        output    LX_CDR_ALIGN_3,
        output    LX_LFO_3,
        output    LX_OOB_STA_3,
        output    LX_RXDCT_DONE_3,
        output    LX_RXDCT_OUT_3,
        input     LX_LFD_FRCORE_3      = 1'b1,
        input     LX_RX_CKDIV_DYNSEL_3 = 1'b1,
        input     PCS_RX_RSTN_3        = 1'b1,
        input     PCS_TX_RSTN_3        = 1'b1,
        input     RX3_CLK_FR_CORE      = 1'b1,
        input     RX_PLL_RSTN_3        = 1'b1,
        input     RX_PMA_RSTN_3        = 1'b1,
        input     RX_REF_CLK_3         = 1'b1,
        input     TX3_CLK_FR_CORE      = 1'b1,
        input     TX_PMA_RSTN_3        = 1'b1,
        input     LANE_SYNC_EN_3       = 1'b1,
        input     LX_AMP_CTL_3[3:0]    = 4'b1111,
        input     CIM_CLK_ALIGNER_RX3[7:0] = 8'hff,
        input     CIM_CLK_ALIGNER_TX3[7:0] = 8'hff,
        input     LX_DEEMP_CTL_3[2:0] = 3'b111,
        input     LX_RX_CKDIV_3[1:0]  = 2'b11,
        input     TX_CKDIV_3[1:0]     = 2'b11,
        input     TDATA_3[43:0]       = 44'hfff_ffff_ffff,
        input     LX_ELECIDLE_EN_3[1:0] = 2'b11,
        output    CLK2CORE_RX[3:0],
        output    ALIGN_TX[3:0],
        output    ALIGN_RX[3:0],
        output    CLK2CORE_TX[3:0],
        output    PCS_RX_MCB_STATUS[3:0],
        output    PCS_LSM_SYNCED[3:0],
        input     LX_ELECIDLE_EN_MSB[3:0]     = 4'b1111,
        input     LX_BISTLB_EN[3:0]           = 4'b1111,
        input     LX_TX_LFMODE[3:0]           = 4'b1111,
        input     CIM_CLK_START_ALIGN_TX[3:0] = 4'b1111,
        input     CIM_CLK_START_ALIGN_RX[3:0] = 4'b1111,
        input     TX_LANE_POWERUP[3:0]        = 4'b1111,
        input     RX_LANE_POWERUP[3:0]        = 4'b1111,
        input     CIM_CLK_DYN_DLY_SEL_TX[3:0] = 4'b1111,
        input     LX_RXDCT_EN[3:0]            = 4'b1111,
        input     CIM_CLK_DYN_DLY_SEL_RX[3:0] = 4'b1111,
        input     LX_EXTLB_EN[3:0]            = 4'b1111,
        input     PCS_WORD_ALIGN_EN[3:0]      = 4'b1111,
        input     PCS_FAREND_LOOP[3:0]        = 4'b1111,
        input     PCS_NEAREND_LOOP[3:0]       = 4'b1111,
        input     CEB_ADETECT_EN[3:0]         = 4'b1111,
        input     PCS_MCB_EXT_EN[3:0]         = 4'b1111,
        input     RX_POLARITY_INVERT[3:0]     = 4'b1111,
        input     REFCKN = 1'b1,
        input     REFCKP = 1'b1,
        output    REXT,
        input     TEST_CLK  = 1'b1,
        input     TEST_MODE = 1'b1,
        input     TEST_RSTN = 1'b1,
        input     TEST_SE   = 1'b1,
        input     TEST_SI0  = 1'b1,
        input     TEST_SI1  = 1'b1,
        input     TEST_SI2  = 1'b1,
        input     TEST_SI3  = 1'b1,
        input     TEST_SI4  = 1'b1,
        input     TEST_SI5  = 1'b1,
        input     TEST_SI6  = 1'b1,
        input     TEST_SI7  = 1'b1,
        output    TEST_SO0,
        output    TEST_SO1,
        output    TEST_SO2,
        output    TEST_SO3,
        output    TEST_SO4,
        output    TEST_SO5,
        output    TEST_SO6,
        output    TEST_SO7,
        input     COMPRESSION_MODE = 1'b1,
        input     PLL_RESET        = 1'b1,
        input     PLL_BYPASS       = 1'b1,
        input     CFG_CLK          = 1'b1,
        input     CFG_ENABLE       = 1'b1,
        input     CFG_RSTN         = 1'b1,
        input     CFG_WRITE        = 1'b1,
        input     CFG_ADDR[15:0]   = 16'hffff,
        input     CFG_WDATA[7:0]   = 8'hff,
        output    CFG_INT,
        output    CFG_READY,
        output    CFG_RDATA[7:0],
        input     AFTER_CTC_RCLK_EN_CIN      = 1'b1,
        input     AFTER_CTC_RCLK_EN_GB_CIN   = 1'b1,
        input     APATTERN_MATCH_LSB_CIN     = 1'b1,
        input     APATTERN_MATCH_MSB_CIN     = 1'b1,
        input     APATTERN_SEACHING_PROC_CIN = 1'b1,
        input     APATTERN_STATUS_CIN        = 1'b1,
        input     BRIDGE_RCLK_EN_CIN         = 1'b1,
        input     BRIDGE_TCLK_EN_CIN         = 1'b1,
        input     CB_RCLK_EN_CIN             = 1'b1,
        input     PCS_TCLK_EN_CIN            = 1'b1,
        input     RFIFO_EN_AFTER_CTC_CIN     = 1'b1,
        input     RFIFO_EN_AFTER_CTC_GB_CIN  = 1'b1,
        input     RFIFO_EN_BRIDGE_CIN        = 1'b1,
        input     RFIFO_EN_CB_CIN            = 1'b1,
        input     SKIP_ADD_LSB_MCB_CIN       = 1'b1,
        input     SKIP_ADD_MCB_CIN           = 1'b1,
        input     SKIP_DEL_LSB_MCB_CIN       = 1'b1,
        input     SKIP_DEL_MCB_CIN           = 1'b1,
        input     CTC_RD_FIFO_CIN            = 1'b1,
        input     TFIFO_EN_BRIDGE_CIN        = 1'b1,
        input     TFIFO_EN_PCS_TX_CIN        = 1'b1,
        output    AFTER_CTC_RCLK_EN_COUT,
        output    AFTER_CTC_RCLK_EN_GB_COUT,
        output    APATTERN_MATCH_LSB_COUT,
        output    APATTERN_MATCH_MSB_COUT,
        output    APATTERN_SEACHING_PROC_COUT,
        output    APATTERN_STATUS_COUT,
        output    BRIDGE_RCLK_EN_COUT,
        output    BRIDGE_TCLK_EN_COUT,
        output    CB_RCLK_EN_COUT,
        output    PCS_TCLK_EN_COUT,
        output    RFIFO_EN_AFTER_CTC_COUT,
        output    RFIFO_EN_AFTER_CTC_GB_COUT,
        output    RFIFO_EN_BRIDGE_COUT,
        output    RFIFO_EN_CB_COUT,
        output    SKIP_ADD_LSB_MCB_COUT,
        output    SKIP_ADD_MCB_COUT,
        output    SKIP_DEL_LCB_MCB_COUT,
        output    SKIP_DEL_MCB_COUT,
        output    CTC_RD_FIFO_COUT,
        output    TFIFO_EN_BRIDGE_COUT,
        output    TFIFO_EN_PCS_TX_COUT,
        output    PLL_LOCK,
        output    REFCK2CORE,
        output    TSO_LS_OUT,
        output    REFCK_2NMQ,
        output    REFCK_2NPQ,
        input     REFCK_FRNMQ    = 1'b1,
        input     REFCK_FRNPQ    = 1'b1,       
        input     MCB_CLK_FRNQ   = 1'b1,
        input     HSST_RSTN      = 1'b1,
        input     PLL_REF_CLK    = 1'b1,
        input     PLL_RSTN       = 1'b1,
        input     PLLPOWERDOWN   = 1'b1,
        input     QUAD_PWRUP     = 1'b1,
        input     SYNC_TOGGLE    = 1'b1,
        input     TXCKDIV_DYNSEL = 1'b1,
        
        //add new signal for GTP_HSST_DFT
        output    BS_AC_TS_O,
        output    BS_ACMODE_O,
        output    BS_SHIFT_O,
        output    BS_TCK_O,
        output    BS_TDO,
        output    BS_UPDATE_O,
        output    BSMODE_O,
        output    BSMODE_RX_O,
        output    SERDES_BSCAN_MEMINT_O, 
               
        input     BS_ACMODE = 1'b1,
        input     BS_SHIFT = 1'b1,
        input     BS_TCK_I = 1'b1,
        input     BS_TDI = 1'b1,
        input     BS_UPDATE = 1'b1,
        input     BSMODE = 1'b1,
        input     BSMODE_RX = 1'b1,
        input     AC_TS = 1'b1,
        input     SERDES_BS_MEMINIT = 1'b1,
        input     SEL_SYNC_NXQ = 1'b1,
        input     TWOQUAD_SYNC_EN = 1'b1
    );
} // end of device HSST

/*******************************************************************************

  Device    [HSST]

  Author    [xiawei]

  Abstract  [The structure netlist of HSST is described in the similar fashion
             as in HDL. In unit instantiation statement, the formal pin may be
             connected to net which is declared explicitly.

             In Valence, the connection can also be made from formal pin to other
             pin or port, in which case Valence compiler shall create the net to
             fulfil the connection. The built-in naming convention is kicked in
             to name the automatically created net. However, the objects (net, instance)
             of this netlist are going to mapped from schematic. The compiler-generated
             names cause trouble for the mapping. Therefore, all wires are declared
             explicitly in the following description]

  Revision History:

********************************************************************************/

structure netlist of HSST
{
    device HSST_INST HSST_INST
        parameter map
        (
            PMA_QUAD_TURN_ON_BANDGAP_AT_AOS_ON                     => PMA_QUAD_TURN_ON_BANDGAP_AT_AOS_ON,
            PMA_QUAD_TURN_ON_BANDGAP_AT_RX_DETECTION_ON            => PMA_QUAD_TURN_ON_BANDGAP_AT_RX_DETECTION_ON,
            PMA_QUAD_TURN_ON_BANDGAP_AT_BOUNDARY_SCAN_ON           => PMA_QUAD_TURN_ON_BANDGAP_AT_BOUNDARY_SCAN_ON,
            PMA_QUAD_CFG_HSST_RSTN                                 => PMA_QUAD_CFG_HSST_RSTN,
            PMA_QUAD_SELECT_LANE_TCK_FOR_QUAD_SYNC                 => PMA_QUAD_SELECT_LANE_TCK_FOR_QUAD_SYNC,
            PMA_QUAD_CK_REN                                        => PMA_QUAD_CK_REN,
            PMA_QUAD_C1_EN                                         => PMA_QUAD_C1_EN,
            PMA_QUAD_C2_EN                                         => PMA_QUAD_C2_EN,
            PMA_QUAD_CLK_DIVIDER_SETTING_FROM_25M_TO_200K          => PMA_QUAD_CLK_DIVIDER_SETTING_FROM_25M_TO_200K,
            PMA_QUAD_ACMODE_SCANMODE_EN                            => PMA_QUAD_ACMODE_SCANMODE_EN,
            PMA_QUAD_REGISTER_ACMODE                               => PMA_QUAD_REGISTER_ACMODE,
            PMA_QUAD_REGISTER_SCANMODE                             => PMA_QUAD_REGISTER_SCANMODE,
            PMA_QUAD_REFCK2CORE_EN                                 => PMA_QUAD_REFCK2CORE_EN,
            PMA_QUAD_REG_EN                                        => PMA_QUAD_REG_EN,
            PMA_QUAD_REGR                                          => PMA_QUAD_REGR,
            PMA_QUAD_REGL                                          => PMA_QUAD_REGL,
            PMA_QUAD_DPCK_SEL                                      => PMA_QUAD_DPCK_SEL,
            PMA_QUAD_TX_REFCK_SEL                                  => PMA_QUAD_TX_REFCK_SEL,
            PMA_QUAD_REFCK_SRC_SEL                                 => PMA_QUAD_REFCK_SRC_SEL,
            PMA_QUAD_RREFCK_PWRUP                                  => PMA_QUAD_RREFCK_PWRUP,
            PMA_QUAD_REFCK_SK_SEL                                  => PMA_QUAD_REFCK_SK_SEL,
            PMA_QUAD_REFCK_DIV2_SEL                                => PMA_QUAD_REFCK_DIV2_SEL,
            PMA_QUAD_REFCK_TO_NQ_EN                                => PMA_QUAD_REFCK_TO_NQ_EN,
            PMA_QUAD_AUXI_ADJ                                      => PMA_QUAD_AUXI_ADJ,
            PMA_QUAD_DC496                                         => PMA_QUAD_DC496,
            PMA_QUAD_REG_FDET_TIMER                                => PMA_QUAD_REG_FDET_TIMER,
            PMA_QUAD_FREQ_LKO                                      => PMA_QUAD_FREQ_LKO,
            PMA_QUAD_FREQ_LKI                                      => PMA_QUAD_FREQ_LKI,
            PMA_QUAD_CLOCK_SRC_SEL                                 => PMA_QUAD_CLOCK_SRC_SEL,
            PMA_QUAD_FRE_DET_EN                                    => PMA_QUAD_FRE_DET_EN,
            PMA_QUAD_TSO_LS_SEL                                    => PMA_QUAD_TSO_LS_SEL,
            PMA_QUAD_TXPLL_START                                   => PMA_QUAD_TXPLL_START,
            PMA_QUAD_VCODIV                                        => PMA_QUAD_VCODIV,
            PMA_QUAD_LC_BAND                                       => PMA_QUAD_LC_BAND,
            PMA_QUAD_SET_VCO_HI                                    => PMA_QUAD_SET_VCO_HI,
            PMA_QUAD_SET_VCO_LO                                    => PMA_QUAD_SET_VCO_LO,
            PMA_QUAD_CALIB_FAIL                                    => PMA_QUAD_CALIB_FAIL,
            PMA_QUAD_CALIB_DONE                                    => PMA_QUAD_CALIB_DONE,
            PMA_QUAD_BIST_DONE                                     => PMA_QUAD_BIST_DONE,
            PMA_QUAD_TOTRANGE_FAIL                                 => PMA_QUAD_TOTRANGE_FAIL,
            PMA_QUAD_SUBRANGE_FAIL                                 => PMA_QUAD_SUBRANGE_FAIL,
            PMA_QUAD_OVLP_FAIL                                     => PMA_QUAD_OVLP_FAIL,
            PMA_QUAD_TXPLL_LOCK                                    => PMA_QUAD_TXPLL_LOCK,
            PMA_QUAD_TXPLL_LOOP_ENABLE                             => PMA_QUAD_TXPLL_LOOP_ENABLE,
            PMA_QUAD_TXPLL_DIVSEL_REF_STA                          => PMA_QUAD_TXPLL_DIVSEL_REF_STA,
            PMA_QUAD_TXPLL_DIVSEL45_FB_STA                         => PMA_QUAD_TXPLL_DIVSEL45_FB_STA,
            PMA_QUAD_TXPLL_DIVSEL_FB_STA                           => PMA_QUAD_TXPLL_DIVSEL_FB_STA,
            PMA_QUAD_TXPLL_DIVSEL45_FB                             => PMA_QUAD_TXPLL_DIVSEL45_FB,
            PMA_QUAD_TXPLL_DIVSEL_FB                               => PMA_QUAD_TXPLL_DIVSEL_FB,
            PMA_QUAD_TXPLL_DIVSEL_REF                              => PMA_QUAD_TXPLL_DIVSEL_REF,
            PMA_QUAD_REG_DISABLE_HOLDCLK                           => PMA_QUAD_REG_DISABLE_HOLDCLK,
            PMA_QUAD_REG_DISABLE_SYNC                              => PMA_QUAD_REG_DISABLE_SYNC,
            PMA_QUAD_FORCE_OUTPUT_PLL_LOCK                         => PMA_QUAD_FORCE_OUTPUT_PLL_LOCK,
            PMA_QUAD_REGISTER_SET_SYNCTCK_SEL_ENABLE               => PMA_QUAD_REGISTER_SET_SYNCTCK_SEL_ENABLE,
            PMA_QUAD_REG_SET_SYNCTCK_SEL                           => PMA_QUAD_REG_SET_SYNCTCK_SEL,
            PMA_QUAD_CK4TEST_OUTPUT_ENABLE                         => PMA_QUAD_CK4TEST_OUTPUT_ENABLE,
            PMA_QUAD_RSTGENBAS                                     => PMA_QUAD_RSTGENBAS,
            PMA_QUAD_LCBUFBAS                                      => PMA_QUAD_LCBUFBAS,
            PMA_QUAD_REGISTER_SET_CPCUR_ENABEL                     => PMA_QUAD_REGISTER_SET_CPCUR_ENABEL,
            PMA_QUAD_REG_SET_CPCUR                                 => PMA_QUAD_REG_SET_CPCUR,
            PMA_QUAD_CPBAS                                         => PMA_QUAD_CPBAS,
            PMA_QUAD_LCOBAS                                        => PMA_QUAD_LCOBAS,
            PMA_QUAD_LCCUR                                         => PMA_QUAD_LCCUR,
            PMA_QUAD_ENABLE_REGISTER_SETTING_BAND                  => PMA_QUAD_ENABLE_REGISTER_SETTING_BAND,
            PMA_QUAD_CALIB_WAIT                                    => PMA_QUAD_CALIB_WAIT,
            PMA_QUAD_CALIB_TIMER                                   => PMA_QUAD_CALIB_TIMER,
            PMA_QUAD_TOT_RANGE                                     => PMA_QUAD_TOT_RANGE,
            PMA_QUAD_SUB_RANGE                                     => PMA_QUAD_SUB_RANGE,
            PMA_QUAD_OVLP                                          => PMA_QUAD_OVLP,
            PMA_QUAD_BIST_WAIT                                     => PMA_QUAD_BIST_WAIT,
            PMA_QUAD_BIST_TIMER                                    => PMA_QUAD_BIST_TIMER,
            PMA_QUAD_BAND_LB                                       => PMA_QUAD_BAND_LB,
            PMA_QUAD_BAND_HB                                       => PMA_QUAD_BAND_HB,
            PMA_QUAD_FREQ_LOCK_ACCURACY                            => PMA_QUAD_FREQ_LOCK_ACCURACY,
            PMA_QUAD_REG_SET_LC_BAND                               => PMA_QUAD_REG_SET_LC_BAND,
            PMA_QUAD_REG_SET_VCODIV                                => PMA_QUAD_REG_SET_VCODIV,
            PMA_QUAD_REGISTER_SET_VCODIV_BAND_ENABLE               => PMA_QUAD_REGISTER_SET_VCODIV_BAND_ENABLE,
            PMA_QUAD_REG_SET_PLL_LOCK                              => PMA_QUAD_REG_SET_PLL_LOCK,
            PMA_QUAD_REGISTER_SET_PLL_LOCK_ENABLE                  => PMA_QUAD_REGISTER_SET_PLL_LOCK_ENABLE,
            PMA_QUAD_REG_SET_VCO_HI                                => PMA_QUAD_REG_SET_VCO_HI,
            PMA_QUAD_REG_SET_VCO_LO                                => PMA_QUAD_REG_SET_VCO_LO,
            PMA_QUAD_REGISTER_SET_VCO_HI_VCO_LO_ENABLE             => PMA_QUAD_REGISTER_SET_VCO_HI_VCO_LO_ENABLE,
            PMA_QUAD_FORCE_LC_PLL_LOOP_EN                          => PMA_QUAD_FORCE_LC_PLL_LOOP_EN,
            PMA_QUAD_VCO_DIV_CALI_BYPASS                           => PMA_QUAD_VCO_DIV_CALI_BYPASS,
            PMA_QUAD_BIST_EN                                       => PMA_QUAD_BIST_EN,
            PMA_QUAD_ENABLE_TXPLL_BIST_BLOCK_CLOCKS                => PMA_QUAD_ENABLE_TXPLL_BIST_BLOCK_CLOCKS,
            PMA_QUAD_LF_TESTBY2                                    => PMA_QUAD_LF_TESTBY2,
            PMA_QUAD_REG_SET_DIVSEL_REF                            => PMA_QUAD_REG_SET_DIVSEL_REF,
            PMA_QUAD_REG_SET_DIVSEL45_FB                           => PMA_QUAD_REG_SET_DIVSEL45_FB,
            PMA_QUAD_REG_SET_DIVSEL_FB                             => PMA_QUAD_REG_SET_DIVSEL_FB,
            PMA_QUAD_LF_TEST_EN                                    => PMA_QUAD_LF_TEST_EN,
            PMA_QUAD_REGISTER_SET_TXPLL_DIV_ENABLE                 => PMA_QUAD_REGISTER_SET_TXPLL_DIV_ENABLE,
            PMA_QUAD_FORCE_TXPLL_RESET                             => PMA_QUAD_FORCE_TXPLL_RESET,
            PMA_QUAD_FORCE_TXPLL_ON                                => PMA_QUAD_FORCE_TXPLL_ON,
            PCS_CH0_BYPASS_WORD_ALIGN                              => PCS_CH0_BYPASS_WORD_ALIGN,
            PCS_CH0_BYPASS_DENC                                    => PCS_CH0_BYPASS_DENC,
            PCS_CH0_BYPASS_BONDING                                 => PCS_CH0_BYPASS_BONDING,
            PCS_CH0_BYPASS_CTC                                     => PCS_CH0_BYPASS_CTC,
            PCS_CH0_BYPASS_GEAR                                    => PCS_CH0_BYPASS_GEAR,
            PCS_CH0_BYPASS_BRIDGE                                  => PCS_CH0_BYPASS_BRIDGE,
            PCS_CH0_DATA_MODE                                      => PCS_CH0_DATA_MODE,
            PCS_CH0_RX_POLARITY_INV                                => PCS_CH0_RX_POLARITY_INV,
            PCS_CH0_ALIGN_MODE                                     => PCS_CH0_ALIGN_MODE,
            PCS_CH0_SAMP_16B                                       => PCS_CH0_SAMP_16B,
            PCS_CH0_COMMA_REG0                                     => PCS_CH0_COMMA_REG0,
            PCS_CH0_COMMA_MASK                                     => PCS_CH0_COMMA_MASK,
            PCS_CH0_CEB_MODE                                       => PCS_CH0_CEB_MODE,
            PCS_CH0_CTC_MODE                                       => PCS_CH0_CTC_MODE,
            PCS_CH0_A_REG                                          => PCS_CH0_A_REG,
            PCS_CH0_GE_AUTO_EN                                     => PCS_CH0_GE_AUTO_EN,
            PCS_CH0_SKIP_REG0                                      => PCS_CH0_SKIP_REG0,
            PCS_CH0_SKIP_REG1                                      => PCS_CH0_SKIP_REG1,
            PCS_CH0_SKIP_REG2                                      => PCS_CH0_SKIP_REG2,
            PCS_CH0_SKIP_REG3                                      => PCS_CH0_SKIP_REG3,
            PCS_CH0_DEC_DUAL                                       => PCS_CH0_DEC_DUAL,
            PCS_CH0_SPLIT                                          => PCS_CH0_SPLIT,
            PCS_CH0_FIFOFLAG_CTC                                   => PCS_CH0_FIFOFLAG_CTC,
            PCS_CH0_COMMA_DET_MODE                                 => PCS_CH0_COMMA_DET_MODE,
            PCS_CH0_ERRDETECT_SILENCE                              => PCS_CH0_ERRDETECT_SILENCE,
            PCS_CH0_PMA_RCLK_POLINV                                => PCS_CH0_PMA_RCLK_POLINV,
            PCS_CH0_PCS_RCLK_SEL                                   => PCS_CH0_PCS_RCLK_SEL,
            PCS_CH0_MCB_RCLK_POLINV                                => PCS_CH0_MCB_RCLK_POLINV,
            PCS_CH0_CB_RCLK_SEL                                    => PCS_CH0_CB_RCLK_SEL,
            PCS_CH0_AFTER_CTC_RCLK_SEL                             => PCS_CH0_AFTER_CTC_RCLK_SEL,
            PCS_CH0_RCLK_POLINV                                    => PCS_CH0_RCLK_POLINV,
            PCS_CH0_BRIDGE_RCLK_SEL                                => PCS_CH0_BRIDGE_RCLK_SEL,
            PCS_CH0_PCS_RCLK_EN                                    => PCS_CH0_PCS_RCLK_EN,
            PCS_CH0_CB_RCLK_EN                                     => PCS_CH0_CB_RCLK_EN,
            PCS_CH0_AFTER_CTC_RCLK_EN                              => PCS_CH0_AFTER_CTC_RCLK_EN,
            PCS_CH0_AFTER_CTC_RCLK_EN_GB                           => PCS_CH0_AFTER_CTC_RCLK_EN_GB,
            PCS_CH0_BRIDGE_RCLK_EN                                 => PCS_CH0_BRIDGE_RCLK_EN,
            PCS_CH0_PCS_RX_RSTN                                    => PCS_CH0_PCS_RX_RSTN,
            PCS_CH0_SLAVE                                          => PCS_CH0_SLAVE,
            PCS_CH0_PCIE_SLAVE                                     => PCS_CH0_PCIE_SLAVE,
            PCS_CH0_PCS_CB_RSTN                                    => PCS_CH0_PCS_CB_RSTN,
            PCS_CH0_TX_BYPASS_BRIDGE_UINT                          => PCS_CH0_TX_BYPASS_BRIDGE_UINT,
            PCS_CH0_TX_BYPASS_GEAR                                 => PCS_CH0_TX_BYPASS_GEAR,
            PCS_CH0_TX_BYPASS_ENC                                  => PCS_CH0_TX_BYPASS_ENC,
            PCS_CH0_TX_BYPASS_BIT_SLIP                             => PCS_CH0_TX_BYPASS_BIT_SLIP,
            PCS_CH0_TX_GEAR_SPLIT                                  => PCS_CH0_TX_GEAR_SPLIT,
            PCS_CH0_TX_DRIVE_REG_MODE                              => PCS_CH0_TX_DRIVE_REG_MODE,
            PCS_CH0_TX_BIT_SLIP_CYCLES                             => PCS_CH0_TX_BIT_SLIP_CYCLES,
            PCS_CH0_INT_TX_MASK_0                                  => PCS_CH0_INT_TX_MASK_0,
            PCS_CH0_INT_TX_MASK_1                                  => PCS_CH0_INT_TX_MASK_1,
            PCS_CH0_INT_TX_MASK_2                                  => PCS_CH0_INT_TX_MASK_2,
            PCS_CH0_INT_TX_CLR_0                                   => PCS_CH0_INT_TX_CLR_0,
            PCS_CH0_INT_TX_CLR_1                                   => PCS_CH0_INT_TX_CLR_1,
            PCS_CH0_INT_TX_CLR_2                                   => PCS_CH0_INT_TX_CLR_2,
            PCS_CH0_TX_PMA_TCLK_POLINV                             => PCS_CH0_TX_PMA_TCLK_POLINV,
            PCS_CH0_TX_PCS_CLK_EN_SEL                              => PCS_CH0_TX_PCS_CLK_EN_SEL,
            PCS_CH0_TX_BRIDGE_TCLK_SEL                             => PCS_CH0_TX_BRIDGE_TCLK_SEL,
            PCS_CH0_TX_TCLK_POLINV                                 => PCS_CH0_TX_TCLK_POLINV,
            PCS_CH0_TX_PCS_TX_RSTN                                 => PCS_CH0_TX_PCS_TX_RSTN,
            PCS_CH0_TX_SLAVE                                       => PCS_CH0_TX_SLAVE,
            PCS_CH0_TX_BRIDGE_CLK_EN_SEL                           => PCS_CH0_TX_BRIDGE_CLK_EN_SEL,
            PCS_CH0_DATA_WIDTH_MODE                                => PCS_CH0_DATA_WIDTH_MODE,
            PCS_CH0_TX_TCLK2FABRIC_SEL                             => PCS_CH0_TX_TCLK2FABRIC_SEL,
            PCS_CH0_TX_OUTZZ                                       => PCS_CH0_TX_OUTZZ,
            PCS_CH0_ENC_DUAL                                       => PCS_CH0_ENC_DUAL,
            PCS_CH0_TX_BITSLIP_DATA_MODE                           => PCS_CH0_TX_BITSLIP_DATA_MODE,
            PCS_CH0_COMMA_REG1                                     => PCS_CH0_COMMA_REG1,
            PCS_CH0_RAPID_IMAX                                     => PCS_CH0_RAPID_IMAX,
            PCS_CH0_RAPID_VMIN_1                                   => PCS_CH0_RAPID_VMIN_1,
            PCS_CH0_RAPID_VMIN_2                                   => PCS_CH0_RAPID_VMIN_2,
            PCS_CH0_RX_PRBS_MODE                                   => PCS_CH0_RX_PRBS_MODE,
            PCS_CH0_RX_ERRCNT_CLR                                  => PCS_CH0_RX_ERRCNT_CLR,
            PCS_CH0_TX_PRBS_MODE                                   => PCS_CH0_TX_PRBS_MODE,
            PCS_CH0_TX_INSERT_ER                                   => PCS_CH0_TX_INSERT_ER,
            PCS_CH0_ENABLE_PRBS_GEN                                => PCS_CH0_ENABLE_PRBS_GEN,
            PCS_CH0_ERR_CNT                                        => PCS_CH0_ERR_CNT,
            PCS_CH0_DEFAULT_RADDR                                  => PCS_CH0_DEFAULT_RADDR,
            PCS_CH0_MASTER_CHECK_OFFSET                            => PCS_CH0_MASTER_CHECK_OFFSET,
            PCS_CH0_DELAY_SET                                      => PCS_CH0_DELAY_SET,
            PCS_CH0_SEACH_OFFSET                                   => PCS_CH0_SEACH_OFFSET,
            PCS_CH0_CEB_RAPIDLS_MMAX                               => PCS_CH0_CEB_RAPIDLS_MMAX,
            PCS_CH0_CTC_AFULL                                      => PCS_CH0_CTC_AFULL,
            PCS_CH0_CTC_AEMPTY                                     => PCS_CH0_CTC_AEMPTY,
            PCS_CH0_FAR_LOOP                                       => PCS_CH0_FAR_LOOP,
            PCS_CH0_NEAR_LOOP                                      => PCS_CH0_NEAR_LOOP,
            PCS_CH0_INT_RX_MASK_0                                  => PCS_CH0_INT_RX_MASK_0,
            PCS_CH0_INT_RX_MASK_1                                  => PCS_CH0_INT_RX_MASK_1,
            PCS_CH0_INT_RX_MASK_2                                  => PCS_CH0_INT_RX_MASK_2,
            PCS_CH0_INT_RX_MASK_3                                  => PCS_CH0_INT_RX_MASK_3,
            PCS_CH0_INT_RX_MASK_4                                  => PCS_CH0_INT_RX_MASK_4,
            PCS_CH0_INT_RX_MASK_5                                  => PCS_CH0_INT_RX_MASK_5,
            PCS_CH0_INT_RX_MASK_6                                  => PCS_CH0_INT_RX_MASK_6,
            PCS_CH0_INT_RX_MASK_7                                  => PCS_CH0_INT_RX_MASK_7,
            PCS_CH0_INT_RX_CLR_0                                   => PCS_CH0_INT_RX_CLR_0,
            PCS_CH0_INT_RX_CLR_1                                   => PCS_CH0_INT_RX_CLR_1,
            PCS_CH0_INT_RX_CLR_2                                   => PCS_CH0_INT_RX_CLR_2,
            PCS_CH0_INT_RX_CLR_3                                   => PCS_CH0_INT_RX_CLR_3,
            PCS_CH0_INT_RX_CLR_4                                   => PCS_CH0_INT_RX_CLR_4,
            PCS_CH0_INT_RX_CLR_5                                   => PCS_CH0_INT_RX_CLR_5,
            PCS_CH0_INT_RX_CLR_6                                   => PCS_CH0_INT_RX_CLR_6,
            PCS_CH0_INT_RX_CLR_7                                   => PCS_CH0_INT_RX_CLR_7,
            PCS_CH1_BYPASS_WORD_ALIGN                              => PCS_CH1_BYPASS_WORD_ALIGN,
            PCS_CH1_BYPASS_DENC                                    => PCS_CH1_BYPASS_DENC,
            PCS_CH1_BYPASS_BONDING                                 => PCS_CH1_BYPASS_BONDING,
            PCS_CH1_BYPASS_CTC                                     => PCS_CH1_BYPASS_CTC,
            PCS_CH1_BYPASS_GEAR                                    => PCS_CH1_BYPASS_GEAR,
            PCS_CH1_BYPASS_BRIDGE                                  => PCS_CH1_BYPASS_BRIDGE,
            PCS_CH1_DATA_MODE                                      => PCS_CH1_DATA_MODE,
            PCS_CH1_RX_POLARITY_INV                                => PCS_CH1_RX_POLARITY_INV,
            PCS_CH1_ALIGN_MODE                                     => PCS_CH1_ALIGN_MODE,
            PCS_CH1_SAMP_16B                                       => PCS_CH1_SAMP_16B,
            PCS_CH1_COMMA_REG0                                     => PCS_CH1_COMMA_REG0,
            PCS_CH1_COMMA_MASK                                     => PCS_CH1_COMMA_MASK,
            PCS_CH1_CEB_MODE                                       => PCS_CH1_CEB_MODE,
            PCS_CH1_CTC_MODE                                       => PCS_CH1_CTC_MODE,
            PCS_CH1_A_REG                                          => PCS_CH1_A_REG,
            PCS_CH1_GE_AUTO_EN                                     => PCS_CH1_GE_AUTO_EN,
            PCS_CH1_SKIP_REG0                                      => PCS_CH1_SKIP_REG0,
            PCS_CH1_SKIP_REG1                                      => PCS_CH1_SKIP_REG1,
            PCS_CH1_SKIP_REG2                                      => PCS_CH1_SKIP_REG2,
            PCS_CH1_SKIP_REG3                                      => PCS_CH1_SKIP_REG3,
            PCS_CH1_DEC_DUAL                                       => PCS_CH1_DEC_DUAL,
            PCS_CH1_SPLIT                                          => PCS_CH1_SPLIT,
            PCS_CH1_FIFOFLAG_CTC                                   => PCS_CH1_FIFOFLAG_CTC,
            PCS_CH1_COMMA_DET_MODE                                 => PCS_CH1_COMMA_DET_MODE,
            PCS_CH1_ERRDETECT_SILENCE                              => PCS_CH1_ERRDETECT_SILENCE,
            PCS_CH1_PMA_RCLK_POLINV                                => PCS_CH1_PMA_RCLK_POLINV,
            PCS_CH1_PCS_RCLK_SEL                                   => PCS_CH1_PCS_RCLK_SEL,
            PCS_CH1_MCB_RCLK_POLINV                                => PCS_CH1_MCB_RCLK_POLINV,
            PCS_CH1_CB_RCLK_SEL                                    => PCS_CH1_CB_RCLK_SEL,
            PCS_CH1_AFTER_CTC_RCLK_SEL                             => PCS_CH1_AFTER_CTC_RCLK_SEL,
            PCS_CH1_RCLK_POLINV                                    => PCS_CH1_RCLK_POLINV,
            PCS_CH1_BRIDGE_RCLK_SEL                                => PCS_CH1_BRIDGE_RCLK_SEL,
            PCS_CH1_PCS_RCLK_EN                                    => PCS_CH1_PCS_RCLK_EN,
            PCS_CH1_CB_RCLK_EN                                     => PCS_CH1_CB_RCLK_EN,
            PCS_CH1_AFTER_CTC_RCLK_EN                              => PCS_CH1_AFTER_CTC_RCLK_EN,
            PCS_CH1_AFTER_CTC_RCLK_EN_GB                           => PCS_CH1_AFTER_CTC_RCLK_EN_GB,
            PCS_CH1_BRIDGE_RCLK_EN                                 => PCS_CH1_BRIDGE_RCLK_EN,
            PCS_CH1_PCS_RX_RSTN                                    => PCS_CH1_PCS_RX_RSTN,
            PCS_CH1_SLAVE                                          => PCS_CH1_SLAVE,
            PCS_CH1_PCIE_SLAVE                                     => PCS_CH1_PCIE_SLAVE,
            PCS_CH1_PCS_CB_RSTN                                    => PCS_CH1_PCS_CB_RSTN,
            PCS_CH1_TX_BYPASS_BRIDGE_UINT                          => PCS_CH1_TX_BYPASS_BRIDGE_UINT,
            PCS_CH1_TX_BYPASS_GEAR                                 => PCS_CH1_TX_BYPASS_GEAR,
            PCS_CH1_TX_BYPASS_ENC                                  => PCS_CH1_TX_BYPASS_ENC,
            PCS_CH1_TX_BYPASS_BIT_SLIP                             => PCS_CH1_TX_BYPASS_BIT_SLIP,
            PCS_CH1_TX_GEAR_SPLIT                                  => PCS_CH1_TX_GEAR_SPLIT,
            PCS_CH1_TX_DRIVE_REG_MODE                              => PCS_CH1_TX_DRIVE_REG_MODE,
            PCS_CH1_TX_BIT_SLIP_CYCLES                             => PCS_CH1_TX_BIT_SLIP_CYCLES,
             PCS_CH1_INT_TX_MASK_0                                 =>  PCS_CH1_INT_TX_MASK_0,
            PCS_CH1_INT_TX_MASK_1                                  => PCS_CH1_INT_TX_MASK_1,
            PCS_CH1_INT_TX_MASK_2                                  => PCS_CH1_INT_TX_MASK_2,
            PCS_CH1_INT_TX_CLR_0                                   => PCS_CH1_INT_TX_CLR_0,
            PCS_CH1_INT_TX_CLR_1                                   => PCS_CH1_INT_TX_CLR_1,
            PCS_CH1_INT_TX_CLR_2                                   => PCS_CH1_INT_TX_CLR_2,
            PCS_CH1_TX_PMA_TCLK_POLINV                             => PCS_CH1_TX_PMA_TCLK_POLINV,
            PCS_CH1_TX_PCS_CLK_EN_SEL                              => PCS_CH1_TX_PCS_CLK_EN_SEL,
            PCS_CH1_TX_BRIDGE_TCLK_SEL                             => PCS_CH1_TX_BRIDGE_TCLK_SEL,
            PCS_CH1_TX_TCLK_POLINV                                 => PCS_CH1_TX_TCLK_POLINV,
            PCS_CH1_TX_PCS_TX_RSTN                                 => PCS_CH1_TX_PCS_TX_RSTN,
            PCS_CH1_TX_SLAVE                                       => PCS_CH1_TX_SLAVE,
            PCS_CH1_TX_BRIDGE_CLK_EN_SEL                           => PCS_CH1_TX_BRIDGE_CLK_EN_SEL,
            PCS_CH1_DATA_WIDTH_MODE                                => PCS_CH1_DATA_WIDTH_MODE,
            PCS_CH1_TX_TCLK2FABRIC_SEL                             => PCS_CH1_TX_TCLK2FABRIC_SEL,
            PCS_CH1_TX_OUTZZ                                       => PCS_CH1_TX_OUTZZ,
            PCS_CH1_ENC_DUAL                                       => PCS_CH1_ENC_DUAL,
            PCS_CH1_TX_BITSLIP_DATA_MODE                           => PCS_CH1_TX_BITSLIP_DATA_MODE,
            PCS_CH1_COMMA_REG1                                     => PCS_CH1_COMMA_REG1,
            PCS_CH1_RAPID_IMAX                                     => PCS_CH1_RAPID_IMAX,
            PCS_CH1_RAPID_VMIN_1                                   => PCS_CH1_RAPID_VMIN_1,
            PCS_CH1_RAPID_VMIN_2                                   => PCS_CH1_RAPID_VMIN_2,
            PCS_CH1_RX_PRBS_MODE                                   => PCS_CH1_RX_PRBS_MODE,
            PCS_CH1_RX_ERRCNT_CLR                                  => PCS_CH1_RX_ERRCNT_CLR,
            PCS_CH1_TX_PRBS_MODE                                   => PCS_CH1_TX_PRBS_MODE,
            PCS_CH1_TX_INSERT_ER                                   => PCS_CH1_TX_INSERT_ER,
            PCS_CH1_ENABLE_PRBS_GEN                                => PCS_CH1_ENABLE_PRBS_GEN,
            PCS_CH1_ERR_CNT                                        => PCS_CH1_ERR_CNT,
            PCS_CH1_DEFAULT_RADDR                                  => PCS_CH1_DEFAULT_RADDR,
            PCS_CH1_MASTER_CHECK_OFFSET                            => PCS_CH1_MASTER_CHECK_OFFSET,
            PCS_CH1_DELAY_SET                                      => PCS_CH1_DELAY_SET,
            PCS_CH1_SEACH_OFFSET                                   => PCS_CH1_SEACH_OFFSET,
            PCS_CH1_CEB_RAPIDLS_MMAX                               => PCS_CH1_CEB_RAPIDLS_MMAX,
            PCS_CH1_CTC_AFULL                                      => PCS_CH1_CTC_AFULL,
            PCS_CH1_CTC_AEMPTY                                     => PCS_CH1_CTC_AEMPTY,
            PCS_CH1_FAR_LOOP                                       => PCS_CH1_FAR_LOOP,
            PCS_CH1_NEAR_LOOP                                      => PCS_CH1_NEAR_LOOP,
            PCS_CH1_INT_RX_MASK_0                                  => PCS_CH1_INT_RX_MASK_0,
            PCS_CH1_INT_RX_MASK_1                                  => PCS_CH1_INT_RX_MASK_1,
            PCS_CH1_INT_RX_MASK_2                                  => PCS_CH1_INT_RX_MASK_2,
            PCS_CH1_INT_RX_MASK_3                                  => PCS_CH1_INT_RX_MASK_3,
            PCS_CH1_INT_RX_MASK_4                                  => PCS_CH1_INT_RX_MASK_4,
            PCS_CH1_INT_RX_MASK_5                                  => PCS_CH1_INT_RX_MASK_5,
            PCS_CH1_INT_RX_MASK_6                                  => PCS_CH1_INT_RX_MASK_6,
            PCS_CH1_INT_RX_MASK_7                                  => PCS_CH1_INT_RX_MASK_7,
            PCS_CH1_INT_RX_CLR_0                                   => PCS_CH1_INT_RX_CLR_0,
            PCS_CH1_INT_RX_CLR_1                                   => PCS_CH1_INT_RX_CLR_1,
            PCS_CH1_INT_RX_CLR_2                                   => PCS_CH1_INT_RX_CLR_2,
            PCS_CH1_INT_RX_CLR_3                                   => PCS_CH1_INT_RX_CLR_3,
            PCS_CH1_INT_RX_CLR_4                                   => PCS_CH1_INT_RX_CLR_4,
            PCS_CH1_INT_RX_CLR_5                                   => PCS_CH1_INT_RX_CLR_5,
            PCS_CH1_INT_RX_CLR_6                                   => PCS_CH1_INT_RX_CLR_6,
            PCS_CH1_INT_RX_CLR_7                                   => PCS_CH1_INT_RX_CLR_7,
            PCS_CH2_BYPASS_WORD_ALIGN                              => PCS_CH2_BYPASS_WORD_ALIGN,
            PCS_CH2_BYPASS_DENC                                    => PCS_CH2_BYPASS_DENC,
            PCS_CH2_BYPASS_BONDING                                 => PCS_CH2_BYPASS_BONDING,
            PCS_CH2_BYPASS_CTC                                     => PCS_CH2_BYPASS_CTC,
            PCS_CH2_BYPASS_GEAR                                    => PCS_CH2_BYPASS_GEAR,
            PCS_CH2_BYPASS_BRIDGE                                  => PCS_CH2_BYPASS_BRIDGE,
            PCS_CH2_DATA_MODE                                      => PCS_CH2_DATA_MODE,
            PCS_CH2_RX_POLARITY_INV                                => PCS_CH2_RX_POLARITY_INV,
            PCS_CH2_ALIGN_MODE                                     => PCS_CH2_ALIGN_MODE,
            PCS_CH2_SAMP_16B                                       => PCS_CH2_SAMP_16B,
            PCS_CH2_COMMA_REG0                                     => PCS_CH2_COMMA_REG0,
            PCS_CH2_COMMA_MASK                                     => PCS_CH2_COMMA_MASK,
            PCS_CH2_CEB_MODE                                       => PCS_CH2_CEB_MODE,
            PCS_CH2_CTC_MODE                                       => PCS_CH2_CTC_MODE,
            PCS_CH2_A_REG                                          => PCS_CH2_A_REG,
            PCS_CH2_GE_AUTO_EN                                     => PCS_CH2_GE_AUTO_EN,
            PCS_CH2_SKIP_REG0                                      => PCS_CH2_SKIP_REG0,
            PCS_CH2_SKIP_REG1                                      => PCS_CH2_SKIP_REG1,
            PCS_CH2_SKIP_REG2                                      => PCS_CH2_SKIP_REG2,
            PCS_CH2_SKIP_REG3                                      => PCS_CH2_SKIP_REG3,
            PCS_CH2_DEC_DUAL                                       => PCS_CH2_DEC_DUAL,
            PCS_CH2_SPLIT                                          => PCS_CH2_SPLIT,
            PCS_CH2_FIFOFLAG_CTC                                   => PCS_CH2_FIFOFLAG_CTC,
            PCS_CH2_COMMA_DET_MODE                                 => PCS_CH2_COMMA_DET_MODE,
            PCS_CH2_ERRDETECT_SILENCE                              => PCS_CH2_ERRDETECT_SILENCE,
            PCS_CH2_PMA_RCLK_POLINV                                => PCS_CH2_PMA_RCLK_POLINV,
            PCS_CH2_PCS_RCLK_SEL                                   => PCS_CH2_PCS_RCLK_SEL,
            PCS_CH2_MCB_RCLK_POLINV                                => PCS_CH2_MCB_RCLK_POLINV,
            PCS_CH2_CB_RCLK_SEL                                    => PCS_CH2_CB_RCLK_SEL,
            PCS_CH2_AFTER_CTC_RCLK_SEL                             => PCS_CH2_AFTER_CTC_RCLK_SEL,
            PCS_CH2_RCLK_POLINV                                    => PCS_CH2_RCLK_POLINV,
            PCS_CH2_BRIDGE_RCLK_SEL                                => PCS_CH2_BRIDGE_RCLK_SEL,
            PCS_CH2_PCS_RCLK_EN                                    => PCS_CH2_PCS_RCLK_EN,
            PCS_CH2_CB_RCLK_EN                                     => PCS_CH2_CB_RCLK_EN,
            PCS_CH2_AFTER_CTC_RCLK_EN                              => PCS_CH2_AFTER_CTC_RCLK_EN,
            PCS_CH2_AFTER_CTC_RCLK_EN_GB                           => PCS_CH2_AFTER_CTC_RCLK_EN_GB,
            PCS_CH2_BRIDGE_RCLK_EN                                 => PCS_CH2_BRIDGE_RCLK_EN,
            PCS_CH2_PCS_RX_RSTN                                    => PCS_CH2_PCS_RX_RSTN,
            PCS_CH2_SLAVE                                          => PCS_CH2_SLAVE,
            PCS_CH2_PCIE_SLAVE                                     => PCS_CH2_PCIE_SLAVE,
            PCS_CH2_PCS_CB_RSTN                                    => PCS_CH2_PCS_CB_RSTN,
            PCS_CH2_TX_BYPASS_BRIDGE_UINT                          => PCS_CH2_TX_BYPASS_BRIDGE_UINT,
            PCS_CH2_TX_BYPASS_GEAR                                 => PCS_CH2_TX_BYPASS_GEAR,
            PCS_CH2_TX_BYPASS_ENC                                  => PCS_CH2_TX_BYPASS_ENC,
            PCS_CH2_TX_BYPASS_BIT_SLIP                             => PCS_CH2_TX_BYPASS_BIT_SLIP,
            PCS_CH2_TX_GEAR_SPLIT                                  => PCS_CH2_TX_GEAR_SPLIT,
            PCS_CH2_TX_DRIVE_REG_MODE                              => PCS_CH2_TX_DRIVE_REG_MODE,
            PCS_CH2_TX_BIT_SLIP_CYCLES                             => PCS_CH2_TX_BIT_SLIP_CYCLES,
            PCS_CH2_INT_TX_MASK_0                                  => PCS_CH2_INT_TX_MASK_0,
            PCS_CH2_INT_TX_MASK_1                                  => PCS_CH2_INT_TX_MASK_1,
            PCS_CH2_INT_TX_MASK_2                                  => PCS_CH2_INT_TX_MASK_2,
            PCS_CH2_INT_TX_CLR_0                                   => PCS_CH2_INT_TX_CLR_0,
            PCS_CH2_INT_TX_CLR_1                                   => PCS_CH2_INT_TX_CLR_1,
            PCS_CH2_INT_TX_CLR_2                                   => PCS_CH2_INT_TX_CLR_2,
            PCS_CH2_TX_PMA_TCLK_POLINV                             => PCS_CH2_TX_PMA_TCLK_POLINV,
            PCS_CH2_TX_PCS_CLK_EN_SEL                              => PCS_CH2_TX_PCS_CLK_EN_SEL,
            PCS_CH2_TX_BRIDGE_TCLK_SEL                             => PCS_CH2_TX_BRIDGE_TCLK_SEL,
            PCS_CH2_TX_TCLK_POLINV                                 => PCS_CH2_TX_TCLK_POLINV,
            PCS_CH2_TX_PCS_TX_RSTN                                 => PCS_CH2_TX_PCS_TX_RSTN,
            PCS_CH2_TX_SLAVE                                       => PCS_CH2_TX_SLAVE,
            PCS_CH2_TX_BRIDGE_CLK_EN_SEL                           => PCS_CH2_TX_BRIDGE_CLK_EN_SEL,
            PCS_CH2_DATA_WIDTH_MODE                                => PCS_CH2_DATA_WIDTH_MODE,
            PCS_CH2_TX_TCLK2FABRIC_SEL                             => PCS_CH2_TX_TCLK2FABRIC_SEL,
            PCS_CH2_TX_OUTZZ                                       => PCS_CH2_TX_OUTZZ,
            PCS_CH2_ENC_DUAL                                       => PCS_CH2_ENC_DUAL,
            PCS_CH2_TX_BITSLIP_DATA_MODE                           => PCS_CH2_TX_BITSLIP_DATA_MODE,
            PCS_CH2_COMMA_REG1                                     => PCS_CH2_COMMA_REG1,
            PCS_CH2_RAPID_IMAX                                     => PCS_CH2_RAPID_IMAX,
            PCS_CH2_RAPID_VMIN_1                                   => PCS_CH2_RAPID_VMIN_1,
            PCS_CH2_RAPID_VMIN_2                                   => PCS_CH2_RAPID_VMIN_2,
            PCS_CH2_RX_PRBS_MODE                                   => PCS_CH2_RX_PRBS_MODE,
            PCS_CH2_RX_ERRCNT_CLR                                  => PCS_CH2_RX_ERRCNT_CLR,
            PCS_CH2_TX_PRBS_MODE                                   => PCS_CH2_TX_PRBS_MODE,
            PCS_CH2_TX_INSERT_ER                                   => PCS_CH2_TX_INSERT_ER,
            PCS_CH2_ENABLE_PRBS_GEN                                => PCS_CH2_ENABLE_PRBS_GEN,
            PCS_CH2_ERR_CNT                                        => PCS_CH2_ERR_CNT,
            PCS_CH2_DEFAULT_RADDR                                  => PCS_CH2_DEFAULT_RADDR,
            PCS_CH2_MASTER_CHECK_OFFSET                            => PCS_CH2_MASTER_CHECK_OFFSET,
            PCS_CH2_DELAY_SET                                      => PCS_CH2_DELAY_SET,
            PCS_CH2_SEACH_OFFSET                                   => PCS_CH2_SEACH_OFFSET,
            PCS_CH2_CEB_RAPIDLS_MMAX                               => PCS_CH2_CEB_RAPIDLS_MMAX,
            PCS_CH2_CTC_AFULL                                      => PCS_CH2_CTC_AFULL,
            PCS_CH2_CTC_AEMPTY                                     => PCS_CH2_CTC_AEMPTY,
            PCS_CH2_FAR_LOOP                                       => PCS_CH2_FAR_LOOP,
            PCS_CH2_NEAR_LOOP                                      => PCS_CH2_NEAR_LOOP,
            PCS_CH2_INT_RX_MASK_0                                  => PCS_CH2_INT_RX_MASK_0,
            PCS_CH2_INT_RX_MASK_1                                  => PCS_CH2_INT_RX_MASK_1,
            PCS_CH2_INT_RX_MASK_2                                  => PCS_CH2_INT_RX_MASK_2,
            PCS_CH2_INT_RX_MASK_3                                  => PCS_CH2_INT_RX_MASK_3,
            PCS_CH2_INT_RX_MASK_4                                  => PCS_CH2_INT_RX_MASK_4,
            PCS_CH2_INT_RX_MASK_5                                  => PCS_CH2_INT_RX_MASK_5,
            PCS_CH2_INT_RX_MASK_6                                  => PCS_CH2_INT_RX_MASK_6,
            PCS_CH2_INT_RX_MASK_7                                  => PCS_CH2_INT_RX_MASK_7,
            PCS_CH2_INT_RX_CLR_0                                   => PCS_CH2_INT_RX_CLR_0,
            PCS_CH2_INT_RX_CLR_1                                   => PCS_CH2_INT_RX_CLR_1,
            PCS_CH2_INT_RX_CLR_2                                   => PCS_CH2_INT_RX_CLR_2,
            PCS_CH2_INT_RX_CLR_3                                   => PCS_CH2_INT_RX_CLR_3,
            PCS_CH2_INT_RX_CLR_4                                   => PCS_CH2_INT_RX_CLR_4,
            PCS_CH2_INT_RX_CLR_5                                   => PCS_CH2_INT_RX_CLR_5,
            PCS_CH2_INT_RX_CLR_6                                   => PCS_CH2_INT_RX_CLR_6,
            PCS_CH2_INT_RX_CLR_7                                   => PCS_CH2_INT_RX_CLR_7,
            PCS_CH3_BYPASS_WORD_ALIGN                              => PCS_CH3_BYPASS_WORD_ALIGN,
            PCS_CH3_BYPASS_DENC                                    => PCS_CH3_BYPASS_DENC,
            PCS_CH3_BYPASS_BONDING                                 => PCS_CH3_BYPASS_BONDING,
            PCS_CH3_BYPASS_CTC                                     => PCS_CH3_BYPASS_CTC,
            PCS_CH3_BYPASS_GEAR                                    => PCS_CH3_BYPASS_GEAR,
            PCS_CH3_BYPASS_BRIDGE                                  => PCS_CH3_BYPASS_BRIDGE,
            PCS_CH3_DATA_MODE                                      => PCS_CH3_DATA_MODE,
            PCS_CH3_RX_POLARITY_INV                                => PCS_CH3_RX_POLARITY_INV,
            PCS_CH3_ALIGN_MODE                                     => PCS_CH3_ALIGN_MODE,
            PCS_CH3_SAMP_16B                                       => PCS_CH3_SAMP_16B,
            PCS_CH3_COMMA_REG0                                     => PCS_CH3_COMMA_REG0,
            PCS_CH3_COMMA_MASK                                     => PCS_CH3_COMMA_MASK,
            PCS_CH3_CEB_MODE                                       => PCS_CH3_CEB_MODE,
            PCS_CH3_CTC_MODE                                       => PCS_CH3_CTC_MODE,
            PCS_CH3_A_REG                                          => PCS_CH3_A_REG,
            PCS_CH3_GE_AUTO_EN                                     => PCS_CH3_GE_AUTO_EN,
            PCS_CH3_SKIP_REG0                                      => PCS_CH3_SKIP_REG0,
            PCS_CH3_SKIP_REG1                                      => PCS_CH3_SKIP_REG1,
            PCS_CH3_SKIP_REG2                                      => PCS_CH3_SKIP_REG2,
            PCS_CH3_SKIP_REG3                                      => PCS_CH3_SKIP_REG3,
            PCS_CH3_DEC_DUAL                                       => PCS_CH3_DEC_DUAL,
            PCS_CH3_SPLIT                                          => PCS_CH3_SPLIT,
            PCS_CH3_FIFOFLAG_CTC                                   => PCS_CH3_FIFOFLAG_CTC,
            PCS_CH3_COMMA_DET_MODE                                 => PCS_CH3_COMMA_DET_MODE,
            PCS_CH3_ERRDETECT_SILENCE                              => PCS_CH3_ERRDETECT_SILENCE,
            PCS_CH3_PMA_RCLK_POLINV                                => PCS_CH3_PMA_RCLK_POLINV,
            PCS_CH3_PCS_RCLK_SEL                                   => PCS_CH3_PCS_RCLK_SEL,
            PCS_CH3_MCB_RCLK_POLINV                                => PCS_CH3_MCB_RCLK_POLINV,
            PCS_CH3_CB_RCLK_SEL                                    => PCS_CH3_CB_RCLK_SEL,
            PCS_CH3_AFTER_CTC_RCLK_SEL                             => PCS_CH3_AFTER_CTC_RCLK_SEL,
            PCS_CH3_RCLK_POLINV                                    => PCS_CH3_RCLK_POLINV,
            PCS_CH3_BRIDGE_RCLK_SEL                                => PCS_CH3_BRIDGE_RCLK_SEL,
            PCS_CH3_PCS_RCLK_EN                                    => PCS_CH3_PCS_RCLK_EN,
            PCS_CH3_CB_RCLK_EN                                     => PCS_CH3_CB_RCLK_EN,
            PCS_CH3_AFTER_CTC_RCLK_EN                              => PCS_CH3_AFTER_CTC_RCLK_EN,
            PCS_CH3_AFTER_CTC_RCLK_EN_GB                           => PCS_CH3_AFTER_CTC_RCLK_EN_GB,
            PCS_CH3_BRIDGE_RCLK_EN                                 => PCS_CH3_BRIDGE_RCLK_EN,
            PCS_CH3_PCS_RX_RSTN                                    => PCS_CH3_PCS_RX_RSTN,
            PCS_CH3_SLAVE                                          => PCS_CH3_SLAVE,
            PCS_CH3_PCIE_SLAVE                                     => PCS_CH3_PCIE_SLAVE,
            PCS_CH3_PCS_CB_RSTN                                    => PCS_CH3_PCS_CB_RSTN,
            PCS_CH3_TX_BYPASS_BRIDGE_UINT                          => PCS_CH3_TX_BYPASS_BRIDGE_UINT,
            PCS_CH3_TX_BYPASS_GEAR                                 => PCS_CH3_TX_BYPASS_GEAR,
            PCS_CH3_TX_BYPASS_ENC                                  => PCS_CH3_TX_BYPASS_ENC,
            PCS_CH3_TX_BYPASS_BIT_SLIP                             => PCS_CH3_TX_BYPASS_BIT_SLIP,
            PCS_CH3_TX_GEAR_SPLIT                                  => PCS_CH3_TX_GEAR_SPLIT,
            PCS_CH3_TX_DRIVE_REG_MODE                              => PCS_CH3_TX_DRIVE_REG_MODE,
            PCS_CH3_TX_BIT_SLIP_CYCLES                             => PCS_CH3_TX_BIT_SLIP_CYCLES,
            PCS_CH3_INT_TX_MASK_0                                  => PCS_CH3_INT_TX_MASK_0,
            PCS_CH3_INT_TX_MASK_1                                  => PCS_CH3_INT_TX_MASK_1,
            PCS_CH3_INT_TX_MASK_2                                  => PCS_CH3_INT_TX_MASK_2,
            PCS_CH3_INT_TX_CLR_0                                   => PCS_CH3_INT_TX_CLR_0,
            PCS_CH3_INT_TX_CLR_1                                   => PCS_CH3_INT_TX_CLR_1,
            PCS_CH3_INT_TX_CLR_2                                   => PCS_CH3_INT_TX_CLR_2,
            PCS_CH3_TX_PMA_TCLK_POLINV                             => PCS_CH3_TX_PMA_TCLK_POLINV,
            PCS_CH3_TX_PCS_CLK_EN_SEL                              => PCS_CH3_TX_PCS_CLK_EN_SEL,
            PCS_CH3_TX_BRIDGE_TCLK_SEL                             => PCS_CH3_TX_BRIDGE_TCLK_SEL,
            PCS_CH3_TX_TCLK_POLINV                                 => PCS_CH3_TX_TCLK_POLINV,
            PCS_CH3_TX_PCS_TX_RSTN                                 => PCS_CH3_TX_PCS_TX_RSTN,
            PCS_CH3_TX_SLAVE                                       => PCS_CH3_TX_SLAVE,
            PCS_CH3_TX_BRIDGE_CLK_EN_SEL                           => PCS_CH3_TX_BRIDGE_CLK_EN_SEL,
            PCS_CH3_DATA_WIDTH_MODE                                => PCS_CH3_DATA_WIDTH_MODE,
            PCS_CH3_TX_TCLK2FABRIC_SEL                             => PCS_CH3_TX_TCLK2FABRIC_SEL,
            PCS_CH3_TX_OUTZZ                                       => PCS_CH3_TX_OUTZZ,
            PCS_CH3_ENC_DUAL                                       => PCS_CH3_ENC_DUAL,
            PCS_CH3_TX_BITSLIP_DATA_MODE                           => PCS_CH3_TX_BITSLIP_DATA_MODE,
            PCS_CH3_COMMA_REG1                                     => PCS_CH3_COMMA_REG1,
            PCS_CH3_RAPID_IMAX                                     => PCS_CH3_RAPID_IMAX,
            PCS_CH3_RAPID_VMIN_1                                   => PCS_CH3_RAPID_VMIN_1,
            PCS_CH3_RAPID_VMIN_2                                   => PCS_CH3_RAPID_VMIN_2,
            PCS_CH3_RX_PRBS_MODE                                   => PCS_CH3_RX_PRBS_MODE,
            PCS_CH3_RX_ERRCNT_CLR                                  => PCS_CH3_RX_ERRCNT_CLR,
            PCS_CH3_TX_PRBS_MODE                                   => PCS_CH3_TX_PRBS_MODE,
            PCS_CH3_TX_INSERT_ER                                   => PCS_CH3_TX_INSERT_ER,
            PCS_CH3_ENABLE_PRBS_GEN                                => PCS_CH3_ENABLE_PRBS_GEN,
            PCS_CH3_ERR_CNT                                        => PCS_CH3_ERR_CNT,
            PCS_CH3_DEFAULT_RADDR                                  => PCS_CH3_DEFAULT_RADDR,
            PCS_CH3_MASTER_CHECK_OFFSET                            => PCS_CH3_MASTER_CHECK_OFFSET,
            PCS_CH3_DELAY_SET                                      => PCS_CH3_DELAY_SET,
            PCS_CH3_SEACH_OFFSET                                   => PCS_CH3_SEACH_OFFSET,
            PCS_CH3_CEB_RAPIDLS_MMAX                               => PCS_CH3_CEB_RAPIDLS_MMAX,
            PCS_CH3_CTC_AFULL                                      => PCS_CH3_CTC_AFULL,
            PCS_CH3_CTC_AEMPTY                                     => PCS_CH3_CTC_AEMPTY,
            PCS_CH3_FAR_LOOP                                       => PCS_CH3_FAR_LOOP,
            PCS_CH3_NEAR_LOOP                                      => PCS_CH3_NEAR_LOOP,
            PCS_CH3_INT_RX_MASK_0                                  => PCS_CH3_INT_RX_MASK_0,
            PCS_CH3_INT_RX_MASK_1                                  => PCS_CH3_INT_RX_MASK_1,
            PCS_CH3_INT_RX_MASK_2                                  => PCS_CH3_INT_RX_MASK_2,
            PCS_CH3_INT_RX_MASK_3                                  => PCS_CH3_INT_RX_MASK_3,
            PCS_CH3_INT_RX_MASK_4                                  => PCS_CH3_INT_RX_MASK_4,
            PCS_CH3_INT_RX_MASK_5                                  => PCS_CH3_INT_RX_MASK_5,
            PCS_CH3_INT_RX_MASK_6                                  => PCS_CH3_INT_RX_MASK_6,
            PCS_CH3_INT_RX_MASK_7                                  => PCS_CH3_INT_RX_MASK_7,
            PCS_CH3_INT_RX_CLR_0                                   => PCS_CH3_INT_RX_CLR_0,
            PCS_CH3_INT_RX_CLR_1                                   => PCS_CH3_INT_RX_CLR_1,
            PCS_CH3_INT_RX_CLR_2                                   => PCS_CH3_INT_RX_CLR_2,
            PCS_CH3_INT_RX_CLR_3                                   => PCS_CH3_INT_RX_CLR_3,
            PCS_CH3_INT_RX_CLR_4                                   => PCS_CH3_INT_RX_CLR_4,
            PCS_CH3_INT_RX_CLR_5                                   => PCS_CH3_INT_RX_CLR_5,
            PCS_CH3_INT_RX_CLR_6                                   => PCS_CH3_INT_RX_CLR_6,
            PCS_CH3_INT_RX_CLR_7                                   => PCS_CH3_INT_RX_CLR_7,
            PMA_CH0_TXDATA_WIDTH                                   => PMA_CH0_TXDATA_WIDTH,
            PMA_CH0_TX_TESTPATTERN                                 => PMA_CH0_TX_TESTPATTERN,
            PMA_CH0_TESTPATTERN_O_ENABLE                           => PMA_CH0_TESTPATTERN_O_ENABLE,
            PMA_CH0_DISABLE_BSMODE_DRVAMP                          => PMA_CH0_DISABLE_BSMODE_DRVAMP,
            PMA_CH0_FORCE_BIST_ENABLE                              => PMA_CH0_FORCE_BIST_ENABLE,
            PMA_CH0_FORCE_ELECTRICAL_IDLE                          => PMA_CH0_FORCE_ELECTRICAL_IDLE,
            PMA_CH0_FORCE_RXDCT_ENABLE                             => PMA_CH0_FORCE_RXDCT_ENABLE,
            PMA_CH0_FORCE_EXTLB_ENABLE                             => PMA_CH0_FORCE_EXTLB_ENABLE,
            PMA_CH0_DISABLE_LANE_SYNC                              => PMA_CH0_DISABLE_LANE_SYNC,
            PMA_CH0_DISABLE_ELECTRICAL_IDLE                        => PMA_CH0_DISABLE_ELECTRICAL_IDLE,
            PMA_CH0_DISABLE_RXDCT_ENABLE                           => PMA_CH0_DISABLE_RXDCT_ENABLE,
            PMA_CH0_DISABLE_EXTLB_ENABLE                           => PMA_CH0_DISABLE_EXTLB_ENABLE,
            PMA_CH0_DISABLE_LOW_SPEED_PATH_ENABLE                  => PMA_CH0_DISABLE_LOW_SPEED_PATH_ENABLE,
            PMA_CH0_FORCE_LANE_ENABLE                              => PMA_CH0_FORCE_LANE_ENABLE,
            PMA_CH0_FORCE_LANE_RESETB_DISABLE                      => PMA_CH0_FORCE_LANE_RESETB_DISABLE,
            PMA_CH0_RXDCT_LGBW_ENABLE                              => PMA_CH0_RXDCT_LGBW_ENABLE,
            PMA_CH0_RXDCT_VTH                                      => PMA_CH0_RXDCT_VTH,
            PMA_CH0_DE_EMPHASIS_ADDITIONAL_CONTROL                 => PMA_CH0_DE_EMPHASIS_ADDITIONAL_CONTROL,
            PMA_CH0_DRV_RTERM_CONTROL                              => PMA_CH0_DRV_RTERM_CONTROL,
            PMA_CH0_FDRV_AMP_CONTROL                               => PMA_CH0_FDRV_AMP_CONTROL,
            PMA_CH0_PREPC_AMP_CONTROL                              => PMA_CH0_PREPC_AMP_CONTROL,
            PMA_CH0_PREMC_AMP_CONTROL                              => PMA_CH0_PREMC_AMP_CONTROL,
            PMA_CH0_SER_AMP_CONTROL                                => PMA_CH0_SER_AMP_CONTROL,
            PMA_CH0_PFD_LOOP_RESISTOR_SETTING                      => PMA_CH0_PFD_LOOP_RESISTOR_SETTING,
            PMA_CH0_PD_LOOP_RESISTOR_SETTING                       => PMA_CH0_PD_LOOP_RESISTOR_SETTING,
            PMA_CH0_CDR_TEST_OUT_SELECT                            => PMA_CH0_CDR_TEST_OUT_SELECT,
            PMA_CH0_PI_DIV1_BP                                     => PMA_CH0_PI_DIV1_BP,
            PMA_CH0_PI_TEST_FOR_CKI                                => PMA_CH0_PI_TEST_FOR_CKI,
            PMA_CH0_PI_CURRENT_SETTING                             => PMA_CH0_PI_CURRENT_SETTING,
            PMA_CH0_PI_FREQUENCY_SETTING                           => PMA_CH0_PI_FREQUENCY_SETTING,
            PMA_CH0_TEST_OUT_SELECT_FOR_RCK                        => PMA_CH0_TEST_OUT_SELECT_FOR_RCK,
            PMA_CH0_TEST_OUT_SELECT_SOURCE                         => PMA_CH0_TEST_OUT_SELECT_SOURCE,
            PMA_CH0_TEST_DATA_OUT_SELECT_SOURCE                    => PMA_CH0_TEST_DATA_OUT_SELECT_SOURCE,
            PMA_CH0_TEST_CK_OUT_SELECT_SOURCE                      => PMA_CH0_TEST_CK_OUT_SELECT_SOURCE,
            PMA_CH0_ENABLE_SLIP1UI_MODULE                          => PMA_CH0_ENABLE_SLIP1UI_MODULE,
            PMA_CH0_PN_SWAP_ENABLE                                 => PMA_CH0_PN_SWAP_ENABLE,
            PMA_CH0_SIPO_BIT_SETTING                               => PMA_CH0_SIPO_BIT_SETTING,
            PMA_CH0_OOB_EN                                         => PMA_CH0_OOB_EN,
            PMA_CH0_ALOS_EN                                        => PMA_CH0_ALOS_EN,
            PMA_CH0_LFMODE                                         => PMA_CH0_LFMODE,
            PMA_CH0_TSO_HS_SEL                                     => PMA_CH0_TSO_HS_SEL,
            PMA_CH0_LX_SELLC                                       => PMA_CH0_LX_SELLC,
            PMA_CH0_LX_RXPLL_DIVSEL45_FB                           => PMA_CH0_LX_RXPLL_DIVSEL45_FB,
            PMA_CH0_LX_RXPLL_DIVSEL_FB                             => PMA_CH0_LX_RXPLL_DIVSEL_FB,
            PMA_CH0_LX_RXPLL_DIVSEL_REF                            => PMA_CH0_LX_RXPLL_DIVSEL_REF,
            PMA_CH0_PICODE                                         => PMA_CH0_PICODE,
            PMA_CH0_RX_REFCK_SEL                                   => PMA_CH0_RX_REFCK_SEL,
            PMA_CH0_PFDLPEN_REGISTER_CONTROL_ENABLE                => PMA_CH0_PFDLPEN_REGISTER_CONTROL_ENABLE,
            PMA_CH0_PFDLPEN_REGISTER_SETTING                       => PMA_CH0_PFDLPEN_REGISTER_SETTING,
            PMA_CH0_PDLPEN_REGISTER_CONTROL_ENABLE                 => PMA_CH0_PDLPEN_REGISTER_CONTROL_ENABLE,
            PMA_CH0_PDLPEN_REGISTER_SETTING                        => PMA_CH0_PDLPEN_REGISTER_SETTING,
            PMA_CH0_DIV_CHANGE_ENABLE_DELAY_TIMER                  => PMA_CH0_DIV_CHANGE_ENABLE_DELAY_TIMER,
            PMA_CH0_DIV_CHANGE_ENABLE_SIGNAL_GATING                => PMA_CH0_DIV_CHANGE_ENABLE_SIGNAL_GATING,
            PMA_CH0_CDR_ALIGN_REGISTER_SETTING_VALUE               => PMA_CH0_CDR_ALIGN_REGISTER_SETTING_VALUE,
            PMA_CH0_FORCE_CDR_ALIGN_ENABLE                         => PMA_CH0_FORCE_CDR_ALIGN_ENABLE,
            PMA_CH0_SELLC_REGISTER_SETTING_VALUE                   => PMA_CH0_SELLC_REGISTER_SETTING_VALUE,
            PMA_CH0_SELLC_CONTROL_BY_REGISTER                      => PMA_CH0_SELLC_CONTROL_BY_REGISTER,
            PMA_CH0_REG_PLLI_LDO_VREF_SETTING                      => PMA_CH0_REG_PLLI_LDO_VREF_SETTING,
            PMA_CH0_REG_PLLI_LDO_BYPASS_CURRENT                    => PMA_CH0_REG_PLLI_LDO_BYPASS_CURRENT,
            PMA_CH0_REG_PLL_HSTEST_ENABLE                          => PMA_CH0_REG_PLL_HSTEST_ENABLE,
            PMA_CH0_REG_PLL_ISNK_CURRENT_CONTROL                   => PMA_CH0_REG_PLL_ISNK_CURRENT_CONTROL,
            PMA_CH0_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING           => PMA_CH0_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING,
            PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING                  => PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING,
            PMA_CH0_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING           => PMA_CH0_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING,
            PMA_CH0_REG_PLL_CP0_BIAS_CONTROL                       => PMA_CH0_REG_PLL_CP0_BIAS_CONTROL,
            PMA_CH0_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING            => PMA_CH0_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING,
            PMA_CH0_REG_PLL_CP1_BIAS_CONTROL                       => PMA_CH0_REG_PLL_CP1_BIAS_CONTROL,
            PMA_CH0_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING            => PMA_CH0_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING,
            PMA_CH0_REG_PLL_CP0_CURRENT_SETTING                    => PMA_CH0_REG_PLL_CP0_CURRENT_SETTING,
            PMA_CH0_REG_PLL_CP1_CURRENT_SETTING                    => PMA_CH0_REG_PLL_CP1_CURRENT_SETTING,
            PMA_CH0_REG_PLL_GM1_CURRENT_SETTING                    => PMA_CH0_REG_PLL_GM1_CURRENT_SETTING,
            PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING                 => PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING,
            PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW             => PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW,
            PMA_CH0_REG_PLL_REG_CUR                                => PMA_CH0_REG_PLL_REG_CUR,
            PMA_CH0_REG_PLL_LCCUR                                  => PMA_CH0_REG_PLL_LCCUR,
            PMA_CH0_REG_PLL_LCOBAS                                 => PMA_CH0_REG_PLL_LCOBAS,
            PMA_CH0_REG_PLL_FB_CK_TEST_OUT_ENABLE                  => PMA_CH0_REG_PLL_FB_CK_TEST_OUT_ENABLE,
            PMA_CH0_CDR_ALIGN_TIMER                                => PMA_CH0_CDR_ALIGN_TIMER,
            PMA_CH0_CALIB_WAIT                                     => PMA_CH0_CALIB_WAIT,
            PMA_CH0_CALIB_TIMER                                    => PMA_CH0_CALIB_TIMER,
            PMA_CH0_TOT_RANGE                                      => PMA_CH0_TOT_RANGE,
            PMA_CH0_SUB_RANGE                                      => PMA_CH0_SUB_RANGE,
            PMA_CH0_OVLP                                           => PMA_CH0_OVLP,
            PMA_CH0_BIST_WAIT                                      => PMA_CH0_BIST_WAIT,
            PMA_CH0_BIST_TIMER                                     => PMA_CH0_BIST_TIMER,
            PMA_CH0_BAND_LB                                        => PMA_CH0_BAND_LB,
            PMA_CH0_BAND_HB                                        => PMA_CH0_BAND_HB,
            PMA_CH0_FREQ_LOCK_ACCURACY                             => PMA_CH0_FREQ_LOCK_ACCURACY,
            PMA_CH0_REG_SET_LC_BAND                                => PMA_CH0_REG_SET_LC_BAND,
            PMA_CH0_REG_SET_VCODIV                                 => PMA_CH0_REG_SET_VCODIV,
            PMA_CH0_REGISTER_SET_VCODIV_BAND_ENABLE                => PMA_CH0_REGISTER_SET_VCODIV_BAND_ENABLE,
            PMA_CH0_REG_SET_PLL_LOCK                               => PMA_CH0_REG_SET_PLL_LOCK,
            PMA_CH0_REGISTER_SET_PLL_LOCK_ENABLE                   => PMA_CH0_REGISTER_SET_PLL_LOCK_ENABLE,
            PMA_CH0_REG_SET_VCO_HI                                 => PMA_CH0_REG_SET_VCO_HI,
            PMA_CH0_REG_SET_VCO_LO                                 => PMA_CH0_REG_SET_VCO_LO,
            PMA_CH0_REGISTER_SET_VCO_HI_VCO_LO_ENABLE              => PMA_CH0_REGISTER_SET_VCO_HI_VCO_LO_ENABLE,
            PMA_CH0_FORCE_LC_PLL_LOOP_EN                           => PMA_CH0_FORCE_LC_PLL_LOOP_EN,
            PMA_CH0_VCO_DIV_CALI_BYPASS                            => PMA_CH0_VCO_DIV_CALI_BYPASS,
            PMA_CH0_BIST_EN                                        => PMA_CH0_BIST_EN,
            PMA_CH0_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE       => PMA_CH0_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE,
            PMA_CH0_FREQ_DETECT_ENABLE_SOURCE                      => PMA_CH0_FREQ_DETECT_ENABLE_SOURCE,
            PMA_CH0_REG_SET_DIVSEL_REF                             => PMA_CH0_REG_SET_DIVSEL_REF,
            PMA_CH0_REG_SET_DIVSEL45_FB                            => PMA_CH0_REG_SET_DIVSEL45_FB,
            PMA_CH0_REG_SET_DIVSEL_FB                              => PMA_CH0_REG_SET_DIVSEL_FB,
            PMA_CH0_PLL_LOOP_EN_SETTING                            => PMA_CH0_PLL_LOOP_EN_SETTING,
            PMA_CH0_REGISTER_SET_TXPLL_DIV_ENABLE                  => PMA_CH0_REGISTER_SET_TXPLL_DIV_ENABLE,
            PMA_CH0_FORCE_RXPLL_RESET                              => PMA_CH0_FORCE_RXPLL_RESET,
            PMA_CH0_FORCE_RXPLL_ON                                 => PMA_CH0_FORCE_RXPLL_ON,
            PMA_CH0_DPCK_DIV2                                      => PMA_CH0_DPCK_DIV2,
            PMA_CH0_LFO_SETTING                                    => PMA_CH0_LFO_SETTING,
            PMA_CH0_ALOS_COUNTER_CLOCK_SELECTION                   => PMA_CH0_ALOS_COUNTER_CLOCK_SELECTION,
            PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT                     => PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT,
            PMA_CH0_OOB_ENTER_DELAY_SETTING                        => PMA_CH0_OOB_ENTER_DELAY_SETTING,
            PMA_CH0_ALOS_LOW_TO_HIGH_COUNTER_SETTING               => PMA_CH0_ALOS_LOW_TO_HIGH_COUNTER_SETTING,
            PMA_CH0_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL=> PMA_CH0_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL,
            PMA_CH0_ALOS_EXIT_COUNTER_CLOCK_DIVIDER                => PMA_CH0_ALOS_EXIT_COUNTER_CLOCK_DIVIDER,
            PMA_CH0_OOB_OSCILATER_FREQUENCY_SETTING                => PMA_CH0_OOB_OSCILATER_FREQUENCY_SETTING,
            PMA_CH0_FORCE_OOB                                      => PMA_CH0_FORCE_OOB,
            PMA_CH0_OOB_VTH_SET                                    => PMA_CH0_OOB_VTH_SET,
            PMA_CH0_FORCE_DET_FORCE_ALOS_LOW                       => PMA_CH0_FORCE_DET_FORCE_ALOS_LOW,
            PMA_CH0_ALOS_THRESHOLD_VOLTAGE                         => PMA_CH0_ALOS_THRESHOLD_VOLTAGE,
            PMA_CH0_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE              => PMA_CH0_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE,
            PMA_CH0_REGR_NEGATIVE_HYSTERESIS_SETTING               => PMA_CH0_REGR_NEGATIVE_HYSTERESIS_SETTING,
            PMA_CH0_REGL_POSITIVE_HYSTERESIS_SETTING               => PMA_CH0_REGL_POSITIVE_HYSTERESIS_SETTING,
            PMA_CH0_REG_EN                                         => PMA_CH0_REG_EN,
            PMA_CH0_REGREF_SEL                                     => PMA_CH0_REGREF_SEL,
            PMA_CH0_DC496                                          => PMA_CH0_DC496,
            PMA_CH0_EQ2_AC_VAR_SETTING                             => PMA_CH0_EQ2_AC_VAR_SETTING,
            PMA_CH0_EQ2_AC_RES_SETTING                             => PMA_CH0_EQ2_AC_RES_SETTING,
            PMA_CH0_EQ2_DC_RESTOP_SETTING                          => PMA_CH0_EQ2_DC_RESTOP_SETTING,
            PMA_CH0_EQ1_DC_RESTOP_SETTING                          => PMA_CH0_EQ1_DC_RESTOP_SETTING,
            PMA_CH0_EQ1_AC_VAR_SETTING                             => PMA_CH0_EQ1_AC_VAR_SETTING,
            PMA_CH0_EQ2_CURRENT_SETTING                            => PMA_CH0_EQ2_CURRENT_SETTING,
            PMA_CH0_EQ1_AC_RES_SETTING                             => PMA_CH0_EQ1_AC_RES_SETTING,
            PMA_CH0_EQ1_CURRENT_SETTING                            => PMA_CH0_EQ1_CURRENT_SETTING,
            PMA_CH0_RPLUS                                          => PMA_CH0_RPLUS,
            PMA_CH0_RMINUS                                         => PMA_CH0_RMINUS,
            PMA_CH0_RVALSET                                        => PMA_CH0_RVALSET,
            PMA_CH0_RTERM                                          => PMA_CH0_RTERM,
            PMA_CH0_DCFB_EN                                        => PMA_CH0_DCFB_EN,
            PMA_CH0_DCCOUP                                         => PMA_CH0_DCCOUP,
            PMA_CH0_3G                                             => PMA_CH0_3G,
            PMA_CH1_TXDATA_WIDTH                                   => PMA_CH1_TXDATA_WIDTH,
            PMA_CH1_TX_TESTPATTERN                                 => PMA_CH1_TX_TESTPATTERN,
            PMA_CH1_TESTPATTERN_O_ENABLE                           => PMA_CH1_TESTPATTERN_O_ENABLE,
            PMA_CH1_DISABLE_BSMODE_DRVAMP                          => PMA_CH1_DISABLE_BSMODE_DRVAMP,
            PMA_CH1_FORCE_BIST_ENABLE                              => PMA_CH1_FORCE_BIST_ENABLE,
            PMA_CH1_FORCE_ELECTRICAL_IDLE                          => PMA_CH1_FORCE_ELECTRICAL_IDLE,
            PMA_CH1_FORCE_RXDCT_ENABLE                             => PMA_CH1_FORCE_RXDCT_ENABLE,
            PMA_CH1_FORCE_EXTLB_ENABLE                             => PMA_CH1_FORCE_EXTLB_ENABLE,
            PMA_CH1_DISABLE_LANE_SYNC                              => PMA_CH1_DISABLE_LANE_SYNC,
            PMA_CH1_DISABLE_ELECTRICAL_IDLE                        => PMA_CH1_DISABLE_ELECTRICAL_IDLE,
            PMA_CH1_DISABLE_RXDCT_ENABLE                           => PMA_CH1_DISABLE_RXDCT_ENABLE,
            PMA_CH1_DISABLE_EXTLB_ENABLE                           => PMA_CH1_DISABLE_EXTLB_ENABLE,
            PMA_CH1_DISABLE_LOW_SPEED_PATH_ENABLE                  => PMA_CH1_DISABLE_LOW_SPEED_PATH_ENABLE,
            PMA_CH1_FORCE_LANE_ENABLE                              => PMA_CH1_FORCE_LANE_ENABLE,
            PMA_CH1_FORCE_LANE_RESETB_DISABLE                      => PMA_CH1_FORCE_LANE_RESETB_DISABLE,
            PMA_CH1_RXDCT_LGBW_ENABLE                              => PMA_CH1_RXDCT_LGBW_ENABLE,
            PMA_CH1_RXDCT_VTH                                      => PMA_CH1_RXDCT_VTH,
            PMA_CH1_DE_EMPHASIS_ADDITIONAL_CONTROL                 => PMA_CH1_DE_EMPHASIS_ADDITIONAL_CONTROL,
            PMA_CH1_DRV_RTERM_CONTROL                              => PMA_CH1_DRV_RTERM_CONTROL,
            PMA_CH1_FDRV_AMP_CONTROL                               => PMA_CH1_FDRV_AMP_CONTROL,
            PMA_CH1_PREPC_AMP_CONTROL                              => PMA_CH1_PREPC_AMP_CONTROL,
            PMA_CH1_PREMC_AMP_CONTROL                              => PMA_CH1_PREMC_AMP_CONTROL,
            PMA_CH1_SER_AMP_CONTROL                                => PMA_CH1_SER_AMP_CONTROL,
            PMA_CH1_PFD_LOOP_RESISTOR_SETTING                      => PMA_CH1_PFD_LOOP_RESISTOR_SETTING,
            PMA_CH1_PD_LOOP_RESISTOR_SETTING                       => PMA_CH1_PD_LOOP_RESISTOR_SETTING,
            PMA_CH1_CDR_TEST_OUT_SELECT                            => PMA_CH1_CDR_TEST_OUT_SELECT,
            PMA_CH1_PI_DIV1_BP                                     => PMA_CH1_PI_DIV1_BP,
            PMA_CH1_PI_TEST_FOR_CKI                                => PMA_CH1_PI_TEST_FOR_CKI,
            PMA_CH1_PI_CURRENT_SETTING                             => PMA_CH1_PI_CURRENT_SETTING,
            PMA_CH1_PI_FREQUENCY_SETTING                           => PMA_CH1_PI_FREQUENCY_SETTING,
            PMA_CH1_TEST_OUT_SELECT_FOR_RCK                        => PMA_CH1_TEST_OUT_SELECT_FOR_RCK,
            PMA_CH1_TEST_OUT_SELECT_SOURCE                         => PMA_CH1_TEST_OUT_SELECT_SOURCE,
            PMA_CH1_TEST_DATA_OUT_SELECT_SOURCE                    => PMA_CH1_TEST_DATA_OUT_SELECT_SOURCE,
            PMA_CH1_TEST_CK_OUT_SELECT_SOURCE                      => PMA_CH1_TEST_CK_OUT_SELECT_SOURCE,
            PMA_CH1_ENABLE_SLIP1UI_MODULE                          => PMA_CH1_ENABLE_SLIP1UI_MODULE,
            PMA_CH1_PN_SWAP_ENABLE                                 => PMA_CH1_PN_SWAP_ENABLE,
            PMA_CH1_SIPO_BIT_SETTING                               => PMA_CH1_SIPO_BIT_SETTING,
            PMA_CH1_OOB_EN                                         => PMA_CH1_OOB_EN,
            PMA_CH1_ALOS_EN                                        => PMA_CH1_ALOS_EN,
            PMA_CH1_LFMODE                                         => PMA_CH1_LFMODE,
            PMA_CH1_TSO_HS_SEL                                     => PMA_CH1_TSO_HS_SEL,
            PMA_CH1_LX_SELLC                                       => PMA_CH1_LX_SELLC,
            PMA_CH1_LX_RXPLL_DIVSEL45_FB                           => PMA_CH1_LX_RXPLL_DIVSEL45_FB,
            PMA_CH1_LX_RXPLL_DIVSEL_FB                             => PMA_CH1_LX_RXPLL_DIVSEL_FB,
            PMA_CH1_LX_RXPLL_DIVSEL_REF                            => PMA_CH1_LX_RXPLL_DIVSEL_REF,
            PMA_CH1_PICODE                                         => PMA_CH1_PICODE,
            PMA_CH1_RX_REFCK_SEL                                   => PMA_CH1_RX_REFCK_SEL,
            PMA_CH1_PFDLPEN_REGISTER_CONTROL_ENABLE                => PMA_CH1_PFDLPEN_REGISTER_CONTROL_ENABLE,
            PMA_CH1_PFDLPEN_REGISTER_SETTING                       => PMA_CH1_PFDLPEN_REGISTER_SETTING,
            PMA_CH1_PDLPEN_REGISTER_CONTROL_ENABLE                 => PMA_CH1_PDLPEN_REGISTER_CONTROL_ENABLE,
            PMA_CH1_PDLPEN_REGISTER_SETTING                        => PMA_CH1_PDLPEN_REGISTER_SETTING,
            PMA_CH1_DIV_CHANGE_ENABLE_DELAY_TIMER                  => PMA_CH1_DIV_CHANGE_ENABLE_DELAY_TIMER,
            PMA_CH1_DIV_CHANGE_ENABLE_SIGNAL_GATING                => PMA_CH1_DIV_CHANGE_ENABLE_SIGNAL_GATING,
            PMA_CH1_CDR_ALIGN_REGISTER_SETTING_VALUE               => PMA_CH1_CDR_ALIGN_REGISTER_SETTING_VALUE,
            PMA_CH1_FORCE_CDR_ALIGN_ENABLE                         => PMA_CH1_FORCE_CDR_ALIGN_ENABLE,
            PMA_CH1_SELLC_REGISTER_SETTING_VALUE                   => PMA_CH1_SELLC_REGISTER_SETTING_VALUE,
            PMA_CH1_SELLC_CONTROL_BY_REGISTER                      => PMA_CH1_SELLC_CONTROL_BY_REGISTER,
            PMA_CH1_REG_PLLI_LDO_VREF_SETTING                      => PMA_CH1_REG_PLLI_LDO_VREF_SETTING,
            PMA_CH1_REG_PLLI_LDO_BYPASS_CURRENT                    => PMA_CH1_REG_PLLI_LDO_BYPASS_CURRENT,
            PMA_CH1_REG_PLL_HSTEST_ENABLE                          => PMA_CH1_REG_PLL_HSTEST_ENABLE,
            PMA_CH1_REG_PLL_ISNK_CURRENT_CONTROL                   => PMA_CH1_REG_PLL_ISNK_CURRENT_CONTROL,
            PMA_CH1_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING           => PMA_CH1_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING,
            PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING                  => PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING,
            PMA_CH1_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING           => PMA_CH1_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING,
            PMA_CH1_REG_PLL_CP0_BIAS_CONTROL                       => PMA_CH1_REG_PLL_CP0_BIAS_CONTROL,
            PMA_CH1_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING            => PMA_CH1_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING,
            PMA_CH1_REG_PLL_CP1_BIAS_CONTROL                       => PMA_CH1_REG_PLL_CP1_BIAS_CONTROL,
            PMA_CH1_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING            => PMA_CH1_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING,
            PMA_CH1_REG_PLL_CP0_CURRENT_SETTING                    => PMA_CH1_REG_PLL_CP0_CURRENT_SETTING,
            PMA_CH1_REG_PLL_CP1_CURRENT_SETTING                    => PMA_CH1_REG_PLL_CP1_CURRENT_SETTING,
            PMA_CH1_REG_PLL_GM1_CURRENT_SETTING                    => PMA_CH1_REG_PLL_GM1_CURRENT_SETTING,
            PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING                 => PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING,
            PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW             => PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW,
            PMA_CH1_REG_PLL_REG_CUR                                => PMA_CH1_REG_PLL_REG_CUR,
            PMA_CH1_REG_PLL_LCCUR                                  => PMA_CH1_REG_PLL_LCCUR,
            PMA_CH1_REG_PLL_LCOBAS                                 => PMA_CH1_REG_PLL_LCOBAS,
            PMA_CH1_REG_PLL_FB_CK_TEST_OUT_ENABLE                  => PMA_CH1_REG_PLL_FB_CK_TEST_OUT_ENABLE,
            PMA_CH1_CDR_ALIGN_TIMER                                => PMA_CH1_CDR_ALIGN_TIMER,
            PMA_CH1_CALIB_WAIT                                     => PMA_CH1_CALIB_WAIT,
            PMA_CH1_CALIB_TIMER                                    => PMA_CH1_CALIB_TIMER,
            PMA_CH1_TOT_RANGE                                      => PMA_CH1_TOT_RANGE,
            PMA_CH1_SUB_RANGE                                      => PMA_CH1_SUB_RANGE,
            PMA_CH1_OVLP                                           => PMA_CH1_OVLP,
            PMA_CH1_BIST_WAIT                                      => PMA_CH1_BIST_WAIT,
            PMA_CH1_BIST_TIMER                                     => PMA_CH1_BIST_TIMER,
            PMA_CH1_BAND_LB                                        => PMA_CH1_BAND_LB,
            PMA_CH1_BAND_HB                                        => PMA_CH1_BAND_HB,
            PMA_CH1_FREQ_LOCK_ACCURACY                             => PMA_CH1_FREQ_LOCK_ACCURACY,
            PMA_CH1_REG_SET_LC_BAND                                => PMA_CH1_REG_SET_LC_BAND,
            PMA_CH1_REG_SET_VCODIV                                 => PMA_CH1_REG_SET_VCODIV,
            PMA_CH1_REGISTER_SET_VCODIV_BAND_ENABLE                => PMA_CH1_REGISTER_SET_VCODIV_BAND_ENABLE,
            PMA_CH1_REG_SET_PLL_LOCK                               => PMA_CH1_REG_SET_PLL_LOCK,
            PMA_CH1_REGISTER_SET_PLL_LOCK_ENABLE                   => PMA_CH1_REGISTER_SET_PLL_LOCK_ENABLE,
            PMA_CH1_REG_SET_VCO_HI                                 => PMA_CH1_REG_SET_VCO_HI,
            PMA_CH1_REG_SET_VCO_LO                                 => PMA_CH1_REG_SET_VCO_LO,
            PMA_CH1_REGISTER_SET_VCO_HI_VCO_LO_ENABLE              => PMA_CH1_REGISTER_SET_VCO_HI_VCO_LO_ENABLE,
            PMA_CH1_FORCE_LC_PLL_LOOP_EN                           => PMA_CH1_FORCE_LC_PLL_LOOP_EN,
            PMA_CH1_VCO_DIV_CALI_BYPASS                            => PMA_CH1_VCO_DIV_CALI_BYPASS,
            PMA_CH1_BIST_EN                                        => PMA_CH1_BIST_EN,
            PMA_CH1_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE       => PMA_CH1_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE,
            PMA_CH1_FREQ_DETECT_ENABLE_SOURCE                      => PMA_CH1_FREQ_DETECT_ENABLE_SOURCE,
            PMA_CH1_REG_SET_DIVSEL_REF                             => PMA_CH1_REG_SET_DIVSEL_REF,
            PMA_CH1_REG_SET_DIVSEL45_FB                            => PMA_CH1_REG_SET_DIVSEL45_FB,
            PMA_CH1_REG_SET_DIVSEL_FB                              => PMA_CH1_REG_SET_DIVSEL_FB,
            PMA_CH1_PLL_LOOP_EN_SETTING                            => PMA_CH1_PLL_LOOP_EN_SETTING,
            PMA_CH1_REGISTER_SET_TXPLL_DIV_ENABLE                  => PMA_CH1_REGISTER_SET_TXPLL_DIV_ENABLE,
            PMA_CH1_FORCE_RXPLL_RESET                              => PMA_CH1_FORCE_RXPLL_RESET,
            PMA_CH1_FORCE_RXPLL_ON                                 => PMA_CH1_FORCE_RXPLL_ON,
            PMA_CH1_DPCK_DIV2                                      => PMA_CH1_DPCK_DIV2,
            PMA_CH1_LFO_SETTING                                    => PMA_CH1_LFO_SETTING,
            PMA_CH1_ALOS_COUNTER_CLOCK_SELECTION                   => PMA_CH1_ALOS_COUNTER_CLOCK_SELECTION,
            PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT                     => PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT,
            PMA_CH1_OOB_ENTER_DELAY_SETTING                        => PMA_CH1_OOB_ENTER_DELAY_SETTING,
            PMA_CH1_ALOS_LOW_TO_HIGH_COUNTER_SETTING               => PMA_CH1_ALOS_LOW_TO_HIGH_COUNTER_SETTING,
            PMA_CH1_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL=> PMA_CH1_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL,
            PMA_CH1_ALOS_EXIT_COUNTER_CLOCK_DIVIDER                => PMA_CH1_ALOS_EXIT_COUNTER_CLOCK_DIVIDER,
            PMA_CH1_OOB_OSCILATER_FREQUENCY_SETTING                => PMA_CH1_OOB_OSCILATER_FREQUENCY_SETTING,
            PMA_CH1_FORCE_OOB                                      => PMA_CH1_FORCE_OOB,
            PMA_CH1_OOB_VTH_SET                                    => PMA_CH1_OOB_VTH_SET,
            PMA_CH1_FORCE_DET_FORCE_ALOS_LOW                       => PMA_CH1_FORCE_DET_FORCE_ALOS_LOW,
            PMA_CH1_ALOS_THRESHOLD_VOLTAGE                         => PMA_CH1_ALOS_THRESHOLD_VOLTAGE,
            PMA_CH1_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE              => PMA_CH1_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE,
            PMA_CH1_REGR_NEGATIVE_HYSTERESIS_SETTING               => PMA_CH1_REGR_NEGATIVE_HYSTERESIS_SETTING,
            PMA_CH1_REGL_POSITIVE_HYSTERESIS_SETTING               => PMA_CH1_REGL_POSITIVE_HYSTERESIS_SETTING,
            PMA_CH1_REG_EN                                         => PMA_CH1_REG_EN,
            PMA_CH1_REGREF_SEL                                     => PMA_CH1_REGREF_SEL,
            PMA_CH1_DC496                                          => PMA_CH1_DC496,
            PMA_CH1_EQ2_AC_VAR_SETTING                             => PMA_CH1_EQ2_AC_VAR_SETTING,
            PMA_CH1_EQ2_AC_RES_SETTING                             => PMA_CH1_EQ2_AC_RES_SETTING,
            PMA_CH1_EQ2_DC_RESTOP_SETTING                          => PMA_CH1_EQ2_DC_RESTOP_SETTING,
            PMA_CH1_EQ1_DC_RESTOP_SETTING                          => PMA_CH1_EQ1_DC_RESTOP_SETTING,
            PMA_CH1_EQ1_AC_VAR_SETTING                             => PMA_CH1_EQ1_AC_VAR_SETTING,
            PMA_CH1_EQ2_CURRENT_SETTING                            => PMA_CH1_EQ2_CURRENT_SETTING,
            PMA_CH1_EQ1_AC_RES_SETTING                             => PMA_CH1_EQ1_AC_RES_SETTING,
            PMA_CH1_EQ1_CURRENT_SETTING                            => PMA_CH1_EQ1_CURRENT_SETTING,
            PMA_CH1_RPLUS                                          => PMA_CH1_RPLUS,
            PMA_CH1_RMINUS                                         => PMA_CH1_RMINUS,
            PMA_CH1_RVALSET                                        => PMA_CH1_RVALSET,
            PMA_CH1_RTERM                                          => PMA_CH1_RTERM,
            PMA_CH1_DCFB_EN                                        => PMA_CH1_DCFB_EN,
            PMA_CH1_DCCOUP                                         => PMA_CH1_DCCOUP,
            PMA_CH1_3G                                             => PMA_CH1_3G,
            PMA_CH2_TXDATA_WIDTH                                   => PMA_CH2_TXDATA_WIDTH,
            PMA_CH2_TX_TESTPATTERN                                 => PMA_CH2_TX_TESTPATTERN,
            PMA_CH2_TESTPATTERN_O_ENABLE                           => PMA_CH2_TESTPATTERN_O_ENABLE,
            PMA_CH2_DISABLE_BSMODE_DRVAMP                          => PMA_CH2_DISABLE_BSMODE_DRVAMP,
            PMA_CH2_FORCE_BIST_ENABLE                              => PMA_CH2_FORCE_BIST_ENABLE,
            PMA_CH2_FORCE_ELECTRICAL_IDLE                          => PMA_CH2_FORCE_ELECTRICAL_IDLE,
            PMA_CH2_FORCE_RXDCT_ENABLE                             => PMA_CH2_FORCE_RXDCT_ENABLE,
            PMA_CH2_FORCE_EXTLB_ENABLE                             => PMA_CH2_FORCE_EXTLB_ENABLE,
            PMA_CH2_DISABLE_LANE_SYNC                              => PMA_CH2_DISABLE_LANE_SYNC,
            PMA_CH2_DISABLE_ELECTRICAL_IDLE                        => PMA_CH2_DISABLE_ELECTRICAL_IDLE,
            PMA_CH2_DISABLE_RXDCT_ENABLE                           => PMA_CH2_DISABLE_RXDCT_ENABLE,
            PMA_CH2_DISABLE_EXTLB_ENABLE                           => PMA_CH2_DISABLE_EXTLB_ENABLE,
            PMA_CH2_DISABLE_LOW_SPEED_PATH_ENABLE                  => PMA_CH2_DISABLE_LOW_SPEED_PATH_ENABLE,
            PMA_CH2_FORCE_LANE_ENABLE                              => PMA_CH2_FORCE_LANE_ENABLE,
            PMA_CH2_FORCE_LANE_RESETB_DISABLE                      => PMA_CH2_FORCE_LANE_RESETB_DISABLE,
            PMA_CH2_RXDCT_LGBW_ENABLE                              => PMA_CH2_RXDCT_LGBW_ENABLE,
            PMA_CH2_RXDCT_VTH                                      => PMA_CH2_RXDCT_VTH,
            PMA_CH2_DE_EMPHASIS_ADDITIONAL_CONTROL                 => PMA_CH2_DE_EMPHASIS_ADDITIONAL_CONTROL,
            PMA_CH2_DRV_RTERM_CONTROL                              => PMA_CH2_DRV_RTERM_CONTROL,
            PMA_CH2_FDRV_AMP_CONTROL                               => PMA_CH2_FDRV_AMP_CONTROL,
            PMA_CH2_PREPC_AMP_CONTROL                              => PMA_CH2_PREPC_AMP_CONTROL,
            PMA_CH2_PREMC_AMP_CONTROL                              => PMA_CH2_PREMC_AMP_CONTROL,
            PMA_CH2_SER_AMP_CONTROL                                => PMA_CH2_SER_AMP_CONTROL,
            PMA_CH2_PFD_LOOP_RESISTOR_SETTING                      => PMA_CH2_PFD_LOOP_RESISTOR_SETTING,
            PMA_CH2_PD_LOOP_RESISTOR_SETTING                       => PMA_CH2_PD_LOOP_RESISTOR_SETTING,
            PMA_CH2_CDR_TEST_OUT_SELECT                            => PMA_CH2_CDR_TEST_OUT_SELECT,
            PMA_CH2_PI_DIV1_BP                                     => PMA_CH2_PI_DIV1_BP,
            PMA_CH2_PI_TEST_FOR_CKI                                => PMA_CH2_PI_TEST_FOR_CKI,
            PMA_CH2_PI_CURRENT_SETTING                             => PMA_CH2_PI_CURRENT_SETTING,
            PMA_CH2_PI_FREQUENCY_SETTING                           => PMA_CH2_PI_FREQUENCY_SETTING,
            PMA_CH2_TEST_OUT_SELECT_FOR_RCK                        => PMA_CH2_TEST_OUT_SELECT_FOR_RCK,
            PMA_CH2_TEST_OUT_SELECT_SOURCE                         => PMA_CH2_TEST_OUT_SELECT_SOURCE,
            PMA_CH2_TEST_DATA_OUT_SELECT_SOURCE                    => PMA_CH2_TEST_DATA_OUT_SELECT_SOURCE,
            PMA_CH2_TEST_CK_OUT_SELECT_SOURCE                      => PMA_CH2_TEST_CK_OUT_SELECT_SOURCE,
            PMA_CH2_ENABLE_SLIP1UI_MODULE                          => PMA_CH2_ENABLE_SLIP1UI_MODULE,
            PMA_CH2_PN_SWAP_ENABLE                                 => PMA_CH2_PN_SWAP_ENABLE,
            PMA_CH2_SIPO_BIT_SETTING                               => PMA_CH2_SIPO_BIT_SETTING,
            PMA_CH2_OOB_EN                                         => PMA_CH2_OOB_EN,
            PMA_CH2_ALOS_EN                                        => PMA_CH2_ALOS_EN,
            PMA_CH2_LFMODE                                         => PMA_CH2_LFMODE,
            PMA_CH2_TSO_HS_SEL                                     => PMA_CH2_TSO_HS_SEL,
            PMA_CH2_LX_SELLC                                       => PMA_CH2_LX_SELLC,
            PMA_CH2_LX_RXPLL_DIVSEL45_FB                           => PMA_CH2_LX_RXPLL_DIVSEL45_FB,
            PMA_CH2_LX_RXPLL_DIVSEL_FB                             => PMA_CH2_LX_RXPLL_DIVSEL_FB,
            PMA_CH2_LX_RXPLL_DIVSEL_REF                            => PMA_CH2_LX_RXPLL_DIVSEL_REF,
            PMA_CH2_PICODE                                         => PMA_CH2_PICODE,
            PMA_CH2_RX_REFCK_SEL                                   => PMA_CH2_RX_REFCK_SEL,
            PMA_CH2_PFDLPEN_REGISTER_CONTROL_ENABLE                => PMA_CH2_PFDLPEN_REGISTER_CONTROL_ENABLE,
            PMA_CH2_PFDLPEN_REGISTER_SETTING                       => PMA_CH2_PFDLPEN_REGISTER_SETTING,
            PMA_CH2_PDLPEN_REGISTER_CONTROL_ENABLE                 => PMA_CH2_PDLPEN_REGISTER_CONTROL_ENABLE,
            PMA_CH2_PDLPEN_REGISTER_SETTING                        => PMA_CH2_PDLPEN_REGISTER_SETTING,
            PMA_CH2_DIV_CHANGE_ENABLE_DELAY_TIMER                  => PMA_CH2_DIV_CHANGE_ENABLE_DELAY_TIMER,
            PMA_CH2_DIV_CHANGE_ENABLE_SIGNAL_GATING                => PMA_CH2_DIV_CHANGE_ENABLE_SIGNAL_GATING,
            PMA_CH2_CDR_ALIGN_REGISTER_SETTING_VALUE               => PMA_CH2_CDR_ALIGN_REGISTER_SETTING_VALUE,
            PMA_CH2_FORCE_CDR_ALIGN_ENABLE                         => PMA_CH2_FORCE_CDR_ALIGN_ENABLE,
            PMA_CH2_SELLC_REGISTER_SETTING_VALUE                   => PMA_CH2_SELLC_REGISTER_SETTING_VALUE,
            PMA_CH2_SELLC_CONTROL_BY_REGISTER                      => PMA_CH2_SELLC_CONTROL_BY_REGISTER,
            PMA_CH2_REG_PLLI_LDO_VREF_SETTING                      => PMA_CH2_REG_PLLI_LDO_VREF_SETTING,
            PMA_CH2_REG_PLLI_LDO_BYPASS_CURRENT                    => PMA_CH2_REG_PLLI_LDO_BYPASS_CURRENT,
            PMA_CH2_REG_PLL_HSTEST_ENABLE                          => PMA_CH2_REG_PLL_HSTEST_ENABLE,
            PMA_CH2_REG_PLL_ISNK_CURRENT_CONTROL                   => PMA_CH2_REG_PLL_ISNK_CURRENT_CONTROL,
            PMA_CH2_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING           => PMA_CH2_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING,
            PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING                  => PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING,
            PMA_CH2_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING           => PMA_CH2_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING,
            PMA_CH2_REG_PLL_CP0_BIAS_CONTROL                       => PMA_CH2_REG_PLL_CP0_BIAS_CONTROL,
            PMA_CH2_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING            => PMA_CH2_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING,
            PMA_CH2_REG_PLL_CP1_BIAS_CONTROL                       => PMA_CH2_REG_PLL_CP1_BIAS_CONTROL,
            PMA_CH2_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING            => PMA_CH2_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING,
            PMA_CH2_REG_PLL_CP0_CURRENT_SETTING                    => PMA_CH2_REG_PLL_CP0_CURRENT_SETTING,
            PMA_CH2_REG_PLL_CP1_CURRENT_SETTING                    => PMA_CH2_REG_PLL_CP1_CURRENT_SETTING,
            PMA_CH2_REG_PLL_GM1_CURRENT_SETTING                    => PMA_CH2_REG_PLL_GM1_CURRENT_SETTING,
            PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING                 => PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING,
            PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW             => PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW,
            PMA_CH2_REG_PLL_REG_CUR                                => PMA_CH2_REG_PLL_REG_CUR,
            PMA_CH2_REG_PLL_LCCUR                                  => PMA_CH2_REG_PLL_LCCUR,
            PMA_CH2_REG_PLL_LCOBAS                                 => PMA_CH2_REG_PLL_LCOBAS,
            PMA_CH2_REG_PLL_FB_CK_TEST_OUT_ENABLE                  => PMA_CH2_REG_PLL_FB_CK_TEST_OUT_ENABLE,
            PMA_CH2_CDR_ALIGN_TIMER                                => PMA_CH2_CDR_ALIGN_TIMER,
            PMA_CH2_CALIB_WAIT                                     => PMA_CH2_CALIB_WAIT,
            PMA_CH2_CALIB_TIMER                                    => PMA_CH2_CALIB_TIMER,
            PMA_CH2_TOT_RANGE                                      => PMA_CH2_TOT_RANGE,
            PMA_CH2_SUB_RANGE                                      => PMA_CH2_SUB_RANGE,
            PMA_CH2_OVLP                                           => PMA_CH2_OVLP,
            PMA_CH2_BIST_WAIT                                      => PMA_CH2_BIST_WAIT,
            PMA_CH2_BIST_TIMER                                     => PMA_CH2_BIST_TIMER,
            PMA_CH2_BAND_LB                                        => PMA_CH2_BAND_LB,
            PMA_CH2_BAND_HB                                        => PMA_CH2_BAND_HB,
            PMA_CH2_FREQ_LOCK_ACCURACY                             => PMA_CH2_FREQ_LOCK_ACCURACY,
            PMA_CH2_REG_SET_LC_BAND                                => PMA_CH2_REG_SET_LC_BAND,
            PMA_CH2_REG_SET_VCODIV                                 => PMA_CH2_REG_SET_VCODIV,
            PMA_CH2_REGISTER_SET_VCODIV_BAND_ENABLE                => PMA_CH2_REGISTER_SET_VCODIV_BAND_ENABLE,
            PMA_CH2_REG_SET_PLL_LOCK                               => PMA_CH2_REG_SET_PLL_LOCK,
            PMA_CH2_REGISTER_SET_PLL_LOCK_ENABLE                   => PMA_CH2_REGISTER_SET_PLL_LOCK_ENABLE,
            PMA_CH2_REG_SET_VCO_HI                                 => PMA_CH2_REG_SET_VCO_HI,
            PMA_CH2_REG_SET_VCO_LO                                 => PMA_CH2_REG_SET_VCO_LO,
            PMA_CH2_REGISTER_SET_VCO_HI_VCO_LO_ENABLE              => PMA_CH2_REGISTER_SET_VCO_HI_VCO_LO_ENABLE,
            PMA_CH2_FORCE_LC_PLL_LOOP_EN                           => PMA_CH2_FORCE_LC_PLL_LOOP_EN,
            PMA_CH2_VCO_DIV_CALI_BYPASS                            => PMA_CH2_VCO_DIV_CALI_BYPASS,
            PMA_CH2_BIST_EN                                        => PMA_CH2_BIST_EN,
            PMA_CH2_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE       => PMA_CH2_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE,
            PMA_CH2_FREQ_DETECT_ENABLE_SOURCE                      => PMA_CH2_FREQ_DETECT_ENABLE_SOURCE,
            PMA_CH2_REG_SET_DIVSEL_REF                             => PMA_CH2_REG_SET_DIVSEL_REF,
            PMA_CH2_REG_SET_DIVSEL45_FB                            => PMA_CH2_REG_SET_DIVSEL45_FB,
            PMA_CH2_REG_SET_DIVSEL_FB                              => PMA_CH2_REG_SET_DIVSEL_FB,
            PMA_CH2_PLL_LOOP_EN_SETTING                            => PMA_CH2_PLL_LOOP_EN_SETTING,
            PMA_CH2_REGISTER_SET_TXPLL_DIV_ENABLE                  => PMA_CH2_REGISTER_SET_TXPLL_DIV_ENABLE,
            PMA_CH2_FORCE_RXPLL_RESET                              => PMA_CH2_FORCE_RXPLL_RESET,
            PMA_CH2_FORCE_RXPLL_ON                                 => PMA_CH2_FORCE_RXPLL_ON,
            PMA_CH2_DPCK_DIV2                                      => PMA_CH2_DPCK_DIV2,
            PMA_CH2_LFO_SETTING                                    => PMA_CH2_LFO_SETTING,
            PMA_CH2_ALOS_COUNTER_CLOCK_SELECTION                   => PMA_CH2_ALOS_COUNTER_CLOCK_SELECTION,
            PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT                     => PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT,
            PMA_CH2_OOB_ENTER_DELAY_SETTING                        => PMA_CH2_OOB_ENTER_DELAY_SETTING,
            PMA_CH2_ALOS_LOW_TO_HIGH_COUNTER_SETTING               => PMA_CH2_ALOS_LOW_TO_HIGH_COUNTER_SETTING,
            PMA_CH2_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL=> PMA_CH2_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL,
            PMA_CH2_ALOS_EXIT_COUNTER_CLOCK_DIVIDER                => PMA_CH2_ALOS_EXIT_COUNTER_CLOCK_DIVIDER,
            PMA_CH2_OOB_OSCILATER_FREQUENCY_SETTING                => PMA_CH2_OOB_OSCILATER_FREQUENCY_SETTING,
            PMA_CH2_FORCE_OOB                                      => PMA_CH2_FORCE_OOB,
            PMA_CH2_OOB_VTH_SET                                    => PMA_CH2_OOB_VTH_SET,
            PMA_CH2_FORCE_DET_FORCE_ALOS_LOW                       => PMA_CH2_FORCE_DET_FORCE_ALOS_LOW,
            PMA_CH2_ALOS_THRESHOLD_VOLTAGE                         => PMA_CH2_ALOS_THRESHOLD_VOLTAGE,
            PMA_CH2_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE              => PMA_CH2_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE,
            PMA_CH2_REGR_NEGATIVE_HYSTERESIS_SETTING               => PMA_CH2_REGR_NEGATIVE_HYSTERESIS_SETTING,
            PMA_CH2_REGL_POSITIVE_HYSTERESIS_SETTING               => PMA_CH2_REGL_POSITIVE_HYSTERESIS_SETTING,
            PMA_CH2_REG_EN                                         => PMA_CH2_REG_EN,
            PMA_CH2_REGREF_SEL                                     => PMA_CH2_REGREF_SEL,
            PMA_CH2_DC496                                          => PMA_CH2_DC496,
            PMA_CH2_EQ2_AC_VAR_SETTING                             => PMA_CH2_EQ2_AC_VAR_SETTING,
            PMA_CH2_EQ2_AC_RES_SETTING                             => PMA_CH2_EQ2_AC_RES_SETTING,
            PMA_CH2_EQ2_DC_RESTOP_SETTING                          => PMA_CH2_EQ2_DC_RESTOP_SETTING,
            PMA_CH2_EQ1_DC_RESTOP_SETTING                          => PMA_CH2_EQ1_DC_RESTOP_SETTING,
            PMA_CH2_EQ1_AC_VAR_SETTING                             => PMA_CH2_EQ1_AC_VAR_SETTING,
            PMA_CH2_EQ2_CURRENT_SETTING                            => PMA_CH2_EQ2_CURRENT_SETTING,
            PMA_CH2_EQ1_AC_RES_SETTING                             => PMA_CH2_EQ1_AC_RES_SETTING,
            PMA_CH2_EQ1_CURRENT_SETTING                            => PMA_CH2_EQ1_CURRENT_SETTING,
            PMA_CH2_RPLUS                                          => PMA_CH2_RPLUS,
            PMA_CH2_RMINUS                                         => PMA_CH2_RMINUS,
            PMA_CH2_RVALSET                                        => PMA_CH2_RVALSET,
            PMA_CH2_RTERM                                          => PMA_CH2_RTERM,
            PMA_CH2_DCFB_EN                                        => PMA_CH2_DCFB_EN,
            PMA_CH2_DCCOUP                                         => PMA_CH2_DCCOUP,
            PMA_CH2_3G                                             => PMA_CH2_3G,
            PMA_CH3_TXDATA_WIDTH                                   => PMA_CH3_TXDATA_WIDTH,
            PMA_CH3_TX_TESTPATTERN                                 => PMA_CH3_TX_TESTPATTERN,
            PMA_CH3_TESTPATTERN_O_ENABLE                           => PMA_CH3_TESTPATTERN_O_ENABLE,
            PMA_CH3_DISABLE_BSMODE_DRVAMP                          => PMA_CH3_DISABLE_BSMODE_DRVAMP,
            PMA_CH3_FORCE_BIST_ENABLE                              => PMA_CH3_FORCE_BIST_ENABLE,
            PMA_CH3_FORCE_ELECTRICAL_IDLE                          => PMA_CH3_FORCE_ELECTRICAL_IDLE,
            PMA_CH3_FORCE_RXDCT_ENABLE                             => PMA_CH3_FORCE_RXDCT_ENABLE,
            PMA_CH3_FORCE_EXTLB_ENABLE                             => PMA_CH3_FORCE_EXTLB_ENABLE,
            PMA_CH3_DISABLE_LANE_SYNC                              => PMA_CH3_DISABLE_LANE_SYNC,
            PMA_CH3_DISABLE_ELECTRICAL_IDLE                        => PMA_CH3_DISABLE_ELECTRICAL_IDLE,
            PMA_CH3_DISABLE_RXDCT_ENABLE                           => PMA_CH3_DISABLE_RXDCT_ENABLE,
            PMA_CH3_DISABLE_EXTLB_ENABLE                           => PMA_CH3_DISABLE_EXTLB_ENABLE,
            PMA_CH3_DISABLE_LOW_SPEED_PATH_ENABLE                  => PMA_CH3_DISABLE_LOW_SPEED_PATH_ENABLE,
            PMA_CH3_FORCE_LANE_ENABLE                              => PMA_CH3_FORCE_LANE_ENABLE,
            PMA_CH3_FORCE_LANE_RESETB_DISABLE                      => PMA_CH3_FORCE_LANE_RESETB_DISABLE,
            PMA_CH3_RXDCT_LGBW_ENABLE                              => PMA_CH3_RXDCT_LGBW_ENABLE,
            PMA_CH3_RXDCT_VTH                                      => PMA_CH3_RXDCT_VTH,
            PMA_CH3_DE_EMPHASIS_ADDITIONAL_CONTROL                 => PMA_CH3_DE_EMPHASIS_ADDITIONAL_CONTROL,
            PMA_CH3_DRV_RTERM_CONTROL                              => PMA_CH3_DRV_RTERM_CONTROL,
            PMA_CH3_FDRV_AMP_CONTROL                               => PMA_CH3_FDRV_AMP_CONTROL,
            PMA_CH3_PREPC_AMP_CONTROL                              => PMA_CH3_PREPC_AMP_CONTROL,
            PMA_CH3_PREMC_AMP_CONTROL                              => PMA_CH3_PREMC_AMP_CONTROL,
            PMA_CH3_SER_AMP_CONTROL                                => PMA_CH3_SER_AMP_CONTROL,
            PMA_CH3_PFD_LOOP_RESISTOR_SETTING                      => PMA_CH3_PFD_LOOP_RESISTOR_SETTING,
            PMA_CH3_PD_LOOP_RESISTOR_SETTING                       => PMA_CH3_PD_LOOP_RESISTOR_SETTING,
            PMA_CH3_CDR_TEST_OUT_SELECT                            => PMA_CH3_CDR_TEST_OUT_SELECT,
            PMA_CH3_PI_DIV1_BP                                     => PMA_CH3_PI_DIV1_BP,
            PMA_CH3_PI_TEST_FOR_CKI                                => PMA_CH3_PI_TEST_FOR_CKI,
            PMA_CH3_PI_CURRENT_SETTING                             => PMA_CH3_PI_CURRENT_SETTING,
            PMA_CH3_PI_FREQUENCY_SETTING                           => PMA_CH3_PI_FREQUENCY_SETTING,
            PMA_CH3_TEST_OUT_SELECT_FOR_RCK                        => PMA_CH3_TEST_OUT_SELECT_FOR_RCK,
            PMA_CH3_TEST_OUT_SELECT_SOURCE                         => PMA_CH3_TEST_OUT_SELECT_SOURCE,
            PMA_CH3_TEST_DATA_OUT_SELECT_SOURCE                    => PMA_CH3_TEST_DATA_OUT_SELECT_SOURCE,
            PMA_CH3_TEST_CK_OUT_SELECT_SOURCE                      => PMA_CH3_TEST_CK_OUT_SELECT_SOURCE,
            PMA_CH3_ENABLE_SLIP1UI_MODULE                          => PMA_CH3_ENABLE_SLIP1UI_MODULE,
            PMA_CH3_PN_SWAP_ENABLE                                 => PMA_CH3_PN_SWAP_ENABLE,
            PMA_CH3_SIPO_BIT_SETTING                               => PMA_CH3_SIPO_BIT_SETTING,
            PMA_CH3_OOB_EN                                         => PMA_CH3_OOB_EN,
            PMA_CH3_ALOS_EN                                        => PMA_CH3_ALOS_EN,
            PMA_CH3_LFMODE                                         => PMA_CH3_LFMODE,
            PMA_CH3_TSO_HS_SEL                                     => PMA_CH3_TSO_HS_SEL,
            PMA_CH3_LX_SELLC                                       => PMA_CH3_LX_SELLC,
            PMA_CH3_LX_RXPLL_DIVSEL45_FB                           => PMA_CH3_LX_RXPLL_DIVSEL45_FB,
            PMA_CH3_LX_RXPLL_DIVSEL_FB                             => PMA_CH3_LX_RXPLL_DIVSEL_FB,
            PMA_CH3_LX_RXPLL_DIVSEL_REF                            => PMA_CH3_LX_RXPLL_DIVSEL_REF,
            PMA_CH3_PICODE                                         => PMA_CH3_PICODE,
            PMA_CH3_RX_REFCK_SEL                                   => PMA_CH3_RX_REFCK_SEL,
            PMA_CH3_PFDLPEN_REGISTER_CONTROL_ENABLE                => PMA_CH3_PFDLPEN_REGISTER_CONTROL_ENABLE,
            PMA_CH3_PFDLPEN_REGISTER_SETTING                       => PMA_CH3_PFDLPEN_REGISTER_SETTING,
            PMA_CH3_PDLPEN_REGISTER_CONTROL_ENABLE                 => PMA_CH3_PDLPEN_REGISTER_CONTROL_ENABLE,
            PMA_CH3_PDLPEN_REGISTER_SETTING                        => PMA_CH3_PDLPEN_REGISTER_SETTING,
            PMA_CH3_DIV_CHANGE_ENABLE_DELAY_TIMER                  => PMA_CH3_DIV_CHANGE_ENABLE_DELAY_TIMER,
            PMA_CH3_DIV_CHANGE_ENABLE_SIGNAL_GATING                => PMA_CH3_DIV_CHANGE_ENABLE_SIGNAL_GATING,
            PMA_CH3_CDR_ALIGN_REGISTER_SETTING_VALUE               => PMA_CH3_CDR_ALIGN_REGISTER_SETTING_VALUE,
            PMA_CH3_FORCE_CDR_ALIGN_ENABLE                         => PMA_CH3_FORCE_CDR_ALIGN_ENABLE,
            PMA_CH3_SELLC_REGISTER_SETTING_VALUE                   => PMA_CH3_SELLC_REGISTER_SETTING_VALUE,
            PMA_CH3_SELLC_CONTROL_BY_REGISTER                      => PMA_CH3_SELLC_CONTROL_BY_REGISTER,
            PMA_CH3_REG_PLLI_LDO_VREF_SETTING                      => PMA_CH3_REG_PLLI_LDO_VREF_SETTING,
            PMA_CH3_REG_PLLI_LDO_BYPASS_CURRENT                    => PMA_CH3_REG_PLLI_LDO_BYPASS_CURRENT,
            PMA_CH3_REG_PLL_HSTEST_ENABLE                          => PMA_CH3_REG_PLL_HSTEST_ENABLE,
            PMA_CH3_REG_PLL_ISNK_CURRENT_CONTROL                   => PMA_CH3_REG_PLL_ISNK_CURRENT_CONTROL,
            PMA_CH3_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING           => PMA_CH3_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING,
            PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING                  => PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING,
            PMA_CH3_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING           => PMA_CH3_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING,
            PMA_CH3_REG_PLL_CP0_BIAS_CONTROL                       => PMA_CH3_REG_PLL_CP0_BIAS_CONTROL,
            PMA_CH3_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING            => PMA_CH3_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING,
            PMA_CH3_REG_PLL_CP1_BIAS_CONTROL                       => PMA_CH3_REG_PLL_CP1_BIAS_CONTROL,
            PMA_CH3_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING            => PMA_CH3_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING,
            PMA_CH3_REG_PLL_CP0_CURRENT_SETTING                    => PMA_CH3_REG_PLL_CP0_CURRENT_SETTING,
            PMA_CH3_REG_PLL_CP1_CURRENT_SETTING                    => PMA_CH3_REG_PLL_CP1_CURRENT_SETTING,
            PMA_CH3_REG_PLL_GM1_CURRENT_SETTING                    => PMA_CH3_REG_PLL_GM1_CURRENT_SETTING,
            PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING                 => PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING,
            PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW             => PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW,
            PMA_CH3_REG_PLL_REG_CUR                                => PMA_CH3_REG_PLL_REG_CUR,
            PMA_CH3_REG_PLL_LCCUR                                  => PMA_CH3_REG_PLL_LCCUR,
            PMA_CH3_REG_PLL_LCOBAS                                 => PMA_CH3_REG_PLL_LCOBAS,
            PMA_CH3_REG_PLL_FB_CK_TEST_OUT_ENABLE                  => PMA_CH3_REG_PLL_FB_CK_TEST_OUT_ENABLE,
            PMA_CH3_CDR_ALIGN_TIMER                                => PMA_CH3_CDR_ALIGN_TIMER,
            PMA_CH3_CALIB_WAIT                                     => PMA_CH3_CALIB_WAIT,
            PMA_CH3_CALIB_TIMER                                    => PMA_CH3_CALIB_TIMER,
            PMA_CH3_TOT_RANGE                                      => PMA_CH3_TOT_RANGE,
            PMA_CH3_SUB_RANGE                                      => PMA_CH3_SUB_RANGE,
            PMA_CH3_OVLP                                           => PMA_CH3_OVLP,
            PMA_CH3_BIST_WAIT                                      => PMA_CH3_BIST_WAIT,
            PMA_CH3_BIST_TIMER                                     => PMA_CH3_BIST_TIMER,
            PMA_CH3_BAND_LB                                        => PMA_CH3_BAND_LB,
            PMA_CH3_BAND_HB                                        => PMA_CH3_BAND_HB,
            PMA_CH3_FREQ_LOCK_ACCURACY                             => PMA_CH3_FREQ_LOCK_ACCURACY,
            PMA_CH3_REG_SET_LC_BAND                                => PMA_CH3_REG_SET_LC_BAND,
            PMA_CH3_REG_SET_VCODIV                                 => PMA_CH3_REG_SET_VCODIV,
            PMA_CH3_REGISTER_SET_VCODIV_BAND_ENABLE                => PMA_CH3_REGISTER_SET_VCODIV_BAND_ENABLE,
            PMA_CH3_REG_SET_PLL_LOCK                               => PMA_CH3_REG_SET_PLL_LOCK,
            PMA_CH3_REGISTER_SET_PLL_LOCK_ENABLE                   => PMA_CH3_REGISTER_SET_PLL_LOCK_ENABLE,
            PMA_CH3_REG_SET_VCO_HI                                 => PMA_CH3_REG_SET_VCO_HI,
            PMA_CH3_REG_SET_VCO_LO                                 => PMA_CH3_REG_SET_VCO_LO,
            PMA_CH3_REGISTER_SET_VCO_HI_VCO_LO_ENABLE              => PMA_CH3_REGISTER_SET_VCO_HI_VCO_LO_ENABLE,
            PMA_CH3_FORCE_LC_PLL_LOOP_EN                           => PMA_CH3_FORCE_LC_PLL_LOOP_EN,
            PMA_CH3_VCO_DIV_CALI_BYPASS                            => PMA_CH3_VCO_DIV_CALI_BYPASS,
            PMA_CH3_BIST_EN                                        => PMA_CH3_BIST_EN,
            PMA_CH3_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE       => PMA_CH3_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE,
            PMA_CH3_FREQ_DETECT_ENABLE_SOURCE                      => PMA_CH3_FREQ_DETECT_ENABLE_SOURCE,
            PMA_CH3_REG_SET_DIVSEL_REF                             => PMA_CH3_REG_SET_DIVSEL_REF,
            PMA_CH3_REG_SET_DIVSEL45_FB                            => PMA_CH3_REG_SET_DIVSEL45_FB,
            PMA_CH3_REG_SET_DIVSEL_FB                              => PMA_CH3_REG_SET_DIVSEL_FB,
            PMA_CH3_PLL_LOOP_EN_SETTING                            => PMA_CH3_PLL_LOOP_EN_SETTING,
            PMA_CH3_REGISTER_SET_TXPLL_DIV_ENABLE                  => PMA_CH3_REGISTER_SET_TXPLL_DIV_ENABLE,
            PMA_CH3_FORCE_RXPLL_RESET                              => PMA_CH3_FORCE_RXPLL_RESET,
            PMA_CH3_FORCE_RXPLL_ON                                 => PMA_CH3_FORCE_RXPLL_ON,
            PMA_CH3_DPCK_DIV2                                      => PMA_CH3_DPCK_DIV2,
            PMA_CH3_LFO_SETTING                                    => PMA_CH3_LFO_SETTING,
            PMA_CH3_ALOS_COUNTER_CLOCK_SELECTION                   => PMA_CH3_ALOS_COUNTER_CLOCK_SELECTION,
            PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT                     => PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT,
            PMA_CH3_OOB_ENTER_DELAY_SETTING                        => PMA_CH3_OOB_ENTER_DELAY_SETTING,
            PMA_CH3_ALOS_LOW_TO_HIGH_COUNTER_SETTING               => PMA_CH3_ALOS_LOW_TO_HIGH_COUNTER_SETTING,
            PMA_CH3_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL=> PMA_CH3_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL,
            PMA_CH3_ALOS_EXIT_COUNTER_CLOCK_DIVIDER                => PMA_CH3_ALOS_EXIT_COUNTER_CLOCK_DIVIDER,
            PMA_CH3_OOB_OSCILATER_FREQUENCY_SETTING                => PMA_CH3_OOB_OSCILATER_FREQUENCY_SETTING,
            PMA_CH3_FORCE_OOB                                      => PMA_CH3_FORCE_OOB,
            PMA_CH3_OOB_VTH_SET                                    => PMA_CH3_OOB_VTH_SET,
            PMA_CH3_FORCE_DET_FORCE_ALOS_LOW                       => PMA_CH3_FORCE_DET_FORCE_ALOS_LOW,
            PMA_CH3_ALOS_THRESHOLD_VOLTAGE                         => PMA_CH3_ALOS_THRESHOLD_VOLTAGE,
            PMA_CH3_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE              => PMA_CH3_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE,
            PMA_CH3_REGR_NEGATIVE_HYSTERESIS_SETTING               => PMA_CH3_REGR_NEGATIVE_HYSTERESIS_SETTING,
            PMA_CH3_REGL_POSITIVE_HYSTERESIS_SETTING               => PMA_CH3_REGL_POSITIVE_HYSTERESIS_SETTING,
            PMA_CH3_REG_EN                                         => PMA_CH3_REG_EN,
            PMA_CH3_REGREF_SEL                                     => PMA_CH3_REGREF_SEL,
            PMA_CH3_DC496                                          => PMA_CH3_DC496,
            PMA_CH3_EQ2_AC_VAR_SETTING                             => PMA_CH3_EQ2_AC_VAR_SETTING,
            PMA_CH3_EQ2_AC_RES_SETTING                             => PMA_CH3_EQ2_AC_RES_SETTING,
            PMA_CH3_EQ2_DC_RESTOP_SETTING                          => PMA_CH3_EQ2_DC_RESTOP_SETTING,
            PMA_CH3_EQ1_DC_RESTOP_SETTING                          => PMA_CH3_EQ1_DC_RESTOP_SETTING,
            PMA_CH3_EQ1_AC_VAR_SETTING                             => PMA_CH3_EQ1_AC_VAR_SETTING,
            PMA_CH3_EQ2_CURRENT_SETTING                            => PMA_CH3_EQ2_CURRENT_SETTING,
            PMA_CH3_EQ1_AC_RES_SETTING                             => PMA_CH3_EQ1_AC_RES_SETTING,
            PMA_CH3_EQ1_CURRENT_SETTING                            => PMA_CH3_EQ1_CURRENT_SETTING,
            PMA_CH3_RPLUS                                          => PMA_CH3_RPLUS,
            PMA_CH3_RMINUS                                         => PMA_CH3_RMINUS,
            PMA_CH3_RVALSET                                        => PMA_CH3_RVALSET,
            PMA_CH3_RTERM                                          => PMA_CH3_RTERM,
            PMA_CH3_DCFB_EN                                        => PMA_CH3_DCFB_EN,
            PMA_CH3_DCCOUP                                         => PMA_CH3_DCCOUP,
            PMA_CH3_3G                                             => PMA_CH3_3G,
            CLK_ALIGNER_RX0                                        => CLK_ALIGNER_RX0,
            CLK_ALIGNER_RX1                                        => CLK_ALIGNER_RX1,
            CLK_ALIGNER_RX2                                        => CLK_ALIGNER_RX2,
            CLK_ALIGNER_RX3                                        => CLK_ALIGNER_RX3,
            CLK_ALIGNER_TX0                                        => CLK_ALIGNER_TX0,
            CLK_ALIGNER_TX1                                        => CLK_ALIGNER_TX1,
            CLK_ALIGNER_TX2                                        => CLK_ALIGNER_TX2,
            CLK_ALIGNER_TX3                                        => CLK_ALIGNER_TX3,
            DYN_DLY_EN_RX0                                         => DYN_DLY_EN_RX0,
            DYN_DLY_EN_RX1                                         => DYN_DLY_EN_RX1,
            DYN_DLY_EN_RX2                                         => DYN_DLY_EN_RX2,
            DYN_DLY_EN_RX3                                         => DYN_DLY_EN_RX3,
            DYN_DLY_EN_TX0                                         => DYN_DLY_EN_TX0,
            DYN_DLY_EN_TX1                                         => DYN_DLY_EN_TX1,
            DYN_DLY_EN_TX2                                         => DYN_DLY_EN_TX2,
            DYN_DLY_EN_TX3                                         => DYN_DLY_EN_TX3,
            DYN_DLY_SEL_RX0                                        => DYN_DLY_SEL_RX0,
            DYN_DLY_SEL_RX1                                        => DYN_DLY_SEL_RX1,
            DYN_DLY_SEL_RX2                                        => DYN_DLY_SEL_RX2,
            DYN_DLY_SEL_RX3                                        => DYN_DLY_SEL_RX3,
            DYN_DLY_SEL_TX0                                        => DYN_DLY_SEL_TX0,
            DYN_DLY_SEL_TX1                                        => DYN_DLY_SEL_TX1,
            DYN_DLY_SEL_TX2                                        => DYN_DLY_SEL_TX2,
            DYN_DLY_SEL_TX3                                        => DYN_DLY_SEL_TX3,
            CLK_ALIGNER_RSTN_RX                                    => CLK_ALIGNER_RSTN_RX,
            CLK_ALIGNER_RSTN_TX                                    => CLK_ALIGNER_RSTN_TX,
            PT_LX_BISTLB_EN                                        => PT_LX_BISTLB_EN,
            PT_LX_ELECIDLE_EN_MSB                                  => PT_LX_ELECIDLE_EN_MSB,
            PT_LX_EXTLB_EN                                         => PT_LX_EXTLB_EN,
            PT_LX_RXDCT_EN                                         => PT_LX_RXDCT_EN,
            PT_LX_TX_LFMODE                                        => PT_LX_TX_LFMODE,
            PT_RX_LANE_POWERUP                                     => PT_RX_LANE_POWERUP,
            PT_TX_LANE_POWERUP                                     => PT_TX_LANE_POWERUP,
            PT_PLL_RSTN                                            => PT_PLL_RSTN,
            PT_PLLPOWERDOWN                                        => PT_PLLPOWERDOWN,
            PT_QUAD_PWRUP                                          => PT_QUAD_PWRUP,
            GRSN_DIS                                               => GRSN_DIS,
            PT_HSST_RSTN                                           => PT_HSST_RSTN,
            PMA_CH0_FORCE_LC_PLL_LOOP_EN_H                         => PMA_CH0_FORCE_LC_PLL_LOOP_EN_H,
            PMA_CH0_FORCE_LC_PLL_LOOP_EN_L                         => PMA_CH0_FORCE_LC_PLL_LOOP_EN_L,
            PMA_CH1_FORCE_LC_PLL_LOOP_EN_H                         => PMA_CH1_FORCE_LC_PLL_LOOP_EN_H,
            PMA_CH1_FORCE_LC_PLL_LOOP_EN_L                         => PMA_CH1_FORCE_LC_PLL_LOOP_EN_L,
            PMA_CH2_FORCE_LC_PLL_LOOP_EN_H                         => PMA_CH2_FORCE_LC_PLL_LOOP_EN_H,
            PMA_CH2_FORCE_LC_PLL_LOOP_EN_L                         => PMA_CH2_FORCE_LC_PLL_LOOP_EN_L,
            PMA_CH3_FORCE_LC_PLL_LOOP_EN_H                         => PMA_CH3_FORCE_LC_PLL_LOOP_EN_H,
            PMA_CH3_FORCE_LC_PLL_LOOP_EN_L                         => PMA_CH3_FORCE_LC_PLL_LOOP_EN_L,
            PMA_QUAD_FORCE_LC_PLL_LOOP_EN_H                        => PMA_QUAD_FORCE_LC_PLL_LOOP_EN_H,
            PMA_QUAD_FORCE_LC_PLL_LOOP_EN_L                        => PMA_QUAD_FORCE_LC_PLL_LOOP_EN_L,
            PT_CFG_RSTN                                            => PT_CFG_RSTN  
        )
        port map
        (
             L0TXN                              =>    L0TXN,
             L0TXP                              =>    L0TXP,
             L0RXN                              =>    L0RXN,
             L0RXP                              =>    L0RXP,
             RDATA_0                            =>    RDATA_0,
             LX_ALOS_STA_0                      =>    LX_ALOS_STA_0,
             LX_CDR_ALIGN_0                     =>    LX_CDR_ALIGN_0,
             LX_LFO_0                           =>    LX_LFO_0,
             LX_OOB_STA_0                       =>    LX_OOB_STA_0,
             LX_RXDCT_DONE_0                    =>    LX_RXDCT_DONE_0,
             LX_RXDCT_OUT_0                     =>    LX_RXDCT_OUT_0,
             LX_LFD_FRCORE_0                    =>    LX_LFD_FRCORE_0,
             LX_RX_CKDIV_DYNSEL_0               =>    LX_RX_CKDIV_DYNSEL_0,
             PCS_RX_RSTN_0                      =>    PCS_RX_RSTN_0,
             PCS_TX_RSTN_0                      =>    PCS_TX_RSTN_0,
             RX0_CLK_FR_CORE                    =>    RX0_CLK_FR_CORE,
             RX_PLL_RSTN_0                      =>    RX_PLL_RSTN_0,
             RX_PMA_RSTN_0                      =>    RX_PMA_RSTN_0,
             RX_REF_CLK_0                       =>    RX_REF_CLK_0,
             TX0_CLK_FR_CORE                    =>    TX0_CLK_FR_CORE,
             TX_PMA_RSTN_0                      =>    TX_PMA_RSTN_0,
             LANE_SYNC_EN_0                     =>    LANE_SYNC_EN_0,
             LX_AMP_CTL_0                       =>    LX_AMP_CTL_0,
             CIM_CLK_ALIGNER_RX0                =>    CIM_CLK_ALIGNER_RX0,
             CIM_CLK_ALIGNER_TX0                =>    CIM_CLK_ALIGNER_TX0,
             LX_DEEMP_CTL_0                     =>    LX_DEEMP_CTL_0,
             LX_RX_CKDIV_0                      =>    LX_RX_CKDIV_0,
             TX_CKDIV_0                         =>    TX_CKDIV_0,
             TDATA_0                            =>    TDATA_0,
             LX_ELECIDLE_EN_0                   =>    LX_ELECIDLE_EN_0,
             L1TXN                              =>    L1TXN,
             L1TXP                              =>    L1TXP,
             L1RXN                              =>    L1RXN,
             L1RXP                              =>    L1RXP,
             RDATA_1                            =>    RDATA_1,
             LX_ALOS_STA_1                      =>    LX_ALOS_STA_1,
             LX_CDR_ALIGN_1                     =>    LX_CDR_ALIGN_1,
             LX_LFO_1                           =>    LX_LFO_1,
             LX_OOB_STA_1                       =>    LX_OOB_STA_1,
             LX_RXDCT_DONE_1                    =>    LX_RXDCT_DONE_1,
             LX_RXDCT_OUT_1                     =>    LX_RXDCT_OUT_1,
             LX_LFD_FRCORE_1                    =>    LX_LFD_FRCORE_1,
             LX_RX_CKDIV_DYNSEL_1               =>    LX_RX_CKDIV_DYNSEL_1,
             PCS_RX_RSTN_1                      =>    PCS_RX_RSTN_1,
             PCS_TX_RSTN_1                      =>    PCS_TX_RSTN_1,
             RX1_CLK_FR_CORE                    =>    RX1_CLK_FR_CORE,
             RX_PLL_RSTN_1                      =>    RX_PLL_RSTN_1,
             RX_PMA_RSTN_1                      =>    RX_PMA_RSTN_1,
             RX_REF_CLK_1                       =>    RX_REF_CLK_1,
             TX1_CLK_FR_CORE                    =>    TX1_CLK_FR_CORE,
             TX_PMA_RSTN_1                      =>    TX_PMA_RSTN_1,
             LANE_SYNC_EN_1                     =>    LANE_SYNC_EN_1,
             LX_AMP_CTL_1                       =>    LX_AMP_CTL_1,
             CIM_CLK_ALIGNER_RX1                =>    CIM_CLK_ALIGNER_RX1,
             CIM_CLK_ALIGNER_TX1                =>    CIM_CLK_ALIGNER_TX1,
             LX_DEEMP_CTL_1                     =>    LX_DEEMP_CTL_1,
             LX_RX_CKDIV_1                      =>    LX_RX_CKDIV_1,
             TX_CKDIV_1                         =>    TX_CKDIV_1,
             TDATA_1                            =>    TDATA_1,
             LX_ELECIDLE_EN_1                   =>    LX_ELECIDLE_EN_1,
             L2TXN                              =>    L2TXN,
             L2TXP                              =>    L2TXP,
             L2RXN                              =>    L2RXN,
             L2RXP                              =>    L2RXP,
             RDATA_2                            =>    RDATA_2,
             LX_ALOS_STA_2                      =>    LX_ALOS_STA_2,
             LX_CDR_ALIGN_2                     =>    LX_CDR_ALIGN_2,
             LX_LFO_2                           =>    LX_LFO_2,
             LX_OOB_STA_2                       =>    LX_OOB_STA_2,
             LX_RXDCT_DONE_2                    =>    LX_RXDCT_DONE_2,
             LX_RXDCT_OUT_2                     =>    LX_RXDCT_OUT_2,
             LX_LFD_FRCORE_2                    =>    LX_LFD_FRCORE_2,
             LX_RX_CKDIV_DYNSEL_2               =>    LX_RX_CKDIV_DYNSEL_2,
             PCS_RX_RSTN_2                      =>    PCS_RX_RSTN_2,
             PCS_TX_RSTN_2                      =>    PCS_TX_RSTN_2,
             RX2_CLK_FR_CORE                    =>    RX2_CLK_FR_CORE,
             RX_PLL_RSTN_2                      =>    RX_PLL_RSTN_2,
             RX_PMA_RSTN_2                      =>    RX_PMA_RSTN_2,
             RX_REF_CLK_2                       =>    RX_REF_CLK_2,
             TX2_CLK_FR_CORE                    =>    TX2_CLK_FR_CORE,
             TX_PMA_RSTN_2                      =>    TX_PMA_RSTN_2,
             LANE_SYNC_EN_2                     =>    LANE_SYNC_EN_2,
             LX_AMP_CTL_2                       =>    LX_AMP_CTL_2,
             CIM_CLK_ALIGNER_RX2                =>    CIM_CLK_ALIGNER_RX2,
             CIM_CLK_ALIGNER_TX2                =>    CIM_CLK_ALIGNER_TX2,
             LX_DEEMP_CTL_2                     =>    LX_DEEMP_CTL_2,
             LX_RX_CKDIV_2                      =>    LX_RX_CKDIV_2,
             TX_CKDIV_2                         =>    TX_CKDIV_2,
             TDATA_2                            =>    TDATA_2,
             LX_ELECIDLE_EN_2                   =>    LX_ELECIDLE_EN_2,
             L3TXN                              =>    L3TXN,
             L3TXP                              =>    L3TXP,
             L3RXN                              =>    L3RXN,
             L3RXP                              =>    L3RXP,
             RDATA_3                            =>    RDATA_3,
             LX_ALOS_STA_3                      =>    LX_ALOS_STA_3,
             LX_CDR_ALIGN_3                     =>    LX_CDR_ALIGN_3,
             LX_LFO_3                           =>    LX_LFO_3,
             LX_OOB_STA_3                       =>    LX_OOB_STA_3,
             LX_RXDCT_DONE_3                    =>    LX_RXDCT_DONE_3,
             LX_RXDCT_OUT_3                     =>    LX_RXDCT_OUT_3,
             LX_LFD_FRCORE_3                    =>    LX_LFD_FRCORE_3,
             LX_RX_CKDIV_DYNSEL_3               =>    LX_RX_CKDIV_DYNSEL_3,
             PCS_RX_RSTN_3                      =>    PCS_RX_RSTN_3,
             PCS_TX_RSTN_3                      =>    PCS_TX_RSTN_3,
             RX3_CLK_FR_CORE                    =>    RX3_CLK_FR_CORE,
             RX_PLL_RSTN_3                      =>    RX_PLL_RSTN_3,
             RX_PMA_RSTN_3                      =>    RX_PMA_RSTN_3,
             RX_REF_CLK_3                       =>    RX_REF_CLK_3,
             TX3_CLK_FR_CORE                    =>    TX3_CLK_FR_CORE,
             TX_PMA_RSTN_3                      =>    TX_PMA_RSTN_3,
             LANE_SYNC_EN_3                     =>    LANE_SYNC_EN_3,
             LX_AMP_CTL_3                       =>    LX_AMP_CTL_3,
             CIM_CLK_ALIGNER_RX3                =>    CIM_CLK_ALIGNER_RX3,
             CIM_CLK_ALIGNER_TX3                =>    CIM_CLK_ALIGNER_TX3,
             LX_DEEMP_CTL_3                     =>    LX_DEEMP_CTL_3,
             LX_RX_CKDIV_3                      =>    LX_RX_CKDIV_3,
             TX_CKDIV_3                         =>    TX_CKDIV_3,
             TDATA_3                            =>    TDATA_3,
             LX_ELECIDLE_EN_3                   =>    LX_ELECIDLE_EN_3,
             CLK2CORE_RX                        =>    CLK2CORE_RX,
             ALIGN_TX                           =>    ALIGN_TX,
             ALIGN_RX                           =>    ALIGN_RX,
             CLK2CORE_TX                        =>    CLK2CORE_TX,
             PCS_RX_MCB_STATUS                  =>    PCS_RX_MCB_STATUS,
             PCS_LSM_SYNCED                     =>    PCS_LSM_SYNCED,
             LX_ELECIDLE_EN_MSB                 =>    LX_ELECIDLE_EN_MSB,
             LX_BISTLB_EN                       =>    LX_BISTLB_EN,
             LX_TX_LFMODE                       =>    LX_TX_LFMODE,
             CIM_CLK_START_ALIGN_TX             =>    CIM_CLK_START_ALIGN_TX,
             CIM_CLK_START_ALIGN_RX             =>    CIM_CLK_START_ALIGN_RX,
             TX_LANE_POWERUP                    =>    TX_LANE_POWERUP,
             RX_LANE_POWERUP                    =>    RX_LANE_POWERUP,
             CIM_CLK_DYN_DLY_SEL_TX             =>    CIM_CLK_DYN_DLY_SEL_TX,
             LX_RXDCT_EN                        =>    LX_RXDCT_EN,
             CIM_CLK_DYN_DLY_SEL_RX             =>    CIM_CLK_DYN_DLY_SEL_RX,
             LX_EXTLB_EN                        =>    LX_EXTLB_EN,
             PCS_WORD_ALIGN_EN                  =>    PCS_WORD_ALIGN_EN,
             PCS_FAREND_LOOP                    =>    PCS_FAREND_LOOP,
             PCS_NEAREND_LOOP                   =>    PCS_NEAREND_LOOP,
             CEB_ADETECT_EN                     =>    CEB_ADETECT_EN,
             PCS_MCB_EXT_EN                     =>    PCS_MCB_EXT_EN,
             RX_POLARITY_INVERT                 =>    RX_POLARITY_INVERT,
             REFCKN                             =>    REFCKN,
             REFCKP                             =>    REFCKP,
             REXT                               =>    REXT,
             TEST_CLK                           =>    TEST_CLK,
             TEST_MODE                          =>    TEST_MODE,
             TEST_RSTN                          =>    TEST_RSTN,
             TEST_SE                            =>    TEST_SE,
             TEST_SI0                           =>    TEST_SI0,
             TEST_SI1                           =>    TEST_SI1,
             TEST_SI2                           =>    TEST_SI2,
             TEST_SI3                           =>    TEST_SI3,
             TEST_SI4                           =>    TEST_SI4,
             TEST_SI5                           =>    TEST_SI5,
             TEST_SI6                           =>    TEST_SI6,
             TEST_SI7                           =>    TEST_SI7,
             TEST_SO0                           =>    TEST_SO0,
             TEST_SO1                           =>    TEST_SO1,
             TEST_SO2                           =>    TEST_SO2,
             TEST_SO3                           =>    TEST_SO3,
             TEST_SO4                           =>    TEST_SO4,
             TEST_SO5                           =>    TEST_SO5,
             TEST_SO6                           =>    TEST_SO6,
             TEST_SO7                           =>    TEST_SO7,
             COMPRESSION_MODE                   =>    COMPRESSION_MODE,
             PLL_RESET                          =>    PLL_RESET,
             PLL_BYPASS                         =>    PLL_BYPASS,
             CFG_CLK                            =>    CFG_CLK,
             CFG_ENABLE                         =>    CFG_ENABLE,
             CFG_RSTN                           =>    CFG_RSTN,
             CFG_WRITE                          =>    CFG_WRITE,
             CFG_ADDR                           =>    CFG_ADDR,
             CFG_WDATA                          =>    CFG_WDATA,
             CFG_INT                            =>    CFG_INT,
             CFG_READY                          =>    CFG_READY,
             CFG_RDATA                          =>    CFG_RDATA,
             AFTER_CTC_RCLK_EN_CIN              =>    AFTER_CTC_RCLK_EN_CIN,
             AFTER_CTC_RCLK_EN_GB_CIN           =>    AFTER_CTC_RCLK_EN_GB_CIN,
             APATTERN_MATCH_LSB_CIN             =>    APATTERN_MATCH_LSB_CIN,
             APATTERN_MATCH_MSB_CIN             =>    APATTERN_MATCH_MSB_CIN,
             APATTERN_SEACHING_PROC_CIN         =>    APATTERN_SEACHING_PROC_CIN,
             APATTERN_STATUS_CIN                =>    APATTERN_STATUS_CIN,
             BRIDGE_RCLK_EN_CIN                 =>    BRIDGE_RCLK_EN_CIN,
             BRIDGE_TCLK_EN_CIN                 =>    BRIDGE_TCLK_EN_CIN,
             CB_RCLK_EN_CIN                     =>    CB_RCLK_EN_CIN,
             PCS_TCLK_EN_CIN                    =>    PCS_TCLK_EN_CIN,
             RFIFO_EN_AFTER_CTC_CIN             =>    RFIFO_EN_AFTER_CTC_CIN,
             RFIFO_EN_AFTER_CTC_GB_CIN          =>    RFIFO_EN_AFTER_CTC_GB_CIN,
             RFIFO_EN_BRIDGE_CIN                =>    RFIFO_EN_BRIDGE_CIN,
             RFIFO_EN_CB_CIN                    =>    RFIFO_EN_CB_CIN,
             SKIP_ADD_LSB_MCB_CIN               =>    SKIP_ADD_LSB_MCB_CIN,
             SKIP_ADD_MCB_CIN                   =>    SKIP_ADD_MCB_CIN,
             SKIP_DEL_LSB_MCB_CIN               =>    SKIP_DEL_LSB_MCB_CIN,
             SKIP_DEL_MCB_CIN                   =>    SKIP_DEL_MCB_CIN,
             CTC_RD_FIFO_CIN                    =>    CTC_RD_FIFO_CIN,
             TFIFO_EN_BRIDGE_CIN                =>    TFIFO_EN_BRIDGE_CIN,
             TFIFO_EN_PCS_TX_CIN                =>    TFIFO_EN_PCS_TX_CIN,
             AFTER_CTC_RCLK_EN_COUT             =>    AFTER_CTC_RCLK_EN_COUT,
             AFTER_CTC_RCLK_EN_GB_COUT          =>    AFTER_CTC_RCLK_EN_GB_COUT,
             APATTERN_MATCH_LSB_COUT            =>    APATTERN_MATCH_LSB_COUT,
             APATTERN_MATCH_MSB_COUT            =>    APATTERN_MATCH_MSB_COUT,
             APATTERN_SEACHING_PROC_COUT        =>    APATTERN_SEACHING_PROC_COUT,
             APATTERN_STATUS_COUT               =>    APATTERN_STATUS_COUT,
             BRIDGE_RCLK_EN_COUT                =>    BRIDGE_RCLK_EN_COUT,
             BRIDGE_TCLK_EN_COUT                =>    BRIDGE_TCLK_EN_COUT,
             CB_RCLK_EN_COUT                    =>    CB_RCLK_EN_COUT,
             PCS_TCLK_EN_COUT                   =>    PCS_TCLK_EN_COUT,
             RFIFO_EN_AFTER_CTC_COUT            =>    RFIFO_EN_AFTER_CTC_COUT,
             RFIFO_EN_AFTER_CTC_GB_COUT         =>    RFIFO_EN_AFTER_CTC_GB_COUT,
             RFIFO_EN_BRIDGE_COUT               =>    RFIFO_EN_BRIDGE_COUT,
             RFIFO_EN_CB_COUT                   =>    RFIFO_EN_CB_COUT,
             SKIP_ADD_LSB_MCB_COUT              =>    SKIP_ADD_LSB_MCB_COUT,
             SKIP_ADD_MCB_COUT                  =>    SKIP_ADD_MCB_COUT,
             SKIP_DEL_LCB_MCB_COUT              =>    SKIP_DEL_LCB_MCB_COUT,
             SKIP_DEL_MCB_COUT                  =>    SKIP_DEL_MCB_COUT,
             CTC_RD_FIFO_COUT                   =>    CTC_RD_FIFO_COUT,
             TFIFO_EN_BRIDGE_COUT               =>    TFIFO_EN_BRIDGE_COUT,
             TFIFO_EN_PCS_TX_COUT               =>    TFIFO_EN_PCS_TX_COUT,
             PLL_LOCK                           =>    PLL_LOCK,
             REFCK2CORE                         =>    REFCK2CORE,
             TSO_LS_OUT                         =>    TSO_LS_OUT,
             REFCK_2NMQ                         =>    REFCK_2NMQ,
             REFCK_2NPQ                         =>    REFCK_2NPQ,
             REFCK_FRNMQ                        =>    REFCK_FRNMQ,
             REFCK_FRNPQ                        =>    REFCK_FRNPQ,
             MCB_CLK_FRNQ                       =>    MCB_CLK_FRNQ,
             HSST_RSTN                          =>    HSST_RSTN,
             PLL_REF_CLK                        =>    PLL_REF_CLK,
             PLL_RSTN                           =>    PLL_RSTN,
             PLLPOWERDOWN                       =>    PLLPOWERDOWN,
             QUAD_PWRUP                         =>    QUAD_PWRUP,
             SYNC_TOGGLE                        =>    SYNC_TOGGLE,
             TXCKDIV_DYNSEL                     =>    TXCKDIV_DYNSEL
        );

}; // end of structure netlist of HSST

/*******************************************************************************

  Device    [HSST]

  Author    []

  Abstract  [The floorplan structure]

  Revision History:

********************************************************************************/
floorplan
structure fp_struct of HSST
{

}; // end of structure fp_struct of HSST

timing tnl of HSST
{
     operator V_HSST V_HSST
        parameter map
        (
            /*******pcs_ch0*****/
            PCS_CH0_BYPASS_WORD_ALIGN         =>   PCS_CH0_BYPASS_WORD_ALIGN,
            PCS_CH0_BYPASS_DENC               =>   PCS_CH0_BYPASS_DENC,
            PCS_CH0_BYPASS_BONDING            =>   PCS_CH0_BYPASS_BONDING,
            PCS_CH0_BYPASS_CTC                =>   PCS_CH0_BYPASS_CTC,
            PCS_CH0_BYPASS_GEAR               =>   PCS_CH0_BYPASS_GEAR,
            PCS_CH0_BYPASS_BRIDGE             =>   PCS_CH0_BYPASS_BRIDGE,
            PCS_CH0_DATA_MODE                 =>   PCS_CH0_DATA_MODE,
            PCS_CH0_RX_POLARITY_INV           =>   PCS_CH0_RX_POLARITY_INV,
            PCS_CH0_ALIGN_MODE                =>   PCS_CH0_ALIGN_MODE,
            PCS_CH0_SAMP_16B                  =>   PCS_CH0_SAMP_16B,
            PCS_CH0_COMMA_REG0                =>   PCS_CH0_COMMA_REG0,
            PCS_CH0_COMMA_MASK                =>   PCS_CH0_COMMA_MASK,
            PCS_CH0_CEB_MODE                  =>   PCS_CH0_CEB_MODE,
            PCS_CH0_CTC_MODE                  =>   PCS_CH0_CTC_MODE,
            PCS_CH0_A_REG                     =>   PCS_CH0_A_REG,
            PCS_CH0_GE_AUTO_EN                =>   PCS_CH0_GE_AUTO_EN,
            PCS_CH0_SKIP_REG0                 =>   PCS_CH0_SKIP_REG0,
            PCS_CH0_SKIP_REG1                 =>   PCS_CH0_SKIP_REG1,
            PCS_CH0_SKIP_REG2                 =>   PCS_CH0_SKIP_REG2,
            PCS_CH0_SKIP_REG3                 =>   PCS_CH0_SKIP_REG3,
            PCS_CH0_DEC_DUAL                  =>   PCS_CH0_DEC_DUAL,
            PCS_CH0_SPLIT                     =>   PCS_CH0_SPLIT,
            PCS_CH0_FIFOFLAG_CTC              =>   PCS_CH0_FIFOFLAG_CTC,
            PCS_CH0_COMMA_DET_MODE            =>   PCS_CH0_COMMA_DET_MODE,
            PCS_CH0_ERRDETECT_SILENCE         =>   PCS_CH0_ERRDETECT_SILENCE,
            PCS_CH0_PMA_RCLK_POLINV           =>   PCS_CH0_PMA_RCLK_POLINV,
            PCS_CH0_PCS_RCLK_SEL              =>   PCS_CH0_PCS_RCLK_SEL,
            PCS_CH0_MCB_RCLK_POLINV           =>   PCS_CH0_MCB_RCLK_POLINV,
            PCS_CH0_CB_RCLK_SEL               =>   PCS_CH0_CB_RCLK_SEL,
            PCS_CH0_AFTER_CTC_RCLK_SEL        =>   PCS_CH0_AFTER_CTC_RCLK_SEL,
            PCS_CH0_RCLK_POLINV               =>   PCS_CH0_RCLK_POLINV,
            PCS_CH0_BRIDGE_RCLK_SEL           =>   PCS_CH0_BRIDGE_RCLK_SEL,
            PCS_CH0_PCS_RCLK_EN               =>   PCS_CH0_PCS_RCLK_EN,
            PCS_CH0_CB_RCLK_EN                =>   PCS_CH0_CB_RCLK_EN,
            PCS_CH0_AFTER_CTC_RCLK_EN         =>   PCS_CH0_AFTER_CTC_RCLK_EN,
            PCS_CH0_AFTER_CTC_RCLK_EN_GB      =>   PCS_CH0_AFTER_CTC_RCLK_EN_GB,
            PCS_CH0_BRIDGE_RCLK_EN            =>   PCS_CH0_BRIDGE_RCLK_EN,
            PCS_CH0_PCS_RX_RSTN               =>   PCS_CH0_PCS_RX_RSTN,
            PCS_CH0_SLAVE                     =>   PCS_CH0_SLAVE,
            PCS_CH0_PCS_CB_RSTN               =>   PCS_CH0_PCS_CB_RSTN,
            PCS_CH0_TX_BYPASS_BRIDGE_UINT     =>   PCS_CH0_TX_BYPASS_BRIDGE_UINT,
            PCS_CH0_TX_BYPASS_GEAR            =>   PCS_CH0_TX_BYPASS_GEAR,
            PCS_CH0_TX_BYPASS_ENC             =>   PCS_CH0_TX_BYPASS_ENC,
            PCS_CH0_TX_BYPASS_BIT_SLIP        =>   PCS_CH0_TX_BYPASS_BIT_SLIP,
            PCS_CH0_TX_GEAR_SPLIT             =>   PCS_CH0_TX_GEAR_SPLIT,
            PCS_CH0_TX_DRIVE_REG_MODE         =>   PCS_CH0_TX_DRIVE_REG_MODE,
            PCS_CH0_TX_BIT_SLIP_CYCLES        =>   PCS_CH0_TX_BIT_SLIP_CYCLES,
            PCS_CH0_INT_TX_MASK_0             =>   PCS_CH0_INT_TX_MASK_0,
            PCS_CH0_INT_TX_MASK_1             =>   PCS_CH0_INT_TX_MASK_1,
            PCS_CH0_INT_TX_MASK_2             =>   PCS_CH0_INT_TX_MASK_2,
            PCS_CH0_INT_TX_CLR_0              =>   PCS_CH0_INT_TX_CLR_0,
            PCS_CH0_INT_TX_CLR_1              =>   PCS_CH0_INT_TX_CLR_1,
            PCS_CH0_INT_TX_CLR_2              =>   PCS_CH0_INT_TX_CLR_2,
            PCS_CH0_TX_PMA_TCLK_POLINV        =>   PCS_CH0_TX_PMA_TCLK_POLINV,
            PCS_CH0_TX_PCS_CLK_EN_SEL         =>   PCS_CH0_TX_PCS_CLK_EN_SEL,
            PCS_CH0_TX_BRIDGE_TCLK_SEL        =>   PCS_CH0_TX_BRIDGE_TCLK_SEL,
            PCS_CH0_TX_TCLK_POLINV            =>   PCS_CH0_TX_TCLK_POLINV,
            PCS_CH0_TX_PCS_TX_RSTN            =>   PCS_CH0_TX_PCS_TX_RSTN,
            PCS_CH0_TX_SLAVE                  =>   PCS_CH0_TX_SLAVE,
            PCS_CH0_TX_BRIDGE_CLK_EN_SEL      =>   PCS_CH0_TX_BRIDGE_CLK_EN_SEL,
            PCS_CH0_DATA_WIDTH_MODE           =>   PCS_CH0_DATA_WIDTH_MODE,
            PCS_CH0_TX_TCLK2FABRIC_SEL        =>   PCS_CH0_TX_TCLK2FABRIC_SEL,
            PCS_CH0_TX_OUTZZ                  =>   PCS_CH0_TX_OUTZZ,
            PCS_CH0_ENC_DUAL                  =>   PCS_CH0_ENC_DUAL,
            PCS_CH0_TX_BITSLIP_DATA_MODE      =>   PCS_CH0_TX_BITSLIP_DATA_MODE,
            PCS_CH0_COMMA_REG1                =>   PCS_CH0_COMMA_REG1,
            PCS_CH0_RAPID_IMAX                =>   PCS_CH0_RAPID_IMAX,
            PCS_CH0_RAPID_VMIN_1              =>   PCS_CH0_RAPID_VMIN_1,
            PCS_CH0_RAPID_VMIN_2              =>   PCS_CH0_RAPID_VMIN_2,
            PCS_CH0_RX_PRBS_MODE              =>   PCS_CH0_RX_PRBS_MODE,
            PCS_CH0_RX_ERRCNT_CLR             =>   PCS_CH0_RX_ERRCNT_CLR,
            PCS_CH0_TX_PRBS_MODE              =>   PCS_CH0_TX_PRBS_MODE,
            PCS_CH0_TX_INSERT_ER              =>   PCS_CH0_TX_INSERT_ER,
            PCS_CH0_ENABLE_PRBS_GEN           =>   PCS_CH0_ENABLE_PRBS_GEN,
            PCS_CH0_ERR_CNT                   =>   PCS_CH0_ERR_CNT,
            PCS_CH0_DEFAULT_RADDR             =>   PCS_CH0_DEFAULT_RADDR,
            PCS_CH0_MASTER_CHECK_OFFSET       =>   PCS_CH0_MASTER_CHECK_OFFSET,
            PCS_CH0_DELAY_SET                 =>   PCS_CH0_DELAY_SET,
            PCS_CH0_SEACH_OFFSET              =>   PCS_CH0_SEACH_OFFSET,
            PCS_CH0_CEB_RAPIDLS_MMAX          =>   PCS_CH0_CEB_RAPIDLS_MMAX,
            PCS_CH0_CTC_AFULL                 =>   PCS_CH0_CTC_AFULL,
            PCS_CH0_CTC_AEMPTY                =>   PCS_CH0_CTC_AEMPTY,
            PCS_CH0_FAR_LOOP                  =>   PCS_CH0_FAR_LOOP,
            PCS_CH0_NEAR_LOOP                 =>   PCS_CH0_NEAR_LOOP,
            PCS_CH0_INT_RX_MASK_0             =>   PCS_CH0_INT_RX_MASK_0,
            PCS_CH0_INT_RX_MASK_1             =>   PCS_CH0_INT_RX_MASK_1,
            PCS_CH0_INT_RX_MASK_2             =>   PCS_CH0_INT_RX_MASK_2,
            PCS_CH0_INT_RX_MASK_3             =>   PCS_CH0_INT_RX_MASK_3,
            PCS_CH0_INT_RX_MASK_4             =>   PCS_CH0_INT_RX_MASK_4,
            PCS_CH0_INT_RX_MASK_5             =>   PCS_CH0_INT_RX_MASK_5,
            PCS_CH0_INT_RX_MASK_6             =>   PCS_CH0_INT_RX_MASK_6,
            PCS_CH0_INT_RX_MASK_7             =>   PCS_CH0_INT_RX_MASK_7,
            PCS_CH0_INT_RX_CLR_0              =>   PCS_CH0_INT_RX_CLR_0,
            PCS_CH0_INT_RX_CLR_1              =>   PCS_CH0_INT_RX_CLR_1,
            PCS_CH0_INT_RX_CLR_2              =>   PCS_CH0_INT_RX_CLR_2,
            PCS_CH0_INT_RX_CLR_3              =>   PCS_CH0_INT_RX_CLR_3,
            PCS_CH0_INT_RX_CLR_4              =>   PCS_CH0_INT_RX_CLR_4,
            PCS_CH0_INT_RX_CLR_5              =>   PCS_CH0_INT_RX_CLR_5,
            PCS_CH0_INT_RX_CLR_6              =>   PCS_CH0_INT_RX_CLR_6,
            PCS_CH0_INT_RX_CLR_7              =>   PCS_CH0_INT_RX_CLR_7,
            
            /*******pcs_ch1*******/
            PCS_CH1_BYPASS_WORD_ALIGN         =>   PCS_CH1_BYPASS_WORD_ALIGN,
            PCS_CH1_BYPASS_DENC               =>   PCS_CH1_BYPASS_DENC,
            PCS_CH1_BYPASS_BONDING            =>   PCS_CH1_BYPASS_BONDING,
            PCS_CH1_BYPASS_CTC                =>   PCS_CH1_BYPASS_CTC,
            PCS_CH1_BYPASS_GEAR               =>   PCS_CH1_BYPASS_GEAR,
            PCS_CH1_BYPASS_BRIDGE             =>   PCS_CH1_BYPASS_BRIDGE,
            PCS_CH1_DATA_MODE                 =>   PCS_CH1_DATA_MODE,
            PCS_CH1_RX_POLARITY_INV           =>   PCS_CH1_RX_POLARITY_INV,
            PCS_CH1_ALIGN_MODE                =>   PCS_CH1_ALIGN_MODE,
            PCS_CH1_SAMP_16B                  =>   PCS_CH1_SAMP_16B,
            PCS_CH1_COMMA_REG0                =>   PCS_CH1_COMMA_REG0,
            PCS_CH1_COMMA_MASK                =>   PCS_CH1_COMMA_MASK,
            PCS_CH1_CEB_MODE                  =>   PCS_CH1_CEB_MODE,
            PCS_CH1_CTC_MODE                  =>   PCS_CH1_CTC_MODE,
            PCS_CH1_A_REG                     =>   PCS_CH1_A_REG,
            PCS_CH1_GE_AUTO_EN                =>   PCS_CH1_GE_AUTO_EN,
            PCS_CH1_SKIP_REG0                 =>   PCS_CH1_SKIP_REG0,
            PCS_CH1_SKIP_REG1                 =>   PCS_CH1_SKIP_REG1,
            PCS_CH1_SKIP_REG2                 =>   PCS_CH1_SKIP_REG2,
            PCS_CH1_SKIP_REG3                 =>   PCS_CH1_SKIP_REG3,
            PCS_CH1_DEC_DUAL                  =>   PCS_CH1_DEC_DUAL,
            PCS_CH1_SPLIT                     =>   PCS_CH1_SPLIT,
            PCS_CH1_FIFOFLAG_CTC              =>   PCS_CH1_FIFOFLAG_CTC,
            PCS_CH1_COMMA_DET_MODE            =>   PCS_CH1_COMMA_DET_MODE,
            PCS_CH1_ERRDETECT_SILENCE         =>   PCS_CH1_ERRDETECT_SILENCE,
            PCS_CH1_PMA_RCLK_POLINV           =>   PCS_CH1_PMA_RCLK_POLINV,
            PCS_CH1_PCS_RCLK_SEL              =>   PCS_CH1_PCS_RCLK_SEL,
            PCS_CH1_MCB_RCLK_POLINV           =>   PCS_CH1_MCB_RCLK_POLINV,
            PCS_CH1_CB_RCLK_SEL               =>   PCS_CH1_CB_RCLK_SEL,
            PCS_CH1_AFTER_CTC_RCLK_SEL        =>   PCS_CH1_AFTER_CTC_RCLK_SEL,
            PCS_CH1_RCLK_POLINV               =>   PCS_CH1_RCLK_POLINV,
            PCS_CH1_BRIDGE_RCLK_SEL           =>   PCS_CH1_BRIDGE_RCLK_SEL,
            PCS_CH1_PCS_RCLK_EN               =>   PCS_CH1_PCS_RCLK_EN,
            PCS_CH1_CB_RCLK_EN                =>   PCS_CH1_CB_RCLK_EN,
            PCS_CH1_AFTER_CTC_RCLK_EN         =>   PCS_CH1_AFTER_CTC_RCLK_EN,
            PCS_CH1_AFTER_CTC_RCLK_EN_GB      =>   PCS_CH1_AFTER_CTC_RCLK_EN_GB,
            PCS_CH1_BRIDGE_RCLK_EN            =>   PCS_CH1_BRIDGE_RCLK_EN,
            PCS_CH1_PCS_RX_RSTN               =>   PCS_CH1_PCS_RX_RSTN,
            PCS_CH1_SLAVE                     =>   PCS_CH1_SLAVE,
            PCS_CH1_PCS_CB_RSTN               =>   PCS_CH1_PCS_CB_RSTN,
            PCS_CH1_TX_BYPASS_BRIDGE_UINT     =>   PCS_CH1_TX_BYPASS_BRIDGE_UINT,
            PCS_CH1_TX_BYPASS_GEAR            =>   PCS_CH1_TX_BYPASS_GEAR,
            PCS_CH1_TX_BYPASS_ENC             =>   PCS_CH1_TX_BYPASS_ENC,
            PCS_CH1_TX_BYPASS_BIT_SLIP        =>   PCS_CH1_TX_BYPASS_BIT_SLIP,
            PCS_CH1_TX_GEAR_SPLIT             =>   PCS_CH1_TX_GEAR_SPLIT,
            PCS_CH1_TX_DRIVE_REG_MODE         =>   PCS_CH1_TX_DRIVE_REG_MODE,
            PCS_CH1_TX_BIT_SLIP_CYCLES        =>   PCS_CH1_TX_BIT_SLIP_CYCLES,
            PCS_CH1_INT_TX_MASK_0             =>   PCS_CH1_INT_TX_MASK_0,
            PCS_CH1_INT_TX_MASK_1             =>   PCS_CH1_INT_TX_MASK_1,
            PCS_CH1_INT_TX_MASK_2             =>   PCS_CH1_INT_TX_MASK_2,
            PCS_CH1_INT_TX_CLR_0              =>   PCS_CH1_INT_TX_CLR_0,
            PCS_CH1_INT_TX_CLR_1              =>   PCS_CH1_INT_TX_CLR_1,
            PCS_CH1_INT_TX_CLR_2              =>   PCS_CH1_INT_TX_CLR_2,
            PCS_CH1_TX_PMA_TCLK_POLINV        =>   PCS_CH1_TX_PMA_TCLK_POLINV,
            PCS_CH1_TX_PCS_CLK_EN_SEL         =>   PCS_CH1_TX_PCS_CLK_EN_SEL,
            PCS_CH1_TX_BRIDGE_TCLK_SEL        =>   PCS_CH1_TX_BRIDGE_TCLK_SEL,
            PCS_CH1_TX_TCLK_POLINV            =>   PCS_CH1_TX_TCLK_POLINV,
            PCS_CH1_TX_PCS_TX_RSTN            =>   PCS_CH1_TX_PCS_TX_RSTN,
            PCS_CH1_TX_SLAVE                  =>   PCS_CH1_TX_SLAVE,
            PCS_CH1_TX_BRIDGE_CLK_EN_SEL      =>   PCS_CH1_TX_BRIDGE_CLK_EN_SEL,
            PCS_CH1_DATA_WIDTH_MODE           =>   PCS_CH1_DATA_WIDTH_MODE,
            PCS_CH1_TX_TCLK2FABRIC_SEL        =>   PCS_CH1_TX_TCLK2FABRIC_SEL,
            PCS_CH1_TX_OUTZZ                  =>   PCS_CH1_TX_OUTZZ,
            PCS_CH1_ENC_DUAL                  =>   PCS_CH1_ENC_DUAL,
            PCS_CH1_TX_BITSLIP_DATA_MODE      =>   PCS_CH1_TX_BITSLIP_DATA_MODE,
            PCS_CH1_COMMA_REG1                =>   PCS_CH1_COMMA_REG1,
            PCS_CH1_RAPID_IMAX                =>   PCS_CH1_RAPID_IMAX,
            PCS_CH1_RAPID_VMIN_1              =>   PCS_CH1_RAPID_VMIN_1,
            PCS_CH1_RAPID_VMIN_2              =>   PCS_CH1_RAPID_VMIN_2,
            PCS_CH1_RX_PRBS_MODE              =>   PCS_CH1_RX_PRBS_MODE,
            PCS_CH1_RX_ERRCNT_CLR             =>   PCS_CH1_RX_ERRCNT_CLR,
            PCS_CH1_TX_PRBS_MODE              =>   PCS_CH1_TX_PRBS_MODE,
            PCS_CH1_TX_INSERT_ER              =>   PCS_CH1_TX_INSERT_ER,
            PCS_CH1_ENABLE_PRBS_GEN           =>   PCS_CH1_ENABLE_PRBS_GEN,
            PCS_CH1_ERR_CNT                   =>   PCS_CH1_ERR_CNT,
            PCS_CH1_DEFAULT_RADDR             =>   PCS_CH1_DEFAULT_RADDR,
            PCS_CH1_MASTER_CHECK_OFFSET       =>   PCS_CH1_MASTER_CHECK_OFFSET,
            PCS_CH1_DELAY_SET                 =>   PCS_CH1_DELAY_SET,
            PCS_CH1_SEACH_OFFSET              =>   PCS_CH1_SEACH_OFFSET,
            PCS_CH1_CEB_RAPIDLS_MMAX          =>   PCS_CH1_CEB_RAPIDLS_MMAX,
            PCS_CH1_CTC_AFULL                 =>   PCS_CH1_CTC_AFULL,
            PCS_CH1_CTC_AEMPTY                =>   PCS_CH1_CTC_AEMPTY,
            PCS_CH1_FAR_LOOP                  =>   PCS_CH1_FAR_LOOP,
            PCS_CH1_NEAR_LOOP                 =>   PCS_CH1_NEAR_LOOP,
            PCS_CH1_INT_RX_MASK_0             =>   PCS_CH1_INT_RX_MASK_0,
            PCS_CH1_INT_RX_MASK_1             =>   PCS_CH1_INT_RX_MASK_1,
            PCS_CH1_INT_RX_MASK_2             =>   PCS_CH1_INT_RX_MASK_2,
            PCS_CH1_INT_RX_MASK_3             =>   PCS_CH1_INT_RX_MASK_3,
            PCS_CH1_INT_RX_MASK_4             =>   PCS_CH1_INT_RX_MASK_4,
            PCS_CH1_INT_RX_MASK_5             =>   PCS_CH1_INT_RX_MASK_5,
            PCS_CH1_INT_RX_MASK_6             =>   PCS_CH1_INT_RX_MASK_6,
            PCS_CH1_INT_RX_MASK_7             =>   PCS_CH1_INT_RX_MASK_7,
            PCS_CH1_INT_RX_CLR_0              =>   PCS_CH1_INT_RX_CLR_0,
            PCS_CH1_INT_RX_CLR_1              =>   PCS_CH1_INT_RX_CLR_1,
            PCS_CH1_INT_RX_CLR_2              =>   PCS_CH1_INT_RX_CLR_2,
            PCS_CH1_INT_RX_CLR_3              =>   PCS_CH1_INT_RX_CLR_3,
            PCS_CH1_INT_RX_CLR_4              =>   PCS_CH1_INT_RX_CLR_4,
            PCS_CH1_INT_RX_CLR_5              =>   PCS_CH1_INT_RX_CLR_5,
            PCS_CH1_INT_RX_CLR_6              =>   PCS_CH1_INT_RX_CLR_6,
            PCS_CH1_INT_RX_CLR_7              =>   PCS_CH1_INT_RX_CLR_7,
            
            /******pcs_ch2*******/
            PCS_CH2_BYPASS_WORD_ALIGN         =>   PCS_CH2_BYPASS_WORD_ALIGN,
            PCS_CH2_BYPASS_DENC               =>   PCS_CH2_BYPASS_DENC,
            PCS_CH2_BYPASS_BONDING            =>   PCS_CH2_BYPASS_BONDING,
            PCS_CH2_BYPASS_CTC                =>   PCS_CH2_BYPASS_CTC,
            PCS_CH2_BYPASS_GEAR               =>   PCS_CH2_BYPASS_GEAR,
            PCS_CH2_BYPASS_BRIDGE             =>   PCS_CH2_BYPASS_BRIDGE,
            PCS_CH2_DATA_MODE                 =>   PCS_CH2_DATA_MODE,
            PCS_CH2_RX_POLARITY_INV           =>   PCS_CH2_RX_POLARITY_INV,
            PCS_CH2_ALIGN_MODE                =>   PCS_CH2_ALIGN_MODE,
            PCS_CH2_SAMP_16B                  =>   PCS_CH2_SAMP_16B,
            PCS_CH2_COMMA_REG0                =>   PCS_CH2_COMMA_REG0,
            PCS_CH2_COMMA_MASK                =>   PCS_CH2_COMMA_MASK,
            PCS_CH2_CEB_MODE                  =>   PCS_CH2_CEB_MODE,
            PCS_CH2_CTC_MODE                  =>   PCS_CH2_CTC_MODE,
            PCS_CH2_A_REG                     =>   PCS_CH2_A_REG,
            PCS_CH2_GE_AUTO_EN                =>   PCS_CH2_GE_AUTO_EN,
            PCS_CH2_SKIP_REG0                 =>   PCS_CH2_SKIP_REG0,
            PCS_CH2_SKIP_REG1                 =>   PCS_CH2_SKIP_REG1,
            PCS_CH2_SKIP_REG2                 =>   PCS_CH2_SKIP_REG2,
            PCS_CH2_SKIP_REG3                 =>   PCS_CH2_SKIP_REG3,
            PCS_CH2_DEC_DUAL                  =>   PCS_CH2_DEC_DUAL,
            PCS_CH2_SPLIT                     =>   PCS_CH2_SPLIT,
            PCS_CH2_FIFOFLAG_CTC              =>   PCS_CH2_FIFOFLAG_CTC,
            PCS_CH2_COMMA_DET_MODE            =>   PCS_CH2_COMMA_DET_MODE,
            PCS_CH2_ERRDETECT_SILENCE         =>   PCS_CH2_ERRDETECT_SILENCE,
            PCS_CH2_PMA_RCLK_POLINV           =>   PCS_CH2_PMA_RCLK_POLINV,
            PCS_CH2_PCS_RCLK_SEL              =>   PCS_CH2_PCS_RCLK_SEL,
            PCS_CH2_MCB_RCLK_POLINV           =>   PCS_CH2_MCB_RCLK_POLINV,
            PCS_CH2_CB_RCLK_SEL               =>   PCS_CH2_CB_RCLK_SEL,
            PCS_CH2_AFTER_CTC_RCLK_SEL        =>   PCS_CH2_AFTER_CTC_RCLK_SEL,
            PCS_CH2_RCLK_POLINV               =>   PCS_CH2_RCLK_POLINV,
            PCS_CH2_BRIDGE_RCLK_SEL           =>   PCS_CH2_BRIDGE_RCLK_SEL,
            PCS_CH2_PCS_RCLK_EN               =>   PCS_CH2_PCS_RCLK_EN,
            PCS_CH2_CB_RCLK_EN                =>   PCS_CH2_CB_RCLK_EN,
            PCS_CH2_AFTER_CTC_RCLK_EN         =>   PCS_CH2_AFTER_CTC_RCLK_EN,
            PCS_CH2_AFTER_CTC_RCLK_EN_GB      =>   PCS_CH2_AFTER_CTC_RCLK_EN_GB,
            PCS_CH2_BRIDGE_RCLK_EN            =>   PCS_CH2_BRIDGE_RCLK_EN,
            PCS_CH2_PCS_RX_RSTN               =>   PCS_CH2_PCS_RX_RSTN,
            PCS_CH2_SLAVE                     =>   PCS_CH2_SLAVE,
            PCS_CH2_PCS_CB_RSTN               =>   PCS_CH2_PCS_CB_RSTN,
            PCS_CH2_TX_BYPASS_BRIDGE_UINT     =>   PCS_CH2_TX_BYPASS_BRIDGE_UINT,
            PCS_CH2_TX_BYPASS_GEAR            =>   PCS_CH2_TX_BYPASS_GEAR,
            PCS_CH2_TX_BYPASS_ENC             =>   PCS_CH2_TX_BYPASS_ENC,
            PCS_CH2_TX_BYPASS_BIT_SLIP        =>   PCS_CH2_TX_BYPASS_BIT_SLIP,
            PCS_CH2_TX_GEAR_SPLIT             =>   PCS_CH2_TX_GEAR_SPLIT,
            PCS_CH2_TX_DRIVE_REG_MODE         =>   PCS_CH2_TX_DRIVE_REG_MODE,
            PCS_CH2_TX_BIT_SLIP_CYCLES        =>   PCS_CH2_TX_BIT_SLIP_CYCLES,
            PCS_CH2_INT_TX_MASK_0             =>   PCS_CH2_INT_TX_MASK_0,
            PCS_CH2_INT_TX_MASK_1             =>   PCS_CH2_INT_TX_MASK_1,
            PCS_CH2_INT_TX_MASK_2             =>   PCS_CH2_INT_TX_MASK_2,
            PCS_CH2_INT_TX_CLR_0              =>   PCS_CH2_INT_TX_CLR_0,
            PCS_CH2_INT_TX_CLR_1              =>   PCS_CH2_INT_TX_CLR_1,
            PCS_CH2_INT_TX_CLR_2              =>   PCS_CH2_INT_TX_CLR_2,
            PCS_CH2_TX_PMA_TCLK_POLINV        =>   PCS_CH2_TX_PMA_TCLK_POLINV,
            PCS_CH2_TX_PCS_CLK_EN_SEL         =>   PCS_CH2_TX_PCS_CLK_EN_SEL,
            PCS_CH2_TX_BRIDGE_TCLK_SEL        =>   PCS_CH2_TX_BRIDGE_TCLK_SEL,
            PCS_CH2_TX_TCLK_POLINV            =>   PCS_CH2_TX_TCLK_POLINV,
            PCS_CH2_TX_PCS_TX_RSTN            =>   PCS_CH2_TX_PCS_TX_RSTN,
            PCS_CH2_TX_SLAVE                  =>   PCS_CH2_TX_SLAVE,
            PCS_CH2_TX_BRIDGE_CLK_EN_SEL      =>   PCS_CH2_TX_BRIDGE_CLK_EN_SEL,
            PCS_CH2_DATA_WIDTH_MODE           =>   PCS_CH2_DATA_WIDTH_MODE,
            PCS_CH2_TX_TCLK2FABRIC_SEL        =>   PCS_CH2_TX_TCLK2FABRIC_SEL,
            PCS_CH2_TX_OUTZZ                  =>   PCS_CH2_TX_OUTZZ,
            PCS_CH2_ENC_DUAL                  =>   PCS_CH2_ENC_DUAL,
            PCS_CH2_TX_BITSLIP_DATA_MODE      =>   PCS_CH2_TX_BITSLIP_DATA_MODE,
            PCS_CH2_COMMA_REG1                =>   PCS_CH2_COMMA_REG1,
            PCS_CH2_RAPID_IMAX                =>   PCS_CH2_RAPID_IMAX,
            PCS_CH2_RAPID_VMIN_1              =>   PCS_CH2_RAPID_VMIN_1,
            PCS_CH2_RAPID_VMIN_2              =>   PCS_CH2_RAPID_VMIN_2,
            PCS_CH2_RX_PRBS_MODE              =>   PCS_CH2_RX_PRBS_MODE,
            PCS_CH2_RX_ERRCNT_CLR             =>   PCS_CH2_RX_ERRCNT_CLR,
            PCS_CH2_TX_PRBS_MODE              =>   PCS_CH2_TX_PRBS_MODE,
            PCS_CH2_TX_INSERT_ER              =>   PCS_CH2_TX_INSERT_ER,
            PCS_CH2_ENABLE_PRBS_GEN           =>   PCS_CH2_ENABLE_PRBS_GEN,
            PCS_CH2_ERR_CNT                   =>   PCS_CH2_ERR_CNT,
            PCS_CH2_DEFAULT_RADDR             =>   PCS_CH2_DEFAULT_RADDR,
            PCS_CH2_MASTER_CHECK_OFFSET       =>   PCS_CH2_MASTER_CHECK_OFFSET,
            PCS_CH2_DELAY_SET                 =>   PCS_CH2_DELAY_SET,
            PCS_CH2_SEACH_OFFSET              =>   PCS_CH2_SEACH_OFFSET,
            PCS_CH2_CEB_RAPIDLS_MMAX          =>   PCS_CH2_CEB_RAPIDLS_MMAX,
            PCS_CH2_CTC_AFULL                 =>   PCS_CH2_CTC_AFULL,
            PCS_CH2_CTC_AEMPTY                =>   PCS_CH2_CTC_AEMPTY,
            PCS_CH2_FAR_LOOP                  =>   PCS_CH2_FAR_LOOP,
            PCS_CH2_NEAR_LOOP                 =>   PCS_CH2_NEAR_LOOP,
            PCS_CH2_INT_RX_MASK_0             =>   PCS_CH2_INT_RX_MASK_0,
            PCS_CH2_INT_RX_MASK_1             =>   PCS_CH2_INT_RX_MASK_1,
            PCS_CH2_INT_RX_MASK_2             =>   PCS_CH2_INT_RX_MASK_2,
            PCS_CH2_INT_RX_MASK_3             =>   PCS_CH2_INT_RX_MASK_3,
            PCS_CH2_INT_RX_MASK_4             =>   PCS_CH2_INT_RX_MASK_4,
            PCS_CH2_INT_RX_MASK_5             =>   PCS_CH2_INT_RX_MASK_5,
            PCS_CH2_INT_RX_MASK_6             =>   PCS_CH2_INT_RX_MASK_6,
            PCS_CH2_INT_RX_MASK_7             =>   PCS_CH2_INT_RX_MASK_7,
            PCS_CH2_INT_RX_CLR_0              =>   PCS_CH2_INT_RX_CLR_0,
            PCS_CH2_INT_RX_CLR_1              =>   PCS_CH2_INT_RX_CLR_1,
            PCS_CH2_INT_RX_CLR_2              =>   PCS_CH2_INT_RX_CLR_2,
            PCS_CH2_INT_RX_CLR_3              =>   PCS_CH2_INT_RX_CLR_3,
            PCS_CH2_INT_RX_CLR_4              =>   PCS_CH2_INT_RX_CLR_4,
            PCS_CH2_INT_RX_CLR_5              =>   PCS_CH2_INT_RX_CLR_5,
            PCS_CH2_INT_RX_CLR_6              =>   PCS_CH2_INT_RX_CLR_6,
            PCS_CH2_INT_RX_CLR_7              =>   PCS_CH2_INT_RX_CLR_7,
            
            /*******pcs_ch3*******/
            PCS_CH3_BYPASS_WORD_ALIGN         =>   PCS_CH3_BYPASS_WORD_ALIGN,
            PCS_CH3_BYPASS_DENC               =>   PCS_CH3_BYPASS_DENC,
            PCS_CH3_BYPASS_BONDING            =>   PCS_CH3_BYPASS_BONDING,
            PCS_CH3_BYPASS_CTC                =>   PCS_CH3_BYPASS_CTC,
            PCS_CH3_BYPASS_GEAR               =>   PCS_CH3_BYPASS_GEAR,
            PCS_CH3_BYPASS_BRIDGE             =>   PCS_CH3_BYPASS_BRIDGE,
            PCS_CH3_DATA_MODE                 =>   PCS_CH3_DATA_MODE,
            PCS_CH3_RX_POLARITY_INV           =>   PCS_CH3_RX_POLARITY_INV,
            PCS_CH3_ALIGN_MODE                =>   PCS_CH3_ALIGN_MODE,
            PCS_CH3_SAMP_16B                  =>   PCS_CH3_SAMP_16B,
            PCS_CH3_COMMA_REG0                =>   PCS_CH3_COMMA_REG0,
            PCS_CH3_COMMA_MASK                =>   PCS_CH3_COMMA_MASK,
            PCS_CH3_CEB_MODE                  =>   PCS_CH3_CEB_MODE,
            PCS_CH3_CTC_MODE                  =>   PCS_CH3_CTC_MODE,
            PCS_CH3_A_REG                     =>   PCS_CH3_A_REG,
            PCS_CH3_GE_AUTO_EN                =>   PCS_CH3_GE_AUTO_EN,
            PCS_CH3_SKIP_REG0                 =>   PCS_CH3_SKIP_REG0,
            PCS_CH3_SKIP_REG1                 =>   PCS_CH3_SKIP_REG1,
            PCS_CH3_SKIP_REG2                 =>   PCS_CH3_SKIP_REG2,
            PCS_CH3_SKIP_REG3                 =>   PCS_CH3_SKIP_REG3,
            PCS_CH3_DEC_DUAL                  =>   PCS_CH3_DEC_DUAL,
            PCS_CH3_SPLIT                     =>   PCS_CH3_SPLIT,
            PCS_CH3_FIFOFLAG_CTC              =>   PCS_CH3_FIFOFLAG_CTC,
            PCS_CH3_COMMA_DET_MODE            =>   PCS_CH3_COMMA_DET_MODE,
            PCS_CH3_ERRDETECT_SILENCE         =>   PCS_CH3_ERRDETECT_SILENCE,
            PCS_CH3_PMA_RCLK_POLINV           =>   PCS_CH3_PMA_RCLK_POLINV,
            PCS_CH3_PCS_RCLK_SEL              =>   PCS_CH3_PCS_RCLK_SEL,
            PCS_CH3_MCB_RCLK_POLINV           =>   PCS_CH3_MCB_RCLK_POLINV,
            PCS_CH3_CB_RCLK_SEL               =>   PCS_CH3_CB_RCLK_SEL,
            PCS_CH3_AFTER_CTC_RCLK_SEL        =>   PCS_CH3_AFTER_CTC_RCLK_SEL,
            PCS_CH3_RCLK_POLINV               =>   PCS_CH3_RCLK_POLINV,
            PCS_CH3_BRIDGE_RCLK_SEL           =>   PCS_CH3_BRIDGE_RCLK_SEL,
            PCS_CH3_PCS_RCLK_EN               =>   PCS_CH3_PCS_RCLK_EN,
            PCS_CH3_CB_RCLK_EN                =>   PCS_CH3_CB_RCLK_EN,
            PCS_CH3_AFTER_CTC_RCLK_EN         =>   PCS_CH3_AFTER_CTC_RCLK_EN,
            PCS_CH3_AFTER_CTC_RCLK_EN_GB      =>   PCS_CH3_AFTER_CTC_RCLK_EN_GB,
            PCS_CH3_BRIDGE_RCLK_EN            =>   PCS_CH3_BRIDGE_RCLK_EN,
            PCS_CH3_PCS_RX_RSTN               =>   PCS_CH3_PCS_RX_RSTN,
            PCS_CH3_SLAVE                     =>   PCS_CH3_SLAVE,
            PCS_CH3_PCS_CB_RSTN               =>   PCS_CH3_PCS_CB_RSTN,
            PCS_CH3_TX_BYPASS_BRIDGE_UINT     =>   PCS_CH3_TX_BYPASS_BRIDGE_UINT,
            PCS_CH3_TX_BYPASS_GEAR            =>   PCS_CH3_TX_BYPASS_GEAR,
            PCS_CH3_TX_BYPASS_ENC             =>   PCS_CH3_TX_BYPASS_ENC,
            PCS_CH3_TX_BYPASS_BIT_SLIP        =>   PCS_CH3_TX_BYPASS_BIT_SLIP,
            PCS_CH3_TX_GEAR_SPLIT             =>   PCS_CH3_TX_GEAR_SPLIT,
            PCS_CH3_TX_DRIVE_REG_MODE         =>   PCS_CH3_TX_DRIVE_REG_MODE,
            PCS_CH3_TX_BIT_SLIP_CYCLES        =>   PCS_CH3_TX_BIT_SLIP_CYCLES,
            PCS_CH3_INT_TX_MASK_0             =>   PCS_CH3_INT_TX_MASK_0,
            PCS_CH3_INT_TX_MASK_1             =>   PCS_CH3_INT_TX_MASK_1,
            PCS_CH3_INT_TX_MASK_2             =>   PCS_CH3_INT_TX_MASK_2,
            PCS_CH3_INT_TX_CLR_0              =>   PCS_CH3_INT_TX_CLR_0,
            PCS_CH3_INT_TX_CLR_1              =>   PCS_CH3_INT_TX_CLR_1,
            PCS_CH3_INT_TX_CLR_2              =>   PCS_CH3_INT_TX_CLR_2,
            PCS_CH3_TX_PMA_TCLK_POLINV        =>   PCS_CH3_TX_PMA_TCLK_POLINV,
            PCS_CH3_TX_PCS_CLK_EN_SEL         =>   PCS_CH3_TX_PCS_CLK_EN_SEL,
            PCS_CH3_TX_BRIDGE_TCLK_SEL        =>   PCS_CH3_TX_BRIDGE_TCLK_SEL,
            PCS_CH3_TX_TCLK_POLINV            =>   PCS_CH3_TX_TCLK_POLINV,
            PCS_CH3_TX_PCS_TX_RSTN            =>   PCS_CH3_TX_PCS_TX_RSTN,
            PCS_CH3_TX_SLAVE                  =>   PCS_CH3_TX_SLAVE,
            PCS_CH3_TX_BRIDGE_CLK_EN_SEL      =>   PCS_CH3_TX_BRIDGE_CLK_EN_SEL,
            PCS_CH3_DATA_WIDTH_MODE           =>   PCS_CH3_DATA_WIDTH_MODE,
            PCS_CH3_TX_TCLK2FABRIC_SEL        =>   PCS_CH3_TX_TCLK2FABRIC_SEL,
            PCS_CH3_TX_OUTZZ                  =>   PCS_CH3_TX_OUTZZ,
            PCS_CH3_ENC_DUAL                  =>   PCS_CH3_ENC_DUAL,
            PCS_CH3_TX_BITSLIP_DATA_MODE      =>   PCS_CH3_TX_BITSLIP_DATA_MODE,
            PCS_CH3_COMMA_REG1                =>   PCS_CH3_COMMA_REG1,
            PCS_CH3_RAPID_IMAX                =>   PCS_CH3_RAPID_IMAX,
            PCS_CH3_RAPID_VMIN_1              =>   PCS_CH3_RAPID_VMIN_1,
            PCS_CH3_RAPID_VMIN_2              =>   PCS_CH3_RAPID_VMIN_2,
            PCS_CH3_RX_PRBS_MODE              =>   PCS_CH3_RX_PRBS_MODE,
            PCS_CH3_RX_ERRCNT_CLR             =>   PCS_CH3_RX_ERRCNT_CLR,
            PCS_CH3_TX_PRBS_MODE              =>   PCS_CH3_TX_PRBS_MODE,
            PCS_CH3_TX_INSERT_ER              =>   PCS_CH3_TX_INSERT_ER,
            PCS_CH3_ENABLE_PRBS_GEN           =>   PCS_CH3_ENABLE_PRBS_GEN,
            PCS_CH3_ERR_CNT                   =>   PCS_CH3_ERR_CNT,
            PCS_CH3_DEFAULT_RADDR             =>   PCS_CH3_DEFAULT_RADDR,
            PCS_CH3_MASTER_CHECK_OFFSET       =>   PCS_CH3_MASTER_CHECK_OFFSET,
            PCS_CH3_DELAY_SET                 =>   PCS_CH3_DELAY_SET,
            PCS_CH3_SEACH_OFFSET              =>   PCS_CH3_SEACH_OFFSET,
            PCS_CH3_CEB_RAPIDLS_MMAX          =>   PCS_CH3_CEB_RAPIDLS_MMAX,
            PCS_CH3_CTC_AFULL                 =>   PCS_CH3_CTC_AFULL,
            PCS_CH3_CTC_AEMPTY                =>   PCS_CH3_CTC_AEMPTY,
            PCS_CH3_FAR_LOOP                  =>   PCS_CH3_FAR_LOOP,
            PCS_CH3_NEAR_LOOP                 =>   PCS_CH3_NEAR_LOOP,
            PCS_CH3_INT_RX_MASK_0             =>   PCS_CH3_INT_RX_MASK_0,
            PCS_CH3_INT_RX_MASK_1             =>   PCS_CH3_INT_RX_MASK_1,
            PCS_CH3_INT_RX_MASK_2             =>   PCS_CH3_INT_RX_MASK_2,
            PCS_CH3_INT_RX_MASK_3             =>   PCS_CH3_INT_RX_MASK_3,
            PCS_CH3_INT_RX_MASK_4             =>   PCS_CH3_INT_RX_MASK_4,
            PCS_CH3_INT_RX_MASK_5             =>   PCS_CH3_INT_RX_MASK_5,
            PCS_CH3_INT_RX_MASK_6             =>   PCS_CH3_INT_RX_MASK_6,
            PCS_CH3_INT_RX_MASK_7             =>   PCS_CH3_INT_RX_MASK_7,
            PCS_CH3_INT_RX_CLR_0              =>   PCS_CH3_INT_RX_CLR_0,
            PCS_CH3_INT_RX_CLR_1              =>   PCS_CH3_INT_RX_CLR_1,
            PCS_CH3_INT_RX_CLR_2              =>   PCS_CH3_INT_RX_CLR_2,
            PCS_CH3_INT_RX_CLR_3              =>   PCS_CH3_INT_RX_CLR_3,
            PCS_CH3_INT_RX_CLR_4              =>   PCS_CH3_INT_RX_CLR_4,
            PCS_CH3_INT_RX_CLR_5              =>   PCS_CH3_INT_RX_CLR_5,
            PCS_CH3_INT_RX_CLR_6              =>   PCS_CH3_INT_RX_CLR_6,
            PCS_CH3_INT_RX_CLR_7              =>   PCS_CH3_INT_RX_CLR_7,
            
            /*****pma_ch0******/
            PMA_CH0_TXDATA_WIDTH                            =>   PMA_CH0_TXDATA_WIDTH,                                                                        
            PMA_CH0_TX_TESTPATTERN                          =>   PMA_CH0_TX_TESTPATTERN,                                                                        
            PMA_CH0_TESTPATTERN_O_ENABLE                    =>   PMA_CH0_TESTPATTERN_O_ENABLE,
            PMA_CH0_DISABLE_BSMODE_DRVAMP                   =>   PMA_CH0_DISABLE_BSMODE_DRVAMP,                              
            PMA_CH0_FORCE_BIST_ENABLE                       =>   PMA_CH0_FORCE_BIST_ENABLE,   
            PMA_CH0_FORCE_ELECTRICAL_IDLE                   =>   PMA_CH0_FORCE_ELECTRICAL_IDLE,   
            PMA_CH0_FORCE_RXDCT_ENABLE                      =>   PMA_CH0_FORCE_RXDCT_ENABLE,                                     
            PMA_CH0_FORCE_EXTLB_ENABLE                      =>   PMA_CH0_FORCE_EXTLB_ENABLE,                                     
            PMA_CH0_DISABLE_LANE_SYNC                       =>   PMA_CH0_DISABLE_LANE_SYNC,                                     
            PMA_CH0_DISABLE_ELECTRICAL_IDLE                 =>   PMA_CH0_DISABLE_ELECTRICAL_IDLE,                                  
            PMA_CH0_DISABLE_RXDCT_ENABLE                    =>   PMA_CH0_DISABLE_RXDCT_ENABLE,                                  
            PMA_CH0_DISABLE_EXTLB_ENABLE                    =>   PMA_CH0_DISABLE_EXTLB_ENABLE,                                  
            PMA_CH0_DISABLE_LOW_SPEED_PATH_ENABLE           =>   PMA_CH0_DISABLE_LOW_SPEED_PATH_ENABLE,   
            PMA_CH0_FORCE_LANE_ENABLE                       =>   PMA_CH0_FORCE_LANE_ENABLE,   
            PMA_CH0_FORCE_LANE_RESETB_DISABLE               =>   PMA_CH0_FORCE_LANE_RESETB_DISABLE,   
            PMA_CH0_RXDCT_LGBW_ENABLE                       =>   PMA_CH0_RXDCT_LGBW_ENABLE,   
            PMA_CH0_RXDCT_VTH                               =>   PMA_CH0_RXDCT_VTH,   
            PMA_CH0_DE_EMPHASIS_ADDITIONAL_CONTROL          =>   PMA_CH0_DE_EMPHASIS_ADDITIONAL_CONTROL,   
            PMA_CH0_DRV_RTERM_CONTROL                       =>   PMA_CH0_DRV_RTERM_CONTROL,   
            PMA_CH0_FDRV_AMP_CONTROL                        =>   PMA_CH0_FDRV_AMP_CONTROL,                                          
            PMA_CH0_PREPC_AMP_CONTROL                       =>   PMA_CH0_PREPC_AMP_CONTROL,                                          
            PMA_CH0_PREMC_AMP_CONTROL                       =>   PMA_CH0_PREMC_AMP_CONTROL,                                          
            PMA_CH0_SER_AMP_CONTROL                         =>   PMA_CH0_SER_AMP_CONTROL,   
            PMA_CH0_PFD_LOOP_RESISTOR_SETTING               =>   PMA_CH0_PFD_LOOP_RESISTOR_SETTING,                                  
            PMA_CH0_PD_LOOP_RESISTOR_SETTING                =>   PMA_CH0_PD_LOOP_RESISTOR_SETTING,                                  
            PMA_CH0_CDR_TEST_OUT_SELECT                     =>   PMA_CH0_CDR_TEST_OUT_SELECT,   
            PMA_CH0_PI_DIV1_BP                              =>   PMA_CH0_PI_DIV1_BP,   
            PMA_CH0_PI_TEST_FOR_CKI                         =>   PMA_CH0_PI_TEST_FOR_CKI,   
            PMA_CH0_PI_CURRENT_SETTING                      =>   PMA_CH0_PI_CURRENT_SETTING,   
            PMA_CH0_PI_FREQUENCY_SETTING                    =>   PMA_CH0_PI_FREQUENCY_SETTING,   
            PMA_CH0_TEST_OUT_SELECT_FOR_RCK                 =>   PMA_CH0_TEST_OUT_SELECT_FOR_RCK,                                 
            PMA_CH0_TEST_OUT_SELECT_SOURCE                  =>   PMA_CH0_TEST_OUT_SELECT_SOURCE,                                 
            PMA_CH0_TEST_DATA_OUT_SELECT_SOURCE             =>   PMA_CH0_TEST_DATA_OUT_SELECT_SOURCE,   
            PMA_CH0_TEST_CK_OUT_SELECT_SOURCE               =>   PMA_CH0_TEST_CK_OUT_SELECT_SOURCE,                                             
            PMA_CH0_ENABLE_SLIP1UI_MODULE                   =>   PMA_CH0_ENABLE_SLIP1UI_MODULE,                                             
            PMA_CH0_PN_SWAP_ENABLE                          =>   PMA_CH0_PN_SWAP_ENABLE,         
            PMA_CH0_SIPO_BIT_SETTING                        =>   PMA_CH0_SIPO_BIT_SETTING,         
            PMA_CH0_OOB_EN                                  =>   PMA_CH0_OOB_EN,         
            PMA_CH0_ALOS_EN                                 =>   PMA_CH0_ALOS_EN,  
            PMA_CH0_LFMODE                                  =>   PMA_CH0_LFMODE,   
            PMA_CH0_TSO_HS_SEL                              =>   PMA_CH0_TSO_HS_SEL,   
            PMA_CH0_LX_SELLC                                =>   PMA_CH0_LX_SELLC,   
            PMA_CH0_LX_RXPLL_DIVSEL45_FB                    =>   PMA_CH0_LX_RXPLL_DIVSEL45_FB,   
            PMA_CH0_LX_RXPLL_DIVSEL_FB                      =>   PMA_CH0_LX_RXPLL_DIVSEL_FB,   
            PMA_CH0_LX_RXPLL_DIVSEL_REF                     =>   PMA_CH0_LX_RXPLL_DIVSEL_REF,   
            PMA_CH0_PICODE                                  =>   PMA_CH0_PICODE,   
            PMA_CH0_RX_REFCK_SEL                            =>   PMA_CH0_RX_REFCK_SEL,  
            PMA_CH0_PFDLPEN_REGISTER_CONTROL_ENABLE         =>   PMA_CH0_PFDLPEN_REGISTER_CONTROL_ENABLE,  
            PMA_CH0_PFDLPEN_REGISTER_SETTING                =>   PMA_CH0_PFDLPEN_REGISTER_SETTING,   
            PMA_CH0_PDLPEN_REGISTER_CONTROL_ENABLE          =>   PMA_CH0_PDLPEN_REGISTER_CONTROL_ENABLE,   
            PMA_CH0_PDLPEN_REGISTER_SETTING                 =>   PMA_CH0_PDLPEN_REGISTER_SETTING,   
            PMA_CH0_DIV_CHANGE_ENABLE_DELAY_TIMER           =>   PMA_CH0_DIV_CHANGE_ENABLE_DELAY_TIMER,   
            PMA_CH0_DIV_CHANGE_ENABLE_SIGNAL_GATING         =>   PMA_CH0_DIV_CHANGE_ENABLE_SIGNAL_GATING,   
            PMA_CH0_CDR_ALIGN_REGISTER_SETTING_VALUE        =>   PMA_CH0_CDR_ALIGN_REGISTER_SETTING_VALUE,   
            PMA_CH0_FORCE_CDR_ALIGN_ENABLE                  =>   PMA_CH0_FORCE_CDR_ALIGN_ENABLE,   
            PMA_CH0_SELLC_REGISTER_SETTING_VALUE            =>   PMA_CH0_SELLC_REGISTER_SETTING_VALUE,   
            PMA_CH0_SELLC_CONTROL_BY_REGISTER               =>   PMA_CH0_SELLC_CONTROL_BY_REGISTER,  
            PMA_CH0_REG_PLLI_LDO_VREF_SETTING               =>   PMA_CH0_REG_PLLI_LDO_VREF_SETTING,    
            PMA_CH0_REG_PLLI_LDO_BYPASS_CURRENT             =>   PMA_CH0_REG_PLLI_LDO_BYPASS_CURRENT,   
            PMA_CH0_REG_PLL_HSTEST_ENABLE                   =>   PMA_CH0_REG_PLL_HSTEST_ENABLE,   
            PMA_CH0_REG_PLL_ISNK_CURRENT_CONTROL            =>   PMA_CH0_REG_PLL_ISNK_CURRENT_CONTROL,   
            PMA_CH0_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING    =>   PMA_CH0_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING,  
            PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING           =>   PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING,   
            PMA_CH0_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING    =>   PMA_CH0_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING,   
            PMA_CH0_REG_PLL_CP0_BIAS_CONTROL                =>   PMA_CH0_REG_PLL_CP0_BIAS_CONTROL,    
            PMA_CH0_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING     =>   PMA_CH0_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING,   
            PMA_CH0_REG_PLL_CP1_BIAS_CONTROL                =>   PMA_CH0_REG_PLL_CP1_BIAS_CONTROL,    
            PMA_CH0_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING     =>   PMA_CH0_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING,   
            PMA_CH0_REG_PLL_CP0_CURRENT_SETTING             =>   PMA_CH0_REG_PLL_CP0_CURRENT_SETTING,   
            PMA_CH0_REG_PLL_CP1_CURRENT_SETTING             =>   PMA_CH0_REG_PLL_CP1_CURRENT_SETTING,    
            PMA_CH0_REG_PLL_GM1_CURRENT_SETTING             =>   PMA_CH0_REG_PLL_GM1_CURRENT_SETTING,   
            PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING          =>   PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING,    
            PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW      =>   PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW,    
            PMA_CH0_REG_PLL_REG_CUR                         =>   PMA_CH0_REG_PLL_REG_CUR,    
            PMA_CH0_REG_PLL_LCCUR                           =>   PMA_CH0_REG_PLL_LCCUR,                                                                                                 
            PMA_CH0_REG_PLL_LCOBAS                          =>   PMA_CH0_REG_PLL_LCOBAS,                                                                                                 
            PMA_CH0_REG_PLL_FB_CK_TEST_OUT_ENABLE           =>   PMA_CH0_REG_PLL_FB_CK_TEST_OUT_ENABLE,    
            PMA_CH0_CDR_ALIGN_TIMER                         =>   PMA_CH0_CDR_ALIGN_TIMER,    
            PMA_CH0_CALIB_WAIT                              =>   PMA_CH0_CALIB_WAIT,    
            PMA_CH0_CALIB_TIMER                             =>   PMA_CH0_CALIB_TIMER,   
            PMA_CH0_TOT_RANGE                               =>   PMA_CH0_TOT_RANGE,                                                                
            PMA_CH0_SUB_RANGE                               =>   PMA_CH0_SUB_RANGE,                                                                
            PMA_CH0_OVLP                                    =>   PMA_CH0_OVLP,   
            PMA_CH0_BIST_WAIT                               =>   PMA_CH0_BIST_WAIT,                                             
            PMA_CH0_BIST_TIMER                              =>   PMA_CH0_BIST_TIMER,                                             
            PMA_CH0_BAND_LB                                 =>   PMA_CH0_BAND_LB,                               
            PMA_CH0_BAND_HB                                 =>   PMA_CH0_BAND_HB,
            PMA_CH0_FREQ_LOCK_ACCURACY                      =>   PMA_CH0_FREQ_LOCK_ACCURACY,    
            PMA_CH0_REG_SET_LC_BAND                         =>   PMA_CH0_REG_SET_LC_BAND,    
            PMA_CH0_REG_SET_VCODIV                          =>   PMA_CH0_REG_SET_VCODIV,    
            PMA_CH0_REGISTER_SET_VCODIV_BAND_ENABLE         =>   PMA_CH0_REGISTER_SET_VCODIV_BAND_ENABLE,   
            PMA_CH0_REG_SET_PLL_LOCK                        =>   PMA_CH0_REG_SET_PLL_LOCK,    
            PMA_CH0_REGISTER_SET_PLL_LOCK_ENABLE            =>   PMA_CH0_REGISTER_SET_PLL_LOCK_ENABLE,    
            PMA_CH0_REG_SET_VCO_HI                          =>   PMA_CH0_REG_SET_VCO_HI,                                     
            PMA_CH0_REG_SET_VCO_LO                          =>   PMA_CH0_REG_SET_VCO_LO,                                     
            PMA_CH0_REGISTER_SET_VCO_HI_VCO_LO_ENABLE       =>   PMA_CH0_REGISTER_SET_VCO_HI_VCO_LO_ENABLE,
            PMA_CH0_FORCE_LC_PLL_LOOP_EN_H                  =>   PMA_CH0_FORCE_LC_PLL_LOOP_EN_H,
            PMA_CH0_FORCE_LC_PLL_LOOP_EN_L                  =>   PMA_CH0_FORCE_LC_PLL_LOOP_EN_L,
            PMA_CH0_VCO_DIV_CALI_BYPASS                     =>   PMA_CH0_VCO_DIV_CALI_BYPASS,
            PMA_CH0_BIST_EN                                 =>   PMA_CH0_BIST_EN,
            PMA_CH0_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE    =>      PMA_CH0_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE,
            PMA_CH0_FREQ_DETECT_ENABLE_SOURCE               =>   PMA_CH0_FREQ_DETECT_ENABLE_SOURCE,   
            PMA_CH0_REG_SET_DIVSEL_REF                      =>   PMA_CH0_REG_SET_DIVSEL_REF,                                                                          
            PMA_CH0_REG_SET_DIVSEL45_FB                     =>   PMA_CH0_REG_SET_DIVSEL45_FB,                                                                          
            PMA_CH0_REG_SET_DIVSEL_FB                       =>   PMA_CH0_REG_SET_DIVSEL_FB,   
            PMA_CH0_PLL_LOOP_EN_SETTING                     =>   PMA_CH0_PLL_LOOP_EN_SETTING,   
            PMA_CH0_REGISTER_SET_TXPLL_DIV_ENABLE           =>   PMA_CH0_REGISTER_SET_TXPLL_DIV_ENABLE,                                                        
            PMA_CH0_FORCE_RXPLL_RESET                       =>   PMA_CH0_FORCE_RXPLL_RESET,                                                      
            PMA_CH0_FORCE_RXPLL_ON                          =>   PMA_CH0_FORCE_RXPLL_ON,   
            PMA_CH0_DPCK_DIV2                               =>   PMA_CH0_DPCK_DIV2,   
            PMA_CH0_LFO_SETTING                             =>   PMA_CH0_LFO_SETTING,   
            PMA_CH0_ALOS_COUNTER_CLOCK_SELECTION            =>   PMA_CH0_ALOS_COUNTER_CLOCK_SELECTION,   
            PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT              =>   PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT,  
            PMA_CH0_OOB_ENTER_DELAY_SETTING                 =>   PMA_CH0_OOB_ENTER_DELAY_SETTING,  
            PMA_CH0_ALOS_LOW_TO_HIGH_COUNTER_SETTING        =>   PMA_CH0_ALOS_LOW_TO_HIGH_COUNTER_SETTING,  
            PMA_CH0_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL     =>   PMA_CH0_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL,
            PMA_CH0_ALOS_EXIT_COUNTER_CLOCK_DIVIDER         =>   PMA_CH0_ALOS_EXIT_COUNTER_CLOCK_DIVIDER,                                                        
            PMA_CH0_OOB_OSCILATER_FREQUENCY_SETTING         =>   PMA_CH0_OOB_OSCILATER_FREQUENCY_SETTING,                                                        
            PMA_CH0_FORCE_OOB                               =>   PMA_CH0_FORCE_OOB,                                                     
            PMA_CH0_OOB_VTH_SET                             =>   PMA_CH0_OOB_VTH_SET,                                                     
            PMA_CH0_FORCE_DET_FORCE_ALOS_LOW                =>   PMA_CH0_FORCE_DET_FORCE_ALOS_LOW,
            PMA_CH0_ALOS_THRESHOLD_VOLTAGE                  =>   PMA_CH0_ALOS_THRESHOLD_VOLTAGE,
            PMA_CH0_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE       =>   PMA_CH0_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE,                                                            
            PMA_CH0_REGR_NEGATIVE_HYSTERESIS_SETTING        =>   PMA_CH0_REGR_NEGATIVE_HYSTERESIS_SETTING,                                                            
            PMA_CH0_REGL_POSITIVE_HYSTERESIS_SETTING        =>   PMA_CH0_REGL_POSITIVE_HYSTERESIS_SETTING,                                                            
            PMA_CH0_REG_EN                                  =>   PMA_CH0_REG_EN,
            PMA_CH0_REGREF_SEL                              =>   PMA_CH0_REGREF_SEL,
            PMA_CH0_DC496                                   =>   PMA_CH0_DC496,
            PMA_CH0_EQ2_AC_VAR_SETTING                      =>   PMA_CH0_EQ2_AC_VAR_SETTING,
            PMA_CH0_EQ2_AC_RES_SETTING                      =>   PMA_CH0_EQ2_AC_RES_SETTING,
            PMA_CH0_EQ2_DC_RESTOP_SETTING                   =>   PMA_CH0_EQ2_DC_RESTOP_SETTING,                                                                                    
            PMA_CH0_EQ1_DC_RESTOP_SETTING                   =>   PMA_CH0_EQ1_DC_RESTOP_SETTING,                                                                                    
            PMA_CH0_EQ1_AC_VAR_SETTING                      =>   PMA_CH0_EQ1_AC_VAR_SETTING,                                                                                                  
            PMA_CH0_EQ2_CURRENT_SETTING                     =>   PMA_CH0_EQ2_CURRENT_SETTING,                                                                                                 
            PMA_CH0_EQ1_AC_RES_SETTING                      =>   PMA_CH0_EQ1_AC_RES_SETTING,                                                             
            PMA_CH0_EQ1_CURRENT_SETTING                     =>   PMA_CH0_EQ1_CURRENT_SETTING,                                                             
            PMA_CH0_RPLUS                                   =>   PMA_CH0_RPLUS,                                             
            PMA_CH0_RMINUS                                  =>   PMA_CH0_RMINUS,                                             
            PMA_CH0_RVALSET                                 =>   PMA_CH0_RVALSET,                                                      
            PMA_CH0_RTERM                                   =>   PMA_CH0_RTERM,                                                      
            PMA_CH0_DCFB_EN                                 =>   PMA_CH0_DCFB_EN,                                      
            PMA_CH0_DCCOUP                                  =>   PMA_CH0_DCCOUP,                                      
            PMA_CH0_3G                                      =>   PMA_CH0_3G,
            
            /******pma_ch1*****/
            PMA_CH1_TXDATA_WIDTH                            =>   PMA_CH1_TXDATA_WIDTH,                                                                        
            PMA_CH1_TX_TESTPATTERN                          =>   PMA_CH1_TX_TESTPATTERN,                                                                        
            PMA_CH1_TESTPATTERN_O_ENABLE                    =>   PMA_CH1_TESTPATTERN_O_ENABLE,
            PMA_CH1_DISABLE_BSMODE_DRVAMP                   =>   PMA_CH1_DISABLE_BSMODE_DRVAMP,                              
            PMA_CH1_FORCE_BIST_ENABLE                       =>   PMA_CH1_FORCE_BIST_ENABLE,   
            PMA_CH1_FORCE_ELECTRICAL_IDLE                   =>   PMA_CH1_FORCE_ELECTRICAL_IDLE,   
            PMA_CH1_FORCE_RXDCT_ENABLE                      =>   PMA_CH1_FORCE_RXDCT_ENABLE,                                     
            PMA_CH1_FORCE_EXTLB_ENABLE                      =>   PMA_CH1_FORCE_EXTLB_ENABLE,                                     
            PMA_CH1_DISABLE_LANE_SYNC                       =>   PMA_CH1_DISABLE_LANE_SYNC,                                     
            PMA_CH1_DISABLE_ELECTRICAL_IDLE                 =>   PMA_CH1_DISABLE_ELECTRICAL_IDLE,                                  
            PMA_CH1_DISABLE_RXDCT_ENABLE                    =>   PMA_CH1_DISABLE_RXDCT_ENABLE,                                  
            PMA_CH1_DISABLE_EXTLB_ENABLE                    =>   PMA_CH1_DISABLE_EXTLB_ENABLE,                                  
            PMA_CH1_DISABLE_LOW_SPEED_PATH_ENABLE           =>   PMA_CH1_DISABLE_LOW_SPEED_PATH_ENABLE,   
            PMA_CH1_FORCE_LANE_ENABLE                       =>   PMA_CH1_FORCE_LANE_ENABLE,   
            PMA_CH1_FORCE_LANE_RESETB_DISABLE               =>   PMA_CH1_FORCE_LANE_RESETB_DISABLE,   
            PMA_CH1_RXDCT_LGBW_ENABLE                       =>   PMA_CH1_RXDCT_LGBW_ENABLE,   
            PMA_CH1_RXDCT_VTH                               =>   PMA_CH1_RXDCT_VTH,   
            PMA_CH1_DE_EMPHASIS_ADDITIONAL_CONTROL          =>   PMA_CH1_DE_EMPHASIS_ADDITIONAL_CONTROL,   
            PMA_CH1_DRV_RTERM_CONTROL                       =>   PMA_CH1_DRV_RTERM_CONTROL,   
            PMA_CH1_FDRV_AMP_CONTROL                        =>   PMA_CH1_FDRV_AMP_CONTROL,                                          
            PMA_CH1_PREPC_AMP_CONTROL                       =>   PMA_CH1_PREPC_AMP_CONTROL,                                          
            PMA_CH1_PREMC_AMP_CONTROL                       =>   PMA_CH1_PREMC_AMP_CONTROL,                                          
            PMA_CH1_SER_AMP_CONTROL                         =>   PMA_CH1_SER_AMP_CONTROL,   
            PMA_CH1_PFD_LOOP_RESISTOR_SETTING               =>   PMA_CH1_PFD_LOOP_RESISTOR_SETTING,                                  
            PMA_CH1_PD_LOOP_RESISTOR_SETTING                =>   PMA_CH1_PD_LOOP_RESISTOR_SETTING,                                  
            PMA_CH1_CDR_TEST_OUT_SELECT                     =>   PMA_CH1_CDR_TEST_OUT_SELECT,   
            PMA_CH1_PI_DIV1_BP                              =>   PMA_CH1_PI_DIV1_BP,   
            PMA_CH1_PI_TEST_FOR_CKI                         =>   PMA_CH1_PI_TEST_FOR_CKI,   
            PMA_CH1_PI_CURRENT_SETTING                      =>   PMA_CH1_PI_CURRENT_SETTING,   
            PMA_CH1_PI_FREQUENCY_SETTING                    =>   PMA_CH1_PI_FREQUENCY_SETTING,   
            PMA_CH1_TEST_OUT_SELECT_FOR_RCK                 =>   PMA_CH1_TEST_OUT_SELECT_FOR_RCK,                                 
            PMA_CH1_TEST_OUT_SELECT_SOURCE                  =>   PMA_CH1_TEST_OUT_SELECT_SOURCE,                                 
            PMA_CH1_TEST_DATA_OUT_SELECT_SOURCE             =>   PMA_CH1_TEST_DATA_OUT_SELECT_SOURCE,   
            PMA_CH1_TEST_CK_OUT_SELECT_SOURCE               =>   PMA_CH1_TEST_CK_OUT_SELECT_SOURCE,                                             
            PMA_CH1_ENABLE_SLIP1UI_MODULE                   =>   PMA_CH1_ENABLE_SLIP1UI_MODULE,                                             
            PMA_CH1_PN_SWAP_ENABLE                          =>   PMA_CH1_PN_SWAP_ENABLE,         
            PMA_CH1_SIPO_BIT_SETTING                        =>   PMA_CH1_SIPO_BIT_SETTING,         
            PMA_CH1_OOB_EN                                  =>   PMA_CH1_OOB_EN,         
            PMA_CH1_ALOS_EN                                 =>   PMA_CH1_ALOS_EN,  
            PMA_CH1_LFMODE                                  =>   PMA_CH1_LFMODE,   
            PMA_CH1_TSO_HS_SEL                              =>   PMA_CH1_TSO_HS_SEL,   
            PMA_CH1_LX_SELLC                                =>   PMA_CH1_LX_SELLC,   
            PMA_CH1_LX_RXPLL_DIVSEL45_FB                    =>   PMA_CH1_LX_RXPLL_DIVSEL45_FB,   
            PMA_CH1_LX_RXPLL_DIVSEL_FB                      =>   PMA_CH1_LX_RXPLL_DIVSEL_FB,   
            PMA_CH1_LX_RXPLL_DIVSEL_REF                     =>   PMA_CH1_LX_RXPLL_DIVSEL_REF,   
            PMA_CH1_PICODE                                  =>   PMA_CH1_PICODE,   
            PMA_CH1_RX_REFCK_SEL                            =>   PMA_CH1_RX_REFCK_SEL,  
            PMA_CH1_PFDLPEN_REGISTER_CONTROL_ENABLE         =>   PMA_CH1_PFDLPEN_REGISTER_CONTROL_ENABLE,  
            PMA_CH1_PFDLPEN_REGISTER_SETTING                =>   PMA_CH1_PFDLPEN_REGISTER_SETTING,   
            PMA_CH1_PDLPEN_REGISTER_CONTROL_ENABLE          =>   PMA_CH1_PDLPEN_REGISTER_CONTROL_ENABLE,   
            PMA_CH1_PDLPEN_REGISTER_SETTING                 =>   PMA_CH1_PDLPEN_REGISTER_SETTING,   
            PMA_CH1_DIV_CHANGE_ENABLE_DELAY_TIMER           =>   PMA_CH1_DIV_CHANGE_ENABLE_DELAY_TIMER,   
            PMA_CH1_DIV_CHANGE_ENABLE_SIGNAL_GATING         =>   PMA_CH1_DIV_CHANGE_ENABLE_SIGNAL_GATING,   
            PMA_CH1_CDR_ALIGN_REGISTER_SETTING_VALUE        =>   PMA_CH1_CDR_ALIGN_REGISTER_SETTING_VALUE,   
            PMA_CH1_FORCE_CDR_ALIGN_ENABLE                  =>   PMA_CH1_FORCE_CDR_ALIGN_ENABLE,   
            PMA_CH1_SELLC_REGISTER_SETTING_VALUE            =>   PMA_CH1_SELLC_REGISTER_SETTING_VALUE,   
            PMA_CH1_SELLC_CONTROL_BY_REGISTER               =>   PMA_CH1_SELLC_CONTROL_BY_REGISTER,  
            PMA_CH1_REG_PLLI_LDO_VREF_SETTING               =>   PMA_CH1_REG_PLLI_LDO_VREF_SETTING,    
            PMA_CH1_REG_PLLI_LDO_BYPASS_CURRENT             =>   PMA_CH1_REG_PLLI_LDO_BYPASS_CURRENT,   
            PMA_CH1_REG_PLL_HSTEST_ENABLE                   =>   PMA_CH1_REG_PLL_HSTEST_ENABLE,   
            PMA_CH1_REG_PLL_ISNK_CURRENT_CONTROL            =>   PMA_CH1_REG_PLL_ISNK_CURRENT_CONTROL,   
            PMA_CH1_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING    =>   PMA_CH1_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING,  
            PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING           =>   PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING,   
            PMA_CH1_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING    =>   PMA_CH1_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING,   
            PMA_CH1_REG_PLL_CP0_BIAS_CONTROL                =>   PMA_CH1_REG_PLL_CP0_BIAS_CONTROL,    
            PMA_CH1_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING     =>   PMA_CH1_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING,   
            PMA_CH1_REG_PLL_CP1_BIAS_CONTROL                =>   PMA_CH1_REG_PLL_CP1_BIAS_CONTROL,    
            PMA_CH1_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING     =>   PMA_CH1_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING,   
            PMA_CH1_REG_PLL_CP0_CURRENT_SETTING             =>   PMA_CH1_REG_PLL_CP0_CURRENT_SETTING,   
            PMA_CH1_REG_PLL_CP1_CURRENT_SETTING             =>   PMA_CH1_REG_PLL_CP1_CURRENT_SETTING,    
            PMA_CH1_REG_PLL_GM1_CURRENT_SETTING             =>   PMA_CH1_REG_PLL_GM1_CURRENT_SETTING,   
            PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING          =>   PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING,    
            PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW      =>   PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW,    
            PMA_CH1_REG_PLL_REG_CUR                         =>   PMA_CH1_REG_PLL_REG_CUR,    
            PMA_CH1_REG_PLL_LCCUR                           =>   PMA_CH1_REG_PLL_LCCUR,                                                                                                 
            PMA_CH1_REG_PLL_LCOBAS                          =>   PMA_CH1_REG_PLL_LCOBAS,                                                                                                 
            PMA_CH1_REG_PLL_FB_CK_TEST_OUT_ENABLE           =>   PMA_CH1_REG_PLL_FB_CK_TEST_OUT_ENABLE,    
            PMA_CH1_CDR_ALIGN_TIMER                         =>   PMA_CH1_CDR_ALIGN_TIMER,    
            PMA_CH1_CALIB_WAIT                              =>   PMA_CH1_CALIB_WAIT,    
            PMA_CH1_CALIB_TIMER                             =>   PMA_CH1_CALIB_TIMER,   
            PMA_CH1_TOT_RANGE                               =>   PMA_CH1_TOT_RANGE,                                                                
            PMA_CH1_SUB_RANGE                               =>   PMA_CH1_SUB_RANGE,                                                                
            PMA_CH1_OVLP                                    =>   PMA_CH1_OVLP,   
            PMA_CH1_BIST_WAIT                               =>   PMA_CH1_BIST_WAIT,                                             
            PMA_CH1_BIST_TIMER                              =>   PMA_CH1_BIST_TIMER,                                             
            PMA_CH1_BAND_LB                                 =>   PMA_CH1_BAND_LB,                               
            PMA_CH1_BAND_HB                                 =>   PMA_CH1_BAND_HB,
            PMA_CH1_FREQ_LOCK_ACCURACY                      =>   PMA_CH1_FREQ_LOCK_ACCURACY,    
            PMA_CH1_REG_SET_LC_BAND                         =>   PMA_CH1_REG_SET_LC_BAND,    
            PMA_CH1_REG_SET_VCODIV                          =>   PMA_CH1_REG_SET_VCODIV,    
            PMA_CH1_REGISTER_SET_VCODIV_BAND_ENABLE         =>   PMA_CH1_REGISTER_SET_VCODIV_BAND_ENABLE,   
            PMA_CH1_REG_SET_PLL_LOCK                        =>   PMA_CH1_REG_SET_PLL_LOCK,    
            PMA_CH1_REGISTER_SET_PLL_LOCK_ENABLE            =>   PMA_CH1_REGISTER_SET_PLL_LOCK_ENABLE,    
            PMA_CH1_REG_SET_VCO_HI                          =>   PMA_CH1_REG_SET_VCO_HI,                                     
            PMA_CH1_REG_SET_VCO_LO                          =>   PMA_CH1_REG_SET_VCO_LO,                                     
            PMA_CH1_REGISTER_SET_VCO_HI_VCO_LO_ENABLE       =>   PMA_CH1_REGISTER_SET_VCO_HI_VCO_LO_ENABLE,
            PMA_CH1_FORCE_LC_PLL_LOOP_EN_H                  =>   PMA_CH1_FORCE_LC_PLL_LOOP_EN_H,
            PMA_CH1_FORCE_LC_PLL_LOOP_EN_L                  =>   PMA_CH1_FORCE_LC_PLL_LOOP_EN_L,
            PMA_CH1_VCO_DIV_CALI_BYPASS                     =>   PMA_CH1_VCO_DIV_CALI_BYPASS,
            PMA_CH1_BIST_EN                                 =>   PMA_CH1_BIST_EN,
            PMA_CH1_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE    =>      PMA_CH1_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE,
            PMA_CH1_FREQ_DETECT_ENABLE_SOURCE               =>   PMA_CH1_FREQ_DETECT_ENABLE_SOURCE,   
            PMA_CH1_REG_SET_DIVSEL_REF                      =>   PMA_CH1_REG_SET_DIVSEL_REF,                                                                          
            PMA_CH1_REG_SET_DIVSEL45_FB                     =>   PMA_CH1_REG_SET_DIVSEL45_FB,                                                                          
            PMA_CH1_REG_SET_DIVSEL_FB                       =>   PMA_CH1_REG_SET_DIVSEL_FB,   
            PMA_CH1_PLL_LOOP_EN_SETTING                     =>   PMA_CH1_PLL_LOOP_EN_SETTING,   
            PMA_CH1_REGISTER_SET_TXPLL_DIV_ENABLE           =>   PMA_CH1_REGISTER_SET_TXPLL_DIV_ENABLE,                                                        
            PMA_CH1_FORCE_RXPLL_RESET                       =>   PMA_CH1_FORCE_RXPLL_RESET,                                                      
            PMA_CH1_FORCE_RXPLL_ON                          =>   PMA_CH1_FORCE_RXPLL_ON,   
            PMA_CH1_DPCK_DIV2                               =>   PMA_CH1_DPCK_DIV2,   
            PMA_CH1_LFO_SETTING                             =>   PMA_CH1_LFO_SETTING,   
            PMA_CH1_ALOS_COUNTER_CLOCK_SELECTION            =>   PMA_CH1_ALOS_COUNTER_CLOCK_SELECTION,   
            PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT              =>   PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT,  
            PMA_CH1_OOB_ENTER_DELAY_SETTING                 =>   PMA_CH1_OOB_ENTER_DELAY_SETTING,  
            PMA_CH1_ALOS_LOW_TO_HIGH_COUNTER_SETTING        =>   PMA_CH1_ALOS_LOW_TO_HIGH_COUNTER_SETTING,  
            PMA_CH1_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL     =>   PMA_CH1_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL,
            PMA_CH1_ALOS_EXIT_COUNTER_CLOCK_DIVIDER         =>   PMA_CH1_ALOS_EXIT_COUNTER_CLOCK_DIVIDER,                                                        
            PMA_CH1_OOB_OSCILATER_FREQUENCY_SETTING         =>   PMA_CH1_OOB_OSCILATER_FREQUENCY_SETTING,                                                        
            PMA_CH1_FORCE_OOB                               =>   PMA_CH1_FORCE_OOB,                                                     
            PMA_CH1_OOB_VTH_SET                             =>   PMA_CH1_OOB_VTH_SET,                                                     
            PMA_CH1_FORCE_DET_FORCE_ALOS_LOW                =>   PMA_CH1_FORCE_DET_FORCE_ALOS_LOW,
            PMA_CH1_ALOS_THRESHOLD_VOLTAGE                  =>   PMA_CH1_ALOS_THRESHOLD_VOLTAGE,
            PMA_CH1_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE       =>   PMA_CH1_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE,                                                            
            PMA_CH1_REGR_NEGATIVE_HYSTERESIS_SETTING        =>   PMA_CH1_REGR_NEGATIVE_HYSTERESIS_SETTING,                                                            
            PMA_CH1_REGL_POSITIVE_HYSTERESIS_SETTING        =>   PMA_CH1_REGL_POSITIVE_HYSTERESIS_SETTING,                                                            
            PMA_CH1_REG_EN                                  =>   PMA_CH1_REG_EN,
            PMA_CH1_REGREF_SEL                              =>   PMA_CH1_REGREF_SEL,
            PMA_CH1_DC496                                   =>   PMA_CH1_DC496,
            PMA_CH1_EQ2_AC_VAR_SETTING                      =>   PMA_CH1_EQ2_AC_VAR_SETTING,
            PMA_CH1_EQ2_AC_RES_SETTING                      =>   PMA_CH1_EQ2_AC_RES_SETTING,
            PMA_CH1_EQ2_DC_RESTOP_SETTING                   =>   PMA_CH1_EQ2_DC_RESTOP_SETTING,                                                                                    
            PMA_CH1_EQ1_DC_RESTOP_SETTING                   =>   PMA_CH1_EQ1_DC_RESTOP_SETTING,                                                                                    
            PMA_CH1_EQ1_AC_VAR_SETTING                      =>   PMA_CH1_EQ1_AC_VAR_SETTING,                                                                                                  
            PMA_CH1_EQ2_CURRENT_SETTING                     =>   PMA_CH1_EQ2_CURRENT_SETTING,                                                                                                 
            PMA_CH1_EQ1_AC_RES_SETTING                      =>   PMA_CH1_EQ1_AC_RES_SETTING,                                                             
            PMA_CH1_EQ1_CURRENT_SETTING                     =>   PMA_CH1_EQ1_CURRENT_SETTING,                                                             
            PMA_CH1_RPLUS                                   =>   PMA_CH1_RPLUS,                                             
            PMA_CH1_RMINUS                                  =>   PMA_CH1_RMINUS,                                             
            PMA_CH1_RVALSET                                 =>   PMA_CH1_RVALSET,                                                      
            PMA_CH1_RTERM                                   =>   PMA_CH1_RTERM,                                                      
            PMA_CH1_DCFB_EN                                 =>   PMA_CH1_DCFB_EN,                                      
            PMA_CH1_DCCOUP                                  =>   PMA_CH1_DCCOUP,                                      
            PMA_CH1_3G                                      =>   PMA_CH1_3G,
            
            /*******pma_ch2******/
            PMA_CH2_TXDATA_WIDTH                            =>   PMA_CH2_TXDATA_WIDTH,                                                                        
            PMA_CH2_TX_TESTPATTERN                          =>   PMA_CH2_TX_TESTPATTERN,                                                                        
            PMA_CH2_TESTPATTERN_O_ENABLE                    =>   PMA_CH2_TESTPATTERN_O_ENABLE,
            PMA_CH2_DISABLE_BSMODE_DRVAMP                   =>   PMA_CH2_DISABLE_BSMODE_DRVAMP,                              
            PMA_CH2_FORCE_BIST_ENABLE                       =>   PMA_CH2_FORCE_BIST_ENABLE,   
            PMA_CH2_FORCE_ELECTRICAL_IDLE                   =>   PMA_CH2_FORCE_ELECTRICAL_IDLE,   
            PMA_CH2_FORCE_RXDCT_ENABLE                      =>   PMA_CH2_FORCE_RXDCT_ENABLE,                                     
            PMA_CH2_FORCE_EXTLB_ENABLE                      =>   PMA_CH2_FORCE_EXTLB_ENABLE,                                     
            PMA_CH2_DISABLE_LANE_SYNC                       =>   PMA_CH2_DISABLE_LANE_SYNC,                                     
            PMA_CH2_DISABLE_ELECTRICAL_IDLE                 =>   PMA_CH2_DISABLE_ELECTRICAL_IDLE,                                  
            PMA_CH2_DISABLE_RXDCT_ENABLE                    =>   PMA_CH2_DISABLE_RXDCT_ENABLE,                                  
            PMA_CH2_DISABLE_EXTLB_ENABLE                    =>   PMA_CH2_DISABLE_EXTLB_ENABLE,                                  
            PMA_CH2_DISABLE_LOW_SPEED_PATH_ENABLE           =>   PMA_CH2_DISABLE_LOW_SPEED_PATH_ENABLE,   
            PMA_CH2_FORCE_LANE_ENABLE                       =>   PMA_CH2_FORCE_LANE_ENABLE,   
            PMA_CH2_FORCE_LANE_RESETB_DISABLE               =>   PMA_CH2_FORCE_LANE_RESETB_DISABLE,   
            PMA_CH2_RXDCT_LGBW_ENABLE                       =>   PMA_CH2_RXDCT_LGBW_ENABLE,   
            PMA_CH2_RXDCT_VTH                               =>   PMA_CH2_RXDCT_VTH,   
            PMA_CH2_DE_EMPHASIS_ADDITIONAL_CONTROL          =>   PMA_CH2_DE_EMPHASIS_ADDITIONAL_CONTROL,   
            PMA_CH2_DRV_RTERM_CONTROL                       =>   PMA_CH2_DRV_RTERM_CONTROL,   
            PMA_CH2_FDRV_AMP_CONTROL                        =>   PMA_CH2_FDRV_AMP_CONTROL,                                          
            PMA_CH2_PREPC_AMP_CONTROL                       =>   PMA_CH2_PREPC_AMP_CONTROL,                                          
            PMA_CH2_PREMC_AMP_CONTROL                       =>   PMA_CH2_PREMC_AMP_CONTROL,                                          
            PMA_CH2_SER_AMP_CONTROL                         =>   PMA_CH2_SER_AMP_CONTROL,   
            PMA_CH2_PFD_LOOP_RESISTOR_SETTING               =>   PMA_CH2_PFD_LOOP_RESISTOR_SETTING,                                  
            PMA_CH2_PD_LOOP_RESISTOR_SETTING                =>   PMA_CH2_PD_LOOP_RESISTOR_SETTING,                                  
            PMA_CH2_CDR_TEST_OUT_SELECT                     =>   PMA_CH2_CDR_TEST_OUT_SELECT,   
            PMA_CH2_PI_DIV1_BP                              =>   PMA_CH2_PI_DIV1_BP,   
            PMA_CH2_PI_TEST_FOR_CKI                         =>   PMA_CH2_PI_TEST_FOR_CKI,   
            PMA_CH2_PI_CURRENT_SETTING                      =>   PMA_CH2_PI_CURRENT_SETTING,   
            PMA_CH2_PI_FREQUENCY_SETTING                    =>   PMA_CH2_PI_FREQUENCY_SETTING,   
            PMA_CH2_TEST_OUT_SELECT_FOR_RCK                 =>   PMA_CH2_TEST_OUT_SELECT_FOR_RCK,                                 
            PMA_CH2_TEST_OUT_SELECT_SOURCE                  =>   PMA_CH2_TEST_OUT_SELECT_SOURCE,                                 
            PMA_CH2_TEST_DATA_OUT_SELECT_SOURCE             =>   PMA_CH2_TEST_DATA_OUT_SELECT_SOURCE,   
            PMA_CH2_TEST_CK_OUT_SELECT_SOURCE               =>   PMA_CH2_TEST_CK_OUT_SELECT_SOURCE,                                             
            PMA_CH2_ENABLE_SLIP1UI_MODULE                   =>   PMA_CH2_ENABLE_SLIP1UI_MODULE,                                             
            PMA_CH2_PN_SWAP_ENABLE                          =>   PMA_CH2_PN_SWAP_ENABLE,         
            PMA_CH2_SIPO_BIT_SETTING                        =>   PMA_CH2_SIPO_BIT_SETTING,         
            PMA_CH2_OOB_EN                                  =>   PMA_CH2_OOB_EN,         
            PMA_CH2_ALOS_EN                                 =>   PMA_CH2_ALOS_EN,  
            PMA_CH2_LFMODE                                  =>   PMA_CH2_LFMODE,   
            PMA_CH2_TSO_HS_SEL                              =>   PMA_CH2_TSO_HS_SEL,   
            PMA_CH2_LX_SELLC                                =>   PMA_CH2_LX_SELLC,   
            PMA_CH2_LX_RXPLL_DIVSEL45_FB                    =>   PMA_CH2_LX_RXPLL_DIVSEL45_FB,   
            PMA_CH2_LX_RXPLL_DIVSEL_FB                      =>   PMA_CH2_LX_RXPLL_DIVSEL_FB,   
            PMA_CH2_LX_RXPLL_DIVSEL_REF                     =>   PMA_CH2_LX_RXPLL_DIVSEL_REF,   
            PMA_CH2_PICODE                                  =>   PMA_CH2_PICODE,   
            PMA_CH2_RX_REFCK_SEL                            =>   PMA_CH2_RX_REFCK_SEL,  
            PMA_CH2_PFDLPEN_REGISTER_CONTROL_ENABLE         =>   PMA_CH2_PFDLPEN_REGISTER_CONTROL_ENABLE,  
            PMA_CH2_PFDLPEN_REGISTER_SETTING                =>   PMA_CH2_PFDLPEN_REGISTER_SETTING,   
            PMA_CH2_PDLPEN_REGISTER_CONTROL_ENABLE          =>   PMA_CH2_PDLPEN_REGISTER_CONTROL_ENABLE,   
            PMA_CH2_PDLPEN_REGISTER_SETTING                 =>   PMA_CH2_PDLPEN_REGISTER_SETTING,   
            PMA_CH2_DIV_CHANGE_ENABLE_DELAY_TIMER           =>   PMA_CH2_DIV_CHANGE_ENABLE_DELAY_TIMER,   
            PMA_CH2_DIV_CHANGE_ENABLE_SIGNAL_GATING         =>   PMA_CH2_DIV_CHANGE_ENABLE_SIGNAL_GATING,   
            PMA_CH2_CDR_ALIGN_REGISTER_SETTING_VALUE        =>   PMA_CH2_CDR_ALIGN_REGISTER_SETTING_VALUE,   
            PMA_CH2_FORCE_CDR_ALIGN_ENABLE                  =>   PMA_CH2_FORCE_CDR_ALIGN_ENABLE,   
            PMA_CH2_SELLC_REGISTER_SETTING_VALUE            =>   PMA_CH2_SELLC_REGISTER_SETTING_VALUE,   
            PMA_CH2_SELLC_CONTROL_BY_REGISTER               =>   PMA_CH2_SELLC_CONTROL_BY_REGISTER,  
            PMA_CH2_REG_PLLI_LDO_VREF_SETTING               =>   PMA_CH2_REG_PLLI_LDO_VREF_SETTING,    
            PMA_CH2_REG_PLLI_LDO_BYPASS_CURRENT             =>   PMA_CH2_REG_PLLI_LDO_BYPASS_CURRENT,   
            PMA_CH2_REG_PLL_HSTEST_ENABLE                   =>   PMA_CH2_REG_PLL_HSTEST_ENABLE,   
            PMA_CH2_REG_PLL_ISNK_CURRENT_CONTROL            =>   PMA_CH2_REG_PLL_ISNK_CURRENT_CONTROL,   
            PMA_CH2_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING    =>   PMA_CH2_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING,  
            PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING           =>   PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING,   
            PMA_CH2_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING    =>   PMA_CH2_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING,   
            PMA_CH2_REG_PLL_CP0_BIAS_CONTROL                =>   PMA_CH2_REG_PLL_CP0_BIAS_CONTROL,    
            PMA_CH2_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING     =>   PMA_CH2_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING,   
            PMA_CH2_REG_PLL_CP1_BIAS_CONTROL                =>   PMA_CH2_REG_PLL_CP1_BIAS_CONTROL,    
            PMA_CH2_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING     =>   PMA_CH2_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING,   
            PMA_CH2_REG_PLL_CP0_CURRENT_SETTING             =>   PMA_CH2_REG_PLL_CP0_CURRENT_SETTING,   
            PMA_CH2_REG_PLL_CP1_CURRENT_SETTING             =>   PMA_CH2_REG_PLL_CP1_CURRENT_SETTING,    
            PMA_CH2_REG_PLL_GM1_CURRENT_SETTING             =>   PMA_CH2_REG_PLL_GM1_CURRENT_SETTING,   
            PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING          =>   PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING,    
            PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW      =>   PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW,    
            PMA_CH2_REG_PLL_REG_CUR                         =>   PMA_CH2_REG_PLL_REG_CUR,    
            PMA_CH2_REG_PLL_LCCUR                           =>   PMA_CH2_REG_PLL_LCCUR,                                                                                                 
            PMA_CH2_REG_PLL_LCOBAS                          =>   PMA_CH2_REG_PLL_LCOBAS,                                                                                                 
            PMA_CH2_REG_PLL_FB_CK_TEST_OUT_ENABLE           =>   PMA_CH2_REG_PLL_FB_CK_TEST_OUT_ENABLE,    
            PMA_CH2_CDR_ALIGN_TIMER                         =>   PMA_CH2_CDR_ALIGN_TIMER,    
            PMA_CH2_CALIB_WAIT                              =>   PMA_CH2_CALIB_WAIT,    
            PMA_CH2_CALIB_TIMER                             =>   PMA_CH2_CALIB_TIMER,   
            PMA_CH2_TOT_RANGE                               =>   PMA_CH2_TOT_RANGE,                                                                
            PMA_CH2_SUB_RANGE                               =>   PMA_CH2_SUB_RANGE,                                                                
            PMA_CH2_OVLP                                    =>   PMA_CH2_OVLP,   
            PMA_CH2_BIST_WAIT                               =>   PMA_CH2_BIST_WAIT,                                             
            PMA_CH2_BIST_TIMER                              =>   PMA_CH2_BIST_TIMER,                                             
            PMA_CH2_BAND_LB                                 =>   PMA_CH2_BAND_LB,                               
            PMA_CH2_BAND_HB                                 =>   PMA_CH2_BAND_HB,
            PMA_CH2_FREQ_LOCK_ACCURACY                      =>   PMA_CH2_FREQ_LOCK_ACCURACY,    
            PMA_CH2_REG_SET_LC_BAND                         =>   PMA_CH2_REG_SET_LC_BAND,    
            PMA_CH2_REG_SET_VCODIV                          =>   PMA_CH2_REG_SET_VCODIV,    
            PMA_CH2_REGISTER_SET_VCODIV_BAND_ENABLE         =>   PMA_CH2_REGISTER_SET_VCODIV_BAND_ENABLE,   
            PMA_CH2_REG_SET_PLL_LOCK                        =>   PMA_CH2_REG_SET_PLL_LOCK,    
            PMA_CH2_REGISTER_SET_PLL_LOCK_ENABLE            =>   PMA_CH2_REGISTER_SET_PLL_LOCK_ENABLE,    
            PMA_CH2_REG_SET_VCO_HI                          =>   PMA_CH2_REG_SET_VCO_HI,                                     
            PMA_CH2_REG_SET_VCO_LO                          =>   PMA_CH2_REG_SET_VCO_LO,                                     
            PMA_CH2_REGISTER_SET_VCO_HI_VCO_LO_ENABLE       =>   PMA_CH2_REGISTER_SET_VCO_HI_VCO_LO_ENABLE,
            PMA_CH2_FORCE_LC_PLL_LOOP_EN_H                  =>   PMA_CH2_FORCE_LC_PLL_LOOP_EN_H,
            PMA_CH2_FORCE_LC_PLL_LOOP_EN_L                  =>   PMA_CH2_FORCE_LC_PLL_LOOP_EN_L,
            PMA_CH2_VCO_DIV_CALI_BYPASS                     =>   PMA_CH2_VCO_DIV_CALI_BYPASS,
            PMA_CH2_BIST_EN                                 =>   PMA_CH2_BIST_EN,
            PMA_CH2_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE    =>      PMA_CH2_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE,
            PMA_CH2_FREQ_DETECT_ENABLE_SOURCE               =>   PMA_CH2_FREQ_DETECT_ENABLE_SOURCE,   
            PMA_CH2_REG_SET_DIVSEL_REF                      =>   PMA_CH2_REG_SET_DIVSEL_REF,                                                                          
            PMA_CH2_REG_SET_DIVSEL45_FB                     =>   PMA_CH2_REG_SET_DIVSEL45_FB,                                                                          
            PMA_CH2_REG_SET_DIVSEL_FB                       =>   PMA_CH2_REG_SET_DIVSEL_FB,   
            PMA_CH2_PLL_LOOP_EN_SETTING                     =>   PMA_CH2_PLL_LOOP_EN_SETTING,   
            PMA_CH2_REGISTER_SET_TXPLL_DIV_ENABLE           =>   PMA_CH2_REGISTER_SET_TXPLL_DIV_ENABLE,                                                        
            PMA_CH2_FORCE_RXPLL_RESET                       =>   PMA_CH2_FORCE_RXPLL_RESET,                                                      
            PMA_CH2_FORCE_RXPLL_ON                          =>   PMA_CH2_FORCE_RXPLL_ON,   
            PMA_CH2_DPCK_DIV2                               =>   PMA_CH2_DPCK_DIV2,   
            PMA_CH2_LFO_SETTING                             =>   PMA_CH2_LFO_SETTING,   
            PMA_CH2_ALOS_COUNTER_CLOCK_SELECTION            =>   PMA_CH2_ALOS_COUNTER_CLOCK_SELECTION,   
            PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT              =>   PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT,  
            PMA_CH2_OOB_ENTER_DELAY_SETTING                 =>   PMA_CH2_OOB_ENTER_DELAY_SETTING,  
            PMA_CH2_ALOS_LOW_TO_HIGH_COUNTER_SETTING        =>   PMA_CH2_ALOS_LOW_TO_HIGH_COUNTER_SETTING,  
            PMA_CH2_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL     =>   PMA_CH2_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL,
            PMA_CH2_ALOS_EXIT_COUNTER_CLOCK_DIVIDER         =>   PMA_CH2_ALOS_EXIT_COUNTER_CLOCK_DIVIDER,                                                        
            PMA_CH2_OOB_OSCILATER_FREQUENCY_SETTING         =>   PMA_CH2_OOB_OSCILATER_FREQUENCY_SETTING,                                                        
            PMA_CH2_FORCE_OOB                               =>   PMA_CH2_FORCE_OOB,                                                     
            PMA_CH2_OOB_VTH_SET                             =>   PMA_CH2_OOB_VTH_SET,                                                     
            PMA_CH2_FORCE_DET_FORCE_ALOS_LOW                =>   PMA_CH2_FORCE_DET_FORCE_ALOS_LOW,
            PMA_CH2_ALOS_THRESHOLD_VOLTAGE                  =>   PMA_CH2_ALOS_THRESHOLD_VOLTAGE,
            PMA_CH2_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE       =>   PMA_CH2_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE,                                                            
            PMA_CH2_REGR_NEGATIVE_HYSTERESIS_SETTING        =>   PMA_CH2_REGR_NEGATIVE_HYSTERESIS_SETTING,                                                            
            PMA_CH2_REGL_POSITIVE_HYSTERESIS_SETTING        =>   PMA_CH2_REGL_POSITIVE_HYSTERESIS_SETTING,                                                            
            PMA_CH2_REG_EN                                  =>   PMA_CH2_REG_EN,
            PMA_CH2_REGREF_SEL                              =>   PMA_CH2_REGREF_SEL,
            PMA_CH2_DC496                                   =>   PMA_CH2_DC496,
            PMA_CH2_EQ2_AC_VAR_SETTING                      =>   PMA_CH2_EQ2_AC_VAR_SETTING,
            PMA_CH2_EQ2_AC_RES_SETTING                      =>   PMA_CH2_EQ2_AC_RES_SETTING,
            PMA_CH2_EQ2_DC_RESTOP_SETTING                   =>   PMA_CH2_EQ2_DC_RESTOP_SETTING,                                                                                    
            PMA_CH2_EQ1_DC_RESTOP_SETTING                   =>   PMA_CH2_EQ1_DC_RESTOP_SETTING,                                                                                    
            PMA_CH2_EQ1_AC_VAR_SETTING                      =>   PMA_CH2_EQ1_AC_VAR_SETTING,                                                                                                  
            PMA_CH2_EQ2_CURRENT_SETTING                     =>   PMA_CH2_EQ2_CURRENT_SETTING,                                                                                                 
            PMA_CH2_EQ1_AC_RES_SETTING                      =>   PMA_CH2_EQ1_AC_RES_SETTING,                                                             
            PMA_CH2_EQ1_CURRENT_SETTING                     =>   PMA_CH2_EQ1_CURRENT_SETTING,                                                             
            PMA_CH2_RPLUS                                   =>   PMA_CH2_RPLUS,                                             
            PMA_CH2_RMINUS                                  =>   PMA_CH2_RMINUS,                                             
            PMA_CH2_RVALSET                                 =>   PMA_CH2_RVALSET,                                                      
            PMA_CH2_RTERM                                   =>   PMA_CH2_RTERM,                                                      
            PMA_CH2_DCFB_EN                                 =>   PMA_CH2_DCFB_EN,                                      
            PMA_CH2_DCCOUP                                  =>   PMA_CH2_DCCOUP,                                      
            PMA_CH2_3G                                      =>   PMA_CH2_3G, 
            
            /******pma_ch3*******/
            PMA_CH3_TXDATA_WIDTH                            =>   PMA_CH3_TXDATA_WIDTH,                                                                        
            PMA_CH3_TX_TESTPATTERN                          =>   PMA_CH3_TX_TESTPATTERN,                                                                        
            PMA_CH3_TESTPATTERN_O_ENABLE                    =>   PMA_CH3_TESTPATTERN_O_ENABLE,
            PMA_CH3_DISABLE_BSMODE_DRVAMP                   =>   PMA_CH3_DISABLE_BSMODE_DRVAMP,                              
            PMA_CH3_FORCE_BIST_ENABLE                       =>   PMA_CH3_FORCE_BIST_ENABLE,   
            PMA_CH3_FORCE_ELECTRICAL_IDLE                   =>   PMA_CH3_FORCE_ELECTRICAL_IDLE,   
            PMA_CH3_FORCE_RXDCT_ENABLE                      =>   PMA_CH3_FORCE_RXDCT_ENABLE,                                     
            PMA_CH3_FORCE_EXTLB_ENABLE                      =>   PMA_CH3_FORCE_EXTLB_ENABLE,                                     
            PMA_CH3_DISABLE_LANE_SYNC                       =>   PMA_CH3_DISABLE_LANE_SYNC,                                     
            PMA_CH3_DISABLE_ELECTRICAL_IDLE                 =>   PMA_CH3_DISABLE_ELECTRICAL_IDLE,                                  
            PMA_CH3_DISABLE_RXDCT_ENABLE                    =>   PMA_CH3_DISABLE_RXDCT_ENABLE,                                  
            PMA_CH3_DISABLE_EXTLB_ENABLE                    =>   PMA_CH3_DISABLE_EXTLB_ENABLE,                                  
            PMA_CH3_DISABLE_LOW_SPEED_PATH_ENABLE           =>   PMA_CH3_DISABLE_LOW_SPEED_PATH_ENABLE,   
            PMA_CH3_FORCE_LANE_ENABLE                       =>   PMA_CH3_FORCE_LANE_ENABLE,   
            PMA_CH3_FORCE_LANE_RESETB_DISABLE               =>   PMA_CH3_FORCE_LANE_RESETB_DISABLE,   
            PMA_CH3_RXDCT_LGBW_ENABLE                       =>   PMA_CH3_RXDCT_LGBW_ENABLE,   
            PMA_CH3_RXDCT_VTH                               =>   PMA_CH3_RXDCT_VTH,   
            PMA_CH3_DE_EMPHASIS_ADDITIONAL_CONTROL          =>   PMA_CH3_DE_EMPHASIS_ADDITIONAL_CONTROL,   
            PMA_CH3_DRV_RTERM_CONTROL                       =>   PMA_CH3_DRV_RTERM_CONTROL,   
            PMA_CH3_FDRV_AMP_CONTROL                        =>   PMA_CH3_FDRV_AMP_CONTROL,                                          
            PMA_CH3_PREPC_AMP_CONTROL                       =>   PMA_CH3_PREPC_AMP_CONTROL,                                          
            PMA_CH3_PREMC_AMP_CONTROL                       =>   PMA_CH3_PREMC_AMP_CONTROL,                                          
            PMA_CH3_SER_AMP_CONTROL                         =>   PMA_CH3_SER_AMP_CONTROL,   
            PMA_CH3_PFD_LOOP_RESISTOR_SETTING               =>   PMA_CH3_PFD_LOOP_RESISTOR_SETTING,                                  
            PMA_CH3_PD_LOOP_RESISTOR_SETTING                =>   PMA_CH3_PD_LOOP_RESISTOR_SETTING,                                  
            PMA_CH3_CDR_TEST_OUT_SELECT                     =>   PMA_CH3_CDR_TEST_OUT_SELECT,   
            PMA_CH3_PI_DIV1_BP                              =>   PMA_CH3_PI_DIV1_BP,   
            PMA_CH3_PI_TEST_FOR_CKI                         =>   PMA_CH3_PI_TEST_FOR_CKI,   
            PMA_CH3_PI_CURRENT_SETTING                      =>   PMA_CH3_PI_CURRENT_SETTING,   
            PMA_CH3_PI_FREQUENCY_SETTING                    =>   PMA_CH3_PI_FREQUENCY_SETTING,   
            PMA_CH3_TEST_OUT_SELECT_FOR_RCK                 =>   PMA_CH3_TEST_OUT_SELECT_FOR_RCK,                                 
            PMA_CH3_TEST_OUT_SELECT_SOURCE                  =>   PMA_CH3_TEST_OUT_SELECT_SOURCE,                                 
            PMA_CH3_TEST_DATA_OUT_SELECT_SOURCE             =>   PMA_CH3_TEST_DATA_OUT_SELECT_SOURCE,   
            PMA_CH3_TEST_CK_OUT_SELECT_SOURCE               =>   PMA_CH3_TEST_CK_OUT_SELECT_SOURCE,                                             
            PMA_CH3_ENABLE_SLIP1UI_MODULE                   =>   PMA_CH3_ENABLE_SLIP1UI_MODULE,                                             
            PMA_CH3_PN_SWAP_ENABLE                          =>   PMA_CH3_PN_SWAP_ENABLE,         
            PMA_CH3_SIPO_BIT_SETTING                        =>   PMA_CH3_SIPO_BIT_SETTING,         
            PMA_CH3_OOB_EN                                  =>   PMA_CH3_OOB_EN,         
            PMA_CH3_ALOS_EN                                 =>   PMA_CH3_ALOS_EN,  
            PMA_CH3_LFMODE                                  =>   PMA_CH3_LFMODE,   
            PMA_CH3_TSO_HS_SEL                              =>   PMA_CH3_TSO_HS_SEL,   
            PMA_CH3_LX_SELLC                                =>   PMA_CH3_LX_SELLC,   
            PMA_CH3_LX_RXPLL_DIVSEL45_FB                    =>   PMA_CH3_LX_RXPLL_DIVSEL45_FB,   
            PMA_CH3_LX_RXPLL_DIVSEL_FB                      =>   PMA_CH3_LX_RXPLL_DIVSEL_FB,   
            PMA_CH3_LX_RXPLL_DIVSEL_REF                     =>   PMA_CH3_LX_RXPLL_DIVSEL_REF,   
            PMA_CH3_PICODE                                  =>   PMA_CH3_PICODE,   
            PMA_CH3_RX_REFCK_SEL                            =>   PMA_CH3_RX_REFCK_SEL,  
            PMA_CH3_PFDLPEN_REGISTER_CONTROL_ENABLE         =>   PMA_CH3_PFDLPEN_REGISTER_CONTROL_ENABLE,  
            PMA_CH3_PFDLPEN_REGISTER_SETTING                =>   PMA_CH3_PFDLPEN_REGISTER_SETTING,   
            PMA_CH3_PDLPEN_REGISTER_CONTROL_ENABLE          =>   PMA_CH3_PDLPEN_REGISTER_CONTROL_ENABLE,   
            PMA_CH3_PDLPEN_REGISTER_SETTING                 =>   PMA_CH3_PDLPEN_REGISTER_SETTING,   
            PMA_CH3_DIV_CHANGE_ENABLE_DELAY_TIMER           =>   PMA_CH3_DIV_CHANGE_ENABLE_DELAY_TIMER,   
            PMA_CH3_DIV_CHANGE_ENABLE_SIGNAL_GATING         =>   PMA_CH3_DIV_CHANGE_ENABLE_SIGNAL_GATING,   
            PMA_CH3_CDR_ALIGN_REGISTER_SETTING_VALUE        =>   PMA_CH3_CDR_ALIGN_REGISTER_SETTING_VALUE,   
            PMA_CH3_FORCE_CDR_ALIGN_ENABLE                  =>   PMA_CH3_FORCE_CDR_ALIGN_ENABLE,   
            PMA_CH3_SELLC_REGISTER_SETTING_VALUE            =>   PMA_CH3_SELLC_REGISTER_SETTING_VALUE,   
            PMA_CH3_SELLC_CONTROL_BY_REGISTER               =>   PMA_CH3_SELLC_CONTROL_BY_REGISTER,  
            PMA_CH3_REG_PLLI_LDO_VREF_SETTING               =>   PMA_CH3_REG_PLLI_LDO_VREF_SETTING,    
            PMA_CH3_REG_PLLI_LDO_BYPASS_CURRENT             =>   PMA_CH3_REG_PLLI_LDO_BYPASS_CURRENT,   
            PMA_CH3_REG_PLL_HSTEST_ENABLE                   =>   PMA_CH3_REG_PLL_HSTEST_ENABLE,   
            PMA_CH3_REG_PLL_ISNK_CURRENT_CONTROL            =>   PMA_CH3_REG_PLL_ISNK_CURRENT_CONTROL,   
            PMA_CH3_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING    =>   PMA_CH3_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING,  
            PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING           =>   PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING,   
            PMA_CH3_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING    =>   PMA_CH3_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING,   
            PMA_CH3_REG_PLL_CP0_BIAS_CONTROL                =>   PMA_CH3_REG_PLL_CP0_BIAS_CONTROL,    
            PMA_CH3_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING     =>   PMA_CH3_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING,   
            PMA_CH3_REG_PLL_CP1_BIAS_CONTROL                =>   PMA_CH3_REG_PLL_CP1_BIAS_CONTROL,    
            PMA_CH3_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING     =>   PMA_CH3_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING,   
            PMA_CH3_REG_PLL_CP0_CURRENT_SETTING             =>   PMA_CH3_REG_PLL_CP0_CURRENT_SETTING,   
            PMA_CH3_REG_PLL_CP1_CURRENT_SETTING             =>   PMA_CH3_REG_PLL_CP1_CURRENT_SETTING,    
            PMA_CH3_REG_PLL_GM1_CURRENT_SETTING             =>   PMA_CH3_REG_PLL_GM1_CURRENT_SETTING,   
            PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING          =>   PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING,    
            PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW      =>   PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW,    
            PMA_CH3_REG_PLL_REG_CUR                         =>   PMA_CH3_REG_PLL_REG_CUR,    
            PMA_CH3_REG_PLL_LCCUR                           =>   PMA_CH3_REG_PLL_LCCUR,                                                                                                 
            PMA_CH3_REG_PLL_LCOBAS                          =>   PMA_CH3_REG_PLL_LCOBAS,                                                                                                 
            PMA_CH3_REG_PLL_FB_CK_TEST_OUT_ENABLE           =>   PMA_CH3_REG_PLL_FB_CK_TEST_OUT_ENABLE,    
            PMA_CH3_CDR_ALIGN_TIMER                         =>   PMA_CH3_CDR_ALIGN_TIMER,    
            PMA_CH3_CALIB_WAIT                              =>   PMA_CH3_CALIB_WAIT,    
            PMA_CH3_CALIB_TIMER                             =>   PMA_CH3_CALIB_TIMER,   
            PMA_CH3_TOT_RANGE                               =>   PMA_CH3_TOT_RANGE,                                                                
            PMA_CH3_SUB_RANGE                               =>   PMA_CH3_SUB_RANGE,                                                                
            PMA_CH3_OVLP                                    =>   PMA_CH3_OVLP,   
            PMA_CH3_BIST_WAIT                               =>   PMA_CH3_BIST_WAIT,                                             
            PMA_CH3_BIST_TIMER                              =>   PMA_CH3_BIST_TIMER,                                             
            PMA_CH3_BAND_LB                                 =>   PMA_CH3_BAND_LB,                               
            PMA_CH3_BAND_HB                                 =>   PMA_CH3_BAND_HB,
            PMA_CH3_FREQ_LOCK_ACCURACY                      =>   PMA_CH3_FREQ_LOCK_ACCURACY,    
            PMA_CH3_REG_SET_LC_BAND                         =>   PMA_CH3_REG_SET_LC_BAND,    
            PMA_CH3_REG_SET_VCODIV                          =>   PMA_CH3_REG_SET_VCODIV,    
            PMA_CH3_REGISTER_SET_VCODIV_BAND_ENABLE         =>   PMA_CH3_REGISTER_SET_VCODIV_BAND_ENABLE,   
            PMA_CH3_REG_SET_PLL_LOCK                        =>   PMA_CH3_REG_SET_PLL_LOCK,    
            PMA_CH3_REGISTER_SET_PLL_LOCK_ENABLE            =>   PMA_CH3_REGISTER_SET_PLL_LOCK_ENABLE,    
            PMA_CH3_REG_SET_VCO_HI                          =>   PMA_CH3_REG_SET_VCO_HI,                                     
            PMA_CH3_REG_SET_VCO_LO                          =>   PMA_CH3_REG_SET_VCO_LO,                                     
            PMA_CH3_REGISTER_SET_VCO_HI_VCO_LO_ENABLE       =>   PMA_CH3_REGISTER_SET_VCO_HI_VCO_LO_ENABLE,
            PMA_CH3_FORCE_LC_PLL_LOOP_EN_H                  =>   PMA_CH3_FORCE_LC_PLL_LOOP_EN_H,
            PMA_CH3_FORCE_LC_PLL_LOOP_EN_L                  =>   PMA_CH3_FORCE_LC_PLL_LOOP_EN_L,
            PMA_CH3_VCO_DIV_CALI_BYPASS                     =>   PMA_CH3_VCO_DIV_CALI_BYPASS,
            PMA_CH3_BIST_EN                                 =>   PMA_CH3_BIST_EN,
            PMA_CH3_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE    =>      PMA_CH3_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE,
            PMA_CH3_FREQ_DETECT_ENABLE_SOURCE               =>   PMA_CH3_FREQ_DETECT_ENABLE_SOURCE,   
            PMA_CH3_REG_SET_DIVSEL_REF                      =>   PMA_CH3_REG_SET_DIVSEL_REF,                                                                          
            PMA_CH3_REG_SET_DIVSEL45_FB                     =>   PMA_CH3_REG_SET_DIVSEL45_FB,                                                                          
            PMA_CH3_REG_SET_DIVSEL_FB                       =>   PMA_CH3_REG_SET_DIVSEL_FB,   
            PMA_CH3_PLL_LOOP_EN_SETTING                     =>   PMA_CH3_PLL_LOOP_EN_SETTING,   
            PMA_CH3_REGISTER_SET_TXPLL_DIV_ENABLE           =>   PMA_CH3_REGISTER_SET_TXPLL_DIV_ENABLE,                                                        
            PMA_CH3_FORCE_RXPLL_RESET                       =>   PMA_CH3_FORCE_RXPLL_RESET,                                                      
            PMA_CH3_FORCE_RXPLL_ON                          =>   PMA_CH3_FORCE_RXPLL_ON,   
            PMA_CH3_DPCK_DIV2                               =>   PMA_CH3_DPCK_DIV2,   
            PMA_CH3_LFO_SETTING                             =>   PMA_CH3_LFO_SETTING,   
            PMA_CH3_ALOS_COUNTER_CLOCK_SELECTION            =>   PMA_CH3_ALOS_COUNTER_CLOCK_SELECTION,   
            PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT              =>   PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT,  
            PMA_CH3_OOB_ENTER_DELAY_SETTING                 =>   PMA_CH3_OOB_ENTER_DELAY_SETTING,  
            PMA_CH3_ALOS_LOW_TO_HIGH_COUNTER_SETTING        =>   PMA_CH3_ALOS_LOW_TO_HIGH_COUNTER_SETTING,  
            PMA_CH3_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL     =>   PMA_CH3_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL,
            PMA_CH3_ALOS_EXIT_COUNTER_CLOCK_DIVIDER         =>   PMA_CH3_ALOS_EXIT_COUNTER_CLOCK_DIVIDER,                                                        
            PMA_CH3_OOB_OSCILATER_FREQUENCY_SETTING         =>   PMA_CH3_OOB_OSCILATER_FREQUENCY_SETTING,                                                        
            PMA_CH3_FORCE_OOB                               =>   PMA_CH3_FORCE_OOB,                                                     
            PMA_CH3_OOB_VTH_SET                             =>   PMA_CH3_OOB_VTH_SET,                                                     
            PMA_CH3_FORCE_DET_FORCE_ALOS_LOW                =>   PMA_CH3_FORCE_DET_FORCE_ALOS_LOW,
            PMA_CH3_ALOS_THRESHOLD_VOLTAGE                  =>   PMA_CH3_ALOS_THRESHOLD_VOLTAGE,
            PMA_CH3_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE       =>   PMA_CH3_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE,                                                            
            PMA_CH3_REGR_NEGATIVE_HYSTERESIS_SETTING        =>   PMA_CH3_REGR_NEGATIVE_HYSTERESIS_SETTING,                                                            
            PMA_CH3_REGL_POSITIVE_HYSTERESIS_SETTING        =>   PMA_CH3_REGL_POSITIVE_HYSTERESIS_SETTING,                                                            
            PMA_CH3_REG_EN                                  =>   PMA_CH3_REG_EN,
            PMA_CH3_REGREF_SEL                              =>   PMA_CH3_REGREF_SEL,
            PMA_CH3_DC496                                   =>   PMA_CH3_DC496,
            PMA_CH3_EQ2_AC_VAR_SETTING                      =>   PMA_CH3_EQ2_AC_VAR_SETTING,
            PMA_CH3_EQ2_AC_RES_SETTING                      =>   PMA_CH3_EQ2_AC_RES_SETTING,
            PMA_CH3_EQ2_DC_RESTOP_SETTING                   =>   PMA_CH3_EQ2_DC_RESTOP_SETTING,                                                                                    
            PMA_CH3_EQ1_DC_RESTOP_SETTING                   =>   PMA_CH3_EQ1_DC_RESTOP_SETTING,                                                                                    
            PMA_CH3_EQ1_AC_VAR_SETTING                      =>   PMA_CH3_EQ1_AC_VAR_SETTING,                                                                                                  
            PMA_CH3_EQ2_CURRENT_SETTING                     =>   PMA_CH3_EQ2_CURRENT_SETTING,                                                                                                 
            PMA_CH3_EQ1_AC_RES_SETTING                      =>   PMA_CH3_EQ1_AC_RES_SETTING,                                                             
            PMA_CH3_EQ1_CURRENT_SETTING                     =>   PMA_CH3_EQ1_CURRENT_SETTING,                                                             
            PMA_CH3_RPLUS                                   =>   PMA_CH3_RPLUS,                                             
            PMA_CH3_RMINUS                                  =>   PMA_CH3_RMINUS,                                             
            PMA_CH3_RVALSET                                 =>   PMA_CH3_RVALSET,                                                      
            PMA_CH3_RTERM                                   =>   PMA_CH3_RTERM,                                                      
            PMA_CH3_DCFB_EN                                 =>   PMA_CH3_DCFB_EN,                                      
            PMA_CH3_DCCOUP                                  =>   PMA_CH3_DCCOUP,                                      
            PMA_CH3_3G                                      =>   PMA_CH3_3G,
            
            /*******pma_quad*******/
            PMA_QUAD_TURN_ON_BANDGAP_AT_AOS_ON              =>   PMA_QUAD_TURN_ON_BANDGAP_AT_AOS_ON,
            PMA_QUAD_TURN_ON_BANDGAP_AT_RX_DETECTION_ON     =>   PMA_QUAD_TURN_ON_BANDGAP_AT_RX_DETECTION_ON,
            PMA_QUAD_TURN_ON_BANDGAP_AT_BOUNDARY_SCAN_ON    =>   PMA_QUAD_TURN_ON_BANDGAP_AT_BOUNDARY_SCAN_ON,                           
            PMA_QUAD_CFG_HSST_RSTN                          =>   PMA_QUAD_CFG_HSST_RSTN,                                                   
            PMA_QUAD_SELECT_LANE_TCK_FOR_QUAD_SYNC          =>   PMA_QUAD_SELECT_LANE_TCK_FOR_QUAD_SYNC,                             
            PMA_QUAD_CK_REN                                 =>   PMA_QUAD_CK_REN,                                                         
            PMA_QUAD_C1_EN                                  =>   PMA_QUAD_C1_EN,                                                              
            PMA_QUAD_C2_EN                                  =>   PMA_QUAD_C2_EN,                                                              
            PMA_QUAD_CLK_DIVIDER_SETTING_FROM_25M_TO_200K   =>   PMA_QUAD_CLK_DIVIDER_SETTING_FROM_25M_TO_200K,        
            PMA_QUAD_ACMODE_SCANMODE_EN                     =>   PMA_QUAD_ACMODE_SCANMODE_EN,                                            
            PMA_QUAD_REGISTER_ACMODE                        =>   PMA_QUAD_REGISTER_ACMODE,                                                    
            PMA_QUAD_REGISTER_SCANMODE                      =>   PMA_QUAD_REGISTER_SCANMODE,                                                   
            PMA_QUAD_REFCK2CORE_EN                          =>   PMA_QUAD_REFCK2CORE_EN,                                                  
            PMA_QUAD_REG_EN                                 =>   PMA_QUAD_REG_EN,                                                        
            PMA_QUAD_REGR                                   =>   PMA_QUAD_REGR,                                            
            PMA_QUAD_REGL                                   =>   PMA_QUAD_REGL,                                           
            PMA_QUAD_DPCK_SEL                               =>   PMA_QUAD_DPCK_SEL,                                    
            PMA_QUAD_TX_REFCK_SEL                           =>   PMA_QUAD_TX_REFCK_SEL,                                                       
            PMA_QUAD_REFCK_SRC_SEL                          =>   PMA_QUAD_REFCK_SRC_SEL,                                                    
            PMA_QUAD_RREFCK_PWRUP                           =>   PMA_QUAD_RREFCK_PWRUP,                                                                    
            PMA_QUAD_REFCK_SK_SEL                           =>   PMA_QUAD_REFCK_SK_SEL,                                                                                                                
            PMA_QUAD_REFCK_DIV2_SEL                         =>   PMA_QUAD_REFCK_DIV2_SEL,                                                  
            PMA_QUAD_REFCK_TO_NQ_EN                         =>   PMA_QUAD_REFCK_TO_NQ_EN,                                             
            PMA_QUAD_AUXI_ADJ                               =>   PMA_QUAD_AUXI_ADJ,                  
            PMA_QUAD_DC496                                  =>   PMA_QUAD_DC496,                        
            PMA_QUAD_REG_FDET_TIMER                         =>   PMA_QUAD_REG_FDET_TIMER,                            
            PMA_QUAD_FREQ_LKO                               =>   PMA_QUAD_FREQ_LKO,                                                                                     
            PMA_QUAD_FREQ_LKI                               =>   PMA_QUAD_FREQ_LKI,   
            PMA_QUAD_CLOCK_SRC_SEL                          =>   PMA_QUAD_CLOCK_SRC_SEL,                                                                                                                              
            PMA_QUAD_FRE_DET_EN                             =>   PMA_QUAD_FRE_DET_EN,                                     
            PMA_QUAD_TSO_LS_SEL                             =>   PMA_QUAD_TSO_LS_SEL,                                  
            PMA_QUAD_TXPLL_START                            =>   PMA_QUAD_TXPLL_START,                                        
            PMA_QUAD_VCODIV                                 =>   PMA_QUAD_VCODIV,                   
            PMA_QUAD_LC_BAND                                =>   PMA_QUAD_LC_BAND,                                       
            PMA_QUAD_SET_VCO_HI                             =>   PMA_QUAD_SET_VCO_HI,                                         
            PMA_QUAD_SET_VCO_LO                             =>   PMA_QUAD_SET_VCO_LO,                                         
            PMA_QUAD_CALIB_FAIL                             =>   PMA_QUAD_CALIB_FAIL,                                         
            PMA_QUAD_CALIB_DONE                             =>   PMA_QUAD_CALIB_DONE,                                         
            PMA_QUAD_BIST_DONE                              =>   PMA_QUAD_BIST_DONE,                                          
            PMA_QUAD_TOTRANGE_FAIL                          =>   PMA_QUAD_TOTRANGE_FAIL,                                           
            PMA_QUAD_SUBRANGE_FAIL                          =>   PMA_QUAD_SUBRANGE_FAIL,                                           
            PMA_QUAD_OVLP_FAIL                              =>   PMA_QUAD_OVLP_FAIL,                                           
            PMA_QUAD_TXPLL_LOCK                             =>   PMA_QUAD_TXPLL_LOCK,                                         
            PMA_QUAD_TXPLL_LOOP_ENABLE                      =>   PMA_QUAD_TXPLL_LOOP_ENABLE,                                   
            PMA_QUAD_TXPLL_DIVSEL_REF_STA                   =>   PMA_QUAD_TXPLL_DIVSEL_REF_STA,                
            PMA_QUAD_TXPLL_DIVSEL45_FB_STA                  =>   PMA_QUAD_TXPLL_DIVSEL45_FB_STA,                                         
            PMA_QUAD_TXPLL_DIVSEL_FB_STA                    =>   PMA_QUAD_TXPLL_DIVSEL_FB_STA,                                         
            PMA_QUAD_TXPLL_DIVSEL45_FB                      =>   PMA_QUAD_TXPLL_DIVSEL45_FB,                             
            PMA_QUAD_TXPLL_DIVSEL_FB                        =>   PMA_QUAD_TXPLL_DIVSEL_FB,                     
            PMA_QUAD_TXPLL_DIVSEL_REF                       =>   PMA_QUAD_TXPLL_DIVSEL_REF,                             
            PMA_QUAD_REG_DISABLE_HOLDCLK                    =>   PMA_QUAD_REG_DISABLE_HOLDCLK,                                         
            PMA_QUAD_REG_DISABLE_SYNC                       =>   PMA_QUAD_REG_DISABLE_SYNC,                                               
            PMA_QUAD_FORCE_OUTPUT_PLL_LOCK                  =>   PMA_QUAD_FORCE_OUTPUT_PLL_LOCK,                                         
            PMA_QUAD_REGISTER_SET_SYNCTCK_SEL_ENABLE        =>   PMA_QUAD_REGISTER_SET_SYNCTCK_SEL_ENABLE,                     
            PMA_QUAD_REG_SET_SYNCTCK_SEL                    =>   PMA_QUAD_REG_SET_SYNCTCK_SEL,                             
            PMA_QUAD_CK4TEST_OUTPUT_ENABLE                  =>   PMA_QUAD_CK4TEST_OUTPUT_ENABLE,                                   
            PMA_QUAD_RSTGENBAS                              =>   PMA_QUAD_RSTGENBAS,                                            
            PMA_QUAD_LCBUFBAS                               =>   PMA_QUAD_LCBUFBAS,                                            
            PMA_QUAD_REGISTER_SET_CPCUR_ENABEL              =>   PMA_QUAD_REGISTER_SET_CPCUR_ENABEL,                               
            PMA_QUAD_REG_SET_CPCUR                          =>   PMA_QUAD_REG_SET_CPCUR,                                          
            PMA_QUAD_CPBAS                                  =>   PMA_QUAD_CPBAS,                          
            PMA_QUAD_LCOBAS                                 =>   PMA_QUAD_LCOBAS,                                              
            PMA_QUAD_LCCUR                                  =>   PMA_QUAD_LCCUR,         
            PMA_QUAD_ENABLE_REGISTER_SETTING_BAND           =>   PMA_QUAD_ENABLE_REGISTER_SETTING_BAND,             
            PMA_QUAD_CALIB_WAIT                             =>   PMA_QUAD_CALIB_WAIT,                                     
            PMA_QUAD_CALIB_TIMER                            =>   PMA_QUAD_CALIB_TIMER,                     
            PMA_QUAD_TOT_RANGE                              =>   PMA_QUAD_TOT_RANGE,
            PMA_QUAD_SUB_RANGE                              =>   PMA_QUAD_SUB_RANGE,
            PMA_QUAD_OVLP                                   =>   PMA_QUAD_OVLP,
            PMA_QUAD_BIST_WAIT                              =>   PMA_QUAD_BIST_WAIT,
            PMA_QUAD_BIST_TIMER                             =>   PMA_QUAD_BIST_TIMER,                                   
            PMA_QUAD_BAND_LB                                =>   PMA_QUAD_BAND_LB,                                       
            PMA_QUAD_BAND_HB                                =>   PMA_QUAD_BAND_HB,                                               
            PMA_QUAD_FREQ_LOCK_ACCURACY                     =>   PMA_QUAD_FREQ_LOCK_ACCURACY,  
            PMA_QUAD_REG_SET_LC_BAND                        =>   PMA_QUAD_REG_SET_LC_BAND,                    
            PMA_QUAD_REG_SET_VCODIV                         =>   PMA_QUAD_REG_SET_VCODIV,                                
            PMA_QUAD_REGISTER_SET_VCODIV_BAND_ENABLE        =>   PMA_QUAD_REGISTER_SET_VCODIV_BAND_ENABLE,
            PMA_QUAD_REG_SET_PLL_LOCK                       =>   PMA_QUAD_REG_SET_PLL_LOCK,                                     
            PMA_QUAD_REGISTER_SET_PLL_LOCK_ENABLE           =>   PMA_QUAD_REGISTER_SET_PLL_LOCK_ENABLE,                  
            PMA_QUAD_REG_SET_VCO_HI                         =>   PMA_QUAD_REG_SET_VCO_HI,                                                    
            PMA_QUAD_REG_SET_VCO_LO                         =>   PMA_QUAD_REG_SET_VCO_LO,                                                    
            PMA_QUAD_REGISTER_SET_VCO_HI_VCO_LO_ENABLE      =>   PMA_QUAD_REGISTER_SET_VCO_HI_VCO_LO_ENABLE,                
            PMA_QUAD_FORCE_LC_PLL_LOOP_EN_H                 =>   PMA_QUAD_FORCE_LC_PLL_LOOP_EN_H,   
            PMA_QUAD_FORCE_LC_PLL_LOOP_EN_L                 =>   PMA_QUAD_FORCE_LC_PLL_LOOP_EN_L,                           
            PMA_QUAD_VCO_DIV_CALI_BYPASS                    =>   PMA_QUAD_VCO_DIV_CALI_BYPASS,
            PMA_QUAD_BIST_EN                                =>   PMA_QUAD_BIST_EN,                                   
            PMA_QUAD_ENABLE_TXPLL_BIST_BLOCK_CLOCKS         =>   PMA_QUAD_ENABLE_TXPLL_BIST_BLOCK_CLOCKS,  
            PMA_QUAD_LF_TESTBY2                             =>   PMA_QUAD_LF_TESTBY2,  
            PMA_QUAD_REG_SET_DIVSEL_REF                     =>   PMA_QUAD_REG_SET_DIVSEL_REF,
            PMA_QUAD_REG_SET_DIVSEL45_FB                    =>   PMA_QUAD_REG_SET_DIVSEL45_FB,
            PMA_QUAD_REG_SET_DIVSEL_FB                      =>   PMA_QUAD_REG_SET_DIVSEL_FB,
            PMA_QUAD_LF_TEST_EN                             =>   PMA_QUAD_LF_TEST_EN,
            PMA_QUAD_REGISTER_SET_TXPLL_DIV_ENABLE          =>   PMA_QUAD_REGISTER_SET_TXPLL_DIV_ENABLE,
            PMA_QUAD_FORCE_TXPLL_RESET                      =>   PMA_QUAD_FORCE_TXPLL_RESET,                                             
            PMA_QUAD_FORCE_TXPLL_ON                         =>   PMA_QUAD_FORCE_TXPLL_ON,
            
            /*********others*******/
            CLK_ALIGNER_RX0                                 =>   CLK_ALIGNER_RX0,       
            CLK_ALIGNER_RX1                                 =>   CLK_ALIGNER_RX1,       
            CLK_ALIGNER_RX2                                 =>   CLK_ALIGNER_RX2,       
            CLK_ALIGNER_RX3                                 =>   CLK_ALIGNER_RX3,       
            CLK_ALIGNER_TX0                                 =>   CLK_ALIGNER_TX0,       
            CLK_ALIGNER_TX1                                 =>   CLK_ALIGNER_TX1,       
            CLK_ALIGNER_TX2                                 =>   CLK_ALIGNER_TX2,       
            CLK_ALIGNER_TX3                                 =>   CLK_ALIGNER_TX3,       
            DYN_DLY_EN_RX0                                  =>   DYN_DLY_EN_RX0,       
            DYN_DLY_EN_RX1                                  =>   DYN_DLY_EN_RX1,       
            DYN_DLY_EN_RX2                                  =>   DYN_DLY_EN_RX2,       
            DYN_DLY_EN_RX3                                  =>   DYN_DLY_EN_RX3,       
            DYN_DLY_EN_TX0                                  =>   DYN_DLY_EN_TX0,       
            DYN_DLY_EN_TX1                                  =>   DYN_DLY_EN_TX1,       
            DYN_DLY_EN_TX2                                  =>   DYN_DLY_EN_TX2,       
            DYN_DLY_EN_TX3                                  =>   DYN_DLY_EN_TX3,       
            DYN_DLY_SEL_RX0                                 =>   DYN_DLY_SEL_RX0,       
            DYN_DLY_SEL_RX1                                 =>   DYN_DLY_SEL_RX1,       
            DYN_DLY_SEL_RX2                                 =>   DYN_DLY_SEL_RX2,       
            DYN_DLY_SEL_RX3                                 =>   DYN_DLY_SEL_RX3,       
            DYN_DLY_SEL_TX0                                 =>   DYN_DLY_SEL_TX0,       
            DYN_DLY_SEL_TX1                                 =>   DYN_DLY_SEL_TX1,       
            DYN_DLY_SEL_TX2                                 =>   DYN_DLY_SEL_TX2,       
            DYN_DLY_SEL_TX3                                 =>   DYN_DLY_SEL_TX3,       
            CLK_ALIGNER_RSTN_RX                             =>   CLK_ALIGNER_RSTN_RX,       
            CLK_ALIGNER_RSTN_TX                             =>   CLK_ALIGNER_RSTN_TX,       
            LX_BISTLB_EN                                    =>   PT_LX_BISTLB_EN,
            LX_ELECIDLE_EN_MSB                              =>   PT_LX_ELECIDLE_EN_MSB,
            LX_EXTLB_EN                                     =>   PT_LX_EXTLB_EN,          
            LX_RXDCT_EN                                     =>   PT_LX_RXDCT_EN,          
            LX_TX_LFMODE                                    =>   PT_LX_TX_LFMODE,        
            RX_LANE_POWERUP                                 =>   PT_RX_LANE_POWERUP,        
            TX_LANE_POWERUP                                 =>   PT_TX_LANE_POWERUP,        
            PLL_RSTN                                        =>   PT_PLL_RSTN,
            PLLPOWERDOWN                                    =>   PT_PLLPOWERDOWN,
            QUAD_PWRUP                                      =>   PT_QUAD_PWRUP,        
            GRSN_DIS                                        =>   GRSN_DIS,        
            HSST_RSTN                                       =>   PT_HSST_RSTN,        
            CFG_RSTN                                        =>   PT_CFG_RSTN      
        )
        port map
        (
           P_L0RXN                                          =>   L0RXN,                          
           P_L0RXP                                          =>   L0RXP,                          
           P_LX_LFD_FRCORE_0                                =>   LX_LFD_FRCORE_0,                          
           P_LX_RX_CKDIV_DYNSEL_0                           =>   LX_RX_CKDIV_DYNSEL_0,                          
           P_PCS_RX_RSTN_0                                  =>   PCS_RX_RSTN_0,
           P_PCS_TX_RSTN_0                                  =>   PCS_TX_RSTN_0,
           P_RX0_CLK_FR_CORE                                =>   RX0_CLK_FR_CORE,                          
           P_RX_PLL_RSTN_0                                  =>   RX_PLL_RSTN_0,
           P_RX_PMA_RSTN_0                                  =>   RX_PMA_RSTN_0,                          
           P_RX_REF_CLK_0                                   =>   RX_REF_CLK_0,
           P_TX0_CLK_FR_CORE                                =>   TX0_CLK_FR_CORE,                          
           P_TX_PMA_RSTN_0                                  =>   TX_PMA_RSTN_0,                          
           P_LANE_SYNC_EN_0                                 =>   LANE_SYNC_EN_0,                          
           P_LX_AMP_CTL_0[3:0]                              =>   LX_AMP_CTL_0[3:0],                          
           P_CIM_CLK_ALIGNER_RX0[7:0]                       =>   CIM_CLK_ALIGNER_RX0[7:0],
           P_CIM_CLK_ALIGNER_TX0[7:0]                       =>   CIM_CLK_ALIGNER_TX0[7:0],
           P_LX_DEEMP_CTL_0[2:0]                            =>   LX_DEEMP_CTL_0[2:0],                          
           P_LX_RX_CKDIV_0[1:0]                             =>   LX_RX_CKDIV_0[1:0],                          
           P_TX_CKDIV_0[1:0]                                =>   TX_CKDIV_0[1:0],                          
           P_TDATA_0[43:0]                                  =>   TDATA_0[43:0],                          
           P_LX_ELECIDLE_EN_0[1:0]                          =>   LX_ELECIDLE_EN_0[1:0],                          
           P_L1RXN                                          =>   L1RXN,                          
           P_L1RXP                                          =>   L1RXP,
           P_LX_LFD_FRCORE_1                                =>   LX_LFD_FRCORE_1,
           P_LX_RX_CKDIV_DYNSEL_1                           =>   LX_RX_CKDIV_DYNSEL_1,
           P_PCS_RX_RSTN_1                                  =>   PCS_RX_RSTN_1,                          
           P_PCS_TX_RSTN_1                                  =>   PCS_TX_RSTN_1,                          
           P_RX1_CLK_FR_CORE                                =>   RX1_CLK_FR_CORE,                          
           P_RX_PLL_RSTN_1                                  =>   RX_PLL_RSTN_1,                          
           P_RX_PMA_RSTN_1                                  =>   RX_PMA_RSTN_1,                          
           P_RX_REF_CLK_1                                   =>   RX_REF_CLK_1,                          
           P_TX1_CLK_FR_CORE                                =>   TX1_CLK_FR_CORE,                          
           P_TX_PMA_RSTN_1                                  =>   TX_PMA_RSTN_1,                          
           P_LANE_SYNC_EN_1                                 =>   LANE_SYNC_EN_1,                          
           P_LX_AMP_CTL_1[3:0]                              =>   LX_AMP_CTL_1[3:0],                          
           P_CIM_CLK_ALIGNER_RX1[7:0]                       =>   CIM_CLK_ALIGNER_RX1[7:0],                          
           P_CIM_CLK_ALIGNER_TX1[7:0]                       =>   CIM_CLK_ALIGNER_TX1[7:0],                          
           P_LX_DEEMP_CTL_1[2:0]                            =>   LX_DEEMP_CTL_1[2:0],                          
           P_LX_RX_CKDIV_1[1:0]                             =>   LX_RX_CKDIV_1[1:0],                          
           P_TX_CKDIV_1[1:0]                                =>   TX_CKDIV_1[1:0],                          
           P_TDATA_1[43:0]                                  =>   TDATA_1[43:0],                          
           P_LX_ELECIDLE_EN_1[1:0]                          =>   LX_ELECIDLE_EN_1[1:0],                          
           P_L2RXN                                          =>   L2RXN,                          
           P_L2RXP                                          =>   L2RXP,                          
           P_LX_LFD_FRCORE_2                                =>   LX_LFD_FRCORE_2,                          
           P_LX_RX_CKDIV_DYNSEL_2                           =>   LX_RX_CKDIV_DYNSEL_2,                          
           P_PCS_RX_RSTN_2                                  =>   PCS_RX_RSTN_2,                          
           P_PCS_TX_RSTN_2                                  =>   PCS_TX_RSTN_2,                          
           P_RX2_CLK_FR_CORE                                =>   RX2_CLK_FR_CORE,                          
           P_RX_PLL_RSTN_2                                  =>   RX_PLL_RSTN_2,                          
           P_RX_PMA_RSTN_2                                  =>   RX_PMA_RSTN_2,                          
           P_RX_REF_CLK_2                                   =>   RX_REF_CLK_2,                          
           P_TX2_CLK_FR_CORE                                =>   TX2_CLK_FR_CORE,                          
           P_TX_PMA_RSTN_2                                  =>   TX_PMA_RSTN_2,                          
           P_LANE_SYNC_EN_2                                 =>   LANE_SYNC_EN_2,                          
           P_LX_AMP_CTL_2[3:0]                              =>   LX_AMP_CTL_2[3:0],                          
           P_CIM_CLK_ALIGNER_RX2[7:0]                       =>   CIM_CLK_ALIGNER_RX2[7:0],
           P_CIM_CLK_ALIGNER_TX2[7:0]                       =>   CIM_CLK_ALIGNER_TX2[7:0],
           P_LX_DEEMP_CTL_2[2:0]                            =>   LX_DEEMP_CTL_2[2:0],                          
           P_LX_RX_CKDIV_2[1:0]                             =>   LX_RX_CKDIV_2[1:0],                          
           P_TX_CKDIV_2[1:0]                                =>   TX_CKDIV_2[1:0],                          
           P_TDATA_2[43:0]                                  =>   TDATA_2[43:0],                          
           P_LX_ELECIDLE_EN_2[1:0]                          =>   LX_ELECIDLE_EN_2[1:0],                          
           P_L3RXN                                          =>   L3RXN,                          
           P_L3RXP                                          =>   L3RXP,                          
           P_LX_LFD_FRCORE_3                                =>   LX_LFD_FRCORE_3,                          
           P_LX_RX_CKDIV_DYNSEL_3                           =>   LX_RX_CKDIV_DYNSEL_3,                          
           P_PCS_RX_RSTN_3                                  =>   PCS_RX_RSTN_3,                          
           P_PCS_TX_RSTN_3                                  =>   PCS_TX_RSTN_3,                          
           P_RX3_CLK_FR_CORE                                =>   RX3_CLK_FR_CORE,                          
           P_RX_PLL_RSTN_3                                  =>   RX_PLL_RSTN_3,                          
           P_RX_PMA_RSTN_3                                  =>   RX_PMA_RSTN_3,                          
           P_RX_REF_CLK_3                                   =>   RX_REF_CLK_3,                          
           P_TX3_CLK_FR_CORE                                =>   TX3_CLK_FR_CORE,                          
           P_TX_PMA_RSTN_3                                  =>   TX_PMA_RSTN_3,                          
           P_LANE_SYNC_EN_3                                 =>   LANE_SYNC_EN_3,                          
           P_LX_AMP_CTL_3[3:0]                              =>   LX_AMP_CTL_3[3:0],                          
           P_CIM_CLK_ALIGNER_RX3[7:0]                       =>   CIM_CLK_ALIGNER_RX3[7:0],                          
           P_CIM_CLK_ALIGNER_TX3[7:0]                       =>   CIM_CLK_ALIGNER_TX3[7:0],
           P_LX_DEEMP_CTL_3[2:0]                            =>   LX_DEEMP_CTL_3[2:0],
           P_LX_RX_CKDIV_3[1:0]                             =>   LX_RX_CKDIV_3[1:0],
           P_TX_CKDIV_3[1:0]                                =>   TX_CKDIV_3[1:0],
           P_TDATA_3[43:0]                                  =>   TDATA_3[43:0],                          
           P_LX_ELECIDLE_EN_3[1:0]                          =>   LX_ELECIDLE_EN_3[1:0],                          
           P_LX_ELECIDLE_EN_MSB[3:0]                        =>   LX_ELECIDLE_EN_MSB[3:0],                          
           P_LX_BISTLB_EN[3:0]                              =>   LX_BISTLB_EN[3:0],                          
           P_LX_TX_LFMODE[3:0]                              =>   LX_TX_LFMODE[3:0],                          
           P_CIM_CLK_START_ALIGN_TX[3:0]                    =>   CIM_CLK_START_ALIGN_TX[3:0] ,                          
           P_CIM_CLK_START_ALIGN_RX[3:0]                    =>   CIM_CLK_START_ALIGN_RX[3:0],                          
           P_TX_LANE_POWERUP[3:0]                           =>   TX_LANE_POWERUP[3:0],                          
           P_RX_LANE_POWERUP[3:0]                           =>   RX_LANE_POWERUP[3:0],                          
           P_CIM_CLK_DYN_DLY_SEL_TX[3:0]                    =>   CIM_CLK_DYN_DLY_SEL_TX[3:0],                          
           P_LX_RXDCT_EN[3:0]                               =>   LX_RXDCT_EN[3:0],                          
           P_CIM_CLK_DYN_DLY_SEL_RX[3:0]                    =>   CIM_CLK_DYN_DLY_SEL_RX[3:0],                          
           P_LX_EXTLB_EN[3:0]                               =>   LX_EXTLB_EN[3:0],                          
           P_PCS_WORD_ALIGN_EN[3:0]                         =>   PCS_WORD_ALIGN_EN[3:0],                          
           P_PCS_FAREND_LOOP[3:0]                           =>   PCS_FAREND_LOOP[3:0],                          
           P_PCS_NEAREND_LOOP[3:0]                          =>   PCS_NEAREND_LOOP[3:0],                          
           P_CEB_ADETECT_EN[3:0]                            =>   CEB_ADETECT_EN[3:0],                          
           P_PCS_MCB_EXT_EN[3:0]                            =>   PCS_MCB_EXT_EN[3:0],                          
           P_RX_POLARITY_INVERT[3:0]                        =>   RX_POLARITY_INVERT[3:0],                          
           P_REFCKN                                         =>   REFCKN,                          
           P_REFCKP                                         =>   REFCKP,                          
           P_TEST_CLK                                       =>   TEST_CLK,                          
           P_TEST_MODE                                      =>   TEST_MODE,                          
           P_TEST_RSTN                                      =>   TEST_RSTN,                          
           P_TEST_SE                                        =>   TEST_SE,                          
           P_TEST_SI0                                       =>   TEST_SI0,                          
           P_TEST_SI1                                       =>   TEST_SI1,                          
           P_TEST_SI2                                       =>   TEST_SI2,                          
           P_TEST_SI3                                       =>   TEST_SI3,                          
           P_TEST_SI4                                       =>   TEST_SI4,                          
           P_TEST_SI5                                       =>   TEST_SI5,                          
           P_TEST_SI6                                       =>   TEST_SI6,                          
           P_TEST_SI7                                       =>   TEST_SI7,
           P_COMPRESSION_MODE                               =>   COMPRESSION_MODE,                          
           P_PLL_RESET                                      =>   PLL_RESET,                          
           P_PLL_BYPASS                                     =>   PLL_BYPASS,                          
           P_CFG_CLK                                        =>   CFG_CLK,                          
           P_CFG_ENABLE                                     =>   CFG_ENABLE,                          
           P_CFG_RSTN                                       =>   CFG_RSTN,                          
           P_CFG_WRITE                                      =>   CFG_WRITE,                          
           P_CFG_ADDR[15:0]                                 =>   CFG_ADDR[15:0],                          
           P_CFG_WDATA[7:0]                                 =>   CFG_WDATA[7:0],                          
           P_AFTER_CTC_RCLK_EN_CIN                          =>   AFTER_CTC_RCLK_EN_CIN,                          
           P_AFTER_CTC_RCLK_EN_GB_CIN                       =>   AFTER_CTC_RCLK_EN_GB_CIN,                          
           P_APATTERN_MATCH_LSB_CIN                         =>   APATTERN_MATCH_LSB_CIN,                          
           P_APATTERN_MATCH_MSB_CIN                         =>   APATTERN_MATCH_MSB_CIN,                          
           P_APATTERN_SEACHING_PROC_CIN                     =>   APATTERN_SEACHING_PROC_CIN,                          
           P_APATTERN_STATUS_CIN                            =>   APATTERN_STATUS_CIN,                          
           P_BRIDGE_RCLK_EN_CIN                             =>   BRIDGE_RCLK_EN_CIN,                          
           P_BRIDGE_TCLK_EN_CIN                             =>   BRIDGE_TCLK_EN_CIN,                          
           P_CB_RCLK_EN_CIN                                 =>   CB_RCLK_EN_CIN,                          
           P_PCS_TCLK_EN_CIN                                =>   PCS_TCLK_EN_CIN,                          
           P_RFIFO_EN_AFTER_CTC_CIN                         =>   RFIFO_EN_AFTER_CTC_CIN,                          
           P_RFIFO_EN_AFTER_CTC_GB_CIN                      =>   RFIFO_EN_AFTER_CTC_GB_CIN,                          
           P_RFIFO_EN_BRIDGE_CIN                            =>   RFIFO_EN_BRIDGE_CIN,                          
           P_RFIFO_EN_CB_CIN                                =>   RFIFO_EN_CB_CIN,                          
           P_SKIP_ADD_LSB_MCB_CIN                           =>   SKIP_ADD_LSB_MCB_CIN,                          
           P_SKIP_ADD_MCB_CIN                               =>   SKIP_ADD_MCB_CIN,                          
           P_SKIP_DEL_LSB_MCB_CIN                           =>   SKIP_DEL_LSB_MCB_CIN,                          
           P_SKIP_DEL_MCB_CIN                               =>   SKIP_DEL_MCB_CIN,
           P_CTC_RD_FIFO_CIN                                =>   CTC_RD_FIFO_CIN,
           P_TFIFO_EN_BRIDGE_CIN                            =>   TFIFO_EN_BRIDGE_CIN,                          
           P_TFIFO_EN_PCS_TX_CIN                            =>   TFIFO_EN_PCS_TX_CIN,                          
           P_MCB_CLK_FRNQ                                   =>   MCB_CLK_FRNQ,                          
           P_HSST_RSTN                                      =>   HSST_RSTN,                          
           P_PLL_REF_CLK                                    =>   PLL_REF_CLK,                          
           P_PLL_RSTN                                       =>   PLL_RSTN,                          
           P_PLLPOWERDOWN                                   =>   PLLPOWERDOWN,                          
           P_QUAD_PWRUP                                     =>   QUAD_PWRUP,                          
           P_SYNC_TOGGLE                                    =>   SYNC_TOGGLE,                          
           P_TXCKDIV_DYNSEL                                 =>   TXCKDIV_DYNSEL,                          
           P_L0TXN                                          =>   L0TXN,                          
           P_L0TXP                                          =>   L0TXP,                          
           P_RDATA_0[46:0]                                  =>   RDATA_0[46:0],                          
           P_LX_ALOS_STA_0                                  =>   LX_ALOS_STA_0,                          
           P_LX_CDR_ALIGN_0                                 =>   LX_CDR_ALIGN_0,                          
           P_LX_LFO_0                                       =>   LX_LFO_0,                          
           P_LX_OOB_STA_0                                   =>   LX_OOB_STA_0,                          
           P_LX_RXDCT_DONE_0                                =>   LX_RXDCT_DONE_0,                          
           P_LX_RXDCT_OUT_0                                 =>   LX_RXDCT_OUT_0,
           P_L1TXN                                          =>   L1TXN,                          
           P_L1TXP                                          =>   L1TXP,                          
           P_RDATA_1[46:0]                                  =>   RDATA_1[46:0],                          
           P_LX_ALOS_STA_1                                  =>   LX_ALOS_STA_1,                          
           P_LX_CDR_ALIGN_1                                 =>   LX_CDR_ALIGN_1,                          
           P_LX_LFO_1                                       =>   LX_LFO_1,                          
           P_LX_OOB_STA_1                                   =>   LX_OOB_STA_1,
           P_LX_RXDCT_DONE_1                                =>   LX_RXDCT_DONE_1,                          
           P_LX_RXDCT_OUT_1                                 =>   LX_RXDCT_OUT_1,                          
           P_L2TXN                                          =>   L2TXN,                          
           P_L2TXP                                          =>   L2TXP,                          
           P_RDATA_2[46:0]                                  =>   RDATA_2[46:0],                          
           P_LX_ALOS_STA_2                                  =>   LX_ALOS_STA_2,                          
           P_LX_CDR_ALIGN_2                                 =>   LX_CDR_ALIGN_2,                          
           P_LX_LFO_2                                       =>   LX_LFO_2,                          
           P_LX_OOB_STA_2                                   =>   LX_OOB_STA_2,                          
           P_LX_RXDCT_DONE_2                                =>   LX_RXDCT_DONE_2,                          
           P_LX_RXDCT_OUT_2                                 =>   LX_RXDCT_OUT_2,                          
           P_L3TXN                                          =>   L3TXN,                          
           P_L3TXP                                          =>   L3TXP,                          
           P_RDATA_3[46:0]                                  =>   RDATA_3[46:0],                          
           P_LX_ALOS_STA_3                                  =>   LX_ALOS_STA_3,                          
           P_LX_CDR_ALIGN_3                                 =>   LX_CDR_ALIGN_3,                          
           P_LX_LFO_3                                       =>   LX_LFO_3,                          
           P_LX_OOB_STA_3                                   =>   LX_OOB_STA_3,                          
           P_LX_RXDCT_DONE_3                                =>   LX_RXDCT_DONE_3,                          
           P_LX_RXDCT_OUT_3                                 =>   LX_RXDCT_OUT_3,                          
           P_CLK2CORE_RX[3:0]                               =>   CLK2CORE_RX[3:0],                          
           P_ALIGN_TX[3:0]                                  =>   ALIGN_TX[3:0],                          
           P_ALIGN_RX[3:0]                                  =>   ALIGN_RX[3:0],                          
           P_CLK2CORE_TX[3:0]                               =>   CLK2CORE_TX[3:0],                          
           P_PCS_RX_MCB_STATUS[3:0]                         =>   PCS_RX_MCB_STATUS[3:0],                          
           P_PCS_LSM_SYNCED[3:0]                            =>   PCS_LSM_SYNCED[3:0],                          
           P_REXT                                           =>   REXT,                          
           P_TEST_SO0                                       =>   TEST_SO0,                          
           P_TEST_SO1                                       =>   TEST_SO1,                          
           P_TEST_SO2                                       =>   TEST_SO2,                          
           P_TEST_SO3                                       =>   TEST_SO3,                          
           P_TEST_SO4                                       =>   TEST_SO4,                          
           P_TEST_SO5                                       =>   TEST_SO5,                          
           P_TEST_SO6                                       =>   TEST_SO6,                          
           P_TEST_SO7                                       =>   TEST_SO7,                          
           P_CFG_INT                                        =>   CFG_INT,                          
           P_CFG_READY                                      =>   CFG_READY,                          
           P_CFG_RDATA[7:0]                                 =>   CFG_RDATA[7:0],                          
           P_AFTER_CTC_RCLK_EN_COUT                         =>   AFTER_CTC_RCLK_EN_COUT,                          
           P_AFTER_CTC_RCLK_EN_GB_COUT                      =>   AFTER_CTC_RCLK_EN_GB_COUT,                          
           P_APATTERN_MATCH_LSB_COUT                        =>   APATTERN_MATCH_LSB_COUT,                          
           P_APATTERN_MATCH_MSB_COUT                        =>   APATTERN_MATCH_MSB_COUT,                          
           P_APATTERN_SEACHING_PROC_COUT                    =>   APATTERN_SEACHING_PROC_COUT,                          
           P_APATTERN_STATUS_COUT                           =>   APATTERN_STATUS_COUT,                          
           P_BRIDGE_RCLK_EN_COUT                            =>   BRIDGE_RCLK_EN_COUT,                          
           P_BRIDGE_TCLK_EN_COUT                            =>   BRIDGE_TCLK_EN_COUT,                          
           P_CB_RCLK_EN_COUT                                =>   CB_RCLK_EN_COUT,                          
           P_PCS_TCLK_EN_COUT                               =>   PCS_TCLK_EN_COUT,                          
           P_RFIFO_EN_AFTER_CTC_COUT                        =>   RFIFO_EN_AFTER_CTC_COUT,                          
           P_RFIFO_EN_AFTER_CTC_GB_COUT                     =>   RFIFO_EN_AFTER_CTC_GB_COUT,                          
           P_RFIFO_EN_BRIDGE_COUT                           =>   RFIFO_EN_BRIDGE_COUT,                          
           P_RFIFO_EN_CB_COUT                               =>   RFIFO_EN_CB_COUT,                          
           P_SKIP_ADD_LSB_MCB_COUT                          =>   SKIP_ADD_LSB_MCB_COUT,                          
           P_SKIP_ADD_MCB_COUT                              =>   SKIP_ADD_MCB_COUT,                          
           P_SKIP_DEL_LSB_MCB_COUT                          =>   SKIP_DEL_LCB_MCB_COUT,                  
           P_SKIP_DEL_MCB_COUT                              =>   SKIP_DEL_MCB_COUT,                          
           P_CTC_RD_FIFO_COUT                               =>   CTC_RD_FIFO_COUT,                          
           P_TFIFO_EN_BRIDGE_COUT                           =>   TFIFO_EN_BRIDGE_COUT,                          
           P_TFIFO_EN_PCS_TX_COUT                           =>   TFIFO_EN_PCS_TX_COUT,                          
           P_PLL_LOCK                                       =>   PLL_LOCK,                          
           P_REFCK2CORE                                     =>   REFCK2CORE,                          
           P_TSO_LS_OUT                                     =>   TSO_LS_OUT,
           P_REFCK_2NMQ                                     =>   REFCK_2NMQ,  
           P_REFCK_2NPQ                                     =>   REFCK_2NPQ,  
           P_REFCK_FRNMQ                                    =>   REFCK_FRNMQ,
           P_REFCK_FRNPQ                                    =>   REFCK_FRNPQ
           
        );
};
/*******************************************************************************

  Device    [HSST]

  Author    [xiawei]

  Abstract  [Configure the configuration bits based on the value of config parameter]

  Revision History:

********************************************************************************/
configuration cfg of HSST
{
    if (PCS_CH0_BYPASS_WORD_ALIGN == "FALSE")
    {
        SC_PCS_CH0_BYPASS_WORD_ALIGN_1 := 1'b0;
    }
    else if (PCS_CH0_BYPASS_WORD_ALIGN == "TRUE")
    {
        SC_PCS_CH0_BYPASS_WORD_ALIGN_1 := 1'b1;
    }

    if (PCS_CH0_BYPASS_DENC == "FALSE")
    {
        SC_PCS_CH0_BYPASS_DENC_2 := 1'b0;
    }
    else if (PCS_CH0_BYPASS_DENC == "TRUE")
    {
        SC_PCS_CH0_BYPASS_DENC_2 := 1'b1;
    }

    if (PCS_CH0_BYPASS_BONDING == "FALSE")
    {
        SC_PCS_CH0_BYPASS_BONDING_3 := 1'b0;
    }
    else if (PCS_CH0_BYPASS_BONDING == "TRUE")
    {
        SC_PCS_CH0_BYPASS_BONDING_3 := 1'b1;
    }

    if (PCS_CH0_BYPASS_CTC == "FALSE")
    {
        SC_PCS_CH0_BYPASS_CTC_4 := 1'b0;
    }
    else if (PCS_CH0_BYPASS_CTC == "TRUE")
    {
        SC_PCS_CH0_BYPASS_CTC_4 := 1'b1;
    }

    if (PCS_CH0_BYPASS_GEAR == "FALSE")
    {
        SC_PCS_CH0_BYPASS_GEAR_5 := 1'b0;
    }
    else if (PCS_CH0_BYPASS_GEAR == "TRUE")
    {
        SC_PCS_CH0_BYPASS_GEAR_5 := 1'b1;
    }

    if (PCS_CH0_BYPASS_BRIDGE == "FALSE")
    {
        SC_PCS_CH0_BYPASS_BRIDGE_6 := 1'b0;
    }
    else if (PCS_CH0_BYPASS_BRIDGE == "TRUE")
    {
        SC_PCS_CH0_BYPASS_BRIDGE_6 := 1'b1;
    }

    if (PCS_CH0_DATA_MODE == "X8")
    {
        SC_PCS_CH0_DATA_MODE_8 := 1'b0;
    }
    else if (PCS_CH0_DATA_MODE == "X10")
    {
        SC_PCS_CH0_DATA_MODE_8 := 1'b0;
    }
    else if (PCS_CH0_DATA_MODE == "X16")
    {
        SC_PCS_CH0_DATA_MODE_8 := 1'b1;
    }
    else if (PCS_CH0_DATA_MODE == "X20")
    {
        SC_PCS_CH0_DATA_MODE_8 := 1'b1;
    }

    if (PCS_CH0_RX_POLARITY_INV == "DELAY")
    {
        SC_PCS_CH0_RX_POLARITY_INV_10_9 := 2'b00;
    }
    else if (PCS_CH0_RX_POLARITY_INV == "BIT_POLARITY_INVERION")
    {
        SC_PCS_CH0_RX_POLARITY_INV_10_9 := 2'b01;
    }
    else if (PCS_CH0_RX_POLARITY_INV == "BIT_REVERSAL")
    {
        SC_PCS_CH0_RX_POLARITY_INV_10_9 := 2'b10;
    }
    else if (PCS_CH0_RX_POLARITY_INV == "BOTH")
    {
        SC_PCS_CH0_RX_POLARITY_INV_10_9 := 2'b11;
    }

    if (PCS_CH0_ALIGN_MODE == "1GB")
    {
        SC_PCS_CH0_ALIGN_MODE_12_11 := 2'b00;
    }
    else if (PCS_CH0_ALIGN_MODE == "10GB")
    {
        SC_PCS_CH0_ALIGN_MODE_12_11 := 2'b01;
    }
    else if (PCS_CH0_ALIGN_MODE == "RAPIDIO")
    {
        SC_PCS_CH0_ALIGN_MODE_12_11 := 2'b10;
    }
    else if (PCS_CH0_ALIGN_MODE == "OUTSIDE")
    {
        SC_PCS_CH0_ALIGN_MODE_12_11 := 2'b11;
    }

    if (PCS_CH0_SAMP_16B == "X16")
    {
        SC_PCS_CH0_SAMP_16B_13 := 1'b1;
    }
    else if (PCS_CH0_SAMP_16B == "X20")
    {
        SC_PCS_CH0_SAMP_16B_13 := 1'b0;
    }

    if (PCS_CH0_COMMA_REG0 >= 0 &&  PCS_CH0_COMMA_REG0<= 1023)
    {
          SC_PCS_CH0_COMMA_REG0_25_16 := to_unsigned(PCS_CH0_COMMA_REG0,10);
    }

    if (PCS_CH0_COMMA_MASK >= 0 &&  PCS_CH0_COMMA_MASK<= 1023)
    {
          SC_PCS_CH0_COMMA_MASK_35_26 := to_unsigned(PCS_CH0_COMMA_MASK,10);
    }

    if (PCS_CH0_CEB_MODE == "10GB")
    {
        SC_PCS_CH0_CEB_MODE_37_36 := 2'b00;
    }
    else if (PCS_CH0_CEB_MODE == "RAPIDIO")
    {
        SC_PCS_CH0_CEB_MODE_37_36 := 2'b01;
    }
    else if (PCS_CH0_CEB_MODE == "OUTSIDE")
    {
        SC_PCS_CH0_CEB_MODE_37_36 := 2'b10;
    }

    if (PCS_CH0_CTC_MODE == "1SKIP")
    {
        SC_PCS_CH0_CTC_MODE_39_38 := 2'b00;
    }
    else if (PCS_CH0_CTC_MODE == "2SKIP")
    {
        SC_PCS_CH0_CTC_MODE_39_38 := 2'b01;
    }
    else if (PCS_CH0_CTC_MODE == "4SKIP")
    {
        SC_PCS_CH0_CTC_MODE_39_38 := 2'b11;
    }

    if (PCS_CH0_A_REG >= 0 &&  PCS_CH0_A_REG<= 255)
    {
        SC_PCS_CH0_A_REG_47_40 := to_unsigned(PCS_CH0_A_REG,8);
    }

    if (PCS_CH0_GE_AUTO_EN == "FALSE")
    {
        SC_PCS_CH0_GE_AUTO_EN_49 := 1'b0;
    }
    else if (PCS_CH0_GE_AUTO_EN == "TRUE")
    {
        SC_PCS_CH0_GE_AUTO_EN_49 := 1'b1;
    }

    if (PCS_CH0_SKIP_REG0 >= 0 &&  PCS_CH0_SKIP_REG0<= 1023)
    {
        SC_PCS_CH0_SKIP_REG0_59_50 := to_unsigned(PCS_CH0_SKIP_REG0,10);
    }

    if (PCS_CH0_SKIP_REG1 >= 0 &&  PCS_CH0_SKIP_REG1<= 1023)
    {
        SC_PCS_CH0_SKIP_REG1_69_60 := to_unsigned(PCS_CH0_SKIP_REG1,10);
    }

    if (PCS_CH0_SKIP_REG2 >= 0 &&  PCS_CH0_SKIP_REG2<= 1023)
    {
        SC_PCS_CH0_SKIP_REG2_79_70 := to_unsigned(PCS_CH0_SKIP_REG2,10);
    }

    if (PCS_CH0_SKIP_REG3 >= 0 &&  PCS_CH0_SKIP_REG3<= 1023)
    {
        SC_PCS_CH0_SKIP_REG3_89_80 := to_unsigned(PCS_CH0_SKIP_REG3,10);
    }

    if (PCS_CH0_DEC_DUAL == "FALSE")
    {
        SC_PCS_CH0_DEC_DUAL_90 := 1'b0;
    }
    else if (PCS_CH0_DEC_DUAL == "TRUE")
    {
        SC_PCS_CH0_DEC_DUAL_90 := 1'b1;
    }

    if (PCS_CH0_SPLIT == "FALSE")
    {
        SC_PCS_CH0_SPLIT_91 := 1'b0;
    }
    else if (PCS_CH0_SPLIT == "TRUE")
    {
        SC_PCS_CH0_SPLIT_91 := 1'b1;
    }

    if (PCS_CH0_FIFOFLAG_CTC == "FALSE")
    {
        SC_PCS_CH0_FIFOFLAG_CTC_92 := 1'b0;
    }
    else if (PCS_CH0_FIFOFLAG_CTC == "TRUE")
    {
        SC_PCS_CH0_FIFOFLAG_CTC_92 := 1'b1;
    }

    if (PCS_CH0_COMMA_DET_MODE == "COMMA_PATTERN")
    {
        SC_PCS_CH0_COMMA_DET_MODE_93 := 1'b0;
    }
    else if (PCS_CH0_COMMA_DET_MODE == "RX_CLK_SLIP")
    {
        SC_PCS_CH0_COMMA_DET_MODE_93 := 1'b1;
    }

    if (PCS_CH0_ERRDETECT_SILENCE == "FALSE")
    {
        SC_PCS_CH0_ERRDETECT_SILENCE_94 := 1'b0;
    }
    else if (PCS_CH0_ERRDETECT_SILENCE == "TRUE")
    {
        SC_PCS_CH0_ERRDETECT_SILENCE_94 := 1'b1;
    }

    if (PCS_CH0_PMA_RCLK_POLINV == "PMA_RCLK")
    {
        SC_PCS_CH0_PMA_RCLK_POLINV_96 := 1'b0;
    }
    else if (PCS_CH0_PMA_RCLK_POLINV == "REVERSE_OF_PMA_RCLK")
    {
        SC_PCS_CH0_PMA_RCLK_POLINV_96 := 1'b1;
    }

    if (PCS_CH0_PCS_RCLK_SEL == "PMA_RCLK")
    {
        SC_PCS_CH0_PCS_RCLK_SEL_97 := 1'b0;
    }
    else if (PCS_CH0_PCS_RCLK_SEL == "PMA_TCLK")
    {
        SC_PCS_CH0_PCS_RCLK_SEL_97 := 1'b1;
    }

    if (PCS_CH0_MCB_RCLK_POLINV == "MCB_RCLK")
    {
        SC_PCS_CH0_MCB_RCLK_POLINV_98 := 1'b0;
    }
    else if (PCS_CH0_MCB_RCLK_POLINV == "REVERSE_OF_MCB_RCLK")
    {
        SC_PCS_CH0_MCB_RCLK_POLINV_98 := 1'b1;
    }

    if (PCS_CH0_CB_RCLK_SEL == "PMA_RCLK")
    {
        SC_PCS_CH0_CB_RCLK_SEL_100_99 := 2'b00;
    }
    else if (PCS_CH0_CB_RCLK_SEL == "PMA_TCLK")
    {
        SC_PCS_CH0_CB_RCLK_SEL_100_99 := 2'b01;
    }
    else if (PCS_CH0_CB_RCLK_SEL == "MCB_RCLK")
    {
        SC_PCS_CH0_CB_RCLK_SEL_100_99 := 2'b10;
    }

    if (PCS_CH0_AFTER_CTC_RCLK_SEL == "PMA_RCLK")
    {
        SC_PCS_CH0_AFTER_CTC_RCLK_SEL_102_101 := 2'b00;
    }
    else if (PCS_CH0_AFTER_CTC_RCLK_SEL == "PMA_TCLK")
    {
        SC_PCS_CH0_AFTER_CTC_RCLK_SEL_102_101 := 2'b01;
    }
    else if (PCS_CH0_AFTER_CTC_RCLK_SEL == "MCB_RCLK")
    {
        SC_PCS_CH0_AFTER_CTC_RCLK_SEL_102_101 := 2'b10;
    }

    if (PCS_CH0_RCLK_POLINV == "RCLK")
    {
        SC_PCS_CH0_RCLK_POLINV_103 := 1'b0;
    }
    else if (PCS_CH0_RCLK_POLINV == "REVERSE_OF_RCLK")
    {
        SC_PCS_CH0_RCLK_POLINV_103 := 1'b1;
    }

    if (PCS_CH0_BRIDGE_RCLK_SEL == "PMA_RCLK")
    {
        SC_PCS_CH0_BRIDGE_RCLK_SEL_105_104 := 2'b00;
    }
    else if (PCS_CH0_BRIDGE_RCLK_SEL == "PMA_TCLK")
    {
        SC_PCS_CH0_BRIDGE_RCLK_SEL_105_104 := 2'b01;
    }
    else if (PCS_CH0_BRIDGE_RCLK_SEL == "MCB_RCLK")
    {
        SC_PCS_CH0_BRIDGE_RCLK_SEL_105_104 := 2'b10;
    }
    else if (PCS_CH0_BRIDGE_RCLK_SEL == "RCLK")
    {
        SC_PCS_CH0_BRIDGE_RCLK_SEL_105_104 := 2'b11;
    }

    if (PCS_CH0_PCS_RCLK_EN == "FALSE")
    {
        SC_PCS_CH0_PCS_RCLK_EN_106 := 1'b0;
    }
    else if (PCS_CH0_PCS_RCLK_EN == "TRUE")
    {
        SC_PCS_CH0_PCS_RCLK_EN_106 := 1'b1;
    }

    if (PCS_CH0_CB_RCLK_EN == "FALSE")
    {
        SC_PCS_CH0_CB_RCLK_EN_107 := 1'b0;
    }
    else if (PCS_CH0_CB_RCLK_EN == "TRUE")
    {
        SC_PCS_CH0_CB_RCLK_EN_107 := 1'b1;
    }

    if (PCS_CH0_AFTER_CTC_RCLK_EN == "FALSE")
    {
        SC_PCS_CH0_AFTER_CTC_RCLK_EN_108 := 1'b0;
    }
    else if (PCS_CH0_AFTER_CTC_RCLK_EN == "TRUE")
    {
        SC_PCS_CH0_AFTER_CTC_RCLK_EN_108 := 1'b1;
    }

    if (PCS_CH0_AFTER_CTC_RCLK_EN_GB == "FALSE")
    {
        SC_PCS_CH0_AFTER_CTC_RCLK_EN_GB_109 := 1'b0;
    }
    else if (PCS_CH0_AFTER_CTC_RCLK_EN_GB == "TRUE")
    {
        SC_PCS_CH0_AFTER_CTC_RCLK_EN_GB_109 := 1'b1;
    }

    if (PCS_CH0_BRIDGE_RCLK_EN == "FALSE")
    {
        SC_PCS_CH0_BRIDGE_RCLK_EN_110 := 1'b0;
    }
    else if (PCS_CH0_BRIDGE_RCLK_EN == "TRUE")
    {
        SC_PCS_CH0_BRIDGE_RCLK_EN_110 := 1'b1;
    }

    if (PCS_CH0_PCS_RX_RSTN == "FALSE")
    {
        SC_PCS_CH0_PCS_RX_RSTN_112 := 1'b0;
    }
    else if (PCS_CH0_PCS_RX_RSTN == "TRUE")
    {
        SC_PCS_CH0_PCS_RX_RSTN_112 := 1'b1;
    }

    if (PCS_CH0_SLAVE == "MASTER")
    {
        SC_PCS_CH0_SLAVE_113 := 1'b0;
    }
    else if (PCS_CH0_SLAVE == "SLAVE")
    {
        SC_PCS_CH0_SLAVE_113 := 1'b1;
    }

    if (PCS_CH0_PCIE_SLAVE == "MASTER")
    {
        SC_PCS_CH0_PCIE_SLAVE_114 := 1'b0;
    }
    else if (PCS_CH0_PCIE_SLAVE == "SLAVE")
    {
        SC_PCS_CH0_PCIE_SLAVE_114 := 1'b1;
    }

    if (PCS_CH0_PCS_CB_RSTN == "FALSE")
    {
        SC_PCS_CH0_PCS_CB_RSTN_120 := 1'b1;
    }
    else if (PCS_CH0_PCS_CB_RSTN == "TRUE")
    {
        SC_PCS_CH0_PCS_CB_RSTN_120 := 1'b0;
    }

    if (PCS_CH0_TX_BYPASS_BRIDGE_UINT == "FALSE")
    {
        SC_PCS_CH0_TX_BYPASS_BRIDGE_UINT_129 := 1'b0;
    }
    else if (PCS_CH0_TX_BYPASS_BRIDGE_UINT == "TRUE")
    {
        SC_PCS_CH0_TX_BYPASS_BRIDGE_UINT_129 := 1'b1;
    }

    if (PCS_CH0_TX_BYPASS_GEAR == "FALSE")
    {
        SC_PCS_CH0_TX_BYPASS_GEAR_130 := 1'b0;
    }
    else if (PCS_CH0_TX_BYPASS_GEAR == "TRUE")
    {
        SC_PCS_CH0_TX_BYPASS_GEAR_130 := 1'b1;
    }

    if (PCS_CH0_TX_BYPASS_ENC == "FALSE")
    {
        SC_PCS_CH0_TX_BYPASS_ENC_131 := 1'b0;
    }
    else if (PCS_CH0_TX_BYPASS_ENC == "TRUE")
    {
        SC_PCS_CH0_TX_BYPASS_ENC_131 := 1'b1;
    }

    if (PCS_CH0_TX_BYPASS_BIT_SLIP == "FALSE")
    {
        SC_PCS_CH0_TX_BYPASS_BIT_SLIP_132 := 1'b0;
    }
    else if (PCS_CH0_TX_BYPASS_BIT_SLIP == "TRUE")
    {
        SC_PCS_CH0_TX_BYPASS_BIT_SLIP_132 := 1'b1;
    }

    if (PCS_CH0_TX_GEAR_SPLIT == "FALSE")
    {
        SC_PCS_CH0_TX_GEAR_SPLIT_136 := 1'b0;
    }
    else if (PCS_CH0_TX_GEAR_SPLIT == "TRUE")
    {
        SC_PCS_CH0_TX_GEAR_SPLIT_136 := 1'b1;
    }

    if (PCS_CH0_TX_DRIVE_REG_MODE == "NO_CHANGE")
    {
        SC_PCS_CH0_TX_DRIVE_REG_MODE_138_137 := 2'b00;
    }
    else if (PCS_CH0_TX_DRIVE_REG_MODE == "EN_POLARIY_REV")
    {
        SC_PCS_CH0_TX_DRIVE_REG_MODE_138_137 := 2'b01;
    }
    else if (PCS_CH0_TX_DRIVE_REG_MODE == "EN_BIT_REV")
    {
        SC_PCS_CH0_TX_DRIVE_REG_MODE_138_137 := 2'b10;
    }
    else if (PCS_CH0_TX_DRIVE_REG_MODE == "EN_BOTH")
    {
        SC_PCS_CH0_TX_DRIVE_REG_MODE_138_137 := 2'b11;
    }

    if (PCS_CH0_TX_BIT_SLIP_CYCLES >= 0 &&  PCS_CH0_TX_BIT_SLIP_CYCLES<= 31)
    {
        SC_PCS_CH0_TX_BIT_SLIP_CYCLES_143_139 := to_unsigned(PCS_CH0_TX_BIT_SLIP_CYCLES,5);
    }

    if (PCS_CH0_INT_TX_MASK_0 == "FALSE")
    {
        SC_PCS_CH0_INT_TX_MASK_0_144 := 1'b0;
    }
    else if (PCS_CH0_INT_TX_MASK_0 == "TRUE")
    {
        SC_PCS_CH0_INT_TX_MASK_0_144 := 1'b1;
    }

    if (PCS_CH0_INT_TX_MASK_1 == "FALSE")
    {
        SC_PCS_CH0_INT_TX_MASK_1_145 := 1'b0;
    }
    else if (PCS_CH0_INT_TX_MASK_1 == "TRUE")
    {
        SC_PCS_CH0_INT_TX_MASK_1_145 := 1'b1;
    }

    if (PCS_CH0_INT_TX_MASK_2 == "FALSE")
    {
        SC_PCS_CH0_INT_TX_MASK_2_146 := 1'b0;
    }
    else if (PCS_CH0_INT_TX_MASK_2 == "TRUE")
    {
        SC_PCS_CH0_INT_TX_MASK_2_146 := 1'b1;
    }

    if (PCS_CH0_INT_TX_CLR_0 == "FALSE")
    {
        SC_PCS_CH0_INT_TX_CLR_0_152 := 1'b0;
    }
    else if (PCS_CH0_INT_TX_CLR_0 == "TRUE")
    {
        SC_PCS_CH0_INT_TX_CLR_0_152 := 1'b1;
    }

    if (PCS_CH0_INT_TX_CLR_1 == "FALSE")
    {
        SC_PCS_CH0_INT_TX_CLR_1_153 := 1'b0;
    }
    else if (PCS_CH0_INT_TX_CLR_1 == "TRUE")
    {
        SC_PCS_CH0_INT_TX_CLR_1_153 := 1'b1;
    }

    if (PCS_CH0_INT_TX_CLR_2 == "FALSE")
    {
        SC_PCS_CH0_INT_TX_CLR_2_154 := 1'b0;
    }
    else if (PCS_CH0_INT_TX_CLR_2 == "TRUE")
    {
        SC_PCS_CH0_INT_TX_CLR_2_154 := 1'b1;
    }

    if (PCS_CH0_TX_PMA_TCLK_POLINV == "PMA_TCLK")
    {
        SC_PCS_CH0_TX_PMA_TCLK_POLINV_160 := 1'b0;
    }
    else if (PCS_CH0_TX_PMA_TCLK_POLINV == "REVERSE_OF_PMA_TCLK")
    {
        SC_PCS_CH0_TX_PMA_TCLK_POLINV_160 := 1'b1;
    }

    if (PCS_CH0_TX_PCS_CLK_EN_SEL == "FALSE")
    {
        SC_PCS_CH0_TX_PCS_CLK_EN_SEL_161 := 1'b0;
    }
    else if (PCS_CH0_TX_PCS_CLK_EN_SEL == "TRUE")
    {
        SC_PCS_CH0_TX_PCS_CLK_EN_SEL_161 := 1'b1;
    }

    if (PCS_CH0_TX_BRIDGE_TCLK_SEL == "PCS_TCLK")
    {
        SC_PCS_CH0_TX_BRIDGE_TCLK_SEL_162 := 1'b0;
    }
    else if (PCS_CH0_TX_BRIDGE_TCLK_SEL == "TCLK")
    {
        SC_PCS_CH0_TX_BRIDGE_TCLK_SEL_162 := 1'b1;
    }

    if (PCS_CH0_TX_TCLK_POLINV == "TCLK")
    {
        SC_PCS_CH0_TX_TCLK_POLINV_163 := 1'b0;
    }
    else if (PCS_CH0_TX_TCLK_POLINV == "REVERSE_OF_TCLK")
    {
        SC_PCS_CH0_TX_TCLK_POLINV_163 := 1'b1;
    }

    if (PCS_CH0_TX_PCS_TX_RSTN == "FALSE")
    {
        SC_PCS_CH0_TX_PCS_TX_RSTN_165 := 1'b0;
    }
    else if (PCS_CH0_TX_PCS_TX_RSTN == "TRUE")
    {
        SC_PCS_CH0_TX_PCS_TX_RSTN_165 := 1'b1;
    }

    if (PCS_CH0_TX_SLAVE == "SLAVE")
    {
        SC_PCS_CH0_TX_SLAVE_166 := 1'b1;
    }
    else if (PCS_CH0_TX_SLAVE == "MASTER")
    {
        SC_PCS_CH0_TX_SLAVE_166 := 1'b0;
    }

    if (PCS_CH0_TX_BRIDGE_CLK_EN_SEL == "FALSE")
    {
        SC_PCS_CH0_TX_BRIDGE_CLK_EN_SEL_167 := 1'b0;
    }
    else if (PCS_CH0_TX_BRIDGE_CLK_EN_SEL == "TRUE")
    {
        SC_PCS_CH0_TX_BRIDGE_CLK_EN_SEL_167 := 1'b1;
    }

    if (PCS_CH0_DATA_WIDTH_MODE == "X20")
    {
        SC_PCS_CH0_DATA_WIDTH_MODE_169_168 := 2'b00;
    }
    else if (PCS_CH0_DATA_WIDTH_MODE == "X16")
    {
        SC_PCS_CH0_DATA_WIDTH_MODE_169_168 := 2'b01;
    }
    else if (PCS_CH0_DATA_WIDTH_MODE == "X10")
    {
        SC_PCS_CH0_DATA_WIDTH_MODE_169_168 := 2'b10;
    }
    else if (PCS_CH0_DATA_WIDTH_MODE == "X8")
    {
        SC_PCS_CH0_DATA_WIDTH_MODE_169_168 := 2'b11;
    }

    if (PCS_CH0_TX_TCLK2FABRIC_SEL == "FALSE")
    {
        SC_PCS_CH0_TX_TCLK2FABRIC_SEL_176 := 1'b0;
    }
    else if (PCS_CH0_TX_TCLK2FABRIC_SEL == "TRUE")
    {
        SC_PCS_CH0_TX_TCLK2FABRIC_SEL_176 := 1'b1;
    }

    if (PCS_CH0_TX_OUTZZ == "FALSE")
    {
        SC_PCS_CH0_TX_OUTZZ_177 := 1'b0;
    }
    else if (PCS_CH0_TX_OUTZZ == "TRUE")
    {
        SC_PCS_CH0_TX_OUTZZ_177 := 1'b1;
    }

    if (PCS_CH0_ENC_DUAL == "FALSE")
    {
        SC_PCS_CH0_ENC_DUAL_178 := 1'b0;
    }
    else if (PCS_CH0_ENC_DUAL == "TRUE")
    {
        SC_PCS_CH0_ENC_DUAL_178 := 1'b1;
    }

    if (PCS_CH0_TX_BITSLIP_DATA_MODE == "X10")
    {
        SC_PCS_CH0_TX_BITSLIP_DATA_MODE_179 := 1'b0;
    }
    else if (PCS_CH0_TX_BITSLIP_DATA_MODE == "X20")
    {
        SC_PCS_CH0_TX_BITSLIP_DATA_MODE_179 := 1'b1;
    }

    if (PCS_CH0_COMMA_REG1 >= 0 &&  PCS_CH0_COMMA_REG1<= 1023)
    {
         SC_PCS_CH0_COMMA_REG1_193_184 := to_unsigned(PCS_CH0_COMMA_REG1,10);
    }

    if (PCS_CH0_RAPID_IMAX >= 0 &&  PCS_CH0_RAPID_IMAX<= 7)
    {
         SC_PCS_CH0_RAPID_IMAX_202_200 := to_unsigned(PCS_CH0_RAPID_IMAX,3);
    }

    if (PCS_CH0_RAPID_VMIN_1 >= 0 &&  PCS_CH0_RAPID_VMIN_1<= 255)
    {
         SC_PCS_CH0_RAPID_VMIN_1_215_208 := to_unsigned(PCS_CH0_RAPID_VMIN_1,8);
    }

    if (PCS_CH0_RAPID_VMIN_2 >= 0 &&  PCS_CH0_RAPID_VMIN_2<= 255)
    {
         SC_PCS_CH0_RAPID_VMIN_2_223_216 := to_unsigned(PCS_CH0_RAPID_VMIN_2,8);
    }

    if (PCS_CH0_RX_PRBS_MODE == "DISABLE")
    {
        SC_PCS_CH0_RX_PRBS_MODE_227_224 := 4'd0;
    }
    else if (PCS_CH0_RX_PRBS_MODE == "PRBS_7")
    {
        SC_PCS_CH0_RX_PRBS_MODE_227_224 := 4'd1;
    }
    else if (PCS_CH0_RX_PRBS_MODE == "PRBS_15")
    {
        SC_PCS_CH0_RX_PRBS_MODE_227_224 := 4'd2;
    }
    else if (PCS_CH0_RX_PRBS_MODE == "PRBS_23")
    {
        SC_PCS_CH0_RX_PRBS_MODE_227_224 := 4'd3;
    }
    else if (PCS_CH0_RX_PRBS_MODE == "PRBS_31")
    {
        SC_PCS_CH0_RX_PRBS_MODE_227_224 := 4'd4;
    }
    else if (PCS_CH0_RX_PRBS_MODE == "LONG_1")
    {
        SC_PCS_CH0_RX_PRBS_MODE_227_224 := 4'd5;
    }
    else if (PCS_CH0_RX_PRBS_MODE == "LONG_0")
    {
        SC_PCS_CH0_RX_PRBS_MODE_227_224 := 4'd6;
    }
    else if (PCS_CH0_RX_PRBS_MODE == "20UI")
    {
        SC_PCS_CH0_RX_PRBS_MODE_227_224 := 4'd7;
    }
    else if (PCS_CH0_RX_PRBS_MODE == "D10_2")
    {
        SC_PCS_CH0_RX_PRBS_MODE_227_224 := 4'd8;
    }
    else if (PCS_CH0_RX_PRBS_MODE == "PCIE")
    {
        SC_PCS_CH0_RX_PRBS_MODE_227_224 := 4'd9;
    }

    if (PCS_CH0_RX_ERRCNT_CLR == "FALSE")
    {
        SC_PCS_CH0_RX_ERRCNT_CLR_228 := 1'b0;
    }
    else if (PCS_CH0_RX_ERRCNT_CLR == "TRUE")
    {
        SC_PCS_CH0_RX_ERRCNT_CLR_228 := 1'b1;
    }

    if (PCS_CH0_TX_PRBS_MODE == "DISABLE")
    {
        SC_PCS_CH0_TX_PRBS_MODE_235_232 := 4'd0;
    }
    else if (PCS_CH0_TX_PRBS_MODE == "PRBS_7")
    {
        SC_PCS_CH0_TX_PRBS_MODE_235_232 := 4'd1;
    }
    else if (PCS_CH0_TX_PRBS_MODE == "PRBS_15")
    {
        SC_PCS_CH0_TX_PRBS_MODE_235_232 := 4'd2;
    }
    else if (PCS_CH0_TX_PRBS_MODE == "PRBS_23")
    {
        SC_PCS_CH0_TX_PRBS_MODE_235_232 := 4'd3;
    }
    else if (PCS_CH0_TX_PRBS_MODE == "PRBS_31")
    {
        SC_PCS_CH0_TX_PRBS_MODE_235_232 := 4'd4;
    }
    else if (PCS_CH0_TX_PRBS_MODE == "LONG_1")
    {
        SC_PCS_CH0_TX_PRBS_MODE_235_232 := 4'd5;
    }
    else if (PCS_CH0_TX_PRBS_MODE == "LONG_0")
    {
        SC_PCS_CH0_TX_PRBS_MODE_235_232 := 4'd6;
    }
    else if (PCS_CH0_TX_PRBS_MODE == "20UI")
    {
        SC_PCS_CH0_TX_PRBS_MODE_235_232 := 4'd7;
    }
    else if (PCS_CH0_TX_PRBS_MODE == "D10_2")
    {
        SC_PCS_CH0_TX_PRBS_MODE_235_232 := 4'd8;
    }
    else if (PCS_CH0_TX_PRBS_MODE == "PCIE")
    {
        SC_PCS_CH0_TX_PRBS_MODE_235_232 := 4'd9;
    }

    if (PCS_CH0_TX_INSERT_ER == "FALSE")
    {
        SC_PCS_CH0_TX_INSERT_ER_236 := 1'b0;
    }
    else if (PCS_CH0_TX_INSERT_ER == "TRUE")
    {
        SC_PCS_CH0_TX_INSERT_ER_236 := 1'b1;
    }

    if (PCS_CH0_ENABLE_PRBS_GEN == "FALSE")
    {
        SC_PCS_CH0_ENABLE_PRBS_GEN_237 := 1'b0;
    }
    else if (PCS_CH0_ENABLE_PRBS_GEN == "TRUE")
    {
        SC_PCS_CH0_ENABLE_PRBS_GEN_237 := 1'b1;
    }

    if (PCS_CH0_ERR_CNT >= 0 &&  PCS_CH0_ERR_CNT<= 255)
    {
         SC_PCS_CH0_ERR_CNT_247_240 := to_unsigned(PCS_CH0_ERR_CNT,8);
    }

    if (PCS_CH0_DEFAULT_RADDR >= 0 &&  PCS_CH0_DEFAULT_RADDR<= 15)
    {
         SC_PCS_CH0_DEFAULT_RADDR_251_248 := to_unsigned(PCS_CH0_DEFAULT_RADDR,4);
    }

    if (PCS_CH0_MASTER_CHECK_OFFSET >= 0 &&  PCS_CH0_MASTER_CHECK_OFFSET<= 15)
    {
         SC_PCS_CH0_MASTER_CHECK_OFFSET_255_252 := to_unsigned(PCS_CH0_MASTER_CHECK_OFFSET,4);
    }

    if (PCS_CH0_DELAY_SET >= 0 &&  PCS_CH0_DELAY_SET<= 15)
    {
         SC_PCS_CH0_DELAY_SET_259_256 := to_unsigned(PCS_CH0_DELAY_SET,4);
    }

    if (PCS_CH0_SEACH_OFFSET == "20BIT")
    {
        SC_PCS_CH0_SEACH_OFFSET_262_260 := 3'd0;
    }
    else if (PCS_CH0_SEACH_OFFSET == "30BIT")
    {
        SC_PCS_CH0_SEACH_OFFSET_262_260 := 3'd1;
    }
    else if (PCS_CH0_SEACH_OFFSET == "40BIT")
    {
        SC_PCS_CH0_SEACH_OFFSET_262_260 := 3'd2;
    }
    else if (PCS_CH0_SEACH_OFFSET == "50BIT")
    {
        SC_PCS_CH0_SEACH_OFFSET_262_260 := 3'd3;
    }
    else if (PCS_CH0_SEACH_OFFSET == "60BIT")
    {
        SC_PCS_CH0_SEACH_OFFSET_262_260 := 3'd4;
    }
    else if (PCS_CH0_SEACH_OFFSET == "70BIT")
    {
        SC_PCS_CH0_SEACH_OFFSET_262_260 := 3'd5;
    }

    if (PCS_CH0_CEB_RAPIDLS_MMAX >= 0 &&  PCS_CH0_CEB_RAPIDLS_MMAX<= 7)
    {
         SC_PCS_CH0_CEB_RAPIDLS_MMAX_266_264 := to_unsigned(PCS_CH0_CEB_RAPIDLS_MMAX,3);
    }

    if (PCS_CH0_CTC_AFULL >= 0 &&  PCS_CH0_CTC_AFULL<= 31)
    {
         SC_PCS_CH0_CTC_AFULL_276_272 := to_unsigned(PCS_CH0_CTC_AFULL,5);
    }

    if (PCS_CH0_CTC_AEMPTY >= 0 &&  PCS_CH0_CTC_AEMPTY<= 31)
    {
         SC_PCS_CH0_CTC_AEMPTY_284_280 := to_unsigned(PCS_CH0_CTC_AEMPTY,5);
    }

    if (PCS_CH0_FAR_LOOP == "FALSE")
    {
        SC_PCS_CH0_FAR_LOOP_288 := 1'b0;
    }
    else if (PCS_CH0_FAR_LOOP == "TRUE")
    {
        SC_PCS_CH0_FAR_LOOP_288 := 1'b1;
    }

    if (PCS_CH0_NEAR_LOOP == "FALSE")
    {
        SC_PCS_CH0_NEAR_LOOP_289 := 1'b0;
    }
    else if (PCS_CH0_NEAR_LOOP == "TRUE")
    {
        SC_PCS_CH0_NEAR_LOOP_289 := 1'b1;
    }

    if (PCS_CH0_INT_RX_MASK_0 == "FALSE")
    {
        SC_PCS_CH0_INT_RX_MASK_0_296 := 1'b0;
    }
    else if (PCS_CH0_INT_RX_MASK_0 == "TRUE")
    {
        SC_PCS_CH0_INT_RX_MASK_0_296 := 1'b1;
    }

    if (PCS_CH0_INT_RX_MASK_1 == "FALSE")
    {
        SC_PCS_CH0_INT_RX_MASK_1_297 := 1'b0;
    }
    else if (PCS_CH0_INT_RX_MASK_1 == "TRUE")
    {
        SC_PCS_CH0_INT_RX_MASK_1_297 := 1'b1;
    }

    if (PCS_CH0_INT_RX_MASK_2 == "FALSE")
    {
        SC_PCS_CH0_INT_RX_MASK_2_298 := 1'b0;
    }
    else if (PCS_CH0_INT_RX_MASK_2 == "TRUE")
    {
        SC_PCS_CH0_INT_RX_MASK_2_298 := 1'b1;
    }

    if (PCS_CH0_INT_RX_MASK_3 == "FALSE")
    {
        SC_PCS_CH0_INT_RX_MASK_3_299 := 1'b0;
    }
    else if (PCS_CH0_INT_RX_MASK_3 == "TRUE")
    {
        SC_PCS_CH0_INT_RX_MASK_3_299 := 1'b1;
    }

    if (PCS_CH0_INT_RX_MASK_4 == "FALSE")
    {
        SC_PCS_CH0_INT_RX_MASK_4_300 := 1'b0;
    }
    else if (PCS_CH0_INT_RX_MASK_4 == "TRUE")
    {
        SC_PCS_CH0_INT_RX_MASK_4_300 := 1'b1;
    }

    if (PCS_CH0_INT_RX_MASK_5 == "FALSE")
    {
        SC_PCS_CH0_INT_RX_MASK_5_301 := 1'b0;
    }
    else if (PCS_CH0_INT_RX_MASK_5 == "TRUE")
    {
        SC_PCS_CH0_INT_RX_MASK_5_301 := 1'b1;
    }

    if (PCS_CH0_INT_RX_MASK_6 == "FALSE")
    {
        SC_PCS_CH0_INT_RX_MASK_6_302 := 1'b0;
    }
    else if (PCS_CH0_INT_RX_MASK_6 == "TRUE")
    {
        SC_PCS_CH0_INT_RX_MASK_6_302 := 1'b1;
    }

    if (PCS_CH0_INT_RX_MASK_7 == "FALSE")
    {
        SC_PCS_CH0_INT_RX_MASK_7_303 := 1'b0;
    }
    else if (PCS_CH0_INT_RX_MASK_7 == "TRUE")
    {
        SC_PCS_CH0_INT_RX_MASK_7_303 := 1'b1;
    }

    if (PCS_CH0_INT_RX_CLR_0 == "FALSE")
    {
        SC_PCS_CH0_INT_RX_CLR_0_304 := 1'b0;
    }
    else if (PCS_CH0_INT_RX_CLR_0 == "TRUE")
    {
        SC_PCS_CH0_INT_RX_CLR_0_304 := 1'b1;
    }

    if (PCS_CH0_INT_RX_CLR_1 == "FALSE")
    {
        SC_PCS_CH0_INT_RX_CLR_1_305 := 1'b0;
    }
    else if (PCS_CH0_INT_RX_CLR_1 == "TRUE")
    {
        SC_PCS_CH0_INT_RX_CLR_1_305 := 1'b1;
    }

    if (PCS_CH0_INT_RX_CLR_2 == "FALSE")
    {
        SC_PCS_CH0_INT_RX_CLR_2_306 := 1'b0;
    }
    else if (PCS_CH0_INT_RX_CLR_2 == "TRUE")
    {
        SC_PCS_CH0_INT_RX_CLR_2_306 := 1'b1;
    }

    if (PCS_CH0_INT_RX_CLR_3 == "FALSE")
    {
        SC_PCS_CH0_INT_RX_CLR_3_307 := 1'b0;
    }
    else if (PCS_CH0_INT_RX_CLR_3 == "TRUE")
    {
        SC_PCS_CH0_INT_RX_CLR_3_307 := 1'b1;
    }

    if (PCS_CH0_INT_RX_CLR_4 == "FALSE")
    {
        SC_PCS_CH0_INT_RX_CLR_4_308 := 1'b0;
    }
    else if (PCS_CH0_INT_RX_CLR_4 == "TRUE")
    {
        SC_PCS_CH0_INT_RX_CLR_4_308 := 1'b1;
    }

    if (PCS_CH0_INT_RX_CLR_5 == "FALSE")
    {
        SC_PCS_CH0_INT_RX_CLR_5_309 := 1'b0;
    }
    else if (PCS_CH0_INT_RX_CLR_5 == "TRUE")
    {
        SC_PCS_CH0_INT_RX_CLR_5_309 := 1'b1;
    }

    if (PCS_CH0_INT_RX_CLR_6 == "FALSE")
    {
        SC_PCS_CH0_INT_RX_CLR_6_310 := 1'b0;
    }
    else if (PCS_CH0_INT_RX_CLR_6 == "TRUE")
    {
        SC_PCS_CH0_INT_RX_CLR_6_310 := 1'b1;
    }

    if (PCS_CH0_INT_RX_CLR_7 == "FALSE")
    {
        SC_PCS_CH0_INT_RX_CLR_7_311 := 1'b0;
    }
    else if (PCS_CH0_INT_RX_CLR_7 == "TRUE")
    {
        SC_PCS_CH0_INT_RX_CLR_7_311 := 1'b1;
    }

    if (PCS_CH1_BYPASS_WORD_ALIGN == "FALSE")
    {
        SC_PCS_CH1_BYPASS_WORD_ALIGN_1 := 1'b0;
    }
    else if (PCS_CH1_BYPASS_WORD_ALIGN == "TRUE")
    {
        SC_PCS_CH1_BYPASS_WORD_ALIGN_1 := 1'b1;
    }

    if (PCS_CH1_BYPASS_DENC == "FALSE")
    {
        SC_PCS_CH1_BYPASS_DENC_2 := 1'b0;
    }
    else if (PCS_CH1_BYPASS_DENC == "TRUE")
    {
        SC_PCS_CH1_BYPASS_DENC_2 := 1'b1;
    }

    if (PCS_CH1_BYPASS_BONDING == "FALSE")
    {
        SC_PCS_CH1_BYPASS_BONDING_3 := 1'b0;
    }
    else if (PCS_CH1_BYPASS_BONDING == "TRUE")
    {
        SC_PCS_CH1_BYPASS_BONDING_3 := 1'b1;
    }

    if (PCS_CH1_BYPASS_CTC == "FALSE")
    {
        SC_PCS_CH1_BYPASS_CTC_4 := 1'b0;
    }
    else if (PCS_CH1_BYPASS_CTC == "TRUE")
    {
        SC_PCS_CH1_BYPASS_CTC_4 := 1'b1;
    }

    if (PCS_CH1_BYPASS_GEAR == "FALSE")
    {
        SC_PCS_CH1_BYPASS_GEAR_5 := 1'b0;
    }
    else if (PCS_CH1_BYPASS_GEAR == "TRUE")
    {
        SC_PCS_CH1_BYPASS_GEAR_5 := 1'b1;
    }

    if (PCS_CH1_BYPASS_BRIDGE == "FALSE")
    {
        SC_PCS_CH1_BYPASS_BRIDGE_6 := 1'b0;
    }
    else if (PCS_CH1_BYPASS_BRIDGE == "TRUE")
    {
        SC_PCS_CH1_BYPASS_BRIDGE_6 := 1'b1;
    }

    if (PCS_CH1_DATA_MODE == "X8")
    {
        SC_PCS_CH1_DATA_MODE_8 := 1'b0;
    }
    else if (PCS_CH1_DATA_MODE == "X10")
    {
        SC_PCS_CH1_DATA_MODE_8 := 1'b0;
    }
    else if (PCS_CH1_DATA_MODE == "X16")
    {
        SC_PCS_CH1_DATA_MODE_8 := 1'b1;
    }
    else if (PCS_CH1_DATA_MODE == "X20")
    {
        SC_PCS_CH1_DATA_MODE_8 := 1'b1;
    }

    if (PCS_CH1_RX_POLARITY_INV == "DELAY")
    {
        SC_PCS_CH1_RX_POLARITY_INV_10_9 := 2'b00;
    }
    else if (PCS_CH1_RX_POLARITY_INV == "BIT_POLARITY_INVERION")
    {
        SC_PCS_CH1_RX_POLARITY_INV_10_9 := 2'b01;
    }
    else if (PCS_CH1_RX_POLARITY_INV == "BIT_REVERSAL")
    {
        SC_PCS_CH1_RX_POLARITY_INV_10_9 := 2'b10;
    }
    else if (PCS_CH1_RX_POLARITY_INV == "BOTH")
    {
        SC_PCS_CH1_RX_POLARITY_INV_10_9 := 2'b11;
    }

    if (PCS_CH1_ALIGN_MODE == "1GB")
    {
        SC_PCS_CH1_ALIGN_MODE_12_11 := 2'b00;
    }
    else if (PCS_CH1_ALIGN_MODE == "10GB")
    {
        SC_PCS_CH1_ALIGN_MODE_12_11 := 2'b01;
    }
    else if (PCS_CH1_ALIGN_MODE == "RAPIDIO")
    {
        SC_PCS_CH1_ALIGN_MODE_12_11 := 2'b10;
    }
    else if (PCS_CH1_ALIGN_MODE == "OUTSIDE")
    {
        SC_PCS_CH1_ALIGN_MODE_12_11 := 2'b11;
    }

    if (PCS_CH1_SAMP_16B == "X16")
    {
        SC_PCS_CH1_SAMP_16B_13 := 1'b1;
    }
    else if (PCS_CH1_SAMP_16B == "X20")
    {
        SC_PCS_CH1_SAMP_16B_13 := 1'b0;
    }

    if (PCS_CH1_COMMA_REG0 >= 0 &&  PCS_CH1_COMMA_REG0<= 1023)
    {
         SC_PCS_CH1_COMMA_REG0_25_16 := to_unsigned(PCS_CH1_COMMA_REG0,10);
    }

    if (PCS_CH1_COMMA_MASK >= 0 &&  PCS_CH1_COMMA_MASK<= 1023)
    {
        SC_PCS_CH1_COMMA_MASK_35_26  :=  to_unsigned(PCS_CH1_COMMA_MASK,10);
    }

    if (PCS_CH1_CEB_MODE == "10GB")
    {
        SC_PCS_CH1_CEB_MODE_37_36 := 2'b00;
    }
    else if (PCS_CH1_CEB_MODE == "RAPIDIO")
    {
        SC_PCS_CH1_CEB_MODE_37_36 := 2'b01;
    }
    else if (PCS_CH1_CEB_MODE == "OUTSIDE")
    {
        SC_PCS_CH1_CEB_MODE_37_36 := 2'b10;
    }

    if (PCS_CH1_CTC_MODE == "1SKIP")
    {
        SC_PCS_CH1_CTC_MODE_39_38 := 2'b00;
    }
    else if (PCS_CH1_CTC_MODE == "2SKIP")
    {
        SC_PCS_CH1_CTC_MODE_39_38 := 2'b01;
    }
    else if (PCS_CH1_CTC_MODE == "4SKIP")
    {
        SC_PCS_CH1_CTC_MODE_39_38 := 2'b11;
    }

    if (PCS_CH1_A_REG >= 0 &&  PCS_CH1_A_REG<= 255)
    {
         SC_PCS_CH1_A_REG_47_40 := to_unsigned(PCS_CH1_A_REG,8);
    }

    if (PCS_CH1_GE_AUTO_EN == "FALSE")
    {
        SC_PCS_CH1_GE_AUTO_EN_49 := 1'b0;
    }
    else if (PCS_CH1_GE_AUTO_EN == "TRUE")
    {
        SC_PCS_CH1_GE_AUTO_EN_49 := 1'b1;
    }

    if (PCS_CH1_SKIP_REG0 >= 0 &&  PCS_CH1_SKIP_REG0<= 1023)
    {
         SC_PCS_CH1_SKIP_REG0_59_50 := to_unsigned(PCS_CH1_SKIP_REG0,10);
    }

    if (PCS_CH1_SKIP_REG1 >= 0 &&  PCS_CH1_SKIP_REG1<= 1023)
    {
         SC_PCS_CH1_SKIP_REG1_69_60 := to_unsigned(PCS_CH1_SKIP_REG1,10);
    }

    if (PCS_CH1_SKIP_REG2 >= 0 &&  PCS_CH1_SKIP_REG2<= 1023)
    {
         SC_PCS_CH1_SKIP_REG2_79_70 := to_unsigned(PCS_CH1_SKIP_REG2,10);
    }

    if (PCS_CH1_SKIP_REG3 >= 0 &&  PCS_CH1_SKIP_REG3<= 1023)
    {
         SC_PCS_CH1_SKIP_REG3_89_80 := to_unsigned(PCS_CH1_SKIP_REG3,10);
    }

    if (PCS_CH1_DEC_DUAL == "FALSE")
    {
        SC_PCS_CH1_DEC_DUAL_90 := 1'b0;
    }
    else if (PCS_CH1_DEC_DUAL == "TRUE")
    {
        SC_PCS_CH1_DEC_DUAL_90 := 1'b1;
    }

    if (PCS_CH1_SPLIT == "FALSE")
    {
        SC_PCS_CH1_SPLIT_91 := 1'b0;
    }
    else if (PCS_CH1_SPLIT == "TRUE")
    {
        SC_PCS_CH1_SPLIT_91 := 1'b1;
    }

    if (PCS_CH1_FIFOFLAG_CTC == "FALSE")
    {
        SC_PCS_CH1_FIFOFLAG_CTC_92 := 1'b0;
    }
    else if (PCS_CH1_FIFOFLAG_CTC == "TRUE")
    {
        SC_PCS_CH1_FIFOFLAG_CTC_92 := 1'b1;
    }

    if (PCS_CH1_COMMA_DET_MODE == "COMMA_PATTERN")
    {
        SC_PCS_CH1_COMMA_DET_MODE_93 := 1'b0;
    }
    else if (PCS_CH1_COMMA_DET_MODE == "RX_CLK_SLIP")
    {
        SC_PCS_CH1_COMMA_DET_MODE_93 := 1'b1;
    }

    if (PCS_CH1_ERRDETECT_SILENCE == "FALSE")
    {
        SC_PCS_CH1_ERRDETECT_SILENCE_94 := 1'b0;
    }
    else if (PCS_CH1_ERRDETECT_SILENCE == "TRUE")
    {
        SC_PCS_CH1_ERRDETECT_SILENCE_94 := 1'b1;
    }

    if (PCS_CH1_PMA_RCLK_POLINV == "PMA_RCLK")
    {
        SC_PCS_CH1_PMA_RCLK_POLINV_96 := 1'b0;
    }
    else if (PCS_CH1_PMA_RCLK_POLINV == "REVERSE_OF_PMA_RCLK")
    {
        SC_PCS_CH1_PMA_RCLK_POLINV_96 := 1'b1;
    }

    if (PCS_CH1_PCS_RCLK_SEL == "PMA_RCLK")
    {
        SC_PCS_CH1_PCS_RCLK_SEL_97 := 1'b0;
    }
    else if (PCS_CH1_PCS_RCLK_SEL == "PMA_TCLK")
    {
        SC_PCS_CH1_PCS_RCLK_SEL_97 := 1'b1;
    }

    if (PCS_CH1_MCB_RCLK_POLINV == "MCB_RCLK")
    {
        SC_PCS_CH1_MCB_RCLK_POLINV_98 := 1'b0;
    }
    else if (PCS_CH1_MCB_RCLK_POLINV == "REVERSE_OF_MCB_RCLK")
    {
        SC_PCS_CH1_MCB_RCLK_POLINV_98 := 1'b1;
    }

    if (PCS_CH1_CB_RCLK_SEL == "PMA_RCLK")
    {
        SC_PCS_CH1_CB_RCLK_SEL_100_99 := 2'b00;
    }
    else if (PCS_CH1_CB_RCLK_SEL == "PMA_TCLK")
    {
        SC_PCS_CH1_CB_RCLK_SEL_100_99 := 2'b01;
    }
    else if (PCS_CH1_CB_RCLK_SEL == "MCB_RCLK")
    {
        SC_PCS_CH1_CB_RCLK_SEL_100_99 := 2'b10;
    }

    if (PCS_CH1_AFTER_CTC_RCLK_SEL == "PMA_RCLK")
    {
        SC_PCS_CH1_AFTER_CTC_RCLK_SEL_102_101 := 2'b00;
    }
    else if (PCS_CH1_AFTER_CTC_RCLK_SEL == "PMA_TCLK")
    {
        SC_PCS_CH1_AFTER_CTC_RCLK_SEL_102_101 := 2'b01;
    }
    else if (PCS_CH1_AFTER_CTC_RCLK_SEL == "MCB_RCLK")
    {
        SC_PCS_CH1_AFTER_CTC_RCLK_SEL_102_101 := 2'b10;
    }

    if (PCS_CH1_RCLK_POLINV == "RCLK")
    {
        SC_PCS_CH1_RCLK_POLINV_103 := 1'b0;
    }
    else if (PCS_CH1_RCLK_POLINV == "REVERSE_OF_RCLK")
    {
        SC_PCS_CH1_RCLK_POLINV_103 := 1'b1;
    }

    if (PCS_CH1_BRIDGE_RCLK_SEL == "PMA_RCLK")
    {
        SC_PCS_CH1_BRIDGE_RCLK_SEL_105_104 := 2'b00;
    }
    else if (PCS_CH1_BRIDGE_RCLK_SEL == "PMA_TCLK")
    {
        SC_PCS_CH1_BRIDGE_RCLK_SEL_105_104 := 2'b01;
    }
    else if (PCS_CH1_BRIDGE_RCLK_SEL == "MCB_RCLK")
    {
        SC_PCS_CH1_BRIDGE_RCLK_SEL_105_104 := 2'b10;
    }
    else if (PCS_CH1_BRIDGE_RCLK_SEL == "RCLK")
    {
        SC_PCS_CH1_BRIDGE_RCLK_SEL_105_104 := 2'b11;
    }

    if (PCS_CH1_PCS_RCLK_EN == "FALSE")
    {
        SC_PCS_CH1_PCS_RCLK_EN_106 := 1'b0;
    }
    else if (PCS_CH1_PCS_RCLK_EN == "TRUE")
    {
        SC_PCS_CH1_PCS_RCLK_EN_106 := 1'b1;
    }

    if (PCS_CH1_CB_RCLK_EN == "FALSE")
    {
        SC_PCS_CH1_CB_RCLK_EN_107 := 1'b0;
    }
    else if (PCS_CH1_CB_RCLK_EN == "TRUE")
    {
        SC_PCS_CH1_CB_RCLK_EN_107 := 1'b1;
    }

    if (PCS_CH1_AFTER_CTC_RCLK_EN == "FALSE")
    {
        SC_PCS_CH1_AFTER_CTC_RCLK_EN_108 := 1'b0;
    }
    else if (PCS_CH1_AFTER_CTC_RCLK_EN == "TRUE")
    {
        SC_PCS_CH1_AFTER_CTC_RCLK_EN_108 := 1'b1;
    }

    if (PCS_CH1_AFTER_CTC_RCLK_EN_GB == "FALSE")
    {
        SC_PCS_CH1_AFTER_CTC_RCLK_EN_GB_109 := 1'b0;
    }
    else if (PCS_CH1_AFTER_CTC_RCLK_EN_GB == "TRUE")
    {
        SC_PCS_CH1_AFTER_CTC_RCLK_EN_GB_109 := 1'b1;
    }

    if (PCS_CH1_BRIDGE_RCLK_EN == "FALSE")
    {
        SC_PCS_CH1_BRIDGE_RCLK_EN_110 := 1'b0;
    }
    else if (PCS_CH1_BRIDGE_RCLK_EN == "TRUE")
    {
        SC_PCS_CH1_BRIDGE_RCLK_EN_110 := 1'b1;
    }

    if (PCS_CH1_PCS_RX_RSTN == "FALSE")
    {
        SC_PCS_CH1_PCS_RX_RSTN_112 := 1'b0;
    }
    else if (PCS_CH1_PCS_RX_RSTN == "TRUE")
    {
        SC_PCS_CH1_PCS_RX_RSTN_112 := 1'b1;
    }

    if (PCS_CH1_SLAVE == "MASTER")
    {
        SC_PCS_CH1_SLAVE_113 := 1'b0;
    }
    else if (PCS_CH1_SLAVE == "SLAVE")
    {
        SC_PCS_CH1_SLAVE_113 := 1'b1;
    }

    if (PCS_CH1_PCIE_SLAVE == "MASTER")
    {
        SC_PCS_CH1_PCIE_SLAVE_114 := 1'b0;
    }
    else if (PCS_CH1_PCIE_SLAVE == "SLAVE")
    {
        SC_PCS_CH1_PCIE_SLAVE_114 := 1'b1;
    }

    if (PCS_CH1_PCS_CB_RSTN == "FALSE")
    {
        SC_PCS_CH1_PCS_CB_RSTN_120 := 1'b1;
    }
    else if (PCS_CH1_PCS_CB_RSTN == "TRUE")
    {
        SC_PCS_CH1_PCS_CB_RSTN_120 := 1'b0;
    }

    if (PCS_CH1_TX_BYPASS_BRIDGE_UINT == "FALSE")
    {
        SC_PCS_CH1_TX_BYPASS_BRIDGE_UINT_129 := 1'b0;
    }
    else if (PCS_CH1_TX_BYPASS_BRIDGE_UINT == "TRUE")
    {
        SC_PCS_CH1_TX_BYPASS_BRIDGE_UINT_129 := 1'b1;
    }

    if (PCS_CH1_TX_BYPASS_GEAR == "FALSE")
    {
        SC_PCS_CH1_TX_BYPASS_GEAR_130 := 1'b0;
    }
    else if (PCS_CH1_TX_BYPASS_GEAR == "TRUE")
    {
        SC_PCS_CH1_TX_BYPASS_GEAR_130 := 1'b1;
    }

    if (PCS_CH1_TX_BYPASS_ENC == "FALSE")
    {
        SC_PCS_CH1_TX_BYPASS_ENC_131 := 1'b0;
    }
    else if (PCS_CH1_TX_BYPASS_ENC == "TRUE")
    {
        SC_PCS_CH1_TX_BYPASS_ENC_131 := 1'b1;
    }

    if (PCS_CH1_TX_BYPASS_BIT_SLIP == "FALSE")
    {
        SC_PCS_CH1_TX_BYPASS_BIT_SLIP_132 := 1'b0;
    }
    else if (PCS_CH1_TX_BYPASS_BIT_SLIP == "TRUE")
    {
        SC_PCS_CH1_TX_BYPASS_BIT_SLIP_132 := 1'b1;
    }

    if (PCS_CH1_TX_GEAR_SPLIT == "FALSE")
    {
        SC_PCS_CH1_TX_GEAR_SPLIT_136 := 1'b0;
    }
    else if (PCS_CH1_TX_GEAR_SPLIT == "TRUE")
    {
        SC_PCS_CH1_TX_GEAR_SPLIT_136 := 1'b1;
    }

    if (PCS_CH1_TX_DRIVE_REG_MODE == "NO_CHANGE")
    {
        SC_PCS_CH1_TX_DRIVE_REG_MODE_138_137 := 2'b00;
    }
    else if (PCS_CH1_TX_DRIVE_REG_MODE == "EN_POLARIY_REV")
    {
        SC_PCS_CH1_TX_DRIVE_REG_MODE_138_137 := 2'b01;
    }
    else if (PCS_CH1_TX_DRIVE_REG_MODE == "EN_BIT_REV")
    {
        SC_PCS_CH1_TX_DRIVE_REG_MODE_138_137 := 2'b10;
    }
    else if (PCS_CH1_TX_DRIVE_REG_MODE == "EN_BOTH")
    {
        SC_PCS_CH1_TX_DRIVE_REG_MODE_138_137 := 2'b11;
    }

    if (PCS_CH1_TX_BIT_SLIP_CYCLES >= 0 &&  PCS_CH1_TX_BIT_SLIP_CYCLES<= 31)
    {
         SC_PCS_CH1_TX_BIT_SLIP_CYCLES_143_139 := to_unsigned(PCS_CH1_TX_BIT_SLIP_CYCLES,5);
    }

    if (PCS_CH1_INT_TX_MASK_0 == "FALSE")
    {
        SC_PCS_CH1_INT_TX_MASK_0_144 := 1'b0;
    }
    else if (PCS_CH1_INT_TX_MASK_0 == "TRUE")
    {
        SC_PCS_CH1_INT_TX_MASK_0_144 := 1'b1;
    }

    if (PCS_CH1_INT_TX_MASK_1 == "FALSE")
    {
        SC_PCS_CH1_INT_TX_MASK_1_145 := 1'b0;
    }
    else if (PCS_CH1_INT_TX_MASK_1 == "TRUE")
    {
        SC_PCS_CH1_INT_TX_MASK_1_145 := 1'b1;
    }

    if (PCS_CH1_INT_TX_MASK_2 == "FALSE")
    {
        SC_PCS_CH1_INT_TX_MASK_2_146 := 1'b0;
    }
    else if (PCS_CH1_INT_TX_MASK_2 == "TRUE")
    {
        SC_PCS_CH1_INT_TX_MASK_2_146 := 1'b1;
    }

    if (PCS_CH1_INT_TX_CLR_0 == "FALSE")
    {
        SC_PCS_CH1_INT_TX_CLR_0_152 := 1'b0;
    }
    else if (PCS_CH1_INT_TX_CLR_0 == "TRUE")
    {
        SC_PCS_CH1_INT_TX_CLR_0_152 := 1'b1;
    }

    if (PCS_CH1_INT_TX_CLR_1 == "FALSE")
    {
        SC_PCS_CH1_INT_TX_CLR_1_153 := 1'b0;
    }
    else if (PCS_CH1_INT_TX_CLR_1 == "TRUE")
    {
        SC_PCS_CH1_INT_TX_CLR_1_153 := 1'b1;
    }

    if (PCS_CH1_INT_TX_CLR_2 == "FALSE")
    {
        SC_PCS_CH1_INT_TX_CLR_2_154 := 1'b0;
    }
    else if (PCS_CH1_INT_TX_CLR_2 == "TRUE")
    {
        SC_PCS_CH1_INT_TX_CLR_2_154 := 1'b1;
    }

    if (PCS_CH1_TX_PMA_TCLK_POLINV == "PMA_TCLK")
    {
        SC_PCS_CH1_TX_PMA_TCLK_POLINV_160 := 1'b0;
    }
    else if (PCS_CH1_TX_PMA_TCLK_POLINV == "REVERSE_OF_PMA_TCLK")
    {
        SC_PCS_CH1_TX_PMA_TCLK_POLINV_160 := 1'b1;
    }

    if (PCS_CH1_TX_PCS_CLK_EN_SEL == "FALSE")
    {
        SC_PCS_CH1_TX_PCS_CLK_EN_SEL_161 := 1'b0;
    }
    else if (PCS_CH1_TX_PCS_CLK_EN_SEL == "TRUE")
    {
        SC_PCS_CH1_TX_PCS_CLK_EN_SEL_161 := 1'b1;
    }

    if (PCS_CH1_TX_BRIDGE_TCLK_SEL == "PCS_TCLK")
    {
        SC_PCS_CH1_TX_BRIDGE_TCLK_SEL_162 := 1'b0;
    }
    else if (PCS_CH1_TX_BRIDGE_TCLK_SEL == "TCLK")
    {
        SC_PCS_CH1_TX_BRIDGE_TCLK_SEL_162 := 1'b1;
    }

    if (PCS_CH1_TX_TCLK_POLINV == "TCLK")
    {
        SC_PCS_CH1_TX_TCLK_POLINV_163 := 1'b0;
    }
    else if (PCS_CH1_TX_TCLK_POLINV == "REVERSE_OF_TCLK")
    {
        SC_PCS_CH1_TX_TCLK_POLINV_163 := 1'b1;
    }

    if (PCS_CH1_TX_PCS_TX_RSTN == "FALSE")
    {
        SC_PCS_CH1_TX_PCS_TX_RSTN_165 := 1'b0;
    }
    else if (PCS_CH1_TX_PCS_TX_RSTN == "TRUE")
    {
        SC_PCS_CH1_TX_PCS_TX_RSTN_165 := 1'b1;
    }

    if (PCS_CH1_TX_SLAVE == "SLAVE")
    {
        SC_PCS_CH1_TX_SLAVE_166 := 1'b1;
    }
    else if (PCS_CH1_TX_SLAVE == "MASTER")
    {
        SC_PCS_CH1_TX_SLAVE_166 := 1'b0;
    }

    if (PCS_CH1_TX_BRIDGE_CLK_EN_SEL == "FALSE")
    {
        SC_PCS_CH1_TX_BRIDGE_CLK_EN_SEL_167 := 1'b0;
    }
    else if (PCS_CH1_TX_BRIDGE_CLK_EN_SEL == "TRUE")
    {
        SC_PCS_CH1_TX_BRIDGE_CLK_EN_SEL_167 := 1'b1;
    }

    if (PCS_CH1_DATA_WIDTH_MODE == "X20")
    {
        SC_PCS_CH1_DATA_WIDTH_MODE_169_168 := 2'b00;
    }
    else if (PCS_CH1_DATA_WIDTH_MODE == "X16")
    {
        SC_PCS_CH1_DATA_WIDTH_MODE_169_168 := 2'b01;
    }
    else if (PCS_CH1_DATA_WIDTH_MODE == "X10")
    {
        SC_PCS_CH1_DATA_WIDTH_MODE_169_168 := 2'b10;
    }
    else if (PCS_CH1_DATA_WIDTH_MODE == "X8")
    {
        SC_PCS_CH1_DATA_WIDTH_MODE_169_168 := 2'b11;
    }

    if (PCS_CH1_TX_TCLK2FABRIC_SEL == "FALSE")
    {
        SC_PCS_CH1_TX_TCLK2FABRIC_SEL_176 := 1'b0;
    }
    else if (PCS_CH1_TX_TCLK2FABRIC_SEL == "TRUE")
    {
        SC_PCS_CH1_TX_TCLK2FABRIC_SEL_176 := 1'b1;
    }

    if (PCS_CH1_TX_OUTZZ == "FALSE")
    {
        SC_PCS_CH1_TX_OUTZZ_177 := 1'b0;
    }
    else if (PCS_CH1_TX_OUTZZ == "TRUE")
    {
        SC_PCS_CH1_TX_OUTZZ_177 := 1'b1;
    }

    if (PCS_CH1_ENC_DUAL == "FALSE")
    {
        SC_PCS_CH1_ENC_DUAL_178 := 1'b0;
    }
    else if (PCS_CH1_ENC_DUAL == "TRUE")
    {
        SC_PCS_CH1_ENC_DUAL_178 := 1'b1;
    }

    if (PCS_CH1_TX_BITSLIP_DATA_MODE == "X10")
    {
        SC_PCS_CH1_TX_BITSLIP_DATA_MODE_179 := 1'b0;
    }
    else if (PCS_CH1_TX_BITSLIP_DATA_MODE == "X20")
    {
        SC_PCS_CH1_TX_BITSLIP_DATA_MODE_179 := 1'b1;
    }

    if (PCS_CH1_COMMA_REG1 >= 0 &&  PCS_CH1_COMMA_REG1<= 1023)
    {
         SC_PCS_CH1_COMMA_REG1_193_184 := to_unsigned(PCS_CH1_COMMA_REG1,10);
    }

    if (PCS_CH1_RAPID_IMAX >= 0 &&  PCS_CH1_RAPID_IMAX<= 7)
    {
         SC_PCS_CH1_RAPID_IMAX_202_200 := to_unsigned(PCS_CH1_RAPID_IMAX,3);
    }

    if (PCS_CH1_RAPID_VMIN_1 >= 0 &&  PCS_CH1_RAPID_VMIN_1<= 255)
    {
         SC_PCS_CH1_RAPID_VMIN_1_215_208 := to_unsigned(PCS_CH1_RAPID_VMIN_1,8);
    }

    if (PCS_CH1_RAPID_VMIN_2 >= 0 &&  PCS_CH1_RAPID_VMIN_2<= 255)
    {
         SC_PCS_CH1_RAPID_VMIN_2_223_216 := to_unsigned(PCS_CH1_RAPID_VMIN_2,8);
    }

    if (PCS_CH1_RX_PRBS_MODE == "DISABLE")
    {
        SC_PCS_CH1_RX_PRBS_MODE_227_224 := 4'd0;
    }
    else if (PCS_CH1_RX_PRBS_MODE == "PRBS_7")
    {
        SC_PCS_CH1_RX_PRBS_MODE_227_224 := 4'd1;
    }
    else if (PCS_CH1_RX_PRBS_MODE == "PRBS_15")
    {
        SC_PCS_CH1_RX_PRBS_MODE_227_224 := 4'd2;
    }
    else if (PCS_CH1_RX_PRBS_MODE == "PRBS_23")
    {
        SC_PCS_CH1_RX_PRBS_MODE_227_224 := 4'd3;
    }
    else if (PCS_CH1_RX_PRBS_MODE == "PRBS_31")
    {
        SC_PCS_CH1_RX_PRBS_MODE_227_224 := 4'd4;
    }
    else if (PCS_CH1_RX_PRBS_MODE == "LONG_1")
    {
        SC_PCS_CH1_RX_PRBS_MODE_227_224 := 4'd5;
    }
    else if (PCS_CH1_RX_PRBS_MODE == "LONG_0")
    {
        SC_PCS_CH1_RX_PRBS_MODE_227_224 := 4'd6;
    }
    else if (PCS_CH1_RX_PRBS_MODE == "20UI")
    {
        SC_PCS_CH1_RX_PRBS_MODE_227_224 := 4'd7;
    }
    else if (PCS_CH1_RX_PRBS_MODE == "D10_2")
    {
        SC_PCS_CH1_RX_PRBS_MODE_227_224 := 4'd8;
    }
    else if (PCS_CH1_RX_PRBS_MODE == "PCIE")
    {
        SC_PCS_CH1_RX_PRBS_MODE_227_224 := 4'd9;
    }

    if (PCS_CH1_RX_ERRCNT_CLR == "FALSE")
    {
        SC_PCS_CH1_RX_ERRCNT_CLR_228 := 1'b0;
    }
    else if (PCS_CH1_RX_ERRCNT_CLR == "TRUE")
    {
        SC_PCS_CH1_RX_ERRCNT_CLR_228 := 1'b1;
    }

    if (PCS_CH1_TX_PRBS_MODE == "DISABLE")
    {
        SC_PCS_CH1_TX_PRBS_MODE_235_232 := 4'd0;
    }
    else if (PCS_CH1_TX_PRBS_MODE == "PRBS_7")
    {
        SC_PCS_CH1_TX_PRBS_MODE_235_232 := 4'd1;
    }
    else if (PCS_CH1_TX_PRBS_MODE == "PRBS_15")
    {
        SC_PCS_CH1_TX_PRBS_MODE_235_232 := 4'd2;
    }
    else if (PCS_CH1_TX_PRBS_MODE == "PRBS_23")
    {
        SC_PCS_CH1_TX_PRBS_MODE_235_232 := 4'd3;
    }
    else if (PCS_CH1_TX_PRBS_MODE == "PRBS_31")
    {
        SC_PCS_CH1_TX_PRBS_MODE_235_232 := 4'd4;
    }
    else if (PCS_CH1_TX_PRBS_MODE == "LONG_1")
    {
        SC_PCS_CH1_TX_PRBS_MODE_235_232 := 4'd5;
    }
    else if (PCS_CH1_TX_PRBS_MODE == "LONG_0")
    {
        SC_PCS_CH1_TX_PRBS_MODE_235_232 := 4'd6;
    }
    else if (PCS_CH1_TX_PRBS_MODE == "20UI")
    {
        SC_PCS_CH1_TX_PRBS_MODE_235_232 := 4'd7;
    }
    else if (PCS_CH1_TX_PRBS_MODE == "D10_2")
    {
        SC_PCS_CH1_TX_PRBS_MODE_235_232 := 4'd8;
    }
    else if (PCS_CH1_TX_PRBS_MODE == "PCIE")
    {
        SC_PCS_CH1_TX_PRBS_MODE_235_232 := 4'd9;
    }

    if (PCS_CH1_TX_INSERT_ER == "FALSE")
    {
        SC_PCS_CH1_TX_INSERT_ER_236 := 1'b0;
    }
    else if (PCS_CH1_TX_INSERT_ER == "TRUE")
    {
        SC_PCS_CH1_TX_INSERT_ER_236 := 1'b1;
    }

    if (PCS_CH1_ENABLE_PRBS_GEN == "FALSE")
    {
        SC_PCS_CH1_ENABLE_PRBS_GEN_237 := 1'b0;
    }
    else if (PCS_CH1_ENABLE_PRBS_GEN == "TRUE")
    {
        SC_PCS_CH1_ENABLE_PRBS_GEN_237 := 1'b1;
    }

    if (PCS_CH1_ERR_CNT >= 0 &&  PCS_CH1_ERR_CNT<= 255)
    {
         SC_PCS_CH1_ERR_CNT_247_240 := to_unsigned(PCS_CH1_ERR_CNT,8);
    }

    if (PCS_CH1_DEFAULT_RADDR >= 0 &&  PCS_CH1_DEFAULT_RADDR<= 15)
    {
         SC_PCS_CH1_DEFAULT_RADDR_251_248 := to_unsigned(PCS_CH1_DEFAULT_RADDR,4);
    }

    if (PCS_CH1_MASTER_CHECK_OFFSET >= 0 &&  PCS_CH1_MASTER_CHECK_OFFSET<= 15)
    {
         SC_PCS_CH1_MASTER_CHECK_OFFSET_255_252 := to_unsigned(PCS_CH1_MASTER_CHECK_OFFSET,4);
    }

    if (PCS_CH1_DELAY_SET >= 0 &&  PCS_CH1_DELAY_SET<= 15)
    {
         SC_PCS_CH1_DELAY_SET_259_256 := to_unsigned(PCS_CH1_DELAY_SET,4);
    }

    if (PCS_CH1_SEACH_OFFSET == "20BIT")
    {
        SC_PCS_CH1_SEACH_OFFSET_262_260 := 3'd0;
    }
    else if (PCS_CH1_SEACH_OFFSET == "30BIT")
    {
        SC_PCS_CH1_SEACH_OFFSET_262_260 := 3'd1;
    }
    else if (PCS_CH1_SEACH_OFFSET == "40BIT")
    {
        SC_PCS_CH1_SEACH_OFFSET_262_260 := 3'd2;
    }
    else if (PCS_CH1_SEACH_OFFSET == "50BIT")
    {
        SC_PCS_CH1_SEACH_OFFSET_262_260 := 3'd3;
    }
    else if (PCS_CH1_SEACH_OFFSET == "60BIT")
    {
        SC_PCS_CH1_SEACH_OFFSET_262_260 := 3'd4;
    }
    else if (PCS_CH1_SEACH_OFFSET == "70BIT")
    {
        SC_PCS_CH1_SEACH_OFFSET_262_260 := 3'd5;
    }

    if (PCS_CH1_CEB_RAPIDLS_MMAX >= 0 &&  PCS_CH1_CEB_RAPIDLS_MMAX<= 7)
    {
         SC_PCS_CH1_CEB_RAPIDLS_MMAX_266_264 := to_unsigned(PCS_CH1_CEB_RAPIDLS_MMAX,3);
    }

    if (PCS_CH1_CTC_AFULL >= 0 &&  PCS_CH1_CTC_AFULL<= 31)
    {
         SC_PCS_CH1_CTC_AFULL_276_272 := to_unsigned(PCS_CH1_CTC_AFULL,5);
    }

    if (PCS_CH1_CTC_AEMPTY >= 0 &&  PCS_CH1_CTC_AEMPTY<= 31)
    {
         SC_PCS_CH1_CTC_AEMPTY_284_280 := to_unsigned(PCS_CH1_CTC_AEMPTY,5);
    }

    if (PCS_CH1_FAR_LOOP == "FALSE")
    {
        SC_PCS_CH1_FAR_LOOP_288 := 1'b0;
    }
    else if (PCS_CH1_FAR_LOOP == "TRUE")
    {
        SC_PCS_CH1_FAR_LOOP_288 := 1'b1;
    }

    if (PCS_CH1_NEAR_LOOP == "FALSE")
    {
        SC_PCS_CH1_NEAR_LOOP_289 := 1'b0;
    }
    else if (PCS_CH1_NEAR_LOOP == "TRUE")
    {
        SC_PCS_CH1_NEAR_LOOP_289 := 1'b1;
    }

    if (PCS_CH1_INT_RX_MASK_0 == "FALSE")
    {
        SC_PCS_CH1_INT_RX_MASK_0_296 := 1'b0;
    }
    else if (PCS_CH1_INT_RX_MASK_0 == "TRUE")
    {
        SC_PCS_CH1_INT_RX_MASK_0_296 := 1'b1;
    }

    if (PCS_CH1_INT_RX_MASK_1 == "FALSE")
    {
        SC_PCS_CH1_INT_RX_MASK_1_297 := 1'b0;
    }
    else if (PCS_CH1_INT_RX_MASK_1 == "TRUE")
    {
        SC_PCS_CH1_INT_RX_MASK_1_297 := 1'b1;
    }

    if (PCS_CH1_INT_RX_MASK_2 == "FALSE")
    {
        SC_PCS_CH1_INT_RX_MASK_2_298 := 1'b0;
    }
    else if (PCS_CH1_INT_RX_MASK_2 == "TRUE")
    {
        SC_PCS_CH1_INT_RX_MASK_2_298 := 1'b1;
    }

    if (PCS_CH1_INT_RX_MASK_3 == "FALSE")
    {
        SC_PCS_CH1_INT_RX_MASK_3_299 := 1'b0;
    }
    else if (PCS_CH1_INT_RX_MASK_3 == "TRUE")
    {
        SC_PCS_CH1_INT_RX_MASK_3_299 := 1'b1;
    }

    if (PCS_CH1_INT_RX_MASK_4 == "FALSE")
    {
        SC_PCS_CH1_INT_RX_MASK_4_300 := 1'b0;
    }
    else if (PCS_CH1_INT_RX_MASK_4 == "TRUE")
    {
        SC_PCS_CH1_INT_RX_MASK_4_300 := 1'b1;
    }

    if (PCS_CH1_INT_RX_MASK_5 == "FALSE")
    {
        SC_PCS_CH1_INT_RX_MASK_5_301 := 1'b0;
    }
    else if (PCS_CH1_INT_RX_MASK_5 == "TRUE")
    {
        SC_PCS_CH1_INT_RX_MASK_5_301 := 1'b1;
    }

    if (PCS_CH1_INT_RX_MASK_6 == "FALSE")
    {
        SC_PCS_CH1_INT_RX_MASK_6_302 := 1'b0;
    }
    else if (PCS_CH1_INT_RX_MASK_6 == "TRUE")
    {
        SC_PCS_CH1_INT_RX_MASK_6_302 := 1'b1;
    }

    if (PCS_CH1_INT_RX_MASK_7 == "FALSE")
    {
        SC_PCS_CH1_INT_RX_MASK_7_303 := 1'b0;
    }
    else if (PCS_CH1_INT_RX_MASK_7 == "TRUE")
    {
        SC_PCS_CH1_INT_RX_MASK_7_303 := 1'b1;
    }

    if (PCS_CH1_INT_RX_CLR_0 == "FALSE")
    {
        SC_PCS_CH1_INT_RX_CLR_0_304 := 1'b0;
    }
    else if (PCS_CH1_INT_RX_CLR_0 == "TRUE")
    {
        SC_PCS_CH1_INT_RX_CLR_0_304 := 1'b1;
    }

    if (PCS_CH1_INT_RX_CLR_1 == "FALSE")
    {
        SC_PCS_CH1_INT_RX_CLR_1_305 := 1'b0;
    }
    else if (PCS_CH1_INT_RX_CLR_1 == "TRUE")
    {
        SC_PCS_CH1_INT_RX_CLR_1_305 := 1'b1;
    }

    if (PCS_CH1_INT_RX_CLR_2 == "FALSE")
    {
        SC_PCS_CH1_INT_RX_CLR_2_306 := 1'b0;
    }
    else if (PCS_CH1_INT_RX_CLR_2 == "TRUE")
    {
        SC_PCS_CH1_INT_RX_CLR_2_306 := 1'b1;
    }

    if (PCS_CH1_INT_RX_CLR_3 == "FALSE")
    {
        SC_PCS_CH1_INT_RX_CLR_3_307 := 1'b0;
    }
    else if (PCS_CH1_INT_RX_CLR_3 == "TRUE")
    {
        SC_PCS_CH1_INT_RX_CLR_3_307 := 1'b1;
    }

    if (PCS_CH1_INT_RX_CLR_4 == "FALSE")
    {
        SC_PCS_CH1_INT_RX_CLR_4_308 := 1'b0;
    }
    else if (PCS_CH1_INT_RX_CLR_4 == "TRUE")
    {
        SC_PCS_CH1_INT_RX_CLR_4_308 := 1'b1;
    }

    if (PCS_CH1_INT_RX_CLR_5 == "FALSE")
    {
        SC_PCS_CH1_INT_RX_CLR_5_309 := 1'b0;
    }
    else if (PCS_CH1_INT_RX_CLR_5 == "TRUE")
    {
        SC_PCS_CH1_INT_RX_CLR_5_309 := 1'b1;
    }

    if (PCS_CH1_INT_RX_CLR_6 == "FALSE")
    {
        SC_PCS_CH1_INT_RX_CLR_6_310 := 1'b0;
    }
    else if (PCS_CH1_INT_RX_CLR_6 == "TRUE")
    {
        SC_PCS_CH1_INT_RX_CLR_6_310 := 1'b1;
    }

    if (PCS_CH1_INT_RX_CLR_7 == "FALSE")
    {
        SC_PCS_CH1_INT_RX_CLR_7_311 := 1'b0;
    }
    else if (PCS_CH1_INT_RX_CLR_7 == "TRUE")
    {
        SC_PCS_CH1_INT_RX_CLR_7_311 := 1'b1;
    }

    if (PCS_CH2_BYPASS_WORD_ALIGN == "FALSE")
    {
        SC_PCS_CH2_BYPASS_WORD_ALIGN_1 := 1'b0;
    }
    else if (PCS_CH2_BYPASS_WORD_ALIGN == "TRUE")
    {
        SC_PCS_CH2_BYPASS_WORD_ALIGN_1 := 1'b1;
    }

    if (PCS_CH2_BYPASS_DENC == "FALSE")
    {
        SC_PCS_CH2_BYPASS_DENC_2 := 1'b0;
    }
    else if (PCS_CH2_BYPASS_DENC == "TRUE")
    {
        SC_PCS_CH2_BYPASS_DENC_2 := 1'b1;
    }

    if (PCS_CH2_BYPASS_BONDING == "FALSE")
    {
        SC_PCS_CH2_BYPASS_BONDING_3 := 1'b0;
    }
    else if (PCS_CH2_BYPASS_BONDING == "TRUE")
    {
        SC_PCS_CH2_BYPASS_BONDING_3 := 1'b1;
    }

    if (PCS_CH2_BYPASS_CTC == "FALSE")
    {
        SC_PCS_CH2_BYPASS_CTC_4 := 1'b0;
    }
    else if (PCS_CH2_BYPASS_CTC == "TRUE")
    {
        SC_PCS_CH2_BYPASS_CTC_4 := 1'b1;
    }

    if (PCS_CH2_BYPASS_GEAR == "FALSE")
    {
        SC_PCS_CH2_BYPASS_GEAR_5 := 1'b0;
    }
    else if (PCS_CH2_BYPASS_GEAR == "TRUE")
    {
        SC_PCS_CH2_BYPASS_GEAR_5 := 1'b1;
    }

    if (PCS_CH2_BYPASS_BRIDGE == "FALSE")
    {
        SC_PCS_CH2_BYPASS_BRIDGE_6 := 1'b0;
    }
    else if (PCS_CH2_BYPASS_BRIDGE == "TRUE")
    {
        SC_PCS_CH2_BYPASS_BRIDGE_6 := 1'b1;
    }

    if (PCS_CH2_DATA_MODE == "X8")
    {
        SC_PCS_CH2_DATA_MODE_8 := 1'b0;
    }
    else if (PCS_CH2_DATA_MODE == "X10")
    {
        SC_PCS_CH2_DATA_MODE_8 := 1'b0;
    }
    else if (PCS_CH2_DATA_MODE == "X16")
    {
        SC_PCS_CH2_DATA_MODE_8 := 1'b1;
    }
    else if (PCS_CH2_DATA_MODE == "X20")
    {
        SC_PCS_CH2_DATA_MODE_8 := 1'b1;
    }

    if (PCS_CH2_RX_POLARITY_INV == "DELAY")
    {
        SC_PCS_CH2_RX_POLARITY_INV_10_9 := 2'b00;
    }
    else if (PCS_CH2_RX_POLARITY_INV == "BIT_POLARITY_INVERION")
    {
        SC_PCS_CH2_RX_POLARITY_INV_10_9 := 2'b01;
    }
    else if (PCS_CH2_RX_POLARITY_INV == "BIT_REVERSAL")
    {
        SC_PCS_CH2_RX_POLARITY_INV_10_9 := 2'b10;
    }
    else if (PCS_CH2_RX_POLARITY_INV == "BOTH")
    {
        SC_PCS_CH2_RX_POLARITY_INV_10_9 := 2'b11;
    }

    if (PCS_CH2_ALIGN_MODE == "1GB")
    {
        SC_PCS_CH2_ALIGN_MODE_12_11 := 2'b00;
    }
    else if (PCS_CH2_ALIGN_MODE == "10GB")
    {
        SC_PCS_CH2_ALIGN_MODE_12_11 := 2'b01;
    }
    else if (PCS_CH2_ALIGN_MODE == "RAPIDIO")
    {
        SC_PCS_CH2_ALIGN_MODE_12_11 := 2'b10;
    }
    else if (PCS_CH2_ALIGN_MODE == "OUTSIDE")
    {
        SC_PCS_CH2_ALIGN_MODE_12_11 := 2'b11;
    }

    if (PCS_CH2_SAMP_16B == "X16")
    {
        SC_PCS_CH2_SAMP_16B_13 := 1'b1;
    }
    else if (PCS_CH2_SAMP_16B == "X20")
    {
        SC_PCS_CH2_SAMP_16B_13 := 1'b0;
    }

    if (PCS_CH2_COMMA_REG0 >= 0 &&  PCS_CH2_COMMA_REG0<= 1023)
    {
         SC_PCS_CH2_COMMA_REG0_25_16 := to_unsigned(PCS_CH2_COMMA_REG0,10);
    }

    if (PCS_CH2_COMMA_MASK >= 0 &&  PCS_CH2_COMMA_MASK<= 1023)
    {
         SC_PCS_CH2_COMMA_MASK_35_26 := to_unsigned(PCS_CH2_COMMA_MASK,10);
    }

    if (PCS_CH2_CEB_MODE == "10GB")
    {
        SC_PCS_CH2_CEB_MODE_37_36 := 2'b00;
    }
    else if (PCS_CH2_CEB_MODE == "RAPIDIO")
    {
        SC_PCS_CH2_CEB_MODE_37_36 := 2'b01;
    }
    else if (PCS_CH2_CEB_MODE == "OUTSIDE")
    {
        SC_PCS_CH2_CEB_MODE_37_36 := 2'b10;
    }

    if (PCS_CH2_CTC_MODE == "1SKIP")
    {
        SC_PCS_CH2_CTC_MODE_39_38 := 2'b00;
    }
    else if (PCS_CH2_CTC_MODE == "2SKIP")
    {
        SC_PCS_CH2_CTC_MODE_39_38 := 2'b01;
    }
    else if (PCS_CH2_CTC_MODE == "4SKIP")
    {
        SC_PCS_CH2_CTC_MODE_39_38 := 2'b11;
    }

    if (PCS_CH2_A_REG >= 0 &&  PCS_CH2_A_REG<= 255)
    {
         SC_PCS_CH2_A_REG_47_40 := to_unsigned(PCS_CH2_A_REG,8);
    }

    if (PCS_CH2_GE_AUTO_EN == "FALSE")
    {
        SC_PCS_CH2_GE_AUTO_EN_49 := 1'b0;
    }
    else if (PCS_CH2_GE_AUTO_EN == "TRUE")
    {
        SC_PCS_CH2_GE_AUTO_EN_49 := 1'b1;
    }

    if (PCS_CH2_SKIP_REG0 >= 0 &&  PCS_CH2_SKIP_REG0<= 1023)
    {
         SC_PCS_CH2_SKIP_REG0_59_50 := to_unsigned(PCS_CH2_SKIP_REG0,10);
    }

    if (PCS_CH2_SKIP_REG1 >= 0 &&  PCS_CH2_SKIP_REG1<= 1023)
    {
         SC_PCS_CH2_SKIP_REG1_69_60 := to_unsigned(PCS_CH2_SKIP_REG1,10);
    }

    if (PCS_CH2_SKIP_REG2 >= 0 &&  PCS_CH2_SKIP_REG2<= 1023)
    {
         SC_PCS_CH2_SKIP_REG2_79_70 := to_unsigned(PCS_CH2_SKIP_REG2,10);
    }

    if (PCS_CH2_SKIP_REG3 >= 0 &&  PCS_CH2_SKIP_REG3<= 1023)
    {
         SC_PCS_CH2_SKIP_REG3_89_80 := to_unsigned(PCS_CH2_SKIP_REG3,10);
    }

    if (PCS_CH2_DEC_DUAL == "FALSE")
    {
        SC_PCS_CH2_DEC_DUAL_90 := 1'b0;
    }
    else if (PCS_CH2_DEC_DUAL == "TRUE")
    {
        SC_PCS_CH2_DEC_DUAL_90 := 1'b1;
    }

    if (PCS_CH2_SPLIT == "FALSE")
    {
        SC_PCS_CH2_SPLIT_91 := 1'b0;
    }
    else if (PCS_CH2_SPLIT == "TRUE")
    {
        SC_PCS_CH2_SPLIT_91 := 1'b1;
    }

    if (PCS_CH2_FIFOFLAG_CTC == "FALSE")
    {
        SC_PCS_CH2_FIFOFLAG_CTC_92 := 1'b0;
    }
    else if (PCS_CH2_FIFOFLAG_CTC == "TRUE")
    {
        SC_PCS_CH2_FIFOFLAG_CTC_92 := 1'b1;
    }

    if (PCS_CH2_COMMA_DET_MODE == "COMMA_PATTERN")
    {
        SC_PCS_CH2_COMMA_DET_MODE_93 := 1'b0;
    }
    else if (PCS_CH2_COMMA_DET_MODE == "RX_CLK_SLIP")
    {
        SC_PCS_CH2_COMMA_DET_MODE_93 := 1'b1;
    }

    if (PCS_CH2_ERRDETECT_SILENCE == "FALSE")
    {
        SC_PCS_CH2_ERRDETECT_SILENCE_94 := 1'b0;
    }
    else if (PCS_CH2_ERRDETECT_SILENCE == "TRUE")
    {
        SC_PCS_CH2_ERRDETECT_SILENCE_94 := 1'b1;
    }

    if (PCS_CH2_PMA_RCLK_POLINV == "PMA_RCLK")
    {
        SC_PCS_CH2_PMA_RCLK_POLINV_96 := 1'b0;
    }
    else if (PCS_CH2_PMA_RCLK_POLINV == "REVERSE_OF_PMA_RCLK")
    {
        SC_PCS_CH2_PMA_RCLK_POLINV_96 := 1'b1;
    }

    if (PCS_CH2_PCS_RCLK_SEL == "PMA_RCLK")
    {
        SC_PCS_CH2_PCS_RCLK_SEL_97 := 1'b0;
    }
    else if (PCS_CH2_PCS_RCLK_SEL == "PMA_TCLK")
    {
        SC_PCS_CH2_PCS_RCLK_SEL_97 := 1'b1;
    }

    if (PCS_CH2_MCB_RCLK_POLINV == "MCB_RCLK")
    {
        SC_PCS_CH2_MCB_RCLK_POLINV_98 := 1'b0;
    }
    else if (PCS_CH2_MCB_RCLK_POLINV == "REVERSE_OF_MCB_RCLK")
    {
        SC_PCS_CH2_MCB_RCLK_POLINV_98 := 1'b1;
    }

    if (PCS_CH2_CB_RCLK_SEL == "PMA_RCLK")
    {
        SC_PCS_CH2_CB_RCLK_SEL_100_99 := 2'b00;
    }
    else if (PCS_CH2_CB_RCLK_SEL == "PMA_TCLK")
    {
        SC_PCS_CH2_CB_RCLK_SEL_100_99 := 2'b01;
    }
    else if (PCS_CH2_CB_RCLK_SEL == "MCB_RCLK")
    {
        SC_PCS_CH2_CB_RCLK_SEL_100_99 := 2'b10;
    }

    if (PCS_CH2_AFTER_CTC_RCLK_SEL == "PMA_RCLK")
    {
        SC_PCS_CH2_AFTER_CTC_RCLK_SEL_102_101 := 2'b00;
    }
    else if (PCS_CH2_AFTER_CTC_RCLK_SEL == "PMA_TCLK")
    {
        SC_PCS_CH2_AFTER_CTC_RCLK_SEL_102_101 := 2'b01;
    }
    else if (PCS_CH2_AFTER_CTC_RCLK_SEL == "MCB_RCLK")
    {
        SC_PCS_CH2_AFTER_CTC_RCLK_SEL_102_101 := 2'b10;
    }

    if (PCS_CH2_RCLK_POLINV == "RCLK")
    {
        SC_PCS_CH2_RCLK_POLINV_103 := 1'b0;
    }
    else if (PCS_CH2_RCLK_POLINV == "REVERSE_OF_RCLK")
    {
        SC_PCS_CH2_RCLK_POLINV_103 := 1'b1;
    }

    if (PCS_CH2_BRIDGE_RCLK_SEL == "PMA_RCLK")
    {
        SC_PCS_CH2_BRIDGE_RCLK_SEL_105_104 := 2'b00;
    }
    else if (PCS_CH2_BRIDGE_RCLK_SEL == "PMA_TCLK")
    {
        SC_PCS_CH2_BRIDGE_RCLK_SEL_105_104 := 2'b01;
    }
    else if (PCS_CH2_BRIDGE_RCLK_SEL == "MCB_RCLK")
    {
        SC_PCS_CH2_BRIDGE_RCLK_SEL_105_104 := 2'b10;
    }
    else if (PCS_CH2_BRIDGE_RCLK_SEL == "RCLK")
    {
        SC_PCS_CH2_BRIDGE_RCLK_SEL_105_104 := 2'b11;
    }

    if (PCS_CH2_PCS_RCLK_EN == "FALSE")
    {
        SC_PCS_CH2_PCS_RCLK_EN_106 := 1'b0;
    }
    else if (PCS_CH2_PCS_RCLK_EN == "TRUE")
    {
        SC_PCS_CH2_PCS_RCLK_EN_106 := 1'b1;
    }

    if (PCS_CH2_CB_RCLK_EN == "FALSE")
    {
        SC_PCS_CH2_CB_RCLK_EN_107 := 1'b0;
    }
    else if (PCS_CH2_CB_RCLK_EN == "TRUE")
    {
        SC_PCS_CH2_CB_RCLK_EN_107 := 1'b1;
    }

    if (PCS_CH2_AFTER_CTC_RCLK_EN == "FALSE")
    {
        SC_PCS_CH2_AFTER_CTC_RCLK_EN_108 := 1'b0;
    }
    else if (PCS_CH2_AFTER_CTC_RCLK_EN == "TRUE")
    {
        SC_PCS_CH2_AFTER_CTC_RCLK_EN_108 := 1'b1;
    }

    if (PCS_CH2_AFTER_CTC_RCLK_EN_GB == "FALSE")
    {
        SC_PCS_CH2_AFTER_CTC_RCLK_EN_GB_109 := 1'b0;
    }
    else if (PCS_CH2_AFTER_CTC_RCLK_EN_GB == "TRUE")
    {
        SC_PCS_CH2_AFTER_CTC_RCLK_EN_GB_109 := 1'b1;
    }

    if (PCS_CH2_BRIDGE_RCLK_EN == "FALSE")
    {
        SC_PCS_CH2_BRIDGE_RCLK_EN_110 := 1'b0;
    }
    else if (PCS_CH2_BRIDGE_RCLK_EN == "TRUE")
    {
        SC_PCS_CH2_BRIDGE_RCLK_EN_110 := 1'b1;
    }

    if (PCS_CH2_PCS_RX_RSTN == "FALSE")
    {
        SC_PCS_CH2_PCS_RX_RSTN_112 := 1'b0;
    }
    else if (PCS_CH2_PCS_RX_RSTN == "TRUE")
    {
        SC_PCS_CH2_PCS_RX_RSTN_112 := 1'b1;
    }

    if (PCS_CH2_SLAVE == "MASTER")
    {
        SC_PCS_CH2_SLAVE_113 := 1'b0;
    }
    else if (PCS_CH2_SLAVE == "SLAVE")
    {
        SC_PCS_CH2_SLAVE_113 := 1'b1;
    }

    if (PCS_CH2_PCIE_SLAVE == "MASTER")
    {
        SC_PCS_CH2_PCIE_SLAVE_114 := 1'b0;
    }
    else if (PCS_CH2_PCIE_SLAVE == "SLAVE")
    {
        SC_PCS_CH2_PCIE_SLAVE_114 := 1'b1;
    }

    if (PCS_CH2_PCS_CB_RSTN == "FALSE")
    {
        SC_PCS_CH2_PCS_CB_RSTN_120 := 1'b1;
    }
    else if (PCS_CH2_PCS_CB_RSTN == "TRUE")
    {
        SC_PCS_CH2_PCS_CB_RSTN_120 := 1'b0;
    }

    if (PCS_CH2_TX_BYPASS_BRIDGE_UINT == "FALSE")
    {
        SC_PCS_CH2_TX_BYPASS_BRIDGE_UINT_129 := 1'b0;
    }
    else if (PCS_CH2_TX_BYPASS_BRIDGE_UINT == "TRUE")
    {
        SC_PCS_CH2_TX_BYPASS_BRIDGE_UINT_129 := 1'b1;
    }

    if (PCS_CH2_TX_BYPASS_GEAR == "FALSE")
    {
        SC_PCS_CH2_TX_BYPASS_GEAR_130 := 1'b0;
    }
    else if (PCS_CH2_TX_BYPASS_GEAR == "TRUE")
    {
        SC_PCS_CH2_TX_BYPASS_GEAR_130 := 1'b1;
    }

    if (PCS_CH2_TX_BYPASS_ENC == "FALSE")
    {
        SC_PCS_CH2_TX_BYPASS_ENC_131 := 1'b0;
    }
    else if (PCS_CH2_TX_BYPASS_ENC == "TRUE")
    {
        SC_PCS_CH2_TX_BYPASS_ENC_131 := 1'b1;
    }

    if (PCS_CH2_TX_BYPASS_BIT_SLIP == "FALSE")
    {
        SC_PCS_CH2_TX_BYPASS_BIT_SLIP_132 := 1'b0;
    }
    else if (PCS_CH2_TX_BYPASS_BIT_SLIP == "TRUE")
    {
        SC_PCS_CH2_TX_BYPASS_BIT_SLIP_132 := 1'b1;
    }

    if (PCS_CH2_TX_GEAR_SPLIT == "FALSE")
    {
        SC_PCS_CH2_TX_GEAR_SPLIT_136 := 1'b0;
    }
    else if (PCS_CH2_TX_GEAR_SPLIT == "TRUE")
    {
        SC_PCS_CH2_TX_GEAR_SPLIT_136 := 1'b1;
    }

    if (PCS_CH2_TX_DRIVE_REG_MODE == "NO_CHANGE")
    {
        SC_PCS_CH2_TX_DRIVE_REG_MODE_138_137 := 2'b00;
    }
    else if (PCS_CH2_TX_DRIVE_REG_MODE == "EN_POLARIY_REV")
    {
        SC_PCS_CH2_TX_DRIVE_REG_MODE_138_137 := 2'b01;
    }
    else if (PCS_CH2_TX_DRIVE_REG_MODE == "EN_BIT_REV")
    {
        SC_PCS_CH2_TX_DRIVE_REG_MODE_138_137 := 2'b10;
    }
    else if (PCS_CH2_TX_DRIVE_REG_MODE == "EN_BOTH")
    {
        SC_PCS_CH2_TX_DRIVE_REG_MODE_138_137 := 2'b11;
    }

    if (PCS_CH2_TX_BIT_SLIP_CYCLES >= 0 &&  PCS_CH2_TX_BIT_SLIP_CYCLES<= 31)
    {
         SC_PCS_CH2_TX_BIT_SLIP_CYCLES_143_139 := to_unsigned(PCS_CH2_TX_BIT_SLIP_CYCLES,5);
    }

    if (PCS_CH2_INT_TX_MASK_0 == "FALSE")
    {
        SC_PCS_CH2_INT_TX_MASK_0_144 := 1'b0;
    }
    else if (PCS_CH2_INT_TX_MASK_0 == "TRUE")
    {
        SC_PCS_CH2_INT_TX_MASK_0_144 := 1'b1;
    }

    if (PCS_CH2_INT_TX_MASK_1 == "FALSE")
    {
        SC_PCS_CH2_INT_TX_MASK_1_145 := 1'b0;
    }
    else if (PCS_CH2_INT_TX_MASK_1 == "TRUE")
    {
        SC_PCS_CH2_INT_TX_MASK_1_145 := 1'b1;
    }

    if (PCS_CH2_INT_TX_MASK_2 == "FALSE")
    {
        SC_PCS_CH2_INT_TX_MASK_2_146 := 1'b0;
    }
    else if (PCS_CH2_INT_TX_MASK_2 == "TRUE")
    {
        SC_PCS_CH2_INT_TX_MASK_2_146 := 1'b1;
    }

    if (PCS_CH2_INT_TX_CLR_0 == "FALSE")
    {
        SC_PCS_CH2_INT_TX_CLR_0_152 := 1'b0;
    }
    else if (PCS_CH2_INT_TX_CLR_0 == "TRUE")
    {
        SC_PCS_CH2_INT_TX_CLR_0_152 := 1'b1;
    }

    if (PCS_CH2_INT_TX_CLR_1 == "FALSE")
    {
        SC_PCS_CH2_INT_TX_CLR_1_153 := 1'b0;
    }
    else if (PCS_CH2_INT_TX_CLR_1 == "TRUE")
    {
        SC_PCS_CH2_INT_TX_CLR_1_153 := 1'b1;
    }

    if (PCS_CH2_INT_TX_CLR_2 == "FALSE")
    {
        SC_PCS_CH2_INT_TX_CLR_2_154 := 1'b0;
    }
    else if (PCS_CH2_INT_TX_CLR_2 == "TRUE")
    {
        SC_PCS_CH2_INT_TX_CLR_2_154 := 1'b1;
    }

    if (PCS_CH2_TX_PMA_TCLK_POLINV == "PMA_TCLK")
    {
        SC_PCS_CH2_TX_PMA_TCLK_POLINV_160 := 1'b0;
    }
    else if (PCS_CH2_TX_PMA_TCLK_POLINV == "REVERSE_OF_PMA_TCLK")
    {
        SC_PCS_CH2_TX_PMA_TCLK_POLINV_160 := 1'b1;
    }

    if (PCS_CH2_TX_PCS_CLK_EN_SEL == "FALSE")
    {
        SC_PCS_CH2_TX_PCS_CLK_EN_SEL_161 := 1'b0;
    }
    else if (PCS_CH2_TX_PCS_CLK_EN_SEL == "TRUE")
    {
        SC_PCS_CH2_TX_PCS_CLK_EN_SEL_161 := 1'b1;
    }

    if (PCS_CH2_TX_BRIDGE_TCLK_SEL == "PCS_TCLK")
    {
        SC_PCS_CH2_TX_BRIDGE_TCLK_SEL_162 := 1'b0;
    }
    else if (PCS_CH2_TX_BRIDGE_TCLK_SEL == "TCLK")
    {
        SC_PCS_CH2_TX_BRIDGE_TCLK_SEL_162 := 1'b1;
    }

    if (PCS_CH2_TX_TCLK_POLINV == "TCLK")
    {
        SC_PCS_CH2_TX_TCLK_POLINV_163 := 1'b0;
    }
    else if (PCS_CH2_TX_TCLK_POLINV == "REVERSE_OF_TCLK")
    {
        SC_PCS_CH2_TX_TCLK_POLINV_163 := 1'b1;
    }

    if (PCS_CH2_TX_PCS_TX_RSTN == "FALSE")
    {
        SC_PCS_CH2_TX_PCS_TX_RSTN_165 := 1'b0;
    }
    else if (PCS_CH2_TX_PCS_TX_RSTN == "TRUE")
    {
        SC_PCS_CH2_TX_PCS_TX_RSTN_165 := 1'b1;
    }

    if (PCS_CH2_TX_SLAVE == "SLAVE")
    {
        SC_PCS_CH2_TX_SLAVE_166 := 1'b1;
    }
    else if (PCS_CH2_TX_SLAVE == "MASTER")
    {
        SC_PCS_CH2_TX_SLAVE_166 := 1'b0;
    }

    if (PCS_CH2_TX_BRIDGE_CLK_EN_SEL == "FALSE")
    {
        SC_PCS_CH2_TX_BRIDGE_CLK_EN_SEL_167 := 1'b0;
    }
    else if (PCS_CH2_TX_BRIDGE_CLK_EN_SEL == "TRUE")
    {
        SC_PCS_CH2_TX_BRIDGE_CLK_EN_SEL_167 := 1'b1;
    }

    if (PCS_CH2_DATA_WIDTH_MODE == "X20")
    {
        SC_PCS_CH2_DATA_WIDTH_MODE_169_168 := 2'b00;
    }
    else if (PCS_CH2_DATA_WIDTH_MODE == "X16")
    {
        SC_PCS_CH2_DATA_WIDTH_MODE_169_168 := 2'b01;
    }
    else if (PCS_CH2_DATA_WIDTH_MODE == "X10")
    {
        SC_PCS_CH2_DATA_WIDTH_MODE_169_168 := 2'b10;
    }
    else if (PCS_CH2_DATA_WIDTH_MODE == "X8")
    {
        SC_PCS_CH2_DATA_WIDTH_MODE_169_168 := 2'b11;
    }

    if (PCS_CH2_TX_TCLK2FABRIC_SEL == "FALSE")
    {
        SC_PCS_CH2_TX_TCLK2FABRIC_SEL_176 := 1'b0;
    }
    else if (PCS_CH2_TX_TCLK2FABRIC_SEL == "TRUE")
    {
        SC_PCS_CH2_TX_TCLK2FABRIC_SEL_176 := 1'b1;
    }

    if (PCS_CH2_TX_OUTZZ == "FALSE")
    {
        SC_PCS_CH2_TX_OUTZZ_177 := 1'b0;
    }
    else if (PCS_CH2_TX_OUTZZ == "TRUE")
    {
        SC_PCS_CH2_TX_OUTZZ_177 := 1'b1;
    }

    if (PCS_CH2_ENC_DUAL == "FALSE")
    {
        SC_PCS_CH2_ENC_DUAL_178 := 1'b0;
    }
    else if (PCS_CH2_ENC_DUAL == "TRUE")
    {
        SC_PCS_CH2_ENC_DUAL_178 := 1'b1;
    }

    if (PCS_CH2_TX_BITSLIP_DATA_MODE == "X10")
    {
        SC_PCS_CH2_TX_BITSLIP_DATA_MODE_179 := 1'b0;
    }
    else if (PCS_CH2_TX_BITSLIP_DATA_MODE == "X20")
    {
        SC_PCS_CH2_TX_BITSLIP_DATA_MODE_179 := 1'b1;
    }

    if (PCS_CH2_COMMA_REG1 >= 0 &&  PCS_CH2_COMMA_REG1<= 1023)
    {
         SC_PCS_CH2_COMMA_REG1_193_184 := to_unsigned(PCS_CH2_COMMA_REG1,10);
    }

    if (PCS_CH2_RAPID_IMAX >= 0 &&  PCS_CH2_RAPID_IMAX<= 7)
    {
         SC_PCS_CH2_RAPID_IMAX_202_200 := to_unsigned(PCS_CH2_RAPID_IMAX,3);
    }

    if (PCS_CH2_RAPID_VMIN_1 >= 0 &&  PCS_CH2_RAPID_VMIN_1<= 255)
    {
         SC_PCS_CH2_RAPID_VMIN_1_215_208 := to_unsigned(PCS_CH2_RAPID_VMIN_1,8);
    }

    if (PCS_CH2_RAPID_VMIN_2 >= 0 &&  PCS_CH2_RAPID_VMIN_2<= 255)
    {
         SC_PCS_CH2_RAPID_VMIN_2_223_216 := to_unsigned(PCS_CH2_RAPID_VMIN_2,8);
    }

    if (PCS_CH2_RX_PRBS_MODE == "DISABLE")
    {
        SC_PCS_CH2_RX_PRBS_MODE_227_224 := 4'd0;
    }
    else if (PCS_CH2_RX_PRBS_MODE == "PRBS_7")
    {
        SC_PCS_CH2_RX_PRBS_MODE_227_224 := 4'd1;
    }
    else if (PCS_CH2_RX_PRBS_MODE == "PRBS_15")
    {
        SC_PCS_CH2_RX_PRBS_MODE_227_224 := 4'd2;
    }
    else if (PCS_CH2_RX_PRBS_MODE == "PRBS_23")
    {
        SC_PCS_CH2_RX_PRBS_MODE_227_224 := 4'd3;
    }
    else if (PCS_CH2_RX_PRBS_MODE == "PRBS_31")
    {
        SC_PCS_CH2_RX_PRBS_MODE_227_224 := 4'd4;
    }
    else if (PCS_CH2_RX_PRBS_MODE == "LONG_1")
    {
        SC_PCS_CH2_RX_PRBS_MODE_227_224 := 4'd5;
    }
    else if (PCS_CH2_RX_PRBS_MODE == "LONG_0")
    {
        SC_PCS_CH2_RX_PRBS_MODE_227_224 := 4'd6;
    }
    else if (PCS_CH2_RX_PRBS_MODE == "20UI")
    {
        SC_PCS_CH2_RX_PRBS_MODE_227_224 := 4'd7;
    }
    else if (PCS_CH2_RX_PRBS_MODE == "D10_2")
    {
        SC_PCS_CH2_RX_PRBS_MODE_227_224 := 4'd8;
    }
    else if (PCS_CH2_RX_PRBS_MODE == "PCIE")
    {
        SC_PCS_CH2_RX_PRBS_MODE_227_224 := 4'd9;
    }

    if (PCS_CH2_RX_ERRCNT_CLR == "FALSE")
    {
        SC_PCS_CH2_RX_ERRCNT_CLR_228 := 1'b0;
    }
    else if (PCS_CH2_RX_ERRCNT_CLR == "TRUE")
    {
        SC_PCS_CH2_RX_ERRCNT_CLR_228 := 1'b1;
    }

    if (PCS_CH2_TX_PRBS_MODE == "DISABLE")
    {
        SC_PCS_CH2_TX_PRBS_MODE_235_232 := 4'd0;
    }
    else if (PCS_CH2_TX_PRBS_MODE == "PRBS_7")
    {
        SC_PCS_CH2_TX_PRBS_MODE_235_232 := 4'd1;
    }
    else if (PCS_CH2_TX_PRBS_MODE == "PRBS_15")
    {
        SC_PCS_CH2_TX_PRBS_MODE_235_232 := 4'd2;
    }
    else if (PCS_CH2_TX_PRBS_MODE == "PRBS_23")
    {
        SC_PCS_CH2_TX_PRBS_MODE_235_232 := 4'd3;
    }
    else if (PCS_CH2_TX_PRBS_MODE == "PRBS_31")
    {
        SC_PCS_CH2_TX_PRBS_MODE_235_232 := 4'd4;
    }
    else if (PCS_CH2_TX_PRBS_MODE == "LONG_1")
    {
        SC_PCS_CH2_TX_PRBS_MODE_235_232 := 4'd5;
    }
    else if (PCS_CH2_TX_PRBS_MODE == "LONG_0")
    {
        SC_PCS_CH2_TX_PRBS_MODE_235_232 := 4'd6;
    }
    else if (PCS_CH2_TX_PRBS_MODE == "20UI")
    {
        SC_PCS_CH2_TX_PRBS_MODE_235_232 := 4'd7;
    }
    else if (PCS_CH2_TX_PRBS_MODE == "D10_2")
    {
        SC_PCS_CH2_TX_PRBS_MODE_235_232 := 4'd8;
    }
    else if (PCS_CH2_TX_PRBS_MODE == "PCIE")
    {
        SC_PCS_CH2_TX_PRBS_MODE_235_232 := 4'd9;
    }

    if (PCS_CH2_TX_INSERT_ER == "FALSE")
    {
        SC_PCS_CH2_TX_INSERT_ER_236 := 1'b0;
    }
    else if (PCS_CH2_TX_INSERT_ER == "TRUE")
    {
        SC_PCS_CH2_TX_INSERT_ER_236 := 1'b1;
    }

    if (PCS_CH2_ENABLE_PRBS_GEN == "FALSE")
    {
        SC_PCS_CH2_ENABLE_PRBS_GEN_237 := 1'b0;
    }
    else if (PCS_CH2_ENABLE_PRBS_GEN == "TRUE")
    {
        SC_PCS_CH2_ENABLE_PRBS_GEN_237 := 1'b1;
    }

    if (PCS_CH2_ERR_CNT >= 0 &&  PCS_CH2_ERR_CNT<= 255)
    {
         SC_PCS_CH2_ERR_CNT_247_240 := to_unsigned(PCS_CH2_ERR_CNT,8);
    }

    if (PCS_CH2_DEFAULT_RADDR >= 0 &&  PCS_CH2_DEFAULT_RADDR<= 15)
    {
         SC_PCS_CH2_DEFAULT_RADDR_251_248 := to_unsigned(PCS_CH2_DEFAULT_RADDR,4);
    }

    if (PCS_CH2_MASTER_CHECK_OFFSET >= 0 &&  PCS_CH2_MASTER_CHECK_OFFSET<= 15)
    {
         SC_PCS_CH2_MASTER_CHECK_OFFSET_255_252 := to_unsigned(PCS_CH2_MASTER_CHECK_OFFSET,4);
    }

    if (PCS_CH2_DELAY_SET >= 0 &&  PCS_CH2_DELAY_SET<= 15)
    {
         SC_PCS_CH2_DELAY_SET_259_256 := to_unsigned(PCS_CH2_DELAY_SET,4);
    }

    if (PCS_CH2_SEACH_OFFSET == "20BIT")
    {
        SC_PCS_CH2_SEACH_OFFSET_262_260 := 3'd0;
    }
    else if (PCS_CH2_SEACH_OFFSET == "30BIT")
    {
        SC_PCS_CH2_SEACH_OFFSET_262_260 := 3'd1;
    }
    else if (PCS_CH2_SEACH_OFFSET == "40BIT")
    {
        SC_PCS_CH2_SEACH_OFFSET_262_260 := 3'd2;
    }
    else if (PCS_CH2_SEACH_OFFSET == "50BIT")
    {
        SC_PCS_CH2_SEACH_OFFSET_262_260 := 3'd3;
    }
    else if (PCS_CH2_SEACH_OFFSET == "60BIT")
    {
        SC_PCS_CH2_SEACH_OFFSET_262_260 := 3'd4;
    }
    else if (PCS_CH2_SEACH_OFFSET == "70BIT")
    {
        SC_PCS_CH2_SEACH_OFFSET_262_260 := 3'd5;
    }

    if (PCS_CH2_CEB_RAPIDLS_MMAX >= 0 &&  PCS_CH2_CEB_RAPIDLS_MMAX<= 7)
    {
         SC_PCS_CH2_CEB_RAPIDLS_MMAX_266_264 := to_unsigned(PCS_CH2_CEB_RAPIDLS_MMAX,3);
    }

    if (PCS_CH2_CTC_AFULL >= 0 &&  PCS_CH2_CTC_AFULL<= 31)
    {
         SC_PCS_CH2_CTC_AFULL_276_272 := to_unsigned(PCS_CH2_CTC_AFULL,5);
    }

    if (PCS_CH2_CTC_AEMPTY >= 0 &&  PCS_CH2_CTC_AEMPTY<= 31)
    {
         SC_PCS_CH2_CTC_AEMPTY_284_280 := to_unsigned(PCS_CH2_CTC_AEMPTY,5);
    }

    if (PCS_CH2_FAR_LOOP == "FALSE")
    {
        SC_PCS_CH2_FAR_LOOP_288 := 1'b0;
    }
    else if (PCS_CH2_FAR_LOOP == "TRUE")
    {
        SC_PCS_CH2_FAR_LOOP_288 := 1'b1;
    }

    if (PCS_CH2_NEAR_LOOP == "FALSE")
    {
        SC_PCS_CH2_NEAR_LOOP_289 := 1'b0;
    }
    else if (PCS_CH2_NEAR_LOOP == "TRUE")
    {
        SC_PCS_CH2_NEAR_LOOP_289 := 1'b1;
    }

    if (PCS_CH2_INT_RX_MASK_0 == "FALSE")
    {
        SC_PCS_CH2_INT_RX_MASK_0_296 := 1'b0;
    }
    else if (PCS_CH2_INT_RX_MASK_0 == "TRUE")
    {
        SC_PCS_CH2_INT_RX_MASK_0_296 := 1'b1;
    }

    if (PCS_CH2_INT_RX_MASK_1 == "FALSE")
    {
        SC_PCS_CH2_INT_RX_MASK_1_297 := 1'b0;
    }
    else if (PCS_CH2_INT_RX_MASK_1 == "TRUE")
    {
        SC_PCS_CH2_INT_RX_MASK_1_297 := 1'b1;
    }

    if (PCS_CH2_INT_RX_MASK_2 == "FALSE")
    {
        SC_PCS_CH2_INT_RX_MASK_2_298 := 1'b0;
    }
    else if (PCS_CH2_INT_RX_MASK_2 == "TRUE")
    {
        SC_PCS_CH2_INT_RX_MASK_2_298 := 1'b1;
    }

    if (PCS_CH2_INT_RX_MASK_3 == "FALSE")
    {
        SC_PCS_CH2_INT_RX_MASK_3_299 := 1'b0;
    }
    else if (PCS_CH2_INT_RX_MASK_3 == "TRUE")
    {
        SC_PCS_CH2_INT_RX_MASK_3_299 := 1'b1;
    }

    if (PCS_CH2_INT_RX_MASK_4 == "FALSE")
    {
        SC_PCS_CH2_INT_RX_MASK_4_300 := 1'b0;
    }
    else if (PCS_CH2_INT_RX_MASK_4 == "TRUE")
    {
        SC_PCS_CH2_INT_RX_MASK_4_300 := 1'b1;
    }

    if (PCS_CH2_INT_RX_MASK_5 == "FALSE")
    {
        SC_PCS_CH2_INT_RX_MASK_5_301 := 1'b0;
    }
    else if (PCS_CH2_INT_RX_MASK_5 == "TRUE")
    {
        SC_PCS_CH2_INT_RX_MASK_5_301 := 1'b1;
    }

    if (PCS_CH2_INT_RX_MASK_6 == "FALSE")
    {
        SC_PCS_CH2_INT_RX_MASK_6_302 := 1'b0;
    }
    else if (PCS_CH2_INT_RX_MASK_6 == "TRUE")
    {
        SC_PCS_CH2_INT_RX_MASK_6_302 := 1'b1;
    }

    if (PCS_CH2_INT_RX_MASK_7 == "FALSE")
    {
        SC_PCS_CH2_INT_RX_MASK_7_303 := 1'b0;
    }
    else if (PCS_CH2_INT_RX_MASK_7 == "TRUE")
    {
        SC_PCS_CH2_INT_RX_MASK_7_303 := 1'b1;
    }

    if (PCS_CH2_INT_RX_CLR_0 == "FALSE")
    {
        SC_PCS_CH2_INT_RX_CLR_0_304 := 1'b0;
    }
    else if (PCS_CH2_INT_RX_CLR_0 == "TRUE")
    {
        SC_PCS_CH2_INT_RX_CLR_0_304 := 1'b1;
    }

    if (PCS_CH2_INT_RX_CLR_1 == "FALSE")
    {
        SC_PCS_CH2_INT_RX_CLR_1_305 := 1'b0;
    }
    else if (PCS_CH2_INT_RX_CLR_1 == "TRUE")
    {
        SC_PCS_CH2_INT_RX_CLR_1_305 := 1'b1;
    }

    if (PCS_CH2_INT_RX_CLR_2 == "FALSE")
    {
        SC_PCS_CH2_INT_RX_CLR_2_306 := 1'b0;
    }
    else if (PCS_CH2_INT_RX_CLR_2 == "TRUE")
    {
        SC_PCS_CH2_INT_RX_CLR_2_306 := 1'b1;
    }

    if (PCS_CH2_INT_RX_CLR_3 == "FALSE")
    {
        SC_PCS_CH2_INT_RX_CLR_3_307 := 1'b0;
    }
    else if (PCS_CH2_INT_RX_CLR_3 == "TRUE")
    {
        SC_PCS_CH2_INT_RX_CLR_3_307 := 1'b1;
    }

    if (PCS_CH2_INT_RX_CLR_4 == "FALSE")
    {
        SC_PCS_CH2_INT_RX_CLR_4_308 := 1'b0;
    }
    else if (PCS_CH2_INT_RX_CLR_4 == "TRUE")
    {
        SC_PCS_CH2_INT_RX_CLR_4_308 := 1'b1;
    }

    if (PCS_CH2_INT_RX_CLR_5 == "FALSE")
    {
        SC_PCS_CH2_INT_RX_CLR_5_309 := 1'b0;
    }
    else if (PCS_CH2_INT_RX_CLR_5 == "TRUE")
    {
        SC_PCS_CH2_INT_RX_CLR_5_309 := 1'b1;
    }

    if (PCS_CH2_INT_RX_CLR_6 == "FALSE")
    {
        SC_PCS_CH2_INT_RX_CLR_6_310 := 1'b0;
    }
    else if (PCS_CH2_INT_RX_CLR_6 == "TRUE")
    {
        SC_PCS_CH2_INT_RX_CLR_6_310 := 1'b1;
    }

    if (PCS_CH2_INT_RX_CLR_7 == "FALSE")
    {
        SC_PCS_CH2_INT_RX_CLR_7_311 := 1'b0;
    }
    else if (PCS_CH2_INT_RX_CLR_7 == "TRUE")
    {
        SC_PCS_CH2_INT_RX_CLR_7_311 := 1'b1;
    }

    if (PCS_CH3_BYPASS_WORD_ALIGN == "FALSE")
    {
        SC_PCS_CH3_BYPASS_WORD_ALIGN_1 := 1'b0;
    }
    else if (PCS_CH3_BYPASS_WORD_ALIGN == "TRUE")
    {
        SC_PCS_CH3_BYPASS_WORD_ALIGN_1 := 1'b1;
    }

    if (PCS_CH3_BYPASS_DENC == "FALSE")
    {
        SC_PCS_CH3_BYPASS_DENC_2 := 1'b0;
    }
    else if (PCS_CH3_BYPASS_DENC == "TRUE")
    {
        SC_PCS_CH3_BYPASS_DENC_2 := 1'b1;
    }

    if (PCS_CH3_BYPASS_BONDING == "FALSE")
    {
        SC_PCS_CH3_BYPASS_BONDING_3 := 1'b0;
    }
    else if (PCS_CH3_BYPASS_BONDING == "TRUE")
    {
        SC_PCS_CH3_BYPASS_BONDING_3 := 1'b1;
    }

    if (PCS_CH3_BYPASS_CTC == "FALSE")
    {
        SC_PCS_CH3_BYPASS_CTC_4 := 1'b0;
    }
    else if (PCS_CH3_BYPASS_CTC == "TRUE")
    {
        SC_PCS_CH3_BYPASS_CTC_4 := 1'b1;
    }

    if (PCS_CH3_BYPASS_GEAR == "FALSE")
    {
        SC_PCS_CH3_BYPASS_GEAR_5 := 1'b0;
    }
    else if (PCS_CH3_BYPASS_GEAR == "TRUE")
    {
        SC_PCS_CH3_BYPASS_GEAR_5 := 1'b1;
    }

    if (PCS_CH3_BYPASS_BRIDGE == "FALSE")
    {
        SC_PCS_CH3_BYPASS_BRIDGE_6 := 1'b0;
    }
    else if (PCS_CH3_BYPASS_BRIDGE == "TRUE")
    {
        SC_PCS_CH3_BYPASS_BRIDGE_6 := 1'b1;
    }

    if (PCS_CH3_DATA_MODE == "X8")
    {
        SC_PCS_CH3_DATA_MODE_8 := 1'b0;
    }
    else if (PCS_CH3_DATA_MODE == "X10")
    {
        SC_PCS_CH3_DATA_MODE_8 := 1'b0;
    }
    else if (PCS_CH3_DATA_MODE == "X16")
    {
        SC_PCS_CH3_DATA_MODE_8 := 1'b1;
    }
    else if (PCS_CH3_DATA_MODE == "X20")
    {
        SC_PCS_CH3_DATA_MODE_8 := 1'b1;
    }

    if (PCS_CH3_RX_POLARITY_INV == "DELAY")
    {
        SC_PCS_CH3_RX_POLARITY_INV_10_9 := 2'b00;
    }
    else if (PCS_CH3_RX_POLARITY_INV == "BIT_POLARITY_INVERION")
    {
        SC_PCS_CH3_RX_POLARITY_INV_10_9 := 2'b01;
    }
    else if (PCS_CH3_RX_POLARITY_INV == "BIT_REVERSAL")
    {
        SC_PCS_CH3_RX_POLARITY_INV_10_9 := 2'b10;
    }
    else if (PCS_CH3_RX_POLARITY_INV == "BOTH")
    {
        SC_PCS_CH3_RX_POLARITY_INV_10_9 := 2'b11;
    }

    if (PCS_CH3_ALIGN_MODE == "1GB")
    {
        SC_PCS_CH3_ALIGN_MODE_12_11 := 2'b00;
    }
    else if (PCS_CH3_ALIGN_MODE == "10GB")
    {
        SC_PCS_CH3_ALIGN_MODE_12_11 := 2'b01;
    }
    else if (PCS_CH3_ALIGN_MODE == "RAPIDIO")
    {
        SC_PCS_CH3_ALIGN_MODE_12_11 := 2'b10;
    }
    else if (PCS_CH3_ALIGN_MODE == "OUTSIDE")
    {
        SC_PCS_CH3_ALIGN_MODE_12_11 := 2'b11;
    }

    if (PCS_CH3_SAMP_16B == "X16")
    {
        SC_PCS_CH3_SAMP_16B_13 := 1'b1;
    }
    else if (PCS_CH3_SAMP_16B == "X20")
    {
        SC_PCS_CH3_SAMP_16B_13 := 1'b0;
    }

    if (PCS_CH3_COMMA_REG0 >= 0 &&  PCS_CH3_COMMA_REG0<= 1023)
    {
          SC_PCS_CH3_COMMA_REG0_25_16 := to_unsigned(PCS_CH3_COMMA_REG0,10);
    }

    if (PCS_CH3_COMMA_MASK >= 0 &&  PCS_CH3_COMMA_MASK<= 1023)
    {
          SC_PCS_CH3_COMMA_MASK_35_26 := to_unsigned(PCS_CH3_COMMA_MASK,10);
    }

    if (PCS_CH3_CEB_MODE == "10GB")
    {
        SC_PCS_CH3_CEB_MODE_37_36 := 2'b00;
    }
    else if (PCS_CH3_CEB_MODE == "RAPIDIO")
    {
        SC_PCS_CH3_CEB_MODE_37_36 := 2'b01;
    }
    else if (PCS_CH3_CEB_MODE == "OUTSIDE")
    {
        SC_PCS_CH3_CEB_MODE_37_36 := 2'b10;
    }

    if (PCS_CH3_CTC_MODE == "1SKIP")
    {
        SC_PCS_CH3_CTC_MODE_39_38 := 2'b00;
    }
    else if (PCS_CH3_CTC_MODE == "2SKIP")
    {
        SC_PCS_CH3_CTC_MODE_39_38 := 2'b01;
    }
    else if (PCS_CH3_CTC_MODE == "4SKIP")
    {
        SC_PCS_CH3_CTC_MODE_39_38 := 2'b11;
    }

    if (PCS_CH3_A_REG >= 0 &&  PCS_CH3_A_REG<= 255)
    {
         SC_PCS_CH3_A_REG_47_40 := to_unsigned(PCS_CH3_A_REG,8);
    }

    if (PCS_CH3_GE_AUTO_EN == "FALSE")
    {
        SC_PCS_CH3_GE_AUTO_EN_49 := 1'b0;
    }
    else if (PCS_CH3_GE_AUTO_EN == "TRUE")
    {
        SC_PCS_CH3_GE_AUTO_EN_49 := 1'b1;
    }

    if (PCS_CH3_SKIP_REG0 >= 0 &&  PCS_CH3_SKIP_REG0<= 1023)
    {
         SC_PCS_CH3_SKIP_REG0_59_50 := to_unsigned(PCS_CH3_SKIP_REG0,10);
    }

    if (PCS_CH3_SKIP_REG1 >= 0 &&  PCS_CH3_SKIP_REG1<= 1023)
    {
         SC_PCS_CH3_SKIP_REG1_69_60 := to_unsigned(PCS_CH3_SKIP_REG1,10);
    }

    if (PCS_CH3_SKIP_REG2 >= 0 &&  PCS_CH3_SKIP_REG2<= 1023)
    {
         SC_PCS_CH3_SKIP_REG2_79_70 := to_unsigned(PCS_CH3_SKIP_REG2,10);
    }

    if (PCS_CH3_SKIP_REG3 >= 0 &&  PCS_CH3_SKIP_REG3<= 1023)
    {
         SC_PCS_CH3_SKIP_REG3_89_80 := to_unsigned(PCS_CH3_SKIP_REG3,10);
    }

    if (PCS_CH3_DEC_DUAL == "FALSE")
    {
        SC_PCS_CH3_DEC_DUAL_90 := 1'b0;
    }
    else if (PCS_CH3_DEC_DUAL == "TRUE")
    {
        SC_PCS_CH3_DEC_DUAL_90 := 1'b1;
    }

    if (PCS_CH3_SPLIT == "FALSE")
    {
        SC_PCS_CH3_SPLIT_91 := 1'b0;
    }
    else if (PCS_CH3_SPLIT == "TRUE")
    {
        SC_PCS_CH3_SPLIT_91 := 1'b1;
    }

    if (PCS_CH3_FIFOFLAG_CTC == "FALSE")
    {
        SC_PCS_CH3_FIFOFLAG_CTC_92 := 1'b0;
    }
    else if (PCS_CH3_FIFOFLAG_CTC == "TRUE")
    {
        SC_PCS_CH3_FIFOFLAG_CTC_92 := 1'b1;
    }

    if (PCS_CH3_COMMA_DET_MODE == "COMMA_PATTERN")
    {
        SC_PCS_CH3_COMMA_DET_MODE_93 := 1'b0;
    }
    else if (PCS_CH3_COMMA_DET_MODE == "RX_CLK_SLIP")
    {
        SC_PCS_CH3_COMMA_DET_MODE_93 := 1'b1;
    }

    if (PCS_CH3_ERRDETECT_SILENCE == "FALSE")
    {
        SC_PCS_CH3_ERRDETECT_SILENCE_94 := 1'b0;
    }
    else if (PCS_CH3_ERRDETECT_SILENCE == "TRUE")
    {
        SC_PCS_CH3_ERRDETECT_SILENCE_94 := 1'b1;
    }

    if (PCS_CH3_PMA_RCLK_POLINV == "PMA_RCLK")
    {
        SC_PCS_CH3_PMA_RCLK_POLINV_96 := 1'b0;
    }
    else if (PCS_CH3_PMA_RCLK_POLINV == "REVERSE_OF_PMA_RCLK")
    {
        SC_PCS_CH3_PMA_RCLK_POLINV_96 := 1'b1;
    }

    if (PCS_CH3_PCS_RCLK_SEL == "PMA_RCLK")
    {
        SC_PCS_CH3_PCS_RCLK_SEL_97 := 1'b0;
    }
    else if (PCS_CH3_PCS_RCLK_SEL == "PMA_TCLK")
    {
        SC_PCS_CH3_PCS_RCLK_SEL_97 := 1'b1;
    }

    if (PCS_CH3_MCB_RCLK_POLINV == "MCB_RCLK")
    {
        SC_PCS_CH3_MCB_RCLK_POLINV_98 := 1'b0;
    }
    else if (PCS_CH3_MCB_RCLK_POLINV == "REVERSE_OF_MCB_RCLK")
    {
        SC_PCS_CH3_MCB_RCLK_POLINV_98 := 1'b1;
    }

    if (PCS_CH3_CB_RCLK_SEL == "PMA_RCLK")
    {
        SC_PCS_CH3_CB_RCLK_SEL_100_99 := 2'b00;
    }
    else if (PCS_CH3_CB_RCLK_SEL == "PMA_TCLK")
    {
        SC_PCS_CH3_CB_RCLK_SEL_100_99 := 2'b01;
    }
    else if (PCS_CH3_CB_RCLK_SEL == "MCB_RCLK")
    {
        SC_PCS_CH3_CB_RCLK_SEL_100_99 := 2'b10;
    }

    if (PCS_CH3_AFTER_CTC_RCLK_SEL == "PMA_RCLK")
    {
        SC_PCS_CH3_AFTER_CTC_RCLK_SEL_102_101 := 2'b00;
    }
    else if (PCS_CH3_AFTER_CTC_RCLK_SEL == "PMA_TCLK")
    {
        SC_PCS_CH3_AFTER_CTC_RCLK_SEL_102_101 := 2'b01;
    }
    else if (PCS_CH3_AFTER_CTC_RCLK_SEL == "MCB_RCLK")
    {
        SC_PCS_CH3_AFTER_CTC_RCLK_SEL_102_101 := 2'b10;
    }

    if (PCS_CH3_RCLK_POLINV == "RCLK")
    {
        SC_PCS_CH3_RCLK_POLINV_103 := 1'b0;
    }
    else if (PCS_CH3_RCLK_POLINV == "REVERSE_OF_RCLK")
    {
        SC_PCS_CH3_RCLK_POLINV_103 := 1'b1;
    }

    if (PCS_CH3_BRIDGE_RCLK_SEL == "PMA_RCLK")
    {
        SC_PCS_CH3_BRIDGE_RCLK_SEL_105_104 := 2'b00;
    }
    else if (PCS_CH3_BRIDGE_RCLK_SEL == "PMA_TCLK")
    {
        SC_PCS_CH3_BRIDGE_RCLK_SEL_105_104 := 2'b01;
    }
    else if (PCS_CH3_BRIDGE_RCLK_SEL == "MCB_RCLK")
    {
        SC_PCS_CH3_BRIDGE_RCLK_SEL_105_104 := 2'b10;
    }
    else if (PCS_CH3_BRIDGE_RCLK_SEL == "RCLK")
    {
        SC_PCS_CH3_BRIDGE_RCLK_SEL_105_104 := 2'b11;
    }

    if (PCS_CH3_PCS_RCLK_EN == "FALSE")
    {
        SC_PCS_CH3_PCS_RCLK_EN_106 := 1'b0;
    }
    else if (PCS_CH3_PCS_RCLK_EN == "TRUE")
    {
        SC_PCS_CH3_PCS_RCLK_EN_106 := 1'b1;
    }

    if (PCS_CH3_CB_RCLK_EN == "FALSE")
    {
        SC_PCS_CH3_CB_RCLK_EN_107 := 1'b0;
    }
    else if (PCS_CH3_CB_RCLK_EN == "TRUE")
    {
        SC_PCS_CH3_CB_RCLK_EN_107 := 1'b1;
    }

    if (PCS_CH3_AFTER_CTC_RCLK_EN == "FALSE")
    {
        SC_PCS_CH3_AFTER_CTC_RCLK_EN_108 := 1'b0;
    }
    else if (PCS_CH3_AFTER_CTC_RCLK_EN == "TRUE")
    {
        SC_PCS_CH3_AFTER_CTC_RCLK_EN_108 := 1'b1;
    }

    if (PCS_CH3_AFTER_CTC_RCLK_EN_GB == "FALSE")
    {
        SC_PCS_CH3_AFTER_CTC_RCLK_EN_GB_109 := 1'b0;
    }
    else if (PCS_CH3_AFTER_CTC_RCLK_EN_GB == "TRUE")
    {
        SC_PCS_CH3_AFTER_CTC_RCLK_EN_GB_109 := 1'b1;
    }

    if (PCS_CH3_BRIDGE_RCLK_EN == "FALSE")
    {
        SC_PCS_CH3_BRIDGE_RCLK_EN_110 := 1'b0;
    }
    else if (PCS_CH3_BRIDGE_RCLK_EN == "TRUE")
    {
        SC_PCS_CH3_BRIDGE_RCLK_EN_110 := 1'b1;
    }

    if (PCS_CH3_PCS_RX_RSTN == "FALSE")
    {
        SC_PCS_CH3_PCS_RX_RSTN_112 := 1'b0;
    }
    else if (PCS_CH3_PCS_RX_RSTN == "TRUE")
    {
        SC_PCS_CH3_PCS_RX_RSTN_112 := 1'b1;
    }

    if (PCS_CH3_SLAVE == "MASTER")
    {
        SC_PCS_CH3_SLAVE_113 := 1'b0;
    }
    else if (PCS_CH3_SLAVE == "SLAVE")
    {
        SC_PCS_CH3_SLAVE_113 := 1'b1;
    }

    if (PCS_CH3_PCIE_SLAVE == "MASTER")
    {
        SC_PCS_CH3_PCIE_SLAVE_114 := 1'b0;
    }
    else if (PCS_CH3_PCIE_SLAVE == "SLAVE")
    {
        SC_PCS_CH3_PCIE_SLAVE_114 := 1'b1;
    }

    if (PCS_CH3_PCS_CB_RSTN == "FALSE")
    {
        SC_PCS_CH3_PCS_CB_RSTN_120 := 1'b1;
    }
    else if (PCS_CH3_PCS_CB_RSTN == "TRUE")
    {
        SC_PCS_CH3_PCS_CB_RSTN_120 := 1'b0;
    }

    if (PCS_CH3_TX_BYPASS_BRIDGE_UINT == "FALSE")
    {
        SC_PCS_CH3_TX_BYPASS_BRIDGE_UINT_129 := 1'b0;
    }
    else if (PCS_CH3_TX_BYPASS_BRIDGE_UINT == "TRUE")
    {
        SC_PCS_CH3_TX_BYPASS_BRIDGE_UINT_129 := 1'b1;
    }

    if (PCS_CH3_TX_BYPASS_GEAR == "FALSE")
    {
        SC_PCS_CH3_TX_BYPASS_GEAR_130 := 1'b0;
    }
    else if (PCS_CH3_TX_BYPASS_GEAR == "TRUE")
    {
        SC_PCS_CH3_TX_BYPASS_GEAR_130 := 1'b1;
    }

    if (PCS_CH3_TX_BYPASS_ENC == "FALSE")
    {
        SC_PCS_CH3_TX_BYPASS_ENC_131 := 1'b0;
    }
    else if (PCS_CH3_TX_BYPASS_ENC == "TRUE")
    {
        SC_PCS_CH3_TX_BYPASS_ENC_131 := 1'b1;
    }

    if (PCS_CH3_TX_BYPASS_BIT_SLIP == "FALSE")
    {
        SC_PCS_CH3_TX_BYPASS_BIT_SLIP_132 := 1'b0;
    }
    else if (PCS_CH3_TX_BYPASS_BIT_SLIP == "TRUE")
    {
        SC_PCS_CH3_TX_BYPASS_BIT_SLIP_132 := 1'b1;
    }

    if (PCS_CH3_TX_GEAR_SPLIT == "FALSE")
    {
        SC_PCS_CH3_TX_GEAR_SPLIT_136 := 1'b0;
    }
    else if (PCS_CH3_TX_GEAR_SPLIT == "TRUE")
    {
        SC_PCS_CH3_TX_GEAR_SPLIT_136 := 1'b1;
    }

    if (PCS_CH3_TX_DRIVE_REG_MODE == "NO_CHANGE")
    {
        SC_PCS_CH3_TX_DRIVE_REG_MODE_138_137 := 2'b00;
    }
    else if (PCS_CH3_TX_DRIVE_REG_MODE == "EN_POLARIY_REV")
    {
        SC_PCS_CH3_TX_DRIVE_REG_MODE_138_137 := 2'b01;
    }
    else if (PCS_CH3_TX_DRIVE_REG_MODE == "EN_BIT_REV")
    {
        SC_PCS_CH3_TX_DRIVE_REG_MODE_138_137 := 2'b10;
    }
    else if (PCS_CH3_TX_DRIVE_REG_MODE == "EN_BOTH")
    {
        SC_PCS_CH3_TX_DRIVE_REG_MODE_138_137 := 2'b11;
    }

    if (PCS_CH3_TX_BIT_SLIP_CYCLES >= 0 &&  PCS_CH3_TX_BIT_SLIP_CYCLES<= 31)
    {
         SC_PCS_CH3_TX_BIT_SLIP_CYCLES_143_139 := to_unsigned(PCS_CH3_TX_BIT_SLIP_CYCLES,5);
    }

    if (PCS_CH3_INT_TX_MASK_0 == "FALSE")
    {
        SC_PCS_CH3_INT_TX_MASK_0_144 := 1'b0;
    }
    else if (PCS_CH3_INT_TX_MASK_0 == "TRUE")
    {
        SC_PCS_CH3_INT_TX_MASK_0_144 := 1'b1;
    }

    if (PCS_CH3_INT_TX_MASK_1 == "FALSE")
    {
        SC_PCS_CH3_INT_TX_MASK_1_145 := 1'b0;
    }
    else if (PCS_CH3_INT_TX_MASK_1 == "TRUE")
    {
        SC_PCS_CH3_INT_TX_MASK_1_145 := 1'b1;
    }

    if (PCS_CH3_INT_TX_MASK_2 == "FALSE")
    {
        SC_PCS_CH3_INT_TX_MASK_2_146 := 1'b0;
    }
    else if (PCS_CH3_INT_TX_MASK_2 == "TRUE")
    {
        SC_PCS_CH3_INT_TX_MASK_2_146 := 1'b1;
    }

    if (PCS_CH3_INT_TX_CLR_0 == "FALSE")
    {
        SC_PCS_CH3_INT_TX_CLR_0_152 := 1'b0;
    }
    else if (PCS_CH3_INT_TX_CLR_0 == "TRUE")
    {
        SC_PCS_CH3_INT_TX_CLR_0_152 := 1'b1;
    }

    if (PCS_CH3_INT_TX_CLR_1 == "FALSE")
    {
        SC_PCS_CH3_INT_TX_CLR_1_153 := 1'b0;
    }
    else if (PCS_CH3_INT_TX_CLR_1 == "TRUE")
    {
        SC_PCS_CH3_INT_TX_CLR_1_153 := 1'b1;
    }

    if (PCS_CH3_INT_TX_CLR_2 == "FALSE")
    {
        SC_PCS_CH3_INT_TX_CLR_2_154 := 1'b0;
    }
    else if (PCS_CH3_INT_TX_CLR_2 == "TRUE")
    {
        SC_PCS_CH3_INT_TX_CLR_2_154 := 1'b1;
    }

    if (PCS_CH3_TX_PMA_TCLK_POLINV == "PMA_TCLK")
    {
        SC_PCS_CH3_TX_PMA_TCLK_POLINV_160 := 1'b0;
    }
    else if (PCS_CH3_TX_PMA_TCLK_POLINV == "REVERSE_OF_PMA_TCLK")
    {
        SC_PCS_CH3_TX_PMA_TCLK_POLINV_160 := 1'b1;
    }

    if (PCS_CH3_TX_PCS_CLK_EN_SEL == "FALSE")
    {
        SC_PCS_CH3_TX_PCS_CLK_EN_SEL_161 := 1'b0;
    }
    else if (PCS_CH3_TX_PCS_CLK_EN_SEL == "TRUE")
    {
        SC_PCS_CH3_TX_PCS_CLK_EN_SEL_161 := 1'b1;
    }

    if (PCS_CH3_TX_BRIDGE_TCLK_SEL == "PCS_TCLK")
    {
        SC_PCS_CH3_TX_BRIDGE_TCLK_SEL_162 := 1'b0;
    }
    else if (PCS_CH3_TX_BRIDGE_TCLK_SEL == "TCLK")
    {
        SC_PCS_CH3_TX_BRIDGE_TCLK_SEL_162 := 1'b1;
    }

    if (PCS_CH3_TX_TCLK_POLINV == "TCLK")
    {
        SC_PCS_CH3_TX_TCLK_POLINV_163 := 1'b0;
    }
    else if (PCS_CH3_TX_TCLK_POLINV == "REVERSE_OF_TCLK")
    {
        SC_PCS_CH3_TX_TCLK_POLINV_163 := 1'b1;
    }

    if (PCS_CH3_TX_PCS_TX_RSTN == "FALSE")
    {
        SC_PCS_CH3_TX_PCS_TX_RSTN_165 := 1'b0;
    }
    else if (PCS_CH3_TX_PCS_TX_RSTN == "TRUE")
    {
        SC_PCS_CH3_TX_PCS_TX_RSTN_165 := 1'b1;
    }

    if (PCS_CH3_TX_SLAVE == "SLAVE")
    {
        SC_PCS_CH3_TX_SLAVE_166 := 1'b1;
    }
    else if (PCS_CH3_TX_SLAVE == "MASTER")
    {
        SC_PCS_CH3_TX_SLAVE_166 := 1'b0;
    }

    if (PCS_CH3_TX_BRIDGE_CLK_EN_SEL == "FALSE")
    {
        SC_PCS_CH3_TX_BRIDGE_CLK_EN_SEL_167 := 1'b0;
    }
    else if (PCS_CH3_TX_BRIDGE_CLK_EN_SEL == "TRUE")
    {
        SC_PCS_CH3_TX_BRIDGE_CLK_EN_SEL_167 := 1'b1;
    }

    if (PCS_CH3_DATA_WIDTH_MODE == "X20")
    {
        SC_PCS_CH3_DATA_WIDTH_MODE_169_168 := 2'b00;
    }
    else if (PCS_CH3_DATA_WIDTH_MODE == "X16")
    {
        SC_PCS_CH3_DATA_WIDTH_MODE_169_168 := 2'b01;
    }
    else if (PCS_CH3_DATA_WIDTH_MODE == "X10")
    {
        SC_PCS_CH3_DATA_WIDTH_MODE_169_168 := 2'b10;
    }
    else if (PCS_CH3_DATA_WIDTH_MODE == "X8")
    {
        SC_PCS_CH3_DATA_WIDTH_MODE_169_168 := 2'b11;
    }

    if (PCS_CH3_TX_TCLK2FABRIC_SEL == "FALSE")
    {
        SC_PCS_CH3_TX_TCLK2FABRIC_SEL_176 := 1'b0;
    }
    else if (PCS_CH3_TX_TCLK2FABRIC_SEL == "TRUE")
    {
        SC_PCS_CH3_TX_TCLK2FABRIC_SEL_176 := 1'b1;
    }

    if (PCS_CH3_TX_OUTZZ == "FALSE")
    {
        SC_PCS_CH3_TX_OUTZZ_177 := 1'b0;
    }
    else if (PCS_CH3_TX_OUTZZ == "TRUE")
    {
        SC_PCS_CH3_TX_OUTZZ_177 := 1'b1;
    }

    if (PCS_CH3_ENC_DUAL == "FALSE")
    {
        SC_PCS_CH3_ENC_DUAL_178 := 1'b0;
    }
    else if (PCS_CH3_ENC_DUAL == "TRUE")
    {
        SC_PCS_CH3_ENC_DUAL_178 := 1'b1;
    }

    if (PCS_CH3_TX_BITSLIP_DATA_MODE == "X10")
    {
        SC_PCS_CH3_TX_BITSLIP_DATA_MODE_179 := 1'b0;
    }
    else if (PCS_CH3_TX_BITSLIP_DATA_MODE == "X20")
    {
        SC_PCS_CH3_TX_BITSLIP_DATA_MODE_179 := 1'b1;
    }

    if (PCS_CH3_COMMA_REG1 >= 0 &&  PCS_CH3_COMMA_REG1<= 1023)
    {
         SC_PCS_CH3_COMMA_REG1_193_184 := to_unsigned(PCS_CH3_COMMA_REG1,10);
    }

    if (PCS_CH3_RAPID_IMAX >= 0 &&  PCS_CH3_RAPID_IMAX<= 7)
    {
         SC_PCS_CH3_RAPID_IMAX_202_200 := to_unsigned(PCS_CH3_RAPID_IMAX,3);
    }

    if (PCS_CH3_RAPID_VMIN_1 >= 0 &&  PCS_CH3_RAPID_VMIN_1<= 255)
    {
         SC_PCS_CH3_RAPID_VMIN_1_215_208 := to_unsigned(PCS_CH3_RAPID_VMIN_1,8);
    }

    if (PCS_CH3_RAPID_VMIN_2 >= 0 &&  PCS_CH3_RAPID_VMIN_2<= 255)
    {
         SC_PCS_CH3_RAPID_VMIN_2_223_216 := to_unsigned(PCS_CH3_RAPID_VMIN_2,8);
    }

    if (PCS_CH3_RX_PRBS_MODE == "DISABLE")
    {
        SC_PCS_CH3_RX_PRBS_MODE_227_224 := 4'd0;
    }
    else if (PCS_CH3_RX_PRBS_MODE == "PRBS_7")
    {
        SC_PCS_CH3_RX_PRBS_MODE_227_224 := 4'd1;
    }
    else if (PCS_CH3_RX_PRBS_MODE == "PRBS_15")
    {
        SC_PCS_CH3_RX_PRBS_MODE_227_224 := 4'd2;
    }
    else if (PCS_CH3_RX_PRBS_MODE == "PRBS_23")
    {
        SC_PCS_CH3_RX_PRBS_MODE_227_224 := 4'd3;
    }
    else if (PCS_CH3_RX_PRBS_MODE == "PRBS_31")
    {
        SC_PCS_CH3_RX_PRBS_MODE_227_224 := 4'd4;
    }
    else if (PCS_CH3_RX_PRBS_MODE == "LONG_1")
    {
        SC_PCS_CH3_RX_PRBS_MODE_227_224 := 4'd5;
    }
    else if (PCS_CH3_RX_PRBS_MODE == "LONG_0")
    {
        SC_PCS_CH3_RX_PRBS_MODE_227_224 := 4'd6;
    }
    else if (PCS_CH3_RX_PRBS_MODE == "20UI")
    {
        SC_PCS_CH3_RX_PRBS_MODE_227_224 := 4'd7;
    }
    else if (PCS_CH3_RX_PRBS_MODE == "D10_2")
    {
        SC_PCS_CH3_RX_PRBS_MODE_227_224 := 4'd8;
    }
    else if (PCS_CH3_RX_PRBS_MODE == "PCIE")
    {
        SC_PCS_CH3_RX_PRBS_MODE_227_224 := 4'd9;
    }

    if (PCS_CH3_RX_ERRCNT_CLR == "FALSE")
    {
        SC_PCS_CH3_RX_ERRCNT_CLR_228 := 1'b0;
    }
    else if (PCS_CH3_RX_ERRCNT_CLR == "TRUE")
    {
        SC_PCS_CH3_RX_ERRCNT_CLR_228 := 1'b1;
    }

    if (PCS_CH3_TX_PRBS_MODE == "DISABLE")
    {
        SC_PCS_CH3_TX_PRBS_MODE_235_232 := 4'd0;
    }
    else if (PCS_CH3_TX_PRBS_MODE == "PRBS_7")
    {
        SC_PCS_CH3_TX_PRBS_MODE_235_232 := 4'd1;
    }
    else if (PCS_CH3_TX_PRBS_MODE == "PRBS_15")
    {
        SC_PCS_CH3_TX_PRBS_MODE_235_232 := 4'd2;
    }
    else if (PCS_CH3_TX_PRBS_MODE == "PRBS_23")
    {
        SC_PCS_CH3_TX_PRBS_MODE_235_232 := 4'd3;
    }
    else if (PCS_CH3_TX_PRBS_MODE == "PRBS_31")
    {
        SC_PCS_CH3_TX_PRBS_MODE_235_232 := 4'd4;
    }
    else if (PCS_CH3_TX_PRBS_MODE == "LONG_1")
    {
        SC_PCS_CH3_TX_PRBS_MODE_235_232 := 4'd5;
    }
    else if (PCS_CH3_TX_PRBS_MODE == "LONG_0")
    {
        SC_PCS_CH3_TX_PRBS_MODE_235_232 := 4'd6;
    }
    else if (PCS_CH3_TX_PRBS_MODE == "20UI")
    {
        SC_PCS_CH3_TX_PRBS_MODE_235_232 := 4'd7;
    }
    else if (PCS_CH3_TX_PRBS_MODE == "D10_2")
    {
        SC_PCS_CH3_TX_PRBS_MODE_235_232 := 4'd8;
    }
    else if (PCS_CH3_TX_PRBS_MODE == "PCIE")
    {
        SC_PCS_CH3_TX_PRBS_MODE_235_232 := 4'd9;
    }

    if (PCS_CH3_TX_INSERT_ER == "FALSE")
    {
        SC_PCS_CH3_TX_INSERT_ER_236 := 1'b0;
    }
    else if (PCS_CH3_TX_INSERT_ER == "TRUE")
    {
        SC_PCS_CH3_TX_INSERT_ER_236 := 1'b1;
    }

    if (PCS_CH3_ENABLE_PRBS_GEN == "FALSE")
    {
        SC_PCS_CH3_ENABLE_PRBS_GEN_237 := 1'b0;
    }
    else if (PCS_CH3_ENABLE_PRBS_GEN == "TRUE")
    {
        SC_PCS_CH3_ENABLE_PRBS_GEN_237 := 1'b1;
    }

    if (PCS_CH3_ERR_CNT >= 0 &&  PCS_CH3_ERR_CNT<= 255)
    {
         SC_PCS_CH3_ERR_CNT_247_240 := to_unsigned(PCS_CH3_ERR_CNT,8);
    }

    if (PCS_CH3_DEFAULT_RADDR >= 0 &&  PCS_CH3_DEFAULT_RADDR<= 15)
    {
         SC_PCS_CH3_DEFAULT_RADDR_251_248 := to_unsigned(PCS_CH3_DEFAULT_RADDR,4);
    }

    if (PCS_CH3_MASTER_CHECK_OFFSET >= 0 &&  PCS_CH3_MASTER_CHECK_OFFSET<= 15)
    {
         SC_PCS_CH3_MASTER_CHECK_OFFSET_255_252 := to_unsigned(PCS_CH3_MASTER_CHECK_OFFSET,4);
    }

    if (PCS_CH3_DELAY_SET >= 0 &&  PCS_CH3_DELAY_SET<= 15)
    {
         SC_PCS_CH3_DELAY_SET_259_256 := to_unsigned(PCS_CH3_DELAY_SET,4);
    }

    if (PCS_CH3_SEACH_OFFSET == "20BIT")
    {
        SC_PCS_CH3_SEACH_OFFSET_262_260 := 3'd0;
    }
    else if (PCS_CH3_SEACH_OFFSET == "30BIT")
    {
        SC_PCS_CH3_SEACH_OFFSET_262_260 := 3'd1;
    }
    else if (PCS_CH3_SEACH_OFFSET == "40BIT")
    {
        SC_PCS_CH3_SEACH_OFFSET_262_260 := 3'd2;
    }
    else if (PCS_CH3_SEACH_OFFSET == "50BIT")
    {
        SC_PCS_CH3_SEACH_OFFSET_262_260 := 3'd3;
    }
    else if (PCS_CH3_SEACH_OFFSET == "60BIT")
    {
        SC_PCS_CH3_SEACH_OFFSET_262_260 := 3'd4;
    }
    else if (PCS_CH3_SEACH_OFFSET == "70BIT")
    {
        SC_PCS_CH3_SEACH_OFFSET_262_260 := 3'd5;
    }

    if (PCS_CH3_CEB_RAPIDLS_MMAX >= 0 &&  PCS_CH3_CEB_RAPIDLS_MMAX<= 7)
    {
         SC_PCS_CH3_CEB_RAPIDLS_MMAX_266_264 := to_unsigned(PCS_CH3_CEB_RAPIDLS_MMAX,3);
    }

    if (PCS_CH3_CTC_AFULL >= 0 &&  PCS_CH3_CTC_AFULL<= 31)
    {
         SC_PCS_CH3_CTC_AFULL_276_272 := to_unsigned(PCS_CH3_CTC_AFULL,5);
    }

    if (PCS_CH3_CTC_AEMPTY >= 0 &&  PCS_CH3_CTC_AEMPTY<= 31)
    {
         SC_PCS_CH3_CTC_AEMPTY_284_280 := to_unsigned(PCS_CH3_CTC_AEMPTY,5);
    }

    if (PCS_CH3_FAR_LOOP == "FALSE")
    {
        SC_PCS_CH3_FAR_LOOP_288 := 1'b0;
    }
    else if (PCS_CH3_FAR_LOOP == "TRUE")
    {
        SC_PCS_CH3_FAR_LOOP_288 := 1'b1;
    }

    if (PCS_CH3_NEAR_LOOP == "FALSE")
    {
        SC_PCS_CH3_NEAR_LOOP_289 := 1'b0;
    }
    else if (PCS_CH3_NEAR_LOOP == "TRUE")
    {
        SC_PCS_CH3_NEAR_LOOP_289 := 1'b1;
    }

    if (PCS_CH3_INT_RX_MASK_0 == "FALSE")
    {
        SC_PCS_CH3_INT_RX_MASK_0_296 := 1'b0;
    }
    else if (PCS_CH3_INT_RX_MASK_0 == "TRUE")
    {
        SC_PCS_CH3_INT_RX_MASK_0_296 := 1'b1;
    }

    if (PCS_CH3_INT_RX_MASK_1 == "FALSE")
    {
        SC_PCS_CH3_INT_RX_MASK_1_297 := 1'b0;
    }
    else if (PCS_CH3_INT_RX_MASK_1 == "TRUE")
    {
        SC_PCS_CH3_INT_RX_MASK_1_297 := 1'b1;
    }

    if (PCS_CH3_INT_RX_MASK_2 == "FALSE")
    {
        SC_PCS_CH3_INT_RX_MASK_2_298 := 1'b0;
    }
    else if (PCS_CH3_INT_RX_MASK_2 == "TRUE")
    {
        SC_PCS_CH3_INT_RX_MASK_2_298 := 1'b1;
    }

    if (PCS_CH3_INT_RX_MASK_3 == "FALSE")
    {
        SC_PCS_CH3_INT_RX_MASK_3_299 := 1'b0;
    }
    else if (PCS_CH3_INT_RX_MASK_3 == "TRUE")
    {
        SC_PCS_CH3_INT_RX_MASK_3_299 := 1'b1;
    }

    if (PCS_CH3_INT_RX_MASK_4 == "FALSE")
    {
        SC_PCS_CH3_INT_RX_MASK_4_300 := 1'b0;
    }
    else if (PCS_CH3_INT_RX_MASK_4 == "TRUE")
    {
        SC_PCS_CH3_INT_RX_MASK_4_300 := 1'b1;
    }

    if (PCS_CH3_INT_RX_MASK_5 == "FALSE")
    {
        SC_PCS_CH3_INT_RX_MASK_5_301 := 1'b0;
    }
    else if (PCS_CH3_INT_RX_MASK_5 == "TRUE")
    {
        SC_PCS_CH3_INT_RX_MASK_5_301 := 1'b1;
    }

    if (PCS_CH3_INT_RX_MASK_6 == "FALSE")
    {
        SC_PCS_CH3_INT_RX_MASK_6_302 := 1'b0;
    }
    else if (PCS_CH3_INT_RX_MASK_6 == "TRUE")
    {
        SC_PCS_CH3_INT_RX_MASK_6_302 := 1'b1;
    }

    if (PCS_CH3_INT_RX_MASK_7 == "FALSE")
    {
        SC_PCS_CH3_INT_RX_MASK_7_303 := 1'b0;
    }
    else if (PCS_CH3_INT_RX_MASK_7 == "TRUE")
    {
        SC_PCS_CH3_INT_RX_MASK_7_303 := 1'b1;
    }

    if (PCS_CH3_INT_RX_CLR_0 == "FALSE")
    {
        SC_PCS_CH3_INT_RX_CLR_0_304 := 1'b0;
    }
    else if (PCS_CH3_INT_RX_CLR_0 == "TRUE")
    {
        SC_PCS_CH3_INT_RX_CLR_0_304 := 1'b1;
    }

    if (PCS_CH3_INT_RX_CLR_1 == "FALSE")
    {
        SC_PCS_CH3_INT_RX_CLR_1_305 := 1'b0;
    }
    else if (PCS_CH3_INT_RX_CLR_1 == "TRUE")
    {
        SC_PCS_CH3_INT_RX_CLR_1_305 := 1'b1;
    }

    if (PCS_CH3_INT_RX_CLR_2 == "FALSE")
    {
        SC_PCS_CH3_INT_RX_CLR_2_306 := 1'b0;
    }
    else if (PCS_CH3_INT_RX_CLR_2 == "TRUE")
    {
        SC_PCS_CH3_INT_RX_CLR_2_306 := 1'b1;
    }

    if (PCS_CH3_INT_RX_CLR_3 == "FALSE")
    {
        SC_PCS_CH3_INT_RX_CLR_3_307 := 1'b0;
    }
    else if (PCS_CH3_INT_RX_CLR_3 == "TRUE")
    {
        SC_PCS_CH3_INT_RX_CLR_3_307 := 1'b1;
    }

    if (PCS_CH3_INT_RX_CLR_4 == "FALSE")
    {
        SC_PCS_CH3_INT_RX_CLR_4_308 := 1'b0;
    }
    else if (PCS_CH3_INT_RX_CLR_4 == "TRUE")
    {
        SC_PCS_CH3_INT_RX_CLR_4_308 := 1'b1;
    }

    if (PCS_CH3_INT_RX_CLR_5 == "FALSE")
    {
        SC_PCS_CH3_INT_RX_CLR_5_309 := 1'b0;
    }
    else if (PCS_CH3_INT_RX_CLR_5 == "TRUE")
    {
        SC_PCS_CH3_INT_RX_CLR_5_309 := 1'b1;
    }

    if (PCS_CH3_INT_RX_CLR_6 == "FALSE")
    {
        SC_PCS_CH3_INT_RX_CLR_6_310 := 1'b0;
    }
    else if (PCS_CH3_INT_RX_CLR_6 == "TRUE")
    {
        SC_PCS_CH3_INT_RX_CLR_6_310 := 1'b1;
    }

    if (PCS_CH3_INT_RX_CLR_7 == "FALSE")
    {
        SC_PCS_CH3_INT_RX_CLR_7_311 := 1'b0;
    }
    else if (PCS_CH3_INT_RX_CLR_7 == "TRUE")
    {
        SC_PCS_CH3_INT_RX_CLR_7_311 := 1'b1;
    }

    if (PMA_CH0_TXDATA_WIDTH == "8_BIT")
    {
        SC_PMA_CH0_TXDATA_WIDTH_381_380 := 2'b00;
    }
    else if (PMA_CH0_TXDATA_WIDTH == "10_BIT")
    {
        SC_PMA_CH0_TXDATA_WIDTH_381_380 := 2'b01;
    }
    else if (PMA_CH0_TXDATA_WIDTH == "16_BIT")
    {
        SC_PMA_CH0_TXDATA_WIDTH_381_380 := 2'b10;
    }
    else if (PMA_CH0_TXDATA_WIDTH == "20_BIT")
    {
        SC_PMA_CH0_TXDATA_WIDTH_381_380 := 2'b11;
    }

    if (PMA_CH0_TX_TESTPATTERN >= 0 && PMA_CH0_TX_TESTPATTERN <= 3)
    {
         SC_PMA_CH0_TX_TESTPATTERN_375_374 := to_unsigned(PMA_CH0_TX_TESTPATTERN,2);
    }

    if (PMA_CH0_TESTPATTERN_O_ENABLE == "FALSE")
    {
        SC_PMA_CH0_TESTPATTERN_O_ENABLE_373 := 1'b0;
    }
    else if (PMA_CH0_TESTPATTERN_O_ENABLE == "TRUE")
    {
        SC_PMA_CH0_TESTPATTERN_O_ENABLE_373 := 1'b1;
    }

    if (PMA_CH0_DISABLE_BSMODE_DRVAMP == "FALSE")
    {
        SC_PMA_CH0_DISABLE_BSMODE_DRVAMP_372 := 1'b1;
    }
    else if (PMA_CH0_DISABLE_BSMODE_DRVAMP == "TRUE")
    {
        SC_PMA_CH0_DISABLE_BSMODE_DRVAMP_372 := 1'b0;
    }

    if (PMA_CH0_FORCE_BIST_ENABLE == "FALSE")
    {
        SC_PMA_CH0_FORCE_BIST_ENABLE_371 := 1'b0;
    }
    else if (PMA_CH0_FORCE_BIST_ENABLE == "TRUE")
    {
        SC_PMA_CH0_FORCE_BIST_ENABLE_371 := 1'b1;
    }

    if (PMA_CH0_FORCE_ELECTRICAL_IDLE == "FALSE")
    {
        SC_PMA_CH0_FORCE_ELECTRICAL_IDLE_370 := 1'b0;
    }
    else if (PMA_CH0_FORCE_ELECTRICAL_IDLE == "TRUE")
    {
        SC_PMA_CH0_FORCE_ELECTRICAL_IDLE_370 := 1'b1;
    }

    if (PMA_CH0_FORCE_RXDCT_ENABLE == "FALSE")
    {
        SC_PMA_CH0_FORCE_RXDCT_ENABLE_369 := 1'b0;
    }
    else if (PMA_CH0_FORCE_RXDCT_ENABLE == "TRUE")
    {
        SC_PMA_CH0_FORCE_RXDCT_ENABLE_369 := 1'b1;
    }

    if (PMA_CH0_FORCE_EXTLB_ENABLE == "FALSE")
    {
        SC_PMA_CH0_FORCE_EXTLB_ENABLE_368 := 1'b0;
    }
    else if (PMA_CH0_FORCE_EXTLB_ENABLE == "TRUE")
    {
        SC_PMA_CH0_FORCE_EXTLB_ENABLE_368 := 1'b1;
    }

    if (PMA_CH0_DISABLE_LANE_SYNC == "FALSE")
    {
        SC_PMA_CH0_DISABLE_LANE_SYNC_367 := 1'b0;
    }
    else if (PMA_CH0_DISABLE_LANE_SYNC == "TRUE")
    {
        SC_PMA_CH0_DISABLE_LANE_SYNC_367 := 1'b1;
    }

    if (PMA_CH0_DISABLE_ELECTRICAL_IDLE == "FALSE")
    {
        SC_PMA_CH0_DISABLE_ELECTRICAL_IDLE_366 := 1'b0;
    }
    else if (PMA_CH0_DISABLE_ELECTRICAL_IDLE == "TRUE")
    {
        SC_PMA_CH0_DISABLE_ELECTRICAL_IDLE_366 := 1'b1;
    }

    if (PMA_CH0_DISABLE_RXDCT_ENABLE == "FALSE")
    {
        SC_PMA_CH0_DISABLE_RXDCT_ENABLE_365 := 1'b0;
    }
    else if (PMA_CH0_DISABLE_RXDCT_ENABLE == "TRUE")
    {
        SC_PMA_CH0_DISABLE_RXDCT_ENABLE_365 := 1'b1;
    }

    if (PMA_CH0_DISABLE_EXTLB_ENABLE == "FALSE")
    {
        SC_PMA_CH0_DISABLE_EXTLB_ENABLE_364 := 1'b0;
    }
    else if (PMA_CH0_DISABLE_EXTLB_ENABLE == "TRUE")
    {
        SC_PMA_CH0_DISABLE_EXTLB_ENABLE_364 := 1'b1;
    }

    if (PMA_CH0_DISABLE_LOW_SPEED_PATH_ENABLE == "FALSE")
    {
        SC_PMA_CH0_DISABLE_LOW_SPEED_PATH_ENABLE_363 := 1'b0;
    }
    else if (PMA_CH0_DISABLE_LOW_SPEED_PATH_ENABLE == "TRUE")
    {
        SC_PMA_CH0_DISABLE_LOW_SPEED_PATH_ENABLE_363 := 1'b1;
    }

    if (PMA_CH0_FORCE_LANE_ENABLE == "FALSE")
    {
        SC_PMA_CH0_FORCE_LANE_ENABLE_362 := 1'b0;
    }
    else if (PMA_CH0_FORCE_LANE_ENABLE == "TRUE")
    {
        SC_PMA_CH0_FORCE_LANE_ENABLE_362 := 1'b1;
    }

    if (PMA_CH0_FORCE_LANE_RESETB_DISABLE == "FALSE")
    {
        SC_PMA_CH0_FORCE_LANE_RESETB_DISABLE_361 := 1'b0;
    }
    else if (PMA_CH0_FORCE_LANE_RESETB_DISABLE == "TRUE")
    {
        SC_PMA_CH0_FORCE_LANE_RESETB_DISABLE_361 := 1'b1;
    }

    if (PMA_CH0_RXDCT_LGBW_ENABLE == "FALSE")
    {
        SC_PMA_CH0_RXDCT_LGBW_ENABLE_359 := 1'b0;
    }
    else if (PMA_CH0_RXDCT_LGBW_ENABLE == "TRUE")
    {
        SC_PMA_CH0_RXDCT_LGBW_ENABLE_359 := 1'b1;
    }

    if (PMA_CH0_RXDCT_VTH == "MINUS_300MV")
    {
        SC_PMA_CH0_RXDCT_VTH_358_357 := 2'b00;
    }
    else if (PMA_CH0_RXDCT_VTH == "MINUS_375MV")
    {
        SC_PMA_CH0_RXDCT_VTH_358_357 := 2'b01;
    }
    else if (PMA_CH0_RXDCT_VTH == "MINUS_150MV")
    {
        SC_PMA_CH0_RXDCT_VTH_358_357 := 2'b10;
    }
    else if (PMA_CH0_RXDCT_VTH == "MINUS_225MV")
    {
        SC_PMA_CH0_RXDCT_VTH_358_357 := 2'b11;
    }

    if (PMA_CH0_DE_EMPHASIS_ADDITIONAL_CONTROL == "0DB")
    {
        SC_PMA_CH0_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355 := 2'b00;
    }
    else if (PMA_CH0_DE_EMPHASIS_ADDITIONAL_CONTROL == "0_7DB")
    {
        SC_PMA_CH0_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355 := 2'b01;
    }
    else if (PMA_CH0_DE_EMPHASIS_ADDITIONAL_CONTROL == "1_4DB")
    {
        SC_PMA_CH0_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355 := 2'b11;
    }

    if (PMA_CH0_DRV_RTERM_CONTROL == "100PCT")
    {
        SC_PMA_CH0_DRV_RTERM_CONTROL_354_352 := 3'b000;
    }
    else if (PMA_CH0_DRV_RTERM_CONTROL == "95PCT")
    {
        SC_PMA_CH0_DRV_RTERM_CONTROL_354_352 := 3'b001;
    }
    else if (PMA_CH0_DRV_RTERM_CONTROL == "91PCT")
    {
        SC_PMA_CH0_DRV_RTERM_CONTROL_354_352 := 3'b010;
    }
    else if (PMA_CH0_DRV_RTERM_CONTROL == "87PCT")
    {
        SC_PMA_CH0_DRV_RTERM_CONTROL_354_352 := 3'b011;
    }
    else if (PMA_CH0_DRV_RTERM_CONTROL == "105PCT")
    {
        SC_PMA_CH0_DRV_RTERM_CONTROL_354_352 := 3'b100;
    }
    else if (PMA_CH0_DRV_RTERM_CONTROL == "111PCT")
    {
        SC_PMA_CH0_DRV_RTERM_CONTROL_354_352 := 3'b101;
    }
    else if (PMA_CH0_DRV_RTERM_CONTROL == "117PCT")
    {
        SC_PMA_CH0_DRV_RTERM_CONTROL_354_352 := 3'b110;
    }
    else if (PMA_CH0_DRV_RTERM_CONTROL == "highZ")
    {
        SC_PMA_CH0_DRV_RTERM_CONTROL_354_352 := 3'b111;
    }

    if (PMA_CH0_FDRV_AMP_CONTROL == "100PCT")
    {
        SC_PMA_CH0_FDRV_AMP_CONTROL_351_350 := 2'b00;
    }
    else if (PMA_CH0_FDRV_AMP_CONTROL == "92PCT")
    {
        SC_PMA_CH0_FDRV_AMP_CONTROL_351_350 := 2'b01;
    }
    else if (PMA_CH0_FDRV_AMP_CONTROL == "109PCT")
    {
        SC_PMA_CH0_FDRV_AMP_CONTROL_351_350 := 2'b10;
    }
    else if (PMA_CH0_FDRV_AMP_CONTROL == "120PCT")
    {
        SC_PMA_CH0_FDRV_AMP_CONTROL_351_350 := 2'b11;
    }

    if (PMA_CH0_PREPC_AMP_CONTROL == "100PCT")
    {
        SC_PMA_CH0_PREPC_AMP_CONTROL_349_348 := 2'b00;
    }
    else if (PMA_CH0_PREPC_AMP_CONTROL == "83PCT")
    {
        SC_PMA_CH0_PREPC_AMP_CONTROL_349_348 := 2'b01;
    }
    else if (PMA_CH0_PREPC_AMP_CONTROL == "133PCT")
    {
        SC_PMA_CH0_PREPC_AMP_CONTROL_349_348 := 2'b10;
    }
    else if (PMA_CH0_PREPC_AMP_CONTROL == "117PCT")
    {
        SC_PMA_CH0_PREPC_AMP_CONTROL_349_348 := 2'b11;
    }

    if (PMA_CH0_PREMC_AMP_CONTROL == "100PCT")
    {
        SC_PMA_CH0_PREMC_AMP_CONTROL_347_346 := 2'b00;
    }
    else if (PMA_CH0_PREMC_AMP_CONTROL == "83PCT")
    {
        SC_PMA_CH0_PREMC_AMP_CONTROL_347_346 := 2'b01;
    }
    else if (PMA_CH0_PREMC_AMP_CONTROL == "133PCT")
    {
        SC_PMA_CH0_PREMC_AMP_CONTROL_347_346 := 2'b10;
    }
    else if (PMA_CH0_PREMC_AMP_CONTROL == "117PCT")
    {
        SC_PMA_CH0_PREMC_AMP_CONTROL_347_346 := 2'b11;
    }

    if (PMA_CH0_SER_AMP_CONTROL == "100PCT")
    {
        SC_PMA_CH0_SER_AMP_CONTROL_345_344 := 2'b00;
    }
    else if (PMA_CH0_SER_AMP_CONTROL == "83PCT")
    {
        SC_PMA_CH0_SER_AMP_CONTROL_345_344 := 2'b01;
    }
    else if (PMA_CH0_SER_AMP_CONTROL == "133PCT")
    {
        SC_PMA_CH0_SER_AMP_CONTROL_345_344 := 2'b10;
    }
    else if (PMA_CH0_SER_AMP_CONTROL == "117PCT")
    {
        SC_PMA_CH0_SER_AMP_CONTROL_345_344 := 2'b11;
    }

    if (PMA_CH0_PFD_LOOP_RESISTOR_SETTING >= 0 && PMA_CH0_PFD_LOOP_RESISTOR_SETTING <= 15)
    {
         SC_PMA_CH0_PFD_LOOP_RESISTOR_SETTING_327_324 := to_unsigned(PMA_CH0_PFD_LOOP_RESISTOR_SETTING,4);
    }

    if (PMA_CH0_PD_LOOP_RESISTOR_SETTING >= 0 && PMA_CH0_PD_LOOP_RESISTOR_SETTING <= 15)
    {
         SC_PMA_CH0_PD_LOOP_RESISTOR_SETTING_323_320 := to_unsigned(PMA_CH0_PD_LOOP_RESISTOR_SETTING,4);
    }

    if (PMA_CH0_CDR_TEST_OUT_SELECT == "FBCK")
    {
        SC_PMA_CH0_CDR_TEST_OUT_SELECT_319 := 1'b0;
    }
    else if (PMA_CH0_CDR_TEST_OUT_SELECT == "PD")
    {
        SC_PMA_CH0_CDR_TEST_OUT_SELECT_319 := 1'b1;
    }

    if (PMA_CH0_PI_DIV1_BP == "DISABLE")
    {
        SC_PMA_CH0_PI_DIV1_BP_318 := 1'b0;
    }
    else if (PMA_CH0_PI_DIV1_BP == "ENABLE")
    {
        SC_PMA_CH0_PI_DIV1_BP_318 := 1'b1;
    }

    if (PMA_CH0_PI_TEST_FOR_CKI == "FALSE")
    {
        SC_PMA_CH0_PI_TEST_FOR_CKI_317 := 1'b0;
    }
    else if (PMA_CH0_PI_TEST_FOR_CKI == "TRUE")
    {
        SC_PMA_CH0_PI_TEST_FOR_CKI_317 := 1'b1;
    }

    if (PMA_CH0_PI_CURRENT_SETTING == "100PCT")
    {
        SC_PMA_CH0_PI_CURRENT_SETTING_316_314 := 3'b000;
    }
    else if (PMA_CH0_PI_CURRENT_SETTING == "80PCT")
    {
        SC_PMA_CH0_PI_CURRENT_SETTING_316_314 := 3'b001;
    }
    else if (PMA_CH0_PI_CURRENT_SETTING == "140PCT")
    {
        SC_PMA_CH0_PI_CURRENT_SETTING_316_314 := 3'b010;
    }
    else if (PMA_CH0_PI_CURRENT_SETTING == "120PCT")
    {
        SC_PMA_CH0_PI_CURRENT_SETTING_316_314 := 3'b011;
    }
    else if (PMA_CH0_PI_CURRENT_SETTING == "160PCT")
    {
        SC_PMA_CH0_PI_CURRENT_SETTING_316_314 := 3'b100;
    }
    else if (PMA_CH0_PI_CURRENT_SETTING == "120PCTr")
    {
        SC_PMA_CH0_PI_CURRENT_SETTING_316_314 := 3'b101;
    }
    else if (PMA_CH0_PI_CURRENT_SETTING == "200PCT")
    {
        SC_PMA_CH0_PI_CURRENT_SETTING_316_314 := 3'b110;
    }
    else if (PMA_CH0_PI_CURRENT_SETTING == "180PCT")
    {
        SC_PMA_CH0_PI_CURRENT_SETTING_316_314 := 3'b111;
    }

    if (PMA_CH0_PI_FREQUENCY_SETTING >= 0 && PMA_CH0_PI_FREQUENCY_SETTING <= 3)
    {
         SC_PMA_CH0_PI_FREQUENCY_SETTING_313_312 := to_unsigned(PMA_CH0_PI_FREQUENCY_SETTING,2);
    }

    if (PMA_CH0_TEST_OUT_SELECT_FOR_RCK == "FALSE")
    {
        SC_PMA_CH0_TEST_OUT_SELECT_FOR_RCK_311 := 1'b0;
    }
    else if (PMA_CH0_TEST_OUT_SELECT_FOR_RCK == "TRUE")
    {
        SC_PMA_CH0_TEST_OUT_SELECT_FOR_RCK_311 := 1'b1;
    }

    if (PMA_CH0_TEST_OUT_SELECT_SOURCE == "SLPI1UI")
    {
        SC_PMA_CH0_TEST_OUT_SELECT_SOURCE_310 := 1'b0;
    }
    else if (PMA_CH0_TEST_OUT_SELECT_SOURCE == "PD1")
    {
        SC_PMA_CH0_TEST_OUT_SELECT_SOURCE_310 := 1'b1;
    }

    if (PMA_CH0_TEST_DATA_OUT_SELECT_SOURCE == "DO")
    {
        SC_PMA_CH0_TEST_DATA_OUT_SELECT_SOURCE_309 := 1'b0;
    }
    else if (PMA_CH0_TEST_DATA_OUT_SELECT_SOURCE == "DE")
    {
        SC_PMA_CH0_TEST_DATA_OUT_SELECT_SOURCE_309 := 1'b1;
    }

    if (PMA_CH0_TEST_CK_OUT_SELECT_SOURCE == "DATA")
    {
        SC_PMA_CH0_TEST_CK_OUT_SELECT_SOURCE_308 := 1'b0;
    }
    else if (PMA_CH0_TEST_CK_OUT_SELECT_SOURCE == "CLOCK")
    {
        SC_PMA_CH0_TEST_CK_OUT_SELECT_SOURCE_308 := 1'b1;
    }

    if (PMA_CH0_ENABLE_SLIP1UI_MODULE == "DISABLE")
    {
        SC_PMA_CH0_ENABLE_SLIP1UI_MODULE_307 := 1'b0;
    }
    else if (PMA_CH0_ENABLE_SLIP1UI_MODULE == "ENABLE")
    {
        SC_PMA_CH0_ENABLE_SLIP1UI_MODULE_307 := 1'b1;
    }

    if (PMA_CH0_PN_SWAP_ENABLE == "DISABLE")
    {
        SC_PMA_CH0_PN_SWAP_ENABLE_306 := 1'b0;
    }
    else if (PMA_CH0_PN_SWAP_ENABLE == "ENABLE")
    {
        SC_PMA_CH0_PN_SWAP_ENABLE_306 := 1'b1;
    }

    if (PMA_CH0_SIPO_BIT_SETTING == "10_BIT")
    {
        SC_PMA_CH0_SIPO_BIT_SETTING_305_304 := 2'b00;
    }
    else if (PMA_CH0_SIPO_BIT_SETTING == "8_BIT")
    {
        SC_PMA_CH0_SIPO_BIT_SETTING_305_304 := 2'b01;
    }
    else if (PMA_CH0_SIPO_BIT_SETTING == "20_BIT")
    {
        SC_PMA_CH0_SIPO_BIT_SETTING_305_304 := 2'b10;
    }
    else if (PMA_CH0_SIPO_BIT_SETTING == "16_BIT")
    {
        SC_PMA_CH0_SIPO_BIT_SETTING_305_304 := 2'b11;
    }

    if (PMA_CH0_OOB_EN == "DISABLE")
    {
        SC_PMA_CH0_OOB_EN_303 := 1'b0;
    }
    else if (PMA_CH0_OOB_EN == "ENABLE")
    {
        SC_PMA_CH0_OOB_EN_303 := 1'b1;
    }

    if (PMA_CH0_ALOS_EN == "DISABLE")
    {
        SC_PMA_CH0_ALOS_EN_302 := 1'b0;
    }
    else if (PMA_CH0_ALOS_EN == "ENABLE")
    {
        SC_PMA_CH0_ALOS_EN_302 := 1'b1;
    }

    if (PMA_CH0_LFMODE == "HIGH")
    {
        SC_PMA_CH0_LFMODE_301 := 1'b0;
    }
    else if (PMA_CH0_LFMODE == "LOW")
    {
        SC_PMA_CH0_LFMODE_301 := 1'b1;
    }

    if (PMA_CH0_TSO_HS_SEL == "CDR")
    {
        SC_PMA_CH0_TSO_HS_SEL_300 := 1'b0;
    }
    else if (PMA_CH0_TSO_HS_SEL == "EQ")
    {
        SC_PMA_CH0_TSO_HS_SEL_300 := 1'b1;
    }

    if (PMA_CH0_LX_SELLC == "RING")
    {
        SC_PMA_CH0_LX_SELLC_295 := 1'b0;
    }
    else if (PMA_CH0_LX_SELLC == "LC")
    {
        SC_PMA_CH0_LX_SELLC_295 := 1'b1;
    }

    if (PMA_CH0_LX_RXPLL_DIVSEL45_FB == 4)
    {
        SC_PMA_CH0_LX_RXPLL_DIVSEL45_FB_287 := 1'b0;
    }
    else if (PMA_CH0_LX_RXPLL_DIVSEL45_FB == 5)
    {
        SC_PMA_CH0_LX_RXPLL_DIVSEL45_FB_287 := 1'b1;
    }

    if (PMA_CH0_LX_RXPLL_DIVSEL_FB == 2)
    {
        SC_PMA_CH0_LX_RXPLL_DIVSEL_FB_286_284 := 3'b000;
    }
    else if (PMA_CH0_LX_RXPLL_DIVSEL_FB == 4)
    {
        SC_PMA_CH0_LX_RXPLL_DIVSEL_FB_286_284 := 3'b001;
    }
    else if (PMA_CH0_LX_RXPLL_DIVSEL_FB == 5)
    {
        SC_PMA_CH0_LX_RXPLL_DIVSEL_FB_286_284 := 3'b010;
    }
    else if (PMA_CH0_LX_RXPLL_DIVSEL_FB == 8)
    {
        SC_PMA_CH0_LX_RXPLL_DIVSEL_FB_286_284 := 3'b101;
    }
    else if (PMA_CH0_LX_RXPLL_DIVSEL_FB == 10)
    {
        SC_PMA_CH0_LX_RXPLL_DIVSEL_FB_286_284 := 3'b110;
    }

    if (PMA_CH0_LX_RXPLL_DIVSEL_REF == 1)
    {
        SC_PMA_CH0_LX_RXPLL_DIVSEL_REF_283_282 := 2'b00;
    }
    else if (PMA_CH0_LX_RXPLL_DIVSEL_REF == 2)
    {
        SC_PMA_CH0_LX_RXPLL_DIVSEL_REF_283_282 := 2'b01;
    }
    else if (PMA_CH0_LX_RXPLL_DIVSEL_REF == 4)
    {
        SC_PMA_CH0_LX_RXPLL_DIVSEL_REF_283_282 := 2'b10;
    }

    if (PMA_CH0_PICODE >= 0 && PMA_CH0_PICODE <= 255)
    {
         SC_PMA_CH0_PICODE_279_272 := to_unsigned(PMA_CH0_PICODE,8);
    }

    if (PMA_CH0_RX_REFCK_SEL >= 0 && PMA_CH0_RX_REFCK_SEL <= 3)
    {
         SC_PMA_CH0_RX_REFCK_SEL_265_264 := to_unsigned(PMA_CH0_RX_REFCK_SEL,2) ^ 2'b10;
    }

    if (PMA_CH0_PFDLPEN_REGISTER_CONTROL_ENABLE == "DISABLE")
    {
        SC_PMA_CH0_PFDLPEN_REGISTER_CONTROL_ENABLE_259 := 1'b0;
    }
    else if (PMA_CH0_PFDLPEN_REGISTER_CONTROL_ENABLE == "ENABLE")
    {
        SC_PMA_CH0_PFDLPEN_REGISTER_CONTROL_ENABLE_259 := 1'b1;
    }

    if (PMA_CH0_PFDLPEN_REGISTER_SETTING == "FALSE")
    {
        SC_PMA_CH0_PFDLPEN_REGISTER_SETTING_258 := 1'b0;
    }
    else if (PMA_CH0_PFDLPEN_REGISTER_SETTING == "TRUE")
    {
        SC_PMA_CH0_PFDLPEN_REGISTER_SETTING_258 := 1'b1;
    }

    if (PMA_CH0_PDLPEN_REGISTER_CONTROL_ENABLE == "DISABLE")
    {
        SC_PMA_CH0_PDLPEN_REGISTER_CONTROL_ENABLE_257 := 1'b0;
    }
    else if (PMA_CH0_PDLPEN_REGISTER_CONTROL_ENABLE == "ENABLE")
    {
        SC_PMA_CH0_PDLPEN_REGISTER_CONTROL_ENABLE_257 := 1'b1;
    }

    if (PMA_CH0_PDLPEN_REGISTER_SETTING == "FALSE")
    {
        SC_PMA_CH0_PDLPEN_REGISTER_SETTING_256 := 1'b0;
    }
    else if (PMA_CH0_PDLPEN_REGISTER_SETTING == "TRUE")
    {
        SC_PMA_CH0_PDLPEN_REGISTER_SETTING_256 := 1'b1;
    }

    if (PMA_CH0_DIV_CHANGE_ENABLE_DELAY_TIMER >= 0 && PMA_CH0_DIV_CHANGE_ENABLE_DELAY_TIMER <= 3)
    {
         SC_PMA_CH0_DIV_CHANGE_ENABLE_DELAY_TIMER_254_253 := to_unsigned(PMA_CH0_DIV_CHANGE_ENABLE_DELAY_TIMER,2);
    }

    if (PMA_CH0_DIV_CHANGE_ENABLE_SIGNAL_GATING == "FALSE")
    {
        SC_PMA_CH0_DIV_CHANGE_ENABLE_SIGNAL_GATING_252 := 1'b0;
    }
    else if (PMA_CH0_DIV_CHANGE_ENABLE_SIGNAL_GATING == "TRUE")
    {
        SC_PMA_CH0_DIV_CHANGE_ENABLE_SIGNAL_GATING_252 := 1'b1;
    }

    if (PMA_CH0_CDR_ALIGN_REGISTER_SETTING_VALUE == "FALSE")
    {
        SC_PMA_CH0_CDR_ALIGN_REGISTER_SETTING_VALUE_251 := 1'b0;
    }
    else if (PMA_CH0_CDR_ALIGN_REGISTER_SETTING_VALUE == "TRUE")
    {
        SC_PMA_CH0_CDR_ALIGN_REGISTER_SETTING_VALUE_251 := 1'b1;
    }

    if (PMA_CH0_FORCE_CDR_ALIGN_ENABLE == "DISABLE")
    {
        SC_PMA_CH0_FORCE_CDR_ALIGN_ENABLE_250 := 1'b0;
    }
    else if (PMA_CH0_FORCE_CDR_ALIGN_ENABLE == "ENABLE")
    {
        SC_PMA_CH0_FORCE_CDR_ALIGN_ENABLE_250 := 1'b1;
    }

    if (PMA_CH0_SELLC_REGISTER_SETTING_VALUE == "FALSE")
    {
        SC_PMA_CH0_SELLC_REGISTER_SETTING_VALUE_249 := 1'b0;
    }
    else if (PMA_CH0_SELLC_REGISTER_SETTING_VALUE == "TRUE")
    {
        SC_PMA_CH0_SELLC_REGISTER_SETTING_VALUE_249 := 1'b1;
    }

    if (PMA_CH0_SELLC_CONTROL_BY_REGISTER == "FALSE")
    {
        SC_PMA_CH0_SELLC_CONTROL_BY_REGISTER_248 := 1'b0;
    }
    else if (PMA_CH0_SELLC_CONTROL_BY_REGISTER == "TRUE")
    {
        SC_PMA_CH0_SELLC_CONTROL_BY_REGISTER_248 := 1'b1;
    }

    if (PMA_CH0_REG_PLLI_LDO_VREF_SETTING == "0_9V")
    {
        SC_PMA_CH0_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b100;
    }
    else if (PMA_CH0_REG_PLLI_LDO_VREF_SETTING == "0_95V")
    {
        SC_PMA_CH0_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b101;
    }
    else if (PMA_CH0_REG_PLLI_LDO_VREF_SETTING == "1_00V")
    {
        SC_PMA_CH0_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b110;
    }
    else if (PMA_CH0_REG_PLLI_LDO_VREF_SETTING == "1_05V")
    {
        SC_PMA_CH0_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b111;
    }
    else if (PMA_CH0_REG_PLLI_LDO_VREF_SETTING == "1_1V")
    {
        SC_PMA_CH0_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b000;
    }
    else if (PMA_CH0_REG_PLLI_LDO_VREF_SETTING == "1_15V")
    {
        SC_PMA_CH0_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b001;
    }
    else if (PMA_CH0_REG_PLLI_LDO_VREF_SETTING == "1_20V")
    {
        SC_PMA_CH0_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b010;
    }
    else if (PMA_CH0_REG_PLLI_LDO_VREF_SETTING == "1_25V")
    {
        SC_PMA_CH0_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b011;
    }

    if (PMA_CH0_REG_PLLI_LDO_BYPASS_CURRENT >= 0 && PMA_CH0_REG_PLLI_LDO_BYPASS_CURRENT <= 7)
    {
         SC_PMA_CH0_REG_PLLI_LDO_BYPASS_CURRENT_244_242 := to_unsigned(PMA_CH0_REG_PLLI_LDO_BYPASS_CURRENT,3) ^ 3'b100;
    }

    if (PMA_CH0_REG_PLL_HSTEST_ENABLE == "DISABLE")
    {
        SC_PMA_CH0_REG_PLL_HSTEST_ENABLE_239 := 1'b0;
    }
    else if (PMA_CH0_REG_PLL_HSTEST_ENABLE == "ENABLE")
    {
        SC_PMA_CH0_REG_PLL_HSTEST_ENABLE_239 := 1'b1;
    }

    if (PMA_CH0_REG_PLL_ISNK_CURRENT_CONTROL == "5U")
    {
        SC_PMA_CH0_REG_PLL_ISNK_CURRENT_CONTROL_238_237 := 2'b00;
    }
    else if (PMA_CH0_REG_PLL_ISNK_CURRENT_CONTROL == "15U")
    {
        SC_PMA_CH0_REG_PLL_ISNK_CURRENT_CONTROL_238_237 := 2'b01;
    }
    else if (PMA_CH0_REG_PLL_ISNK_CURRENT_CONTROL == "25U")
    {
        SC_PMA_CH0_REG_PLL_ISNK_CURRENT_CONTROL_238_237 := 2'b10;
    }
    else if (PMA_CH0_REG_PLL_ISNK_CURRENT_CONTROL == "35U")
    {
        SC_PMA_CH0_REG_PLL_ISNK_CURRENT_CONTROL_238_237 := 2'b11;
    }

    if (PMA_CH0_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING >= 0 && PMA_CH0_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING <= 31)
    {
         SC_PMA_CH0_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232 := to_unsigned(PMA_CH0_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING,5);
    }

    if (PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING == "100PCT")
    {
        SC_PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b000;
    }
    else if (PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING == "89PCT")
    {
        SC_PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b001;
    }
    else if (PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING == "122PCT")
    {
        SC_PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b010;
    }
    else if (PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING == "111PCT")
    {
        SC_PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b011;
    }
    else if (PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING == "144PCT")
    {
        SC_PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b100;
    }
    else if (PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING == "133PCT")
    {
        SC_PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b101;
    }
    else if (PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING == "167PCT")
    {
        SC_PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b110;
    }
    else if (PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING == "156PCT")
    {
        SC_PMA_CH0_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b111;
    }

    if (PMA_CH0_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING >= 0 && PMA_CH0_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING <= 31)
    {
         SC_PMA_CH0_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224 := to_unsigned(PMA_CH0_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING,5);
    }

    if (PMA_CH0_REG_PLL_CP0_BIAS_CONTROL == "100PCT")
    {
        SC_PMA_CH0_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b000;
    }
    else if (PMA_CH0_REG_PLL_CP0_BIAS_CONTROL == "111PCT")
    {
        SC_PMA_CH0_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b001;
    }
    else if (PMA_CH0_REG_PLL_CP0_BIAS_CONTROL == "125PCT")
    {
        SC_PMA_CH0_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b010;
    }
    else if (PMA_CH0_REG_PLL_CP0_BIAS_CONTROL == "143PCT")
    {
        SC_PMA_CH0_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b011;
    }
    else if (PMA_CH0_REG_PLL_CP0_BIAS_CONTROL == "71PCT")
    {
        SC_PMA_CH0_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b100;
    }
    else if (PMA_CH0_REG_PLL_CP0_BIAS_CONTROL == "77PCT")
    {
        SC_PMA_CH0_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b101;
    }
    else if (PMA_CH0_REG_PLL_CP0_BIAS_CONTROL == "83PCT")
    {
        SC_PMA_CH0_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b110;
    }
    else if (PMA_CH0_REG_PLL_CP0_BIAS_CONTROL == "91PCT")
    {
        SC_PMA_CH0_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b111;
    }

    if (PMA_CH0_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING >= 0 && PMA_CH0_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING <= 31)
    {
         SC_PMA_CH0_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216 := to_unsigned(PMA_CH0_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING,5);
    }

    if (PMA_CH0_REG_PLL_CP1_BIAS_CONTROL == "100PCT")
    {
        SC_PMA_CH0_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b000;
    }
    else if (PMA_CH0_REG_PLL_CP1_BIAS_CONTROL == "111PCT")
    {
        SC_PMA_CH0_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b001;
    }
    else if (PMA_CH0_REG_PLL_CP1_BIAS_CONTROL == "125PCT")
    {
        SC_PMA_CH0_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b010;
    }
    else if (PMA_CH0_REG_PLL_CP1_BIAS_CONTROL == "143PCT")
    {
        SC_PMA_CH0_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b011;
    }
    else if (PMA_CH0_REG_PLL_CP1_BIAS_CONTROL == "71PCT")
    {
        SC_PMA_CH0_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b100;
    }
    else if (PMA_CH0_REG_PLL_CP1_BIAS_CONTROL == "77PCT")
    {
        SC_PMA_CH0_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b101;
    }
    else if (PMA_CH0_REG_PLL_CP1_BIAS_CONTROL == "83PCT")
    {
        SC_PMA_CH0_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b110;
    }
    else if (PMA_CH0_REG_PLL_CP1_BIAS_CONTROL == "91PCT")
    {
        SC_PMA_CH0_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b111;
    }

    if (PMA_CH0_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING >= 0 && PMA_CH0_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING <= 31)
    {
         SC_PMA_CH0_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208 := to_unsigned(PMA_CH0_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING,5);
    }

    if (PMA_CH0_REG_PLL_CP0_CURRENT_SETTING == "100PCT")
    {
        SC_PMA_CH0_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b000;
    }
    else if (PMA_CH0_REG_PLL_CP0_CURRENT_SETTING == "20PCT")
    {
        SC_PMA_CH0_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b001;
    }
    else if (PMA_CH0_REG_PLL_CP0_CURRENT_SETTING == "140PCT")
    {
        SC_PMA_CH0_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b010;
    }
    else if (PMA_CH0_REG_PLL_CP0_CURRENT_SETTING == "60PCT")
    {
        SC_PMA_CH0_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b011;
    }
    else if (PMA_CH0_REG_PLL_CP0_CURRENT_SETTING == "160PCT")
    {
        SC_PMA_CH0_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b100;
    }
    else if (PMA_CH0_REG_PLL_CP0_CURRENT_SETTING == "80PCT")
    {
        SC_PMA_CH0_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b101;
    }
    else if (PMA_CH0_REG_PLL_CP0_CURRENT_SETTING == "200PCT")
    {
        SC_PMA_CH0_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b110;
    }
    else if (PMA_CH0_REG_PLL_CP0_CURRENT_SETTING == "120PCT")
    {
        SC_PMA_CH0_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b111;
    }

    if (PMA_CH0_REG_PLL_CP1_CURRENT_SETTING == "100PCT")
    {
        SC_PMA_CH0_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b000;
    }
    else if (PMA_CH0_REG_PLL_CP1_CURRENT_SETTING == "20PCT")
    {
        SC_PMA_CH0_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b001;
    }
    else if (PMA_CH0_REG_PLL_CP1_CURRENT_SETTING == "140PCT")
    {
        SC_PMA_CH0_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b010;
    }
    else if (PMA_CH0_REG_PLL_CP1_CURRENT_SETTING == "60PCT")
    {
        SC_PMA_CH0_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b011;
    }
    else if (PMA_CH0_REG_PLL_CP1_CURRENT_SETTING == "160PCT")
    {
        SC_PMA_CH0_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b100;
    }
    else if (PMA_CH0_REG_PLL_CP1_CURRENT_SETTING == "80PCT")
    {
        SC_PMA_CH0_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b101;
    }
    else if (PMA_CH0_REG_PLL_CP1_CURRENT_SETTING == "200PCT")
    {
        SC_PMA_CH0_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b110;
    }
    else if (PMA_CH0_REG_PLL_CP1_CURRENT_SETTING == "120PCT")
    {
        SC_PMA_CH0_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b111;
    }

    if (PMA_CH0_REG_PLL_GM1_CURRENT_SETTING == "100PCT")
    {
        SC_PMA_CH0_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b000;
    }
    else if (PMA_CH0_REG_PLL_GM1_CURRENT_SETTING == "67PCT")
    {
        SC_PMA_CH0_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b001;
    }
    else if (PMA_CH0_REG_PLL_GM1_CURRENT_SETTING == "167PCT")
    {
        SC_PMA_CH0_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b010;
    }
    else if (PMA_CH0_REG_PLL_GM1_CURRENT_SETTING == "133PCT")
    {
        SC_PMA_CH0_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b011;
    }
    else if (PMA_CH0_REG_PLL_GM1_CURRENT_SETTING == "300PCT")
    {
        SC_PMA_CH0_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b100;
    }
    else if (PMA_CH0_REG_PLL_GM1_CURRENT_SETTING == "267PCT")
    {
        SC_PMA_CH0_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b101;
    }
    else if (PMA_CH0_REG_PLL_GM1_CURRENT_SETTING == "367PCT")
    {
        SC_PMA_CH0_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b110;
    }
    else if (PMA_CH0_REG_PLL_GM1_CURRENT_SETTING == "333PCT")
    {
        SC_PMA_CH0_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b111;
    }

    if (PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING == "100PCT")
    {
        SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b000;
    }
    else if (PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING == "20PCT")
    {
        SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b001;
    }
    else if (PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING == "140PCT")
    {
        SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b010;
    }
    else if (PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING == "60PCT")
    {
        SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b011;
    }
    else if (PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING == "160PCT")
    {
        SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b100;
    }
    else if (PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING == "80PCT")
    {
        SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b101;
    }
    else if (PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING == "200PCT")
    {
        SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b110;
    }
    else if (PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING == "120PCT")
    {
        SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b111;
    }

    if (PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "100PCT")
    {
        SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b000;
    }
    else if (PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "20PCT")
    {
        SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b001;
    }
    else if (PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "140PCT")
    {
        SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b010;
    }
    else if (PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "60PCT")
    {
        SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b011;
    }
    else if (PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "160PCT")
    {
        SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b100;
    }
    else if (PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "80PCT")
    {
        SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b101;
    }
    else if (PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "200PCT")
    {
        SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b110;
    }
    else if (PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "120PCT")
    {
        SC_PMA_CH0_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b111;
    }

    if (PMA_CH0_REG_PLL_REG_CUR == "100PCT")
    {
        SC_PMA_CH0_REG_PLL_REG_CUR_192_190 := 3'b000;
    }
    else if (PMA_CH0_REG_PLL_REG_CUR == "80PCT")
    {
        SC_PMA_CH0_REG_PLL_REG_CUR_192_190 := 3'b001;
    }
    else if (PMA_CH0_REG_PLL_REG_CUR == "140PCT")
    {
        SC_PMA_CH0_REG_PLL_REG_CUR_192_190 := 3'b010;
    }
    else if (PMA_CH0_REG_PLL_REG_CUR == "120PCT")
    {
        SC_PMA_CH0_REG_PLL_REG_CUR_192_190 := 3'b011;
    }
    else if (PMA_CH0_REG_PLL_REG_CUR == "180PCT")
    {
        SC_PMA_CH0_REG_PLL_REG_CUR_192_190 := 3'b100;
    }
    else if (PMA_CH0_REG_PLL_REG_CUR == "160PCT")
    {
        SC_PMA_CH0_REG_PLL_REG_CUR_192_190 := 3'b101;
    }
    else if (PMA_CH0_REG_PLL_REG_CUR == "220PCT")
    {
        SC_PMA_CH0_REG_PLL_REG_CUR_192_190 := 3'b110;
    }
    else if (PMA_CH0_REG_PLL_REG_CUR == "200PCT")
    {
        SC_PMA_CH0_REG_PLL_REG_CUR_192_190 := 3'b111;
    }

    if (PMA_CH0_REG_PLL_LCCUR == "DEFAULT")
    {
        SC_PMA_CH0_REG_PLL_LCCUR_189_187 := 3'b000;
    }
    else if (PMA_CH0_REG_PLL_LCCUR == "MINUS_1MA")
    {
        SC_PMA_CH0_REG_PLL_LCCUR_189_187 := 3'b001;
    }
    else if (PMA_CH0_REG_PLL_LCCUR == "2MA")
    {
        SC_PMA_CH0_REG_PLL_LCCUR_189_187 := 3'b010;
    }
    else if (PMA_CH0_REG_PLL_LCCUR == "1MA")
    {
        SC_PMA_CH0_REG_PLL_LCCUR_189_187 := 3'b011;
    }
    else if (PMA_CH0_REG_PLL_LCCUR == "4MA")
    {
        SC_PMA_CH0_REG_PLL_LCCUR_189_187 := 3'b100;
    }
    else if (PMA_CH0_REG_PLL_LCCUR == "3MA")
    {
        SC_PMA_CH0_REG_PLL_LCCUR_189_187 := 3'b101;
    }
    else if (PMA_CH0_REG_PLL_LCCUR == "6MA")
    {
        SC_PMA_CH0_REG_PLL_LCCUR_189_187 := 3'b110;
    }
    else if (PMA_CH0_REG_PLL_LCCUR == "5MA")
    {
        SC_PMA_CH0_REG_PLL_LCCUR_189_187 := 3'b111;
    }

    if (PMA_CH0_REG_PLL_LCOBAS == "100PCT")
    {
        SC_PMA_CH0_REG_PLL_LCOBAS_186_185 := 2'b00;
    }
    else if (PMA_CH0_REG_PLL_LCOBAS == "75PCT")
    {
        SC_PMA_CH0_REG_PLL_LCOBAS_186_185 := 2'b01;
    }
    else if (PMA_CH0_REG_PLL_LCOBAS == "150PCT")
    {
        SC_PMA_CH0_REG_PLL_LCOBAS_186_185 := 2'b10;
    }
    else if (PMA_CH0_REG_PLL_LCOBAS == "125PCT")
    {
        SC_PMA_CH0_REG_PLL_LCOBAS_186_185 := 2'b11;
    }

    if (PMA_CH0_REG_PLL_FB_CK_TEST_OUT_ENABLE == "DISABLE")
    {
        SC_PMA_CH0_REG_PLL_FB_CK_TEST_OUT_ENABLE_184 := 1'b0;
    }
    else if (PMA_CH0_REG_PLL_FB_CK_TEST_OUT_ENABLE == "ENABLE")
    {
        SC_PMA_CH0_REG_PLL_FB_CK_TEST_OUT_ENABLE_184 := 1'b1;
    }

    if (PMA_CH0_CDR_ALIGN_TIMER >= 0 && PMA_CH0_CDR_ALIGN_TIMER <= 3)
    {
         SC_PMA_CH0_CDR_ALIGN_TIMER_183_182 := to_unsigned(PMA_CH0_CDR_ALIGN_TIMER,2);
    }

    if (PMA_CH0_CALIB_WAIT == 1024)
    {
        SC_PMA_CH0_CALIB_WAIT_181_180 := 2'b00;
    }
    else if (PMA_CH0_CALIB_WAIT == 2048)
    {
        SC_PMA_CH0_CALIB_WAIT_181_180 := 2'b01;
    }
    else if (PMA_CH0_CALIB_WAIT == 4096)
    {
        SC_PMA_CH0_CALIB_WAIT_181_180 := 2'b10;
    }
    else if (PMA_CH0_CALIB_WAIT == 512)
    {
        SC_PMA_CH0_CALIB_WAIT_181_180 := 2'b11;
    }

    if (PMA_CH0_CALIB_TIMER == 512)
    {
        SC_PMA_CH0_CALIB_TIMER_179_178 := 2'b00;
    }
    else if (PMA_CH0_CALIB_TIMER == 1024)
    {
        SC_PMA_CH0_CALIB_TIMER_179_178 := 2'b01;
    }
    else if (PMA_CH0_CALIB_TIMER == 2048)
    {
        SC_PMA_CH0_CALIB_TIMER_179_178 := 2'b10;
    }
    else if (PMA_CH0_CALIB_TIMER == 4096)
    {
        SC_PMA_CH0_CALIB_TIMER_179_178 := 2'b11;
    }

    if (PMA_CH0_TOT_RANGE >= 0 && PMA_CH0_TOT_RANGE <= 3)
    {
         SC_PMA_CH0_TOT_RANGE_177_176 := to_unsigned(PMA_CH0_TOT_RANGE,2);
    }

    if (PMA_CH0_SUB_RANGE >= 0 && PMA_CH0_SUB_RANGE <= 3)
    {
         SC_PMA_CH0_SUB_RANGE_175_174 := to_unsigned(PMA_CH0_SUB_RANGE,2);
    }

    if (PMA_CH0_OVLP >= 0 && PMA_CH0_OVLP <= 3)
    {
         SC_PMA_CH0_OVLP_173_172 := to_unsigned(PMA_CH0_OVLP,2);
    }

    if (PMA_CH0_BIST_WAIT == 1024)
    {
        SC_PMA_CH0_BIST_WAIT_171_170 := 2'b00;
    }
    else if (PMA_CH0_BIST_WAIT == 2048)
    {
        SC_PMA_CH0_BIST_WAIT_171_170 := 2'b01;
    }
    else if (PMA_CH0_BIST_WAIT == 4096)
    {
        SC_PMA_CH0_BIST_WAIT_171_170 := 2'b10;
    }
    else if (PMA_CH0_BIST_WAIT == 512)
    {
        SC_PMA_CH0_BIST_WAIT_171_170 := 2'b11;
    }

    if (PMA_CH0_BIST_TIMER == 512)
    {
        SC_PMA_CH0_BIST_TIMER_169_168 := 2'b00;
    }
    else if (PMA_CH0_BIST_TIMER == 1024)
    {
        SC_PMA_CH0_BIST_TIMER_169_168 := 2'b01;
    }
    else if (PMA_CH0_BIST_TIMER == 2048)
    {
        SC_PMA_CH0_BIST_TIMER_169_168 := 2'b10;
    }
    else if (PMA_CH0_BIST_TIMER == 4096)
    {
        SC_PMA_CH0_BIST_TIMER_169_168 := 2'b11;
    }

    if (PMA_CH0_BAND_LB >= 0 && PMA_CH0_BAND_LB <= 7)
    {
         SC_PMA_CH0_BAND_LB_167_165 := to_unsigned(PMA_CH0_BAND_LB,3);
    }

    if (PMA_CH0_BAND_HB >= 0 && PMA_CH0_BAND_HB <= 31)
    {
         SC_PMA_CH0_BAND_HB_164_160 := to_unsigned(PMA_CH0_BAND_HB,5) ^ 5'b10000;
    }

    if (PMA_CH0_FREQ_LOCK_ACCURACY >= 0 && PMA_CH0_FREQ_LOCK_ACCURACY <= 7)
    {
         SC_PMA_CH0_FREQ_LOCK_ACCURACY_159_157 := to_unsigned(PMA_CH0_FREQ_LOCK_ACCURACY,3);
    }

    if (PMA_CH0_REG_SET_LC_BAND >= 0 && PMA_CH0_REG_SET_LC_BAND <= 31)
    {
         SC_PMA_CH0_REG_SET_LC_BAND_156_152 := to_unsigned(PMA_CH0_REG_SET_LC_BAND,5);
    }

    if (PMA_CH0_REG_SET_VCODIV >= 0 && PMA_CH0_REG_SET_VCODIV <= 3)
    {
         SC_PMA_CH0_REG_SET_VCODIV_151_150 := to_unsigned(PMA_CH0_REG_SET_VCODIV,2);
    }

    if (PMA_CH0_REGISTER_SET_VCODIV_BAND_ENABLE == "DISABLE")
    {
        SC_PMA_CH0_REGISTER_SET_VCODIV_BAND_ENABLE_149 := 1'b0;
    }
    else if (PMA_CH0_REGISTER_SET_VCODIV_BAND_ENABLE == "ENABLE")
    {
        SC_PMA_CH0_REGISTER_SET_VCODIV_BAND_ENABLE_149 := 1'b1;
    }

    if (PMA_CH0_REG_SET_PLL_LOCK == "FALSE")
    {
        SC_PMA_CH0_REG_SET_PLL_LOCK_148 := 1'b0;
    }
    else if (PMA_CH0_REG_SET_PLL_LOCK == "TRUE")
    {
        SC_PMA_CH0_REG_SET_PLL_LOCK_148 := 1'b1;
    }

    if (PMA_CH0_REGISTER_SET_PLL_LOCK_ENABLE == "DISABLE")
    {
        SC_PMA_CH0_REGISTER_SET_PLL_LOCK_ENABLE_147 := 1'b0;
    }
    else if (PMA_CH0_REGISTER_SET_PLL_LOCK_ENABLE == "ENABLE")
    {
        SC_PMA_CH0_REGISTER_SET_PLL_LOCK_ENABLE_147 := 1'b1;
    }

    if (PMA_CH0_REG_SET_VCO_HI == "FALSE")
    {
        SC_PMA_CH0_REG_SET_VCO_HI_146 := 1'b0;
    }
    else if (PMA_CH0_REG_SET_VCO_HI == "TRUE")
    {
        SC_PMA_CH0_REG_SET_VCO_HI_146 := 1'b1;
    }

    if (PMA_CH0_REG_SET_VCO_LO == "FALSE")
    {
        SC_PMA_CH0_REG_SET_VCO_LO_145 := 1'b0;
    }
    else if (PMA_CH0_REG_SET_VCO_LO == "TRUE")
    {
        SC_PMA_CH0_REG_SET_VCO_LO_145 := 1'b1;
    }

    if (PMA_CH0_REGISTER_SET_VCO_HI_VCO_LO_ENABLE == "DISABLE")
    {
        SC_PMA_CH0_REGISTER_SET_VCO_HI_VCO_LO_ENABLE_144 := 1'b0;
    }
    else if (PMA_CH0_REGISTER_SET_VCO_HI_VCO_LO_ENABLE == "ENABLE")
    {
        SC_PMA_CH0_REGISTER_SET_VCO_HI_VCO_LO_ENABLE_144 := 1'b1;
    }

    if (PMA_CH0_FORCE_LC_PLL_LOOP_EN_H == "DISABLE")
    {
        SC_PMA_CH0_FORCE_LC_PLL_LOOP_EN_H_143 := 1'b0;
    }
    else if (PMA_CH0_FORCE_LC_PLL_LOOP_EN_H == "ENABLE")
    {
        SC_PMA_CH0_FORCE_LC_PLL_LOOP_EN_H_143 := 1'b1;
    }

    if (PMA_CH0_FORCE_LC_PLL_LOOP_EN_L == "DISABLE")
    {
        SC_PMA_CH0_FORCE_LC_PLL_LOOP_EN_L_142 := 1'b0;
    }
    else if (PMA_CH0_FORCE_LC_PLL_LOOP_EN_L == "ENABLE")
    {
        SC_PMA_CH0_FORCE_LC_PLL_LOOP_EN_L_142 := 1'b1;
    }

    if (PMA_CH0_VCO_DIV_CALI_BYPASS == "FALSE")
    {
        SC_PMA_CH0_VCO_DIV_CALI_BYPASS_141 := 1'b0;
    }
    else if (PMA_CH0_VCO_DIV_CALI_BYPASS == "TRUE")
    {
        SC_PMA_CH0_VCO_DIV_CALI_BYPASS_141 := 1'b1;
    }

    if (PMA_CH0_BIST_EN == "DISABLE")
    {
        SC_PMA_CH0_BIST_EN_140 := 1'b0;
    }
    else if (PMA_CH0_BIST_EN == "ENABLE")
    {
        SC_PMA_CH0_BIST_EN_140 := 1'b1;
    }

    if (PMA_CH0_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE == "DISABLE")
    {
        SC_PMA_CH0_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE_139 := 1'b0;
    }
    else if (PMA_CH0_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE == "ENABLE")
    {
        SC_PMA_CH0_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE_139 := 1'b1;
    }

    if (PMA_CH0_FREQ_DETECT_ENABLE_SOURCE == "DISABLE")
    {
        SC_PMA_CH0_FREQ_DETECT_ENABLE_SOURCE_138 := 1'b0;
    }
    else if (PMA_CH0_FREQ_DETECT_ENABLE_SOURCE == "ENABLE")
    {
        SC_PMA_CH0_FREQ_DETECT_ENABLE_SOURCE_138 := 1'b1;
    }

    if (PMA_CH0_REG_SET_DIVSEL_REF >= 0 && PMA_CH0_REG_SET_DIVSEL_REF <= 3)
    {
         SC_PMA_CH0_REG_SET_DIVSEL_REF_137_136 := to_unsigned(PMA_CH0_REG_SET_DIVSEL_REF,2);
    }

    if (PMA_CH0_REG_SET_DIVSEL45_FB == "FALSE")
    {
        SC_PMA_CH0_REG_SET_DIVSEL45_FB_135 := 1'b0;
    }
    else if (PMA_CH0_REG_SET_DIVSEL45_FB == "TRUE")
    {
        SC_PMA_CH0_REG_SET_DIVSEL45_FB_135 := 1'b1;
    }

    if (PMA_CH0_REG_SET_DIVSEL_FB >= 0 && PMA_CH0_REG_SET_DIVSEL_FB <= 7)
    {
          SC_PMA_CH0_REG_SET_DIVSEL_FB_134_132 := to_unsigned(PMA_CH0_REG_SET_DIVSEL_FB,3);
    }

    if (PMA_CH0_PLL_LOOP_EN_SETTING == "DISABLE")
    {
        SC_PMA_CH0_PLL_LOOP_EN_SETTING_131 := 1'b0;
    }
    else if (PMA_CH0_PLL_LOOP_EN_SETTING == "ENABLE")
    {
        SC_PMA_CH0_PLL_LOOP_EN_SETTING_131 := 1'b1;
    }

    if (PMA_CH0_REGISTER_SET_TXPLL_DIV_ENABLE == "DISABLE")
    {
        SC_PMA_CH0_REGISTER_SET_TXPLL_DIV_ENABLE_130 := 1'b0;
    }
    else if (PMA_CH0_REGISTER_SET_TXPLL_DIV_ENABLE == "ENABLE")
    {
        SC_PMA_CH0_REGISTER_SET_TXPLL_DIV_ENABLE_130 := 1'b1;
    }

    if (PMA_CH0_FORCE_RXPLL_RESET == "FALSE")
    {
        SC_PMA_CH0_FORCE_RXPLL_RESET_129 := 1'b0;
    }
    else if (PMA_CH0_FORCE_RXPLL_RESET == "TRUE")
    {
        SC_PMA_CH0_FORCE_RXPLL_RESET_129 := 1'b1;
    }

    if (PMA_CH0_FORCE_RXPLL_ON == "FALSE")
    {
        SC_PMA_CH0_FORCE_RXPLL_ON_128 := 1'b0;
    }
    else if (PMA_CH0_FORCE_RXPLL_ON == "TRUE")
    {
        SC_PMA_CH0_FORCE_RXPLL_ON_128 := 1'b1;
    }

    if (PMA_CH0_DPCK_DIV2 == "FALSE")
    {
        SC_PMA_CH0_DPCK_DIV2_126 := 1'b0;
    }
    else if (PMA_CH0_DPCK_DIV2 == "TRUE")
    {
        SC_PMA_CH0_DPCK_DIV2_126 := 1'b1;
    }

    if (PMA_CH0_LFO_SETTING >= 0 && PMA_CH0_LFO_SETTING <= 7)
    {
         SC_PMA_CH0_LFO_SETTING_122_120 := to_unsigned(PMA_CH0_LFO_SETTING,3);
    }

    if (PMA_CH0_ALOS_COUNTER_CLOCK_SELECTION == "LOCAL")
    {
        SC_PMA_CH0_ALOS_COUNTER_CLOCK_SELECTION_119 := 1'b0;
    }
    else if (PMA_CH0_ALOS_COUNTER_CLOCK_SELECTION == "GLOBAL25M")
    {
        SC_PMA_CH0_ALOS_COUNTER_CLOCK_SELECTION_119 := 1'b1;
    }

    if (PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT == "100PCT")
    {
        SC_PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b000;
    }
    else if (PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT == "111PCT")
    {
        SC_PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b001;
    }
    else if (PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT == "125PCT")
    {
        SC_PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b010;
    }
    else if (PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT == "143PCT")
    {
        SC_PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b011;
    }
    else if (PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT == "71PCT")
    {
        SC_PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b100;
    }
    else if (PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT == "77PCT")
    {
        SC_PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b101;
    }
    else if (PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT == "83PCT")
    {
        SC_PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b110;
    }
    else if (PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT == "91PCT")
    {
        SC_PMA_CH0_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b111;
    }

    if (PMA_CH0_OOB_ENTER_DELAY_SETTING >= 0 && PMA_CH0_OOB_ENTER_DELAY_SETTING <= 3)
    {
         SC_PMA_CH0_OOB_ENTER_DELAY_SETTING_111_110 := to_unsigned(PMA_CH0_OOB_ENTER_DELAY_SETTING,2);
    }

    if (PMA_CH0_ALOS_LOW_TO_HIGH_COUNTER_SETTING >= 0 && PMA_CH0_ALOS_LOW_TO_HIGH_COUNTER_SETTING <= 3)
    {
         SC_PMA_CH0_ALOS_LOW_TO_HIGH_COUNTER_SETTING_109_108 := to_unsigned(PMA_CH0_ALOS_LOW_TO_HIGH_COUNTER_SETTING,2) ^ 2'b01;
    }

    if (PMA_CH0_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL == "DISABLE")
    {
        SC_PMA_CH0_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL_106 := 1'b0;
    }
    else if (PMA_CH0_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL == "ENABLE")
    {
        SC_PMA_CH0_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL_106 := 1'b1;
    }

    if (PMA_CH0_ALOS_EXIT_COUNTER_CLOCK_DIVIDER >= 0 && PMA_CH0_ALOS_EXIT_COUNTER_CLOCK_DIVIDER <= 3)
    {
         SC_PMA_CH0_ALOS_EXIT_COUNTER_CLOCK_DIVIDER_105_104 := to_unsigned(PMA_CH0_ALOS_EXIT_COUNTER_CLOCK_DIVIDER,2) ^ 2'b01;
    }

    if (PMA_CH0_OOB_OSCILATER_FREQUENCY_SETTING >= 0 && PMA_CH0_OOB_OSCILATER_FREQUENCY_SETTING <= 3)
    {
         SC_PMA_CH0_OOB_OSCILATER_FREQUENCY_SETTING_103_102 := to_unsigned(PMA_CH0_OOB_OSCILATER_FREQUENCY_SETTING,2);
    }

    if (PMA_CH0_FORCE_OOB == "FALSE")
    {
        SC_PMA_CH0_FORCE_OOB_101 := 1'b0;
    }
    else if (PMA_CH0_FORCE_OOB == "TRUE")
    {
        SC_PMA_CH0_FORCE_OOB_101 := 1'b1;
    }

    if (PMA_CH0_OOB_VTH_SET == "27MV")
    {
        SC_PMA_CH0_OOB_VTH_SET_100_96 := 5'b00111;
    }
    else if (PMA_CH0_OOB_VTH_SET == "30MV")
    {
        SC_PMA_CH0_OOB_VTH_SET_100_96 := 5'b00110;
    }
    else if (PMA_CH0_OOB_VTH_SET == "35MV")
    {
        SC_PMA_CH0_OOB_VTH_SET_100_96 := 5'b00100;
    }
    else if (PMA_CH0_OOB_VTH_SET == "42_5MV")
    {
        SC_PMA_CH0_OOB_VTH_SET_100_96 := 5'b00000;
    }
    else if (PMA_CH0_OOB_VTH_SET == "52MV")
    {
        SC_PMA_CH0_OOB_VTH_SET_100_96 := 5'b01000;
    }
    else if (PMA_CH0_OOB_VTH_SET == "68MV")
    {
        SC_PMA_CH0_OOB_VTH_SET_100_96 := 5'b11000;
    }

    if (PMA_CH0_FORCE_DET_FORCE_ALOS_LOW == "FALSE")
    {
        SC_PMA_CH0_FORCE_DET_FORCE_ALOS_LOW_95 := 1'b0;
    }
    else if (PMA_CH0_FORCE_DET_FORCE_ALOS_LOW == "TRUE")
    {
        SC_PMA_CH0_FORCE_DET_FORCE_ALOS_LOW_95 := 1'b1;
    }

    if (PMA_CH0_ALOS_THRESHOLD_VOLTAGE == "27MV")
    {
        SC_PMA_CH0_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b00111;
    }
    else if (PMA_CH0_ALOS_THRESHOLD_VOLTAGE == "30MV")
    {
        SC_PMA_CH0_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b00110;
    }
    else if (PMA_CH0_ALOS_THRESHOLD_VOLTAGE == "35MV")
    {
        SC_PMA_CH0_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b00100;
    }
    else if (PMA_CH0_ALOS_THRESHOLD_VOLTAGE == "42_5MV")
    {
        SC_PMA_CH0_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b00000;
    }
    else if (PMA_CH0_ALOS_THRESHOLD_VOLTAGE == "52MV")
    {
        SC_PMA_CH0_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b01000;
    }
    else if (PMA_CH0_ALOS_THRESHOLD_VOLTAGE == "68MV")
    {
        SC_PMA_CH0_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b11000;
    }

    if (PMA_CH0_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE >= 0 && PMA_CH0_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE <= 3)
    {
         SC_PMA_CH0_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE_89_88 := to_unsigned(PMA_CH0_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE,2);
    }

    if (PMA_CH0_REGR_NEGATIVE_HYSTERESIS_SETTING == "100MV")
    {
        SC_PMA_CH0_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84 := 4'b0000;
    }
    else if (PMA_CH0_REGR_NEGATIVE_HYSTERESIS_SETTING == "75MV")
    {
        SC_PMA_CH0_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84 := 4'b0001;
    }
    else if (PMA_CH0_REGR_NEGATIVE_HYSTERESIS_SETTING == "50MV")
    {
        SC_PMA_CH0_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84 := 4'b0011;
    }
    else if (PMA_CH0_REGR_NEGATIVE_HYSTERESIS_SETTING == "25MV")
    {
        SC_PMA_CH0_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84 := 4'b0111;
    }
    else if (PMA_CH0_REGR_NEGATIVE_HYSTERESIS_SETTING == "0MV")
    {
        SC_PMA_CH0_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84 := 4'b1111;
    }

    if (PMA_CH0_REGL_POSITIVE_HYSTERESIS_SETTING == "100MV")
    {
        SC_PMA_CH0_REGL_POSITIVE_HYSTERESIS_SETTING_83_80 := 4'b0000;
    }
    else if (PMA_CH0_REGL_POSITIVE_HYSTERESIS_SETTING == "75MV")
    {
        SC_PMA_CH0_REGL_POSITIVE_HYSTERESIS_SETTING_83_80 := 4'b0001;
    }
    else if (PMA_CH0_REGL_POSITIVE_HYSTERESIS_SETTING == "50MV")
    {
        SC_PMA_CH0_REGL_POSITIVE_HYSTERESIS_SETTING_83_80 := 4'b0011;
    }
    else if (PMA_CH0_REGL_POSITIVE_HYSTERESIS_SETTING == "25MV")
    {
        SC_PMA_CH0_REGL_POSITIVE_HYSTERESIS_SETTING_83_80 := 4'b0111;
    }
    else if (PMA_CH0_REGL_POSITIVE_HYSTERESIS_SETTING == "0MV")
    {
        SC_PMA_CH0_REGL_POSITIVE_HYSTERESIS_SETTING_83_80 := 4'b1111;
    }

    if (PMA_CH0_REG_EN == "DISABLE")
    {
        SC_PMA_CH0_REG_EN_77 := 1'b0;
    }
    else if (PMA_CH0_REG_EN == "ENABLE")
    {
        SC_PMA_CH0_REG_EN_77 := 1'b1;
    }

    if (PMA_CH0_REGREF_SEL == "VREF")
    {
        SC_PMA_CH0_REGREF_SEL_76 := 1'b0;
    }
    else if (PMA_CH0_REGREF_SEL == "SELF_DC")
    {
        SC_PMA_CH0_REGREF_SEL_76 := 1'b1;
    }

    if (PMA_CH0_DC496 == "5MHZ")
    {
        SC_PMA_CH0_DC496_75_72 := 4'b0111;
    }
    else if (PMA_CH0_DC496 == "8MHZ")
    {
        SC_PMA_CH0_DC496_75_72 := 4'b0110;
    }
    else if (PMA_CH0_DC496 == "11_5MHZ")
    {
        SC_PMA_CH0_DC496_75_72 := 4'b0100;
    }
    else if (PMA_CH0_DC496 == "20_6MHZ")
    {
        SC_PMA_CH0_DC496_75_72 := 4'b0000;
    }
    else if (PMA_CH0_DC496 == "39_6MHZ")
    {
        SC_PMA_CH0_DC496_75_72 := 4'b1000;
    }

    if (PMA_CH0_EQ2_AC_VAR_SETTING == 255)
    {
        SC_PMA_CH0_EQ2_AC_VAR_SETTING_63_56 := 8'b00111100;
    }
    else if (PMA_CH0_EQ2_AC_VAR_SETTING == 254)
    {
        SC_PMA_CH0_EQ2_AC_VAR_SETTING_63_56 := 8'b00111101;
    }
    else if (PMA_CH0_EQ2_AC_VAR_SETTING == 252)
    {
        SC_PMA_CH0_EQ2_AC_VAR_SETTING_63_56 := 8'b00111111;
    }
    else if (PMA_CH0_EQ2_AC_VAR_SETTING == 248)
    {
        SC_PMA_CH0_EQ2_AC_VAR_SETTING_63_56 := 8'b00111011;
    }
    else if (PMA_CH0_EQ2_AC_VAR_SETTING == 243)
    {
        SC_PMA_CH0_EQ2_AC_VAR_SETTING_63_56 := 8'b00110000;
    }
    else if (PMA_CH0_EQ2_AC_VAR_SETTING == 240)
    {
        SC_PMA_CH0_EQ2_AC_VAR_SETTING_63_56 := 8'b00110011;
    }
    else if (PMA_CH0_EQ2_AC_VAR_SETTING == 227)
    {
        SC_PMA_CH0_EQ2_AC_VAR_SETTING_63_56 := 8'b00100000;
    }
    else if (PMA_CH0_EQ2_AC_VAR_SETTING == 224)
    {
        SC_PMA_CH0_EQ2_AC_VAR_SETTING_63_56 := 8'b00100011;
    }
    else if (PMA_CH0_EQ2_AC_VAR_SETTING == 195)
    {
        SC_PMA_CH0_EQ2_AC_VAR_SETTING_63_56 := 8'b00000000;
    }
    else if (PMA_CH0_EQ2_AC_VAR_SETTING == 192)
    {
        SC_PMA_CH0_EQ2_AC_VAR_SETTING_63_56 := 8'b00000011;
    }
    else if (PMA_CH0_EQ2_AC_VAR_SETTING == 131)
    {
        SC_PMA_CH0_EQ2_AC_VAR_SETTING_63_56 := 8'b01000000;
    }
    else if (PMA_CH0_EQ2_AC_VAR_SETTING == 128)
    {
        SC_PMA_CH0_EQ2_AC_VAR_SETTING_63_56 := 8'b01000011;
    }
    else if (PMA_CH0_EQ2_AC_VAR_SETTING == 3)
    {
        SC_PMA_CH0_EQ2_AC_VAR_SETTING_63_56 := 8'b11000000;
    }
    else if (PMA_CH0_EQ2_AC_VAR_SETTING == 0)
    {
        SC_PMA_CH0_EQ2_AC_VAR_SETTING_63_56 := 8'b11000011;
    }

    if (PMA_CH0_EQ2_AC_RES_SETTING >= 0 && PMA_CH0_EQ2_AC_RES_SETTING <= 31)
    {
         SC_PMA_CH0_EQ2_AC_RES_SETTING_52_48 := to_unsigned(PMA_CH0_EQ2_AC_RES_SETTING,5) ^ 5'b10101;
    }

    if (PMA_CH0_EQ2_DC_RESTOP_SETTING >= 0 && PMA_CH0_EQ2_DC_RESTOP_SETTING <= 3)
    {
         SC_PMA_CH0_EQ2_DC_RESTOP_SETTING_47_46 := to_unsigned(PMA_CH0_EQ2_DC_RESTOP_SETTING,2) ^ 2'b11;
    }

    if (PMA_CH0_EQ1_DC_RESTOP_SETTING == 50)
    {
        SC_PMA_CH0_EQ1_DC_RESTOP_SETTING_43_40 := 4'b1000;
    }
    else if (PMA_CH0_EQ1_DC_RESTOP_SETTING == 52)
    {
        SC_PMA_CH0_EQ1_DC_RESTOP_SETTING_43_40 := 4'b1100;
    }
    else if (PMA_CH0_EQ1_DC_RESTOP_SETTING == 74)
    {
        SC_PMA_CH0_EQ1_DC_RESTOP_SETTING_43_40 := 4'b1111;
    }
    else if (PMA_CH0_EQ1_DC_RESTOP_SETTING == 60)
    {
        SC_PMA_CH0_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0000;
    }
    else if (PMA_CH0_EQ1_DC_RESTOP_SETTING == 61)
    {
        SC_PMA_CH0_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0010;
    }
    else if (PMA_CH0_EQ1_DC_RESTOP_SETTING == 81)
    {
        SC_PMA_CH0_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0011;
    }
    else if (PMA_CH0_EQ1_DC_RESTOP_SETTING == 71)
    {
        SC_PMA_CH0_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0100;
    }
    else if (PMA_CH0_EQ1_DC_RESTOP_SETTING == 92)
    {
        SC_PMA_CH0_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0101;
    }
    else if (PMA_CH0_EQ1_DC_RESTOP_SETTING == 78)
    {
        SC_PMA_CH0_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0110;
    }
    else if (PMA_CH0_EQ1_DC_RESTOP_SETTING == 107)
    {
        SC_PMA_CH0_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0111;
    }

    if (PMA_CH0_EQ1_AC_VAR_SETTING == 255)
    {
        SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32 := 8'b00011011;
    }
    else if (PMA_CH0_EQ1_AC_VAR_SETTING == 254)
    {
        SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32 := 8'b00011010;
    }
    else if (PMA_CH0_EQ1_AC_VAR_SETTING == 252)
    {
        SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32 := 8'b00011000;
    }
    else if (PMA_CH0_EQ1_AC_VAR_SETTING == 248)
    {
        SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32 := 8'b00011100;
    }
    else if (PMA_CH0_EQ1_AC_VAR_SETTING == 243)
    {
        SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32 := 8'b00010111;
    }
    else if (PMA_CH0_EQ1_AC_VAR_SETTING == 240)
    {
        SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32 := 8'b00010100;
    }
    else if (PMA_CH0_EQ1_AC_VAR_SETTING == 228)
    {
        SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32 := 8'b00000000;
    }
    else if (PMA_CH0_EQ1_AC_VAR_SETTING == 227)
    {
        SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32 := 8'b00000111;
    }
    else if (PMA_CH0_EQ1_AC_VAR_SETTING == 224)
    {
        SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32 := 8'b00000100;
    }
    else if (PMA_CH0_EQ1_AC_VAR_SETTING == 195)
    {
        SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32 := 8'b00100111;
    }
    else if (PMA_CH0_EQ1_AC_VAR_SETTING == 192)
    {
        SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32 := 8'b00100100;
    }
    else if (PMA_CH0_EQ1_AC_VAR_SETTING == 131)
    {
        SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32 := 8'b11100111;
    }
    else if (PMA_CH0_EQ1_AC_VAR_SETTING == 128)
    {
        SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32 := 8'b01100100;
    }
    else if (PMA_CH0_EQ1_AC_VAR_SETTING == 3)
    {
        SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32 := 8'b11100111;
    }
    else if (PMA_CH0_EQ1_AC_VAR_SETTING == 0)
    {
        SC_PMA_CH0_EQ1_AC_VAR_SETTING_39_32 := 8'b11100100;
    }

    if (PMA_CH0_EQ2_CURRENT_SETTING == 7)
    {
        SC_PMA_CH0_EQ2_CURRENT_SETTING_31_29 := 3'b110;
    }
    else if (PMA_CH0_EQ2_CURRENT_SETTING == 6)
    {
        SC_PMA_CH0_EQ2_CURRENT_SETTING_31_29 := 3'b111;
    }
    else if (PMA_CH0_EQ2_CURRENT_SETTING == 3)
    {
        SC_PMA_CH0_EQ2_CURRENT_SETTING_31_29 := 3'b010;
    }
    else if (PMA_CH0_EQ2_CURRENT_SETTING == 1)
    {
        SC_PMA_CH0_EQ2_CURRENT_SETTING_31_29 := 3'b000;
    }
    else if (PMA_CH0_EQ2_CURRENT_SETTING == 0)
    {
        SC_PMA_CH0_EQ2_CURRENT_SETTING_31_29 := 3'b001;
    }

    if (PMA_CH0_EQ1_AC_RES_SETTING >= 0 && PMA_CH0_EQ1_AC_RES_SETTING <= 31)
    {
         SC_PMA_CH0_EQ1_AC_RES_SETTING_28_24 := to_unsigned(PMA_CH0_EQ1_AC_RES_SETTING,5) ^ 5'b10011;
    }

    if (PMA_CH0_EQ1_CURRENT_SETTING == 15)
    {
        SC_PMA_CH0_EQ1_CURRENT_SETTING_19_16 := 4'b0000;
    }
    else if (PMA_CH0_EQ1_CURRENT_SETTING == 14)
    {
        SC_PMA_CH0_EQ1_CURRENT_SETTING_19_16 := 4'b0001;
    }
    else if (PMA_CH0_EQ1_CURRENT_SETTING == 11)
    {
        SC_PMA_CH0_EQ1_CURRENT_SETTING_19_16 := 4'b0100;
    }
    else if (PMA_CH0_EQ1_CURRENT_SETTING == 7)
    {
        SC_PMA_CH0_EQ1_CURRENT_SETTING_19_16 := 4'b1000;
    }
    else if (PMA_CH0_EQ1_CURRENT_SETTING == 4)
    {
        SC_PMA_CH0_EQ1_CURRENT_SETTING_19_16 := 4'b1011;
    }
    else if (PMA_CH0_EQ1_CURRENT_SETTING == 3)
    {
        SC_PMA_CH0_EQ1_CURRENT_SETTING_19_16 := 4'b1100;
    }
    else if (PMA_CH0_EQ1_CURRENT_SETTING == 1)
    {
        SC_PMA_CH0_EQ1_CURRENT_SETTING_19_16 := 4'b1110;
    }
    else if (PMA_CH0_EQ1_CURRENT_SETTING == 0)
    {
        SC_PMA_CH0_EQ1_CURRENT_SETTING_19_16 := 4'b1111;
    }

    if (PMA_CH0_RPLUS == 0)
    {
        SC_PMA_CH0_RPLUS_15_12 := 4'b0000;
    }
    else if (PMA_CH0_RPLUS == 1)
    {
        SC_PMA_CH0_RPLUS_15_12 := 4'b0001;
    }
    else if (PMA_CH0_RPLUS == 3)
    {
        SC_PMA_CH0_RPLUS_15_12 := 4'b0011;
    }
    else if (PMA_CH0_RPLUS == 7)
    {
        SC_PMA_CH0_RPLUS_15_12 := 4'b0111;
    }
    else if (PMA_CH0_RPLUS == 15)
    {
        SC_PMA_CH0_RPLUS_15_12 := 4'b1111;
    }

    if (PMA_CH0_RMINUS == 0)
    {
        SC_PMA_CH0_RMINUS_11_8 := 4'b0000;
    }
    else if (PMA_CH0_RMINUS == 1)
    {
        SC_PMA_CH0_RMINUS_11_8 := 4'b0001;
    }
    else if (PMA_CH0_RMINUS == 3)
    {
        SC_PMA_CH0_RMINUS_11_8 := 4'b0011;
    }
    else if (PMA_CH0_RMINUS == 7)
    {
        SC_PMA_CH0_RMINUS_11_8 := 4'b0111;
    }
    else if (PMA_CH0_RMINUS == 15)
    {
        SC_PMA_CH0_RMINUS_11_8 := 4'b1111;
    }

    if (PMA_CH0_RVALSET >= 0 && PMA_CH0_RVALSET <= 3)
    {
         SC_PMA_CH0_RVALSET_7_6 := to_unsigned(PMA_CH0_RVALSET,2) ^ 2'b01;
    }

    if (PMA_CH0_RTERM >= 0 && PMA_CH0_RTERM <= 3)
    {
         SC_PMA_CH0_RTERM_5_4 := to_unsigned(PMA_CH0_RTERM,2);
    }

    if (PMA_CH0_DCFB_EN == "DISABLE")
    {
        SC_PMA_CH0_DCFB_EN_2 := 1'b0;
    }
    else if (PMA_CH0_DCFB_EN == "ENABLE")
    {
        SC_PMA_CH0_DCFB_EN_2 := 1'b1;
    }

    if (PMA_CH0_DCCOUP == "FALSE")
    {
        SC_PMA_CH0_DCCOUP_1 := 1'b1;
    }
    else if (PMA_CH0_DCCOUP == "TRUE")
    {
        SC_PMA_CH0_DCCOUP_1 := 1'b0;
    }

    if (PMA_CH0_3G == "FALSE")
    {
        SC_PMA_CH0_3G_0 := 1'b0;
    }
    else if (PMA_CH0_3G == "TRUE")
    {
        SC_PMA_CH0_3G_0 := 1'b1;
    }

    if (PMA_CH1_TXDATA_WIDTH == "8_BIT")
    {
        SC_PMA_CH1_TXDATA_WIDTH_381_380 := 2'b00;
    }
    else if (PMA_CH1_TXDATA_WIDTH == "10_BIT")
    {
        SC_PMA_CH1_TXDATA_WIDTH_381_380 := 2'b01;
    }
    else if (PMA_CH1_TXDATA_WIDTH == "16_BIT")
    {
        SC_PMA_CH1_TXDATA_WIDTH_381_380 := 2'b10;
    }
    else if (PMA_CH1_TXDATA_WIDTH == "20_BIT")
    {
        SC_PMA_CH1_TXDATA_WIDTH_381_380 := 2'b11;
    }

    if (PMA_CH1_TX_TESTPATTERN >= 0 && PMA_CH1_TX_TESTPATTERN <= 3)
    {
         SC_PMA_CH1_TX_TESTPATTERN_375_374 := to_unsigned(PMA_CH1_TX_TESTPATTERN,2);
    }

    if (PMA_CH1_TESTPATTERN_O_ENABLE == "FALSE")
    {
        SC_PMA_CH1_TESTPATTERN_O_ENABLE_373 := 1'b0;
    }
    else if (PMA_CH1_TESTPATTERN_O_ENABLE == "TRUE")
    {
        SC_PMA_CH1_TESTPATTERN_O_ENABLE_373 := 1'b1;
    }

    if (PMA_CH1_DISABLE_BSMODE_DRVAMP == "FALSE")
    {
        SC_PMA_CH1_DISABLE_BSMODE_DRVAMP_372 := 1'b1;
    }
    else if (PMA_CH1_DISABLE_BSMODE_DRVAMP == "TRUE")
    {
        SC_PMA_CH1_DISABLE_BSMODE_DRVAMP_372 := 1'b0;
    }

    if (PMA_CH1_FORCE_BIST_ENABLE == "FALSE")
    {
        SC_PMA_CH1_FORCE_BIST_ENABLE_371 := 1'b0;
    }
    else if (PMA_CH1_FORCE_BIST_ENABLE == "TRUE")
    {
        SC_PMA_CH1_FORCE_BIST_ENABLE_371 := 1'b1;
    }

    if (PMA_CH1_FORCE_ELECTRICAL_IDLE == "FALSE")
    {
        SC_PMA_CH1_FORCE_ELECTRICAL_IDLE_370 := 1'b0;
    }
    else if (PMA_CH1_FORCE_ELECTRICAL_IDLE == "TRUE")
    {
        SC_PMA_CH1_FORCE_ELECTRICAL_IDLE_370 := 1'b1;
    }

    if (PMA_CH1_FORCE_RXDCT_ENABLE == "FALSE")
    {
        SC_PMA_CH1_FORCE_RXDCT_ENABLE_369 := 1'b0;
    }
    else if (PMA_CH1_FORCE_RXDCT_ENABLE == "TRUE")
    {
        SC_PMA_CH1_FORCE_RXDCT_ENABLE_369 := 1'b1;
    }

    if (PMA_CH1_FORCE_EXTLB_ENABLE == "FALSE")
    {
        SC_PMA_CH1_FORCE_EXTLB_ENABLE_368 := 1'b0;
    }
    else if (PMA_CH1_FORCE_EXTLB_ENABLE == "TRUE")
    {
        SC_PMA_CH1_FORCE_EXTLB_ENABLE_368 := 1'b1;
    }

    if (PMA_CH1_DISABLE_LANE_SYNC == "FALSE")
    {
        SC_PMA_CH1_DISABLE_LANE_SYNC_367 := 1'b0;
    }
    else if (PMA_CH1_DISABLE_LANE_SYNC == "TRUE")
    {
        SC_PMA_CH1_DISABLE_LANE_SYNC_367 := 1'b1;
    }

    if (PMA_CH1_DISABLE_ELECTRICAL_IDLE == "FALSE")
    {
        SC_PMA_CH1_DISABLE_ELECTRICAL_IDLE_366 := 1'b0;
    }
    else if (PMA_CH1_DISABLE_ELECTRICAL_IDLE == "TRUE")
    {
        SC_PMA_CH1_DISABLE_ELECTRICAL_IDLE_366 := 1'b1;
    }

    if (PMA_CH1_DISABLE_RXDCT_ENABLE == "FALSE")
    {
        SC_PMA_CH1_DISABLE_RXDCT_ENABLE_365 := 1'b0;
    }
    else if (PMA_CH1_DISABLE_RXDCT_ENABLE == "TRUE")
    {
        SC_PMA_CH1_DISABLE_RXDCT_ENABLE_365 := 1'b1;
    }

    if (PMA_CH1_DISABLE_EXTLB_ENABLE == "FALSE")
    {
        SC_PMA_CH1_DISABLE_EXTLB_ENABLE_364 := 1'b0;
    }
    else if (PMA_CH1_DISABLE_EXTLB_ENABLE == "TRUE")
    {
        SC_PMA_CH1_DISABLE_EXTLB_ENABLE_364 := 1'b1;
    }

    if (PMA_CH1_DISABLE_LOW_SPEED_PATH_ENABLE == "FALSE")
    {
        SC_PMA_CH1_DISABLE_LOW_SPEED_PATH_ENABLE_363 := 1'b0;
    }
    else if (PMA_CH1_DISABLE_LOW_SPEED_PATH_ENABLE == "TRUE")
    {
        SC_PMA_CH1_DISABLE_LOW_SPEED_PATH_ENABLE_363 := 1'b1;
    }

    if (PMA_CH1_FORCE_LANE_ENABLE == "FALSE")
    {
        SC_PMA_CH1_FORCE_LANE_ENABLE_362 := 1'b0;
    }
    else if (PMA_CH1_FORCE_LANE_ENABLE == "TRUE")
    {
        SC_PMA_CH1_FORCE_LANE_ENABLE_362 := 1'b1;
    }

    if (PMA_CH1_FORCE_LANE_RESETB_DISABLE == "FALSE")
    {
        SC_PMA_CH1_FORCE_LANE_RESETB_DISABLE_361 := 1'b0;
    }
    else if (PMA_CH1_FORCE_LANE_RESETB_DISABLE == "TRUE")
    {
        SC_PMA_CH1_FORCE_LANE_RESETB_DISABLE_361 := 1'b1;
    }

    if (PMA_CH1_RXDCT_LGBW_ENABLE == "FALSE")
    {
        SC_PMA_CH1_RXDCT_LGBW_ENABLE_359 := 1'b0;
    }
    else if (PMA_CH1_RXDCT_LGBW_ENABLE == "TRUE")
    {
        SC_PMA_CH1_RXDCT_LGBW_ENABLE_359 := 1'b1;
    }

    if (PMA_CH1_RXDCT_VTH == "MINUS_300MV")
    {
        SC_PMA_CH1_RXDCT_VTH_358_357 := 2'b00;
    }
    else if (PMA_CH1_RXDCT_VTH == "MINUS_375MV")
    {
        SC_PMA_CH1_RXDCT_VTH_358_357 := 2'b01;
    }
    else if (PMA_CH1_RXDCT_VTH == "MINUS_150MV")
    {
        SC_PMA_CH1_RXDCT_VTH_358_357 := 2'b10;
    }
    else if (PMA_CH1_RXDCT_VTH == "MINUS_225MV")
    {
        SC_PMA_CH1_RXDCT_VTH_358_357 := 2'b11;
    }

    if (PMA_CH1_DE_EMPHASIS_ADDITIONAL_CONTROL == "0DB")
    {
        SC_PMA_CH1_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355 := 2'b00;
    }
    else if (PMA_CH1_DE_EMPHASIS_ADDITIONAL_CONTROL == "0_7DB")
    {
        SC_PMA_CH1_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355 := 2'b01;
    }
    else if (PMA_CH1_DE_EMPHASIS_ADDITIONAL_CONTROL == "1_4DB")
    {
        SC_PMA_CH1_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355 := 2'b11;
    }

    if (PMA_CH1_DRV_RTERM_CONTROL == "100PCT")
    {
        SC_PMA_CH1_DRV_RTERM_CONTROL_354_352 := 3'b000;
    }
    else if (PMA_CH1_DRV_RTERM_CONTROL == "95PCT")
    {
        SC_PMA_CH1_DRV_RTERM_CONTROL_354_352 := 3'b001;
    }
    else if (PMA_CH1_DRV_RTERM_CONTROL == "91PCT")
    {
        SC_PMA_CH1_DRV_RTERM_CONTROL_354_352 := 3'b010;
    }
    else if (PMA_CH1_DRV_RTERM_CONTROL == "87PCT")
    {
        SC_PMA_CH1_DRV_RTERM_CONTROL_354_352 := 3'b011;
    }
    else if (PMA_CH1_DRV_RTERM_CONTROL == "105PCT")
    {
        SC_PMA_CH1_DRV_RTERM_CONTROL_354_352 := 3'b100;
    }
    else if (PMA_CH1_DRV_RTERM_CONTROL == "111PCT")
    {
        SC_PMA_CH1_DRV_RTERM_CONTROL_354_352 := 3'b101;
    }
    else if (PMA_CH1_DRV_RTERM_CONTROL == "117PCT")
    {
        SC_PMA_CH1_DRV_RTERM_CONTROL_354_352 := 3'b110;
    }
    else if (PMA_CH1_DRV_RTERM_CONTROL == "highZ")
    {
        SC_PMA_CH1_DRV_RTERM_CONTROL_354_352 := 3'b111;
    }

    if (PMA_CH1_FDRV_AMP_CONTROL == "100PCT")
    {
        SC_PMA_CH1_FDRV_AMP_CONTROL_351_350 := 2'b00;
    }
    else if (PMA_CH1_FDRV_AMP_CONTROL == "92PCT")
    {
        SC_PMA_CH1_FDRV_AMP_CONTROL_351_350 := 2'b01;
    }
    else if (PMA_CH1_FDRV_AMP_CONTROL == "109PCT")
    {
        SC_PMA_CH1_FDRV_AMP_CONTROL_351_350 := 2'b10;
    }
    else if (PMA_CH1_FDRV_AMP_CONTROL == "120PCT")
    {
        SC_PMA_CH1_FDRV_AMP_CONTROL_351_350 := 2'b11;
    }

    if (PMA_CH1_PREPC_AMP_CONTROL == "100PCT")
    {
        SC_PMA_CH1_PREPC_AMP_CONTROL_349_348 := 2'b00;
    }
    else if (PMA_CH1_PREPC_AMP_CONTROL == "83PCT")
    {
        SC_PMA_CH1_PREPC_AMP_CONTROL_349_348 := 2'b01;
    }
    else if (PMA_CH1_PREPC_AMP_CONTROL == "133PCT")
    {
        SC_PMA_CH1_PREPC_AMP_CONTROL_349_348 := 2'b10;
    }
    else if (PMA_CH1_PREPC_AMP_CONTROL == "117PCT")
    {
        SC_PMA_CH1_PREPC_AMP_CONTROL_349_348 := 2'b11;
    }

    if (PMA_CH1_PREMC_AMP_CONTROL == "100PCT")
    {
        SC_PMA_CH1_PREMC_AMP_CONTROL_347_346 := 2'b00;
    }
    else if (PMA_CH1_PREMC_AMP_CONTROL == "83PCT")
    {
        SC_PMA_CH1_PREMC_AMP_CONTROL_347_346 := 2'b01;
    }
    else if (PMA_CH1_PREMC_AMP_CONTROL == "133PCT")
    {
        SC_PMA_CH1_PREMC_AMP_CONTROL_347_346 := 2'b10;
    }
    else if (PMA_CH1_PREMC_AMP_CONTROL == "117PCT")
    {
        SC_PMA_CH1_PREMC_AMP_CONTROL_347_346 := 2'b11;
    }

    if (PMA_CH1_SER_AMP_CONTROL == "100PCT")
    {
        SC_PMA_CH1_SER_AMP_CONTROL_345_344 := 2'b00;
    }
    else if (PMA_CH1_SER_AMP_CONTROL == "83PCT")
    {
        SC_PMA_CH1_SER_AMP_CONTROL_345_344 := 2'b01;
    }
    else if (PMA_CH1_SER_AMP_CONTROL == "133PCT")
    {
        SC_PMA_CH1_SER_AMP_CONTROL_345_344 := 2'b10;
    }
    else if (PMA_CH1_SER_AMP_CONTROL == "117PCT")
    {
        SC_PMA_CH1_SER_AMP_CONTROL_345_344 := 2'b11;
    }

    if (PMA_CH1_PFD_LOOP_RESISTOR_SETTING >= 0 && PMA_CH1_PFD_LOOP_RESISTOR_SETTING <= 15)
    {
         SC_PMA_CH1_PFD_LOOP_RESISTOR_SETTING_327_324 := to_unsigned(PMA_CH1_PFD_LOOP_RESISTOR_SETTING,4);
    }

    if (PMA_CH1_PD_LOOP_RESISTOR_SETTING >= 0 && PMA_CH1_PD_LOOP_RESISTOR_SETTING <= 15)
    {
        SC_PMA_CH1_PD_LOOP_RESISTOR_SETTING_323_320 := to_unsigned(PMA_CH1_PD_LOOP_RESISTOR_SETTING,4);  
    }

    if (PMA_CH1_CDR_TEST_OUT_SELECT == "FBCK")
    {
        SC_PMA_CH1_CDR_TEST_OUT_SELECT_319 := 1'b0;
    }
    else if (PMA_CH1_CDR_TEST_OUT_SELECT == "PD")
    {
        SC_PMA_CH1_CDR_TEST_OUT_SELECT_319 := 1'b1;
    }

    if (PMA_CH1_PI_DIV1_BP == "DISABLE")
    {
        SC_PMA_CH1_PI_DIV1_BP_318 := 1'b0;
    }
    else if (PMA_CH1_PI_DIV1_BP == "ENABLE")
    {
        SC_PMA_CH1_PI_DIV1_BP_318 := 1'b1;
    }

    if (PMA_CH1_PI_TEST_FOR_CKI == "FALSE")
    {
        SC_PMA_CH1_PI_TEST_FOR_CKI_317 := 1'b0;
    }
    else if (PMA_CH1_PI_TEST_FOR_CKI == "TRUE")
    {
        SC_PMA_CH1_PI_TEST_FOR_CKI_317 := 1'b1;
    }

    if (PMA_CH1_PI_CURRENT_SETTING == "100PCT")
    {
        SC_PMA_CH1_PI_CURRENT_SETTING_316_314 := 3'b000;
    }
    else if (PMA_CH1_PI_CURRENT_SETTING == "80PCT")
    {
        SC_PMA_CH1_PI_CURRENT_SETTING_316_314 := 3'b001;
    }
    else if (PMA_CH1_PI_CURRENT_SETTING == "140PCT")
    {
        SC_PMA_CH1_PI_CURRENT_SETTING_316_314 := 3'b010;
    }
    else if (PMA_CH1_PI_CURRENT_SETTING == "120PCT")
    {
        SC_PMA_CH1_PI_CURRENT_SETTING_316_314 := 3'b011;
    }
    else if (PMA_CH1_PI_CURRENT_SETTING == "160PCT")
    {
        SC_PMA_CH1_PI_CURRENT_SETTING_316_314 := 3'b100;
    }
    else if (PMA_CH1_PI_CURRENT_SETTING == "120PCTr")
    {
        SC_PMA_CH1_PI_CURRENT_SETTING_316_314 := 3'b101;
    }
    else if (PMA_CH1_PI_CURRENT_SETTING == "200PCT")
    {
        SC_PMA_CH1_PI_CURRENT_SETTING_316_314 := 3'b110;
    }
    else if (PMA_CH1_PI_CURRENT_SETTING == "180PCT")
    {
        SC_PMA_CH1_PI_CURRENT_SETTING_316_314 := 3'b111;
    }

    if (PMA_CH1_PI_FREQUENCY_SETTING >= 0 && PMA_CH1_PI_FREQUENCY_SETTING <= 3)
    {
        SC_PMA_CH1_PI_FREQUENCY_SETTING_313_312 := to_unsigned(PMA_CH1_PI_FREQUENCY_SETTING,2);  
    }

    if (PMA_CH1_TEST_OUT_SELECT_FOR_RCK == "FALSE")
    {
        SC_PMA_CH1_TEST_OUT_SELECT_FOR_RCK_311 := 1'b0;
    }
    else if (PMA_CH1_TEST_OUT_SELECT_FOR_RCK == "TRUE")
    {
        SC_PMA_CH1_TEST_OUT_SELECT_FOR_RCK_311 := 1'b1;
    }

    if (PMA_CH1_TEST_OUT_SELECT_SOURCE == "SLPI1UI")
    {
        SC_PMA_CH1_TEST_OUT_SELECT_SOURCE_310 := 1'b0;
    }
    else if (PMA_CH1_TEST_OUT_SELECT_SOURCE == "PD1")
    {
        SC_PMA_CH1_TEST_OUT_SELECT_SOURCE_310 := 1'b1;
    }

    if (PMA_CH1_TEST_DATA_OUT_SELECT_SOURCE == "DO")
    {
        SC_PMA_CH1_TEST_DATA_OUT_SELECT_SOURCE_309 := 1'b0;
    }
    else if (PMA_CH1_TEST_DATA_OUT_SELECT_SOURCE == "DE")
    {
        SC_PMA_CH1_TEST_DATA_OUT_SELECT_SOURCE_309 := 1'b1;
    }

    if (PMA_CH1_TEST_CK_OUT_SELECT_SOURCE == "DATA")
    {
        SC_PMA_CH1_TEST_CK_OUT_SELECT_SOURCE_308 := 1'b0;
    }
    else if (PMA_CH1_TEST_CK_OUT_SELECT_SOURCE == "CLOCK")
    {
        SC_PMA_CH1_TEST_CK_OUT_SELECT_SOURCE_308 := 1'b1;
    }

    if (PMA_CH1_ENABLE_SLIP1UI_MODULE == "DISABLE")
    {
        SC_PMA_CH1_ENABLE_SLIP1UI_MODULE_307 := 1'b0;
    }
    else if (PMA_CH1_ENABLE_SLIP1UI_MODULE == "ENABLE")
    {
        SC_PMA_CH1_ENABLE_SLIP1UI_MODULE_307 := 1'b1;
    }

    if (PMA_CH1_PN_SWAP_ENABLE == "DISABLE")
    {
        SC_PMA_CH1_PN_SWAP_ENABLE_306 := 1'b0;
    }
    else if (PMA_CH1_PN_SWAP_ENABLE == "ENABLE")
    {
        SC_PMA_CH1_PN_SWAP_ENABLE_306 := 1'b1;
    }

    if (PMA_CH1_SIPO_BIT_SETTING == "10_BIT")
    {
        SC_PMA_CH1_SIPO_BIT_SETTING_305_304 := 2'b00;
    }
    else if (PMA_CH1_SIPO_BIT_SETTING == "8_BIT")
    {
        SC_PMA_CH1_SIPO_BIT_SETTING_305_304 := 2'b01;
    }
    else if (PMA_CH1_SIPO_BIT_SETTING == "20_BIT")
    {
        SC_PMA_CH1_SIPO_BIT_SETTING_305_304 := 2'b10;
    }
    else if (PMA_CH1_SIPO_BIT_SETTING == "16_BIT")
    {
        SC_PMA_CH1_SIPO_BIT_SETTING_305_304 := 2'b11;
    }

    if (PMA_CH1_OOB_EN == "DISABLE")
    {
        SC_PMA_CH1_OOB_EN_303 := 1'b0;
    }
    else if (PMA_CH1_OOB_EN == "ENABLE")
    {
        SC_PMA_CH1_OOB_EN_303 := 1'b1;
    }

    if (PMA_CH1_ALOS_EN == "DISABLE")
    {
        SC_PMA_CH1_ALOS_EN_302 := 1'b0;
    }
    else if (PMA_CH1_ALOS_EN == "ENABLE")
    {
        SC_PMA_CH1_ALOS_EN_302 := 1'b1;
    }

    if (PMA_CH1_LFMODE == "HIGH")
    {
        SC_PMA_CH1_LFMODE_301 := 1'b0;
    }
    else if (PMA_CH1_LFMODE == "LOW")
    {
        SC_PMA_CH1_LFMODE_301 := 1'b1;
    }

    if (PMA_CH1_TSO_HS_SEL == "CDR")
    {
        SC_PMA_CH1_TSO_HS_SEL_300 := 1'b0;
    }
    else if (PMA_CH1_TSO_HS_SEL == "EQ")
    {
        SC_PMA_CH1_TSO_HS_SEL_300 := 1'b1;
    }

    if (PMA_CH1_LX_SELLC == "RING")
    {
        SC_PMA_CH1_LX_SELLC_295 := 1'b0;
    }
    else if (PMA_CH1_LX_SELLC == "LC")
    {
        SC_PMA_CH1_LX_SELLC_295 := 1'b1;
    }

    if (PMA_CH1_LX_RXPLL_DIVSEL45_FB == 4)
    {
        SC_PMA_CH1_LX_RXPLL_DIVSEL45_FB_287 := 1'b0;
    }
    else if (PMA_CH1_LX_RXPLL_DIVSEL45_FB == 5)
    {
        SC_PMA_CH1_LX_RXPLL_DIVSEL45_FB_287 := 1'b1;
    }

    if (PMA_CH1_LX_RXPLL_DIVSEL_FB == 2)
    {
        SC_PMA_CH1_LX_RXPLL_DIVSEL_FB_286_284 := 3'b000;
    }
    else if (PMA_CH1_LX_RXPLL_DIVSEL_FB == 4)
    {
        SC_PMA_CH1_LX_RXPLL_DIVSEL_FB_286_284 := 3'b001;
    }
    else if (PMA_CH1_LX_RXPLL_DIVSEL_FB == 5)
    {
        SC_PMA_CH1_LX_RXPLL_DIVSEL_FB_286_284 := 3'b010;
    }
    else if (PMA_CH1_LX_RXPLL_DIVSEL_FB == 8)
    {
        SC_PMA_CH1_LX_RXPLL_DIVSEL_FB_286_284 := 3'b101;
    }
    else if (PMA_CH1_LX_RXPLL_DIVSEL_FB == 10)
    {
        SC_PMA_CH1_LX_RXPLL_DIVSEL_FB_286_284 := 3'b110;
    }

    if (PMA_CH1_LX_RXPLL_DIVSEL_REF == 1)
    {
        SC_PMA_CH1_LX_RXPLL_DIVSEL_REF_283_282 := 2'b00;
    }
    else if (PMA_CH1_LX_RXPLL_DIVSEL_REF == 2)
    {
        SC_PMA_CH1_LX_RXPLL_DIVSEL_REF_283_282 := 2'b01;
    }
    else if (PMA_CH1_LX_RXPLL_DIVSEL_REF == 4)
    {
        SC_PMA_CH1_LX_RXPLL_DIVSEL_REF_283_282 := 2'b10;
    }

    if (PMA_CH1_PICODE >= 0 && PMA_CH1_PICODE <= 255)
    {
         SC_PMA_CH1_PICODE_279_272 := to_unsigned(PMA_CH1_PICODE,8);
    }

    if (PMA_CH1_RX_REFCK_SEL >= 0 && PMA_CH1_RX_REFCK_SEL <= 3)
    {
         SC_PMA_CH1_RX_REFCK_SEL_265_264 := to_unsigned(PMA_CH1_RX_REFCK_SEL,2) ^ 2'b10;
    }

    if (PMA_CH1_PFDLPEN_REGISTER_CONTROL_ENABLE == "DISABLE")
    {
        SC_PMA_CH1_PFDLPEN_REGISTER_CONTROL_ENABLE_259 := 1'b0;
    }
    else if (PMA_CH1_PFDLPEN_REGISTER_CONTROL_ENABLE == "ENABLE")
    {
        SC_PMA_CH1_PFDLPEN_REGISTER_CONTROL_ENABLE_259 := 1'b1;
    }

    if (PMA_CH1_PFDLPEN_REGISTER_SETTING == "FALSE")
    {
        SC_PMA_CH1_PFDLPEN_REGISTER_SETTING_258 := 1'b0;
    }
    else if (PMA_CH1_PFDLPEN_REGISTER_SETTING == "TRUE")
    {
        SC_PMA_CH1_PFDLPEN_REGISTER_SETTING_258 := 1'b1;
    }

    if (PMA_CH1_PDLPEN_REGISTER_CONTROL_ENABLE == "DISABLE")
    {
        SC_PMA_CH1_PDLPEN_REGISTER_CONTROL_ENABLE_257 := 1'b0;
    }
    else if (PMA_CH1_PDLPEN_REGISTER_CONTROL_ENABLE == "ENABLE")
    {
        SC_PMA_CH1_PDLPEN_REGISTER_CONTROL_ENABLE_257 := 1'b1;
    }

    if (PMA_CH1_PDLPEN_REGISTER_SETTING == "FALSE")
    {
        SC_PMA_CH1_PDLPEN_REGISTER_SETTING_256 := 1'b0;
    }
    else if (PMA_CH1_PDLPEN_REGISTER_SETTING == "TRUE")
    {
        SC_PMA_CH1_PDLPEN_REGISTER_SETTING_256 := 1'b1;
    }

    if (PMA_CH1_DIV_CHANGE_ENABLE_DELAY_TIMER >= 0 && PMA_CH1_DIV_CHANGE_ENABLE_DELAY_TIMER <= 3)
    {
         SC_PMA_CH1_DIV_CHANGE_ENABLE_DELAY_TIMER_254_253 := to_unsigned(PMA_CH1_DIV_CHANGE_ENABLE_DELAY_TIMER,2);
    }

    if (PMA_CH1_DIV_CHANGE_ENABLE_SIGNAL_GATING == "FALSE")
    {
        SC_PMA_CH1_DIV_CHANGE_ENABLE_SIGNAL_GATING_252 := 1'b0;
    }
    else if (PMA_CH1_DIV_CHANGE_ENABLE_SIGNAL_GATING == "TRUE")
    {
        SC_PMA_CH1_DIV_CHANGE_ENABLE_SIGNAL_GATING_252 := 1'b1;
    }

    if (PMA_CH1_CDR_ALIGN_REGISTER_SETTING_VALUE == "FALSE")
    {
        SC_PMA_CH1_CDR_ALIGN_REGISTER_SETTING_VALUE_251 := 1'b0;
    }
    else if (PMA_CH1_CDR_ALIGN_REGISTER_SETTING_VALUE == "TRUE")
    {
        SC_PMA_CH1_CDR_ALIGN_REGISTER_SETTING_VALUE_251 := 1'b1;
    }

    if (PMA_CH1_FORCE_CDR_ALIGN_ENABLE == "DISABLE")
    {
        SC_PMA_CH1_FORCE_CDR_ALIGN_ENABLE_250 := 1'b0;
    }
    else if (PMA_CH1_FORCE_CDR_ALIGN_ENABLE == "ENABLE")
    {
        SC_PMA_CH1_FORCE_CDR_ALIGN_ENABLE_250 := 1'b1;
    }

    if (PMA_CH1_SELLC_REGISTER_SETTING_VALUE == "FALSE")
    {
        SC_PMA_CH1_SELLC_REGISTER_SETTING_VALUE_249 := 1'b0;
    }
    else if (PMA_CH1_SELLC_REGISTER_SETTING_VALUE == "TRUE")
    {
        SC_PMA_CH1_SELLC_REGISTER_SETTING_VALUE_249 := 1'b1;
    }

    if (PMA_CH1_SELLC_CONTROL_BY_REGISTER == "FALSE")
    {
        SC_PMA_CH1_SELLC_CONTROL_BY_REGISTER_248 := 1'b0;
    }
    else if (PMA_CH1_SELLC_CONTROL_BY_REGISTER == "TRUE")
    {
        SC_PMA_CH1_SELLC_CONTROL_BY_REGISTER_248 := 1'b1;
    }

    if (PMA_CH1_REG_PLLI_LDO_VREF_SETTING == "0_9V")
    {
        SC_PMA_CH1_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b100;
    }
    else if (PMA_CH1_REG_PLLI_LDO_VREF_SETTING == "0_95V")
    {
        SC_PMA_CH1_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b101;
    }
    else if (PMA_CH1_REG_PLLI_LDO_VREF_SETTING == "1_00V")
    {
        SC_PMA_CH1_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b110;
    }
    else if (PMA_CH1_REG_PLLI_LDO_VREF_SETTING == "1_05V")
    {
        SC_PMA_CH1_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b111;
    }
    else if (PMA_CH1_REG_PLLI_LDO_VREF_SETTING == "1_1V")
    {
        SC_PMA_CH1_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b000;
    }
    else if (PMA_CH1_REG_PLLI_LDO_VREF_SETTING == "1_15V")
    {
        SC_PMA_CH1_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b001;
    }
    else if (PMA_CH1_REG_PLLI_LDO_VREF_SETTING == "1_20V")
    {
        SC_PMA_CH1_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b010;
    }
    else if (PMA_CH1_REG_PLLI_LDO_VREF_SETTING == "1_25V")
    {
        SC_PMA_CH1_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b011;
    }

    if (PMA_CH1_REG_PLLI_LDO_BYPASS_CURRENT >= 0 && PMA_CH1_REG_PLLI_LDO_BYPASS_CURRENT <= 7)
    {
        SC_PMA_CH1_REG_PLLI_LDO_BYPASS_CURRENT_244_242 := to_unsigned(PMA_CH1_REG_PLLI_LDO_BYPASS_CURRENT,3) ^ 3'b100;
    }

    if (PMA_CH1_REG_PLL_HSTEST_ENABLE == "DISABLE")
    {
        SC_PMA_CH1_REG_PLL_HSTEST_ENABLE_239 := 1'b0;
    }
    else if (PMA_CH1_REG_PLL_HSTEST_ENABLE == "ENABLE")
    {
        SC_PMA_CH1_REG_PLL_HSTEST_ENABLE_239 := 1'b1;
    }

    if (PMA_CH1_REG_PLL_ISNK_CURRENT_CONTROL == "5U")
    {
        SC_PMA_CH1_REG_PLL_ISNK_CURRENT_CONTROL_238_237 := 2'b00;
    }
    else if (PMA_CH1_REG_PLL_ISNK_CURRENT_CONTROL == "15U")
    {
        SC_PMA_CH1_REG_PLL_ISNK_CURRENT_CONTROL_238_237 := 2'b01;
    }
    else if (PMA_CH1_REG_PLL_ISNK_CURRENT_CONTROL == "25U")
    {
        SC_PMA_CH1_REG_PLL_ISNK_CURRENT_CONTROL_238_237 := 2'b10;
    }
    else if (PMA_CH1_REG_PLL_ISNK_CURRENT_CONTROL == "35U")
    {
        SC_PMA_CH1_REG_PLL_ISNK_CURRENT_CONTROL_238_237 := 2'b11;
    }

    if (PMA_CH1_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING >= 0 && PMA_CH1_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING <= 31)
    {
         SC_PMA_CH1_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232 := to_unsigned(PMA_CH1_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING,5);
    }

    if (PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING == "100PCT")
    {
        SC_PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b000;
    }
    else if (PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING == "89PCT")
    {
        SC_PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b001;
    }
    else if (PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING == "122PCT")
    {
        SC_PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b010;
    }
    else if (PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING == "111PCT")
    {
        SC_PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b011;
    }
    else if (PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING == "144PCT")
    {
        SC_PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b100;
    }
    else if (PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING == "133PCT")
    {
        SC_PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b101;
    }
    else if (PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING == "167PCT")
    {
        SC_PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b110;
    }
    else if (PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING == "156PCT")
    {
        SC_PMA_CH1_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b111;
    }

    if (PMA_CH1_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING >= 0 && PMA_CH1_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING <= 31)
    {
         SC_PMA_CH1_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224 := to_unsigned(PMA_CH1_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING,5);
    }

    if (PMA_CH1_REG_PLL_CP0_BIAS_CONTROL == "100PCT")
    {
        SC_PMA_CH1_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b000;
    }
    else if (PMA_CH1_REG_PLL_CP0_BIAS_CONTROL == "111PCT")
    {
        SC_PMA_CH1_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b001;
    }
    else if (PMA_CH1_REG_PLL_CP0_BIAS_CONTROL == "125PCT")
    {
        SC_PMA_CH1_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b010;
    }
    else if (PMA_CH1_REG_PLL_CP0_BIAS_CONTROL == "143PCT")
    {
        SC_PMA_CH1_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b011;
    }
    else if (PMA_CH1_REG_PLL_CP0_BIAS_CONTROL == "71PCT")
    {
        SC_PMA_CH1_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b100;
    }
    else if (PMA_CH1_REG_PLL_CP0_BIAS_CONTROL == "77PCT")
    {
        SC_PMA_CH1_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b101;
    }
    else if (PMA_CH1_REG_PLL_CP0_BIAS_CONTROL == "83PCT")
    {
        SC_PMA_CH1_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b110;
    }
    else if (PMA_CH1_REG_PLL_CP0_BIAS_CONTROL == "91PCT")
    {
        SC_PMA_CH1_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b111;
    }

    if (PMA_CH1_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING >= 0 && PMA_CH1_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING <= 31)
    {
         SC_PMA_CH1_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216 := to_unsigned(PMA_CH1_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING,5);
    }

    if (PMA_CH1_REG_PLL_CP1_BIAS_CONTROL == "100PCT")
    {
        SC_PMA_CH1_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b000;
    }
    else if (PMA_CH1_REG_PLL_CP1_BIAS_CONTROL == "111PCT")
    {
        SC_PMA_CH1_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b001;
    }
    else if (PMA_CH1_REG_PLL_CP1_BIAS_CONTROL == "125PCT")
    {
        SC_PMA_CH1_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b010;
    }
    else if (PMA_CH1_REG_PLL_CP1_BIAS_CONTROL == "143PCT")
    {
        SC_PMA_CH1_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b011;
    }
    else if (PMA_CH1_REG_PLL_CP1_BIAS_CONTROL == "71PCT")
    {
        SC_PMA_CH1_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b100;
    }
    else if (PMA_CH1_REG_PLL_CP1_BIAS_CONTROL == "77PCT")
    {
        SC_PMA_CH1_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b101;
    }
    else if (PMA_CH1_REG_PLL_CP1_BIAS_CONTROL == "83PCT")
    {
        SC_PMA_CH1_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b110;
    }
    else if (PMA_CH1_REG_PLL_CP1_BIAS_CONTROL == "91PCT")
    {
        SC_PMA_CH1_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b111;
    }

    if (PMA_CH1_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING >= 0 && PMA_CH1_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING <= 31)
    {
         SC_PMA_CH1_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208 := to_unsigned(PMA_CH1_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING,5);
    }

    if (PMA_CH1_REG_PLL_CP0_CURRENT_SETTING == "100PCT")
    {
        SC_PMA_CH1_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b000;
    }
    else if (PMA_CH1_REG_PLL_CP0_CURRENT_SETTING == "20PCT")
    {
        SC_PMA_CH1_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b001;
    }
    else if (PMA_CH1_REG_PLL_CP0_CURRENT_SETTING == "140PCT")
    {
        SC_PMA_CH1_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b010;
    }
    else if (PMA_CH1_REG_PLL_CP0_CURRENT_SETTING == "60PCT")
    {
        SC_PMA_CH1_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b011;
    }
    else if (PMA_CH1_REG_PLL_CP0_CURRENT_SETTING == "160PCT")
    {
        SC_PMA_CH1_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b100;
    }
    else if (PMA_CH1_REG_PLL_CP0_CURRENT_SETTING == "80PCT")
    {
        SC_PMA_CH1_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b101;
    }
    else if (PMA_CH1_REG_PLL_CP0_CURRENT_SETTING == "200PCT")
    {
        SC_PMA_CH1_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b110;
    }
    else if (PMA_CH1_REG_PLL_CP0_CURRENT_SETTING == "120PCT")
    {
        SC_PMA_CH1_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b111;
    }

    if (PMA_CH1_REG_PLL_CP1_CURRENT_SETTING == "100PCT")
    {
        SC_PMA_CH1_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b000;
    }
    else if (PMA_CH1_REG_PLL_CP1_CURRENT_SETTING == "20PCT")
    {
        SC_PMA_CH1_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b001;
    }
    else if (PMA_CH1_REG_PLL_CP1_CURRENT_SETTING == "140PCT")
    {
        SC_PMA_CH1_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b010;
    }
    else if (PMA_CH1_REG_PLL_CP1_CURRENT_SETTING == "60PCT")
    {
        SC_PMA_CH1_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b011;
    }
    else if (PMA_CH1_REG_PLL_CP1_CURRENT_SETTING == "160PCT")
    {
        SC_PMA_CH1_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b100;
    }
    else if (PMA_CH1_REG_PLL_CP1_CURRENT_SETTING == "80PCT")
    {
        SC_PMA_CH1_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b101;
    }
    else if (PMA_CH1_REG_PLL_CP1_CURRENT_SETTING == "200PCT")
    {
        SC_PMA_CH1_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b110;
    }
    else if (PMA_CH1_REG_PLL_CP1_CURRENT_SETTING == "120PCT")
    {
        SC_PMA_CH1_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b111;
    }

    if (PMA_CH1_REG_PLL_GM1_CURRENT_SETTING == "100PCT")
    {
        SC_PMA_CH1_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b000;
    }
    else if (PMA_CH1_REG_PLL_GM1_CURRENT_SETTING == "67PCT")
    {
        SC_PMA_CH1_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b001;
    }
    else if (PMA_CH1_REG_PLL_GM1_CURRENT_SETTING == "167PCT")
    {
        SC_PMA_CH1_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b010;
    }
    else if (PMA_CH1_REG_PLL_GM1_CURRENT_SETTING == "133PCT")
    {
        SC_PMA_CH1_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b011;
    }
    else if (PMA_CH1_REG_PLL_GM1_CURRENT_SETTING == "300PCT")
    {
        SC_PMA_CH1_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b100;
    }
    else if (PMA_CH1_REG_PLL_GM1_CURRENT_SETTING == "267PCT")
    {
        SC_PMA_CH1_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b101;
    }
    else if (PMA_CH1_REG_PLL_GM1_CURRENT_SETTING == "367PCT")
    {
        SC_PMA_CH1_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b110;
    }
    else if (PMA_CH1_REG_PLL_GM1_CURRENT_SETTING == "333PCT")
    {
        SC_PMA_CH1_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b111;
    }

    if (PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING == "100PCT")
    {
        SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b000;
    }
    else if (PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING == "20PCT")
    {
        SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b001;
    }
    else if (PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING == "140PCT")
    {
        SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b010;
    }
    else if (PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING == "60PCT")
    {
        SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b011;
    }
    else if (PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING == "160PCT")
    {
        SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b100;
    }
    else if (PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING == "80PCT")
    {
        SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b101;
    }
    else if (PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING == "200PCT")
    {
        SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b110;
    }
    else if (PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING == "120PCT")
    {
        SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b111;
    }

    if (PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "100PCT")
    {
        SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b000;
    }
    else if (PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "20PCT")
    {
        SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b001;
    }
    else if (PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "140PCT")
    {
        SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b010;
    }
    else if (PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "60PCT")
    {
        SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b011;
    }
    else if (PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "160PCT")
    {
        SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b100;
    }
    else if (PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "80PCT")
    {
        SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b101;
    }
    else if (PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "200PCT")
    {
        SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b110;
    }
    else if (PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "120PCT")
    {
        SC_PMA_CH1_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b111;
    }

    if (PMA_CH1_REG_PLL_REG_CUR == "100PCT")
    {
        SC_PMA_CH1_REG_PLL_REG_CUR_192_190 := 3'b000;
    }
    else if (PMA_CH1_REG_PLL_REG_CUR == "80PCT")
    {
        SC_PMA_CH1_REG_PLL_REG_CUR_192_190 := 3'b001;
    }
    else if (PMA_CH1_REG_PLL_REG_CUR == "140PCT")
    {
        SC_PMA_CH1_REG_PLL_REG_CUR_192_190 := 3'b010;
    }
    else if (PMA_CH1_REG_PLL_REG_CUR == "120PCT")
    {
        SC_PMA_CH1_REG_PLL_REG_CUR_192_190 := 3'b011;
    }
    else if (PMA_CH1_REG_PLL_REG_CUR == "180PCT")
    {
        SC_PMA_CH1_REG_PLL_REG_CUR_192_190 := 3'b100;
    }
    else if (PMA_CH1_REG_PLL_REG_CUR == "160PCT")
    {
        SC_PMA_CH1_REG_PLL_REG_CUR_192_190 := 3'b101;
    }
    else if (PMA_CH1_REG_PLL_REG_CUR == "220PCT")
    {
        SC_PMA_CH1_REG_PLL_REG_CUR_192_190 := 3'b110;
    }
    else if (PMA_CH1_REG_PLL_REG_CUR == "200PCT")
    {
        SC_PMA_CH1_REG_PLL_REG_CUR_192_190 := 3'b111;
    }

    if (PMA_CH1_REG_PLL_LCCUR == "DEFAULT")
    {
        SC_PMA_CH1_REG_PLL_LCCUR_189_187 := 3'b000;
    }
    else if (PMA_CH1_REG_PLL_LCCUR == "MINUS_1MA")
    {
        SC_PMA_CH1_REG_PLL_LCCUR_189_187 := 3'b001;
    }
    else if (PMA_CH1_REG_PLL_LCCUR == "2MA")
    {
        SC_PMA_CH1_REG_PLL_LCCUR_189_187 := 3'b010;
    }
    else if (PMA_CH1_REG_PLL_LCCUR == "1MA")
    {
        SC_PMA_CH1_REG_PLL_LCCUR_189_187 := 3'b011;
    }
    else if (PMA_CH1_REG_PLL_LCCUR == "4MA")
    {
        SC_PMA_CH1_REG_PLL_LCCUR_189_187 := 3'b100;
    }
    else if (PMA_CH1_REG_PLL_LCCUR == "3MA")
    {
        SC_PMA_CH1_REG_PLL_LCCUR_189_187 := 3'b101;
    }
    else if (PMA_CH1_REG_PLL_LCCUR == "6MA")
    {
        SC_PMA_CH1_REG_PLL_LCCUR_189_187 := 3'b110;
    }
    else if (PMA_CH1_REG_PLL_LCCUR == "5MA")
    {
        SC_PMA_CH1_REG_PLL_LCCUR_189_187 := 3'b111;
    }

    if (PMA_CH1_REG_PLL_LCOBAS == "100PCT")
    {
        SC_PMA_CH1_REG_PLL_LCOBAS_186_185 := 2'b00;
    }
    else if (PMA_CH1_REG_PLL_LCOBAS == "75PCT")
    {
        SC_PMA_CH1_REG_PLL_LCOBAS_186_185 := 2'b01;
    }
    else if (PMA_CH1_REG_PLL_LCOBAS == "150PCT")
    {
        SC_PMA_CH1_REG_PLL_LCOBAS_186_185 := 2'b10;
    }
    else if (PMA_CH1_REG_PLL_LCOBAS == "125PCT")
    {
        SC_PMA_CH1_REG_PLL_LCOBAS_186_185 := 2'b11;
    }

    if (PMA_CH1_REG_PLL_FB_CK_TEST_OUT_ENABLE == "DISABLE")
    {
        SC_PMA_CH1_REG_PLL_FB_CK_TEST_OUT_ENABLE_184 := 1'b0;
    }
    else if (PMA_CH1_REG_PLL_FB_CK_TEST_OUT_ENABLE == "ENABLE")
    {
        SC_PMA_CH1_REG_PLL_FB_CK_TEST_OUT_ENABLE_184 := 1'b1;
    }

    if (PMA_CH1_CDR_ALIGN_TIMER >= 0 && PMA_CH1_CDR_ALIGN_TIMER <= 3)
    {
        SC_PMA_CH1_CDR_ALIGN_TIMER_183_182 := to_unsigned(PMA_CH1_CDR_ALIGN_TIMER,2);  
    }

    if (PMA_CH1_CALIB_WAIT == 1024)
    {
        SC_PMA_CH1_CALIB_WAIT_181_180 := 2'b00;
    }
    else if (PMA_CH1_CALIB_WAIT == 2048)
    {
        SC_PMA_CH1_CALIB_WAIT_181_180 := 2'b01;
    }
    else if (PMA_CH1_CALIB_WAIT == 4096)
    {
        SC_PMA_CH1_CALIB_WAIT_181_180 := 2'b10;
    }
    else if (PMA_CH1_CALIB_WAIT == 512)
    {
        SC_PMA_CH1_CALIB_WAIT_181_180 := 2'b11;
    }

    if (PMA_CH1_CALIB_TIMER == 512)
    {
        SC_PMA_CH1_CALIB_TIMER_179_178 := 2'b00;
    }
    else if (PMA_CH1_CALIB_TIMER == 1024)
    {
        SC_PMA_CH1_CALIB_TIMER_179_178 := 2'b01;
    }
    else if (PMA_CH1_CALIB_TIMER == 2048)
    {
        SC_PMA_CH1_CALIB_TIMER_179_178 := 2'b10;
    }
    else if (PMA_CH1_CALIB_TIMER == 4096)
    {
        SC_PMA_CH1_CALIB_TIMER_179_178 := 2'b11;
    }

    if (PMA_CH1_TOT_RANGE >= 0 && PMA_CH1_TOT_RANGE <= 3)
    {
        SC_PMA_CH1_TOT_RANGE_177_176 := to_unsigned(PMA_CH1_TOT_RANGE,2); 
    }

    if (PMA_CH1_SUB_RANGE >= 0 && PMA_CH1_SUB_RANGE <= 3)
    {
        SC_PMA_CH1_SUB_RANGE_175_174 := to_unsigned(PMA_CH1_SUB_RANGE,2);
    }

    if (PMA_CH1_OVLP >= 0 && PMA_CH1_OVLP <= 3)
    {
        SC_PMA_CH1_OVLP_173_172 := to_unsigned(PMA_CH1_OVLP,2);
    }

    if (PMA_CH1_BIST_WAIT == 1024)
    {
        SC_PMA_CH1_BIST_WAIT_171_170 := 2'b00;
    }
    else if (PMA_CH1_BIST_WAIT == 2048)
    {
        SC_PMA_CH1_BIST_WAIT_171_170 := 2'b01;
    }
    else if (PMA_CH1_BIST_WAIT == 4096)
    {
        SC_PMA_CH1_BIST_WAIT_171_170 := 2'b10;
    }
    else if (PMA_CH1_BIST_WAIT == 512)
    {
        SC_PMA_CH1_BIST_WAIT_171_170 := 2'b11;
    }

    if (PMA_CH1_BIST_TIMER == 512)
    {
        SC_PMA_CH1_BIST_TIMER_169_168 := 2'b00;
    }
    else if (PMA_CH1_BIST_TIMER == 1024)
    {
        SC_PMA_CH1_BIST_TIMER_169_168 := 2'b01;
    }
    else if (PMA_CH1_BIST_TIMER == 2048)
    {
        SC_PMA_CH1_BIST_TIMER_169_168 := 2'b10;
    }
    else if (PMA_CH1_BIST_TIMER == 4096)
    {
        SC_PMA_CH1_BIST_TIMER_169_168 := 2'b11;
    }

    if (PMA_CH1_BAND_LB >= 0 && PMA_CH1_BAND_LB <= 7)
    {
         SC_PMA_CH1_BAND_LB_167_165 := to_unsigned(PMA_CH1_BAND_LB,3);
    }

    if (PMA_CH1_BAND_HB >= 0 && PMA_CH1_BAND_HB <= 31)
    {
         SC_PMA_CH1_BAND_HB_164_160 := to_unsigned(PMA_CH1_BAND_HB,5) ^ 5'b10000;
    }

    if (PMA_CH1_FREQ_LOCK_ACCURACY >= 0 && PMA_CH1_FREQ_LOCK_ACCURACY <= 7)
    {
        SC_PMA_CH1_FREQ_LOCK_ACCURACY_159_157 := to_unsigned(PMA_CH1_FREQ_LOCK_ACCURACY,3); 
    }

    if (PMA_CH1_REG_SET_LC_BAND >= 0 && PMA_CH1_REG_SET_LC_BAND <= 31)
    {
         SC_PMA_CH1_REG_SET_LC_BAND_156_152 := to_unsigned(PMA_CH1_REG_SET_LC_BAND,5);
    }

    if (PMA_CH1_REG_SET_VCODIV >= 0 && PMA_CH1_REG_SET_VCODIV <= 3)
    {
        SC_PMA_CH1_REG_SET_VCODIV_151_150 := to_unsigned(PMA_CH1_REG_SET_VCODIV,2);  
    }

    if (PMA_CH1_REGISTER_SET_VCODIV_BAND_ENABLE == "DISABLE")
    {
        SC_PMA_CH1_REGISTER_SET_VCODIV_BAND_ENABLE_149 := 1'b0;
    }
    else if (PMA_CH1_REGISTER_SET_VCODIV_BAND_ENABLE == "ENABLE")
    {
        SC_PMA_CH1_REGISTER_SET_VCODIV_BAND_ENABLE_149 := 1'b1;
    }

    if (PMA_CH1_REG_SET_PLL_LOCK == "FALSE")
    {
        SC_PMA_CH1_REG_SET_PLL_LOCK_148 := 1'b0;
    }
    else if (PMA_CH1_REG_SET_PLL_LOCK == "TRUE")
    {
        SC_PMA_CH1_REG_SET_PLL_LOCK_148 := 1'b1;
    }

    if (PMA_CH1_REGISTER_SET_PLL_LOCK_ENABLE == "DISABLE")
    {
        SC_PMA_CH1_REGISTER_SET_PLL_LOCK_ENABLE_147 := 1'b0;
    }
    else if (PMA_CH1_REGISTER_SET_PLL_LOCK_ENABLE == "ENABLE")
    {
        SC_PMA_CH1_REGISTER_SET_PLL_LOCK_ENABLE_147 := 1'b1;
    }

    if (PMA_CH1_REG_SET_VCO_HI == "FALSE")
    {
        SC_PMA_CH1_REG_SET_VCO_HI_146 := 1'b0;
    }
    else if (PMA_CH1_REG_SET_VCO_HI == "TRUE")
    {
        SC_PMA_CH1_REG_SET_VCO_HI_146 := 1'b1;
    }

    if (PMA_CH1_REG_SET_VCO_LO == "FALSE")
    {
        SC_PMA_CH1_REG_SET_VCO_LO_145 := 1'b0;
    }
    else if (PMA_CH1_REG_SET_VCO_LO == "TRUE")
    {
        SC_PMA_CH1_REG_SET_VCO_LO_145 := 1'b1;
    }

    if (PMA_CH1_REGISTER_SET_VCO_HI_VCO_LO_ENABLE == "DISABLE")
    {
        SC_PMA_CH1_REGISTER_SET_VCO_HI_VCO_LO_ENABLE_144 := 1'b0;
    }
    else if (PMA_CH1_REGISTER_SET_VCO_HI_VCO_LO_ENABLE == "ENABLE")
    {
        SC_PMA_CH1_REGISTER_SET_VCO_HI_VCO_LO_ENABLE_144 := 1'b1;
    }

    if (PMA_CH1_FORCE_LC_PLL_LOOP_EN_H == "DISABLE")
    {
        SC_PMA_CH1_FORCE_LC_PLL_LOOP_EN_H_143 := 1'b0;
    }
    else if (PMA_CH1_FORCE_LC_PLL_LOOP_EN_H == "ENABLE")
    {
        SC_PMA_CH1_FORCE_LC_PLL_LOOP_EN_H_143 := 1'b1;
    }

    if (PMA_CH1_FORCE_LC_PLL_LOOP_EN_L == "DISABLE")
    {
        SC_PMA_CH1_FORCE_LC_PLL_LOOP_EN_L_142 := 1'b0;
    }
    else if (PMA_CH1_FORCE_LC_PLL_LOOP_EN_L == "ENABLE")
    {
        SC_PMA_CH1_FORCE_LC_PLL_LOOP_EN_L_142 := 1'b1;
    }

    if (PMA_CH1_VCO_DIV_CALI_BYPASS == "FALSE")
    {
        SC_PMA_CH1_VCO_DIV_CALI_BYPASS_141 := 1'b0;
    }
    else if (PMA_CH1_VCO_DIV_CALI_BYPASS == "TRUE")
    {
        SC_PMA_CH1_VCO_DIV_CALI_BYPASS_141 := 1'b1;
    }

    if (PMA_CH1_BIST_EN == "DISABLE")
    {
        SC_PMA_CH1_BIST_EN_140 := 1'b0;
    }
    else if (PMA_CH1_BIST_EN == "ENABLE")
    {
        SC_PMA_CH1_BIST_EN_140 := 1'b1;
    }

    if (PMA_CH1_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE == "DISABLE")
    {
        SC_PMA_CH1_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE_139 := 1'b0;
    }
    else if (PMA_CH1_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE == "ENABLE")
    {
        SC_PMA_CH1_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE_139 := 1'b1;
    }

    if (PMA_CH1_FREQ_DETECT_ENABLE_SOURCE == "DISABLE")
    {
        SC_PMA_CH1_FREQ_DETECT_ENABLE_SOURCE_138 := 1'b0;
    }
    else if (PMA_CH1_FREQ_DETECT_ENABLE_SOURCE == "ENABLE")
    {
        SC_PMA_CH1_FREQ_DETECT_ENABLE_SOURCE_138 := 1'b1;
    }

    if (PMA_CH1_REG_SET_DIVSEL_REF >= 0 && PMA_CH1_REG_SET_DIVSEL_REF <= 3)
    {
        SC_PMA_CH1_REG_SET_DIVSEL_REF_137_136 := to_unsigned(PMA_CH1_REG_SET_DIVSEL_REF,2);
    }

    if (PMA_CH1_REG_SET_DIVSEL45_FB == "FALSE")
    {
        SC_PMA_CH1_REG_SET_DIVSEL45_FB_135 := 1'b0;
    }
    else if (PMA_CH1_REG_SET_DIVSEL45_FB == "TRUE")
    {
        SC_PMA_CH1_REG_SET_DIVSEL45_FB_135 := 1'b1;
    }

    if (PMA_CH1_REG_SET_DIVSEL_FB >= 0 && PMA_CH1_REG_SET_DIVSEL_FB <= 7)
    {
         SC_PMA_CH1_REG_SET_DIVSEL_FB_134_132 := to_unsigned(PMA_CH1_REG_SET_DIVSEL_FB,3);
    }

    if (PMA_CH1_PLL_LOOP_EN_SETTING == "DISABLE")
    {
        SC_PMA_CH1_PLL_LOOP_EN_SETTING_131 := 1'b0;
    }
    else if (PMA_CH1_PLL_LOOP_EN_SETTING == "ENABLE")
    {
        SC_PMA_CH1_PLL_LOOP_EN_SETTING_131 := 1'b1;
    }

    if (PMA_CH1_REGISTER_SET_TXPLL_DIV_ENABLE == "DISABLE")
    {
        SC_PMA_CH1_REGISTER_SET_TXPLL_DIV_ENABLE_130 := 1'b0;
    }
    else if (PMA_CH1_REGISTER_SET_TXPLL_DIV_ENABLE == "ENABLE")
    {
        SC_PMA_CH1_REGISTER_SET_TXPLL_DIV_ENABLE_130 := 1'b1;
    }

    if (PMA_CH1_FORCE_RXPLL_RESET == "FALSE")
    {
        SC_PMA_CH1_FORCE_RXPLL_RESET_129 := 1'b0;
    }
    else if (PMA_CH1_FORCE_RXPLL_RESET == "TRUE")
    {
        SC_PMA_CH1_FORCE_RXPLL_RESET_129 := 1'b1;
    }

    if (PMA_CH1_FORCE_RXPLL_ON == "FALSE")
    {
        SC_PMA_CH1_FORCE_RXPLL_ON_128 := 1'b0;
    }
    else if (PMA_CH1_FORCE_RXPLL_ON == "TRUE")
    {
        SC_PMA_CH1_FORCE_RXPLL_ON_128 := 1'b1;
    }

    if (PMA_CH1_DPCK_DIV2 == "FALSE")
    {
        SC_PMA_CH1_DPCK_DIV2_126 := 1'b0;
    }
    else if (PMA_CH1_DPCK_DIV2 == "TRUE")
    {
        SC_PMA_CH1_DPCK_DIV2_126 := 1'b1;
    }

    if (PMA_CH1_LFO_SETTING >= 0 && PMA_CH1_LFO_SETTING <= 7)
    {
        SC_PMA_CH1_LFO_SETTING_122_120 := to_unsigned(PMA_CH1_LFO_SETTING,3); 
    }

    if (PMA_CH1_ALOS_COUNTER_CLOCK_SELECTION == "LOCAL")
    {
        SC_PMA_CH1_ALOS_COUNTER_CLOCK_SELECTION_119 := 1'b0;
    }
    else if (PMA_CH1_ALOS_COUNTER_CLOCK_SELECTION == "GLOBAL25M")
    {
        SC_PMA_CH1_ALOS_COUNTER_CLOCK_SELECTION_119 := 1'b1;
    }

    if (PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT == "100PCT")
    {
        SC_PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b000;
    }
    else if (PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT == "111PCT")
    {
        SC_PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b001;
    }
    else if (PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT == "125PCT")
    {
        SC_PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b010;
    }
    else if (PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT == "143PCT")
    {
        SC_PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b011;
    }
    else if (PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT == "71PCT")
    {
        SC_PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b100;
    }
    else if (PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT == "77PCT")
    {
        SC_PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b101;
    }
    else if (PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT == "83PCT")
    {
        SC_PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b110;
    }
    else if (PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT == "91PCT")
    {
        SC_PMA_CH1_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b111;
    }

    if (PMA_CH1_OOB_ENTER_DELAY_SETTING >= 0 && PMA_CH1_OOB_ENTER_DELAY_SETTING <= 3)
    {
        SC_PMA_CH1_OOB_ENTER_DELAY_SETTING_111_110 := to_unsigned(PMA_CH1_OOB_ENTER_DELAY_SETTING,2); 
    }

    if (PMA_CH1_ALOS_LOW_TO_HIGH_COUNTER_SETTING >= 0 && PMA_CH1_ALOS_LOW_TO_HIGH_COUNTER_SETTING <= 3)
    {
        SC_PMA_CH1_ALOS_LOW_TO_HIGH_COUNTER_SETTING_109_108 := to_unsigned(PMA_CH1_ALOS_LOW_TO_HIGH_COUNTER_SETTING,2) ^ 2'b01; 
    }

    if (PMA_CH1_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL == "DISABLE")
    {
        SC_PMA_CH1_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL_106 := 1'b0;
    }
    else if (PMA_CH1_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL == "ENABLE")
    {
        SC_PMA_CH1_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL_106 := 1'b1;
    }

    if (PMA_CH1_ALOS_EXIT_COUNTER_CLOCK_DIVIDER >= 0 && PMA_CH1_ALOS_EXIT_COUNTER_CLOCK_DIVIDER <= 3)
    {
        SC_PMA_CH1_ALOS_EXIT_COUNTER_CLOCK_DIVIDER_105_104 := to_unsigned(PMA_CH1_ALOS_EXIT_COUNTER_CLOCK_DIVIDER,2) ^ 2'b01;  
    }

    if (PMA_CH1_OOB_OSCILATER_FREQUENCY_SETTING >= 0 && PMA_CH1_OOB_OSCILATER_FREQUENCY_SETTING <= 3)
    {
        SC_PMA_CH1_OOB_OSCILATER_FREQUENCY_SETTING_103_102 := to_unsigned(PMA_CH1_OOB_OSCILATER_FREQUENCY_SETTING,2);
    }

    if (PMA_CH1_FORCE_OOB == "FALSE")
    {
        SC_PMA_CH1_FORCE_OOB_101 := 1'b0;
    }
    else if (PMA_CH1_FORCE_OOB == "TRUE")
    {
        SC_PMA_CH1_FORCE_OOB_101 := 1'b1;
    }

    if (PMA_CH1_OOB_VTH_SET == "27MV")
    {
        SC_PMA_CH1_OOB_VTH_SET_100_96 := 5'b00111;
    }
    else if (PMA_CH1_OOB_VTH_SET == "30MV")
    {
        SC_PMA_CH1_OOB_VTH_SET_100_96 := 5'b00110;
    }
    else if (PMA_CH1_OOB_VTH_SET == "35MV")
    {
        SC_PMA_CH1_OOB_VTH_SET_100_96 := 5'b00100;
    }
    else if (PMA_CH1_OOB_VTH_SET == "42_5MV")
    {
        SC_PMA_CH1_OOB_VTH_SET_100_96 := 5'b00000;
    }
    else if (PMA_CH1_OOB_VTH_SET == "52MV")
    {
        SC_PMA_CH1_OOB_VTH_SET_100_96 := 5'b01000;
    }
    else if (PMA_CH1_OOB_VTH_SET == "68MV")
    {
        SC_PMA_CH1_OOB_VTH_SET_100_96 := 5'b11000;
    }

    if (PMA_CH1_FORCE_DET_FORCE_ALOS_LOW == "FALSE")
    {
        SC_PMA_CH1_FORCE_DET_FORCE_ALOS_LOW_95 := 1'b0;
    }
    else if (PMA_CH1_FORCE_DET_FORCE_ALOS_LOW == "TRUE")
    {
        SC_PMA_CH1_FORCE_DET_FORCE_ALOS_LOW_95 := 1'b1;
    }

    if (PMA_CH1_ALOS_THRESHOLD_VOLTAGE == "27MV")
    {
        SC_PMA_CH1_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b00111;
    }
    else if (PMA_CH1_ALOS_THRESHOLD_VOLTAGE == "30MV")
    {
        SC_PMA_CH1_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b00110;
    }
    else if (PMA_CH1_ALOS_THRESHOLD_VOLTAGE == "35MV")
    {
        SC_PMA_CH1_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b00100;
    }
    else if (PMA_CH1_ALOS_THRESHOLD_VOLTAGE == "42_5MV")
    {
        SC_PMA_CH1_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b00000;
    }
    else if (PMA_CH1_ALOS_THRESHOLD_VOLTAGE == "52MV")
    {
        SC_PMA_CH1_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b01000;
    }
    else if (PMA_CH1_ALOS_THRESHOLD_VOLTAGE == "68MV")
    {
        SC_PMA_CH1_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b11000;
    }

    if (PMA_CH1_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE >= 0 && PMA_CH1_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE <= 3)
    {
        SC_PMA_CH1_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE_89_88 := to_unsigned(PMA_CH1_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE,2);
    }

    if (PMA_CH1_REGR_NEGATIVE_HYSTERESIS_SETTING == "100MV")
    {
        SC_PMA_CH1_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84 := 4'b0000;
    }
    else if (PMA_CH1_REGR_NEGATIVE_HYSTERESIS_SETTING == "75MV")
    {
        SC_PMA_CH1_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84 := 4'b0001;
    }
    else if (PMA_CH1_REGR_NEGATIVE_HYSTERESIS_SETTING == "50MV")
    {
        SC_PMA_CH1_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84 := 4'b0011;
    }
    else if (PMA_CH1_REGR_NEGATIVE_HYSTERESIS_SETTING == "25MV")
    {
        SC_PMA_CH1_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84 := 4'b0111;
    }
    else if (PMA_CH1_REGR_NEGATIVE_HYSTERESIS_SETTING == "0MV")
    {
        SC_PMA_CH1_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84 := 4'b1111;
    }

    if (PMA_CH1_REGL_POSITIVE_HYSTERESIS_SETTING == "100MV")
    {
        SC_PMA_CH1_REGL_POSITIVE_HYSTERESIS_SETTING_83_80 := 4'b0000;
    }
    else if (PMA_CH1_REGL_POSITIVE_HYSTERESIS_SETTING == "75MV")
    {
        SC_PMA_CH1_REGL_POSITIVE_HYSTERESIS_SETTING_83_80 := 4'b0001;
    }
    else if (PMA_CH1_REGL_POSITIVE_HYSTERESIS_SETTING == "50MV")
    {
        SC_PMA_CH1_REGL_POSITIVE_HYSTERESIS_SETTING_83_80 := 4'b0011;
    }
    else if (PMA_CH1_REGL_POSITIVE_HYSTERESIS_SETTING == "25MV")
    {
        SC_PMA_CH1_REGL_POSITIVE_HYSTERESIS_SETTING_83_80 := 4'b0111;
    }
    else if (PMA_CH1_REGL_POSITIVE_HYSTERESIS_SETTING == "0MV")
    {
        SC_PMA_CH1_REGL_POSITIVE_HYSTERESIS_SETTING_83_80 := 4'b1111;
    }

    if (PMA_CH1_REG_EN == "DISABLE")
    {
        SC_PMA_CH1_REG_EN_77 := 1'b0;
    }
    else if (PMA_CH1_REG_EN == "ENABLE")
    {
        SC_PMA_CH1_REG_EN_77 := 1'b1;
    }

    if (PMA_CH1_REGREF_SEL == "VREF")
    {
        SC_PMA_CH1_REGREF_SEL_76 := 1'b0;
    }
    else if (PMA_CH1_REGREF_SEL == "SELF_DC")
    {
        SC_PMA_CH1_REGREF_SEL_76 := 1'b1;
    }

    if (PMA_CH1_DC496 == "5MHZ")
    {
        SC_PMA_CH1_DC496_75_72 := 4'b0111;
    }
    else if (PMA_CH1_DC496 == "8MHZ")
    {
        SC_PMA_CH1_DC496_75_72 := 4'b0110;
    }
    else if (PMA_CH1_DC496 == "11_5MHZ")
    {
        SC_PMA_CH1_DC496_75_72 := 4'b0100;
    }
    else if (PMA_CH1_DC496 == "20_6MHZ")
    {
        SC_PMA_CH1_DC496_75_72 := 4'b0000;
    }
    else if (PMA_CH1_DC496 == "39_6MHZ")
    {
        SC_PMA_CH1_DC496_75_72 := 4'b1000;
    }

    if (PMA_CH1_EQ2_AC_VAR_SETTING == 255)
    {
        SC_PMA_CH1_EQ2_AC_VAR_SETTING_63_56 := 8'b00111100;
    }
    else if (PMA_CH1_EQ2_AC_VAR_SETTING == 254)
    {
        SC_PMA_CH1_EQ2_AC_VAR_SETTING_63_56 := 8'b00111101;
    }
    else if (PMA_CH1_EQ2_AC_VAR_SETTING == 252)
    {
        SC_PMA_CH1_EQ2_AC_VAR_SETTING_63_56 := 8'b00111111;
    }
    else if (PMA_CH1_EQ2_AC_VAR_SETTING == 248)
    {
        SC_PMA_CH1_EQ2_AC_VAR_SETTING_63_56 := 8'b00111011;
    }
    else if (PMA_CH1_EQ2_AC_VAR_SETTING == 243)
    {
        SC_PMA_CH1_EQ2_AC_VAR_SETTING_63_56 := 8'b00110000;
    }
    else if (PMA_CH1_EQ2_AC_VAR_SETTING == 240)
    {
        SC_PMA_CH1_EQ2_AC_VAR_SETTING_63_56 := 8'b00110011;
    }
    else if (PMA_CH1_EQ2_AC_VAR_SETTING == 227)
    {
        SC_PMA_CH1_EQ2_AC_VAR_SETTING_63_56 := 8'b00100000;
    }
    else if (PMA_CH1_EQ2_AC_VAR_SETTING == 224)
    {
        SC_PMA_CH1_EQ2_AC_VAR_SETTING_63_56 := 8'b00100011;
    }
    else if (PMA_CH1_EQ2_AC_VAR_SETTING == 195)
    {
        SC_PMA_CH1_EQ2_AC_VAR_SETTING_63_56 := 8'b00000000;
    }
    else if (PMA_CH1_EQ2_AC_VAR_SETTING == 192)
    {
        SC_PMA_CH1_EQ2_AC_VAR_SETTING_63_56 := 8'b00000011;
    }
    else if (PMA_CH1_EQ2_AC_VAR_SETTING == 131)
    {
        SC_PMA_CH1_EQ2_AC_VAR_SETTING_63_56 := 8'b01000000;
    }
    else if (PMA_CH1_EQ2_AC_VAR_SETTING == 128)
    {
        SC_PMA_CH1_EQ2_AC_VAR_SETTING_63_56 := 8'b01000011;
    }
    else if (PMA_CH1_EQ2_AC_VAR_SETTING == 3)
    {
        SC_PMA_CH1_EQ2_AC_VAR_SETTING_63_56 := 8'b11000000;
    }
    else if (PMA_CH1_EQ2_AC_VAR_SETTING == 0)
    {
        SC_PMA_CH1_EQ2_AC_VAR_SETTING_63_56 := 8'b11000011;
    }

    if (PMA_CH1_EQ2_AC_RES_SETTING >= 0 && PMA_CH1_EQ2_AC_RES_SETTING <= 31)
    {
         SC_PMA_CH1_EQ2_AC_RES_SETTING_52_48 := to_unsigned(PMA_CH1_EQ2_AC_RES_SETTING,5) ^ 5'b10101;
    }

    if (PMA_CH1_EQ2_DC_RESTOP_SETTING >= 0 && PMA_CH1_EQ2_DC_RESTOP_SETTING <= 3)
    {
        SC_PMA_CH1_EQ2_DC_RESTOP_SETTING_47_46 := to_unsigned(PMA_CH1_EQ2_DC_RESTOP_SETTING,2) ^ 2'b11; 
    }

    if (PMA_CH1_EQ1_DC_RESTOP_SETTING == 50)
    {
        SC_PMA_CH1_EQ1_DC_RESTOP_SETTING_43_40 := 4'b1000;
    }
    else if (PMA_CH1_EQ1_DC_RESTOP_SETTING == 52)
    {
        SC_PMA_CH1_EQ1_DC_RESTOP_SETTING_43_40 := 4'b1100;
    }
    else if (PMA_CH1_EQ1_DC_RESTOP_SETTING == 74)
    {
        SC_PMA_CH1_EQ1_DC_RESTOP_SETTING_43_40 := 4'b1111;
    }
    else if (PMA_CH1_EQ1_DC_RESTOP_SETTING == 60)
    {
        SC_PMA_CH1_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0000;
    }
    else if (PMA_CH1_EQ1_DC_RESTOP_SETTING == 61)
    {
        SC_PMA_CH1_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0010;
    }
    else if (PMA_CH1_EQ1_DC_RESTOP_SETTING == 81)
    {
        SC_PMA_CH1_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0011;
    }
    else if (PMA_CH1_EQ1_DC_RESTOP_SETTING == 71)
    {
        SC_PMA_CH1_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0100;
    }
    else if (PMA_CH1_EQ1_DC_RESTOP_SETTING == 92)
    {
        SC_PMA_CH1_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0101;
    }
    else if (PMA_CH1_EQ1_DC_RESTOP_SETTING == 78)
    {
        SC_PMA_CH1_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0110;
    }
    else if (PMA_CH1_EQ1_DC_RESTOP_SETTING == 107)
    {
        SC_PMA_CH1_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0111;
    }

    if (PMA_CH1_EQ1_AC_VAR_SETTING == 255)
    {
        SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32 := 8'b00011011;
    }
    else if (PMA_CH1_EQ1_AC_VAR_SETTING == 254)
    {
        SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32 := 8'b00011010;
    }
    else if (PMA_CH1_EQ1_AC_VAR_SETTING == 252)
    {
        SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32 := 8'b00011000;
    }
    else if (PMA_CH1_EQ1_AC_VAR_SETTING == 248)
    {
        SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32 := 8'b00011100;
    }
    else if (PMA_CH1_EQ1_AC_VAR_SETTING == 243)
    {
        SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32 := 8'b00010111;
    }
    else if (PMA_CH1_EQ1_AC_VAR_SETTING == 240)
    {
        SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32 := 8'b00010100;
    }
    else if (PMA_CH1_EQ1_AC_VAR_SETTING == 228)
    {
        SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32 := 8'b00000000;
    }
    else if (PMA_CH1_EQ1_AC_VAR_SETTING == 227)
    {
        SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32 := 8'b00000111;
    }
    else if (PMA_CH1_EQ1_AC_VAR_SETTING == 224)
    {
        SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32 := 8'b00000100;
    }
    else if (PMA_CH1_EQ1_AC_VAR_SETTING == 195)
    {
        SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32 := 8'b00100111;
    }
    else if (PMA_CH1_EQ1_AC_VAR_SETTING == 192)
    {
        SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32 := 8'b00100100;
    }
    else if (PMA_CH1_EQ1_AC_VAR_SETTING == 131)
    {
        SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32 := 8'b11100111;
    }
    else if (PMA_CH1_EQ1_AC_VAR_SETTING == 128)
    {
        SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32 := 8'b01100100;
    }
    else if (PMA_CH1_EQ1_AC_VAR_SETTING == 3)
    {
        SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32 := 8'b11100111;
    }
    else if (PMA_CH1_EQ1_AC_VAR_SETTING == 0)
    {
        SC_PMA_CH1_EQ1_AC_VAR_SETTING_39_32 := 8'b11100100;
    }

    if (PMA_CH1_EQ2_CURRENT_SETTING == 7)
    {
        SC_PMA_CH1_EQ2_CURRENT_SETTING_31_29 := 3'b110;
    }
    else if (PMA_CH1_EQ2_CURRENT_SETTING == 6)
    {
        SC_PMA_CH1_EQ2_CURRENT_SETTING_31_29 := 3'b111;
    }
    else if (PMA_CH1_EQ2_CURRENT_SETTING == 3)
    {
        SC_PMA_CH1_EQ2_CURRENT_SETTING_31_29 := 3'b010;
    }
    else if (PMA_CH1_EQ2_CURRENT_SETTING == 1)
    {
        SC_PMA_CH1_EQ2_CURRENT_SETTING_31_29 := 3'b000;
    }
    else if (PMA_CH1_EQ2_CURRENT_SETTING == 0)
    {
        SC_PMA_CH1_EQ2_CURRENT_SETTING_31_29 := 3'b001;
    }

    if (PMA_CH1_EQ1_AC_RES_SETTING >= 0 && PMA_CH1_EQ1_AC_RES_SETTING <= 31)
    {
         SC_PMA_CH1_EQ1_AC_RES_SETTING_28_24 := to_unsigned(PMA_CH1_EQ1_AC_RES_SETTING,5) ^ 5'b10011;
    }

    if (PMA_CH1_EQ1_CURRENT_SETTING == 15)
    {
        SC_PMA_CH1_EQ1_CURRENT_SETTING_19_16 := 4'b0000;
    }
    else if (PMA_CH1_EQ1_CURRENT_SETTING == 14)
    {
        SC_PMA_CH1_EQ1_CURRENT_SETTING_19_16 := 4'b0001;
    }
    else if (PMA_CH1_EQ1_CURRENT_SETTING == 11)
    {
        SC_PMA_CH1_EQ1_CURRENT_SETTING_19_16 := 4'b0100;
    }
    else if (PMA_CH1_EQ1_CURRENT_SETTING == 7)
    {
        SC_PMA_CH1_EQ1_CURRENT_SETTING_19_16 := 4'b1000;
    }
    else if (PMA_CH1_EQ1_CURRENT_SETTING == 4)
    {
        SC_PMA_CH1_EQ1_CURRENT_SETTING_19_16 := 4'b1011;
    }
    else if (PMA_CH1_EQ1_CURRENT_SETTING == 3)
    {
        SC_PMA_CH1_EQ1_CURRENT_SETTING_19_16 := 4'b1100;
    }
    else if (PMA_CH1_EQ1_CURRENT_SETTING == 1)
    {
        SC_PMA_CH1_EQ1_CURRENT_SETTING_19_16 := 4'b1110;
    }
    else if (PMA_CH1_EQ1_CURRENT_SETTING == 0)
    {
        SC_PMA_CH1_EQ1_CURRENT_SETTING_19_16 := 4'b1111;
    }

    if (PMA_CH1_RPLUS == 0)
    {
        SC_PMA_CH1_RPLUS_15_12 := 4'b0000;
    }
    else if (PMA_CH1_RPLUS == 1)
    {
        SC_PMA_CH1_RPLUS_15_12 := 4'b0001;
    }
    else if (PMA_CH1_RPLUS == 3)
    {
        SC_PMA_CH1_RPLUS_15_12 := 4'b0011;
    }
    else if (PMA_CH1_RPLUS == 7)
    {
        SC_PMA_CH1_RPLUS_15_12 := 4'b0111;
    }
    else if (PMA_CH1_RPLUS == 15)
    {
        SC_PMA_CH1_RPLUS_15_12 := 4'b1111;
    }

    if (PMA_CH1_RMINUS == 0)
    {
        SC_PMA_CH1_RMINUS_11_8 := 4'b0000;
    }
    else if (PMA_CH1_RMINUS == 1)
    {
        SC_PMA_CH1_RMINUS_11_8 := 4'b0001;
    }
    else if (PMA_CH1_RMINUS == 3)
    {
        SC_PMA_CH1_RMINUS_11_8 := 4'b0011;
    }
    else if (PMA_CH1_RMINUS == 7)
    {
        SC_PMA_CH1_RMINUS_11_8 := 4'b0111;
    }
    else if (PMA_CH1_RMINUS == 15)
    {
        SC_PMA_CH1_RMINUS_11_8 := 4'b1111;
    }

    if (PMA_CH1_RVALSET >= 0 && PMA_CH1_RVALSET <= 3)
    {
        SC_PMA_CH1_RVALSET_7_6 := to_unsigned(PMA_CH1_RVALSET,2) ^ 2'b01;
    }

    if (PMA_CH1_RTERM >= 0 && PMA_CH1_RTERM <= 3)
    {
        SC_PMA_CH1_RTERM_5_4 := to_unsigned(PMA_CH1_RTERM,2); 
    }

    if (PMA_CH1_DCFB_EN == "DISABLE")
    {
        SC_PMA_CH1_DCFB_EN_2 := 1'b0;
    }
    else if (PMA_CH1_DCFB_EN == "ENABLE")
    {
        SC_PMA_CH1_DCFB_EN_2 := 1'b1;
    }

    if (PMA_CH1_DCCOUP == "FALSE")
    {
        SC_PMA_CH1_DCCOUP_1 := 1'b1;
    }
    else if (PMA_CH1_DCCOUP == "TRUE")
    {
        SC_PMA_CH1_DCCOUP_1 := 1'b0;
    }

    if (PMA_CH1_3G == "FALSE")
    {
        SC_PMA_CH1_3G_0 := 1'b0;
    }
    else if (PMA_CH1_3G == "TRUE")
    {
        SC_PMA_CH1_3G_0 := 1'b1;
    }

    if (PMA_CH2_TXDATA_WIDTH == "8_BIT")
    {
        SC_PMA_CH2_TXDATA_WIDTH_381_380 := 2'b00;
    }
    else if (PMA_CH2_TXDATA_WIDTH == "10_BIT")
    {
        SC_PMA_CH2_TXDATA_WIDTH_381_380 := 2'b01;
    }
    else if (PMA_CH2_TXDATA_WIDTH == "16_BIT")
    {
        SC_PMA_CH2_TXDATA_WIDTH_381_380 := 2'b10;
    }
    else if (PMA_CH2_TXDATA_WIDTH == "20_BIT")
    {
        SC_PMA_CH2_TXDATA_WIDTH_381_380 := 2'b11;
    }

    if (PMA_CH2_TX_TESTPATTERN >= 0 && PMA_CH2_TX_TESTPATTERN <= 3)
    {
        SC_PMA_CH2_TX_TESTPATTERN_375_374 := to_unsigned(PMA_CH2_TX_TESTPATTERN,2);
    }

    if (PMA_CH2_TESTPATTERN_O_ENABLE == "FALSE")
    {
        SC_PMA_CH2_TESTPATTERN_O_ENABLE_373 := 1'b0;
    }
    else if (PMA_CH2_TESTPATTERN_O_ENABLE == "TRUE")
    {
        SC_PMA_CH2_TESTPATTERN_O_ENABLE_373 := 1'b1;
    }

    if (PMA_CH2_DISABLE_BSMODE_DRVAMP == "FALSE")
    {
        SC_PMA_CH2_DISABLE_BSMODE_DRVAMP_372 := 1'b1;
    }
    else if (PMA_CH2_DISABLE_BSMODE_DRVAMP == "TRUE")
    {
        SC_PMA_CH2_DISABLE_BSMODE_DRVAMP_372 := 1'b0;
    }

    if (PMA_CH2_FORCE_BIST_ENABLE == "FALSE")
    {
        SC_PMA_CH2_FORCE_BIST_ENABLE_371 := 1'b0;
    }
    else if (PMA_CH2_FORCE_BIST_ENABLE == "TRUE")
    {
        SC_PMA_CH2_FORCE_BIST_ENABLE_371 := 1'b1;
    }

    if (PMA_CH2_FORCE_ELECTRICAL_IDLE == "FALSE")
    {
        SC_PMA_CH2_FORCE_ELECTRICAL_IDLE_370 := 1'b0;
    }
    else if (PMA_CH2_FORCE_ELECTRICAL_IDLE == "TRUE")
    {
        SC_PMA_CH2_FORCE_ELECTRICAL_IDLE_370 := 1'b1;
    }

    if (PMA_CH2_FORCE_RXDCT_ENABLE == "FALSE")
    {
        SC_PMA_CH2_FORCE_RXDCT_ENABLE_369 := 1'b0;
    }
    else if (PMA_CH2_FORCE_RXDCT_ENABLE == "TRUE")
    {
        SC_PMA_CH2_FORCE_RXDCT_ENABLE_369 := 1'b1;
    }

    if (PMA_CH2_FORCE_EXTLB_ENABLE == "FALSE")
    {
        SC_PMA_CH2_FORCE_EXTLB_ENABLE_368 := 1'b0;
    }
    else if (PMA_CH2_FORCE_EXTLB_ENABLE == "TRUE")
    {
        SC_PMA_CH2_FORCE_EXTLB_ENABLE_368 := 1'b1;
    }

    if (PMA_CH2_DISABLE_LANE_SYNC == "FALSE")
    {
        SC_PMA_CH2_DISABLE_LANE_SYNC_367 := 1'b0;
    }
    else if (PMA_CH2_DISABLE_LANE_SYNC == "TRUE")
    {
        SC_PMA_CH2_DISABLE_LANE_SYNC_367 := 1'b1;
    }

    if (PMA_CH2_DISABLE_ELECTRICAL_IDLE == "FALSE")
    {
        SC_PMA_CH2_DISABLE_ELECTRICAL_IDLE_366 := 1'b0;
    }
    else if (PMA_CH2_DISABLE_ELECTRICAL_IDLE == "TRUE")
    {
        SC_PMA_CH2_DISABLE_ELECTRICAL_IDLE_366 := 1'b1;
    }

    if (PMA_CH2_DISABLE_RXDCT_ENABLE == "FALSE")
    {
        SC_PMA_CH2_DISABLE_RXDCT_ENABLE_365 := 1'b0;
    }
    else if (PMA_CH2_DISABLE_RXDCT_ENABLE == "TRUE")
    {
        SC_PMA_CH2_DISABLE_RXDCT_ENABLE_365 := 1'b1;
    }

    if (PMA_CH2_DISABLE_EXTLB_ENABLE == "FALSE")
    {
        SC_PMA_CH2_DISABLE_EXTLB_ENABLE_364 := 1'b0;
    }
    else if (PMA_CH2_DISABLE_EXTLB_ENABLE == "TRUE")
    {
        SC_PMA_CH2_DISABLE_EXTLB_ENABLE_364 := 1'b1;
    }

    if (PMA_CH2_DISABLE_LOW_SPEED_PATH_ENABLE == "FALSE")
    {
        SC_PMA_CH2_DISABLE_LOW_SPEED_PATH_ENABLE_363 := 1'b0;
    }
    else if (PMA_CH2_DISABLE_LOW_SPEED_PATH_ENABLE == "TRUE")
    {
        SC_PMA_CH2_DISABLE_LOW_SPEED_PATH_ENABLE_363 := 1'b1;
    }

    if (PMA_CH2_FORCE_LANE_ENABLE == "FALSE")
    {
        SC_PMA_CH2_FORCE_LANE_ENABLE_362 := 1'b0;
    }
    else if (PMA_CH2_FORCE_LANE_ENABLE == "TRUE")
    {
        SC_PMA_CH2_FORCE_LANE_ENABLE_362 := 1'b1;
    }

    if (PMA_CH2_FORCE_LANE_RESETB_DISABLE == "FALSE")
    {
        SC_PMA_CH2_FORCE_LANE_RESETB_DISABLE_361 := 1'b0;
    }
    else if (PMA_CH2_FORCE_LANE_RESETB_DISABLE == "TRUE")
    {
        SC_PMA_CH2_FORCE_LANE_RESETB_DISABLE_361 := 1'b1;
    }

    if (PMA_CH2_RXDCT_LGBW_ENABLE == "FALSE")
    {
        SC_PMA_CH2_RXDCT_LGBW_ENABLE_359 := 1'b0;
    }
    else if (PMA_CH2_RXDCT_LGBW_ENABLE == "TRUE")
    {
        SC_PMA_CH2_RXDCT_LGBW_ENABLE_359 := 1'b1;
    }

    if (PMA_CH2_RXDCT_VTH == "MINUS_300MV")
    {
        SC_PMA_CH2_RXDCT_VTH_358_357 := 2'b00;
    }
    else if (PMA_CH2_RXDCT_VTH == "MINUS_375MV")
    {
        SC_PMA_CH2_RXDCT_VTH_358_357 := 2'b01;
    }
    else if (PMA_CH2_RXDCT_VTH == "MINUS_150MV")
    {
        SC_PMA_CH2_RXDCT_VTH_358_357 := 2'b10;
    }
    else if (PMA_CH2_RXDCT_VTH == "MINUS_225MV")
    {
        SC_PMA_CH2_RXDCT_VTH_358_357 := 2'b11;
    }

    if (PMA_CH2_DE_EMPHASIS_ADDITIONAL_CONTROL == "0DB")
    {
        SC_PMA_CH2_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355 := 2'b00;
    }
    else if (PMA_CH2_DE_EMPHASIS_ADDITIONAL_CONTROL == "0_7DB")
    {
        SC_PMA_CH2_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355 := 2'b01;
    }
    else if (PMA_CH2_DE_EMPHASIS_ADDITIONAL_CONTROL == "1_4DB")
    {
        SC_PMA_CH2_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355 := 2'b11;
    }

    if (PMA_CH2_DRV_RTERM_CONTROL == "100PCT")
    {
        SC_PMA_CH2_DRV_RTERM_CONTROL_354_352 := 3'b000;
    }
    else if (PMA_CH2_DRV_RTERM_CONTROL == "95PCT")
    {
        SC_PMA_CH2_DRV_RTERM_CONTROL_354_352 := 3'b001;
    }
    else if (PMA_CH2_DRV_RTERM_CONTROL == "91PCT")
    {
        SC_PMA_CH2_DRV_RTERM_CONTROL_354_352 := 3'b010;
    }
    else if (PMA_CH2_DRV_RTERM_CONTROL == "87PCT")
    {
        SC_PMA_CH2_DRV_RTERM_CONTROL_354_352 := 3'b011;
    }
    else if (PMA_CH2_DRV_RTERM_CONTROL == "105PCT")
    {
        SC_PMA_CH2_DRV_RTERM_CONTROL_354_352 := 3'b100;
    }
    else if (PMA_CH2_DRV_RTERM_CONTROL == "111PCT")
    {
        SC_PMA_CH2_DRV_RTERM_CONTROL_354_352 := 3'b101;
    }
    else if (PMA_CH2_DRV_RTERM_CONTROL == "117PCT")
    {
        SC_PMA_CH2_DRV_RTERM_CONTROL_354_352 := 3'b110;
    }
    else if (PMA_CH2_DRV_RTERM_CONTROL == "highZ")
    {
        SC_PMA_CH2_DRV_RTERM_CONTROL_354_352 := 3'b111;
    }

    if (PMA_CH2_FDRV_AMP_CONTROL == "100PCT")
    {
        SC_PMA_CH2_FDRV_AMP_CONTROL_351_350 := 2'b00;
    }
    else if (PMA_CH2_FDRV_AMP_CONTROL == "92PCT")
    {
        SC_PMA_CH2_FDRV_AMP_CONTROL_351_350 := 2'b01;
    }
    else if (PMA_CH2_FDRV_AMP_CONTROL == "109PCT")
    {
        SC_PMA_CH2_FDRV_AMP_CONTROL_351_350 := 2'b10;
    }
    else if (PMA_CH2_FDRV_AMP_CONTROL == "120PCT")
    {
        SC_PMA_CH2_FDRV_AMP_CONTROL_351_350 := 2'b11;
    }

    if (PMA_CH2_PREPC_AMP_CONTROL == "100PCT")
    {
        SC_PMA_CH2_PREPC_AMP_CONTROL_349_348 := 2'b00;
    }
    else if (PMA_CH2_PREPC_AMP_CONTROL == "83PCT")
    {
        SC_PMA_CH2_PREPC_AMP_CONTROL_349_348 := 2'b01;
    }
    else if (PMA_CH2_PREPC_AMP_CONTROL == "133PCT")
    {
        SC_PMA_CH2_PREPC_AMP_CONTROL_349_348 := 2'b10;
    }
    else if (PMA_CH2_PREPC_AMP_CONTROL == "117PCT")
    {
        SC_PMA_CH2_PREPC_AMP_CONTROL_349_348 := 2'b11;
    }

    if (PMA_CH2_PREMC_AMP_CONTROL == "100PCT")
    {
        SC_PMA_CH2_PREMC_AMP_CONTROL_347_346 := 2'b00;
    }
    else if (PMA_CH2_PREMC_AMP_CONTROL == "83PCT")
    {
        SC_PMA_CH2_PREMC_AMP_CONTROL_347_346 := 2'b01;
    }
    else if (PMA_CH2_PREMC_AMP_CONTROL == "133PCT")
    {
        SC_PMA_CH2_PREMC_AMP_CONTROL_347_346 := 2'b10;
    }
    else if (PMA_CH2_PREMC_AMP_CONTROL == "117PCT")
    {
        SC_PMA_CH2_PREMC_AMP_CONTROL_347_346 := 2'b11;
    }

    if (PMA_CH2_SER_AMP_CONTROL == "100PCT")
    {
        SC_PMA_CH2_SER_AMP_CONTROL_345_344 := 2'b00;
    }
    else if (PMA_CH2_SER_AMP_CONTROL == "83PCT")
    {
        SC_PMA_CH2_SER_AMP_CONTROL_345_344 := 2'b01;
    }
    else if (PMA_CH2_SER_AMP_CONTROL == "133PCT")
    {
        SC_PMA_CH2_SER_AMP_CONTROL_345_344 := 2'b10;
    }
    else if (PMA_CH2_SER_AMP_CONTROL == "117PCT")
    {
        SC_PMA_CH2_SER_AMP_CONTROL_345_344 := 2'b11;
    }

    if (PMA_CH2_PFD_LOOP_RESISTOR_SETTING >= 0 && PMA_CH2_PFD_LOOP_RESISTOR_SETTING <= 15)
    {
        SC_PMA_CH2_PFD_LOOP_RESISTOR_SETTING_327_324 := to_unsigned(PMA_CH2_PFD_LOOP_RESISTOR_SETTING,4);   
    }

    if (PMA_CH2_PD_LOOP_RESISTOR_SETTING >= 0 && PMA_CH2_PD_LOOP_RESISTOR_SETTING <= 15)
    {
        SC_PMA_CH2_PD_LOOP_RESISTOR_SETTING_323_320 := to_unsigned(PMA_CH2_PD_LOOP_RESISTOR_SETTING,4);
    }

    if (PMA_CH2_CDR_TEST_OUT_SELECT == "FBCK")
    {
        SC_PMA_CH2_CDR_TEST_OUT_SELECT_319 := 1'b0;
    }
    else if (PMA_CH2_CDR_TEST_OUT_SELECT == "PD")
    {
        SC_PMA_CH2_CDR_TEST_OUT_SELECT_319 := 1'b1;
    }

    if (PMA_CH2_PI_DIV1_BP == "DISABLE")
    {
        SC_PMA_CH2_PI_DIV1_BP_318 := 1'b0;
    }
    else if (PMA_CH2_PI_DIV1_BP == "ENABLE")
    {
        SC_PMA_CH2_PI_DIV1_BP_318 := 1'b1;
    }

    if (PMA_CH2_PI_TEST_FOR_CKI == "FALSE")
    {
        SC_PMA_CH2_PI_TEST_FOR_CKI_317 := 1'b0;
    }
    else if (PMA_CH2_PI_TEST_FOR_CKI == "TRUE")
    {
        SC_PMA_CH2_PI_TEST_FOR_CKI_317 := 1'b1;
    }

    if (PMA_CH2_PI_CURRENT_SETTING == "100PCT")
    {
        SC_PMA_CH2_PI_CURRENT_SETTING_316_314 := 3'b000;
    }
    else if (PMA_CH2_PI_CURRENT_SETTING == "80PCT")
    {
        SC_PMA_CH2_PI_CURRENT_SETTING_316_314 := 3'b001;
    }
    else if (PMA_CH2_PI_CURRENT_SETTING == "140PCT")
    {
        SC_PMA_CH2_PI_CURRENT_SETTING_316_314 := 3'b010;
    }
    else if (PMA_CH2_PI_CURRENT_SETTING == "120PCT")
    {
        SC_PMA_CH2_PI_CURRENT_SETTING_316_314 := 3'b011;
    }
    else if (PMA_CH2_PI_CURRENT_SETTING == "160PCT")
    {
        SC_PMA_CH2_PI_CURRENT_SETTING_316_314 := 3'b100;
    }
    else if (PMA_CH2_PI_CURRENT_SETTING == "120PCTr")
    {
        SC_PMA_CH2_PI_CURRENT_SETTING_316_314 := 3'b101;
    }
    else if (PMA_CH2_PI_CURRENT_SETTING == "200PCT")
    {
        SC_PMA_CH2_PI_CURRENT_SETTING_316_314 := 3'b110;
    }
    else if (PMA_CH2_PI_CURRENT_SETTING == "180PCT")
    {
        SC_PMA_CH2_PI_CURRENT_SETTING_316_314 := 3'b111;
    }

    if (PMA_CH2_PI_FREQUENCY_SETTING >= 0 && PMA_CH2_PI_FREQUENCY_SETTING <= 3)
    {
        SC_PMA_CH2_PI_FREQUENCY_SETTING_313_312 := to_unsigned(PMA_CH2_PI_FREQUENCY_SETTING,2); 
    }

    if (PMA_CH2_TEST_OUT_SELECT_FOR_RCK == "FALSE")
    {
        SC_PMA_CH2_TEST_OUT_SELECT_FOR_RCK_311 := 1'b0;
    }
    else if (PMA_CH2_TEST_OUT_SELECT_FOR_RCK == "TRUE")
    {
        SC_PMA_CH2_TEST_OUT_SELECT_FOR_RCK_311 := 1'b1;
    }

    if (PMA_CH2_TEST_OUT_SELECT_SOURCE == "SLPI1UI")
    {
        SC_PMA_CH2_TEST_OUT_SELECT_SOURCE_310 := 1'b0;
    }
    else if (PMA_CH2_TEST_OUT_SELECT_SOURCE == "PD1")
    {
        SC_PMA_CH2_TEST_OUT_SELECT_SOURCE_310 := 1'b1;
    }

    if (PMA_CH2_TEST_DATA_OUT_SELECT_SOURCE == "DO")
    {
        SC_PMA_CH2_TEST_DATA_OUT_SELECT_SOURCE_309 := 1'b0;
    }
    else if (PMA_CH2_TEST_DATA_OUT_SELECT_SOURCE == "DE")
    {
        SC_PMA_CH2_TEST_DATA_OUT_SELECT_SOURCE_309 := 1'b1;
    }

    if (PMA_CH2_TEST_CK_OUT_SELECT_SOURCE == "DATA")
    {
        SC_PMA_CH2_TEST_CK_OUT_SELECT_SOURCE_308 := 1'b0;
    }
    else if (PMA_CH2_TEST_CK_OUT_SELECT_SOURCE == "CLOCK")
    {
        SC_PMA_CH2_TEST_CK_OUT_SELECT_SOURCE_308 := 1'b1;
    }

    if (PMA_CH2_ENABLE_SLIP1UI_MODULE == "DISABLE")
    {
        SC_PMA_CH2_ENABLE_SLIP1UI_MODULE_307 := 1'b0;
    }
    else if (PMA_CH2_ENABLE_SLIP1UI_MODULE == "ENABLE")
    {
        SC_PMA_CH2_ENABLE_SLIP1UI_MODULE_307 := 1'b1;
    }

    if (PMA_CH2_PN_SWAP_ENABLE == "DISABLE")
    {
        SC_PMA_CH2_PN_SWAP_ENABLE_306 := 1'b0;
    }
    else if (PMA_CH2_PN_SWAP_ENABLE == "ENABLE")
    {
        SC_PMA_CH2_PN_SWAP_ENABLE_306 := 1'b1;
    }

    if (PMA_CH2_SIPO_BIT_SETTING == "10_BIT")
    {
        SC_PMA_CH2_SIPO_BIT_SETTING_305_304 := 2'b00;
    }
    else if (PMA_CH2_SIPO_BIT_SETTING == "8_BIT")
    {
        SC_PMA_CH2_SIPO_BIT_SETTING_305_304 := 2'b01;
    }
    else if (PMA_CH2_SIPO_BIT_SETTING == "20_BIT")
    {
        SC_PMA_CH2_SIPO_BIT_SETTING_305_304 := 2'b10;
    }
    else if (PMA_CH2_SIPO_BIT_SETTING == "16_BIT")
    {
        SC_PMA_CH2_SIPO_BIT_SETTING_305_304 := 2'b11;
    }

    if (PMA_CH2_OOB_EN == "DISABLE")
    {
        SC_PMA_CH2_OOB_EN_303 := 1'b0;
    }
    else if (PMA_CH2_OOB_EN == "ENABLE")
    {
        SC_PMA_CH2_OOB_EN_303 := 1'b1;
    }

    if (PMA_CH2_ALOS_EN == "DISABLE")
    {
        SC_PMA_CH2_ALOS_EN_302 := 1'b0;
    }
    else if (PMA_CH2_ALOS_EN == "ENABLE")
    {
        SC_PMA_CH2_ALOS_EN_302 := 1'b1;
    }

    if (PMA_CH2_LFMODE == "HIGH")
    {
        SC_PMA_CH2_LFMODE_301 := 1'b0;
    }
    else if (PMA_CH2_LFMODE == "LOW")
    {
        SC_PMA_CH2_LFMODE_301 := 1'b1;
    }

    if (PMA_CH2_TSO_HS_SEL == "CDR")
    {
        SC_PMA_CH2_TSO_HS_SEL_300 := 1'b0;
    }
    else if (PMA_CH2_TSO_HS_SEL == "EQ")
    {
        SC_PMA_CH2_TSO_HS_SEL_300 := 1'b1;
    }

    if (PMA_CH2_LX_SELLC == "RING")
    {
        SC_PMA_CH2_LX_SELLC_295 := 1'b0;
    }
    else if (PMA_CH2_LX_SELLC == "LC")
    {
        SC_PMA_CH2_LX_SELLC_295 := 1'b1;
    }

    if (PMA_CH2_LX_RXPLL_DIVSEL45_FB == 4)
    {
        SC_PMA_CH2_LX_RXPLL_DIVSEL45_FB_287 := 1'b0;
    }
    else if (PMA_CH2_LX_RXPLL_DIVSEL45_FB == 5)
    {
        SC_PMA_CH2_LX_RXPLL_DIVSEL45_FB_287 := 1'b1;
    }

    if (PMA_CH2_LX_RXPLL_DIVSEL_FB == 2)
    {
        SC_PMA_CH2_LX_RXPLL_DIVSEL_FB_286_284 := 3'b000;
    }
    else if (PMA_CH2_LX_RXPLL_DIVSEL_FB == 4)
    {
        SC_PMA_CH2_LX_RXPLL_DIVSEL_FB_286_284 := 3'b001;
    }
    else if (PMA_CH2_LX_RXPLL_DIVSEL_FB == 5)
    {
        SC_PMA_CH2_LX_RXPLL_DIVSEL_FB_286_284 := 3'b010;
    }
    else if (PMA_CH2_LX_RXPLL_DIVSEL_FB == 8)
    {
        SC_PMA_CH2_LX_RXPLL_DIVSEL_FB_286_284 := 3'b101;
    }
    else if (PMA_CH2_LX_RXPLL_DIVSEL_FB == 10)
    {
        SC_PMA_CH2_LX_RXPLL_DIVSEL_FB_286_284 := 3'b110;
    }

    if (PMA_CH2_LX_RXPLL_DIVSEL_REF == 1)
    {
        SC_PMA_CH2_LX_RXPLL_DIVSEL_REF_283_282 := 2'b00;
    }
    else if (PMA_CH2_LX_RXPLL_DIVSEL_REF == 2)
    {
        SC_PMA_CH2_LX_RXPLL_DIVSEL_REF_283_282 := 2'b01;
    }
    else if (PMA_CH2_LX_RXPLL_DIVSEL_REF == 4)
    {
        SC_PMA_CH2_LX_RXPLL_DIVSEL_REF_283_282 := 2'b10;
    }

    if (PMA_CH2_PICODE >= 0 && PMA_CH2_PICODE <= 255)
    {
         SC_PMA_CH2_PICODE_279_272 := to_unsigned(PMA_CH2_PICODE,8);
    }

    if (PMA_CH2_RX_REFCK_SEL >= 0 && PMA_CH2_RX_REFCK_SEL <= 3)
    {
        SC_PMA_CH2_RX_REFCK_SEL_265_264 := to_unsigned(PMA_CH2_RX_REFCK_SEL,2) ^ 2'b10;
    }

    if (PMA_CH2_PFDLPEN_REGISTER_CONTROL_ENABLE == "DISABLE")
    {
        SC_PMA_CH2_PFDLPEN_REGISTER_CONTROL_ENABLE_259 := 1'b0;
    }
    else if (PMA_CH2_PFDLPEN_REGISTER_CONTROL_ENABLE == "ENABLE")
    {
        SC_PMA_CH2_PFDLPEN_REGISTER_CONTROL_ENABLE_259 := 1'b1;
    }

    if (PMA_CH2_PFDLPEN_REGISTER_SETTING == "FALSE")
    {
        SC_PMA_CH2_PFDLPEN_REGISTER_SETTING_258 := 1'b0;
    }
    else if (PMA_CH2_PFDLPEN_REGISTER_SETTING == "TRUE")
    {
        SC_PMA_CH2_PFDLPEN_REGISTER_SETTING_258 := 1'b1;
    }

    if (PMA_CH2_PDLPEN_REGISTER_CONTROL_ENABLE == "DISABLE")
    {
        SC_PMA_CH2_PDLPEN_REGISTER_CONTROL_ENABLE_257 := 1'b0;
    }
    else if (PMA_CH2_PDLPEN_REGISTER_CONTROL_ENABLE == "ENABLE")
    {
        SC_PMA_CH2_PDLPEN_REGISTER_CONTROL_ENABLE_257 := 1'b1;
    }

    if (PMA_CH2_PDLPEN_REGISTER_SETTING == "FALSE")
    {
        SC_PMA_CH2_PDLPEN_REGISTER_SETTING_256 := 1'b0;
    }
    else if (PMA_CH2_PDLPEN_REGISTER_SETTING == "TRUE")
    {
        SC_PMA_CH2_PDLPEN_REGISTER_SETTING_256 := 1'b1;
    }

    if (PMA_CH2_DIV_CHANGE_ENABLE_DELAY_TIMER >= 0 && PMA_CH2_DIV_CHANGE_ENABLE_DELAY_TIMER <= 3)
    {
        SC_PMA_CH2_DIV_CHANGE_ENABLE_DELAY_TIMER_254_253 := to_unsigned(PMA_CH2_DIV_CHANGE_ENABLE_DELAY_TIMER,2); 
    }

    if (PMA_CH2_DIV_CHANGE_ENABLE_SIGNAL_GATING == "FALSE")
    {
        SC_PMA_CH2_DIV_CHANGE_ENABLE_SIGNAL_GATING_252 := 1'b0;
    }
    else if (PMA_CH2_DIV_CHANGE_ENABLE_SIGNAL_GATING == "TRUE")
    {
        SC_PMA_CH2_DIV_CHANGE_ENABLE_SIGNAL_GATING_252 := 1'b1;
    }

    if (PMA_CH2_CDR_ALIGN_REGISTER_SETTING_VALUE == "FALSE")
    {
        SC_PMA_CH2_CDR_ALIGN_REGISTER_SETTING_VALUE_251 := 1'b0;
    }
    else if (PMA_CH2_CDR_ALIGN_REGISTER_SETTING_VALUE == "TRUE")
    {
        SC_PMA_CH2_CDR_ALIGN_REGISTER_SETTING_VALUE_251 := 1'b1;
    }

    if (PMA_CH2_FORCE_CDR_ALIGN_ENABLE == "DISABLE")
    {
        SC_PMA_CH2_FORCE_CDR_ALIGN_ENABLE_250 := 1'b0;
    }
    else if (PMA_CH2_FORCE_CDR_ALIGN_ENABLE == "ENABLE")
    {
        SC_PMA_CH2_FORCE_CDR_ALIGN_ENABLE_250 := 1'b1;
    }

    if (PMA_CH2_SELLC_REGISTER_SETTING_VALUE == "FALSE")
    {
        SC_PMA_CH2_SELLC_REGISTER_SETTING_VALUE_249 := 1'b0;
    }
    else if (PMA_CH2_SELLC_REGISTER_SETTING_VALUE == "TRUE")
    {
        SC_PMA_CH2_SELLC_REGISTER_SETTING_VALUE_249 := 1'b1;
    }

    if (PMA_CH2_SELLC_CONTROL_BY_REGISTER == "FALSE")
    {
        SC_PMA_CH2_SELLC_CONTROL_BY_REGISTER_248 := 1'b0;
    }
    else if (PMA_CH2_SELLC_CONTROL_BY_REGISTER == "TRUE")
    {
        SC_PMA_CH2_SELLC_CONTROL_BY_REGISTER_248 := 1'b1;
    }

    if (PMA_CH2_REG_PLLI_LDO_VREF_SETTING == "0_9V")
    {
        SC_PMA_CH2_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b100;
    }
    else if (PMA_CH2_REG_PLLI_LDO_VREF_SETTING == "0_95V")
    {
        SC_PMA_CH2_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b101;
    }
    else if (PMA_CH2_REG_PLLI_LDO_VREF_SETTING == "1_00V")
    {
        SC_PMA_CH2_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b110;
    }
    else if (PMA_CH2_REG_PLLI_LDO_VREF_SETTING == "1_05V")
    {
        SC_PMA_CH2_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b111;
    }
    else if (PMA_CH2_REG_PLLI_LDO_VREF_SETTING == "1_1V")
    {
        SC_PMA_CH2_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b000;
    }
    else if (PMA_CH2_REG_PLLI_LDO_VREF_SETTING == "1_15V")
    {
        SC_PMA_CH2_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b001;
    }
    else if (PMA_CH2_REG_PLLI_LDO_VREF_SETTING == "1_20V")
    {
        SC_PMA_CH2_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b010;
    }
    else if (PMA_CH2_REG_PLLI_LDO_VREF_SETTING == "1_25V")
    {
        SC_PMA_CH2_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b011;
    }

    if (PMA_CH2_REG_PLLI_LDO_BYPASS_CURRENT >= 0 && PMA_CH2_REG_PLLI_LDO_BYPASS_CURRENT <= 7)
    {
        SC_PMA_CH2_REG_PLLI_LDO_BYPASS_CURRENT_244_242 := to_unsigned(PMA_CH2_REG_PLLI_LDO_BYPASS_CURRENT,3) ^ 3'b100;  
    }

    if (PMA_CH2_REG_PLL_HSTEST_ENABLE == "DISABLE")
    {
        SC_PMA_CH2_REG_PLL_HSTEST_ENABLE_239 := 1'b0;
    }
    else if (PMA_CH2_REG_PLL_HSTEST_ENABLE == "ENABLE")
    {
        SC_PMA_CH2_REG_PLL_HSTEST_ENABLE_239 := 1'b1;
    }

    if (PMA_CH2_REG_PLL_ISNK_CURRENT_CONTROL == "5U")
    {
        SC_PMA_CH2_REG_PLL_ISNK_CURRENT_CONTROL_238_237 := 2'b00;
    }
    else if (PMA_CH2_REG_PLL_ISNK_CURRENT_CONTROL == "15U")
    {
        SC_PMA_CH2_REG_PLL_ISNK_CURRENT_CONTROL_238_237 := 2'b01;
    }
    else if (PMA_CH2_REG_PLL_ISNK_CURRENT_CONTROL == "25U")
    {
        SC_PMA_CH2_REG_PLL_ISNK_CURRENT_CONTROL_238_237 := 2'b10;
    }
    else if (PMA_CH2_REG_PLL_ISNK_CURRENT_CONTROL == "35U")
    {
        SC_PMA_CH2_REG_PLL_ISNK_CURRENT_CONTROL_238_237 := 2'b11;
    }

    if (PMA_CH2_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING >= 0 && PMA_CH2_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING <= 31)
    {
         SC_PMA_CH2_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232 := to_unsigned(PMA_CH2_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING,5);
    }

    if (PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING == "100PCT")
    {
        SC_PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b000;
    }
    else if (PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING == "89PCT")
    {
        SC_PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b001;
    }
    else if (PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING == "122PCT")
    {
        SC_PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b010;
    }
    else if (PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING == "111PCT")
    {
        SC_PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b011;
    }
    else if (PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING == "144PCT")
    {
        SC_PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b100;
    }
    else if (PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING == "133PCT")
    {
        SC_PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b101;
    }
    else if (PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING == "167PCT")
    {
        SC_PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b110;
    }
    else if (PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING == "156PCT")
    {
        SC_PMA_CH2_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b111;
    }

    if (PMA_CH2_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING >= 0 && PMA_CH2_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING <= 31)
    {
         SC_PMA_CH2_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224 := to_unsigned(PMA_CH2_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING,5);
    }

    if (PMA_CH2_REG_PLL_CP0_BIAS_CONTROL == "100PCT")
    {
        SC_PMA_CH2_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b000;
    }
    else if (PMA_CH2_REG_PLL_CP0_BIAS_CONTROL == "111PCT")
    {
        SC_PMA_CH2_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b001;
    }
    else if (PMA_CH2_REG_PLL_CP0_BIAS_CONTROL == "125PCT")
    {
        SC_PMA_CH2_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b010;
    }
    else if (PMA_CH2_REG_PLL_CP0_BIAS_CONTROL == "143PCT")
    {
        SC_PMA_CH2_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b011;
    }
    else if (PMA_CH2_REG_PLL_CP0_BIAS_CONTROL == "71PCT")
    {
        SC_PMA_CH2_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b100;
    }
    else if (PMA_CH2_REG_PLL_CP0_BIAS_CONTROL == "77PCT")
    {
        SC_PMA_CH2_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b101;
    }
    else if (PMA_CH2_REG_PLL_CP0_BIAS_CONTROL == "83PCT")
    {
        SC_PMA_CH2_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b110;
    }
    else if (PMA_CH2_REG_PLL_CP0_BIAS_CONTROL == "91PCT")
    {
        SC_PMA_CH2_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b111;
    }

    if (PMA_CH2_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING >= 0 && PMA_CH2_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING <= 31)
    {
         SC_PMA_CH2_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216 := to_unsigned(PMA_CH2_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING,5);
    }

    if (PMA_CH2_REG_PLL_CP1_BIAS_CONTROL == "100PCT")
    {
        SC_PMA_CH2_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b000;
    }
    else if (PMA_CH2_REG_PLL_CP1_BIAS_CONTROL == "111PCT")
    {
        SC_PMA_CH2_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b001;
    }
    else if (PMA_CH2_REG_PLL_CP1_BIAS_CONTROL == "125PCT")
    {
        SC_PMA_CH2_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b010;
    }
    else if (PMA_CH2_REG_PLL_CP1_BIAS_CONTROL == "143PCT")
    {
        SC_PMA_CH2_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b011;
    }
    else if (PMA_CH2_REG_PLL_CP1_BIAS_CONTROL == "71PCT")
    {
        SC_PMA_CH2_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b100;
    }
    else if (PMA_CH2_REG_PLL_CP1_BIAS_CONTROL == "77PCT")
    {
        SC_PMA_CH2_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b101;
    }
    else if (PMA_CH2_REG_PLL_CP1_BIAS_CONTROL == "83PCT")
    {
        SC_PMA_CH2_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b110;
    }
    else if (PMA_CH2_REG_PLL_CP1_BIAS_CONTROL == "91PCT")
    {
        SC_PMA_CH2_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b111;
    }

    if (PMA_CH2_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING >= 0 && PMA_CH2_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING <= 31)
    {
         SC_PMA_CH2_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208 := to_unsigned(PMA_CH2_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING,5);
    }

    if (PMA_CH2_REG_PLL_CP0_CURRENT_SETTING == "100PCT")
    {
        SC_PMA_CH2_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b000;
    }
    else if (PMA_CH2_REG_PLL_CP0_CURRENT_SETTING == "20PCT")
    {
        SC_PMA_CH2_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b001;
    }
    else if (PMA_CH2_REG_PLL_CP0_CURRENT_SETTING == "140PCT")
    {
        SC_PMA_CH2_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b010;
    }
    else if (PMA_CH2_REG_PLL_CP0_CURRENT_SETTING == "60PCT")
    {
        SC_PMA_CH2_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b011;
    }
    else if (PMA_CH2_REG_PLL_CP0_CURRENT_SETTING == "160PCT")
    {
        SC_PMA_CH2_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b100;
    }
    else if (PMA_CH2_REG_PLL_CP0_CURRENT_SETTING == "80PCT")
    {
        SC_PMA_CH2_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b101;
    }
    else if (PMA_CH2_REG_PLL_CP0_CURRENT_SETTING == "200PCT")
    {
        SC_PMA_CH2_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b110;
    }
    else if (PMA_CH2_REG_PLL_CP0_CURRENT_SETTING == "120PCT")
    {
        SC_PMA_CH2_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b111;
    }

    if (PMA_CH2_REG_PLL_CP1_CURRENT_SETTING == "100PCT")
    {
        SC_PMA_CH2_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b000;
    }
    else if (PMA_CH2_REG_PLL_CP1_CURRENT_SETTING == "20PCT")
    {
        SC_PMA_CH2_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b001;
    }
    else if (PMA_CH2_REG_PLL_CP1_CURRENT_SETTING == "140PCT")
    {
        SC_PMA_CH2_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b010;
    }
    else if (PMA_CH2_REG_PLL_CP1_CURRENT_SETTING == "60PCT")
    {
        SC_PMA_CH2_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b011;
    }
    else if (PMA_CH2_REG_PLL_CP1_CURRENT_SETTING == "160PCT")
    {
        SC_PMA_CH2_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b100;
    }
    else if (PMA_CH2_REG_PLL_CP1_CURRENT_SETTING == "80PCT")
    {
        SC_PMA_CH2_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b101;
    }
    else if (PMA_CH2_REG_PLL_CP1_CURRENT_SETTING == "200PCT")
    {
        SC_PMA_CH2_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b110;
    }
    else if (PMA_CH2_REG_PLL_CP1_CURRENT_SETTING == "120PCT")
    {
        SC_PMA_CH2_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b111;
    }

    if (PMA_CH2_REG_PLL_GM1_CURRENT_SETTING == "100PCT")
    {
        SC_PMA_CH2_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b000;
    }
    else if (PMA_CH2_REG_PLL_GM1_CURRENT_SETTING == "67PCT")
    {
        SC_PMA_CH2_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b001;
    }
    else if (PMA_CH2_REG_PLL_GM1_CURRENT_SETTING == "167PCT")
    {
        SC_PMA_CH2_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b010;
    }
    else if (PMA_CH2_REG_PLL_GM1_CURRENT_SETTING == "133PCT")
    {
        SC_PMA_CH2_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b011;
    }
    else if (PMA_CH2_REG_PLL_GM1_CURRENT_SETTING == "300PCT")
    {
        SC_PMA_CH2_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b100;
    }
    else if (PMA_CH2_REG_PLL_GM1_CURRENT_SETTING == "267PCT")
    {
        SC_PMA_CH2_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b101;
    }
    else if (PMA_CH2_REG_PLL_GM1_CURRENT_SETTING == "367PCT")
    {
        SC_PMA_CH2_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b110;
    }
    else if (PMA_CH2_REG_PLL_GM1_CURRENT_SETTING == "333PCT")
    {
        SC_PMA_CH2_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b111;
    }

    if (PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING == "100PCT")
    {
        SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b000;
    }
    else if (PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING == "20PCT")
    {
        SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b001;
    }
    else if (PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING == "140PCT")
    {
        SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b010;
    }
    else if (PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING == "60PCT")
    {
        SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b011;
    }
    else if (PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING == "160PCT")
    {
        SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b100;
    }
    else if (PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING == "80PCT")
    {
        SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b101;
    }
    else if (PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING == "200PCT")
    {
        SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b110;
    }
    else if (PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING == "120PCT")
    {
        SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b111;
    }

    if (PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "100PCT")
    {
        SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b000;
    }
    else if (PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "20PCT")
    {
        SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b001;
    }
    else if (PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "140PCT")
    {
        SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b010;
    }
    else if (PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "60PCT")
    {
        SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b011;
    }
    else if (PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "160PCT")
    {
        SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b100;
    }
    else if (PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "80PCT")
    {
        SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b101;
    }
    else if (PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "200PCT")
    {
        SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b110;
    }
    else if (PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "120PCT")
    {
        SC_PMA_CH2_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b111;
    }

    if (PMA_CH2_REG_PLL_REG_CUR == "100PCT")
    {
        SC_PMA_CH2_REG_PLL_REG_CUR_192_190 := 3'b000;
    }
    else if (PMA_CH2_REG_PLL_REG_CUR == "80PCT")
    {
        SC_PMA_CH2_REG_PLL_REG_CUR_192_190 := 3'b001;
    }
    else if (PMA_CH2_REG_PLL_REG_CUR == "140PCT")
    {
        SC_PMA_CH2_REG_PLL_REG_CUR_192_190 := 3'b010;
    }
    else if (PMA_CH2_REG_PLL_REG_CUR == "120PCT")
    {
        SC_PMA_CH2_REG_PLL_REG_CUR_192_190 := 3'b011;
    }
    else if (PMA_CH2_REG_PLL_REG_CUR == "180PCT")
    {
        SC_PMA_CH2_REG_PLL_REG_CUR_192_190 := 3'b100;
    }
    else if (PMA_CH2_REG_PLL_REG_CUR == "160PCT")
    {
        SC_PMA_CH2_REG_PLL_REG_CUR_192_190 := 3'b101;
    }
    else if (PMA_CH2_REG_PLL_REG_CUR == "220PCT")
    {
        SC_PMA_CH2_REG_PLL_REG_CUR_192_190 := 3'b110;
    }
    else if (PMA_CH2_REG_PLL_REG_CUR == "200PCT")
    {
        SC_PMA_CH2_REG_PLL_REG_CUR_192_190 := 3'b111;
    }

    if (PMA_CH2_REG_PLL_LCCUR == "DEFAULT")
    {
        SC_PMA_CH2_REG_PLL_LCCUR_189_187 := 3'b000;
    }
    else if (PMA_CH2_REG_PLL_LCCUR == "MINUS_1MA")
    {
        SC_PMA_CH2_REG_PLL_LCCUR_189_187 := 3'b001;
    }
    else if (PMA_CH2_REG_PLL_LCCUR == "2MA")
    {
        SC_PMA_CH2_REG_PLL_LCCUR_189_187 := 3'b010;
    }
    else if (PMA_CH2_REG_PLL_LCCUR == "1MA")
    {
        SC_PMA_CH2_REG_PLL_LCCUR_189_187 := 3'b011;
    }
    else if (PMA_CH2_REG_PLL_LCCUR == "4MA")
    {
        SC_PMA_CH2_REG_PLL_LCCUR_189_187 := 3'b100;
    }
    else if (PMA_CH2_REG_PLL_LCCUR == "3MA")
    {
        SC_PMA_CH2_REG_PLL_LCCUR_189_187 := 3'b101;
    }
    else if (PMA_CH2_REG_PLL_LCCUR == "6MA")
    {
        SC_PMA_CH2_REG_PLL_LCCUR_189_187 := 3'b110;
    }
    else if (PMA_CH2_REG_PLL_LCCUR == "5MA")
    {
        SC_PMA_CH2_REG_PLL_LCCUR_189_187 := 3'b111;
    }

    if (PMA_CH2_REG_PLL_LCOBAS == "100PCT")
    {
        SC_PMA_CH2_REG_PLL_LCOBAS_186_185 := 2'b00;
    }
    else if (PMA_CH2_REG_PLL_LCOBAS == "75PCT")
    {
        SC_PMA_CH2_REG_PLL_LCOBAS_186_185 := 2'b01;
    }
    else if (PMA_CH2_REG_PLL_LCOBAS == "150PCT")
    {
        SC_PMA_CH2_REG_PLL_LCOBAS_186_185 := 2'b10;
    }
    else if (PMA_CH2_REG_PLL_LCOBAS == "125PCT")
    {
        SC_PMA_CH2_REG_PLL_LCOBAS_186_185 := 2'b11;
    }

    if (PMA_CH2_REG_PLL_FB_CK_TEST_OUT_ENABLE == "DISABLE")
    {
        SC_PMA_CH2_REG_PLL_FB_CK_TEST_OUT_ENABLE_184 := 1'b0;
    }
    else if (PMA_CH2_REG_PLL_FB_CK_TEST_OUT_ENABLE == "ENABLE")
    {
        SC_PMA_CH2_REG_PLL_FB_CK_TEST_OUT_ENABLE_184 := 1'b1;
    }

    if (PMA_CH2_CDR_ALIGN_TIMER >= 0 && PMA_CH2_CDR_ALIGN_TIMER <= 3)
    {
        SC_PMA_CH2_CDR_ALIGN_TIMER_183_182 := to_unsigned(PMA_CH2_CDR_ALIGN_TIMER,2); 
    }

    if (PMA_CH2_CALIB_WAIT == 1024)
    {
        SC_PMA_CH2_CALIB_WAIT_181_180 := 2'b00;
    }
    else if (PMA_CH2_CALIB_WAIT == 2048)
    {
        SC_PMA_CH2_CALIB_WAIT_181_180 := 2'b01;
    }
    else if (PMA_CH2_CALIB_WAIT == 4096)
    {
        SC_PMA_CH2_CALIB_WAIT_181_180 := 2'b10;
    }
    else if (PMA_CH2_CALIB_WAIT == 512)
    {
        SC_PMA_CH2_CALIB_WAIT_181_180 := 2'b11;
    }

    if (PMA_CH2_CALIB_TIMER == 512)
    {
        SC_PMA_CH2_CALIB_TIMER_179_178 := 2'b00;
    }
    else if (PMA_CH2_CALIB_TIMER == 1024)
    {
        SC_PMA_CH2_CALIB_TIMER_179_178 := 2'b01;
    }
    else if (PMA_CH2_CALIB_TIMER == 2048)
    {
        SC_PMA_CH2_CALIB_TIMER_179_178 := 2'b10;
    }
    else if (PMA_CH2_CALIB_TIMER == 4096)
    {
        SC_PMA_CH2_CALIB_TIMER_179_178 := 2'b11;
    }

    if (PMA_CH2_TOT_RANGE >= 0 && PMA_CH2_TOT_RANGE <= 3)
    {
        SC_PMA_CH2_TOT_RANGE_177_176 := to_unsigned(PMA_CH2_TOT_RANGE,2);
    }

    if (PMA_CH2_SUB_RANGE >= 0 && PMA_CH2_SUB_RANGE <= 3)
    {
        SC_PMA_CH2_SUB_RANGE_175_174 := to_unsigned(PMA_CH2_SUB_RANGE,2);
    }

    if (PMA_CH2_OVLP >= 0 && PMA_CH2_OVLP <= 3)
    {
        SC_PMA_CH2_OVLP_173_172 := to_unsigned(PMA_CH2_OVLP,2); 
    }

    if (PMA_CH2_BIST_WAIT == 1024)
    {
        SC_PMA_CH2_BIST_WAIT_171_170 := 2'b00;
    }
    else if (PMA_CH2_BIST_WAIT == 2048)
    {
        SC_PMA_CH2_BIST_WAIT_171_170 := 2'b01;
    }
    else if (PMA_CH2_BIST_WAIT == 4096)
    {
        SC_PMA_CH2_BIST_WAIT_171_170 := 2'b10;
    }
    else if (PMA_CH2_BIST_WAIT == 512)
    {
        SC_PMA_CH2_BIST_WAIT_171_170 := 2'b11;
    }

    if (PMA_CH2_BIST_TIMER == 512)
    {
        SC_PMA_CH2_BIST_TIMER_169_168 := 2'b00;
    }
    else if (PMA_CH2_BIST_TIMER == 1024)
    {
        SC_PMA_CH2_BIST_TIMER_169_168 := 2'b01;
    }
    else if (PMA_CH2_BIST_TIMER == 2048)
    {
        SC_PMA_CH2_BIST_TIMER_169_168 := 2'b10;
    }
    else if (PMA_CH2_BIST_TIMER == 4096)
    {
        SC_PMA_CH2_BIST_TIMER_169_168 := 2'b11;
    }

    if (PMA_CH2_BAND_LB >= 0 && PMA_CH2_BAND_LB <= 7)
    {
         SC_PMA_CH2_BAND_LB_167_165 := to_unsigned(PMA_CH2_BAND_LB,3);
    }

    if (PMA_CH2_BAND_HB >= 0 && PMA_CH2_BAND_HB <= 31)
    {
         SC_PMA_CH2_BAND_HB_164_160 := to_unsigned(PMA_CH2_BAND_HB,5) ^ 5'b10000;
    }

    if (PMA_CH2_FREQ_LOCK_ACCURACY >= 0 && PMA_CH2_FREQ_LOCK_ACCURACY <= 7)
    {
        SC_PMA_CH2_FREQ_LOCK_ACCURACY_159_157 := to_unsigned(PMA_CH2_FREQ_LOCK_ACCURACY,3);  
    }

    if (PMA_CH2_REG_SET_LC_BAND >= 0 && PMA_CH2_REG_SET_LC_BAND <= 31)
    {
         SC_PMA_CH2_REG_SET_LC_BAND_156_152 := to_unsigned(PMA_CH2_REG_SET_LC_BAND,5);
    }

    if (PMA_CH2_REG_SET_VCODIV >= 0 && PMA_CH2_REG_SET_VCODIV <= 3)
    {
        SC_PMA_CH2_REG_SET_VCODIV_151_150 := to_unsigned(PMA_CH2_REG_SET_VCODIV,2);
    }

    if (PMA_CH2_REGISTER_SET_VCODIV_BAND_ENABLE == "DISABLE")
    {
        SC_PMA_CH2_REGISTER_SET_VCODIV_BAND_ENABLE_149 := 1'b0;
    }
    else if (PMA_CH2_REGISTER_SET_VCODIV_BAND_ENABLE == "ENABLE")
    {
        SC_PMA_CH2_REGISTER_SET_VCODIV_BAND_ENABLE_149 := 1'b1;
    }

    if (PMA_CH2_REG_SET_PLL_LOCK == "FALSE")
    {
        SC_PMA_CH2_REG_SET_PLL_LOCK_148 := 1'b0;
    }
    else if (PMA_CH2_REG_SET_PLL_LOCK == "TRUE")
    {
        SC_PMA_CH2_REG_SET_PLL_LOCK_148 := 1'b1;
    }

    if (PMA_CH2_REGISTER_SET_PLL_LOCK_ENABLE == "DISABLE")
    {
        SC_PMA_CH2_REGISTER_SET_PLL_LOCK_ENABLE_147 := 1'b0;
    }
    else if (PMA_CH2_REGISTER_SET_PLL_LOCK_ENABLE == "ENABLE")
    {
        SC_PMA_CH2_REGISTER_SET_PLL_LOCK_ENABLE_147 := 1'b1;
    }

    if (PMA_CH2_REG_SET_VCO_HI == "FALSE")
    {
        SC_PMA_CH2_REG_SET_VCO_HI_146 := 1'b0;
    }
    else if (PMA_CH2_REG_SET_VCO_HI == "TRUE")
    {
        SC_PMA_CH2_REG_SET_VCO_HI_146 := 1'b1;
    }

    if (PMA_CH2_REG_SET_VCO_LO == "FALSE")
    {
        SC_PMA_CH2_REG_SET_VCO_LO_145 := 1'b0;
    }
    else if (PMA_CH2_REG_SET_VCO_LO == "TRUE")
    {
        SC_PMA_CH2_REG_SET_VCO_LO_145 := 1'b1;
    }

    if (PMA_CH2_REGISTER_SET_VCO_HI_VCO_LO_ENABLE == "DISABLE")
    {
        SC_PMA_CH2_REGISTER_SET_VCO_HI_VCO_LO_ENABLE_144 := 1'b0;
    }
    else if (PMA_CH2_REGISTER_SET_VCO_HI_VCO_LO_ENABLE == "ENABLE")
    {
        SC_PMA_CH2_REGISTER_SET_VCO_HI_VCO_LO_ENABLE_144 := 1'b1;
    }

    if (PMA_CH2_FORCE_LC_PLL_LOOP_EN_H == "DISABLE")
    {
        SC_PMA_CH2_FORCE_LC_PLL_LOOP_EN_H_143 := 1'b0;
    }
    else if (PMA_CH2_FORCE_LC_PLL_LOOP_EN_H == "ENABLE")
    {
        SC_PMA_CH2_FORCE_LC_PLL_LOOP_EN_H_143 := 1'b1;
    }

    if (PMA_CH2_FORCE_LC_PLL_LOOP_EN_L == "DISABLE")
    {
        SC_PMA_CH2_FORCE_LC_PLL_LOOP_EN_L_142 := 1'b0;
    }
    else if (PMA_CH2_FORCE_LC_PLL_LOOP_EN_L == "ENABLE")
    {
        SC_PMA_CH2_FORCE_LC_PLL_LOOP_EN_L_142 := 1'b1;
    }

    if (PMA_CH2_VCO_DIV_CALI_BYPASS == "FALSE")
    {
        SC_PMA_CH2_VCO_DIV_CALI_BYPASS_141 := 1'b0;
    }
    else if (PMA_CH2_VCO_DIV_CALI_BYPASS == "TRUE")
    {
        SC_PMA_CH2_VCO_DIV_CALI_BYPASS_141 := 1'b1;
    }

    if (PMA_CH2_BIST_EN == "DISABLE")
    {
        SC_PMA_CH2_BIST_EN_140 := 1'b0;
    }
    else if (PMA_CH2_BIST_EN == "ENABLE")
    {
        SC_PMA_CH2_BIST_EN_140 := 1'b1;
    }

    if (PMA_CH2_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE == "DISABLE")
    {
        SC_PMA_CH2_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE_139 := 1'b0;
    }
    else if (PMA_CH2_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE == "ENABLE")
    {
        SC_PMA_CH2_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE_139 := 1'b1;
    }

    if (PMA_CH2_FREQ_DETECT_ENABLE_SOURCE == "DISABLE")
    {
        SC_PMA_CH2_FREQ_DETECT_ENABLE_SOURCE_138 := 1'b0;
    }
    else if (PMA_CH2_FREQ_DETECT_ENABLE_SOURCE == "ENABLE")
    {
        SC_PMA_CH2_FREQ_DETECT_ENABLE_SOURCE_138 := 1'b1;
    }

    if (PMA_CH2_REG_SET_DIVSEL_REF >= 0 && PMA_CH2_REG_SET_DIVSEL_REF <= 3)
    {
        SC_PMA_CH2_REG_SET_DIVSEL_REF_137_136 := to_unsigned(PMA_CH2_REG_SET_DIVSEL_REF,2);
    }

    if (PMA_CH2_REG_SET_DIVSEL45_FB == "FALSE")
    {
        SC_PMA_CH2_REG_SET_DIVSEL45_FB_135 := 1'b0;
    }
    else if (PMA_CH2_REG_SET_DIVSEL45_FB == "TRUE")
    {
        SC_PMA_CH2_REG_SET_DIVSEL45_FB_135 := 1'b1;
    }

    if (PMA_CH2_REG_SET_DIVSEL_FB >= 0 && PMA_CH2_REG_SET_DIVSEL_FB <= 7)
    {
         SC_PMA_CH2_REG_SET_DIVSEL_FB_134_132 := to_unsigned(PMA_CH2_REG_SET_DIVSEL_FB,3);
    }

    if (PMA_CH2_PLL_LOOP_EN_SETTING == "DISABLE")
    {
        SC_PMA_CH2_PLL_LOOP_EN_SETTING_131 := 1'b0;
    }
    else if (PMA_CH2_PLL_LOOP_EN_SETTING == "ENABLE")
    {
        SC_PMA_CH2_PLL_LOOP_EN_SETTING_131 := 1'b1;
    }

    if (PMA_CH2_REGISTER_SET_TXPLL_DIV_ENABLE == "DISABLE")
    {
        SC_PMA_CH2_REGISTER_SET_TXPLL_DIV_ENABLE_130 := 1'b0;
    }
    else if (PMA_CH2_REGISTER_SET_TXPLL_DIV_ENABLE == "ENABLE")
    {
        SC_PMA_CH2_REGISTER_SET_TXPLL_DIV_ENABLE_130 := 1'b1;
    }

    if (PMA_CH2_FORCE_RXPLL_RESET == "FALSE")
    {
        SC_PMA_CH2_FORCE_RXPLL_RESET_129 := 1'b0;
    }
    else if (PMA_CH2_FORCE_RXPLL_RESET == "TRUE")
    {
        SC_PMA_CH2_FORCE_RXPLL_RESET_129 := 1'b1;
    }

    if (PMA_CH2_FORCE_RXPLL_ON == "FALSE")
    {
        SC_PMA_CH2_FORCE_RXPLL_ON_128 := 1'b0;
    }
    else if (PMA_CH2_FORCE_RXPLL_ON == "TRUE")
    {
        SC_PMA_CH2_FORCE_RXPLL_ON_128 := 1'b1;
    }

    if (PMA_CH2_DPCK_DIV2 == "FALSE")
    {
        SC_PMA_CH2_DPCK_DIV2_126 := 1'b0;
    }
    else if (PMA_CH2_DPCK_DIV2 == "TRUE")
    {
        SC_PMA_CH2_DPCK_DIV2_126 := 1'b1;
    }

    if (PMA_CH2_LFO_SETTING >= 0 && PMA_CH2_LFO_SETTING <= 7)
    {
        SC_PMA_CH2_LFO_SETTING_122_120 := to_unsigned(PMA_CH2_LFO_SETTING,3);   
    }

    if (PMA_CH2_ALOS_COUNTER_CLOCK_SELECTION == "LOCAL")
    {
        SC_PMA_CH2_ALOS_COUNTER_CLOCK_SELECTION_119 := 1'b0;
    }
    else if (PMA_CH2_ALOS_COUNTER_CLOCK_SELECTION == "GLOBAL25M")
    {
        SC_PMA_CH2_ALOS_COUNTER_CLOCK_SELECTION_119 := 1'b1;
    }

    if (PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT == "100PCT")
    {
        SC_PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b000;
    }
    else if (PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT == "111PCT")
    {
        SC_PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b001;
    }
    else if (PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT == "125PCT")
    {
        SC_PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b010;
    }
    else if (PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT == "143PCT")
    {
        SC_PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b011;
    }
    else if (PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT == "71PCT")
    {
        SC_PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b100;
    }
    else if (PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT == "77PCT")
    {
        SC_PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b101;
    }
    else if (PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT == "83PCT")
    {
        SC_PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b110;
    }
    else if (PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT == "91PCT")
    {
        SC_PMA_CH2_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b111;
    }

    if (PMA_CH2_OOB_ENTER_DELAY_SETTING >= 0 && PMA_CH2_OOB_ENTER_DELAY_SETTING <= 3)
    {
        SC_PMA_CH2_OOB_ENTER_DELAY_SETTING_111_110 := to_unsigned(PMA_CH2_OOB_ENTER_DELAY_SETTING,2); 
    }

    if (PMA_CH2_ALOS_LOW_TO_HIGH_COUNTER_SETTING >= 0 && PMA_CH2_ALOS_LOW_TO_HIGH_COUNTER_SETTING <= 3)
    {
        SC_PMA_CH2_ALOS_LOW_TO_HIGH_COUNTER_SETTING_109_108 := to_unsigned(PMA_CH2_ALOS_LOW_TO_HIGH_COUNTER_SETTING,2) ^ 2'b01; 
    }

    if (PMA_CH2_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL == "DISABLE")
    {
        SC_PMA_CH2_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL_106 := 1'b0;
    }
    else if (PMA_CH2_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL == "ENABLE")
    {
        SC_PMA_CH2_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL_106 := 1'b1;
    }

    if (PMA_CH2_ALOS_EXIT_COUNTER_CLOCK_DIVIDER >= 0 && PMA_CH2_ALOS_EXIT_COUNTER_CLOCK_DIVIDER <= 3)
    {
        SC_PMA_CH2_ALOS_EXIT_COUNTER_CLOCK_DIVIDER_105_104 := to_unsigned(PMA_CH2_ALOS_EXIT_COUNTER_CLOCK_DIVIDER,2) ^ 2'b01; 
    }

    if (PMA_CH2_OOB_OSCILATER_FREQUENCY_SETTING >= 0 && PMA_CH2_OOB_OSCILATER_FREQUENCY_SETTING <= 3)
    {
        SC_PMA_CH2_OOB_OSCILATER_FREQUENCY_SETTING_103_102 := to_unsigned(PMA_CH2_OOB_OSCILATER_FREQUENCY_SETTING,2);   
    }

    if (PMA_CH2_FORCE_OOB == "FALSE")
    {
        SC_PMA_CH2_FORCE_OOB_101 := 1'b0;
    }
    else if (PMA_CH2_FORCE_OOB == "TRUE")
    {
        SC_PMA_CH2_FORCE_OOB_101 := 1'b1;
    }

    if (PMA_CH2_OOB_VTH_SET == "27MV")
    {
        SC_PMA_CH2_OOB_VTH_SET_100_96 := 5'b00111;
    }
    else if (PMA_CH2_OOB_VTH_SET == "30MV")
    {
        SC_PMA_CH2_OOB_VTH_SET_100_96 := 5'b00110;
    }
    else if (PMA_CH2_OOB_VTH_SET == "35MV")
    {
        SC_PMA_CH2_OOB_VTH_SET_100_96 := 5'b00100;
    }
    else if (PMA_CH2_OOB_VTH_SET == "42_5MV")
    {
        SC_PMA_CH2_OOB_VTH_SET_100_96 := 5'b00000;
    }
    else if (PMA_CH2_OOB_VTH_SET == "52MV")
    {
        SC_PMA_CH2_OOB_VTH_SET_100_96 := 5'b01000;
    }
    else if (PMA_CH2_OOB_VTH_SET == "68MV")
    {
        SC_PMA_CH2_OOB_VTH_SET_100_96 := 5'b11000;
    }

    if (PMA_CH2_FORCE_DET_FORCE_ALOS_LOW == "FALSE")
    {
        SC_PMA_CH2_FORCE_DET_FORCE_ALOS_LOW_95 := 1'b0;
    }
    else if (PMA_CH2_FORCE_DET_FORCE_ALOS_LOW == "TRUE")
    {
        SC_PMA_CH2_FORCE_DET_FORCE_ALOS_LOW_95 := 1'b1;
    }

    if (PMA_CH2_ALOS_THRESHOLD_VOLTAGE == "27MV")
    {
        SC_PMA_CH2_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b00111;
    }
    else if (PMA_CH2_ALOS_THRESHOLD_VOLTAGE == "30MV")
    {
        SC_PMA_CH2_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b00110;
    }
    else if (PMA_CH2_ALOS_THRESHOLD_VOLTAGE == "35MV")
    {
        SC_PMA_CH2_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b00100;
    }
    else if (PMA_CH2_ALOS_THRESHOLD_VOLTAGE == "42_5MV")
    {
        SC_PMA_CH2_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b00000;
    }
    else if (PMA_CH2_ALOS_THRESHOLD_VOLTAGE == "52MV")
    {
        SC_PMA_CH2_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b01000;
    }
    else if (PMA_CH2_ALOS_THRESHOLD_VOLTAGE == "68MV")
    {
        SC_PMA_CH2_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b11000;
    }

    if (PMA_CH2_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE >= 0 && PMA_CH2_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE <= 3)
    {
        SC_PMA_CH2_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE_89_88 := to_unsigned(PMA_CH2_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE,2); 
    }

    if (PMA_CH2_REGR_NEGATIVE_HYSTERESIS_SETTING == "100MV")
    {
        SC_PMA_CH2_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84 := 4'b0000;
    }
    else if (PMA_CH2_REGR_NEGATIVE_HYSTERESIS_SETTING == "75MV")
    {
        SC_PMA_CH2_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84 := 4'b0001;
    }
    else if (PMA_CH2_REGR_NEGATIVE_HYSTERESIS_SETTING == "50MV")
    {
        SC_PMA_CH2_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84 := 4'b0011;
    }
    else if (PMA_CH2_REGR_NEGATIVE_HYSTERESIS_SETTING == "25MV")
    {
        SC_PMA_CH2_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84 := 4'b0111;
    }
    else if (PMA_CH2_REGR_NEGATIVE_HYSTERESIS_SETTING == "0MV")
    {
        SC_PMA_CH2_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84 := 4'b1111;
    }

    if (PMA_CH2_REGL_POSITIVE_HYSTERESIS_SETTING == "100MV")
    {
        SC_PMA_CH2_REGL_POSITIVE_HYSTERESIS_SETTING_83_80 := 4'b0000;
    }
    else if (PMA_CH2_REGL_POSITIVE_HYSTERESIS_SETTING == "75MV")
    {
        SC_PMA_CH2_REGL_POSITIVE_HYSTERESIS_SETTING_83_80 := 4'b0001;
    }
    else if (PMA_CH2_REGL_POSITIVE_HYSTERESIS_SETTING == "50MV")
    {
        SC_PMA_CH2_REGL_POSITIVE_HYSTERESIS_SETTING_83_80 := 4'b0011;
    }
    else if (PMA_CH2_REGL_POSITIVE_HYSTERESIS_SETTING == "25MV")
    {
        SC_PMA_CH2_REGL_POSITIVE_HYSTERESIS_SETTING_83_80 := 4'b0111;
    }
    else if (PMA_CH2_REGL_POSITIVE_HYSTERESIS_SETTING == "0MV")
    {
        SC_PMA_CH2_REGL_POSITIVE_HYSTERESIS_SETTING_83_80 := 4'b1111;
    }

    if (PMA_CH2_REG_EN == "DISABLE")
    {
        SC_PMA_CH2_REG_EN_77 := 1'b0;
    }
    else if (PMA_CH2_REG_EN == "ENABLE")
    {
        SC_PMA_CH2_REG_EN_77 := 1'b1;
    }

    if (PMA_CH2_REGREF_SEL == "VREF")
    {
        SC_PMA_CH2_REGREF_SEL_76 := 1'b0;
    }
    else if (PMA_CH2_REGREF_SEL == "SELF_DC")
    {
        SC_PMA_CH2_REGREF_SEL_76 := 1'b1;
    }

    if (PMA_CH2_DC496 == "5MHZ")
    {
        SC_PMA_CH2_DC496_75_72 := 4'b0111;
    }
    else if (PMA_CH2_DC496 == "8MHZ")
    {
        SC_PMA_CH2_DC496_75_72 := 4'b0110;
    }
    else if (PMA_CH2_DC496 == "11_5MHZ")
    {
        SC_PMA_CH2_DC496_75_72 := 4'b0100;
    }
    else if (PMA_CH2_DC496 == "20_6MHZ")
    {
        SC_PMA_CH2_DC496_75_72 := 4'b0000;
    }
    else if (PMA_CH2_DC496 == "39_6MHZ")
    {
        SC_PMA_CH2_DC496_75_72 := 4'b1000;
    }

    if (PMA_CH2_EQ2_AC_VAR_SETTING == 255)
    {
        SC_PMA_CH2_EQ2_AC_VAR_SETTING_63_56 := 8'b00111100;
    }
    else if (PMA_CH2_EQ2_AC_VAR_SETTING == 254)
    {
        SC_PMA_CH2_EQ2_AC_VAR_SETTING_63_56 := 8'b00111101;
    }
    else if (PMA_CH2_EQ2_AC_VAR_SETTING == 252)
    {
        SC_PMA_CH2_EQ2_AC_VAR_SETTING_63_56 := 8'b00111111;
    }
    else if (PMA_CH2_EQ2_AC_VAR_SETTING == 248)
    {
        SC_PMA_CH2_EQ2_AC_VAR_SETTING_63_56 := 8'b00111011;
    }
    else if (PMA_CH2_EQ2_AC_VAR_SETTING == 243)
    {
        SC_PMA_CH2_EQ2_AC_VAR_SETTING_63_56 := 8'b00110000;
    }
    else if (PMA_CH2_EQ2_AC_VAR_SETTING == 240)
    {
        SC_PMA_CH2_EQ2_AC_VAR_SETTING_63_56 := 8'b00110011;
    }
    else if (PMA_CH2_EQ2_AC_VAR_SETTING == 227)
    {
        SC_PMA_CH2_EQ2_AC_VAR_SETTING_63_56 := 8'b00100000;
    }
    else if (PMA_CH2_EQ2_AC_VAR_SETTING == 224)
    {
        SC_PMA_CH2_EQ2_AC_VAR_SETTING_63_56 := 8'b00100011;
    }
    else if (PMA_CH2_EQ2_AC_VAR_SETTING == 195)
    {
        SC_PMA_CH2_EQ2_AC_VAR_SETTING_63_56 := 8'b00000000;
    }
    else if (PMA_CH2_EQ2_AC_VAR_SETTING == 192)
    {
        SC_PMA_CH2_EQ2_AC_VAR_SETTING_63_56 := 8'b00000011;
    }
    else if (PMA_CH2_EQ2_AC_VAR_SETTING == 131)
    {
        SC_PMA_CH2_EQ2_AC_VAR_SETTING_63_56 := 8'b01000000;
    }
    else if (PMA_CH2_EQ2_AC_VAR_SETTING == 128)
    {
        SC_PMA_CH2_EQ2_AC_VAR_SETTING_63_56 := 8'b01000011;
    }
    else if (PMA_CH2_EQ2_AC_VAR_SETTING == 3)
    {
        SC_PMA_CH2_EQ2_AC_VAR_SETTING_63_56 := 8'b11000000;
    }
    else if (PMA_CH2_EQ2_AC_VAR_SETTING == 0)
    {
        SC_PMA_CH2_EQ2_AC_VAR_SETTING_63_56 := 8'b11000011;
    }

    if (PMA_CH2_EQ2_AC_RES_SETTING >= 0 && PMA_CH2_EQ2_AC_RES_SETTING <= 31)
    {
         SC_PMA_CH2_EQ2_AC_RES_SETTING_52_48 := to_unsigned(PMA_CH2_EQ2_AC_RES_SETTING,5) ^ 5'b10101;
    }

    if (PMA_CH2_EQ2_DC_RESTOP_SETTING >= 0 && PMA_CH2_EQ2_DC_RESTOP_SETTING <= 3)
    {
        SC_PMA_CH2_EQ2_DC_RESTOP_SETTING_47_46 := to_unsigned(PMA_CH2_EQ2_DC_RESTOP_SETTING,2) ^ 2'b11;  
    }

    if (PMA_CH2_EQ1_DC_RESTOP_SETTING == 50)
    {
        SC_PMA_CH2_EQ1_DC_RESTOP_SETTING_43_40 := 4'b1000;
    }
    else if (PMA_CH2_EQ1_DC_RESTOP_SETTING == 52)
    {
        SC_PMA_CH2_EQ1_DC_RESTOP_SETTING_43_40 := 4'b1100;
    }
    else if (PMA_CH2_EQ1_DC_RESTOP_SETTING == 74)
    {
        SC_PMA_CH2_EQ1_DC_RESTOP_SETTING_43_40 := 4'b1111;
    }
    else if (PMA_CH2_EQ1_DC_RESTOP_SETTING == 60)
    {
        SC_PMA_CH2_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0000;
    }
    else if (PMA_CH2_EQ1_DC_RESTOP_SETTING == 61)
    {
        SC_PMA_CH2_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0010;
    }
    else if (PMA_CH2_EQ1_DC_RESTOP_SETTING == 81)
    {
        SC_PMA_CH2_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0011;
    }
    else if (PMA_CH2_EQ1_DC_RESTOP_SETTING == 71)
    {
        SC_PMA_CH2_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0100;
    }
    else if (PMA_CH2_EQ1_DC_RESTOP_SETTING == 92)
    {
        SC_PMA_CH2_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0101;
    }
    else if (PMA_CH2_EQ1_DC_RESTOP_SETTING == 78)
    {
        SC_PMA_CH2_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0110;
    }
    else if (PMA_CH2_EQ1_DC_RESTOP_SETTING == 107)
    {
        SC_PMA_CH2_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0111;
    }

    if (PMA_CH2_EQ1_AC_VAR_SETTING == 255)
    {
        SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32 := 8'b00011011;
    }
    else if (PMA_CH2_EQ1_AC_VAR_SETTING == 254)
    {
        SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32 := 8'b00011010;
    }
    else if (PMA_CH2_EQ1_AC_VAR_SETTING == 252)
    {
        SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32 := 8'b00011000;
    }
    else if (PMA_CH2_EQ1_AC_VAR_SETTING == 248)
    {
        SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32 := 8'b00011100;
    }
    else if (PMA_CH2_EQ1_AC_VAR_SETTING == 243)
    {
        SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32 := 8'b00010111;
    }
    else if (PMA_CH2_EQ1_AC_VAR_SETTING == 240)
    {
        SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32 := 8'b00010100;
    }
    else if (PMA_CH2_EQ1_AC_VAR_SETTING == 228)
    {
        SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32 := 8'b00000000;
    }
    else if (PMA_CH2_EQ1_AC_VAR_SETTING == 227)
    {
        SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32 := 8'b00000111;
    }
    else if (PMA_CH2_EQ1_AC_VAR_SETTING == 224)
    {
        SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32 := 8'b00000100;
    }
    else if (PMA_CH2_EQ1_AC_VAR_SETTING == 195)
    {
        SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32 := 8'b00100111;
    }
    else if (PMA_CH2_EQ1_AC_VAR_SETTING == 192)
    {
        SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32 := 8'b00100100;
    }
    else if (PMA_CH2_EQ1_AC_VAR_SETTING == 131)
    {
        SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32 := 8'b11100111;
    }
    else if (PMA_CH2_EQ1_AC_VAR_SETTING == 128)
    {
        SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32 := 8'b01100100;
    }
    else if (PMA_CH2_EQ1_AC_VAR_SETTING == 3)
    {
        SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32 := 8'b11100111;
    }
    else if (PMA_CH2_EQ1_AC_VAR_SETTING == 0)
    {
        SC_PMA_CH2_EQ1_AC_VAR_SETTING_39_32 := 8'b11100100;
    }

    if (PMA_CH2_EQ2_CURRENT_SETTING == 7)
    {
        SC_PMA_CH2_EQ2_CURRENT_SETTING_31_29 := 3'b110;
    }
    else if (PMA_CH2_EQ2_CURRENT_SETTING == 6)
    {
        SC_PMA_CH2_EQ2_CURRENT_SETTING_31_29 := 3'b111;
    }
    else if (PMA_CH2_EQ2_CURRENT_SETTING == 3)
    {
        SC_PMA_CH2_EQ2_CURRENT_SETTING_31_29 := 3'b010;
    }
    else if (PMA_CH2_EQ2_CURRENT_SETTING == 1)
    {
        SC_PMA_CH2_EQ2_CURRENT_SETTING_31_29 := 3'b000;
    }
    else if (PMA_CH2_EQ2_CURRENT_SETTING == 0)
    {
        SC_PMA_CH2_EQ2_CURRENT_SETTING_31_29 := 3'b001;
    }

    if (PMA_CH2_EQ1_AC_RES_SETTING >= 0 && PMA_CH2_EQ1_AC_RES_SETTING <= 31)
    {
         SC_PMA_CH2_EQ1_AC_RES_SETTING_28_24 := to_unsigned(PMA_CH2_EQ1_AC_RES_SETTING,5) ^ 5'b10011;
    }

    if (PMA_CH2_EQ1_CURRENT_SETTING == 15)
    {
        SC_PMA_CH2_EQ1_CURRENT_SETTING_19_16 := 4'b0000;
    }
    else if (PMA_CH2_EQ1_CURRENT_SETTING == 14)
    {
        SC_PMA_CH2_EQ1_CURRENT_SETTING_19_16 := 4'b0001;
    }
    else if (PMA_CH2_EQ1_CURRENT_SETTING == 11)
    {
        SC_PMA_CH2_EQ1_CURRENT_SETTING_19_16 := 4'b0100;
    }
    else if (PMA_CH2_EQ1_CURRENT_SETTING == 7)
    {
        SC_PMA_CH2_EQ1_CURRENT_SETTING_19_16 := 4'b1000;
    }
    else if (PMA_CH2_EQ1_CURRENT_SETTING == 4)
    {
        SC_PMA_CH2_EQ1_CURRENT_SETTING_19_16 := 4'b1011;
    }
    else if (PMA_CH2_EQ1_CURRENT_SETTING == 3)
    {
        SC_PMA_CH2_EQ1_CURRENT_SETTING_19_16 := 4'b1100;
    }
    else if (PMA_CH2_EQ1_CURRENT_SETTING == 1)
    {
        SC_PMA_CH2_EQ1_CURRENT_SETTING_19_16 := 4'b1110;
    }
    else if (PMA_CH2_EQ1_CURRENT_SETTING == 0)
    {
        SC_PMA_CH2_EQ1_CURRENT_SETTING_19_16 := 4'b1111;
    }

    if (PMA_CH2_RPLUS == 0)
    {
        SC_PMA_CH2_RPLUS_15_12 := 4'b0000;
    }
    else if (PMA_CH2_RPLUS == 1)
    {
        SC_PMA_CH2_RPLUS_15_12 := 4'b0001;
    }
    else if (PMA_CH2_RPLUS == 3)
    {
        SC_PMA_CH2_RPLUS_15_12 := 4'b0011;
    }
    else if (PMA_CH2_RPLUS == 7)
    {
        SC_PMA_CH2_RPLUS_15_12 := 4'b0111;
    }
    else if (PMA_CH2_RPLUS == 15)
    {
        SC_PMA_CH2_RPLUS_15_12 := 4'b1111;
    }

    if (PMA_CH2_RMINUS == 0)
    {
        SC_PMA_CH2_RMINUS_11_8 := 4'b0000;
    }
    else if (PMA_CH2_RMINUS == 1)
    {
        SC_PMA_CH2_RMINUS_11_8 := 4'b0001;
    }
    else if (PMA_CH2_RMINUS == 3)
    {
        SC_PMA_CH2_RMINUS_11_8 := 4'b0011;
    }
    else if (PMA_CH2_RMINUS == 7)
    {
        SC_PMA_CH2_RMINUS_11_8 := 4'b0111;
    }
    else if (PMA_CH2_RMINUS == 15)
    {
        SC_PMA_CH2_RMINUS_11_8 := 4'b1111;
    }

    if (PMA_CH2_RVALSET >= 0 && PMA_CH2_RVALSET <= 3)
    {
        SC_PMA_CH2_RVALSET_7_6 := to_unsigned(PMA_CH2_RVALSET,2) ^ 2'b01;
    }

    if (PMA_CH2_RTERM >= 0 && PMA_CH2_RTERM <= 3)
    {
        SC_PMA_CH2_RTERM_5_4 := to_unsigned(PMA_CH2_RTERM,2);  
    }

    if (PMA_CH2_DCFB_EN == "DISABLE")
    {
        SC_PMA_CH2_DCFB_EN_2 := 1'b0;
    }
    else if (PMA_CH2_DCFB_EN == "ENABLE")
    {
        SC_PMA_CH2_DCFB_EN_2 := 1'b1;
    }

    if (PMA_CH2_DCCOUP == "FALSE")
    {
        SC_PMA_CH2_DCCOUP_1 := 1'b1;
    }
    else if (PMA_CH2_DCCOUP == "TRUE")
    {
        SC_PMA_CH2_DCCOUP_1 := 1'b0;
    }

    if (PMA_CH2_3G == "FALSE")
    {
        SC_PMA_CH2_3G_0 := 1'b0;
    }
    else if (PMA_CH2_3G == "TRUE")
    {
        SC_PMA_CH2_3G_0 := 1'b1;
    }

    if (PMA_CH3_TXDATA_WIDTH == "8_BIT")
    {
        SC_PMA_CH3_TXDATA_WIDTH_381_380 := 2'b00;
    }
    else if (PMA_CH3_TXDATA_WIDTH == "10_BIT")
    {
        SC_PMA_CH3_TXDATA_WIDTH_381_380 := 2'b01;
    }
    else if (PMA_CH3_TXDATA_WIDTH == "16_BIT")
    {
        SC_PMA_CH3_TXDATA_WIDTH_381_380 := 2'b10;
    }
    else if (PMA_CH3_TXDATA_WIDTH == "20_BIT")
    {
        SC_PMA_CH3_TXDATA_WIDTH_381_380 := 2'b11;
    }

    if (PMA_CH3_TX_TESTPATTERN >= 0 && PMA_CH3_TX_TESTPATTERN <= 3)
    {
        SC_PMA_CH3_TX_TESTPATTERN_375_374 := to_unsigned(PMA_CH3_TX_TESTPATTERN,2);   
    }

    if (PMA_CH3_TESTPATTERN_O_ENABLE == "FALSE")
    {
        SC_PMA_CH3_TESTPATTERN_O_ENABLE_373 := 1'b0;
    }
    else if (PMA_CH3_TESTPATTERN_O_ENABLE == "TRUE")
    {
        SC_PMA_CH3_TESTPATTERN_O_ENABLE_373 := 1'b1;
    }

    if (PMA_CH3_DISABLE_BSMODE_DRVAMP == "FALSE")
    {
        SC_PMA_CH3_DISABLE_BSMODE_DRVAMP_372 := 1'b1;
    }
    else if (PMA_CH3_DISABLE_BSMODE_DRVAMP == "TRUE")
    {
        SC_PMA_CH3_DISABLE_BSMODE_DRVAMP_372 := 1'b0;
    }

    if (PMA_CH3_FORCE_BIST_ENABLE == "FALSE")
    {
        SC_PMA_CH3_FORCE_BIST_ENABLE_371 := 1'b0;
    }
    else if (PMA_CH3_FORCE_BIST_ENABLE == "TRUE")
    {
        SC_PMA_CH3_FORCE_BIST_ENABLE_371 := 1'b1;
    }

    if (PMA_CH3_FORCE_ELECTRICAL_IDLE == "FALSE")
    {
        SC_PMA_CH3_FORCE_ELECTRICAL_IDLE_370 := 1'b0;
    }
    else if (PMA_CH3_FORCE_ELECTRICAL_IDLE == "TRUE")
    {
        SC_PMA_CH3_FORCE_ELECTRICAL_IDLE_370 := 1'b1;
    }

    if (PMA_CH3_FORCE_RXDCT_ENABLE == "FALSE")
    {
        SC_PMA_CH3_FORCE_RXDCT_ENABLE_369 := 1'b0;
    }
    else if (PMA_CH3_FORCE_RXDCT_ENABLE == "TRUE")
    {
        SC_PMA_CH3_FORCE_RXDCT_ENABLE_369 := 1'b1;
    }

    if (PMA_CH3_FORCE_EXTLB_ENABLE == "FALSE")
    {
        SC_PMA_CH3_FORCE_EXTLB_ENABLE_368 := 1'b0;
    }
    else if (PMA_CH3_FORCE_EXTLB_ENABLE == "TRUE")
    {
        SC_PMA_CH3_FORCE_EXTLB_ENABLE_368 := 1'b1;
    }

    if (PMA_CH3_DISABLE_LANE_SYNC == "FALSE")
    {
        SC_PMA_CH3_DISABLE_LANE_SYNC_367 := 1'b0;
    }
    else if (PMA_CH3_DISABLE_LANE_SYNC == "TRUE")
    {
        SC_PMA_CH3_DISABLE_LANE_SYNC_367 := 1'b1;
    }

    if (PMA_CH3_DISABLE_ELECTRICAL_IDLE == "FALSE")
    {
        SC_PMA_CH3_DISABLE_ELECTRICAL_IDLE_366 := 1'b0;
    }
    else if (PMA_CH3_DISABLE_ELECTRICAL_IDLE == "TRUE")
    {
        SC_PMA_CH3_DISABLE_ELECTRICAL_IDLE_366 := 1'b1;
    }

    if (PMA_CH3_DISABLE_RXDCT_ENABLE == "FALSE")
    {
        SC_PMA_CH3_DISABLE_RXDCT_ENABLE_365 := 1'b0;
    }
    else if (PMA_CH3_DISABLE_RXDCT_ENABLE == "TRUE")
    {
        SC_PMA_CH3_DISABLE_RXDCT_ENABLE_365 := 1'b1;
    }

    if (PMA_CH3_DISABLE_EXTLB_ENABLE == "FALSE")
    {
        SC_PMA_CH3_DISABLE_EXTLB_ENABLE_364 := 1'b0;
    }
    else if (PMA_CH3_DISABLE_EXTLB_ENABLE == "TRUE")
    {
        SC_PMA_CH3_DISABLE_EXTLB_ENABLE_364 := 1'b1;
    }

    if (PMA_CH3_DISABLE_LOW_SPEED_PATH_ENABLE == "FALSE")
    {
        SC_PMA_CH3_DISABLE_LOW_SPEED_PATH_ENABLE_363 := 1'b0;
    }
    else if (PMA_CH3_DISABLE_LOW_SPEED_PATH_ENABLE == "TRUE")
    {
        SC_PMA_CH3_DISABLE_LOW_SPEED_PATH_ENABLE_363 := 1'b1;
    }

    if (PMA_CH3_FORCE_LANE_ENABLE == "FALSE")
    {
        SC_PMA_CH3_FORCE_LANE_ENABLE_362 := 1'b0;
    }
    else if (PMA_CH3_FORCE_LANE_ENABLE == "TRUE")
    {
        SC_PMA_CH3_FORCE_LANE_ENABLE_362 := 1'b1;
    }

    if (PMA_CH3_FORCE_LANE_RESETB_DISABLE == "FALSE")
    {
        SC_PMA_CH3_FORCE_LANE_RESETB_DISABLE_361 := 1'b0;
    }
    else if (PMA_CH3_FORCE_LANE_RESETB_DISABLE == "TRUE")
    {
        SC_PMA_CH3_FORCE_LANE_RESETB_DISABLE_361 := 1'b1;
    }

    if (PMA_CH3_RXDCT_LGBW_ENABLE == "FALSE")
    {
        SC_PMA_CH3_RXDCT_LGBW_ENABLE_359 := 1'b0;
    }
    else if (PMA_CH3_RXDCT_LGBW_ENABLE == "TRUE")
    {
        SC_PMA_CH3_RXDCT_LGBW_ENABLE_359 := 1'b1;
    }

    if (PMA_CH3_RXDCT_VTH == "MINUS_300MV")
    {
        SC_PMA_CH3_RXDCT_VTH_358_357 := 2'b00;
    }
    else if (PMA_CH3_RXDCT_VTH == "MINUS_375MV")
    {
        SC_PMA_CH3_RXDCT_VTH_358_357 := 2'b01;
    }
    else if (PMA_CH3_RXDCT_VTH == "MINUS_150MV")
    {
        SC_PMA_CH3_RXDCT_VTH_358_357 := 2'b10;
    }
    else if (PMA_CH3_RXDCT_VTH == "MINUS_225MV")
    {
        SC_PMA_CH3_RXDCT_VTH_358_357 := 2'b11;
    }

    if (PMA_CH3_DE_EMPHASIS_ADDITIONAL_CONTROL == "0DB")
    {
        SC_PMA_CH3_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355 := 2'b00;
    }
    else if (PMA_CH3_DE_EMPHASIS_ADDITIONAL_CONTROL == "0_7DB")
    {
        SC_PMA_CH3_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355 := 2'b01;
    }
    else if (PMA_CH3_DE_EMPHASIS_ADDITIONAL_CONTROL == "1_4DB")
    {
        SC_PMA_CH3_DE_EMPHASIS_ADDITIONAL_CONTROL_356_355 := 2'b11;
    }

    if (PMA_CH3_DRV_RTERM_CONTROL == "100PCT")
    {
        SC_PMA_CH3_DRV_RTERM_CONTROL_354_352 := 3'b000;
    }
    else if (PMA_CH3_DRV_RTERM_CONTROL == "95PCT")
    {
        SC_PMA_CH3_DRV_RTERM_CONTROL_354_352 := 3'b001;
    }
    else if (PMA_CH3_DRV_RTERM_CONTROL == "91PCT")
    {
        SC_PMA_CH3_DRV_RTERM_CONTROL_354_352 := 3'b010;
    }
    else if (PMA_CH3_DRV_RTERM_CONTROL == "87PCT")
    {
        SC_PMA_CH3_DRV_RTERM_CONTROL_354_352 := 3'b011;
    }
    else if (PMA_CH3_DRV_RTERM_CONTROL == "105PCT")
    {
        SC_PMA_CH3_DRV_RTERM_CONTROL_354_352 := 3'b100;
    }
    else if (PMA_CH3_DRV_RTERM_CONTROL == "111PCT")
    {
        SC_PMA_CH3_DRV_RTERM_CONTROL_354_352 := 3'b101;
    }
    else if (PMA_CH3_DRV_RTERM_CONTROL == "117PCT")
    {
        SC_PMA_CH3_DRV_RTERM_CONTROL_354_352 := 3'b110;
    }
    else if (PMA_CH3_DRV_RTERM_CONTROL == "highZ")
    {
        SC_PMA_CH3_DRV_RTERM_CONTROL_354_352 := 3'b111;
    }

    if (PMA_CH3_FDRV_AMP_CONTROL == "100PCT")
    {
        SC_PMA_CH3_FDRV_AMP_CONTROL_351_350 := 2'b00;
    }
    else if (PMA_CH3_FDRV_AMP_CONTROL == "92PCT")
    {
        SC_PMA_CH3_FDRV_AMP_CONTROL_351_350 := 2'b01;
    }
    else if (PMA_CH3_FDRV_AMP_CONTROL == "109PCT")
    {
        SC_PMA_CH3_FDRV_AMP_CONTROL_351_350 := 2'b10;
    }
    else if (PMA_CH3_FDRV_AMP_CONTROL == "120PCT")
    {
        SC_PMA_CH3_FDRV_AMP_CONTROL_351_350 := 2'b11;
    }

    if (PMA_CH3_PREPC_AMP_CONTROL == "100PCT")
    {
        SC_PMA_CH3_PREPC_AMP_CONTROL_349_348 := 2'b00;
    }
    else if (PMA_CH3_PREPC_AMP_CONTROL == "83PCT")
    {
        SC_PMA_CH3_PREPC_AMP_CONTROL_349_348 := 2'b01;
    }
    else if (PMA_CH3_PREPC_AMP_CONTROL == "133PCT")
    {
        SC_PMA_CH3_PREPC_AMP_CONTROL_349_348 := 2'b10;
    }
    else if (PMA_CH3_PREPC_AMP_CONTROL == "117PCT")
    {
        SC_PMA_CH3_PREPC_AMP_CONTROL_349_348 := 2'b11;
    }

    if (PMA_CH3_PREMC_AMP_CONTROL == "100PCT")
    {
        SC_PMA_CH3_PREMC_AMP_CONTROL_347_346 := 2'b00;
    }
    else if (PMA_CH3_PREMC_AMP_CONTROL == "83PCT")
    {
        SC_PMA_CH3_PREMC_AMP_CONTROL_347_346 := 2'b01;
    }
    else if (PMA_CH3_PREMC_AMP_CONTROL == "133PCT")
    {
        SC_PMA_CH3_PREMC_AMP_CONTROL_347_346 := 2'b10;
    }
    else if (PMA_CH3_PREMC_AMP_CONTROL == "117PCT")
    {
        SC_PMA_CH3_PREMC_AMP_CONTROL_347_346 := 2'b11;
    }

    if (PMA_CH3_SER_AMP_CONTROL == "100PCT")
    {
        SC_PMA_CH3_SER_AMP_CONTROL_345_344 := 2'b00;
    }
    else if (PMA_CH3_SER_AMP_CONTROL == "83PCT")
    {
        SC_PMA_CH3_SER_AMP_CONTROL_345_344 := 2'b01;
    }
    else if (PMA_CH3_SER_AMP_CONTROL == "133PCT")
    {
        SC_PMA_CH3_SER_AMP_CONTROL_345_344 := 2'b10;
    }
    else if (PMA_CH3_SER_AMP_CONTROL == "117PCT")
    {
        SC_PMA_CH3_SER_AMP_CONTROL_345_344 := 2'b11;
    }

    if (PMA_CH3_PFD_LOOP_RESISTOR_SETTING >= 0 && PMA_CH3_PFD_LOOP_RESISTOR_SETTING <= 15)
    {
        SC_PMA_CH3_PFD_LOOP_RESISTOR_SETTING_327_324 := to_unsigned(PMA_CH3_PFD_LOOP_RESISTOR_SETTING,4);  
    }

    if (PMA_CH3_PD_LOOP_RESISTOR_SETTING >= 0 && PMA_CH3_PD_LOOP_RESISTOR_SETTING <= 15)
    {
        SC_PMA_CH3_PD_LOOP_RESISTOR_SETTING_323_320 := to_unsigned(PMA_CH3_PD_LOOP_RESISTOR_SETTING,4);
    }

    if (PMA_CH3_CDR_TEST_OUT_SELECT == "FBCK")
    {
        SC_PMA_CH3_CDR_TEST_OUT_SELECT_319 := 1'b0;
    }
    else if (PMA_CH3_CDR_TEST_OUT_SELECT == "PD")
    {
        SC_PMA_CH3_CDR_TEST_OUT_SELECT_319 := 1'b1;
    }

    if (PMA_CH3_PI_DIV1_BP == "DISABLE")
    {
        SC_PMA_CH3_PI_DIV1_BP_318 := 1'b0;
    }
    else if (PMA_CH3_PI_DIV1_BP == "ENABLE")
    {
        SC_PMA_CH3_PI_DIV1_BP_318 := 1'b1;
    }

    if (PMA_CH3_PI_TEST_FOR_CKI == "FALSE")
    {
        SC_PMA_CH3_PI_TEST_FOR_CKI_317 := 1'b0;
    }
    else if (PMA_CH3_PI_TEST_FOR_CKI == "TRUE")
    {
        SC_PMA_CH3_PI_TEST_FOR_CKI_317 := 1'b1;
    }

    if (PMA_CH3_PI_CURRENT_SETTING == "100PCT")
    {
        SC_PMA_CH3_PI_CURRENT_SETTING_316_314 := 3'b000;
    }
    else if (PMA_CH3_PI_CURRENT_SETTING == "80PCT")
    {
        SC_PMA_CH3_PI_CURRENT_SETTING_316_314 := 3'b001;
    }
    else if (PMA_CH3_PI_CURRENT_SETTING == "140PCT")
    {
        SC_PMA_CH3_PI_CURRENT_SETTING_316_314 := 3'b010;
    }
    else if (PMA_CH3_PI_CURRENT_SETTING == "120PCT")
    {
        SC_PMA_CH3_PI_CURRENT_SETTING_316_314 := 3'b011;
    }
    else if (PMA_CH3_PI_CURRENT_SETTING == "160PCT")
    {
        SC_PMA_CH3_PI_CURRENT_SETTING_316_314 := 3'b100;
    }
    else if (PMA_CH3_PI_CURRENT_SETTING == "120PCTr")
    {
        SC_PMA_CH3_PI_CURRENT_SETTING_316_314 := 3'b101;
    }
    else if (PMA_CH3_PI_CURRENT_SETTING == "200PCT")
    {
        SC_PMA_CH3_PI_CURRENT_SETTING_316_314 := 3'b110;
    }
    else if (PMA_CH3_PI_CURRENT_SETTING == "180PCT")
    {
        SC_PMA_CH3_PI_CURRENT_SETTING_316_314 := 3'b111;
    }

    if (PMA_CH3_PI_FREQUENCY_SETTING >= 0 && PMA_CH3_PI_FREQUENCY_SETTING <= 3)
    {
        SC_PMA_CH3_PI_FREQUENCY_SETTING_313_312 := to_unsigned(PMA_CH3_PI_FREQUENCY_SETTING,2);  
    }

    if (PMA_CH3_TEST_OUT_SELECT_FOR_RCK == "FALSE")
    {
        SC_PMA_CH3_TEST_OUT_SELECT_FOR_RCK_311 := 1'b0;
    }
    else if (PMA_CH3_TEST_OUT_SELECT_FOR_RCK == "TRUE")
    {
        SC_PMA_CH3_TEST_OUT_SELECT_FOR_RCK_311 := 1'b1;
    }

    if (PMA_CH3_TEST_OUT_SELECT_SOURCE == "SLPI1UI")
    {
        SC_PMA_CH3_TEST_OUT_SELECT_SOURCE_310 := 1'b0;
    }
    else if (PMA_CH3_TEST_OUT_SELECT_SOURCE == "PD1")
    {
        SC_PMA_CH3_TEST_OUT_SELECT_SOURCE_310 := 1'b1;
    }

    if (PMA_CH3_TEST_DATA_OUT_SELECT_SOURCE == "DO")
    {
        SC_PMA_CH3_TEST_DATA_OUT_SELECT_SOURCE_309 := 1'b0;
    }
    else if (PMA_CH3_TEST_DATA_OUT_SELECT_SOURCE == "DE")
    {
        SC_PMA_CH3_TEST_DATA_OUT_SELECT_SOURCE_309 := 1'b1;
    }

    if (PMA_CH3_TEST_CK_OUT_SELECT_SOURCE == "DATA")
    {
        SC_PMA_CH3_TEST_CK_OUT_SELECT_SOURCE_308 := 1'b0;
    }
    else if (PMA_CH3_TEST_CK_OUT_SELECT_SOURCE == "CLOCK")
    {
        SC_PMA_CH3_TEST_CK_OUT_SELECT_SOURCE_308 := 1'b1;
    }

    if (PMA_CH3_ENABLE_SLIP1UI_MODULE == "DISABLE")
    {
        SC_PMA_CH3_ENABLE_SLIP1UI_MODULE_307 := 1'b0;
    }
    else if (PMA_CH3_ENABLE_SLIP1UI_MODULE == "ENABLE")
    {
        SC_PMA_CH3_ENABLE_SLIP1UI_MODULE_307 := 1'b1;
    }

    if (PMA_CH3_PN_SWAP_ENABLE == "DISABLE")
    {
        SC_PMA_CH3_PN_SWAP_ENABLE_306 := 1'b0;
    }
    else if (PMA_CH3_PN_SWAP_ENABLE == "ENABLE")
    {
        SC_PMA_CH3_PN_SWAP_ENABLE_306 := 1'b1;
    }

    if (PMA_CH3_SIPO_BIT_SETTING == "10_BIT")
    {
        SC_PMA_CH3_SIPO_BIT_SETTING_305_304 := 2'b00;
    }
    else if (PMA_CH3_SIPO_BIT_SETTING == "8_BIT")
    {
        SC_PMA_CH3_SIPO_BIT_SETTING_305_304 := 2'b01;
    }
    else if (PMA_CH3_SIPO_BIT_SETTING == "20_BIT")
    {
        SC_PMA_CH3_SIPO_BIT_SETTING_305_304 := 2'b10;
    }
    else if (PMA_CH3_SIPO_BIT_SETTING == "16_BIT")
    {
        SC_PMA_CH3_SIPO_BIT_SETTING_305_304 := 2'b11;
    }

    if (PMA_CH3_OOB_EN == "DISABLE")
    {
        SC_PMA_CH3_OOB_EN_303 := 1'b0;
    }
    else if (PMA_CH3_OOB_EN == "ENABLE")
    {
        SC_PMA_CH3_OOB_EN_303 := 1'b1;
    }

    if (PMA_CH3_ALOS_EN == "DISABLE")
    {
        SC_PMA_CH3_ALOS_EN_302 := 1'b0;
    }
    else if (PMA_CH3_ALOS_EN == "ENABLE")
    {
        SC_PMA_CH3_ALOS_EN_302 := 1'b1;
    }

    if (PMA_CH3_LFMODE == "HIGH")
    {
        SC_PMA_CH3_LFMODE_301 := 1'b0;
    }
    else if (PMA_CH3_LFMODE == "LOW")
    {
        SC_PMA_CH3_LFMODE_301 := 1'b1;
    }

    if (PMA_CH3_TSO_HS_SEL == "CDR")
    {
        SC_PMA_CH3_TSO_HS_SEL_300 := 1'b0;
    }
    else if (PMA_CH3_TSO_HS_SEL == "EQ")
    {
        SC_PMA_CH3_TSO_HS_SEL_300 := 1'b1;
    }

    if (PMA_CH3_LX_SELLC == "RING")
    {
        SC_PMA_CH3_LX_SELLC_295 := 1'b0;
    }
    else if (PMA_CH3_LX_SELLC == "LC")
    {
        SC_PMA_CH3_LX_SELLC_295 := 1'b1;
    }

    if (PMA_CH3_LX_RXPLL_DIVSEL45_FB == 4)
    {
        SC_PMA_CH3_LX_RXPLL_DIVSEL45_FB_287 := 1'b0;
    }
    else if (PMA_CH3_LX_RXPLL_DIVSEL45_FB == 5)
    {
        SC_PMA_CH3_LX_RXPLL_DIVSEL45_FB_287 := 1'b1;
    }

    if (PMA_CH3_LX_RXPLL_DIVSEL_FB == 2)
    {
        SC_PMA_CH3_LX_RXPLL_DIVSEL_FB_286_284 := 3'b000;
    }
    else if (PMA_CH3_LX_RXPLL_DIVSEL_FB == 4)
    {
        SC_PMA_CH3_LX_RXPLL_DIVSEL_FB_286_284 := 3'b001;
    }
    else if (PMA_CH3_LX_RXPLL_DIVSEL_FB == 5)
    {
        SC_PMA_CH3_LX_RXPLL_DIVSEL_FB_286_284 := 3'b010;
    }
    else if (PMA_CH3_LX_RXPLL_DIVSEL_FB == 8)
    {
        SC_PMA_CH3_LX_RXPLL_DIVSEL_FB_286_284 := 3'b101;
    }
    else if (PMA_CH3_LX_RXPLL_DIVSEL_FB == 10)
    {
        SC_PMA_CH3_LX_RXPLL_DIVSEL_FB_286_284 := 3'b110;
    }

    if (PMA_CH3_LX_RXPLL_DIVSEL_REF == 1)
    {
        SC_PMA_CH3_LX_RXPLL_DIVSEL_REF_283_282 := 2'b00;
    }
    else if (PMA_CH3_LX_RXPLL_DIVSEL_REF == 2)
    {
        SC_PMA_CH3_LX_RXPLL_DIVSEL_REF_283_282 := 2'b01;
    }
    else if (PMA_CH3_LX_RXPLL_DIVSEL_REF == 4)
    {
        SC_PMA_CH3_LX_RXPLL_DIVSEL_REF_283_282 := 2'b10;
    }

    if (PMA_CH3_PICODE >= 0 && PMA_CH3_PICODE <= 255)
    {
         SC_PMA_CH3_PICODE_279_272 := to_unsigned(PMA_CH3_PICODE,8);
    }

    if (PMA_CH3_RX_REFCK_SEL >= 0 && PMA_CH3_RX_REFCK_SEL <= 3)
    {
        SC_PMA_CH3_RX_REFCK_SEL_265_264 := to_unsigned(PMA_CH3_RX_REFCK_SEL,2) ^ 2'b10;  
    }

    if (PMA_CH3_PFDLPEN_REGISTER_CONTROL_ENABLE == "DISABLE")
    {
        SC_PMA_CH3_PFDLPEN_REGISTER_CONTROL_ENABLE_259 := 1'b0;
    }
    else if (PMA_CH3_PFDLPEN_REGISTER_CONTROL_ENABLE == "ENABLE")
    {
        SC_PMA_CH3_PFDLPEN_REGISTER_CONTROL_ENABLE_259 := 1'b1;
    }

    if (PMA_CH3_PFDLPEN_REGISTER_SETTING == "FALSE")
    {
        SC_PMA_CH3_PFDLPEN_REGISTER_SETTING_258 := 1'b0;
    }
    else if (PMA_CH3_PFDLPEN_REGISTER_SETTING == "TRUE")
    {
        SC_PMA_CH3_PFDLPEN_REGISTER_SETTING_258 := 1'b1;
    }

    if (PMA_CH3_PDLPEN_REGISTER_CONTROL_ENABLE == "DISABLE")
    {
        SC_PMA_CH3_PDLPEN_REGISTER_CONTROL_ENABLE_257 := 1'b0;
    }
    else if (PMA_CH3_PDLPEN_REGISTER_CONTROL_ENABLE == "ENABLE")
    {
        SC_PMA_CH3_PDLPEN_REGISTER_CONTROL_ENABLE_257 := 1'b1;
    }

    if (PMA_CH3_PDLPEN_REGISTER_SETTING == "FALSE")
    {
        SC_PMA_CH3_PDLPEN_REGISTER_SETTING_256 := 1'b0;
    }
    else if (PMA_CH3_PDLPEN_REGISTER_SETTING == "TRUE")
    {
        SC_PMA_CH3_PDLPEN_REGISTER_SETTING_256 := 1'b1;
    }

    if (PMA_CH3_DIV_CHANGE_ENABLE_DELAY_TIMER >= 0 && PMA_CH3_DIV_CHANGE_ENABLE_DELAY_TIMER <= 3)
    {
        SC_PMA_CH3_DIV_CHANGE_ENABLE_DELAY_TIMER_254_253 := to_unsigned(PMA_CH3_DIV_CHANGE_ENABLE_DELAY_TIMER,2);
    }

    if (PMA_CH3_DIV_CHANGE_ENABLE_SIGNAL_GATING == "FALSE")
    {
        SC_PMA_CH3_DIV_CHANGE_ENABLE_SIGNAL_GATING_252 := 1'b0;
    }
    else if (PMA_CH3_DIV_CHANGE_ENABLE_SIGNAL_GATING == "TRUE")
    {
        SC_PMA_CH3_DIV_CHANGE_ENABLE_SIGNAL_GATING_252 := 1'b1;
    }

    if (PMA_CH3_CDR_ALIGN_REGISTER_SETTING_VALUE == "FALSE")
    {
        SC_PMA_CH3_CDR_ALIGN_REGISTER_SETTING_VALUE_251 := 1'b0;
    }
    else if (PMA_CH3_CDR_ALIGN_REGISTER_SETTING_VALUE == "TRUE")
    {
        SC_PMA_CH3_CDR_ALIGN_REGISTER_SETTING_VALUE_251 := 1'b1;
    }

    if (PMA_CH3_FORCE_CDR_ALIGN_ENABLE == "DISABLE")
    {
        SC_PMA_CH3_FORCE_CDR_ALIGN_ENABLE_250 := 1'b0;
    }
    else if (PMA_CH3_FORCE_CDR_ALIGN_ENABLE == "ENABLE")
    {
        SC_PMA_CH3_FORCE_CDR_ALIGN_ENABLE_250 := 1'b1;
    }

    if (PMA_CH3_SELLC_REGISTER_SETTING_VALUE == "FALSE")
    {
        SC_PMA_CH3_SELLC_REGISTER_SETTING_VALUE_249 := 1'b0;
    }
    else if (PMA_CH3_SELLC_REGISTER_SETTING_VALUE == "TRUE")
    {
        SC_PMA_CH3_SELLC_REGISTER_SETTING_VALUE_249 := 1'b1;
    }

    if (PMA_CH3_SELLC_CONTROL_BY_REGISTER == "FALSE")
    {
        SC_PMA_CH3_SELLC_CONTROL_BY_REGISTER_248 := 1'b0;
    }
    else if (PMA_CH3_SELLC_CONTROL_BY_REGISTER == "TRUE")
    {
        SC_PMA_CH3_SELLC_CONTROL_BY_REGISTER_248 := 1'b1;
    }

    if (PMA_CH3_REG_PLLI_LDO_VREF_SETTING == "0_9V")
    {
        SC_PMA_CH3_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b100;
    }
    else if (PMA_CH3_REG_PLLI_LDO_VREF_SETTING == "0_95V")
    {
        SC_PMA_CH3_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b101;
    }
    else if (PMA_CH3_REG_PLLI_LDO_VREF_SETTING == "1_00V")
    {
        SC_PMA_CH3_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b110;
    }
    else if (PMA_CH3_REG_PLLI_LDO_VREF_SETTING == "1_05V")
    {
        SC_PMA_CH3_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b111;
    }
    else if (PMA_CH3_REG_PLLI_LDO_VREF_SETTING == "1_1V")
    {
        SC_PMA_CH3_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b000;
    }
    else if (PMA_CH3_REG_PLLI_LDO_VREF_SETTING == "1_15V")
    {
        SC_PMA_CH3_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b001;
    }
    else if (PMA_CH3_REG_PLLI_LDO_VREF_SETTING == "1_20V")
    {
        SC_PMA_CH3_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b010;
    }
    else if (PMA_CH3_REG_PLLI_LDO_VREF_SETTING == "1_25V")
    {
        SC_PMA_CH3_REG_PLLI_LDO_VREF_SETTING_247_245 := 3'b011;
    }

    if (PMA_CH3_REG_PLLI_LDO_BYPASS_CURRENT >= 0 && PMA_CH3_REG_PLLI_LDO_BYPASS_CURRENT <= 7)
    {
        SC_PMA_CH3_REG_PLLI_LDO_BYPASS_CURRENT_244_242 := to_unsigned(PMA_CH3_REG_PLLI_LDO_BYPASS_CURRENT,3) ^ 3'b100; 
    }

    if (PMA_CH3_REG_PLL_HSTEST_ENABLE == "DISABLE")
    {
        SC_PMA_CH3_REG_PLL_HSTEST_ENABLE_239 := 1'b0;
    }
    else if (PMA_CH3_REG_PLL_HSTEST_ENABLE == "ENABLE")
    {
        SC_PMA_CH3_REG_PLL_HSTEST_ENABLE_239 := 1'b1;
    }

    if (PMA_CH3_REG_PLL_ISNK_CURRENT_CONTROL == "5U")
    {
        SC_PMA_CH3_REG_PLL_ISNK_CURRENT_CONTROL_238_237 := 2'b00;
    }
    else if (PMA_CH3_REG_PLL_ISNK_CURRENT_CONTROL == "15U")
    {
        SC_PMA_CH3_REG_PLL_ISNK_CURRENT_CONTROL_238_237 := 2'b01;
    }
    else if (PMA_CH3_REG_PLL_ISNK_CURRENT_CONTROL == "25U")
    {
        SC_PMA_CH3_REG_PLL_ISNK_CURRENT_CONTROL_238_237 := 2'b10;
    }
    else if (PMA_CH3_REG_PLL_ISNK_CURRENT_CONTROL == "35U")
    {
        SC_PMA_CH3_REG_PLL_ISNK_CURRENT_CONTROL_238_237 := 2'b11;
    }

    if (PMA_CH3_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING >= 0 && PMA_CH3_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING <= 31)
    {
         SC_PMA_CH3_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING_236_232 := to_unsigned(PMA_CH3_REG_PLL_PFD_LOOP_CP0_CURRENT_SETTING,5);
    }

    if (PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING == "100PCT")
    {
        SC_PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b000;
    }
    else if (PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING == "89PCT")
    {
        SC_PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b001;
    }
    else if (PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING == "122PCT")
    {
        SC_PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b010;
    }
    else if (PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING == "111PCT")
    {
        SC_PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b011;
    }
    else if (PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING == "144PCT")
    {
        SC_PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b100;
    }
    else if (PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING == "133PCT")
    {
        SC_PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b101;
    }
    else if (PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING == "167PCT")
    {
        SC_PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b110;
    }
    else if (PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING == "156PCT")
    {
        SC_PMA_CH3_REG_PLL_PD_LOOP_PLLGM_SETTING_231_229 := 3'b111;
    }

    if (PMA_CH3_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING >= 0 && PMA_CH3_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING <= 31)
    {
         SC_PMA_CH3_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING_228_224 := to_unsigned(PMA_CH3_REG_PLL_PFD_LOOP_CP1_CURRENT_SETTING,5);
    }

    if (PMA_CH3_REG_PLL_CP0_BIAS_CONTROL == "100PCT")
    {
        SC_PMA_CH3_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b000;
    }
    else if (PMA_CH3_REG_PLL_CP0_BIAS_CONTROL == "111PCT")
    {
        SC_PMA_CH3_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b001;
    }
    else if (PMA_CH3_REG_PLL_CP0_BIAS_CONTROL == "125PCT")
    {
        SC_PMA_CH3_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b010;
    }
    else if (PMA_CH3_REG_PLL_CP0_BIAS_CONTROL == "143PCT")
    {
        SC_PMA_CH3_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b011;
    }
    else if (PMA_CH3_REG_PLL_CP0_BIAS_CONTROL == "71PCT")
    {
        SC_PMA_CH3_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b100;
    }
    else if (PMA_CH3_REG_PLL_CP0_BIAS_CONTROL == "77PCT")
    {
        SC_PMA_CH3_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b101;
    }
    else if (PMA_CH3_REG_PLL_CP0_BIAS_CONTROL == "83PCT")
    {
        SC_PMA_CH3_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b110;
    }
    else if (PMA_CH3_REG_PLL_CP0_BIAS_CONTROL == "91PCT")
    {
        SC_PMA_CH3_REG_PLL_CP0_BIAS_CONTROL_223_221 := 3'b111;
    }

    if (PMA_CH3_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING >= 0 && PMA_CH3_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING <= 31)
    {
         SC_PMA_CH3_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING_220_216 := to_unsigned(PMA_CH3_REG_PLL_PD_LOOP_CP0_CURRENT_SETTING,5);
    }

    if (PMA_CH3_REG_PLL_CP1_BIAS_CONTROL == "100PCT")
    {
        SC_PMA_CH3_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b000;
    }
    else if (PMA_CH3_REG_PLL_CP1_BIAS_CONTROL == "111PCT")
    {
        SC_PMA_CH3_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b001;
    }
    else if (PMA_CH3_REG_PLL_CP1_BIAS_CONTROL == "125PCT")
    {
        SC_PMA_CH3_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b010;
    }
    else if (PMA_CH3_REG_PLL_CP1_BIAS_CONTROL == "143PCT")
    {
        SC_PMA_CH3_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b011;
    }
    else if (PMA_CH3_REG_PLL_CP1_BIAS_CONTROL == "71PCT")
    {
        SC_PMA_CH3_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b100;
    }
    else if (PMA_CH3_REG_PLL_CP1_BIAS_CONTROL == "77PCT")
    {
        SC_PMA_CH3_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b101;
    }
    else if (PMA_CH3_REG_PLL_CP1_BIAS_CONTROL == "83PCT")
    {
        SC_PMA_CH3_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b110;
    }
    else if (PMA_CH3_REG_PLL_CP1_BIAS_CONTROL == "91PCT")
    {
        SC_PMA_CH3_REG_PLL_CP1_BIAS_CONTROL_215_213 := 3'b111;
    }

    if (PMA_CH3_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING >= 0 && PMA_CH3_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING <= 31)
    {
         SC_PMA_CH3_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING_212_208 := to_unsigned(PMA_CH3_REG_PLL_PD_LOOP_CP1_CURRENT_SETTING,5);
    }

    if (PMA_CH3_REG_PLL_CP0_CURRENT_SETTING == "100PCT")
    {
        SC_PMA_CH3_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b000;
    }
    else if (PMA_CH3_REG_PLL_CP0_CURRENT_SETTING == "20PCT")
    {
        SC_PMA_CH3_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b001;
    }
    else if (PMA_CH3_REG_PLL_CP0_CURRENT_SETTING == "140PCT")
    {
        SC_PMA_CH3_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b010;
    }
    else if (PMA_CH3_REG_PLL_CP0_CURRENT_SETTING == "60PCT")
    {
        SC_PMA_CH3_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b011;
    }
    else if (PMA_CH3_REG_PLL_CP0_CURRENT_SETTING == "160PCT")
    {
        SC_PMA_CH3_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b100;
    }
    else if (PMA_CH3_REG_PLL_CP0_CURRENT_SETTING == "80PCT")
    {
        SC_PMA_CH3_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b101;
    }
    else if (PMA_CH3_REG_PLL_CP0_CURRENT_SETTING == "200PCT")
    {
        SC_PMA_CH3_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b110;
    }
    else if (PMA_CH3_REG_PLL_CP0_CURRENT_SETTING == "120PCT")
    {
        SC_PMA_CH3_REG_PLL_CP0_CURRENT_SETTING_207_205 := 3'b111;
    }

    if (PMA_CH3_REG_PLL_CP1_CURRENT_SETTING == "100PCT")
    {
        SC_PMA_CH3_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b000;
    }
    else if (PMA_CH3_REG_PLL_CP1_CURRENT_SETTING == "20PCT")
    {
        SC_PMA_CH3_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b001;
    }
    else if (PMA_CH3_REG_PLL_CP1_CURRENT_SETTING == "140PCT")
    {
        SC_PMA_CH3_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b010;
    }
    else if (PMA_CH3_REG_PLL_CP1_CURRENT_SETTING == "60PCT")
    {
        SC_PMA_CH3_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b011;
    }
    else if (PMA_CH3_REG_PLL_CP1_CURRENT_SETTING == "160PCT")
    {
        SC_PMA_CH3_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b100;
    }
    else if (PMA_CH3_REG_PLL_CP1_CURRENT_SETTING == "80PCT")
    {
        SC_PMA_CH3_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b101;
    }
    else if (PMA_CH3_REG_PLL_CP1_CURRENT_SETTING == "200PCT")
    {
        SC_PMA_CH3_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b110;
    }
    else if (PMA_CH3_REG_PLL_CP1_CURRENT_SETTING == "120PCT")
    {
        SC_PMA_CH3_REG_PLL_CP1_CURRENT_SETTING_204_202 := 3'b111;
    }

    if (PMA_CH3_REG_PLL_GM1_CURRENT_SETTING == "100PCT")
    {
        SC_PMA_CH3_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b000;
    }
    else if (PMA_CH3_REG_PLL_GM1_CURRENT_SETTING == "67PCT")
    {
        SC_PMA_CH3_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b001;
    }
    else if (PMA_CH3_REG_PLL_GM1_CURRENT_SETTING == "167PCT")
    {
        SC_PMA_CH3_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b010;
    }
    else if (PMA_CH3_REG_PLL_GM1_CURRENT_SETTING == "133PCT")
    {
        SC_PMA_CH3_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b011;
    }
    else if (PMA_CH3_REG_PLL_GM1_CURRENT_SETTING == "300PCT")
    {
        SC_PMA_CH3_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b100;
    }
    else if (PMA_CH3_REG_PLL_GM1_CURRENT_SETTING == "267PCT")
    {
        SC_PMA_CH3_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b101;
    }
    else if (PMA_CH3_REG_PLL_GM1_CURRENT_SETTING == "367PCT")
    {
        SC_PMA_CH3_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b110;
    }
    else if (PMA_CH3_REG_PLL_GM1_CURRENT_SETTING == "333PCT")
    {
        SC_PMA_CH3_REG_PLL_GM1_CURRENT_SETTING_201_199 := 3'b111;
    }

    if (PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING == "100PCT")
    {
        SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b000;
    }
    else if (PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING == "20PCT")
    {
        SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b001;
    }
    else if (PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING == "140PCT")
    {
        SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b010;
    }
    else if (PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING == "60PCT")
    {
        SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b011;
    }
    else if (PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING == "160PCT")
    {
        SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b100;
    }
    else if (PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING == "80PCT")
    {
        SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b101;
    }
    else if (PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING == "200PCT")
    {
        SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b110;
    }
    else if (PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING == "120PCT")
    {
        SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_198_196 := 3'b111;
    }

    if (PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "100PCT")
    {
        SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b000;
    }
    else if (PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "20PCT")
    {
        SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b001;
    }
    else if (PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "140PCT")
    {
        SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b010;
    }
    else if (PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "60PCT")
    {
        SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b011;
    }
    else if (PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "160PCT")
    {
        SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b100;
    }
    else if (PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "80PCT")
    {
        SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b101;
    }
    else if (PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "200PCT")
    {
        SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b110;
    }
    else if (PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW == "120PCT")
    {
        SC_PMA_CH3_REG_PLL_LC_BF2_CURRENT_SETTING_LOW_195_193 := 3'b111;
    }

    if (PMA_CH3_REG_PLL_REG_CUR == "100PCT")
    {
        SC_PMA_CH3_REG_PLL_REG_CUR_192_190 := 3'b000;
    }
    else if (PMA_CH3_REG_PLL_REG_CUR == "80PCT")
    {
        SC_PMA_CH3_REG_PLL_REG_CUR_192_190 := 3'b001;
    }
    else if (PMA_CH3_REG_PLL_REG_CUR == "140PCT")
    {
        SC_PMA_CH3_REG_PLL_REG_CUR_192_190 := 3'b010;
    }
    else if (PMA_CH3_REG_PLL_REG_CUR == "120PCT")
    {
        SC_PMA_CH3_REG_PLL_REG_CUR_192_190 := 3'b011;
    }
    else if (PMA_CH3_REG_PLL_REG_CUR == "180PCT")
    {
        SC_PMA_CH3_REG_PLL_REG_CUR_192_190 := 3'b100;
    }
    else if (PMA_CH3_REG_PLL_REG_CUR == "160PCT")
    {
        SC_PMA_CH3_REG_PLL_REG_CUR_192_190 := 3'b101;
    }
    else if (PMA_CH3_REG_PLL_REG_CUR == "220PCT")
    {
        SC_PMA_CH3_REG_PLL_REG_CUR_192_190 := 3'b110;
    }
    else if (PMA_CH3_REG_PLL_REG_CUR == "200PCT")
    {
        SC_PMA_CH3_REG_PLL_REG_CUR_192_190 := 3'b111;
    }

    if (PMA_CH3_REG_PLL_LCCUR == "DEFAULT")
    {
        SC_PMA_CH3_REG_PLL_LCCUR_189_187 := 3'b000;
    }
    else if (PMA_CH3_REG_PLL_LCCUR == "MINUS_1MA")
    {
        SC_PMA_CH3_REG_PLL_LCCUR_189_187 := 3'b001;
    }
    else if (PMA_CH3_REG_PLL_LCCUR == "2MA")
    {
        SC_PMA_CH3_REG_PLL_LCCUR_189_187 := 3'b010;
    }
    else if (PMA_CH3_REG_PLL_LCCUR == "1MA")
    {
        SC_PMA_CH3_REG_PLL_LCCUR_189_187 := 3'b011;
    }
    else if (PMA_CH3_REG_PLL_LCCUR == "4MA")
    {
        SC_PMA_CH3_REG_PLL_LCCUR_189_187 := 3'b100;
    }
    else if (PMA_CH3_REG_PLL_LCCUR == "3MA")
    {
        SC_PMA_CH3_REG_PLL_LCCUR_189_187 := 3'b101;
    }
    else if (PMA_CH3_REG_PLL_LCCUR == "6MA")
    {
        SC_PMA_CH3_REG_PLL_LCCUR_189_187 := 3'b110;
    }
    else if (PMA_CH3_REG_PLL_LCCUR == "5MA")
    {
        SC_PMA_CH3_REG_PLL_LCCUR_189_187 := 3'b111;
    }

    if (PMA_CH3_REG_PLL_LCOBAS == "100PCT")
    {
        SC_PMA_CH3_REG_PLL_LCOBAS_186_185 := 2'b00;
    }
    else if (PMA_CH3_REG_PLL_LCOBAS == "75PCT")
    {
        SC_PMA_CH3_REG_PLL_LCOBAS_186_185 := 2'b01;
    }
    else if (PMA_CH3_REG_PLL_LCOBAS == "150PCT")
    {
        SC_PMA_CH3_REG_PLL_LCOBAS_186_185 := 2'b10;
    }
    else if (PMA_CH3_REG_PLL_LCOBAS == "125PCT")
    {
        SC_PMA_CH3_REG_PLL_LCOBAS_186_185 := 2'b11;
    }

    if (PMA_CH3_REG_PLL_FB_CK_TEST_OUT_ENABLE == "DISABLE")
    {
        SC_PMA_CH3_REG_PLL_FB_CK_TEST_OUT_ENABLE_184 := 1'b0;
    }
    else if (PMA_CH3_REG_PLL_FB_CK_TEST_OUT_ENABLE == "ENABLE")
    {
        SC_PMA_CH3_REG_PLL_FB_CK_TEST_OUT_ENABLE_184 := 1'b1;
    }

    if (PMA_CH3_CDR_ALIGN_TIMER >= 0 && PMA_CH3_CDR_ALIGN_TIMER <= 3)
    {
        SC_PMA_CH3_CDR_ALIGN_TIMER_183_182 := to_unsigned(PMA_CH3_CDR_ALIGN_TIMER,2); 
    }

    if (PMA_CH3_CALIB_WAIT == 1024)
    {
        SC_PMA_CH3_CALIB_WAIT_181_180 := 2'b00;
    }
    else if (PMA_CH3_CALIB_WAIT == 2048)
    {
        SC_PMA_CH3_CALIB_WAIT_181_180 := 2'b01;
    }
    else if (PMA_CH3_CALIB_WAIT == 4096)
    {
        SC_PMA_CH3_CALIB_WAIT_181_180 := 2'b10;
    }
    else if (PMA_CH3_CALIB_WAIT == 512)
    {
        SC_PMA_CH3_CALIB_WAIT_181_180 := 2'b11;
    }

    if (PMA_CH3_CALIB_TIMER == 512)
    {
        SC_PMA_CH3_CALIB_TIMER_179_178 := 2'b00;
    }
    else if (PMA_CH3_CALIB_TIMER == 1024)
    {
        SC_PMA_CH3_CALIB_TIMER_179_178 := 2'b01;
    }
    else if (PMA_CH3_CALIB_TIMER == 2048)
    {
        SC_PMA_CH3_CALIB_TIMER_179_178 := 2'b10;
    }
    else if (PMA_CH3_CALIB_TIMER == 4096)
    {
        SC_PMA_CH3_CALIB_TIMER_179_178 := 2'b11;
    }

    if (PMA_CH3_TOT_RANGE >= 0 && PMA_CH3_TOT_RANGE <= 3)
    {
        SC_PMA_CH3_TOT_RANGE_177_176 := to_unsigned(PMA_CH3_TOT_RANGE,2); 
    }

    if (PMA_CH3_SUB_RANGE >= 0 && PMA_CH3_SUB_RANGE <= 3)
    {
        SC_PMA_CH3_SUB_RANGE_175_174 := to_unsigned(PMA_CH3_SUB_RANGE,2);   
    }

    if (PMA_CH3_OVLP >= 0 && PMA_CH3_OVLP <= 3)
    {
        SC_PMA_CH3_OVLP_173_172 := to_unsigned(PMA_CH3_OVLP,2); 
    }

    if (PMA_CH3_BIST_WAIT == 1024)
    {
        SC_PMA_CH3_BIST_WAIT_171_170 := 2'b00;
    }
    else if (PMA_CH3_BIST_WAIT == 2048)
    {
        SC_PMA_CH3_BIST_WAIT_171_170 := 2'b01;
    }
    else if (PMA_CH3_BIST_WAIT == 4096)
    {
        SC_PMA_CH3_BIST_WAIT_171_170 := 2'b10;
    }
    else if (PMA_CH3_BIST_WAIT == 512)
    {
        SC_PMA_CH3_BIST_WAIT_171_170 := 2'b11;
    }

    if (PMA_CH3_BIST_TIMER == 512)
    {
        SC_PMA_CH3_BIST_TIMER_169_168 := 2'b00;
    }
    else if (PMA_CH3_BIST_TIMER == 1024)
    {
        SC_PMA_CH3_BIST_TIMER_169_168 := 2'b01;
    }
    else if (PMA_CH3_BIST_TIMER == 2048)
    {
        SC_PMA_CH3_BIST_TIMER_169_168 := 2'b10;
    }
    else if (PMA_CH3_BIST_TIMER == 4096)
    {
        SC_PMA_CH3_BIST_TIMER_169_168 := 2'b11;
    }

    if (PMA_CH3_BAND_LB >= 0 && PMA_CH3_BAND_LB <= 7)
    {
         SC_PMA_CH3_BAND_LB_167_165 := to_unsigned(PMA_CH3_BAND_LB,3);
    }

    if (PMA_CH3_BAND_HB >= 0 && PMA_CH3_BAND_HB <= 31)
    {
         SC_PMA_CH3_BAND_HB_164_160 := to_unsigned(PMA_CH3_BAND_HB,5) ^ 5'b10000;
    }

    if (PMA_CH3_FREQ_LOCK_ACCURACY >= 0 && PMA_CH3_FREQ_LOCK_ACCURACY <= 7)
    {
        SC_PMA_CH3_FREQ_LOCK_ACCURACY_159_157 := to_unsigned(PMA_CH3_FREQ_LOCK_ACCURACY,3);   
    }

    if (PMA_CH3_REG_SET_LC_BAND >= 0 && PMA_CH3_REG_SET_LC_BAND <= 31)
    {
         SC_PMA_CH3_REG_SET_LC_BAND_156_152 := to_unsigned(PMA_CH3_REG_SET_LC_BAND,5);
    }

    if (PMA_CH3_REG_SET_VCODIV >= 0 && PMA_CH3_REG_SET_VCODIV <= 3)
    {
        SC_PMA_CH3_REG_SET_VCODIV_151_150 := to_unsigned(PMA_CH3_REG_SET_VCODIV,2);   
    }

    if (PMA_CH3_REGISTER_SET_VCODIV_BAND_ENABLE == "DISABLE")
    {
        SC_PMA_CH3_REGISTER_SET_VCODIV_BAND_ENABLE_149 := 1'b0;
    }
    else if (PMA_CH3_REGISTER_SET_VCODIV_BAND_ENABLE == "ENABLE")
    {
        SC_PMA_CH3_REGISTER_SET_VCODIV_BAND_ENABLE_149 := 1'b1;
    }

    if (PMA_CH3_REG_SET_PLL_LOCK == "FALSE")
    {
        SC_PMA_CH3_REG_SET_PLL_LOCK_148 := 1'b0;
    }
    else if (PMA_CH3_REG_SET_PLL_LOCK == "TRUE")
    {
        SC_PMA_CH3_REG_SET_PLL_LOCK_148 := 1'b1;
    }

    if (PMA_CH3_REGISTER_SET_PLL_LOCK_ENABLE == "DISABLE")
    {
        SC_PMA_CH3_REGISTER_SET_PLL_LOCK_ENABLE_147 := 1'b0;
    }
    else if (PMA_CH3_REGISTER_SET_PLL_LOCK_ENABLE == "ENABLE")
    {
        SC_PMA_CH3_REGISTER_SET_PLL_LOCK_ENABLE_147 := 1'b1;
    }

    if (PMA_CH3_REG_SET_VCO_HI == "FALSE")
    {
        SC_PMA_CH3_REG_SET_VCO_HI_146 := 1'b0;
    }
    else if (PMA_CH3_REG_SET_VCO_HI == "TRUE")
    {
        SC_PMA_CH3_REG_SET_VCO_HI_146 := 1'b1;
    }

    if (PMA_CH3_REG_SET_VCO_LO == "FALSE")
    {
        SC_PMA_CH3_REG_SET_VCO_LO_145 := 1'b0;
    }
    else if (PMA_CH3_REG_SET_VCO_LO == "TRUE")
    {
        SC_PMA_CH3_REG_SET_VCO_LO_145 := 1'b1;
    }

    if (PMA_CH3_REGISTER_SET_VCO_HI_VCO_LO_ENABLE == "DISABLE")
    {
        SC_PMA_CH3_REGISTER_SET_VCO_HI_VCO_LO_ENABLE_144 := 1'b0;
    }
    else if (PMA_CH3_REGISTER_SET_VCO_HI_VCO_LO_ENABLE == "ENABLE")
    {
        SC_PMA_CH3_REGISTER_SET_VCO_HI_VCO_LO_ENABLE_144 := 1'b1;
    }

    if (PMA_CH3_FORCE_LC_PLL_LOOP_EN_H == "DISABLE")
    {
        SC_PMA_CH3_FORCE_LC_PLL_LOOP_EN_H_143 := 1'b0;
    }
    else if (PMA_CH3_FORCE_LC_PLL_LOOP_EN_H == "ENABLE")
    {
        SC_PMA_CH3_FORCE_LC_PLL_LOOP_EN_H_143 := 1'b1;
    }

    if (PMA_CH3_FORCE_LC_PLL_LOOP_EN_L == "DISABLE")
    {
        SC_PMA_CH3_FORCE_LC_PLL_LOOP_EN_L_142 := 1'b0;
    }
    else if (PMA_CH3_FORCE_LC_PLL_LOOP_EN_L == "ENABLE")
    {
        SC_PMA_CH3_FORCE_LC_PLL_LOOP_EN_L_142 := 1'b1;
    }

    if (PMA_CH3_VCO_DIV_CALI_BYPASS == "FALSE")
    {
        SC_PMA_CH3_VCO_DIV_CALI_BYPASS_141 := 1'b0;
    }
    else if (PMA_CH3_VCO_DIV_CALI_BYPASS == "TRUE")
    {
        SC_PMA_CH3_VCO_DIV_CALI_BYPASS_141 := 1'b1;
    }

    if (PMA_CH3_BIST_EN == "DISABLE")
    {
        SC_PMA_CH3_BIST_EN_140 := 1'b0;
    }
    else if (PMA_CH3_BIST_EN == "ENABLE")
    {
        SC_PMA_CH3_BIST_EN_140 := 1'b1;
    }

    if (PMA_CH3_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE == "DISABLE")
    {
        SC_PMA_CH3_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE_139 := 1'b0;
    }
    else if (PMA_CH3_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE == "ENABLE")
    {
        SC_PMA_CH3_PLL_LOOP_EN_SETTING_FROM_REGISTER_ENABLE_139 := 1'b1;
    }

    if (PMA_CH3_FREQ_DETECT_ENABLE_SOURCE == "DISABLE")
    {
        SC_PMA_CH3_FREQ_DETECT_ENABLE_SOURCE_138 := 1'b0;
    }
    else if (PMA_CH3_FREQ_DETECT_ENABLE_SOURCE == "ENABLE")
    {
        SC_PMA_CH3_FREQ_DETECT_ENABLE_SOURCE_138 := 1'b1;
    }

    if (PMA_CH3_REG_SET_DIVSEL_REF >= 0 && PMA_CH3_REG_SET_DIVSEL_REF <= 3)
    {
        SC_PMA_CH3_REG_SET_DIVSEL_REF_137_136 := to_unsigned(PMA_CH3_REG_SET_DIVSEL_REF,2);   
    }

    if (PMA_CH3_REG_SET_DIVSEL45_FB == "FALSE")
    {
        SC_PMA_CH3_REG_SET_DIVSEL45_FB_135 := 1'b0;
    }
    else if (PMA_CH3_REG_SET_DIVSEL45_FB == "TRUE")
    {
        SC_PMA_CH3_REG_SET_DIVSEL45_FB_135 := 1'b1;
    }

    if (PMA_CH3_REG_SET_DIVSEL_FB >= 0 && PMA_CH3_REG_SET_DIVSEL_FB <= 7)
    {
         SC_PMA_CH3_REG_SET_DIVSEL_FB_134_132 := to_unsigned(PMA_CH3_REG_SET_DIVSEL_FB,3);
    }

    if (PMA_CH3_PLL_LOOP_EN_SETTING == "DISABLE")
    {
        SC_PMA_CH3_PLL_LOOP_EN_SETTING_131 := 1'b0;
    }
    else if (PMA_CH3_PLL_LOOP_EN_SETTING == "ENABLE")
    {
        SC_PMA_CH3_PLL_LOOP_EN_SETTING_131 := 1'b1;
    }

    if (PMA_CH3_REGISTER_SET_TXPLL_DIV_ENABLE == "DISABLE")
    {
        SC_PMA_CH3_REGISTER_SET_TXPLL_DIV_ENABLE_130 := 1'b0;
    }
    else if (PMA_CH3_REGISTER_SET_TXPLL_DIV_ENABLE == "ENABLE")
    {
        SC_PMA_CH3_REGISTER_SET_TXPLL_DIV_ENABLE_130 := 1'b1;
    }

    if (PMA_CH3_FORCE_RXPLL_RESET == "FALSE")
    {
        SC_PMA_CH3_FORCE_RXPLL_RESET_129 := 1'b0;
    }
    else if (PMA_CH3_FORCE_RXPLL_RESET == "TRUE")
    {
        SC_PMA_CH3_FORCE_RXPLL_RESET_129 := 1'b1;
    }

    if (PMA_CH3_FORCE_RXPLL_ON == "FALSE")
    {
        SC_PMA_CH3_FORCE_RXPLL_ON_128 := 1'b0;
    }
    else if (PMA_CH3_FORCE_RXPLL_ON == "TRUE")
    {
        SC_PMA_CH3_FORCE_RXPLL_ON_128 := 1'b1;
    }

    if (PMA_CH3_DPCK_DIV2 == "FALSE")
    {
        SC_PMA_CH3_DPCK_DIV2_126 := 1'b0;
    }
    else if (PMA_CH3_DPCK_DIV2 == "TRUE")
    {
        SC_PMA_CH3_DPCK_DIV2_126 := 1'b1;
    }

    if (PMA_CH3_LFO_SETTING >= 0 && PMA_CH3_LFO_SETTING <= 7)
    {
        SC_PMA_CH3_LFO_SETTING_122_120 := to_unsigned(PMA_CH3_LFO_SETTING,3);  
    }

    if (PMA_CH3_ALOS_COUNTER_CLOCK_SELECTION == "LOCAL")
    {
        SC_PMA_CH3_ALOS_COUNTER_CLOCK_SELECTION_119 := 1'b0;
    }
    else if (PMA_CH3_ALOS_COUNTER_CLOCK_SELECTION == "GLOBAL25M")
    {
        SC_PMA_CH3_ALOS_COUNTER_CLOCK_SELECTION_119 := 1'b1;
    }

    if (PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT == "100PCT")
    {
        SC_PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b000;
    }
    else if (PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT == "111PCT")
    {
        SC_PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b001;
    }
    else if (PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT == "125PCT")
    {
        SC_PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b010;
    }
    else if (PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT == "143PCT")
    {
        SC_PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b011;
    }
    else if (PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT == "71PCT")
    {
        SC_PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b100;
    }
    else if (PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT == "77PCT")
    {
        SC_PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b101;
    }
    else if (PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT == "83PCT")
    {
        SC_PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b110;
    }
    else if (PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT == "91PCT")
    {
        SC_PMA_CH3_RX_BIAS_CURRENT_ADJUSTMENT_116_114 := 3'b111;
    }

    if (PMA_CH3_OOB_ENTER_DELAY_SETTING >= 0 && PMA_CH3_OOB_ENTER_DELAY_SETTING <= 3)
    {
        SC_PMA_CH3_OOB_ENTER_DELAY_SETTING_111_110 := to_unsigned(PMA_CH3_OOB_ENTER_DELAY_SETTING,2);
    }

    if (PMA_CH3_ALOS_LOW_TO_HIGH_COUNTER_SETTING >= 0 && PMA_CH3_ALOS_LOW_TO_HIGH_COUNTER_SETTING <= 3)
    {
        SC_PMA_CH3_ALOS_LOW_TO_HIGH_COUNTER_SETTING_109_108 := to_unsigned(PMA_CH3_ALOS_LOW_TO_HIGH_COUNTER_SETTING,2) ^ 2'b01;
    }

    if (PMA_CH3_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL == "DISABLE")
    {
        SC_PMA_CH3_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL_106 := 1'b0;
    }
    else if (PMA_CH3_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL == "ENABLE")
    {
        SC_PMA_CH3_ENABLE_ALOS_RESULT_AUTOMATICALLY_ENABLE_CHANNEL_106 := 1'b1;
    }

    if (PMA_CH3_ALOS_EXIT_COUNTER_CLOCK_DIVIDER >= 0 && PMA_CH3_ALOS_EXIT_COUNTER_CLOCK_DIVIDER <= 3)
    {
        SC_PMA_CH3_ALOS_EXIT_COUNTER_CLOCK_DIVIDER_105_104 := to_unsigned(PMA_CH3_ALOS_EXIT_COUNTER_CLOCK_DIVIDER,2) ^ 2'b01; 
    }

    if (PMA_CH3_OOB_OSCILATER_FREQUENCY_SETTING >= 0 && PMA_CH3_OOB_OSCILATER_FREQUENCY_SETTING <= 3)
    {
        SC_PMA_CH3_OOB_OSCILATER_FREQUENCY_SETTING_103_102 := to_unsigned(PMA_CH3_OOB_OSCILATER_FREQUENCY_SETTING,2); 
    }

    if (PMA_CH3_FORCE_OOB == "FALSE")
    {
        SC_PMA_CH3_FORCE_OOB_101 := 1'b0;
    }
    else if (PMA_CH3_FORCE_OOB == "TRUE")
    {
        SC_PMA_CH3_FORCE_OOB_101 := 1'b1;
    }

    if (PMA_CH3_OOB_VTH_SET == "27MV")
    {
        SC_PMA_CH3_OOB_VTH_SET_100_96 := 5'b00111;
    }
    else if (PMA_CH3_OOB_VTH_SET == "30MV")
    {
        SC_PMA_CH3_OOB_VTH_SET_100_96 := 5'b00110;
    }
    else if (PMA_CH3_OOB_VTH_SET == "35MV")
    {
        SC_PMA_CH3_OOB_VTH_SET_100_96 := 5'b00100;
    }
    else if (PMA_CH3_OOB_VTH_SET == "42_5MV")
    {
        SC_PMA_CH3_OOB_VTH_SET_100_96 := 5'b00000;
    }
    else if (PMA_CH3_OOB_VTH_SET == "52MV")
    {
        SC_PMA_CH3_OOB_VTH_SET_100_96 := 5'b01000;
    }
    else if (PMA_CH3_OOB_VTH_SET == "68MV")
    {
        SC_PMA_CH3_OOB_VTH_SET_100_96 := 5'b11000;
    }

    if (PMA_CH3_FORCE_DET_FORCE_ALOS_LOW == "FALSE")
    {
        SC_PMA_CH3_FORCE_DET_FORCE_ALOS_LOW_95 := 1'b0;
    }
    else if (PMA_CH3_FORCE_DET_FORCE_ALOS_LOW == "TRUE")
    {
        SC_PMA_CH3_FORCE_DET_FORCE_ALOS_LOW_95 := 1'b1;
    }

    if (PMA_CH3_ALOS_THRESHOLD_VOLTAGE == "27MV")
    {
        SC_PMA_CH3_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b00111;
    }
    else if (PMA_CH3_ALOS_THRESHOLD_VOLTAGE == "30MV")
    {
        SC_PMA_CH3_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b00110;
    }
    else if (PMA_CH3_ALOS_THRESHOLD_VOLTAGE == "35MV")
    {
        SC_PMA_CH3_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b00100;
    }
    else if (PMA_CH3_ALOS_THRESHOLD_VOLTAGE == "42_5MV")
    {
        SC_PMA_CH3_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b00000;
    }
    else if (PMA_CH3_ALOS_THRESHOLD_VOLTAGE == "52MV")
    {
        SC_PMA_CH3_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b01000;
    }
    else if (PMA_CH3_ALOS_THRESHOLD_VOLTAGE == "68MV")
    {
        SC_PMA_CH3_ALOS_THRESHOLD_VOLTAGE_94_90 := 5'b11000;
    }

    if (PMA_CH3_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE >= 0 && PMA_CH3_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE <= 3)
    {
        SC_PMA_CH3_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE_89_88 := to_unsigned(PMA_CH3_WAKEUP_VCM_RX_COMMON_MODE_VOLTAGE,2);
    }

    if (PMA_CH3_REGR_NEGATIVE_HYSTERESIS_SETTING == "100MV")
    {
        SC_PMA_CH3_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84 := 4'b0000;
    }
    else if (PMA_CH3_REGR_NEGATIVE_HYSTERESIS_SETTING == "75MV")
    {
        SC_PMA_CH3_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84 := 4'b0001;
    }
    else if (PMA_CH3_REGR_NEGATIVE_HYSTERESIS_SETTING == "50MV")
    {
        SC_PMA_CH3_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84 := 4'b0011;
    }
    else if (PMA_CH3_REGR_NEGATIVE_HYSTERESIS_SETTING == "25MV")
    {
        SC_PMA_CH3_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84 := 4'b0111;
    }
    else if (PMA_CH3_REGR_NEGATIVE_HYSTERESIS_SETTING == "0MV")
    {
        SC_PMA_CH3_REGR_NEGATIVE_HYSTERESIS_SETTING_87_84 := 4'b1111;
    }

    if (PMA_CH3_REGL_POSITIVE_HYSTERESIS_SETTING == "100MV")
    {
        SC_PMA_CH3_REGL_POSITIVE_HYSTERESIS_SETTING_83_80 := 4'b0000;
    }
    else if (PMA_CH3_REGL_POSITIVE_HYSTERESIS_SETTING == "75MV")
    {
        SC_PMA_CH3_REGL_POSITIVE_HYSTERESIS_SETTING_83_80 := 4'b0001;
    }
    else if (PMA_CH3_REGL_POSITIVE_HYSTERESIS_SETTING == "50MV")
    {
        SC_PMA_CH3_REGL_POSITIVE_HYSTERESIS_SETTING_83_80 := 4'b0011;
    }
    else if (PMA_CH3_REGL_POSITIVE_HYSTERESIS_SETTING == "25MV")
    {
        SC_PMA_CH3_REGL_POSITIVE_HYSTERESIS_SETTING_83_80 := 4'b0111;
    }
    else if (PMA_CH3_REGL_POSITIVE_HYSTERESIS_SETTING == "0MV")
    {
        SC_PMA_CH3_REGL_POSITIVE_HYSTERESIS_SETTING_83_80 := 4'b1111;
    }

    if (PMA_CH3_REG_EN == "DISABLE")
    {
        SC_PMA_CH3_REG_EN_77 := 1'b0;
    }
    else if (PMA_CH3_REG_EN == "ENABLE")
    {
        SC_PMA_CH3_REG_EN_77 := 1'b1;
    }

    if (PMA_CH3_REGREF_SEL == "VREF")
    {
        SC_PMA_CH3_REGREF_SEL_76 := 1'b0;
    }
    else if (PMA_CH3_REGREF_SEL == "SELF_DC")
    {
        SC_PMA_CH3_REGREF_SEL_76 := 1'b1;
    }

    if (PMA_CH3_DC496 == "5MHZ")
    {
        SC_PMA_CH3_DC496_75_72 := 4'b0111;
    }
    else if (PMA_CH3_DC496 == "8MHZ")
    {
        SC_PMA_CH3_DC496_75_72 := 4'b0110;
    }
    else if (PMA_CH3_DC496 == "11_5MHZ")
    {
        SC_PMA_CH3_DC496_75_72 := 4'b0100;
    }
    else if (PMA_CH3_DC496 == "20_6MHZ")
    {
        SC_PMA_CH3_DC496_75_72 := 4'b0000;
    }
    else if (PMA_CH3_DC496 == "39_6MHZ")
    {
        SC_PMA_CH3_DC496_75_72 := 4'b1000;
    }

    if (PMA_CH3_EQ2_AC_VAR_SETTING == 255)
    {
        SC_PMA_CH3_EQ2_AC_VAR_SETTING_63_56 := 8'b00111100;
    }
    else if (PMA_CH3_EQ2_AC_VAR_SETTING == 254)
    {
        SC_PMA_CH3_EQ2_AC_VAR_SETTING_63_56 := 8'b00111101;
    }
    else if (PMA_CH3_EQ2_AC_VAR_SETTING == 252)
    {
        SC_PMA_CH3_EQ2_AC_VAR_SETTING_63_56 := 8'b00111111;
    }
    else if (PMA_CH3_EQ2_AC_VAR_SETTING == 248)
    {
        SC_PMA_CH3_EQ2_AC_VAR_SETTING_63_56 := 8'b00111011;
    }
    else if (PMA_CH3_EQ2_AC_VAR_SETTING == 243)
    {
        SC_PMA_CH3_EQ2_AC_VAR_SETTING_63_56 := 8'b00110000;
    }
    else if (PMA_CH3_EQ2_AC_VAR_SETTING == 240)
    {
        SC_PMA_CH3_EQ2_AC_VAR_SETTING_63_56 := 8'b00110011;
    }
    else if (PMA_CH3_EQ2_AC_VAR_SETTING == 227)
    {
        SC_PMA_CH3_EQ2_AC_VAR_SETTING_63_56 := 8'b00100000;
    }
    else if (PMA_CH3_EQ2_AC_VAR_SETTING == 224)
    {
        SC_PMA_CH3_EQ2_AC_VAR_SETTING_63_56 := 8'b00100011;
    }
    else if (PMA_CH3_EQ2_AC_VAR_SETTING == 195)
    {
        SC_PMA_CH3_EQ2_AC_VAR_SETTING_63_56 := 8'b00000000;
    }
    else if (PMA_CH3_EQ2_AC_VAR_SETTING == 192)
    {
        SC_PMA_CH3_EQ2_AC_VAR_SETTING_63_56 := 8'b00000011;
    }
    else if (PMA_CH3_EQ2_AC_VAR_SETTING == 131)
    {
        SC_PMA_CH3_EQ2_AC_VAR_SETTING_63_56 := 8'b01000000;
    }
    else if (PMA_CH3_EQ2_AC_VAR_SETTING == 128)
    {
        SC_PMA_CH3_EQ2_AC_VAR_SETTING_63_56 := 8'b01000011;
    }
    else if (PMA_CH3_EQ2_AC_VAR_SETTING == 3)
    {
        SC_PMA_CH3_EQ2_AC_VAR_SETTING_63_56 := 8'b11000000;
    }
    else if (PMA_CH3_EQ2_AC_VAR_SETTING == 0)
    {
        SC_PMA_CH3_EQ2_AC_VAR_SETTING_63_56 := 8'b11000011;
    }

    if (PMA_CH3_EQ2_AC_RES_SETTING >= 0 && PMA_CH3_EQ2_AC_RES_SETTING <= 31)
    {
         SC_PMA_CH3_EQ2_AC_RES_SETTING_52_48 := to_unsigned(PMA_CH3_EQ2_AC_RES_SETTING,5) ^ 5'b10101;
    }

    if (PMA_CH3_EQ2_DC_RESTOP_SETTING >= 0 && PMA_CH3_EQ2_DC_RESTOP_SETTING <= 3)
    {
        SC_PMA_CH3_EQ2_DC_RESTOP_SETTING_47_46 := to_unsigned(PMA_CH3_EQ2_DC_RESTOP_SETTING,2) ^ 2'b11; 
    }

    if (PMA_CH3_EQ1_DC_RESTOP_SETTING == 50)
    {
        SC_PMA_CH3_EQ1_DC_RESTOP_SETTING_43_40 := 4'b1000;
    }
    else if (PMA_CH3_EQ1_DC_RESTOP_SETTING == 52)
    {
        SC_PMA_CH3_EQ1_DC_RESTOP_SETTING_43_40 := 4'b1100;
    }
    else if (PMA_CH3_EQ1_DC_RESTOP_SETTING == 74)
    {
        SC_PMA_CH3_EQ1_DC_RESTOP_SETTING_43_40 := 4'b1111;
    }
    else if (PMA_CH3_EQ1_DC_RESTOP_SETTING == 60)
    {
        SC_PMA_CH3_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0000;
    }
    else if (PMA_CH3_EQ1_DC_RESTOP_SETTING == 61)
    {
        SC_PMA_CH3_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0010;
    }
    else if (PMA_CH3_EQ1_DC_RESTOP_SETTING == 81)
    {
        SC_PMA_CH3_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0011;
    }
    else if (PMA_CH3_EQ1_DC_RESTOP_SETTING == 71)
    {
        SC_PMA_CH3_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0100;
    }
    else if (PMA_CH3_EQ1_DC_RESTOP_SETTING == 92)
    {
        SC_PMA_CH3_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0101;
    }
    else if (PMA_CH3_EQ1_DC_RESTOP_SETTING == 78)
    {
        SC_PMA_CH3_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0110;
    }
    else if (PMA_CH3_EQ1_DC_RESTOP_SETTING == 107)
    {
        SC_PMA_CH3_EQ1_DC_RESTOP_SETTING_43_40 := 4'b0111;
    }

    if (PMA_CH3_EQ1_AC_VAR_SETTING == 255)
    {
        SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32 := 8'b00011011;
    }
    else if (PMA_CH3_EQ1_AC_VAR_SETTING == 254)
    {
        SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32 := 8'b00011010;
    }
    else if (PMA_CH3_EQ1_AC_VAR_SETTING == 252)
    {
        SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32 := 8'b00011000;
    }
    else if (PMA_CH3_EQ1_AC_VAR_SETTING == 248)
    {
        SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32 := 8'b00011100;
    }
    else if (PMA_CH3_EQ1_AC_VAR_SETTING == 243)
    {
        SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32 := 8'b00010111;
    }
    else if (PMA_CH3_EQ1_AC_VAR_SETTING == 240)
    {
        SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32 := 8'b00010100;
    }
    else if (PMA_CH3_EQ1_AC_VAR_SETTING == 228)
    {
        SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32 := 8'b00000000;
    }
    else if (PMA_CH3_EQ1_AC_VAR_SETTING == 227)
    {
        SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32 := 8'b00000111;
    }
    else if (PMA_CH3_EQ1_AC_VAR_SETTING == 224)
    {
        SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32 := 8'b00000100;
    }
    else if (PMA_CH3_EQ1_AC_VAR_SETTING == 195)
    {
        SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32 := 8'b00100111;
    }
    else if (PMA_CH3_EQ1_AC_VAR_SETTING == 192)
    {
        SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32 := 8'b00100100;
    }
    else if (PMA_CH3_EQ1_AC_VAR_SETTING == 131)
    {
        SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32 := 8'b11100111;
    }
    else if (PMA_CH3_EQ1_AC_VAR_SETTING == 128)
    {
        SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32 := 8'b01100100;
    }
    else if (PMA_CH3_EQ1_AC_VAR_SETTING == 3)
    {
        SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32 := 8'b11100111;
    }
    else if (PMA_CH3_EQ1_AC_VAR_SETTING == 0)
    {
        SC_PMA_CH3_EQ1_AC_VAR_SETTING_39_32 := 8'b11100100;
    }

    if (PMA_CH3_EQ2_CURRENT_SETTING == 7)
    {
        SC_PMA_CH3_EQ2_CURRENT_SETTING_31_29 := 3'b110;
    }
    else if (PMA_CH3_EQ2_CURRENT_SETTING == 6)
    {
        SC_PMA_CH3_EQ2_CURRENT_SETTING_31_29 := 3'b111;
    }
    else if (PMA_CH3_EQ2_CURRENT_SETTING == 3)
    {
        SC_PMA_CH3_EQ2_CURRENT_SETTING_31_29 := 3'b010;
    }
    else if (PMA_CH3_EQ2_CURRENT_SETTING == 1)
    {
        SC_PMA_CH3_EQ2_CURRENT_SETTING_31_29 := 3'b000;
    }
    else if (PMA_CH3_EQ2_CURRENT_SETTING == 0)
    {
        SC_PMA_CH3_EQ2_CURRENT_SETTING_31_29 := 3'b001;
    }

    if (PMA_CH3_EQ1_AC_RES_SETTING >= 0 && PMA_CH3_EQ1_AC_RES_SETTING <= 31)
    {
         SC_PMA_CH3_EQ1_AC_RES_SETTING_28_24 := to_unsigned(PMA_CH3_EQ1_AC_RES_SETTING,5) ^ 5'b10011;
    }

    if (PMA_CH3_EQ1_CURRENT_SETTING == 15)
    {
        SC_PMA_CH3_EQ1_CURRENT_SETTING_19_16 := 4'b0000;
    }
    else if (PMA_CH3_EQ1_CURRENT_SETTING == 14)
    {
        SC_PMA_CH3_EQ1_CURRENT_SETTING_19_16 := 4'b0001;
    }
    else if (PMA_CH3_EQ1_CURRENT_SETTING == 11)
    {
        SC_PMA_CH3_EQ1_CURRENT_SETTING_19_16 := 4'b0100;
    }
    else if (PMA_CH3_EQ1_CURRENT_SETTING == 7)
    {
        SC_PMA_CH3_EQ1_CURRENT_SETTING_19_16 := 4'b1000;
    }
    else if (PMA_CH3_EQ1_CURRENT_SETTING == 4)
    {
        SC_PMA_CH3_EQ1_CURRENT_SETTING_19_16 := 4'b1011;
    }
    else if (PMA_CH3_EQ1_CURRENT_SETTING == 3)
    {
        SC_PMA_CH3_EQ1_CURRENT_SETTING_19_16 := 4'b1100;
    }
    else if (PMA_CH3_EQ1_CURRENT_SETTING == 1)
    {
        SC_PMA_CH3_EQ1_CURRENT_SETTING_19_16 := 4'b1110;
    }
    else if (PMA_CH3_EQ1_CURRENT_SETTING == 0)
    {
        SC_PMA_CH3_EQ1_CURRENT_SETTING_19_16 := 4'b1111;
    }

    if (PMA_CH3_RPLUS == 0)
    {
        SC_PMA_CH3_RPLUS_15_12 := 4'b0000;
    }
    else if (PMA_CH3_RPLUS == 1)
    {
        SC_PMA_CH3_RPLUS_15_12 := 4'b0001;
    }
    else if (PMA_CH3_RPLUS == 3)
    {
        SC_PMA_CH3_RPLUS_15_12 := 4'b0011;
    }
    else if (PMA_CH3_RPLUS == 7)
    {
        SC_PMA_CH3_RPLUS_15_12 := 4'b0111;
    }
    else if (PMA_CH3_RPLUS == 15)
    {
        SC_PMA_CH3_RPLUS_15_12 := 4'b1111;
    }

    if (PMA_CH3_RMINUS == 0)
    {
        SC_PMA_CH3_RMINUS_11_8 := 4'b0000;
    }
    else if (PMA_CH3_RMINUS == 1)
    {
        SC_PMA_CH3_RMINUS_11_8 := 4'b0001;
    }
    else if (PMA_CH3_RMINUS == 3)
    {
        SC_PMA_CH3_RMINUS_11_8 := 4'b0011;
    }
    else if (PMA_CH3_RMINUS == 7)
    {
        SC_PMA_CH3_RMINUS_11_8 := 4'b0111;
    }
    else if (PMA_CH3_RMINUS == 15)
    {
        SC_PMA_CH3_RMINUS_11_8 := 4'b1111;
    }

    if (PMA_CH3_RVALSET >= 0 && PMA_CH3_RVALSET <= 3)
    {
        SC_PMA_CH3_RVALSET_7_6 := to_unsigned(PMA_CH3_RVALSET,2) ^ 2'b01;
    }

    if (PMA_CH3_RTERM >= 0 && PMA_CH3_RTERM <= 3)
    {
        SC_PMA_CH3_RTERM_5_4 := to_unsigned(PMA_CH3_RTERM,2); 
    }

    if (PMA_CH3_DCFB_EN == "DISABLE")
    {
        SC_PMA_CH3_DCFB_EN_2 := 1'b0;
    }
    else if (PMA_CH3_DCFB_EN == "ENABLE")
    {
        SC_PMA_CH3_DCFB_EN_2 := 1'b1;
    }

    if (PMA_CH3_DCCOUP == "FALSE")
    {
        SC_PMA_CH3_DCCOUP_1 := 1'b1;
    }
    else if (PMA_CH3_DCCOUP == "TRUE")
    {
        SC_PMA_CH3_DCCOUP_1 := 1'b0;
    }

    if (PMA_CH3_3G == "FALSE")
    {
        SC_PMA_CH3_3G_0 := 1'b0;
    }
    else if (PMA_CH3_3G == "TRUE")
    {
        SC_PMA_CH3_3G_0 := 1'b1;
    }

    if (PMA_QUAD_TURN_ON_BANDGAP_AT_AOS_ON == "FALSE")
    {
        SC_PMA_QUAD_TURN_ON_BANDGAP_AT_AOS_ON_194 := 1'b0;
    }
    else if (PMA_QUAD_TURN_ON_BANDGAP_AT_AOS_ON == "TRUE")
    {
        SC_PMA_QUAD_TURN_ON_BANDGAP_AT_AOS_ON_194 := 1'b1;
    }

    if (PMA_QUAD_TURN_ON_BANDGAP_AT_RX_DETECTION_ON == "FALSE")
    {
        SC_PMA_QUAD_TURN_ON_BANDGAP_AT_RX_DETECTION_ON_193 := 1'b0;
    }
    else if (PMA_QUAD_TURN_ON_BANDGAP_AT_RX_DETECTION_ON == "TRUE")
    {
        SC_PMA_QUAD_TURN_ON_BANDGAP_AT_RX_DETECTION_ON_193 := 1'b1;
    }

    if (PMA_QUAD_TURN_ON_BANDGAP_AT_BOUNDARY_SCAN_ON == "FALSE")
    {
        SC_PMA_QUAD_TURN_ON_BANDGAP_AT_BOUNDARY_SCAN_ON_192 := 1'b1;
    }
    else if (PMA_QUAD_TURN_ON_BANDGAP_AT_BOUNDARY_SCAN_ON == "TRUE")
    {
        SC_PMA_QUAD_TURN_ON_BANDGAP_AT_BOUNDARY_SCAN_ON_192 := 1'b0;
    }

    if (PMA_QUAD_CFG_HSST_RSTN == "FALSE")
    {
        SC_PMA_QUAD_CFG_HSST_RSTN_184 := 1'b0;
    }
    else if (PMA_QUAD_CFG_HSST_RSTN == "TRUE")
    {
        SC_PMA_QUAD_CFG_HSST_RSTN_184 := 1'b1;
    }

    if (PMA_QUAD_SELECT_LANE_TCK_FOR_QUAD_SYNC == "LANE0")
    {
        SC_PMA_QUAD_SELECT_LANE_TCK_FOR_QUAD_SYNC_183_182 := 2'b00;
    }
    else if (PMA_QUAD_SELECT_LANE_TCK_FOR_QUAD_SYNC == "LANE1")
    {
        SC_PMA_QUAD_SELECT_LANE_TCK_FOR_QUAD_SYNC_183_182 := 2'b01;
    }
    else if (PMA_QUAD_SELECT_LANE_TCK_FOR_QUAD_SYNC == "LANE2")
    {
        SC_PMA_QUAD_SELECT_LANE_TCK_FOR_QUAD_SYNC_183_182 := 2'b10;
    }
    else if (PMA_QUAD_SELECT_LANE_TCK_FOR_QUAD_SYNC == "LANE3")
    {
        SC_PMA_QUAD_SELECT_LANE_TCK_FOR_QUAD_SYNC_183_182 := 2'b11;
    }

    if (PMA_QUAD_CK_REN == "DISABLE")
    {
        SC_PMA_QUAD_CK_REN_170 := 1'b1;
    }
    else if (PMA_QUAD_CK_REN == "ENABLE")
    {
        SC_PMA_QUAD_CK_REN_170 := 1'b0;
    }

    if (PMA_QUAD_C1_EN == "DISABLE")
    {
        SC_PMA_QUAD_C1_EN_169 := 1'b1;
    }
    else if (PMA_QUAD_C1_EN == "ENABLE")
    {
        SC_PMA_QUAD_C1_EN_169 := 1'b0;
    }

    if (PMA_QUAD_C2_EN == "DISABLE")
    {
        SC_PMA_QUAD_C2_EN_168 := 1'b1;
    }
    else if (PMA_QUAD_C2_EN == "ENABLE")
    {
        SC_PMA_QUAD_C2_EN_168 := 1'b0;
    }

    if (PMA_QUAD_CLK_DIVIDER_SETTING_FROM_25M_TO_200K >= 0 && PMA_QUAD_CLK_DIVIDER_SETTING_FROM_25M_TO_200K <= 3)
    {
         SC_PMA_QUAD_CLK_DIVIDER_SETTING_FROM_25M_TO_200K_167_166 := to_unsigned(PMA_QUAD_CLK_DIVIDER_SETTING_FROM_25M_TO_200K,2);
    }

    if (PMA_QUAD_ACMODE_SCANMODE_EN == "DISABLE")
    {
        SC_PMA_QUAD_ACMODE_SCANMODE_EN_165 := 1'b0;
    }
    else if (PMA_QUAD_ACMODE_SCANMODE_EN == "ENABLE")
    {
        SC_PMA_QUAD_ACMODE_SCANMODE_EN_165 := 1'b1;
    }

    if (PMA_QUAD_REGISTER_ACMODE == "FALSE")
    {
        SC_PMA_QUAD_REGISTER_ACMODE_164 := 1'b0;
    }
    else if (PMA_QUAD_REGISTER_ACMODE == "TRUE")
    {
        SC_PMA_QUAD_REGISTER_ACMODE_164 := 1'b1;
    }

    if (PMA_QUAD_REGISTER_SCANMODE == "FALSE")
    {
        SC_PMA_QUAD_REGISTER_SCANMODE_163 := 1'b0;
    }
    else if (PMA_QUAD_REGISTER_SCANMODE == "TRUE")
    {
        SC_PMA_QUAD_REGISTER_SCANMODE_163 := 1'b1;
    }

    if (PMA_QUAD_REFCK2CORE_EN == "DISABLE")
    {
        SC_PMA_QUAD_REFCK2CORE_EN_162 := 1'b0;
    }
    else if (PMA_QUAD_REFCK2CORE_EN == "ENABLE")
    {
        SC_PMA_QUAD_REFCK2CORE_EN_162 := 1'b1;
    }

    if (PMA_QUAD_REG_EN == "DISABLE")
    {
        SC_PMA_QUAD_REG_EN_161 := 1'b0;
    }
    else if (PMA_QUAD_REG_EN == "ENABLE")
    {
        SC_PMA_QUAD_REG_EN_161 := 1'b1;
    }

    if (PMA_QUAD_REGR == "100MV")
    {
        SC_PMA_QUAD_REGR_159_156 := 4'b0000;
    }
    else if (PMA_QUAD_REGR == "75MV")
    {
        SC_PMA_QUAD_REGR_159_156 := 4'b0001;
    }
    else if (PMA_QUAD_REGR == "50MV")
    {
        SC_PMA_QUAD_REGR_159_156 := 4'b0011;
    }
    else if (PMA_QUAD_REGR == "25MV")
    {
        SC_PMA_QUAD_REGR_159_156 := 4'b0111;
    }
    else if (PMA_QUAD_REGR == "0MV")
    {
        SC_PMA_QUAD_REGR_159_156 := 4'b1111;
    }

    if (PMA_QUAD_REGL == "100MV")
    {
        SC_PMA_QUAD_REGL_155_152 := 4'b0000;
    }
    else if (PMA_QUAD_REGL == "75MV")
    {
        SC_PMA_QUAD_REGL_155_152 := 4'b0001;
    }
    else if (PMA_QUAD_REGL == "50MV")
    {
        SC_PMA_QUAD_REGL_155_152 := 4'b0011;
    }
    else if (PMA_QUAD_REGL == "25MV")
    {
        SC_PMA_QUAD_REGL_155_152 := 4'b0111;
    }
    else if (PMA_QUAD_REGL == "0MV")
    {
        SC_PMA_QUAD_REGL_155_152 := 4'b1111;
    }

    if (PMA_QUAD_DPCK_SEL >= 0 && PMA_QUAD_DPCK_SEL <= 3)
    {
         SC_PMA_QUAD_DPCK_SEL_151_150 := to_unsigned(PMA_QUAD_DPCK_SEL,2);
    }

    if (PMA_QUAD_TX_REFCK_SEL == "FALSE")
    {
        SC_PMA_QUAD_TX_REFCK_SEL_149 := 1'b0;
    }
    else if (PMA_QUAD_TX_REFCK_SEL == "TRUE")
    {
        SC_PMA_QUAD_TX_REFCK_SEL_149 := 1'b1;
    }

    if (PMA_QUAD_REFCK_SRC_SEL == "FALSE")
    {
        SC_PMA_QUAD_REFCK_SRC_SEL_148 := 1'b0;
    }
    else if (PMA_QUAD_REFCK_SRC_SEL == "TRUE")
    {
        SC_PMA_QUAD_REFCK_SRC_SEL_148 := 1'b1;
    }

    if (PMA_QUAD_RREFCK_PWRUP == "FALSE")
    {
        SC_PMA_QUAD_RREFCK_PWRUP_147 := 1'b1;
    }
    else if (PMA_QUAD_RREFCK_PWRUP == "TRUE")
    {
        SC_PMA_QUAD_RREFCK_PWRUP_147 := 1'b0;
    }

    if (PMA_QUAD_REFCK_SK_SEL == "BOTH")
    {
        SC_PMA_QUAD_REFCK_SK_SEL_146_145 := 2'b00;
    }
    else if (PMA_QUAD_REFCK_SK_SEL == "DOWN")
    {
        SC_PMA_QUAD_REFCK_SK_SEL_146_145 := 2'b01;
    }
    else if (PMA_QUAD_REFCK_SK_SEL == "UP")
    {
        SC_PMA_QUAD_REFCK_SK_SEL_146_145 := 2'b10;
    }
    else if (PMA_QUAD_REFCK_SK_SEL == "NONE")
    {
        SC_PMA_QUAD_REFCK_SK_SEL_146_145 := 2'b11;
    }

    if (PMA_QUAD_REFCK_DIV2_SEL == "FALSE")
    {
        SC_PMA_QUAD_REFCK_DIV2_SEL_144 := 1'b0;
    }
    else if (PMA_QUAD_REFCK_DIV2_SEL == "TRUE")
    {
        SC_PMA_QUAD_REFCK_DIV2_SEL_144 := 1'b1;
    }

    if (PMA_QUAD_REFCK_TO_NQ_EN == "DISABLE")
    {
        SC_PMA_QUAD_REFCK_TO_NQ_EN_143 := 1'b0;
    }
    else if (PMA_QUAD_REFCK_TO_NQ_EN == "ENABLE")
    {
        SC_PMA_QUAD_REFCK_TO_NQ_EN_143 := 1'b1;
    }

    if (PMA_QUAD_AUXI_ADJ == "100PCT")
    {
        SC_PMA_QUAD_AUXI_ADJ_142_140 := 3'b000;
    }
    else if (PMA_QUAD_AUXI_ADJ == "111PCT")
    {
        SC_PMA_QUAD_AUXI_ADJ_142_140 := 3'b001;
    }
    else if (PMA_QUAD_AUXI_ADJ == "125PCT")
    {
        SC_PMA_QUAD_AUXI_ADJ_142_140 := 3'b010;
    }
    else if (PMA_QUAD_AUXI_ADJ == "143PCT")
    {
        SC_PMA_QUAD_AUXI_ADJ_142_140 := 3'b011;
    }
    else if (PMA_QUAD_AUXI_ADJ == "71PCT")
    {
        SC_PMA_QUAD_AUXI_ADJ_142_140 := 3'b100;
    }
    else if (PMA_QUAD_AUXI_ADJ == "77PCT")
    {
        SC_PMA_QUAD_AUXI_ADJ_142_140 := 3'b101;
    }
    else if (PMA_QUAD_AUXI_ADJ == "83PCT")
    {
        SC_PMA_QUAD_AUXI_ADJ_142_140 := 3'b110;
    }
    else if (PMA_QUAD_AUXI_ADJ == "91PCT")
    {
        SC_PMA_QUAD_AUXI_ADJ_142_140 := 3'b111;
    }

    if (PMA_QUAD_DC496 == "5MHZ")
    {
        SC_PMA_QUAD_DC496_139_136 := 4'b0111;
    }
    else if (PMA_QUAD_DC496 == "8MHZ")
    {
        SC_PMA_QUAD_DC496_139_136 := 4'b0110;
    }
    else if (PMA_QUAD_DC496 == "11_5MHZ")
    {
        SC_PMA_QUAD_DC496_139_136 := 4'b0100;
    }
    else if (PMA_QUAD_DC496 == "20_6MHZ")
    {
        SC_PMA_QUAD_DC496_139_136 := 4'b0000;
    }
    else if (PMA_QUAD_DC496 == "39_6MHZ")
    {
        SC_PMA_QUAD_DC496_139_136 := 4'b1000;
    }

    if (PMA_QUAD_REG_FDET_TIMER == 256)
    {
        SC_PMA_QUAD_REG_FDET_TIMER_135_134 := 2'b10;
    }
    else if (PMA_QUAD_REG_FDET_TIMER == 512)
    {
        SC_PMA_QUAD_REG_FDET_TIMER_135_134 := 2'b11;
    }
    else if (PMA_QUAD_REG_FDET_TIMER == 1024)
    {
        SC_PMA_QUAD_REG_FDET_TIMER_135_134 := 2'b00;
    }
    else if (PMA_QUAD_REG_FDET_TIMER == 2048)
    {
        SC_PMA_QUAD_REG_FDET_TIMER_135_134 := 2'b01;
    }

    if (PMA_QUAD_FREQ_LKO == "1PCT")
    {
        SC_PMA_QUAD_FREQ_LKO_133_132 := 2'b10;
    }
    else if (PMA_QUAD_FREQ_LKO == "2PCT")
    {
        SC_PMA_QUAD_FREQ_LKO_133_132 := 2'b11;
    }
    else if (PMA_QUAD_FREQ_LKO == "5PCT")
    {
        SC_PMA_QUAD_FREQ_LKO_133_132 := 2'b00;
    }
    else if (PMA_QUAD_FREQ_LKO == "10PCT")
    {
        SC_PMA_QUAD_FREQ_LKO_133_132 := 2'b01;
    }

    if (PMA_QUAD_FREQ_LKI == "1PCT")
    {
        SC_PMA_QUAD_FREQ_LKI_131_130 := 2'b10;
    }
    else if (PMA_QUAD_FREQ_LKI == "2PCT")
    {
        SC_PMA_QUAD_FREQ_LKI_131_130 := 2'b11;
    }
    else if (PMA_QUAD_FREQ_LKI == "5PCT")
    {
        SC_PMA_QUAD_FREQ_LKI_131_130 := 2'b00;
    }
    else if (PMA_QUAD_FREQ_LKI == "10PCT")
    {
        SC_PMA_QUAD_FREQ_LKI_131_130 := 2'b01;
    }

    if (PMA_QUAD_CLOCK_SRC_SEL == "LOCAL")
    {
        SC_PMA_QUAD_CLOCK_SRC_SEL_129 := 1'b0;
    }
    else if (PMA_QUAD_CLOCK_SRC_SEL == "NEIGHBOR")
    {
        SC_PMA_QUAD_CLOCK_SRC_SEL_129 := 1'b1;
    }

    if (PMA_QUAD_FRE_DET_EN == "DISABLE")
    {
        SC_PMA_QUAD_FRE_DET_EN_128 := 1'b0;
    }
    else if (PMA_QUAD_FRE_DET_EN == "ENABLE")
    {
        SC_PMA_QUAD_FRE_DET_EN_128 := 1'b1;
    }

    if (PMA_QUAD_TSO_LS_SEL >= 0 && PMA_QUAD_TSO_LS_SEL <= 127)
    {
         SC_PMA_QUAD_TSO_LS_SEL_127_121 := to_unsigned(PMA_QUAD_TSO_LS_SEL,7);
    }

    if (PMA_QUAD_TXPLL_START == "FALSE")
    {
        SC_PMA_QUAD_TXPLL_START_119 := 1'b0;
    }
    else if (PMA_QUAD_TXPLL_START == "TRUE")
    {
        SC_PMA_QUAD_TXPLL_START_119 := 1'b1;
    }

    if (PMA_QUAD_VCODIV >= 0 && PMA_QUAD_VCODIV <= 3)
    {
         SC_PMA_QUAD_VCODIV_118_117 := to_unsigned(PMA_QUAD_VCODIV,2);
    }

    if (PMA_QUAD_LC_BAND >= 0 && PMA_QUAD_LC_BAND <= 31)
    {
         SC_PMA_QUAD_LC_BAND_116_112 := to_unsigned(PMA_QUAD_LC_BAND,5);
    }

    if (PMA_QUAD_SET_VCO_HI == "FALSE")
    {
        SC_PMA_QUAD_SET_VCO_HI_111 := 1'b0;
    }
    else if (PMA_QUAD_SET_VCO_HI == "TRUE")
    {
        SC_PMA_QUAD_SET_VCO_HI_111 := 1'b1;
    }

    if (PMA_QUAD_SET_VCO_LO == "FALSE")
    {
        SC_PMA_QUAD_SET_VCO_LO_110 := 1'b0;
    }
    else if (PMA_QUAD_SET_VCO_LO == "TRUE")
    {
        SC_PMA_QUAD_SET_VCO_LO_110 := 1'b1;
    }

    if (PMA_QUAD_CALIB_FAIL == "FALSE")
    {
        SC_PMA_QUAD_CALIB_FAIL_109 := 1'b0;
    }
    else if (PMA_QUAD_CALIB_FAIL == "TRUE")
    {
        SC_PMA_QUAD_CALIB_FAIL_109 := 1'b1;
    }

    if (PMA_QUAD_CALIB_DONE == "FALSE")
    {
        SC_PMA_QUAD_CALIB_DONE_108 := 1'b0;
    }
    else if (PMA_QUAD_CALIB_DONE == "TRUE")
    {
        SC_PMA_QUAD_CALIB_DONE_108 := 1'b1;
    }

    if (PMA_QUAD_BIST_DONE == "FALSE")
    {
        SC_PMA_QUAD_BIST_DONE_107 := 1'b0;
    }
    else if (PMA_QUAD_BIST_DONE == "TRUE")
    {
        SC_PMA_QUAD_BIST_DONE_107 := 1'b1;
    }

    if (PMA_QUAD_TOTRANGE_FAIL == "FALSE")
    {
        SC_PMA_QUAD_TOTRANGE_FAIL_106 := 1'b0;
    }
    else if (PMA_QUAD_TOTRANGE_FAIL == "TRUE")
    {
        SC_PMA_QUAD_TOTRANGE_FAIL_106 := 1'b1;
    }

    if (PMA_QUAD_SUBRANGE_FAIL == "FALSE")
    {
        SC_PMA_QUAD_SUBRANGE_FAIL_105 := 1'b0;
    }
    else if (PMA_QUAD_SUBRANGE_FAIL == "TRUE")
    {
        SC_PMA_QUAD_SUBRANGE_FAIL_105 := 1'b1;
    }

    if (PMA_QUAD_OVLP_FAIL == "FALSE")
    {
        SC_PMA_QUAD_OVLP_FAIL_104 := 1'b0;
    }
    else if (PMA_QUAD_OVLP_FAIL == "TRUE")
    {
        SC_PMA_QUAD_OVLP_FAIL_104 := 1'b1;
    }

    if (PMA_QUAD_TXPLL_LOCK == "FALSE")
    {
        SC_PMA_QUAD_TXPLL_LOCK_103 := 1'b0;
    }
    else if (PMA_QUAD_TXPLL_LOCK == "TRUE")
    {
        SC_PMA_QUAD_TXPLL_LOCK_103 := 1'b1;
    }

    if (PMA_QUAD_TXPLL_LOOP_ENABLE == "DISABLE")
    {
        SC_PMA_QUAD_TXPLL_LOOP_ENABLE_102 := 1'b0;
    }
    else if (PMA_QUAD_TXPLL_LOOP_ENABLE == "ENABLE")
    {
        SC_PMA_QUAD_TXPLL_LOOP_ENABLE_102 := 1'b1;
    }

    if (PMA_QUAD_TXPLL_DIVSEL_REF_STA >= 0 && PMA_QUAD_TXPLL_DIVSEL_REF_STA <= 3)
    {
         SC_PMA_QUAD_TXPLL_DIVSEL_REF_STA_101_100 := to_unsigned(PMA_QUAD_TXPLL_DIVSEL_REF_STA,2);
    }

    if (PMA_QUAD_TXPLL_DIVSEL45_FB_STA == "FALSE")
    {
        SC_PMA_QUAD_TXPLL_DIVSEL45_FB_STA_99 := 1'b0;
    }
    else if (PMA_QUAD_TXPLL_DIVSEL45_FB_STA == "TRUE")
    {
        SC_PMA_QUAD_TXPLL_DIVSEL45_FB_STA_99 := 1'b1;
    }

    if (PMA_QUAD_TXPLL_DIVSEL_FB_STA >= 0 && PMA_QUAD_TXPLL_DIVSEL_FB_STA <= 7)
    {
         SC_PMA_QUAD_TXPLL_DIVSEL_FB_STA_98_96 := to_unsigned(PMA_QUAD_TXPLL_DIVSEL_FB_STA,3);
    }

    if (PMA_QUAD_TXPLL_DIVSEL45_FB == "FALSE")
    {
        SC_PMA_QUAD_TXPLL_DIVSEL45_FB_95 := 1'b0;
    }
    else if (PMA_QUAD_TXPLL_DIVSEL45_FB == "TRUE")
    {
        SC_PMA_QUAD_TXPLL_DIVSEL45_FB_95 := 1'b1;
    }

    if (PMA_QUAD_TXPLL_DIVSEL_FB >= 0 && PMA_QUAD_TXPLL_DIVSEL_FB <= 7)
    {
         SC_PMA_QUAD_TXPLL_DIVSEL_FB_94_92 := to_unsigned(PMA_QUAD_TXPLL_DIVSEL_FB,3);
    }

    if (PMA_QUAD_TXPLL_DIVSEL_REF >= 0 && PMA_QUAD_TXPLL_DIVSEL_REF <= 3)
    {
         SC_PMA_QUAD_TXPLL_DIVSEL_REF_91_90 := to_unsigned(PMA_QUAD_TXPLL_DIVSEL_REF,2);
    }

    if (PMA_QUAD_REG_DISABLE_HOLDCLK == "DISABLE")
    {
        SC_PMA_QUAD_REG_DISABLE_HOLDCLK_85 := 1'b0;
    }
    else if (PMA_QUAD_REG_DISABLE_HOLDCLK == "ENABLE")
    {
        SC_PMA_QUAD_REG_DISABLE_HOLDCLK_85 := 1'b1;
    }

    if (PMA_QUAD_REG_DISABLE_SYNC == "DISABLE")
    {
        SC_PMA_QUAD_REG_DISABLE_SYNC_84 := 1'b0;
    }
    else if (PMA_QUAD_REG_DISABLE_SYNC == "ENABLE")
    {
        SC_PMA_QUAD_REG_DISABLE_SYNC_84 := 1'b1;
    }

    if (PMA_QUAD_FORCE_OUTPUT_PLL_LOCK == "FALSE")
    {
        SC_PMA_QUAD_FORCE_OUTPUT_PLL_LOCK_83 := 1'b0;
    }
    else if (PMA_QUAD_FORCE_OUTPUT_PLL_LOCK == "TRUE")
    {
        SC_PMA_QUAD_FORCE_OUTPUT_PLL_LOCK_83 := 1'b1;
    }

    if (PMA_QUAD_REGISTER_SET_SYNCTCK_SEL_ENABLE == "DISABLE")
    {
        SC_PMA_QUAD_REGISTER_SET_SYNCTCK_SEL_ENABLE_82 := 1'b0;
    }
    else if (PMA_QUAD_REGISTER_SET_SYNCTCK_SEL_ENABLE == "ENABLE")
    {
        SC_PMA_QUAD_REGISTER_SET_SYNCTCK_SEL_ENABLE_82 := 1'b1;
    }

    if (PMA_QUAD_REG_SET_SYNCTCK_SEL == "LANE0")
    {
        SC_PMA_QUAD_REG_SET_SYNCTCK_SEL_81_80 := 2'b00;
    }
    else if (PMA_QUAD_REG_SET_SYNCTCK_SEL == "LANE1")
    {
        SC_PMA_QUAD_REG_SET_SYNCTCK_SEL_81_80 := 2'b01;
    }
    else if (PMA_QUAD_REG_SET_SYNCTCK_SEL == "LANE2")
    {
        SC_PMA_QUAD_REG_SET_SYNCTCK_SEL_81_80 := 2'b10;
    }
    else if (PMA_QUAD_REG_SET_SYNCTCK_SEL == "LANE3")
    {
        SC_PMA_QUAD_REG_SET_SYNCTCK_SEL_81_80 := 2'b11;
    }

    if (PMA_QUAD_CK4TEST_OUTPUT_ENABLE == "DISABLE")
    {
        SC_PMA_QUAD_CK4TEST_OUTPUT_ENABLE_74 := 1'b0;
    }
    else if (PMA_QUAD_CK4TEST_OUTPUT_ENABLE == "ENABLE")
    {
        SC_PMA_QUAD_CK4TEST_OUTPUT_ENABLE_74 := 1'b1;
    }

    if (PMA_QUAD_RSTGENBAS == "100PCT")
    {
        SC_PMA_QUAD_RSTGENBAS_73_72 := 2'b00;
    }
    else if (PMA_QUAD_RSTGENBAS == "83PCT")
    {
        SC_PMA_QUAD_RSTGENBAS_73_72 := 2'b01;
    }
    else if (PMA_QUAD_RSTGENBAS == "133PCT")
    {
        SC_PMA_QUAD_RSTGENBAS_73_72 := 2'b10;
    }
    else if (PMA_QUAD_RSTGENBAS == "117PCT")
    {
        SC_PMA_QUAD_RSTGENBAS_73_72 := 2'b11;
    }

    if (PMA_QUAD_LCBUFBAS == "100PCT")
    {
        SC_PMA_QUAD_LCBUFBAS_71_70 := 2'b00;
    }
    else if (PMA_QUAD_LCBUFBAS == "83PCT")
    {
        SC_PMA_QUAD_LCBUFBAS_71_70 := 2'b01;
    }
    else if (PMA_QUAD_LCBUFBAS == "133PCT")
    {
        SC_PMA_QUAD_LCBUFBAS_71_70 := 2'b10;
    }
    else if (PMA_QUAD_LCBUFBAS == "117PCT")
    {
        SC_PMA_QUAD_LCBUFBAS_71_70 := 2'b11;
    }

    if (PMA_QUAD_REGISTER_SET_CPCUR_ENABEL == "DISABLE")
    {
        SC_PMA_QUAD_REGISTER_SET_CPCUR_ENABEL_69 := 1'b0;
    }
    else if (PMA_QUAD_REGISTER_SET_CPCUR_ENABEL == "ENABLE")
    {
        SC_PMA_QUAD_REGISTER_SET_CPCUR_ENABEL_69 := 1'b1;
    }

    if (PMA_QUAD_REG_SET_CPCUR >= 0 && PMA_QUAD_REG_SET_CPCUR <= 31)
    {
         SC_PMA_QUAD_REG_SET_CPCUR_68_64 := to_unsigned(PMA_QUAD_REG_SET_CPCUR,5);
    }

    if (PMA_QUAD_CPBAS == "100PCT")
    {
        SC_PMA_QUAD_CPBAS_63_61 := 3'b000;
    }
    else if (PMA_QUAD_CPBAS == "111PCT")
    {
        SC_PMA_QUAD_CPBAS_63_61 := 3'b001;
    }
    else if (PMA_QUAD_CPBAS == "125PCT")
    {
        SC_PMA_QUAD_CPBAS_63_61 := 3'b010;
    }
    else if (PMA_QUAD_CPBAS == "143PCT")
    {
        SC_PMA_QUAD_CPBAS_63_61 := 3'b011;
    }
    else if (PMA_QUAD_CPBAS == "71PCT")
    {
        SC_PMA_QUAD_CPBAS_63_61 := 3'b100;
    }
    else if (PMA_QUAD_CPBAS == "77PCT")
    {
        SC_PMA_QUAD_CPBAS_63_61 := 3'b101;
    }
    else if (PMA_QUAD_CPBAS == "83PCT")
    {
        SC_PMA_QUAD_CPBAS_63_61 := 3'b110;
    }
    else if (PMA_QUAD_CPBAS == "91PCT")
    {
        SC_PMA_QUAD_CPBAS_63_61 := 3'b111;
    }

    if (PMA_QUAD_LCOBAS == "100PCT")
    {
        SC_PMA_QUAD_LCOBAS_60_59 := 2'b00;
    }
    else if (PMA_QUAD_LCOBAS == "75PCT")
    {
        SC_PMA_QUAD_LCOBAS_60_59 := 2'b01;
    }
    else if (PMA_QUAD_LCOBAS == "150PCT")
    {
        SC_PMA_QUAD_LCOBAS_60_59 := 2'b10;
    }
    else if (PMA_QUAD_LCOBAS == "125PCT")
    {
        SC_PMA_QUAD_LCOBAS_60_59 := 2'b11;
    }

    if (PMA_QUAD_LCCUR == "DEFAULT")
    {
        SC_PMA_QUAD_LCCUR_58_56 := 3'b000;
    }
    else if (PMA_QUAD_LCCUR == "_1MA")
    {
        SC_PMA_QUAD_LCCUR_58_56 := 3'b001;
    }
    else if (PMA_QUAD_LCCUR == "2MA")
    {
        SC_PMA_QUAD_LCCUR_58_56 := 3'b010;
    }
    else if (PMA_QUAD_LCCUR == "1MA")
    {
        SC_PMA_QUAD_LCCUR_58_56 := 3'b011;
    }
    else if (PMA_QUAD_LCCUR == "4MA")
    {
        SC_PMA_QUAD_LCCUR_58_56 := 3'b100;
    }
    else if (PMA_QUAD_LCCUR == "3MA")
    {
        SC_PMA_QUAD_LCCUR_58_56 := 3'b101;
    }
    else if (PMA_QUAD_LCCUR == "6MA")
    {
        SC_PMA_QUAD_LCCUR_58_56 := 3'b110;
    }
    else if (PMA_QUAD_LCCUR == "5MA")
    {
        SC_PMA_QUAD_LCCUR_58_56 := 3'b111;
    }

    if (PMA_QUAD_ENABLE_REGISTER_SETTING_BAND == "DISABLE")
    {
        SC_PMA_QUAD_ENABLE_REGISTER_SETTING_BAND_55 := 1'b0;
    }
    else if (PMA_QUAD_ENABLE_REGISTER_SETTING_BAND == "ENABLE")
    {
        SC_PMA_QUAD_ENABLE_REGISTER_SETTING_BAND_55 := 1'b1;
    }

    if (PMA_QUAD_CALIB_WAIT == 1024)
    {
        SC_PMA_QUAD_CALIB_WAIT_53_52 := 2'b00;
    }
    else if (PMA_QUAD_CALIB_WAIT == 2048)
    {
        SC_PMA_QUAD_CALIB_WAIT_53_52 := 2'b01;
    }
    else if (PMA_QUAD_CALIB_WAIT == 4096)
    {
        SC_PMA_QUAD_CALIB_WAIT_53_52 := 2'b10;
    }
    else if (PMA_QUAD_CALIB_WAIT == 512)
    {
        SC_PMA_QUAD_CALIB_WAIT_53_52 := 2'b11;
    }

    if (PMA_QUAD_CALIB_TIMER == 512)
    {
        SC_PMA_QUAD_CALIB_TIMER_51_50 := 2'b00;
    }
    else if (PMA_QUAD_CALIB_TIMER == 1024)
    {
        SC_PMA_QUAD_CALIB_TIMER_51_50 := 2'b01;
    }
    else if (PMA_QUAD_CALIB_TIMER == 2048)
    {
        SC_PMA_QUAD_CALIB_TIMER_51_50 := 2'b10;
    }
    else if (PMA_QUAD_CALIB_TIMER == 4096)
    {
        SC_PMA_QUAD_CALIB_TIMER_51_50 := 2'b11;
    }

    if (PMA_QUAD_TOT_RANGE >= 0 && PMA_QUAD_TOT_RANGE <= 3)
    {
         SC_PMA_QUAD_TOT_RANGE_49_48 := to_unsigned(PMA_QUAD_TOT_RANGE,2);
    }

    if (PMA_QUAD_SUB_RANGE >= 0 && PMA_QUAD_SUB_RANGE <= 3)
    {
         SC_PMA_QUAD_SUB_RANGE_47_46 := to_unsigned(PMA_QUAD_SUB_RANGE,2);
    }

    if (PMA_QUAD_OVLP >= 0 && PMA_QUAD_OVLP <= 3)
    {
         SC_PMA_QUAD_OVLP_45_44 := to_unsigned(PMA_QUAD_OVLP,2);
    }

    if (PMA_QUAD_BIST_WAIT == 1024)
    {
        SC_PMA_QUAD_BIST_WAIT_43_42 := 2'b00;
    }
    else if (PMA_QUAD_BIST_WAIT == 2048)
    {
        SC_PMA_QUAD_BIST_WAIT_43_42 := 2'b01;
    }
    else if (PMA_QUAD_BIST_WAIT == 4096)
    {
        SC_PMA_QUAD_BIST_WAIT_43_42 := 2'b10;
    }
    else if (PMA_QUAD_BIST_WAIT == 512)
    {
        SC_PMA_QUAD_BIST_WAIT_43_42 := 2'b11;
    }

    if (PMA_QUAD_BIST_TIMER == 512)
    {
        SC_PMA_QUAD_BIST_TIMER_41_40 := 2'b00;
    }
    else if (PMA_QUAD_BIST_TIMER == 1024)
    {
        SC_PMA_QUAD_BIST_TIMER_41_40 := 2'b01;
    }
    else if (PMA_QUAD_BIST_TIMER == 2048)
    {
        SC_PMA_QUAD_BIST_TIMER_41_40 := 2'b10;
    }
    else if (PMA_QUAD_BIST_TIMER == 4096)
    {
        SC_PMA_QUAD_BIST_TIMER_41_40 := 2'b11;
    }

    if (PMA_QUAD_BAND_LB >= 0 && PMA_QUAD_BAND_LB <= 7)
    {
         SC_PMA_QUAD_BAND_LB_39_37 := to_unsigned(PMA_QUAD_BAND_LB,3);
    }

    if (PMA_QUAD_BAND_HB >= 0 && PMA_QUAD_BAND_HB <= 31)
    {
         SC_PMA_QUAD_BAND_HB_36_32 := to_unsigned(PMA_QUAD_BAND_HB,5) ^ 5'b10000;
    }

    if (PMA_QUAD_FREQ_LOCK_ACCURACY >= 0 && PMA_QUAD_FREQ_LOCK_ACCURACY <= 7)
    {
         SC_PMA_QUAD_FREQ_LOCK_ACCURACY_31_29 := to_unsigned(PMA_QUAD_FREQ_LOCK_ACCURACY,3);
    }

    if (PMA_QUAD_REG_SET_LC_BAND >= 0 && PMA_QUAD_REG_SET_LC_BAND <= 31)
    {
        SC_PMA_QUAD_REG_SET_LC_BAND_28_24 := to_unsigned(PMA_QUAD_REG_SET_LC_BAND,5); 
    }

    if (PMA_QUAD_REG_SET_VCODIV >= 0 && PMA_QUAD_REG_SET_VCODIV <= 3)
    {
         SC_PMA_QUAD_REG_SET_VCODIV_23_22 := to_unsigned(PMA_QUAD_REG_SET_VCODIV,2);
    }

    if (PMA_QUAD_REGISTER_SET_VCODIV_BAND_ENABLE == "DISABLE")
    {
        SC_PMA_QUAD_REGISTER_SET_VCODIV_BAND_ENABLE_21 := 1'b0;
    }
    else if (PMA_QUAD_REGISTER_SET_VCODIV_BAND_ENABLE == "ENABLE")
    {
        SC_PMA_QUAD_REGISTER_SET_VCODIV_BAND_ENABLE_21 := 1'b1;
    }

    if (PMA_QUAD_REG_SET_PLL_LOCK == "FALSE")
    {
        SC_PMA_QUAD_REG_SET_PLL_LOCK_20 := 1'b0;
    }
    else if (PMA_QUAD_REG_SET_PLL_LOCK == "TRUE")
    {
        SC_PMA_QUAD_REG_SET_PLL_LOCK_20 := 1'b1;
    }

    if (PMA_QUAD_REGISTER_SET_PLL_LOCK_ENABLE == "DISABLE")
    {
        SC_PMA_QUAD_REGISTER_SET_PLL_LOCK_ENABLE_19 := 1'b0;
    }
    else if (PMA_QUAD_REGISTER_SET_PLL_LOCK_ENABLE == "ENABLE")
    {
        SC_PMA_QUAD_REGISTER_SET_PLL_LOCK_ENABLE_19 := 1'b1;
    }

    if (PMA_QUAD_REG_SET_VCO_HI == "FALSE")
    {
        SC_PMA_QUAD_REG_SET_VCO_HI_18 := 1'b0;
    }
    else if (PMA_QUAD_REG_SET_VCO_HI == "TRUE")
    {
        SC_PMA_QUAD_REG_SET_VCO_HI_18 := 1'b1;
    }

    if (PMA_QUAD_REG_SET_VCO_LO == "FALSE")
    {
        SC_PMA_QUAD_REG_SET_VCO_LO_17 := 1'b0;
    }
    else if (PMA_QUAD_REG_SET_VCO_LO == "TRUE")
    {
        SC_PMA_QUAD_REG_SET_VCO_LO_17 := 1'b1;
    }

    if (PMA_QUAD_REGISTER_SET_VCO_HI_VCO_LO_ENABLE == "DISABLE")
    {
        SC_PMA_QUAD_REGISTER_SET_VCO_HI_VCO_LO_ENABLE_16 := 1'b0;
    }
    else if (PMA_QUAD_REGISTER_SET_VCO_HI_VCO_LO_ENABLE == "ENABLE")
    {
        SC_PMA_QUAD_REGISTER_SET_VCO_HI_VCO_LO_ENABLE_16 := 1'b1;
    }

    if (PMA_QUAD_FORCE_LC_PLL_LOOP_EN_H == "DISABLE")
    {
        SC_PMA_QUAD_FORCE_LC_PLL_LOOP_EN_H_15 := 1'b0;
    }
    else if (PMA_QUAD_FORCE_LC_PLL_LOOP_EN_H == "ENABLE")
    {
        SC_PMA_QUAD_FORCE_LC_PLL_LOOP_EN_H_15 := 1'b1;
    }

    if (PMA_QUAD_FORCE_LC_PLL_LOOP_EN_L == "DISABLE")
    {
        SC_PMA_QUAD_FORCE_LC_PLL_LOOP_EN_L_14 := 1'b0;
    }
    else if (PMA_QUAD_FORCE_LC_PLL_LOOP_EN_L == "ENABLE")
    {
        SC_PMA_QUAD_FORCE_LC_PLL_LOOP_EN_L_14 := 1'b1;
    }

    if (PMA_QUAD_VCO_DIV_CALI_BYPASS == "FALSE")
    {
        SC_PMA_QUAD_VCO_DIV_CALI_BYPASS_13 := 1'b0;
    }
    else if (PMA_QUAD_VCO_DIV_CALI_BYPASS == "TRUE")
    {
        SC_PMA_QUAD_VCO_DIV_CALI_BYPASS_13 := 1'b1;
    }

    if (PMA_QUAD_BIST_EN == "DISABLE")
    {
        SC_PMA_QUAD_BIST_EN_12 := 1'b0;
    }
    else if (PMA_QUAD_BIST_EN == "ENABLE")
    {
        SC_PMA_QUAD_BIST_EN_12 := 1'b1;
    }

    if (PMA_QUAD_ENABLE_TXPLL_BIST_BLOCK_CLOCKS == "DISABLE")
    {
        SC_PMA_QUAD_ENABLE_TXPLL_BIST_BLOCK_CLOCKS_11 := 1'b0;
    }
    else if (PMA_QUAD_ENABLE_TXPLL_BIST_BLOCK_CLOCKS == "ENABLE")
    {
        SC_PMA_QUAD_ENABLE_TXPLL_BIST_BLOCK_CLOCKS_11 := 1'b1;
    }

    if (PMA_QUAD_LF_TESTBY2 == "DISABLE")
    {
        SC_PMA_QUAD_LF_TESTBY2_10 := 1'b0;
    }
    else if (PMA_QUAD_LF_TESTBY2 == "ENABLE")
    {
        SC_PMA_QUAD_LF_TESTBY2_10 := 1'b1;
    }

    if (PMA_QUAD_REG_SET_DIVSEL_REF >= 0 && PMA_QUAD_REG_SET_DIVSEL_REF <= 3)
    {
         SC_PMA_QUAD_REG_SET_DIVSEL_REF_9_8 := to_unsigned(PMA_QUAD_REG_SET_DIVSEL_REF,2);
    }

    if (PMA_QUAD_REG_SET_DIVSEL45_FB == "FALSE")
    {
        SC_PMA_QUAD_REG_SET_DIVSEL45_FB_7 := 1'b0;
    }
    else if (PMA_QUAD_REG_SET_DIVSEL45_FB == "TRUE")
    {
        SC_PMA_QUAD_REG_SET_DIVSEL45_FB_7 := 1'b1;
    }

    if (PMA_QUAD_REG_SET_DIVSEL_FB >= 0 && PMA_QUAD_REG_SET_DIVSEL_FB <= 7)
    {
         SC_PMA_QUAD_REG_SET_DIVSEL_FB_6_4 := to_unsigned(PMA_QUAD_REG_SET_DIVSEL_FB,3);
    }

    if (PMA_QUAD_LF_TEST_EN == "DISABLE")
    {
        SC_PMA_QUAD_LF_TEST_EN_3 := 1'b0;
    }
    else if (PMA_QUAD_LF_TEST_EN == "ENABLE")
    {
        SC_PMA_QUAD_LF_TEST_EN_3 := 1'b1;
    }

    if (PMA_QUAD_REGISTER_SET_TXPLL_DIV_ENABLE == "DISABLE")
    {
        SC_PMA_QUAD_REGISTER_SET_TXPLL_DIV_ENABLE_2 := 1'b0;
    }
    else if (PMA_QUAD_REGISTER_SET_TXPLL_DIV_ENABLE == "ENABLE")
    {
        SC_PMA_QUAD_REGISTER_SET_TXPLL_DIV_ENABLE_2 := 1'b1;
    }

    if (PMA_QUAD_FORCE_TXPLL_RESET == "FALSE")
    {
        SC_PMA_QUAD_FORCE_TXPLL_RESET_1 := 1'b0;
    }
    else if (PMA_QUAD_FORCE_TXPLL_RESET == "TRUE")
    {
        SC_PMA_QUAD_FORCE_TXPLL_RESET_1 := 1'b1;
    }

    if (PMA_QUAD_FORCE_TXPLL_ON == "FALSE")
    {
        SC_PMA_QUAD_FORCE_TXPLL_ON_0 := 1'b0;
    }
    else if (PMA_QUAD_FORCE_TXPLL_ON == "TRUE")
    {
        SC_PMA_QUAD_FORCE_TXPLL_ON_0 := 1'b1;
    }

    if (CLK_ALIGNER_RX0 >= 0 &&  CLK_ALIGNER_RX0 <= 255)
    {
         SC_CLK_ALIGNER_RX0 := to_unsigned(CLK_ALIGNER_RX0,8);
    }

    if (CLK_ALIGNER_RX1 >= 0 &&  CLK_ALIGNER_RX1 <= 255)
    {
         SC_CLK_ALIGNER_RX1 := to_unsigned(CLK_ALIGNER_RX1,8);
    }

    if (CLK_ALIGNER_RX2 >= 0 &&  CLK_ALIGNER_RX2 <= 255)
    {
         SC_CLK_ALIGNER_RX2 := to_unsigned(CLK_ALIGNER_RX2,8);
    }

    if (CLK_ALIGNER_RX3 >= 0 &&  CLK_ALIGNER_RX3 <= 255)
    {
         SC_CLK_ALIGNER_RX3 := to_unsigned(CLK_ALIGNER_RX3,8);
    }

    if (CLK_ALIGNER_TX0 >= 0 &&  CLK_ALIGNER_TX0 <= 255)
    {
         SC_CLK_ALIGNER_TX0 := to_unsigned(CLK_ALIGNER_TX0,8);
    }

    if (CLK_ALIGNER_TX1 >= 0 &&  CLK_ALIGNER_TX1 <= 255)
    {
         SC_CLK_ALIGNER_TX1 := to_unsigned(CLK_ALIGNER_TX1,8);
    }

    if (CLK_ALIGNER_TX2 >= 0 &&  CLK_ALIGNER_TX2 <= 255)
    {
         SC_CLK_ALIGNER_TX2 := to_unsigned(CLK_ALIGNER_TX2,8);
    }

    if (CLK_ALIGNER_TX3 >= 0 &&  CLK_ALIGNER_TX3 <= 255)
    {
         SC_CLK_ALIGNER_TX3 := to_unsigned(CLK_ALIGNER_TX3,8);
    }

    if (DYN_DLY_EN_RX0 == "FALSE")
    {
        SC_DYN_DLY_EN_RX0 := 1'b0;
    }
    else if (DYN_DLY_EN_RX0 == "TRUE")
    {
        SC_DYN_DLY_EN_RX0 := 1'b1;
    }

    if (DYN_DLY_EN_RX1 == "FALSE")
    {
        SC_DYN_DLY_EN_RX1 := 1'b0;
    }
    else if (DYN_DLY_EN_RX1 == "TRUE")
    {
        SC_DYN_DLY_EN_RX1 := 1'b1;
    }

    if (DYN_DLY_EN_RX2 == "FALSE")
    {
        SC_DYN_DLY_EN_RX2 := 1'b0;
    }
    else if (DYN_DLY_EN_RX2 == "TRUE")
    {
        SC_DYN_DLY_EN_RX2 := 1'b1;
    }

    if (DYN_DLY_EN_RX3 == "FALSE")
    {
        SC_DYN_DLY_EN_RX3 := 1'b0;
    }
    else if (DYN_DLY_EN_RX3 == "TRUE")
    {
        SC_DYN_DLY_EN_RX3 := 1'b1;
    }

    if (DYN_DLY_EN_TX0 == "FALSE")
    {
        SC_DYN_DLY_EN_TX0 := 1'b0;
    }
    else if (DYN_DLY_EN_TX0 == "TRUE")
    {
        SC_DYN_DLY_EN_TX0 := 1'b1;
    }

    if (DYN_DLY_EN_TX1 == "FALSE")
    {
        SC_DYN_DLY_EN_TX1 := 1'b0;
    }
    else if (DYN_DLY_EN_TX1 == "TRUE")
    {
        SC_DYN_DLY_EN_TX1 := 1'b1;
    }

    if (DYN_DLY_EN_TX2 == "FALSE")
    {
        SC_DYN_DLY_EN_TX2 := 1'b0;
    }
    else if (DYN_DLY_EN_TX2 == "TRUE")
    {
        SC_DYN_DLY_EN_TX2 := 1'b1;
    }

    if (DYN_DLY_EN_TX3 == "FALSE")
    {
        SC_DYN_DLY_EN_TX3 := 1'b0;
    }
    else if (DYN_DLY_EN_TX3 == "TRUE")
    {
        SC_DYN_DLY_EN_TX3 := 1'b1;
    }

    if (DYN_DLY_SEL_RX0 == "FALSE")
    {
        SC_DYN_DLY_SEL_RX0 := 1'b0;
    }
    else if (DYN_DLY_SEL_RX0 == "TRUE")
    {
        SC_DYN_DLY_SEL_RX0 := 1'b1;
    }

    if (DYN_DLY_SEL_RX1 == "FALSE")
    {
        SC_DYN_DLY_SEL_RX1 := 1'b0;
    }
    else if (DYN_DLY_SEL_RX1 == "TRUE")
    {
        SC_DYN_DLY_SEL_RX1 := 1'b1;
    }

    if (DYN_DLY_SEL_RX2 == "FALSE")
    {
        SC_DYN_DLY_SEL_RX2 := 1'b0;
    }
    else if (DYN_DLY_SEL_RX2 == "TRUE")
    {
        SC_DYN_DLY_SEL_RX2 := 1'b1;
    }

    if (DYN_DLY_SEL_RX3 == "FALSE")
    {
        SC_DYN_DLY_SEL_RX3 := 1'b0;
    }
    else if (DYN_DLY_SEL_RX3 == "TRUE")
    {
        SC_DYN_DLY_SEL_RX3 := 1'b1;
    }

    if (DYN_DLY_SEL_TX0 == "FALSE")
    {
        SC_DYN_DLY_SEL_TX0 := 1'b0;
    }
    else if (DYN_DLY_SEL_TX0 == "TRUE")
    {
        SC_DYN_DLY_SEL_TX0 := 1'b1;
    }

    if (DYN_DLY_SEL_TX1 == "FALSE")
    {
        SC_DYN_DLY_SEL_TX1 := 1'b0;
    }
    else if (DYN_DLY_SEL_TX1 == "TRUE")
    {
        SC_DYN_DLY_SEL_TX1 := 1'b1;
    }

    if (DYN_DLY_SEL_TX2 == "FALSE")
    {
        SC_DYN_DLY_SEL_TX2 := 1'b0;
    }
    else if (DYN_DLY_SEL_TX2 == "TRUE")
    {
        SC_DYN_DLY_SEL_TX2 := 1'b1;
    }

    if (DYN_DLY_SEL_TX3 == "FALSE")
    {
        SC_DYN_DLY_SEL_TX3 := 1'b0;
    }
    else if (DYN_DLY_SEL_TX3 == "TRUE")
    {
        SC_DYN_DLY_SEL_TX3 := 1'b1;
    }

    if (CLK_ALIGNER_RSTN_RX >= 0 &&  CLK_ALIGNER_RSTN_RX <= 15)
    {
          SC_CLK_ALIGNER_RSTN_RX := to_unsigned(CLK_ALIGNER_RSTN_RX, 4);
    }

    if (CLK_ALIGNER_RSTN_TX >= 0 &&  CLK_ALIGNER_RSTN_TX <= 15)
    {
          SC_CLK_ALIGNER_RSTN_TX := to_unsigned(CLK_ALIGNER_RSTN_TX, 4);
    }

    if (PT_LX_BISTLB_EN >= 0 &&  PT_LX_BISTLB_EN <= 15)
    {
          SC_LX_BISTLB_EN := to_unsigned(PT_LX_BISTLB_EN, 4);
    }

    if (PT_LX_ELECIDLE_EN_MSB >= 0 &&  PT_LX_ELECIDLE_EN_MSB <= 15)
    {
          SC_LX_ELECIDLE_EN_MSB := to_unsigned(PT_LX_ELECIDLE_EN_MSB, 4);
    }

    if (PT_LX_EXTLB_EN >= 0 &&  PT_LX_EXTLB_EN <= 15)
    {
          SC_LX_EXTLB_EN := to_unsigned(PT_LX_EXTLB_EN, 4);
    }

    if (PT_LX_RXDCT_EN >= 0 &&  PT_LX_RXDCT_EN <= 15)
    {
          SC_LX_RXDCT_EN := to_unsigned(PT_LX_RXDCT_EN, 4);
    }

    if (PT_LX_TX_LFMODE >= 0 &&  PT_LX_TX_LFMODE <= 15)
    {
          SC_LX_TX_LFMODE := to_unsigned(PT_LX_TX_LFMODE, 4);
    }

    if (PT_RX_LANE_POWERUP >= 0 &&  PT_RX_LANE_POWERUP <= 15)
    {
          SC_RX_LANE_POWERUP := to_unsigned(PT_RX_LANE_POWERUP, 4);
    }

    if (PT_TX_LANE_POWERUP >= 0 &&  PT_TX_LANE_POWERUP <= 15)
    {
          SC_TX_LANE_POWERUP := to_unsigned(PT_TX_LANE_POWERUP, 4);
    }

    if (PT_PLL_RSTN == "FALSE")
    {
        SC_PLL_RSTN := 1'b0;
    }
     else if (PT_PLL_RSTN == "TRUE")
    {
        SC_PLL_RSTN := 1'b1;
    }

    if (PT_PLLPOWERDOWN == "FALSE")
    {
        SC_PLLPOWERDOWN := 1'b0;
    }
     else if (PT_PLLPOWERDOWN == "TRUE")
    {
        SC_PLLPOWERDOWN := 1'b1;
    }

    if (PT_QUAD_PWRUP == "FALSE")
    {
        SC_QUAD_PWRUP := 1'b0;
    }
     else if (PT_QUAD_PWRUP == "TRUE")
    {
        SC_QUAD_PWRUP := 1'b1;
    }

    if (GRSN_DIS == "FALSE")
    {
        SC_GRSN_DIS := 1'b0;
    }
    else if (GRSN_DIS == "TRUE")
    {
        SC_GRSN_DIS := 1'b1;
    }

    if (PT_HSST_RSTN == "FALSE")
    {
        SC_HSST_RSTN := 1'b0;
    }
     else if (PT_HSST_RSTN == "TRUE")
    {
        SC_HSST_RSTN := 1'b1;
    }

    if (PT_CFG_RSTN == "FALSE")
    {
        SC_CFG_RSTN := 1'b0;
    }
     else if (PT_CFG_RSTN == "TRUE")
    {
        SC_CFG_RSTN := 1'b1;
    }

}; // end of configuration cfg of HSST



