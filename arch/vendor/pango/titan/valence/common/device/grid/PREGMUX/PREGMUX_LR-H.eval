*****************************************************************

  Device    [PREGMUX_LR]

  Author    [xiawei]

  Abstract  []

  Revision History:

********************************************************************************/
grid
device PREGMUX_LR
{

    parameter
    (
        // These are the config parameters that are used to enable formal flow. They
        // should be present in the declaration only if a MACRO is set. In normal
        // implementation flow they should be turned off.
        // FIXME
        config string TEST_MODE         = "DISABLE",               // "DISABLE" "ENABLE"
        config bit    LOCALMODEN_N[7:0] = 8'b0000_0000

    );
    port
    (
        config input SC_TESTMODEN_N  = 1'b0                 /*pragma PAP_CFG_BIT_NAME = "SC_TESTMODEN_N" */,
        config input SC_LOCALMODEN_N[7:0]   = 8'b000_0000   /*pragma PAP_CFG_BIT_NAME = "SC_LOCALMODEN_N<7>,SC_LOCALMODEN_N<6>,SC_LOCALMODEN_N<5>,SC_LOCALMODEN_N<4>,SC_LOCALMODEN_N<3>,SC_LOCALMODEN_N<2>,SC_LOCALMODEN_N<1>,SC_LOCALMODEN_N<0>" */,
        config input SC_PRECLK_TB[23:0] = 24'd0             /*pragma PAP_CFG_BIT_NAME = "SC_PRECLK_TB<23>, SC_PRECLK_TB<22>, SC_PRECLK_TB<21>, SC_PRECLK_TB<20>, SC_PRECLK_TB<19>, SC_PRECLK_TB<18>, SC_PRECLK_TB<17>, SC_PRECLK_TB<16>, SC_PRECLK_TB<15>, SC_PRECLK_TB<14>, SC_PRECLK_TB<13>, SC_PRECLK_TB<12>, SC_PRECLK_TB<11>, SC_PRECLK_TB<10>, SC_PRECLK_TB<9>, SC_PRECLK_TB<8>, SC_PRECLK_TB<7>, SC_PRECLK_TB<6>, SC_PRECLK_TB<5>, SC_PRECLK_TB<4>, SC_PRECLK_TB<3>, SC_PRECLK_TB<2>, SC_PRECLK_TB<1>, SC_PRECLK_TB<0>" */,

        input     SIG_FR_CIM[2:0] = 3'b111,
        input     CLK0[4:0]       = 5'h1f,
        input     CLK1[4:0]       = 5'h1f,
        input     CLK2[4:0]       = 5'h1f,
        input     CLK3[4:0]       = 5'h1f,
        input     CLK4[4:0]       = 5'h1f,
        input     CLK5[4:0]       = 5'h1f,
        input     CLK6[4:0]       = 5'h1f,
        input     CLK7[4:0]       = 5'h1f,
        input     GLOGEN          = 1'b1,
        output    CLKOUT[7:0]

    );

}// end of device PREGMUX_LR

/*******************************************************************************

  Device    [PREGMUX_LR]

  Author    []

  Abstract  [The structure netlist of PREGMUX_LR is described in the similar fashion 
             as in HDL. In unit instantiation statement, the formal pin may be 
             connected to net which is declared explicitly. 
             
             In Valence, the connection can also be made from formal pin to other 
             pin or port, in which case Valence compiler shall create the net to 
             fulfil the connection. The built-in naming convention is kicked in 
             to name the automatically created net. However, the objects (net, instance)
             of this netlist are going to mapped from schematic. The compiler-generated
             names cause trouble for the mapping. Therefore, all wires are declared
             explicitly in the following description]

  Revision History:

********************************************************************************/
structure netlist of PREGMUX_LR
{
     // Wires for input ports
    
    
    // Wires connecting to output ports
     routing
     {
         (
              CLK0[0],
              CLK0[1],
              CLK0[2],
              CLK0[3],
              CLK0[4]  -->  CLKOUT[0] ) = 150;
              
         (
              CLK1[0],
              CLK1[1],
              CLK1[2],
              CLK1[3],
              CLK1[4]  -->  CLKOUT[1] ) = 150;
    
         (
              CLK2[0],
              CLK2[1],
              CLK2[2],
              CLK2[3],
              CLK2[4]  -->  CLKOUT[2] ) = 150;
    
         (
              CLK3[0],
              CLK3[1],
              CLK3[2],
              CLK3[3],
              CLK3[4]  -->  CLKOUT[3] ) = 150;
    
         (
              CLK4[0],
              CLK4[1],
              CLK4[2],
              CLK4[3],
              CLK4[4]  -->  CLKOUT[4] ) = 150;
    
         (
              CLK5[0],
              CLK5[1],
              CLK5[2],
              CLK5[3],
              CLK5[4]  -->  CLKOUT[5] ) = 150;
    
         (
              CLK6[0],
              CLK6[1],
              CLK6[2],
              CLK6[3],
              CLK6[4]  -->  CLKOUT[6] ) = 150;
    
         (
              CLK7[0],
              CLK7[1],
              CLK7[2],
              CLK7[3],
              CLK7[4]  -->  CLKOUT[7] ) = 150;

     }
     
    // Internal wires

}; // end of structure netlist of PREGMUX_LR

/*******************************************************************************

  Device    [PREGMUX_LR]

  Author    []

  Abstract  [Configure the configuration bits based on the value of config parameter]

  Revision History:

********************************************************************************/
configuration cfg of PREGMUX_LR
{
   if (TEST_MODE == "DISABLE")
   {  

       if ( CLK0[0]  --> CLKOUT[0] ) 
       {
           SC_PRECLK_TB[2:0] := 3'b001;
       }
          
       if ( CLK0[1]  --> CLKOUT[0] ) 
       {
           SC_PRECLK_TB[2:0] := 3'b010;
       }
          
       if ( CLK0[2]  --> CLKOUT[0] ) 
       {
           SC_PRECLK_TB[2:0] := 3'b011;
       }
          
       if ( CLK0[3]  --> CLKOUT[0] ) 
       {
           SC_PRECLK_TB[2:0] := 3'b100;
       }
          
       if ( CLK0[4]  --> CLKOUT[0] ) 
       {
           SC_PRECLK_TB[2:0] := 3'b101;
       }
       
       if ( CLK1[0]  --> CLKOUT[1] ) 
       {
           SC_PRECLK_TB[5:3] := 3'b001;
       }
          
       if ( CLK1[1]  --> CLKOUT[1] ) 
       {
           SC_PRECLK_TB[5:3] := 3'b010;
       }
                 
       if ( CLK1[2]  --> CLKOUT[1] ) 
       {
           SC_PRECLK_TB[5:3] := 3'b011;
       }
       
          
       if ( CLK1[3]  --> CLKOUT[1] ) 
       {
           SC_PRECLK_TB[5:3] := 3'b100;
       }
                 
       if ( CLK1[4]  --> CLKOUT[1] ) 
       {
           SC_PRECLK_TB[5:3] := 3'b101;
       }
       
       if ( CLK2[0]  --> CLKOUT[2] ) 
       {
           SC_PRECLK_TB[8:6] := 3'b001;
       }
          
       if ( CLK2[1]  --> CLKOUT[2] ) 
       {
           SC_PRECLK_TB[8:6] := 3'b010;
       }
          
       if ( CLK2[2]  --> CLKOUT[2] ) 
       {
           SC_PRECLK_TB[8:6] := 3'b011;
       }
          
       if ( CLK2[3]  --> CLKOUT[2] ) 
       {
           SC_PRECLK_TB[8:6] := 3'b100;
       }
       
          
       if ( CLK2[4]  --> CLKOUT[2] ) 
       {
           SC_PRECLK_TB[8:6] := 3'b101;
       }
       
       if ( CLK3[0]  --> CLKOUT[3] ) 
       {
           SC_PRECLK_TB[11:9] := 3'b001;
       }
          
       if ( CLK3[1]  --> CLKOUT[3] ) 
       {
           SC_PRECLK_TB[11:9] := 3'b010;
       }
        
       if ( CLK3[2]  --> CLKOUT[3] ) 
       {
           SC_PRECLK_TB[11:9] := 3'b011;
       }
          
       if ( CLK3[3]  --> CLKOUT[3] ) 
       {
           SC_PRECLK_TB[11:9] := 3'b100;
       }
        
       if ( CLK3[4]  --> CLKOUT[3] ) 
       {
           SC_PRECLK_TB[11:9] := 3'b101;
       }
       
       if ( CLK4[0]  --> CLKOUT[4] ) 
       {
           SC_PRECLK_TB[14:12] := 3'b001;
       }
          
       if ( CLK4[1]  --> CLKOUT[4] ) 
       {
           SC_PRECLK_TB[14:12] := 3'b010;
       }
          
       if ( CLK4[2]  --> CLKOUT[4] ) 
       {
           SC_PRECLK_TB[14:12] := 3'b011;
       }
          
       if ( CLK4[3]  --> CLKOUT[4] ) 
       {
           SC_PRECLK_TB[14:12] := 3'b100;
       }
          
       if ( CLK4[4]  --> CLKOUT[4] ) 
       {
           SC_PRECLK_TB[14:12] := 3'b101;
       }
       
       if ( CLK5[0]  --> CLKOUT[5] ) 
       {
           SC_PRECLK_TB[17:15] := 3'b001;
       }
          
       if ( CLK5[1]  --> CLKOUT[5] ) 
       {
           SC_PRECLK_TB[17:15] := 3'b010;
       }
          
       if ( CLK5[2]  --> CLKOUT[5] ) 
       {
           SC_PRECLK_TB[17:15] := 3'b011;
       }
          
       if ( CLK5[3]  --> CLKOUT[5] ) 
       {
           SC_PRECLK_TB[17:15] := 3'b100;
       }
          
       if ( CLK5[4]  --> CLKOUT[5] ) 
       {
           SC_PRECLK_TB[17:15] := 3'b101;
       }
       
       if ( CLK6[0]  --> CLKOUT[6] ) 
       {
           SC_PRECLK_TB[20:18] := 3'b001;
       }
       
          
       if ( CLK6[1]  --> CLKOUT[6] ) 
       {
           SC_PRECLK_TB[20:18] := 3'b010;
       }
       
          
       if ( CLK6[2]  --> CLKOUT[6] ) 
       {
           SC_PRECLK_TB[20:18] := 3'b011;
       }
          
       if ( CLK6[3]  --> CLKOUT[6] ) 
       {
           SC_PRECLK_TB[20:18] := 3'b100;
       }
       
          
       if ( CLK6[4]  --> CLKOUT[6] ) 
       {
           SC_PRECLK_TB[20:18] := 3'b101;
       }
       
       if ( CLK7[0]  --> CLKOUT[7] ) 
       {
           SC_PRECLK_TB[23:21] := 3'b001;
       }
          
       if ( CLK7[1]  --> CLKOUT[7] ) 
       {
           SC_PRECLK_TB[23:21] := 3'b010;
       }
          
       if ( CLK7[2]  --> CLKOUT[7] ) 
       {
           SC_PRECLK_TB[23:21] := 3'b011;
       }
          
       if ( CLK7[3]  --> CLKOUT[7] ) 
       {
           SC_PRECLK_TB[23:21] := 3'b100;
       }
          
       if ( CLK7[4]  --> CLKOUT[7] ) 
       {
           SC_PRECLK_TB[23:21] := 3'b101;
       }
             
       SC_TESTMODEN_N := 1'b0;
   }
   else // if (TEST_MODE == "ENABLE" )
   {
       SC_TESTMODEN_N  := 1'b1;
       SC_LOCALMODEN_N := LOCALMODEN_N;       
   }

}; // end of configuration cfg of PREGMUX_LR


