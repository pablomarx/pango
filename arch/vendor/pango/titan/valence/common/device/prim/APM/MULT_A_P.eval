*****************************************************************

  Device    [MULT_A_P]

  Author    []

  Abstract  []

  Revision History:

********************************************************************************/
prim
device MULT_A_P
{
    parameter
    (
      //  config bit M9_MODE  = 1'b0, // 1'b1 1'b0
      //  config bit M19_MODE  = 1'b0,
        //config bit M27_MODE  = 1'b0
        config int OP_MULT_A  = 1'b0
       // config bit M19_MODE  = 1'b0,
        //config bit M27_MODE  = 1'b0
    );
    port
    (
         input PREADD_XA[17:0],    
         input PREADD_YA[18:0],
         input PREADD_XB[8:0],    
         input PREADD_YB[8:0],
         input xb_signed,
         input xa_signed,
         input ya_signed,
      //   input za_signed,
         output MULT_A_P[45:0]
    );
} // end of device MULT_A_P

propagation prop_mult_b_p of MULT_A_P
{
    if (   OP_MULT_A == 9 )
    {
        propagate(PREADD_XA[8:0] --> MULT_A_P[17:0]);
        propagate(PREADD_XA[17:9] --> MULT_A_P[35:18]);
        propagate(PREADD_YA[8:0] --> MULT_A_P[17:0]);
        propagate(PREADD_YA[17:9] --> MULT_A_P[35:18]);
        propagate(xa_signed --> MULT_A_P[45:0]);
        propagate(ya_signed --> MULT_A_P[45:0]);
       // propagate(za_signed --> MULT_A_P[45:0]);
        
    }
    else if (  OP_MULT_A == 19 )
    {
        propagate(PREADD_XA[17:0] --> MULT_A_P[45:0]);
        propagate(PREADD_YA[18:0] --> MULT_A_P[45:0]);
        propagate(xa_signed --> MULT_A_P[45:0]);
        propagate(ya_signed --> MULT_A_P[45:0]);
        //propagate(za_signed --> MULT_A_P[45:0]);
    }
    else if (  OP_MULT_A == 27  )
    {
        propagate(PREADD_XA[17:0] --> MULT_A_P[45:0]);
        propagate(PREADD_YA[17:0] --> MULT_A_P[45:0]);
        propagate(PREADD_XB[8:0] --> MULT_A_P[45:0]);
        propagate(PREADD_YB[8:0] --> MULT_A_P[45:0]);
        propagate(xb_signed --> MULT_A_P[45:0]);
    } 
    else 
    {
        propagate(PREADD_XA[17:0] --> MULT_A_P[45:0]);
        propagate(PREADD_YA[17:0] --> MULT_A_P[45:0]);
        propagate(xa_signed --> MULT_A_P[45:0]);
        propagate(ya_signed --> MULT_A_P[45:0]);
       // propagate(za_signed --> MULT_A_P[45:0]);
    }     
};
