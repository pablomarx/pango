*****************************************************************

  Device    [PLL_INST]

  Author    []

  Abstract  []

  Revision History:

********************************************************************************/

prim
device PLL_INST
{
     parameter
    (
        // These are the config parameters that are used to enable formal flow. They
        // should be present in the declaration only if a MACRO is set. In normal
        // implementation flow they should be turned off.

        config string CLKIN_FREQ        = "50MHZ",
        config string DYN_CLKIN_EN      = "FALSE"              ,  // enable selection mode for input clkin1 and clkin2
                                                                  // FALSE:clkin_sel =sc_clkin_sel  static mode;
                                                                  // TRUE :clkin_sel =dyn_clkin_sel  dynamic mode
        config string CLKIN_SEL         = "0"                  ,  // static selection mode for input clkin1 and clkin2
                                                                  // 0:clkin =clkmuxout1; 1:clkin =clkmuxout2
        config bit    DYN_IDIV_EN       = 1'b0                 ,  // enable selection mode for input counter
                                                                  // 1'b0:idiv_sel<0:5>=sc_idiv<0:5> static mode 
                                                                  // 1'b1:idiv_sel=dyn_idiv<0:5>  dynamic mode
        config int    STATIC_IDIV       = 63                    ,  // IDIV ratio for input clk divider
                                                                  // "1"~"64":111111~000000;
        config bit DYN_FDIV_EN          = 1'b0                 ,  // enable selection mode for feedback signals                 
                                                                  // 1'b0:fdiv_sel<0:5> =sc_fdiv<0:5> statc mode
                                                                  // 1'b1:div_sel<0:5>=dyn_fdiv<0:5> dynamic mode
        config int STATIC_FDIV          = 63                    ,  // FDIV ratio for feedback clk divider;
                                                                  // setting same as sc_idiv<5:0>
        config bit TESTSEL[1:0]         = 2'b00                ,  // used for testing the function for input div, feedback div and output div by cim routing to IO
                                                                  // 2'b00: test_clk_o=1'b0 
                                                                  // 2'b01: test_clk_o=clkout0 
                                                                  // 2'b10: test_clk_o=output from IDIV
                                                                  // 2'b11: test_clk_o=output from FDIV
        config bit OFDDN               = 1'b0                  ,  // enable obsrving the signal dn from PFD  by cim routing to IO
                                                                  // 1'b0: o_fddn=1'b0  disable; 1'b1: o_fddn=dn     enable
        config bit OFDUP               = 1'b0                  ,  // enable the signal up from PFD testing by cim routing to IO
                                                                  // 1'b0: o_fdup=1'b0  disable;  1'b1: o_fdup=up     enable
        config bit EN_FLD               = 1'b0                 ,  // enable frequency lock detection
                                                                  // 1'b0: pll_lock=1'b0 disable       "0" for frequency unlock
                                                                  // 1'b1: pll_lock=compared result    "1" for frequency lock                 
        config bit EN_PLD               = 1'b0                 ,  // enable phase lock detection
                                                                  // 1'b0: pll_lock=1'b0 disable            "0" for phase unlock
                                                                  // 1'b1: pll_lock=comared result in phase "1" for phase lock
        config bit FLD_COUNT[3:0]       = 4'b0000              ,  // counter number in FLD(frequency lock detection)
                                                                  // 4'b1111: counter num=256    4'b1110: counter num=240     4'b1101: counter num=224;
                                                                  // 4'b1100: counter num=208    4'b1011: counter num=192   ....     4'b0000: counter num=16     
        config bit CRIPPLE[1:0]         = 2'b00                ,  // alleviating high frequency ripple on control line
                                                                  // 2'b00: cap_ripple=1.61pf  2'b01: cap_ripple=3.76pf 
                                                                  // 2'b10: cap_ripple=4.65pf  2'b11: cap_ripple=8.10pf
        config bit KVOG[2:0]            = 3'b000               ,  // sc_kvog<x>=1'b0, increase KVCOcoarse, sc_kvog<x>=1'b1, increase KVCOfine
                                                                  // 3'b000:~3'b111:  increment number will be gotten based on silicon testing
        config bit FLT_OP               = 1'b0                 ,  // enable op on control line
                                                                  // 1'b0:   disable op     
        config int ICP                 = 10                    ,  // selecting icp number
                                                                  // 5'b00000:icp =10ua; 5'b00001:icp =20ua; 5'b00010:icp =30ua; 5'b00011:icp =40ua
                                                                  // 5'b00100:icp =50ua; 5'b00101:icp =60ua; 5'b00110:icp =70ua; 5'b00111:icp =80ua
                                                                  // .....  5'b11111:icp =        
        config bit PLLPD                = 1'b0                 ,  // reserved
        config bit GMC_PROG[2:0]        = 3'b000               ,  // used for adjusting gmc gain. (only used for internal trimming)
        config bit GMC_SEL[3:0]         = 4'b0000              ,  // used as a backup for gmc cell (not open to users)
        config bit LPF_REF[6:0]         = 7'b000_0000          ,  // select resistance on LPF
                                                                  // 7'b0000000: r=1x; 7'b0000001  r=1x; 7'b0000010  r=2x; 7'b0000100  r=4x
                                                                  // 7'b0001000  r=8x; 7'b0010000  r=16x; 7'b0100000  r=32x; 7'b1000000  r=48x
        config bit RST_LF               = 1'b0                 ,  // reset the fine tunning control line voltage to "0"
                                                                  // 1'b0: vhf=depended on CP        1'b1: vhf= "0" 
        config bit EN_IUP               = 1'b0                 , // Testing current for iup and idn     
        config bit TEST_ICP             = 1'b0                 , // 2'bx0: disable iup and idn testing  
                                                                 // 2'b11: enable iup testing;          
                                                                 // 2'b01: enable idn testing           
        config bit PRESET_GMC           = 1'b0                 , // preset coarse tunning control line to "1"(only for internal testing)
                                                                 // 1'b1: preset vlf to "1";  1'b0: disable preset
        config bit RESET_GMC            = 1'b0                 , // reset coarse tunning control line to "0" (only for internal testing)
                                                                 // 1'b1: reset vlf to "0";  1'b0: disable reset
        config bit GMC_REF[2:0]         = 3'b000               , // setting for the reference voltage of GMC
                                                                 // 3'b000:  gmc_ref=0.45V;  3'b001:  gmc_ref=0.5V;  3'b010:  gmc_ref=0.55V;   3'b011:  gmc_ref=0.6V
                                                                 // 3'b100:  gmc_ref=0.2V ;  3'b101:  gmc_ref=0.25V; 3'b110:  gmc_ref=0.3V ;   3'b111:  gmc_ref=0.35V
        
        config bit VCP_TEST_EN          = 1'b0                 , // testing voltage on the control line (only for internal testing)
        config bit VCP_P                = 1'b0                 , // 2'b11: enable testing voltage on the control line
                                                                 // 2'b0x: disable testing voltage on the control line
                                                                 // 2'bx0: disable testing voltage on the control line
                                                                 
        config bit FDELAY_PWD           = 1'b0                 , // reserved
        config bit IRSTEN               = 1'b0                 ,
        config bit PLLPDN               = 1'b0                 , // gate if pll can be on after chip wakeup
                                                                 // 1'b0: disable pll on
                                                                 // 1'b1: enable pll on
        config bit PWDEN                = 1'b0                 , // dynamicall control pll on or off
                                                                 // 1'b0: disable dynamtic control function 
                                                                 // 1'b1: enable dynamtic control function
        config bit RSTEN                = 1'b0                 , // gate if pll_rst can reset pll
                                                                 // 1'b0: disable pll_rst action
                                                                 // 1'b1: enable pll_rst action
        config bit ORSTEN               = 1'b0                 , // gate if reset_odiv can reset odiv0,2,3,4
                                                                 // 1'b0: disable reset_odiv action
                                                                 // 1'b1: enable  reset_odiv action
                                                                 
        config bit DYNP16S1_EN          = 1'b0                 , // gate if dynamic selection for phase and duty adjustment on the first~fourth output is available.
        config bit DYNP16S2_EN          = 1'b0                 , // 1'b0:  static selection                 1'b1:  dynamtic selection
        config bit DYNP16S3_EN          = 1'b0                 , // 1'b0:  static selection                 1'b1:  dynamtic selection
        config bit DYNP16S4_EN          = 1'b0                 , // 1'b0:  static selection                 1'b1:  dynamtic selection

        config string GATEO_EN          = "FALSE"              , // gate clks on five outputs   
        config string GATE1_EN          = "FALSE"              , // 1'b0 : disable gate function
        config string GATE2_EN          = "FALSE"              , // 1'b1:  enable  gate function
        config string GATE3_EN          = "FALSE"              , // CLKOUT_GATE[4:0]
        config string GATE4_EN          = "FALSE"              ,   
        
        config int CLKOUTMUX2           = 0                , //2'b00: clkout2=bypass  2'b01: clkout2= clkout0/div    2'b10: clkout2= psdiv2    2'b11: clkout2=vcc              
        config int CLKOUTMUX3           = 0                , //2'b00: clkout3 = bypass   2'b01: clkout3= clkout0/div  2'b10: clkout3 = psdiv3    2'b11: clkout3 = mp125div     
        config int CLKOUTMUX4           = 0                , //2'b00: clkout4 = bypass   2'b01: clkout4 = clkout0/div  2'b10: clkout4 = psdiv4   2'b11: clkout4 = count32      

        config int STATIC_PS1           = 8              , // setting for clkout1  phase-shift
                                                             // phase-shft=0\45\90\135\180\225\270\315\360:default
        config int STATIC_DU1           = 0              ,
                                                
        config int STATIC_PS2           = 8                  ,
        config int STATIC_DU2           = 0                  ,
        
        config int STATIC_PS3           = 8                  ,
        config int STATIC_DU3           = 0                  ,
        
        config int STATIC_PS4           = 8                  ,
        config int STATIC_DU4           = 0                  ,        
        
        
        config bit DYN_ODIV0_SEL        = 1'b0                 , // gate if ratio of odiv can be changed
                                                                 // 1'b0 : disable dynamic adjustment function
                                                                 // 1'b1:  enable  dynamic adjustment function
        config bit DYN_ODIV2_SEL        = 1'b0                 ,
        config bit DYN_ODIV3_SEL        = 1'b0                 ,
        config bit DYN_ODIV4_SEL        = 1'b0                 ,
        
        config bit FD_SEL0[4:0]         = 5'b0_0000            , // gate fine adjustment on internal feedback path
                                                                 // 5'b0xxxx:  bypass; 5'b10011: delay =75ps@falling edge;
                                                                 // 5'b10101: delay =100ps@falling edge; 5'b10110: delay = 50ps@falling edge      
        config bit FD_SEL1[4:0]         = 5'b0_0000            ,
        config bit FD_SEL2[4:0]         = 5'b0_0000            ,
        config bit FD_SEL3[4:0]         = 5'b0_0000            ,
        config bit FD_SEL4[4:0]         = 5'b0_0000            ,
        
        config int STATIC_ODIV          = 2                    , // odiv0 division ratio
                                                                 // 6'b000000: division ratio=/2; 6'b000001: division ratio=/4;
                                                                 // 6'b000010: division ratio=/6; 6'b000011: division ratio=/8 ~ 6'b111111: division ratio=/128
        config int STATIC_O2DIV        = 2                     ,
        config int STATIC_O3DIV        = 2                     ,
        config int STATIC_O4DIV        = 2                     ,
        
        config string SFTINDLYSEL       = "BYPASS"             , // setting for odiv0 output delay
                                                                 // 2'b00:  bypass; 2'b01: 50ps ;2'b10: 100ps ;3'b11: 150ps     
        config string FB_SEL            = "DISABLE"            , // "CLKOUT0"; "CLKOUT1"; "CLKOUT2"; "DISABLE"
                                                                 // selection for internal feedback path
                                                                 // 2'b00: feedback=clkout0; 2'b01: feedback=clkout1; 2'b10: feedback=clkout2;2'b11: feedback=vss!                
        config bit TEST_SEL             = 1'b0                 , // digital block testing
                                                                 // 1'b0:    disable testing function; 1'b1:    enable  testing function
                                                                 
        config int DIV125_M             = 0,                     // 0~63
        config int DIV125_N             = 0,                     // 0~7

          
        config int DIVK                 = 0                     , // pll_count_32bit divider parameter
                                                                 // fout=K* clkin/(4*1024*1024*1024)
        config bit LDO_TEST_EN          = 1'b0                 ,
        config bit LDO_TESTSEL          = 1'b0                 ,
        config bit LDO_VREF_TRIM[1:0]   = 2'b00                ,
        config bit PD                   = 1'b0        
    );
    port
    (
       output  O_FDDN, 
       output  O_FDUP, 
       output  PLL_LOCK, 
       output  TEST_CLK_O,

       input   CIM_MFG_VCP, 
       input   PLL_RST, 
       input   PLLPWD, 
       input   RESET_IDIV, 
       input   RESET_ODIV,
       input   TEST_CLKIN, 
       input   VCP,
       input   CIM_DYN_CLKIN_SEL,
       
       output  CLKOUT[4:0],       
       input   CLKFB,
       input   CLKIN1, 
       input   CLKIN2,
       input   CIM_DYNPS3[3:0],
       input   GATEO[4:0],
       input   CIM_DYNDU3[3:0],
       input   DYN_ODIV4_SEL_IN[5:0],
       input   DYN_ODIV3_SEL_IN[5:0],
       input   DYN_ODIV2_SEL_IN[5:0],
       input   DYN_IDIV[5:0],
       input   DYN_FDIV[5:0],
       input   CIM_DYNPS4[3:0],
       input   CIM_DYNPS2[3:0],
       input   CIM_DYNPS1[3:0],
       input   CIM_DYNODIV[5:0],
       input   CIM_DYNDU4[3:0],
       input   CIM_DYNDU2[3:0],
       input   CIM_DYNDU1[3:0]
    );
}; // end of device PLL_INST
