use pango_defs, pgt180h_defs;
use pgh_funcs,pgt180h_funcs;

/*******************************************************************************

  Author    [Xia wei]

  Abstract  [Place the logic tile. The logic tiles are placed in column-by-column
             fashion. This is a convenient place to hook up all vertical logic 
             interconnections]

  Revision History:

********************************************************************************/
structure arch_nl layout_logic_tile of devPGT180H
{
    // Tile index variable
    unsigned int tx, ty;
    
    // CLM indication (CLMS + CLMA) clm_flag = 1, (CLMA + CLMA) clm_flag = 0
    unsigned int clm_flag;
   
   // Regulate area
   const unsigned int l_tile_x0[] = { [1:4, 6:8] };
   const unsigned int l_tile_y0[] = { [123:142, 144:162] };
   
   clm_flag = 1;
   
   foreach tx ( l_tile_x0 )
   {
       foreach ty ( l_tile_y0 )
       {
           if(clm_flag == 1)
           {
               place_logic_aa_tile (tx, ty);
           }
           else
           {
               place_logic_sa_tile (tx, ty);
           }
       }
       
       clm_flag = (clm_flag == 1) ? 0 : 1;
   }

    // Regulate area
    const unsigned int l_tile_x1[] = { [9:13, 15:22, 24:31, 33:40, 42:49, 51:58, 60:67, 70:77, 79:86, 88:95, 97:104, 106:113, 115:122, 124:131, 133:136] };
    const unsigned int l_tile_y1[] = { [1:19, 21:40, 41:60, 62:81, 82:101, 103:122, 123:142, 144:162] };

    clm_flag = 1;
    
    foreach tx ( l_tile_x1 )
    {
        foreach ty ( l_tile_y1 )
        {
            if(clm_flag == 1)
            {
                place_logic_sa_tile (tx, ty);
            }
            else
            {
                place_logic_aa_tile (tx, ty);
            }
        }
        
        clm_flag = (clm_flag == 1) ? 0 : 1;
    }

}; // end of structure arch_nl layout_logic_tile of devPGT180H


library work;
use pango_defs, pgt180h_defs;
use pgh_funcs,pgt180h_funcs;

/*******************************************************************************

  Author    []

  Abstract  [Lay out the APM tiles]

  Revision History:

********************************************************************************/
structure arch_nl layout_APM of devPGT180H
{
    // Tile index variable
    unsigned int tx, ty;

    // These define the tiles in which APM tiles are placed
    const unsigned int r_tile_x0[] = { 23, 114 };
    const unsigned int r_tile_y0[] = { [0:19, 21:40, 41:60, 62:81, 82:101, 103:122, 123:142, 144:163 +:4] };

    foreach tx ( r_tile_x0 )
    {
        foreach ty ( r_tile_y0 )
        {
            place_apm_tile (tx, ty);
        }
    }

    // These define the tiles in which APM tiles are placed
    const unsigned int r_tile_x1[] = { 41, 59, 78, 96 };
    const unsigned int r_tile_y1[] = { [8:19, 21:40, 41:60, 62:81, 82:101, 103:122, 123:142, 144:155 +:4] };

    foreach tx ( r_tile_x1 )
    {
        foreach ty ( r_tile_y1 )
        {
            place_apm_tile (tx, ty);
        }
    }

}; // end of structure arch_nl layout_APM of devPGT180H


library work;
use pango_defs, pgt180h_defs;
use pgh_funcs,pgt180h_funcs;

/*******************************************************************************

  Author    []

  Abstract  [Lay out the DRM tiles]

  Revision History:

********************************************************************************/
structure arch_nl layout_DRM of devPGT180H
{
    // Tile index variable
    unsigned int tx, ty;

    // These define the tiles in which DRM tiles are placed
    const unsigned int r_tile_x0[] = { 14, 32, 50, 87, 105, 123, 132 };
    const unsigned int r_tile_y0[] = { [0:19, 21:40, 41:60, 62:81, 82:101, 103:122, 123:142, 144:163 +:5] };

    foreach tx ( r_tile_x0 )
    {
        foreach ty ( r_tile_y0 )
        {
            place_drm_tile (tx, ty);
        }
    }
    
    const unsigned int r_tile_x1[] = { 5 };
    const unsigned int r_tile_y1[] = { [123:142, 144:163 +:5] };

    foreach tx ( r_tile_x1 )
    {
        foreach ty ( r_tile_y1 )
        {
            place_drm_tile (tx, ty);
        }
    }

    const unsigned int r_tile_x2[] = { 68};
    const unsigned int r_tile_y2[] = { [0:19, 21:40, 41:60, 62:76, 87:101, 103:122, 123:142, 144:163 +:5] };

    foreach tx ( r_tile_x2 )
    {
        foreach ty ( r_tile_y2 )
        {
            place_drm_tile (tx, ty);
        }
    }
    
    const unsigned int r_tile_x3[] = { 68};
    const unsigned int r_tile_y3[] = { [77:86] };

    foreach tx ( r_tile_x3 )
    {
        foreach ty ( r_tile_y3 )
        {
            place_base_tile (tx, ty);
        }
    }
    
    place_drm0_tile(68, 77);
    
    place_drm1_tile(68, 82);
    
}; // end of structure arch_nl layout_DRM of devPGT180H

library work;
use pango_defs, pgt180h_defs;
use pgh_funcs,pgt180h_funcs;

/*******************************************************************************

  Author    []

  Abstract  [Lay out the IO tiles]

  Revision History:

********************************************************************************/
structure arch_nl layout_IO of devPGT180H
{
    // Site index variable
    unsigned int sx, sy;
    
    // Tile index variable
    unsigned int tx, ty; 
    
    /*----place base tile (IO) -- N----*/
    const unsigned int base_tile_x0[] = { [1:4], [6:13], [15:22], [24:31], [33:40], [42:49], [51:58], [60:67], [70:77], [79:86], [88:95], [97:104], [106:113], [115:122], [124:131], [133:136] };
    const unsigned int base_tile_y0[] = { 163 };

    foreach tx ( base_tile_x0 )
    {
        foreach ty ( base_tile_y0 )
        {
            place_base_tile (tx, ty);
        }
    }

    /*----place base tile (IO) -- S----*/
    const unsigned int base_tile_x1[] = { [9:13], [15:22], [24:31], [33:40], [42:49], [51:58], [60:67], [70:77], [79:86], [88:95], [97:104], [106:113], [115:122], [124:131], [133:136] };
    const unsigned int base_tile_y1[] = { 0 };

    foreach tx ( base_tile_x1 )
    {
        foreach ty ( base_tile_y1 )
        {
            place_base_tile (tx, ty);
        }
    }
    
    /*----place base tile (IO) -- W----*/
    const unsigned int base_tile_x2[] = { 0 };
    const unsigned int base_tile_y2[] = { [123:142], [144:163] };

    foreach tx ( base_tile_x2 )
    {
        foreach ty ( base_tile_y2 )
        {
            place_base_tile (tx, ty);
        }
    }

    /*----place base tile (IO) -- E----*/
    const unsigned int base_tile_x3[] = { 137};
    const unsigned int base_tile_y3[] = { [0:19], [21:40], [41:60], [62:81], [82:101], [103:122], [123:142], [144:163] };

    foreach tx ( base_tile_x3 )
    {
        foreach ty ( base_tile_y3 )
        {
            place_base_tile (tx, ty);
        }
    }
    
    /*----place io_n and io_s tiles----*/
    sy = NUM_TILE_Y - 1;

    const unsigned int io_tile_x0[] = { 15, 24, 33, 42, 51, 60, 70, 79, 88, 97, 106, 115, 124 };
    const unsigned int io_tile_y0[] = { 0, sy };
    
    unsigned int shift = 0;
    
    foreach tx ( io_tile_x0 )
    {
        foreach ty ( io_tile_y0 )
        {
            place_io_8cim_h_tile (tx, ty, shift);
        }
    }

    place_io_8cim_h_tile (6, sy, shift);

    const unsigned int io_tile_x1[] = { 1 };
    const unsigned int io_tile_y1[] = { sy };
    
    foreach tx ( io_tile_x1 )
    {
        foreach ty ( io_tile_y1 )
        {
            place_io_4cim_6io_ttfftt_h_tile (tx, ty);
        }
    }

    const unsigned int io_tile_x2[] = { 10 };
    const unsigned int io_tile_y2[] = { 0 };
    
    foreach tx ( io_tile_x2 )
    {
        foreach ty ( io_tile_y2 )
        {
            place_io_4cim_6io_ttfftt_h_tile (tx, ty);
        }
    }

    const unsigned int io_tile_x3[] = { 133};
    const unsigned int io_tile_y3[] = { 0, sy };
    
    foreach tx ( io_tile_x3 )
    {
        foreach ty ( io_tile_y3 )
        {
            place_io_4cim_6io_ffttff_h_tile (tx, ty);
        }
    }
    
    /*----place io_w tiles----*/
    place_io_1cim_v_b_tile(0, 154);
    
    const unsigned int io_tile_x4[] = { 0 };
    const unsigned int io_tile_y4[] = { 153, 142, 132 }; 
    
    unsigned int cnt = 0;
    foreach tx ( io_tile_x4 )
    {
        foreach ty ( io_tile_y4 )
        {
            if(cnt %2 == 0)
            {
                place_io_10cim_v_tile (tx, ty, 0);
            }
            else
            {
                place_io_10cim_v_tile (tx, ty, 1);
            }
            
            cnt = cnt + 1;
        }
    }
    
    /*----place io_e tiles----*/

    place_io_9cim_v_u_tile(137, 162);

    const unsigned int io_tile_x5[] = { 137 };
    const unsigned int io_tile_y5[] = { 153, 142, 132, 122, 112, 101, 91, 81, 71, 60, 50, 40, 30, 19 };
    
    cnt = 0;
    
    foreach tx ( io_tile_x5 )
    {
        foreach ty ( io_tile_y5 )
        {
            if(cnt %2 == 0)
            {
                place_io_10cim_v_tile (tx, ty, 0);
            }
            else
            {
                place_io_10cim_v_tile (tx, ty, 1);
            }
            
            cnt = cnt + 1;
        }
    }

    place_io_9cim_v_d_tile(137, 9);

    /*----place clk_delay tiles (T, B)----*/
    const unsigned int clk_tile_x0[] = { 63, 67, 70, 74 };
    const unsigned int clk_tile_y0[] = { 0, 163 };
    
    foreach tx ( clk_tile_x0 )
    {
        foreach ty ( clk_tile_y0 )
        {
            place_clk_delay_tile (tx, ty);
        }
    }     

    /*----place clk_delay tiles (E)----*/
    const unsigned int clk_tile_x1[] = { 137 };
    const unsigned int clk_tile_y1[] = { 19, 21, 60, 62, 101, 103, 142, 144 };
    
    foreach tx ( clk_tile_x1 )
    {
        foreach ty ( clk_tile_y1 )
        {
            place_clk_delay_tile (tx, ty);
        }
    }  

    /*----place clk_delay tiles (W)----*/
    const unsigned int clk_tile_x2[] = { 0 };
    const unsigned int clk_tile_y2[] = { 142, 144 };
    
    foreach tx ( clk_tile_x2 )
    {
        foreach ty ( clk_tile_y2 )
        {
            place_clk_delay_tile (tx, ty);
        }
    }  
    
};

library work;
use pango_defs, pgt180h_defs;
use pgh_funcs,pgt180h_funcs;

/*******************************************************************************

  Author    []

  Abstract  [Lay out the DLL tiles]

  Revision History:

********************************************************************************/
structure arch_nl layout_DLL of devPGT180H
{  
    place_dll_withmux_tile (DLL_TILE_X0, DLL_TILE_Y0);
    place_dll_withmux_tile (DLL_TILE_X1, DLL_TILE_Y1);
    place_dll_withmux_tile (DLL_TILE_X2, DLL_TILE_Y2);    
    place_dll_tile (DLL_TILE_X3, DLL_TILE_Y3);
};

library work;
use pango_defs, pgt180h_defs;
use pgh_funcs,pgt180h_funcs;

/*******************************************************************************

  Author    []

  Abstract  [Lay out the PLL tiles]

  Revision History:

********************************************************************************/
structure arch_nl layout_PLL of devPGT180H
{  
    place_pll_tile (PLL_TILE_X0, PLL_TILE_Y0, -1); //North    
    place_pll_tile (PLL_TILE_X1, PLL_TILE_Y1, -1);    
    place_pll_tile (PLL_TILE_X2, PLL_TILE_Y2, -1); 
    place_pll_tile (PLL_TILE_X3, PLL_TILE_Y3, -1);
    
    place_pll_tile (PLL_TILE_X4, PLL_TILE_Y4, 1); //Sourth    
    place_pll_tile (PLL_TILE_X5, PLL_TILE_Y5, 1);
    place_pll_tile (PLL_TILE_X6, PLL_TILE_Y6, 1);
    place_pll_tile (PLL_TILE_X7, PLL_TILE_Y7, 1);
};

library work;
use pango_defs, pgt180h_defs;
use pgh_funcs,pgt180h_funcs;

/*******************************************************************************

  Author    []

  Abstract  [Lay out the CLOCK tiles]

  Revision History:

********************************************************************************/
structure arch_nl layout_CLK of devPGT180H
{  
    //Global clk
    place_pre_gmux_lr_w_tile (PRE_GMUX_CLK_L_TILE_X, PRE_GMUX_CLK_L_TILE_Y);    //LEFT
    
    place_pre_gmux_lr_e_tile (PRE_GMUX_CLK_R_TILE_X, PRE_GMUX_CLK_R_TILE_Y);    //RIGHT
    
    place_pre_gmux_tb_tile (PRE_GMUX_CLK_T_TILE_X, PRE_GMUX_CLK_T_TILE_Y);   //TOP
    
    place_pre_gmux_tb_tile (PRE_GMUX_CLK_B_TILE_X, PRE_GMUX_CLK_B_TILE_Y);   //BOTTOM    
    
    place_post_gmux_tile (POST_GMUX_CLK_TILE_X, POST_GMUX_CLK_TILE_Y);       //POST_GMUX
    
    const unsigned int r_tile_x[] = { 69};
    const unsigned int r_tile_y[] = { [78:81, 83:86] };

    unsigned int tx, ty, uscm_idx, tile_num;
    
    foreach tx ( r_tile_x )
    {
        foreach ty ( r_tile_y )
        {
            if(ty == 86)
            {
                uscm_idx  = 0;
                tile_num = 0;
            }
            else if(ty == 85)
            {
                uscm_idx  = 0;
                tile_num = 1;
            }
            else if(ty == 84)
            {
                uscm_idx  = 1;
                tile_num = 0;
            }
            else if(ty == 83)
            {
                uscm_idx  = 1;
                tile_num = 1;
            }
            else if(ty == 81)
            {
                uscm_idx  = 3;
                tile_num = 0;
            }
            else if(ty == 80)
            {
                uscm_idx  = 3;
                tile_num = 1;
            }            
            else if(ty == 79)
            {
                uscm_idx  = 2;
                tile_num = 0;
            }   
            else if(ty == 78)
            {
                uscm_idx  = 2;
                tile_num = 1;
            }
                     
            place_uscm_tile (tx, ty, uscm_idx, tile_num);   //USCM
        }
    }

    //Regional clk
    place_reg_hmux_tile (REG_HMUX01_CLK_TILE_X, REG_HMUX01_CLK_TILE_Y);       //HMUX0, HMUX1
    place_reg_hmux_tile (REG_HMUX23_CLK_TILE_X, REG_HMUX23_CLK_TILE_Y);       //HMUX2, HMUX3
    place_reg_hmux_tile (REG_HMUX45_CLK_TILE_X, REG_HMUX45_CLK_TILE_Y);       //HMUX4, HMUX5
    place_reg_hmux_tile (REG_HMUX67_CLK_TILE_X, REG_HMUX67_CLK_TILE_Y);       //HMUX6, HMUX7
    
    place_reg_vmux_tile (REG_VMUX0_CLK_TILE_X, REG_VMUX0_CLK_TILE_Y);       //VMUX0
    place_reg_vmux_tile (REG_VMUX1_CLK_TILE_X, REG_VMUX1_CLK_TILE_Y);       //VMUX1
    place_reg_vmux_tile (REG_VMUX2_CLK_TILE_X, REG_VMUX2_CLK_TILE_Y);       //VMUX2
    place_reg_vmux_tile (REG_VMUX3_CLK_TILE_X, REG_VMUX3_CLK_TILE_Y);       //VMUX3
    place_reg_vmux_tile (REG_VMUX4_CLK_TILE_X, REG_VMUX4_CLK_TILE_Y);       //VMUX4
    place_reg_vmux_tile (REG_VMUX5_CLK_TILE_X, REG_VMUX5_CLK_TILE_Y);       //VMUX5
    place_reg_vmux_tile (REG_VMUX6_CLK_TILE_X, REG_VMUX6_CLK_TILE_Y);       //VMUX6
    place_reg_vmux_tile (REG_VMUX7_CLK_TILE_X, REG_VMUX7_CLK_TILE_Y);       //VMUX7

    //IO clk
    place_ioclkgen_tb_tile (IOCLKGEN_T0_TILE_X, IOCLKGEN_T0_TILE_Y, 0);   //TOP IOCLKGEN
    place_ioclkgen_tb_tile (IOCLKGEN_T1_TILE_X, IOCLKGEN_T1_TILE_Y, 0);   //TOP IOCLKGEN
    
    place_ioclkgen_tb_tile (IOCLKGEN_B0_TILE_X, IOCLKGEN_B0_TILE_Y, 1);   //BOTTOM IOCLKGEN
    place_ioclkgen_tb_tile (IOCLKGEN_B1_TILE_X, IOCLKGEN_B1_TILE_Y, 1);   //BOTTOM IOCLKGEN
    
    place_ioclkgen_r_tile (IOCLKGEN_R0_TILE_X, IOCLKGEN_R0_TILE_Y);   //RIGHT IOCLKGEN
    place_ioclkgen_r_tile (IOCLKGEN_R1_TILE_X, IOCLKGEN_R1_TILE_Y);   //RIGHT IOCLKGEN

    place_ioclkgen_l_tile (IOCLKGEN_L_TILE_X, IOCLKGEN_L_TILE_Y);   //LEFT IOCLKGEN

    place_ioclk_bridge_tile (IO_CLK_BRIDGE_X, IO_CLK_BRIDGE_Y);   //IO CLK BRIDGE
    
    //clk buf
    const unsigned int r_tile_cb_x0[] = { [8:68] , [70:137] };
    const unsigned int r_tile_cb_y0[] = { 20, 61, 102 };
    
    foreach tx ( r_tile_cb_x0 )
    {
        foreach ty ( r_tile_cb_y0 )
        {
            place_clk_buf_tile(tx, ty);
        }
    }    
    
    const unsigned int r_tile_cb_x1[] = { [0:68] , [70:137] };
    const unsigned int r_tile_cb_y1[] = { 143 };
    
    foreach tx ( r_tile_cb_x1 )
    {
        foreach ty ( r_tile_cb_y1 )
        {
            place_clk_buf_tile(tx, ty);
        }
    }    
    
};


library work;
use pango_defs, pgt180h_defs;
use pgh_funcs,pgt180h_funcs;

/*******************************************************************************

  Author    []

  Abstract  [Lay out the CCS tiles]

  Revision History:

********************************************************************************/
structure arch_nl layout_CCS of devPGT180H
{ 
    place_start_tile(START_X, START_Y);
    
    place_grs_tile(START_X, START_Y);
    
    place_efusecode_tile(EFUSECODE_X, EFUSECODE_Y);
    
    place_scanchain_tile(SCANCHAIN1_X, SCANCHAIN1_Y);
    
    place_scanchain_tile(SCANCHAIN0_X, SCANCHAIN0_Y);
    
    place_ipal_tile(IPAL_X, IPAL_Y);
    
}

library work;
use pango_defs, pgt180h_defs;
use pgh_funcs,pgt180h_funcs;

/*******************************************************************************

  Author    []

  Abstract  [Lay out the LLC tiles]

  Revision History:

********************************************************************************/
structure arch_nl layout_LLC of devPGT180H
{ 
    //place_osc_tile(OSC_X, OSC_Y); 
}

library work;
use pango_defs, pgt180h_defs;
use pgh_funcs,pgt180h_funcs;
/*******************************************************************************

  Author    [xiawei]

  Abstract  [Lay out the HSST tiles]

  Revision History:

********************************************************************************/
structure arch_nl layout_HSST of devPGT180H
{ 
    //base tile
    const unsigned int b_tile_x1[] = { 8 };
    const unsigned int b_tile_y1[] = { [0:19], [21:40], [41:60], [62:81], [82:101], [103:122] }; 
    
    unsigned int tx, ty;
    
    foreach tx ( b_tile_x1 )
    {
        foreach ty ( b_tile_y1 )
        {
            place_base_tile(tx, ty);
        }
    }    

    //hsst buf
    const unsigned int h_tile_x1[] = { 0 };
    const unsigned int h_tile_y1[] = { 0,41,82 };
    
    foreach tx ( h_tile_x1 )
    {
        foreach ty ( h_tile_y1 )
        {
            place_hsst_tile(tx, ty);
        }
    }    
    
    unsigned int sx0, sx1, sx2, sy0, sy1, sy2;
    
    sx0 = 0 * TILE_NUM_SITE_X;
    sx1 = 0 * TILE_NUM_SITE_X;
    sx2 = 0 * TILE_NUM_SITE_X;
    sy0 = 0 * TILE_NUM_SITE_Y;        
    sy1 = 41 * TILE_NUM_SITE_Y;        
    sy2 = 82 * TILE_NUM_SITE_Y;      
    
    connect
    (
        <pin REFCK_FRNMQ of <device HSST @([sx0+1,sy0])>>  =>  <wire REFCK_2NPQ of <device HSST @([sx1+1,sy1])>>,    
        <pin REFCK_FRNPQ of <device HSST @([sx0+1,sy0])>>  =>  1'b0,    

        <pin REFCK_FRNMQ of <device HSST @([sx1+1,sy1])>>  =>  <wire REFCK_2NPQ of <device HSST @([sx2+1,sy2])>>,    
        <pin REFCK_FRNPQ of <device HSST @([sx1+1,sy1])>>  =>  <wire REFCK_2NMQ of <device HSST @([sx0+1,sy0])>>,    

        <pin REFCK_FRNMQ of <device HSST @([sx2+1,sy2])>>  =>  1'b0,
        <pin REFCK_FRNPQ of <device HSST @([sx2+1,sy2])>>  =>  <wire REFCK_2NMQ of <device HSST @([sx1+1,sy1])>>    
    );//end of -- connect
        
}

