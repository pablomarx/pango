k;
use pango_defs, pgh_funcs, pgt180h_funcs, pgt180h_defs;

/*******************************************************************************

  Author    [zhang min]

  Abstract  [Connect global clock, regional clock, IO clock wire]

  Revision History:

********************************************************************************/
structure arch_nl connect_clock of devPGT180H
{
    //connect global clock wire
    connect_global_clock_mux 
    (
        POST_GMUX_CLK_TILE_X   ,
        POST_GMUX_CLK_TILE_Y   ,
        
        PRE_GMUX_CLK_L_TILE_X  ,
        PRE_GMUX_CLK_L_TILE_Y  ,
        
        PRE_GMUX_CLK_R_TILE_X  ,
        PRE_GMUX_CLK_R_TILE_Y  ,
        
        PRE_GMUX_CLK_T_TILE_X  ,
        PRE_GMUX_CLK_T_TILE_Y  ,
        
        PRE_GMUX_CLK_B_TILE_X  ,
        PRE_GMUX_CLK_B_TILE_Y  ,
    
        PLL_TILE_X0 ,
        PLL_TILE_Y0 ,
        
        PLL_TILE_X1 ,
        PLL_TILE_Y1 ,
        
        PLL_TILE_X2 ,
        PLL_TILE_Y2 ,
        
        PLL_TILE_X3 ,
        PLL_TILE_Y3 ,
        
        PLL_TILE_X4 ,
        PLL_TILE_Y4 ,
        
        PLL_TILE_X5 ,
        PLL_TILE_Y5 ,
        
        PLL_TILE_X6 ,
        PLL_TILE_Y6 ,
        
        PLL_TILE_X7 ,
        PLL_TILE_Y7 ,
        
        USCM_TILE_X  ,
        
        USCM_NW_TILE0_Y ,
        USCM_NW_TILE1_Y ,

        USCM_NE_TILE0_Y ,
        USCM_NE_TILE1_Y ,

        USCM_SW_TILE0_Y ,
        USCM_SW_TILE1_Y ,

        USCM_SE_TILE0_Y ,
        USCM_SE_TILE1_Y ,
        
        IOCLKGEN_T0_TILE_X ,
        IOCLKGEN_T0_TILE_Y ,                         
        IOCLKGEN_T1_TILE_X ,
        IOCLKGEN_T1_TILE_Y , 
    
        IOCLKGEN_B0_TILE_X ,
        IOCLKGEN_B0_TILE_Y ,
        IOCLKGEN_B1_TILE_X ,
        IOCLKGEN_B1_TILE_Y ,

        IOCLKGEN_R0_TILE_X ,
        IOCLKGEN_R0_TILE_Y ,
        IOCLKGEN_R1_TILE_X ,
        IOCLKGEN_R1_TILE_Y ,
    
        IOCLKGEN_L_TILE_X ,
        IOCLKGEN_L_TILE_Y 
    );

    // connect regional clock wire
    connect_regional_clock_mux 
    (
        REG_HMUX01_CLK_TILE_X ,
        REG_HMUX01_CLK_TILE_Y ,
                              
        REG_HMUX23_CLK_TILE_X ,
        REG_HMUX23_CLK_TILE_Y ,
                              
        REG_HMUX45_CLK_TILE_X ,
        REG_HMUX45_CLK_TILE_Y ,
                              
        REG_HMUX67_CLK_TILE_X ,
        REG_HMUX67_CLK_TILE_Y ,
                              
        REG_VMUX0_CLK_TILE_X  ,
        REG_VMUX0_CLK_TILE_Y  ,
                              
        REG_VMUX1_CLK_TILE_X  ,
        REG_VMUX1_CLK_TILE_Y  ,
                              
        REG_VMUX2_CLK_TILE_X  ,
        REG_VMUX2_CLK_TILE_Y  ,
                              
        REG_VMUX3_CLK_TILE_X  ,
        REG_VMUX3_CLK_TILE_Y  ,
        
        REG_VMUX4_CLK_TILE_X  ,
        REG_VMUX4_CLK_TILE_Y  ,
                              
        REG_VMUX5_CLK_TILE_X  ,
        REG_VMUX5_CLK_TILE_Y  ,
                              
        REG_VMUX6_CLK_TILE_X  ,
        REG_VMUX6_CLK_TILE_Y  ,
                              
        REG_VMUX7_CLK_TILE_X  ,
        REG_VMUX7_CLK_TILE_Y  ,

        IOCLKGEN_R0_TILE_X ,
        IOCLKGEN_R0_TILE_Y ,
        IOCLKGEN_R1_TILE_X ,
        IOCLKGEN_R1_TILE_Y ,
        
        IOCLKGEN_T0_TILE_X ,
        IOCLKGEN_T0_TILE_Y ,                         
        IOCLKGEN_T1_TILE_X ,
        IOCLKGEN_T1_TILE_Y , 
        
        IOCLKGEN_B0_TILE_X ,
        IOCLKGEN_B0_TILE_Y ,
        IOCLKGEN_B1_TILE_X ,
        IOCLKGEN_B1_TILE_Y ,
        
        IOCLKGEN_L_TILE_X ,
        IOCLKGEN_L_TILE_Y ,
    
        PLL_TILE_X0           ,
        PLL_TILE_Y0           ,
        
        PLL_TILE_X1           ,
        PLL_TILE_Y1           ,
        
        PLL_TILE_X2           ,
        PLL_TILE_Y2           ,
        
        PLL_TILE_X3           ,
        PLL_TILE_Y3           ,

        PLL_TILE_X4           ,
        PLL_TILE_Y4           ,
        
        PLL_TILE_X5           ,
        PLL_TILE_Y5           ,
        
        PLL_TILE_X6           ,
        PLL_TILE_Y6           ,
        
        PLL_TILE_X7           ,
        PLL_TILE_Y7           

    );
    

    // connect IO clock wire
    connect_io_clock_mux 
    (
        IOCLKGEN_T0_TILE_X ,
        IOCLKGEN_T0_TILE_Y ,                         
        IOCLKGEN_T1_TILE_X ,
        IOCLKGEN_T1_TILE_Y , 
                           
        IOCLKGEN_B0_TILE_X ,
        IOCLKGEN_B0_TILE_Y ,
        IOCLKGEN_B1_TILE_X ,
        IOCLKGEN_B1_TILE_Y ,
                           
        IOCLKGEN_R0_TILE_X ,
        IOCLKGEN_R0_TILE_Y ,
        IOCLKGEN_R1_TILE_X ,
        IOCLKGEN_R1_TILE_Y ,

        IOCLKGEN_L_TILE_X ,
        IOCLKGEN_L_TILE_Y ,
        
        IO_CLK_BRIDGE_X    ,
        IO_CLK_BRIDGE_Y
    
    );

    const unsigned int r_tile_clkdly_x[] = { 137 };
    const unsigned int r_tile_clkdly_y[] = { 19,19,19, 21,21,22, 60,60,60, 62,62,63, 101,101,101, 103,103,104, 142,142,142, 144,144,145 };
    
    const unsigned int l0_tile_clkdly_x[] = { 0 };
    const unsigned int l0_tile_clkdly_y[] = { 142,141,142 };
    
    const unsigned int l1_tile_clkdly_x[] = { 0 };
    const unsigned int l1_tile_clkdly_y[] = { 144,146,145 };

    const unsigned int t_tile_clkdly_x[] = { 63,63,68, 67,62,66, 70,75,70, 74,76,72 };
    const unsigned int t_tile_clkdly_y[] = { 163 };
    
    const unsigned int b_tile_clkdly_x[] = { 63,64,68, 67,65,66, 70,73,72, 74,74,70 };
    const unsigned int b_tile_clkdly_y[] = { 0 };

    unsigned int tx, ty, cnt, ioTx, ioTy, oCimTx, oCimTy;
    
    //connect clk_delay in right
    cnt = 0;
    foreach tx ( r_tile_clkdly_x )
    {
        foreach ty ( r_tile_clkdly_y )
        {
            if(cnt % 3 == 0)
            {
                ioTy = ty;
            }
            else if(cnt % 3 == 1)
            {
                oCimTy = ty;
            }
            else if(cnt % 3 == 2)
            {
                connect_clk_delay_tbr(tx, ioTy, tx, oCimTy, tx, ty, NUM_TILE_X, NUM_TILE_Y); 
            }
            
            cnt = cnt + 1;
        }
    } 
    
    //connect clk_delay in left
    cnt = 0;
    foreach tx ( l0_tile_clkdly_x )
    {
        foreach ty ( l0_tile_clkdly_y )
        {
            if(cnt % 3 == 0)
            {
                ioTy = ty;
            }
            else if(cnt % 3 == 1)
            {
                oCimTy = ty;
            }
            else if(cnt % 3 == 2)
            {
                connect_clk_delay_l0(tx, ioTy, tx, oCimTy, tx, ty, NUM_TILE_X, NUM_TILE_Y); 
            }
            
            cnt = cnt + 1;
        }
    } 
    
    cnt = 0;
    foreach tx ( l1_tile_clkdly_x )
    {
        foreach ty ( l1_tile_clkdly_y )
        {
            if(cnt % 3 == 0)
            {
                ioTy = ty;
            }
            else if(cnt % 3 == 1)
            {
                oCimTy = ty;
            }
            else if(cnt % 3 == 2)
            {
                connect_clk_delay_l1(tx, ioTy, tx, oCimTy, tx, ty, NUM_TILE_X, NUM_TILE_Y); 
            }
            
            cnt = cnt + 1;
        }
    } 

    //connect clk_delay in top
    cnt = 0;
    foreach tx ( t_tile_clkdly_x )
    {
        foreach ty ( t_tile_clkdly_y )
        {
            if(cnt % 3 == 0)
            {
                ioTx = tx;
            }
            else if(cnt % 3 == 1)
            {
                oCimTx = tx;
            }
            else if(cnt % 3 == 2)
            {
                connect_clk_delay_tbr(ioTx, ty, oCimTx, ty, tx, ty, NUM_TILE_X, NUM_TILE_Y); 
            }
            
            cnt = cnt + 1;
        }
    } 
    
    //connect clk_delay in bottom
    cnt = 0;
    foreach tx ( b_tile_clkdly_x )
    {
        foreach ty ( b_tile_clkdly_y )
        {
            if(cnt % 3 == 0)
            {
                ioTx = tx;
            }
            else if(cnt % 3 == 1)
            {
                oCimTx = tx;
            }
            else if(cnt % 3 == 2)
            {
                connect_clk_delay_tbr(ioTx, ty, oCimTx, ty, tx, ty, NUM_TILE_X, NUM_TILE_Y); 
            }
            
            cnt = cnt + 1;
        }
    } 
    
    unsigned int from_x, to_x;
    unsigned int from_y, to_y;
    
    //connect connect_io_sgmii in top
    const unsigned int r_tile_t_x[] = { 6,7, 9,10, 11,13, 15,16, 18,19, 20,22, 24,25, 27,28, 29,31, 33,34, 36,37, 38,40, 42,43, 45,46, 47,49, 51,52, 54,55, 56,58, 60,61, 63,64, 65,67,
                                                    70,71, 73,74, 75,77, 79,80, 82,83, 84,86, 88,89, 91,92, 93,95, 97,98, 100,101, 102,104, 106,107, 109,110, 111,113, 115,116, 118,119, 120,122,
                                                    124,125, 127,128, 129,131 };
    const unsigned int r_tile_t_y[] = { 163 };
    cnt = 0;
    
    foreach ty ( r_tile_t_y )
    {
        foreach tx ( r_tile_t_x )
        {
            if(cnt % 2 == 0)
            {
                from_x = tx;
            }
            else if(cnt % 2 == 1)
            {
                to_x = tx;
                
                connect_iobl_sgmii(from_x, ty, to_x, ty);
            }
            
            cnt = cnt + 1;
        }
    }     
    
    //connect connect_io_sgmii in bottom
    const unsigned int r_tile_b_x[] = { 15,16, 18,19, 20,22, 24,25, 27,28, 29,31, 33,34, 36,37, 38,40, 42,43, 45,46, 47,49, 51,52, 54,55, 56,58, 60,61, 63,64, 65,67,
                                                     70,71, 73,74, 75,77, 79,80, 82,83, 84,86, 88,89, 91,92, 93,95, 97,98, 100,101, 102,104, 106,107, 109,110, 111,113, 115,116, 118,119, 120,122,
                                                     124,125, 127,128, 129,131 };
    const unsigned int r_tile_b_y[] = { 0 };
    cnt = 0;
    
    foreach ty ( r_tile_b_y )
    {
        foreach tx ( r_tile_b_x )
        {
            if(cnt % 2 == 0)
            {
                from_x = tx;
            }
            else if(cnt % 2 == 1)
            {
                to_x = tx;
                
                connect_iobl_sgmii(from_x, ty, to_x, ty);
            }
            
            cnt = cnt + 1;
        }
    }     
    
    //connect connect_io_sgmii in left
    const unsigned int r_tile_w_x[] = { 0 };
    const unsigned int r_tile_w_y[] = { 153,152, 150,149, 147,146, 141,139, 138,136, 135,133, 132,131, 129,128, 126,125 };
    cnt = 0;
    
    foreach tx ( r_tile_w_x )
    {
        foreach ty ( r_tile_w_y )
        {
            if(cnt % 2 == 0)
            {
                from_y = ty;
            }
            else if(cnt % 2 == 1)
            {
                to_y = ty;
                
                connect_iob_sgmii(tx, from_y, tx, to_y); 
            }
            
            cnt = cnt + 1;
        }
    } 
    
    //connect connect_io_sgmii in right
    const unsigned int r_tile_e_x[] = { 137 };
    const unsigned int r_tile_e_y[] = { 162,160, 159,157, 156,154, 153,152, 150,149, 147,146,
                                                    141,139, 138,136, 135,133, 132,131, 129,128, 126,125, 
                                                    121,119, 118,116, 115,113, 112,111, 109,108, 106,105,
                                                    100,98, 97,95, 94,92, 91,90, 88,87, 85,84, 
                                                    80,78, 77,75, 74,72, 71,70, 68,67, 65,64, 
                                                    59,57, 56,54, 53,51, 50,49, 47,46, 44,43, 39,37, 36,34, 
                                                    33,31, 30,29, 27,26, 24,23, 18,16, 15,13, 12,10, 9,8, 6,5, 3,2 };
    cnt = 0;
    
    foreach tx ( r_tile_e_x )
    {
        foreach ty ( r_tile_e_y )
        {
            if(cnt % 2 == 0)
            {
                from_y = ty;
            }
            else if(cnt % 2 == 1)
            {
                to_y = ty;
                
                connect_iob_sgmii(tx, from_y, tx, to_y); 
            }
            
            cnt = cnt + 1;
        }
    } 

}; // end of structure arch_nl connect_clock of devPGT180H

