use pango_defs, pango_floorplan_funcs, pgt180h_defs;

floorplan
structure fp_struct place_logic_resource of device devPGT180H
{
    // Tile index variable
    unsigned int tx, ty;      
    
    // CLM indication (CLMS + CLMA) clm_flag = 1, (CLMA + CLMA) clm_flag = 0
    unsigned int clm_flag;

    // Regulate area
    const unsigned int CLM_tile_x0[] = { [1:4, 6:8] };
    const unsigned int CLM_tile_y0[] = { [123:142, 144:162] };
    const unsigned int CLM_tile_x1[] = { [9:13, 15:22, 24:31, 33:40, 42:49, 51:58, 60:67, 70:77, 79:86, 88:95, 97:104, 106:113, 115:122, 124:131, 133:136] };
    const unsigned int CLM_tile_y1[] = { [1:19, 21:40, 41:60, 62:81, 82:101, 103:122, 123:142, 144:162] };
    
    clm_flag = 1;
    foreach tx ( CLM_tile_x0 )
    {
        foreach ty ( CLM_tile_y0 )
        {
            if(clm_flag == 1)
            {
                place_logic_aa_tile_fp (tx, ty, BLANK_X0);
            }
            else
            {
                place_logic_sa_tile_fp (tx, ty, BLANK_X0);
            }
        }
        
        clm_flag = (clm_flag == 1) ? 0 : 1;
    }
    
    clm_flag = 1;
    foreach tx ( CLM_tile_x1 )
    {
        foreach ty ( CLM_tile_y1 )
        {
            if(clm_flag == 1)
            {
                place_logic_sa_tile_fp (tx, ty, BLANK_X0);
            }
            else
            {
                place_logic_aa_tile_fp (tx, ty, BLANK_X0);
            }
        }
        
        clm_flag = (clm_flag == 1) ? 0 : 1;
    }

 
    //APM tile
    const unsigned int APM_tile_x0[] = { 23, 114 };
    const unsigned int APM_tile_y0[] = { [0:19, 21:40, 41:60, 62:81, 82:101, 103:122, 123:142, 144:163 +:4] };   
    const unsigned int APM_tile_x1[] = { 41, 59, 78, 96 };
    const unsigned int APM_tile_y1[] = { [8:19, 21:40, 41:60, 62:81, 82:101, 103:122, 123:142, 144:155 +:4] };   
   
    place_apm_tile_fp(APM_tile_x0, APM_tile_y0, BLANK_X0); 
    place_apm_tile_fp(APM_tile_x1, APM_tile_y1, BLANK_X0);
    
   
    //DRM tile
    const unsigned int DRM_tile_x0[] = { 14, 32, 50, 87, 105, 123, 132 };
    const unsigned int DRM_tile_y0[] = { [0:19, 21:40, 41:60, 62:81, 82:101, 103:122, 123:142, 144:163 +:5] };   
    const unsigned int DRM_tile_x1[] = { 5 };
    const unsigned int DRM_tile_y1[] = { [123:142, 144:163 +:5] };  
    const unsigned int DRM_tile_x2[] = { 68};
    const unsigned int DRM_tile_y2[] = { [0:19, 21:40, 41:60, 62:76, 87:101, 103:122, 123:142, 144:163 +:5] };

    place_drm_tile_fp(DRM_tile_x0, DRM_tile_y0, BLANK_X0);      
    place_drm_tile_fp(DRM_tile_x1, DRM_tile_y1, BLANK_X0);  
    place_drm_tile_fp(DRM_tile_x2, DRM_tile_y2, BLANK_X0);  

    place_drm0_tile_fp(68, 77, BLANK_X0);
    place_drm1_tile_fp(68, 82, BLANK_X0); 
    
    // Site index variable
    unsigned int sx, sy;
    
    //----place io_n and io_s tiles----//
    sy = NUM_TILE_Y - 1;

    const unsigned int io_tile_x0[] = { 15, 24, 33, 42, 51, 60, 70, 79, 88, 97, 106, 115, 124 };
    const unsigned int io_tile_y0[] = { 0, sy };
    
    foreach tx ( io_tile_x0 )
    {
        foreach ty ( io_tile_y0 )
        {
            place_io_8cim_h_tile_fp (tx, ty, NUM_TILE_X, NUM_TILE_Y, BLANK_X0);
        }
    }

    place_io_8cim_h_tile_fp (6, sy, NUM_TILE_X, NUM_TILE_Y, BLANK_X0);

    const unsigned int io_tile_x1[] = { 1 };
    const unsigned int io_tile_y1[] = { sy };
    
    foreach tx ( io_tile_x1 )
    {
        foreach ty ( io_tile_y1 )
        {
            place_io_4cim_6io_ttfftt_h_tile_fp (tx, ty, NUM_TILE_X, NUM_TILE_Y);
        }
    }

    const unsigned int io_tile_x2[] = { 10 };
    const unsigned int io_tile_y2[] = { 0 };
    
    foreach tx ( io_tile_x2 )
    {
        foreach ty ( io_tile_y2 )
        {
            place_io_4cim_6io_ttfftt_h_tile_fp (tx, ty, NUM_TILE_X, NUM_TILE_Y);
        }
    }

    const unsigned int io_tile_x3[] = { 133};
    const unsigned int io_tile_y3[] = { 0, sy };
    
    foreach tx ( io_tile_x3 )
    {
        foreach ty ( io_tile_y3 )
        {
            place_io_4cim_6io_ffttff_h_tile_fp (tx, ty, NUM_TILE_X, NUM_TILE_Y);
        }
    }
    
    //----place io_w tiles----//
    place_io_l_1b_tile_fp(0, 154);
    
    const unsigned int io_tile_x4[] = { 0 };
    const unsigned int io_tile_y4[] = { 153, 142, 132 }; 
    
    unsigned int cnt = 0;
    foreach tx ( io_tile_x4 )
    {
        foreach ty ( io_tile_y4 )
        {
            if(cnt %2 == 0)
            {
                place_io_10cim_v_tile_fp (tx, ty, NUM_TILE_X, NUM_TILE_Y, 0, BLANK_X0);
            }
            else
            {
                place_io_10cim_v_tile_fp (tx, ty, NUM_TILE_X, NUM_TILE_Y, 1, BLANK_X0);
            }
            
            cnt = cnt + 1;
        }
    }
    
    //----place io_e tiles----//

    place_io_9cim_v_u_tile_fp(137, 162, NUM_TILE_X, NUM_TILE_Y, BLANK_X0);

    const unsigned int io_tile_x5[] = { 137 };
    const unsigned int io_tile_y5[] = { 153, 142, 132, 122, 112, 101, 91, 81, 71, 60, 50, 40, 30, 19 };
    
    cnt = 0;
    
    foreach tx ( io_tile_x5 )
    {
        foreach ty ( io_tile_y5 )
        {
            if(cnt %2 == 0)
            {
                place_io_10cim_v_tile_fp (tx, ty, NUM_TILE_X, NUM_TILE_Y, 0, BLANK_X0);
            }
            else
            {
                place_io_10cim_v_tile_fp (tx, ty, NUM_TILE_X, NUM_TILE_Y, 1, BLANK_X0);
            }
            
            cnt = cnt + 1;
        }
    }

    place_io_9cim_v_d_tile_fp(137, 9, NUM_TILE_X, NUM_TILE_Y, BLANK_X0);
      
  //------------------------------//
  // draw clk_delay tiles (T, B) //
  //------------------------------//   
  const unsigned int clk_delay_tile_x0[] = { 63, 67, 70, 74 };
  const unsigned int clk_delay_tile_y0[] = { 0, 163 };
  
  foreach tx ( clk_delay_tile_x0 )
  {
      foreach ty ( clk_delay_tile_y0 )
      {
          place_clk_delay_tile_fp (tx, ty, NUM_TILE_X, NUM_TILE_Y, BLANK_X0);
      }
  }     

  //------------------------------//
  // draw clk_delay tiles (E) //
  //------------------------------//   
  const unsigned int clk_delay_tile_x1[] = { 137 };
  const unsigned int clk_delay_tile_y1[] = { 19, 21, 60, 62, 101, 103, 142, 144 };
  
  foreach tx ( clk_delay_tile_x1 )
  {
      foreach ty ( clk_delay_tile_y1 )
      {
          place_clk_delay_tile_fp (tx, ty, NUM_TILE_X, NUM_TILE_Y, BLANK_X0);
      }
  }   
  
   //------------------------------//
   // draw clk_delay tiles (W) //
   //------------------------------//   
   const unsigned int clk_delay_tile_x2[] = { 0 };
   const unsigned int clk_delay_tile_y2[] = { 142, 144 };
   
   foreach tx ( clk_delay_tile_x2 )
   {
       foreach ty ( clk_delay_tile_y2 )
       {
           place_clk_delay_tile_fp (tx, ty, NUM_TILE_X, NUM_TILE_Y, BLANK_X0);
       }
   }   
          
    //DLL tile
    
    place_dll_tile_fp(DLL_TILE_X0, DLL_TILE_Y0, BLANK_X0); 
    place_dll_tile_fp(DLL_TILE_X1, DLL_TILE_Y1, BLANK_X0);  
    place_dll_tile_fp(DLL_TILE_X2, DLL_TILE_Y2, BLANK_X0);      
    place_dll_tile_fp(DLL_TILE_X3, DLL_TILE_Y3, BLANK_X0);  
    
    //PLL tile 
    
    place_pll_tile_fp(PLL_TILE_X0, PLL_TILE_Y0, -1, BLANK_X0);   //North 
    place_pll_tile_fp(PLL_TILE_X1, PLL_TILE_Y1, -1, BLANK_X0); 
    place_pll_tile_fp(PLL_TILE_X2, PLL_TILE_Y2, -1, BLANK_X0);
    place_pll_tile_fp(PLL_TILE_X3, PLL_TILE_Y3, -1, BLANK_X0); 
    
    place_pll_tile_fp(PLL_TILE_X4, PLL_TILE_Y4, 1, BLANK_X0);  //Sourth   
    place_pll_tile_fp(PLL_TILE_X5, PLL_TILE_Y5, 1, BLANK_X0);           
    place_pll_tile_fp(PLL_TILE_X6, PLL_TILE_Y6, 1, BLANK_X0);
    place_pll_tile_fp(PLL_TILE_X7, PLL_TILE_Y7, 1, BLANK_X0);           

    //USCM
    const unsigned int USCM_tile_x[] = { 69 };
    const unsigned int USCM_tile_y[] = { [78:81, 83:86] };

    unsigned int uscm_idx, tile_num;
    
    foreach tx ( USCM_tile_x )
    {
        foreach ty ( USCM_tile_y )
        {
           if(ty == 86)
           {
               uscm_idx  = 0;
               tile_num = 0;
           }
           else if(ty == 85)
           {
               uscm_idx  = 0;
               tile_num = 1;
           }
           else if(ty == 84)
           {
               uscm_idx  = 1;
               tile_num = 0;
           }
           else if(ty == 83)
           {
               uscm_idx  = 1;
               tile_num = 1;
           }
           else if(ty == 81)
           {
               uscm_idx  = 3;
               tile_num = 0;
           }
           else if(ty == 80)
           {
               uscm_idx  = 3;
               tile_num = 1;
           }            
           else if(ty == 79)
           {
               uscm_idx  = 2;
               tile_num = 0;
           }   
           else if(ty == 78)
           {
               uscm_idx  = 2;
               tile_num = 1;
           }
                    
           place_uscm_tile_fp (tx, ty, uscm_idx, tile_num);   //USCM
       }
   }
   
   place_reg_vmux_tile_fp (REG_VMUX0_CLK_TILE_X, REG_VMUX0_CLK_TILE_Y, BLANK_X0);       //VMUX0
   place_reg_vmux_tile_fp (REG_VMUX1_CLK_TILE_X, REG_VMUX1_CLK_TILE_Y, BLANK_X0);       //VMUX1
   place_reg_vmux_tile_fp (REG_VMUX2_CLK_TILE_X, REG_VMUX2_CLK_TILE_Y, BLANK_X0);       //VMUX2
   place_reg_vmux_tile_fp (REG_VMUX3_CLK_TILE_X, REG_VMUX3_CLK_TILE_Y, BLANK_X0);       //VMUX3
   place_reg_vmux_tile_fp (REG_VMUX4_CLK_TILE_X, REG_VMUX4_CLK_TILE_Y, BLANK_X0);       //VMUX4
   place_reg_vmux_tile_fp (REG_VMUX5_CLK_TILE_X, REG_VMUX5_CLK_TILE_Y, BLANK_X0);       //VMUX5
   place_reg_vmux_tile_fp (REG_VMUX6_CLK_TILE_X, REG_VMUX6_CLK_TILE_Y, BLANK_X0);       //VMUX6
   place_reg_vmux_tile_fp (REG_VMUX7_CLK_TILE_X, REG_VMUX7_CLK_TILE_Y, BLANK_X0);       //VMUX7

   place_ioclkgen_tb_tile_fp (IOCLKGEN_B0_TILE_X, IOCLKGEN_B0_TILE_Y);   //BOTTOM IOCLKGEN
   place_ioclkgen_tb_tile_fp (IOCLKGEN_B1_TILE_X, IOCLKGEN_B1_TILE_Y);   //BOTTOM IOCLKGEN

   place_ioclkgen_tb_tile_fp (IOCLKGEN_T0_TILE_X, IOCLKGEN_T0_TILE_Y);   //TOP IOCLKGEN
   place_ioclkgen_tb_tile_fp (IOCLKGEN_T1_TILE_X, IOCLKGEN_T1_TILE_Y);   //TOP IOCLKGEN
   
   place_ioclkgen_r_tile_fp (IOCLKGEN_R0_TILE_X, IOCLKGEN_R0_TILE_Y);   //RIGHT IOCLKGEN   
   place_ioclkgen_r_tile_fp (IOCLKGEN_R1_TILE_X, IOCLKGEN_R1_TILE_Y);   //RIGHT IOCLKGEN   

   place_ioclkgen_l_tile_fp (IOCLKGEN_L_TILE_X, IOCLKGEN_L_TILE_Y);   //LEFT IOCLKGEN   

   place_start_tile_fp(START_X, START_Y, BLANK_X0);
   
   place_grs_tile_fp(START_X, START_Y, BLANK_X0);
      
   //place_osc_tile_fp(OSC_X, OSC_Y);
      
   place_efusecode_tile_fp(EFUSECODE_X, EFUSECODE_Y, BLANK_X0);
   
   place_scanchain1_tile_fp(SCANCHAIN1_X, SCANCHAIN1_Y, BLANK_X0);
   
   place_scanchain0_tile_fp(SCANCHAIN0_X, SCANCHAIN0_Y, BLANK_X0);
   
   place_ipal_tile_fp(IPAL_X, IPAL_Y, BLANK_X0);   
   
   //hsst buf
   const unsigned int h_tile_x1[] = { 0 };
   const unsigned int h_tile_y1[] = { 0,41,82 };
   
   foreach tx ( h_tile_x1 )
   {
       foreach ty ( h_tile_y1 )
       {
           place_hsst_tile_fp(tx, ty, BLANK_X0);
       }
   }    

} // end of structure floorplan place_logic_resource of device devPGT180H



