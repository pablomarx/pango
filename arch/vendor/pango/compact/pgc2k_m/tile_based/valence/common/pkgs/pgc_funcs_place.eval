use pgc_defs;
use pgc_CLMS_SRB_inc,pgc_IOL_SRB_inc,pgc_IOLL_SRB_inc,pgc_IOLR_SRB_inc;
use pgc_DLL_SRB_inc,pgc_DRM_SRB_inc,pgc_CCS_SRB_inc;
use pgc_IOCK_SRB_inc,pgc_USCM_SRB_inc,pgc_PLL_SRB_inc;
use pgc_CLKDLYT_SRB_inc,pgc_CLKDLYB_SRB_inc;

package pgc_funcs_place
{


/********************************************************************************/
/********************************************************************************/
function place_srb_tile(unsigned int tx,ty)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    string strVar;

   //DOUBLE
    sprintf(strVar,"ntZDE_%d_%d",sx,sy);
    &wire ntRef_ntZDE[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;    
    
    sprintf(strVar,"ntZDN_%d_%d",sx,sy);
    &wire ntRef_ntZDN[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;    
 
    sprintf(strVar,"ntZDW_%d_%d",sx,sy);
    &wire ntRef_ntZDW[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZDS_%d_%d",sx,sy);
    &wire ntRef_ntZDS[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    //QUAD
    sprintf(strVar,"ntZQE_%d_%d",sx,sy);
    &wire ntRef_ntZQE[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
    
    sprintf(strVar,"ntZQN_%d_%d",sx,sy);
    &wire ntRef_ntZQN[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
 
    sprintf(strVar,"ntZQW_%d_%d",sx,sy);
    &wire ntRef_ntZQW[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZQS_%d_%d",sx,sy);
    &wire ntRef_ntZQS[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
    
     //SINGLE
    sprintf(strVar,"ntZSE_%d_%d",sx,sy);
    &wire ntRef_ntZSE[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
    
    sprintf(strVar,"ntZSN_%d_%d",sx,sy);
    &wire ntRef_ntZSN[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
 
    sprintf(strVar,"ntZSW_%d_%d",sx,sy);
    &wire ntRef_ntZSW[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSS_%d_%d",sx,sy);
    &wire ntRef_ntZSS[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    //DIAGONAL
    sprintf(strVar,"ntZSNE_%d_%d",sx,sy);
    &wire ntRef_ntZSNE[3:0] = wire *strVar[3:0]        /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
    
    sprintf(strVar,"ntZSSW_%d_%d",sx,sy);
    &wire ntRef_ntZSSW[3:0] = wire *strVar[3:0]        /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/; 
 
    sprintf(strVar,"ntZSNW_%d_%d",sx,sy);
    &wire ntRef_ntZSNW[3:0] = wire *strVar[3:0]        /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSSE_%d_%d",sx,sy);
    &wire ntRef_ntZSSE[3:0] = wire *strVar[3:0]        /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    //TO CLMS&CLMA 
    sprintf(strVar,"ntA_A0_%d_%d",sx,sy);
    &wire ntRef_ntA_A0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_A1_%d_%d",sx,sy);
    &wire ntRef_ntA_A1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntA_A2_%d_%d",sx,sy);
    &wire ntRef_ntA_A2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_A3_%d_%d",sx,sy);
    &wire ntRef_ntA_A3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_A4_%d_%d",sx,sy);
    &wire ntRef_ntA_A4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_B0_%d_%d",sx,sy);
    &wire ntRef_ntA_B0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_B1_%d_%d",sx,sy);
    &wire ntRef_ntA_B1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntA_B2_%d_%d",sx,sy);
    &wire ntRef_ntA_B2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntA_B3_%d_%d",sx,sy);
    &wire ntRef_ntA_B3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_B4_%d_%d",sx,sy);
    &wire ntRef_ntA_B4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_C0_%d_%d",sx,sy);
    &wire ntRef_ntA_C0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_C1_%d_%d",sx,sy);
    &wire ntRef_ntA_C1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntA_C2_%d_%d",sx,sy);
    &wire ntRef_ntA_C2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_C3_%d_%d",sx,sy);
    &wire ntRef_ntA_C3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_C4_%d_%d",sx,sy);
    &wire ntRef_ntA_C4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_D0_%d_%d",sx,sy);
    &wire ntRef_ntA_D0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_D1_%d_%d",sx,sy);
    &wire ntRef_ntA_D1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntA_D2_%d_%d",sx,sy);
    &wire ntRef_ntA_D2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_D3_%d_%d",sx,sy);
    &wire ntRef_ntA_D3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_D4_%d_%d",sx,sy);
    &wire ntRef_ntA_D4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_A0_%d_%d",sx,sy);
    &wire ntRef_ntS_A0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_A1_%d_%d",sx,sy);
    &wire ntRef_ntS_A1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntS_A2_%d_%d",sx,sy);
    &wire ntRef_ntS_A2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_A3_%d_%d",sx,sy);
    &wire ntRef_ntS_A3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_A4_%d_%d",sx,sy);
    &wire ntRef_ntS_A4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_B0_%d_%d",sx,sy);
    &wire ntRef_ntS_B0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_B1_%d_%d",sx,sy);
    &wire ntRef_ntS_B1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntS_B2_%d_%d",sx,sy);
    &wire ntRef_ntS_B2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_B3_%d_%d",sx,sy);
    &wire ntRef_ntS_B3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_B4_%d_%d",sx,sy);
    &wire ntRef_ntS_B4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_C0_%d_%d",sx,sy);
    &wire ntRef_ntS_C0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_C1_%d_%d",sx,sy);
    &wire ntRef_ntS_C1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntS_C2_%d_%d",sx,sy);
    &wire ntRef_ntS_C2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_C3_%d_%d",sx,sy);
    &wire ntRef_ntS_C3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_C4_%d_%d",sx,sy);
    &wire ntRef_ntS_C4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_D0_%d_%d",sx,sy);
    &wire ntRef_ntS_D0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_D1_%d_%d",sx,sy);
    &wire ntRef_ntS_D1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntS_D2_%d_%d",sx,sy);
    &wire ntRef_ntS_D2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_D3_%d_%d",sx,sy);
    &wire ntRef_ntS_D3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_D4_%d_%d",sx,sy);
    &wire ntRef_ntS_D4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_M0_%d_%d",sx,sy);           
    &wire ntRef_ntA_M0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_M1_%d_%d",sx,sy);           
    &wire ntRef_ntA_M1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_M2_%d_%d",sx,sy);           
    &wire ntRef_ntA_M2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntA_M3_%d_%d",sx,sy);           
    &wire ntRef_ntA_M3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntZM_%d_%d",sx,sy);           
    &wire ntRef_ntZM[15:0] = wire *strVar[15:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_RS_%d_%d",sx,sy);           
    &wire ntRef_ntA_RS = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_CE_%d_%d",sx,sy);           
    &wire ntRef_ntA_CE = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_RS_%d_%d",sx,sy);           
    &wire ntRef_ntS_RS = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_CE_%d_%d",sx,sy);           
    &wire ntRef_ntS_CE = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_CLK_%d_%d",sx,sy);           
    &wire ntRef_ntA_CLK = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_CLK_%d_%d",sx,sy);           
    &wire ntRef_ntS_CLK = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIOLA_RS_%d_%d",sx,sy);           
    &wire ntRef_ntIOLA_RS = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIOLA_CE_%d_%d",sx,sy);           
    &wire ntRef_ntIOLA_CE = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIOLB_RS_%d_%d",sx,sy);           
    &wire ntRef_ntIOLB_RS = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIOLB_CE_%d_%d",sx,sy);           
    &wire ntRef_ntIOLB_CE = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIOLA_CLK_%d_%d",sx,sy);           
    &wire ntRef_ntIOLA_CLK = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIOLB_CLK_%d_%d",sx,sy);           
    &wire ntRef_ntIOLB_CLK = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_AD_%d_%d",sx,sy);           
    &wire ntRef_ntA_AD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_BD_%d_%d",sx,sy);           
    &wire ntRef_ntA_BD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_CD_%d_%d",sx,sy);           
    &wire ntRef_ntA_CD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_DD_%d_%d",sx,sy);           
    &wire ntRef_ntA_DD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_AD_%d_%d",sx,sy);           
    &wire ntRef_ntS_AD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_BD_%d_%d",sx,sy);           
    &wire ntRef_ntS_BD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntS_CD_%d_%d",sx,sy);           
    &wire ntRef_ntS_CD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntS_DD_%d_%d",sx,sy);           
    &wire ntRef_ntS_DD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 


    //SW UNUSED
    
 
    sprintf(strVar, "SRB_TILE_%d_%d", sx, sy);
       device SRB_TILE *strVar
           port map (
                     A_A0  => ntRef_ntA_A0,
                     A_A1  => ntRef_ntA_A1,
                     A_A2  => ntRef_ntA_A2,
                     A_A3  => ntRef_ntA_A3,
                     A_A4  => ntRef_ntA_A4,
                     A_B0  => ntRef_ntA_B0,
                     A_B1  => ntRef_ntA_B1,
                     A_B2  => ntRef_ntA_B2,
                     A_B3  => ntRef_ntA_B3,
                     A_B4  => ntRef_ntA_B4,
                     A_C0  => ntRef_ntA_C0,
                     A_C1  => ntRef_ntA_C1,
                     A_C2  => ntRef_ntA_C2,
                     A_C3  => ntRef_ntA_C3,
                     A_C4  => ntRef_ntA_C4,
                     A_D0  => ntRef_ntA_D0,
                     A_D1  => ntRef_ntA_D1,
                     A_D2  => ntRef_ntA_D2,
                     A_D3  => ntRef_ntA_D3,
                     A_D4  => ntRef_ntA_D4,
                     S_A0  => ntRef_ntS_A0,
                     S_A1  => ntRef_ntS_A1,
                     S_A2  => ntRef_ntS_A2,
                     S_A3  => ntRef_ntS_A3,
                     S_A4  => ntRef_ntS_A4,
                     S_B0  => ntRef_ntS_B0,
                     S_B1  => ntRef_ntS_B1,
                     S_B2  => ntRef_ntS_B2,
                     S_B3  => ntRef_ntS_B3,
                     S_B4  => ntRef_ntS_B4,
                     S_C0  => ntRef_ntS_C0,
                     S_C1  => ntRef_ntS_C1,
                     S_C2  => ntRef_ntS_C2,
                     S_C3  => ntRef_ntS_C3,
                     S_C4  => ntRef_ntS_C4,
                     S_D0  => ntRef_ntS_D0,
                     S_D1  => ntRef_ntS_D1,
                     S_D2  => ntRef_ntS_D2,
                     S_D3  => ntRef_ntS_D3,
                     S_D4  => ntRef_ntS_D4,
                     A_RS  => ntRef_ntA_RS,
                     A_CE  => ntRef_ntA_CE,
                     S_RS  => ntRef_ntS_RS,
                     S_CE  => ntRef_ntS_CE,
                     A_CLK => ntRef_ntA_CLK,
                     S_CLK => ntRef_ntS_CLK,
                     A_AD  => ntRef_ntA_AD,
                     A_BD  => ntRef_ntA_BD,
                     A_CD  => ntRef_ntA_CD,
                     A_DD  => ntRef_ntA_DD,
                     S_AD  => ntRef_ntS_AD,
                     S_BD  => ntRef_ntS_BD,
                     S_CD  => ntRef_ntS_CD,
                     S_DD  => ntRef_ntS_DD,
                     ZM    => ntRef_ntZM,
                     IOLA_RS  => ntRef_ntIOLA_RS,
                     IOLA_CE  => ntRef_ntIOLA_CE,
                     IOLB_RS  => ntRef_ntIOLB_RS,
                     IOLB_CE  => ntRef_ntIOLB_CE,
                     IOLA_CLK => ntRef_ntIOLA_CLK,
                     IOLB_CLK => ntRef_ntIOLB_CLK,

                     ZSS   => ntRef_ntZSS,
                     ZSN   => ntRef_ntZSN,
                     ZSE   => ntRef_ntZSE,
                     ZSW   => ntRef_ntZSW,
                     ZSNW  => ntRef_ntZSNW,
                     ZSNE  => ntRef_ntZSNE,
                     ZSSW  => ntRef_ntZSSW,
                     ZSSE  => ntRef_ntZSSE,
                     ZDS   => ntRef_ntZDS,
                     ZDN   => ntRef_ntZDN,
                     ZDE   => ntRef_ntZDE,
                     ZDW   => ntRef_ntZDW,
                     ZQS   => ntRef_ntZQS,
                     ZQN   => ntRef_ntZQN,
                     ZQE   => ntRef_ntZQE,
                     ZQW   => ntRef_ntZQW               
                   )
        @([sx,sy]);
}//end of function place_srb_tile
/********************************************************************************/
/********************************************************************************/
function place_sfb_tile(unsigned int tx,ty,flag)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;

    string strVar;
    sprintf(strVar,"ntTEST_A_Y0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y0 = wire *strVar        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y1 = wire *strVar        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y2 = wire *strVar        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y3 = wire *strVar        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q0 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q1 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q2 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q3 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntTEST_A_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6AB = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 
 
    sprintf(strVar,"ntTEST_A_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6CD = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y0 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y1 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y2 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y3 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q0 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q1 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q2 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q3 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntTEST_S_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6AB = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;   
 
    sprintf(strVar,"ntTEST_S_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6CD = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;  

    string sfb = (flag==0) ? "SFB_TILE" : "SFB1_TILE";
    if(flag==0)
    {
      sprintf(strVar, "SFB_TILE_%d_%d", sx, sy);
      device SFB_TILE *strVar
           port map (
                     TEST_A_Y0       => ntRef_ntTEST_A_Y0,
                     TEST_A_Y1       => ntRef_ntTEST_A_Y1,
                     TEST_A_Y2       => ntRef_ntTEST_A_Y2,
                     TEST_A_Y3       => ntRef_ntTEST_A_Y3,
                     TEST_A_Q0       => ntRef_ntTEST_A_Q0,
                     TEST_A_Q1       => ntRef_ntTEST_A_Q1,
                     TEST_A_Q2       => ntRef_ntTEST_A_Q2,
                     TEST_A_Q3       => ntRef_ntTEST_A_Q3,
                     TEST_A_Y6AB     => ntRef_ntTEST_A_Y6AB,
                     TEST_A_Y6CD     => ntRef_ntTEST_A_Y6CD,
                     TEST_S_Y0       => ntRef_ntTEST_S_Y0,
                     TEST_S_Y1       => ntRef_ntTEST_S_Y1,
                     TEST_S_Y2       => ntRef_ntTEST_S_Y2,
                     TEST_S_Y3       => ntRef_ntTEST_S_Y3,
                     TEST_S_Q0       => ntRef_ntTEST_S_Q0,
                     TEST_S_Q1       => ntRef_ntTEST_S_Q1,
                     TEST_S_Q2       => ntRef_ntTEST_S_Q2,
                     TEST_S_Q3       => ntRef_ntTEST_S_Q3,
                     TEST_S_Y6AB     => ntRef_ntTEST_S_Y6AB,
                     TEST_S_Y6CD     => ntRef_ntTEST_S_Y6CD
                    )
          @([sx,sy]);
    }
    else
    {
      sprintf(strVar, "SFB1_TILE_%d_%d", sx, sy);
      device SFB1_TILE *strVar
           port map (
                     TEST_A_Y0       => ntRef_ntTEST_A_Y0,
                     TEST_A_Y1       => ntRef_ntTEST_A_Y1,
                     TEST_A_Y2       => ntRef_ntTEST_A_Y2,
                     TEST_A_Y3       => ntRef_ntTEST_A_Y3,
                     TEST_A_Q0       => ntRef_ntTEST_A_Q0,
                     TEST_A_Q1       => ntRef_ntTEST_A_Q1,
                     TEST_A_Q2       => ntRef_ntTEST_A_Q2,
                     TEST_A_Q3       => ntRef_ntTEST_A_Q3,
                     TEST_A_Y6AB     => ntRef_ntTEST_A_Y6AB,
                     TEST_A_Y6CD     => ntRef_ntTEST_A_Y6CD,
                     TEST_S_Y0       => ntRef_ntTEST_S_Y0,
                     TEST_S_Y1       => ntRef_ntTEST_S_Y1,
                     TEST_S_Y2       => ntRef_ntTEST_S_Y2,
                     TEST_S_Y3       => ntRef_ntTEST_S_Y3,
                     TEST_S_Q0       => ntRef_ntTEST_S_Q0,
                     TEST_S_Q1       => ntRef_ntTEST_S_Q1,
                     TEST_S_Q2       => ntRef_ntTEST_S_Q2,
                     TEST_S_Q3       => ntRef_ntTEST_S_Q3,
                     TEST_S_Y6AB     => ntRef_ntTEST_S_Y6AB,
                     TEST_S_Y6CD     => ntRef_ntTEST_S_Y6CD
                    )
          @([sx,sy]);
    }

    connect
      (
        <pin A_Y0 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_A_Y0 of <device *sfb @[sx,sy]>>,
        <pin A_Y1 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_A_Y1 of <device *sfb @[sx,sy]>>,
        <pin A_Y2 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_A_Y2 of <device *sfb @[sx,sy]>>,
        <pin A_Y3 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_A_Y3 of <device *sfb @[sx,sy]>>,
        <pin A_Q0 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_A_Q0 of <device *sfb @[sx,sy]>>,
        <pin A_Q1 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_A_Q1 of <device *sfb @[sx,sy]>>,
        <pin A_Q2 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_A_Q2 of <device *sfb @[sx,sy]>>,
        <pin A_Q3 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_A_Q3 of <device *sfb @[sx,sy]>>,
        <pin S_Y0 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_S_Y0 of <device *sfb @[sx,sy]>>,
        <pin S_Y1 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_S_Y1 of <device *sfb @[sx,sy]>>,
        <pin S_Y2 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_S_Y2 of <device *sfb @[sx,sy]>>,
        <pin S_Y3 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_S_Y3 of <device *sfb @[sx,sy]>>,
        <pin S_Q0 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_S_Q0 of <device *sfb @[sx,sy]>>,
        <pin S_Q1 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_S_Q1 of <device *sfb @[sx,sy]>>,
        <pin S_Q2 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_S_Q2 of <device *sfb @[sx,sy]>>,
        <pin S_Q3 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_S_Q3 of <device *sfb @[sx,sy]>>,
        <pin A_Y6AB of <device SRB_TILE @[sx-3,sy]>>  => <wire TEST_A_Y6AB of <device *sfb @[sx,sy]>>,
        <pin A_Y6CD of <device SRB_TILE @[sx-3,sy]>>  => <wire TEST_A_Y6CD of <device *sfb @[sx,sy]>>,
        <pin S_Y6AB of <device SRB_TILE @[sx-3,sy]>>  => <wire TEST_S_Y6AB of <device *sfb @[sx,sy]>>,
        <pin S_Y6CD of <device SRB_TILE @[sx-3,sy]>>  => <wire TEST_S_Y6CD of <device *sfb @[sx,sy]>>,

        <pin A_A0 of <device *sfb @[sx,sy]>> => <wire A_A0 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_A1 of <device *sfb @[sx,sy]>> => <wire A_A1 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_A2 of <device *sfb @[sx,sy]>> => <wire A_A2 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_A3 of <device *sfb @[sx,sy]>> => <wire A_A3 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_A4 of <device *sfb @[sx,sy]>> => <wire A_A4 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_AD of <device *sfb @[sx,sy]>> => <wire A_AD of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_B0 of <device *sfb @[sx,sy]>> => <wire A_B0 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_B1 of <device *sfb @[sx,sy]>> => <wire A_B1 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_B2 of <device *sfb @[sx,sy]>> => <wire A_B2 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_B3 of <device *sfb @[sx,sy]>> => <wire A_B3 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_B4 of <device *sfb @[sx,sy]>> => <wire A_B4 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_BD of <device *sfb @[sx,sy]>> => <wire A_BD of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_C0 of <device *sfb @[sx,sy]>> => <wire A_C0 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_C1 of <device *sfb @[sx,sy]>> => <wire A_C1 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_C2 of <device *sfb @[sx,sy]>> => <wire A_C2 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_C3 of <device *sfb @[sx,sy]>> => <wire A_C3 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_C4 of <device *sfb @[sx,sy]>> => <wire A_C4 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_CD of <device *sfb @[sx,sy]>> => <wire A_CD of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_D0 of <device *sfb @[sx,sy]>> => <wire A_D0 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_D1 of <device *sfb @[sx,sy]>> => <wire A_D1 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_D2 of <device *sfb @[sx,sy]>> => <wire A_D2 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_D3 of <device *sfb @[sx,sy]>> => <wire A_D3 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_D4 of <device *sfb @[sx,sy]>> => <wire A_D4 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_DD of <device *sfb @[sx,sy]>> => <wire A_DD of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_A0 of <device *sfb @[sx,sy]>> => <wire S_A0 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_A1 of <device *sfb @[sx,sy]>> => <wire S_A1 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_A2 of <device *sfb @[sx,sy]>> => <wire S_A2 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_A3 of <device *sfb @[sx,sy]>> => <wire S_A3 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_A4 of <device *sfb @[sx,sy]>> => <wire S_A4 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_AD of <device *sfb @[sx,sy]>> => <wire S_AD of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_B0 of <device *sfb @[sx,sy]>> => <wire S_B0 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_B1 of <device *sfb @[sx,sy]>> => <wire S_B1 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_B2 of <device *sfb @[sx,sy]>> => <wire S_B2 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_B3 of <device *sfb @[sx,sy]>> => <wire S_B3 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_B4 of <device *sfb @[sx,sy]>> => <wire S_B4 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_BD of <device *sfb @[sx,sy]>> => <wire S_BD of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_C0 of <device *sfb @[sx,sy]>> => <wire S_C0 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_C1 of <device *sfb @[sx,sy]>> => <wire S_C1 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_C2 of <device *sfb @[sx,sy]>> => <wire S_C2 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_C3 of <device *sfb @[sx,sy]>> => <wire S_C3 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_C4 of <device *sfb @[sx,sy]>> => <wire S_C4 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_CD of <device *sfb @[sx,sy]>> => <wire S_CD of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_D0 of <device *sfb @[sx,sy]>> => <wire S_D0 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_D1 of <device *sfb @[sx,sy]>> => <wire S_D1 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_D2 of <device *sfb @[sx,sy]>> => <wire S_D2 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_D3 of <device *sfb @[sx,sy]>> => <wire S_D3 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_D4 of <device *sfb @[sx,sy]>> => <wire S_D4 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_DD of <device *sfb @[sx,sy]>> => <wire S_DD of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_CE of <device *sfb @[sx,sy]>>  => <wire A_CE of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_RS of <device *sfb @[sx,sy]>>  => <wire A_RS of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_CLK of <device *sfb @[sx,sy]>> => <wire A_CLK of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_CE of <device *sfb @[sx,sy]>>  => <wire S_CE of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_RS of <device *sfb @[sx,sy]>>  => <wire S_RS of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_CLK of <device *sfb @[sx,sy]>> => <wire S_CLK of <device SRB_TILE @[sx-3,sy]>>,
        <pin IOLA_CE of <device *sfb @[sx,sy]>>  => <wire IOLA_CE of <device SRB_TILE @[sx-3,sy]>>,
        <pin IOLA_RS of <device *sfb @[sx,sy]>>  => <wire IOLA_RS of <device SRB_TILE @[sx-3,sy]>>,
        <pin IOLA_CLK of <device *sfb @[sx,sy]>> => <wire IOLA_CLK of <device SRB_TILE @[sx-3,sy]>>,
        <pin IOLB_CE of <device *sfb @[sx,sy]>>  => <wire IOLB_CE of <device SRB_TILE @[sx-3,sy]>>,
        <pin IOLB_RS of <device *sfb @[sx,sy]>>  => <wire IOLB_RS of <device SRB_TILE @[sx-3,sy]>>,
        <pin IOLB_CLK of <device *sfb @[sx,sy]>> => <wire IOLB_CLK of <device SRB_TILE @[sx-3,sy]>>,
        <pin ZM_1 of <device *sfb @[sx,sy]>>     => <wire ZM[1] of <device SRB_TILE @[sx-3,sy]>>,
        <pin ZM_5 of <device *sfb @[sx,sy]>>     => <wire ZM[5] of <device SRB_TILE @[sx-3,sy]>>,
        <pin ZM_9 of <device *sfb @[sx,sy]>>     => <wire ZM[9] of <device SRB_TILE @[sx-3,sy]>>,
        <pin ZM_13 of <device *sfb @[sx,sy]>>    => <wire ZM[13] of <device SRB_TILE @[sx-3,sy]>>,
        <pin ZM_2 of <device *sfb @[sx,sy]>>     => <wire ZM[2] of <device SRB_TILE @[sx-3,sy]>>,
        <pin ZM_6 of <device *sfb @[sx,sy]>>     => <wire ZM[6] of <device SRB_TILE @[sx-3,sy]>>,
        <pin ZM_10 of <device *sfb @[sx,sy]>>    => <wire ZM[10] of <device SRB_TILE @[sx-3,sy]>>,
        <pin ZM_14 of <device *sfb @[sx,sy]>>    => <wire ZM[14] of <device SRB_TILE @[sx-3,sy]>>
      );


}//end of function connect_blank_srb
/********************************************************************************/
/********************************************************************************/
function place_clm_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;

    string strVar;
    //LOGIC OUTPUT
    sprintf(strVar,"ntL7OUT_%d_%d",sx,sy);
    &wire ntRef_ntL7OUT = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntA_CECO_%d_%d",sx,sy);
    &wire ntRef_ntA_CECO = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
   
    sprintf(strVar,"ntA_COUT_%d_%d",sx,sy);
    &wire ntRef_ntA_COUT = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntA_RSCO_%d_%d",sx,sy);
    &wire ntRef_ntA_RSCO = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntA_SRCO_%d_%d",sx,sy);
    &wire ntRef_ntA_SRCO = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntS_CECO_%d_%d",sx,sy);
    &wire ntRef_ntS_CECO = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
   
    sprintf(strVar,"ntS_COUT_%d_%d",sx,sy);
    &wire ntRef_ntS_COUT = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntS_RSCO_%d_%d",sx,sy);
    &wire ntRef_ntS_RSCO = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntS_SRCO_%d_%d",sx,sy);
    &wire ntRef_ntS_SRCO = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_Y_%d_%d",sx,sy);
    &wire ntRef_ntA_Y[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_Q_%d_%d",sx,sy);
    &wire ntRef_ntA_Q[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntA_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntA_Y6AB = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 
 
    sprintf(strVar,"ntA_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntA_Y6CD = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_Y_%d_%d",sx,sy);
    &wire ntRef_ntS_Y[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_Q_%d_%d",sx,sy);
    &wire ntRef_ntS_Q[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntS_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntS_Y6AB = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;   
 
    sprintf(strVar,"ntS_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntS_Y6CD = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;  

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar, "CLMS_TILE_%d_%d", sx, sy);
    device CLMS_TILE *strVar
         port map (
                   A_Y    =>  ntRef_ntA_Y,
                   A_Q    =>  ntRef_ntA_Q,
                   A_Y6AB =>  ntRef_ntA_Y6AB,
                   A_Y6CD =>  ntRef_ntA_Y6CD,
                   S_Y    =>  ntRef_ntS_Y,
                   S_Q    =>  ntRef_ntS_Q,
                   S_Y6AB =>  ntRef_ntS_Y6AB,
                   S_Y6CD =>  ntRef_ntS_Y6CD,
                   L7OUT  => ntRef_ntL7OUT,
                   A_CECO => ntRef_ntA_CECO,
                   A_COUT => ntRef_ntA_COUT,
                   A_RSCO => ntRef_ntA_RSCO,
                   A_SRCO => ntRef_ntA_SRCO,
                   S_CECO => ntRef_ntS_CECO,
                   S_COUT => ntRef_ntS_COUT,
                   S_RSCO => ntRef_ntS_RSCO,
                   S_SRCO => ntRef_ntS_SRCO,
                   TIEHI  => ntRef_ntTIEHI
                   )
      @([sx,sy]);  
    STRUCT inc_spec_CLMS incVar;
    string pin_SRB;
    string pin_logic_device;
    string attribute_IO;
    int loc_SRB;
    int sy_SRB;

    foreach incVar(inc_CLMS_SRB_spec)
    {
        pin_SRB = incVar.port_name_SRB;
        pin_logic_device = incVar.port_name_device;
        attribute_IO = incVar.attribute_IO;
        loc_SRB = incVar.loc_SRB;
       
        if(!loc_SRB)
        {
          sy_SRB = sy;
        }
        else
        {
          sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
        }
        
        if(attribute_IO =="I")
        { 
          
           connect(<pin *pin_logic_device of <device CLMS_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-3,sy_SRB]>>);
        }
        else
        {
          connect(<pin *pin_SRB of<device SRB_TILE@[sx-3,sy_SRB]>> => <wire *pin_logic_device of <device CLMS_TILE @[sx,sy]>>); 
        }
    }         
        
}// end of function place_clm_tile
/********************************************************************************
********************************************************************************/
function place_ccs_tile(unsigned int tx,ty,tx_pll0,ty_pll0,tx_pll1,ty_pll1)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;
   
    string strVar;
   

    sprintf(strVar,"ntGRS_N_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N = wire *strVar;

    sprintf(strVar,"ntGLOGEN_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN = wire *strVar;

    sprintf(strVar,"ntGOUTEN_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN = wire *strVar;

    sprintf(strVar,"ntGWEN_%d_%d",sx,sy);
    &wire ntRef_ntGWEN = wire *strVar;

    sprintf(strVar,"ntCFGMOD_JEN_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_JEN = wire *strVar;

    sprintf(strVar,"ntCFGMOD_JTAG_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_JTAG = wire *strVar;

    sprintf(strVar,"ntCFGMOD_RST_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_RST = wire *strVar;

    sprintf(strVar,"ntCFGMOD_INIT_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_INIT = wire *strVar;

    sprintf(strVar,"ntCFGMOD_DONE_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_DONE = wire *strVar;

    sprintf(strVar,"ntCFGMOD_SPI_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_SPI = wire *strVar;

    sprintf(strVar,"ntCFGMOD_MS_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_MS = wire *strVar;

    sprintf(strVar,"ntCFGMOD_I2C_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_I2C = wire *strVar;

    sprintf(strVar,"ntCFGMOD_SPAL_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_SPAL = wire *strVar;

    sprintf(strVar,"ntCFGMOD_EFB_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_EFB = wire *strVar;

    sprintf(strVar,"ntCFGMOD_SS_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_SS = wire *strVar;

    sprintf(strVar,"ntJRST_%d_%d",sx,sy);
    &wire ntRef_ntJRST = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLOCKDR_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSHIFTDR_%d_%d",sx,sy);
    &wire ntRef_ntSHIFTDR = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntUPDATEDR_%d_%d",sx,sy);
    &wire ntRef_ntUPDATEDR = wire *strVar        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMODE_1_%d_%d",sx,sy);
    &wire ntRef_ntMODE_1 = wire *strVar;

    sprintf(strVar,"ntMODE_2_%d_%d",sx,sy);
    &wire ntRef_ntMODE_2 = wire *strVar;

    sprintf(strVar,"ntMODE_3_%d_%d",sx,sy);
    &wire ntRef_ntMODE_3 = wire *strVar;

    sprintf(strVar,"ntPUP_SEL_N_%d_%d",sx,sy);
    &wire ntRef_ntPUP_SEL_N = wire *strVar;

    sprintf(strVar,"ntTDI_CCS_%d_%d",sx,sy);
    &wire ntRef_ntTDI_CCS = wire *strVar;

    sprintf(strVar,"ntBLSRIN_%d_%d",sx,sy);
    &wire ntRef_ntBLSRIN[31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntCLK_CRAM_%d_%d",sx,sy);
    &wire ntRef_ntCLK_CRAM = wire *strVar;

    sprintf(strVar,"ntCMEM_TYPE_%d_%d",sx,sy);
    &wire ntRef_ntCMEM_TYPE[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntERASE_EN_%d_%d",sx,sy);
    &wire ntRef_ntERASE_EN = wire *strVar;

    sprintf(strVar,"ntWL_ON_%d_%d",sx,sy);
    &wire ntRef_ntWL_ON = wire *strVar;

    sprintf(strVar,"ntCOLUMN_%d_%d",sx,sy);
    &wire ntRef_ntCOLUMN[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntPROG_ON_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON = wire *strVar;

    sprintf(strVar,"ntPROG_CAP_%d_%d",sx,sy);
    &wire ntRef_ntPROG_CAP = wire *strVar;

    sprintf(strVar,"ntREGION_RW_EN_%d_%d",sx,sy);
    &wire ntRef_ntREGION_RW_EN = wire *strVar;

    sprintf(strVar,"ntPRECHGE_%d_%d",sx,sy);
    &wire ntRef_ntPRECHGE = wire *strVar;

    sprintf(strVar,"ntREAD_%d_%d",sx,sy);
    &wire ntRef_ntREAD = wire *strVar;

    sprintf(strVar,"ntRDBK_CAP_%d_%d",sx,sy);
    &wire ntRef_ntRDBK_CAP = wire *strVar;

    sprintf(strVar,"ntPRECHGNN_DRM_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPRECHGNN_DRM_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_DRM_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DRM = wire *strVar;

    sprintf(strVar,"ntMCE_%d_%d",sx,sy);
    &wire ntRef_ntMCE = wire *strVar;

    sprintf(strVar,"ntMWR_%d_%d",sx,sy);
    &wire ntRef_ntMWR = wire *strVar;

    sprintf(strVar,"ntTRIM_VREF1_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_VREF1[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTRIM_VREF2_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_VREF2[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTRIM_LDO_VREF_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_LDO_VREF[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTRIM_ICONST_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_ICONST[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntFREQ_TRIM_%d_%d",sx,sy);
    &wire ntRef_ntFREQ_TRIM[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntINIT_COMPLETE_%d_%d",sx,sy);
    &wire ntRef_ntINIT_COMPLETE = wire *strVar;

    sprintf(strVar,"ntDONE_%d_%d",sx,sy);
    &wire ntRef_ntDONE = wire *strVar;

    sprintf(strVar,"ntTDO_%d_%d",sx,sy);
    &wire ntRef_ntTDO = wire *strVar;

    sprintf(strVar,"ntTDO_OE_%d_%d",sx,sy);
    &wire ntRef_ntTDO_OE = wire *strVar;

    sprintf(strVar,"ntMS_N_%d_%d",sx,sy);
    &wire ntRef_ntMS_N = wire *strVar;

    sprintf(strVar,"ntMS_N_OE_%d_%d",sx,sy);
    &wire ntRef_ntMS_N_OE = wire *strVar;

    sprintf(strVar,"ntSCK_%d_%d",sx,sy);
    &wire ntRef_ntSCK = wire *strVar;

    sprintf(strVar,"ntSCK_OE_%d_%d",sx,sy);
    &wire ntRef_ntSCK_OE = wire *strVar;

    sprintf(strVar,"ntMISO_O_%d_%d",sx,sy);
    &wire ntRef_ntMISO_O = wire *strVar;

    sprintf(strVar,"ntMISO_OE_%d_%d",sx,sy);
    &wire ntRef_ntMISO_OE = wire *strVar;

    sprintf(strVar,"ntMOSI_O_%d_%d",sx,sy);
    &wire ntRef_ntMOSI_O = wire *strVar;

    sprintf(strVar,"ntMOSI_OE_%d_%d",sx,sy);
    &wire ntRef_ntMOSI_OE = wire *strVar;

    sprintf(strVar,"ntSDA_O_%d_%d",sx,sy);
    &wire ntRef_ntSDA_O = wire *strVar;

    sprintf(strVar,"ntSDA_OE_%d_%d",sx,sy);
    &wire ntRef_ntSDA_OE = wire *strVar;

    sprintf(strVar,"ntTEST_A_Y6AB_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6AB_S0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y6CD_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6CD_S0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y0_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y0_S0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y1_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y1_S0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y2_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y2_S0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y3_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y3_S0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q0_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q0_S0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q1_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q1_S0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q2_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q2_S0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q3_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q3_S0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y6AB_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6AB_S0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y6CD_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6CD_S0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y0_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y0_S0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y1_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y1_S0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y2_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y2_S0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y3_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y3_S0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q0_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q0_S0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q1_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q1_S0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q2_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q2_S0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q3_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q3_S0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y6AB_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6AB_S1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y6CD_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6CD_S1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y0_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y0_S1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y1_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y1_S1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y2_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y2_S1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y3_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y3_S1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q0_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q0_S1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q1_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q1_S1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q2_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q2_S1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q3_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q3_S1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y6AB_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6AB_S1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y6CD_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6CD_S1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y0_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y0_S1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y1_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y1_S1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y2_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y2_S1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y3_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y3_S1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q0_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q0_S1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q1_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q1_S1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q2_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q2_S1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q3_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q3_S1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y6AB_S2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6AB_S2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y6CD_S2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6CD_S2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y0_S2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y0_S2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y1_S2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y1_S2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y2_S2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y2_S2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y3_S2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y3_S2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q0_S2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q0_S2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q1_S2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q1_S2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q2_S2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q2_S2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q3_S2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q3_S2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y6AB_S2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6AB_S2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y6CD_S2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6CD_S2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y0_S2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y0_S2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y1_S2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y1_S2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y2_S2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y2_S2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y3_S2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y3_S2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q0_S2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q0_S2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q1_S2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q1_S2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q2_S2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q2_S2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q3_S2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q3_S2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntOSC_EN_%d_%d",sx,sy);
    &wire ntRef_ntOSC_EN = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMCLK_EN_%d_%d",sx,sy);
    &wire ntRef_ntMCLK_EN = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRBCRC_CLK_EN_%d_%d",sx,sy);
    &wire ntRef_ntRBCRC_CLK_EN = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntOSCFSEL_%d_%d",sx,sy);
    &wire ntRef_ntOSCFSEL[6:0] = wire *strVar[6:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntOSCFSEL_RBCRC_%d_%d",sx,sy);
    &wire ntRef_ntOSCFSEL_RBCRC[6:0] = wire *strVar[6:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntOSC_TR_%d_%d",sx,sy);
    &wire ntRef_ntOSC_TR = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntOSC_TR_RBCRC_%d_%d",sx,sy);
    &wire ntRef_ntOSC_TR_RBCRC = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPCTLR_POR_OFF_%d_%d",sx,sy);
    &wire ntRef_ntPCTLR_POR_OFF = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPCTLR_BG_OFF_%d_%d",sx,sy);
    &wire ntRef_ntPCTLR_BG_OFF = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMFG_SRAM_RETENTION_%d_%d",sx,sy);
    &wire ntRef_ntMFG_SRAM_RETENTION = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMFG_TRIM_BIT_%d_%d",sx,sy);
    &wire ntRef_ntMFG_TRIM_BIT[2:0] = wire *strVar[2:0];

    sprintf(strVar,"ntSPAL_DOUT_%d_%d",sx,sy);
    &wire ntRef_ntSPAL_DOUT[15:0] = wire *strVar[15:0];

    sprintf(strVar,"ntSPAL_D_OE_%d_%d",sx,sy);
    &wire ntRef_ntSPAL_D_OE = wire *strVar;

    sprintf(strVar,"ntEFB_TDO_%d_%d",sx,sy);
    &wire ntRef_ntEFB_TDO = wire *strVar;

    sprintf(strVar,"ntEFB_TOE_%d_%d",sx,sy);
    &wire ntRef_ntEFB_TOE = wire *strVar;

    sprintf(strVar,"ntEFB_TP_BIAS_%d_%d",sx,sy);
    &wire ntRef_ntEFB_TP_BIAS = wire *strVar;

    sprintf(strVar,"ntSPAL_BUSY_%d_%d",sx,sy);
    &wire ntRef_ntSPAL_BUSY = wire *strVar;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar,"ntTIELO_%d_%d",sx,sy);
    &wire ntRef_ntTIELO = wire *strVar;


    sprintf(strVar, "CCS_TILE_%d_%d", sx, sy);
    device CCS_TILE *strVar
          port map (
                     CFGMOD_JEN      => ntRef_ntCFGMOD_JEN,
                     CFGMOD_JTAG     => ntRef_ntCFGMOD_JTAG,
                     CFGMOD_RST      => ntRef_ntCFGMOD_RST,
                     CFGMOD_INIT     => ntRef_ntCFGMOD_INIT,
                     CFGMOD_DONE     => ntRef_ntCFGMOD_DONE,
                     CFGMOD_SPI      => ntRef_ntCFGMOD_SPI,
                     CFGMOD_MS       => ntRef_ntCFGMOD_MS,
                     CFGMOD_I2C      => ntRef_ntCFGMOD_I2C,
                     CFGMOD_SPAL     => ntRef_ntCFGMOD_SPAL,
                     CFGMOD_EFB      => ntRef_ntCFGMOD_EFB,
                     CFGMOD_SS       => ntRef_ntCFGMOD_SS,

                     TRIM_VREF1      => ntRef_ntTRIM_VREF1,
                     TRIM_VREF2      => ntRef_ntTRIM_VREF2,
                     TRIM_LDO_VREF   => ntRef_ntTRIM_LDO_VREF,
                     TRIM_ICONST     => ntRef_ntTRIM_ICONST,
                     FREQ_TRIM       => ntRef_ntFREQ_TRIM,
                     MODE_1          => ntRef_ntMODE_1,
                     MODE_2          => ntRef_ntMODE_2,
                     MODE_3          => ntRef_ntMODE_3,
                     JRST            => ntRef_ntJRST,
                     CLOCKDR         => ntRef_ntCLOCKDR,
                     SHIFTDR         => ntRef_ntSHIFTDR,
                     UPDATEDR        => ntRef_ntUPDATEDR,

                     BLSRIN          => ntRef_ntBLSRIN,
                     CLK_CRAM        => ntRef_ntCLK_CRAM,
                     CMEM_TYPE       => ntRef_ntCMEM_TYPE,
                     ERASE_EN        => ntRef_ntERASE_EN,
                     WL_ON           => ntRef_ntWL_ON,
                     FRAME_ADDR      => ntRef_ntFRAME_ADDR,
                     COLUMN          => ntRef_ntCOLUMN,
                     PROG_ON         => ntRef_ntPROG_ON,
                     PROG_CAP        => ntRef_ntPROG_CAP,
                     REGION_RW_EN    => ntRef_ntREGION_RW_EN,
                     PRECHGE         => ntRef_ntPRECHGE,
                     READ            => ntRef_ntREAD,
                     RDBK_CAP        => ntRef_ntRDBK_CAP,

                     GRS_N            => ntRef_ntGRS_N,
                     GLOGEN           => ntRef_ntGLOGEN,
                     GOUTEN           => ntRef_ntGOUTEN,
                     GWEN             => ntRef_ntGWEN,
                     PUP_SEL_N        => ntRef_ntPUP_SEL_N,
                     MCE              => ntRef_ntMCE,
                     MWR              => ntRef_ntMWR,
                     CLK_DRM          => ntRef_ntCLK_DRM,

                     TDO              => ntRef_ntTDO,
                     TDO_OE           => ntRef_ntTDO_OE,
                     MS_N             => ntRef_ntMS_N,
                     MS_N_OE          => ntRef_ntMS_N_OE,
                     SCK              => ntRef_ntSCK,
                     SCK_OE           => ntRef_ntSCK_OE,
                     MISO_O           => ntRef_ntMISO_O,
                     MISO_OE          => ntRef_ntMISO_OE,
                     MOSI_O           => ntRef_ntMOSI_O,
                     MOSI_OE          => ntRef_ntMOSI_OE,
                     SDA_O            => ntRef_ntSDA_O,
//                     SDA_OE           => ntRef_ntSDA_OE,
                     INIT_COMPLETE    => ntRef_ntINIT_COMPLETE,
                     DONE             => ntRef_ntDONE,

                     SPAL_BUSY        => ntRef_ntSPAL_BUSY,
                     SPAL_DOUT        => ntRef_ntSPAL_DOUT,
                     SPAL_D_OE        => ntRef_ntSPAL_D_OE,
                     EFB_TDO          => ntRef_ntEFB_TDO,
                     EFB_TOE          => ntRef_ntEFB_TOE,

                     OSC_EN             => ntRef_ntOSC_EN,
                     OSCFSEL            => ntRef_ntOSCFSEL,
                     OSCFSEL_RBCRC      => ntRef_ntOSCFSEL_RBCRC,
                     OSC_TR             => ntRef_ntOSC_TR,
                     OSC_TR_RBCRC       => ntRef_ntOSC_TR_RBCRC,
                     MCLK_EN            => ntRef_ntMCLK_EN,
                     RBCRC_CLK_EN       => ntRef_ntRBCRC_CLK_EN,
                     PCTLR_POR_OFF      => ntRef_ntPCTLR_POR_OFF,
                     PCTLR_BG_OFF       => ntRef_ntPCTLR_BG_OFF,
                     MFG_SRAM_RETENTION => ntRef_ntMFG_SRAM_RETENTION,
                     EFB_TP_BIAS        => ntRef_ntEFB_TP_BIAS,
                     MFG_TRIM_BIT       => ntRef_ntMFG_TRIM_BIT,

                    TEST_A_Y0_S0       => ntRef_ntTEST_A_Y0_S0,
                    TEST_A_Y1_S0       => ntRef_ntTEST_A_Y1_S0,
                    TEST_A_Y2_S0       => ntRef_ntTEST_A_Y2_S0,
                    TEST_A_Y3_S0       => ntRef_ntTEST_A_Y3_S0,
                    TEST_A_Q0_S0       => ntRef_ntTEST_A_Q0_S0,
                    TEST_A_Q1_S0       => ntRef_ntTEST_A_Q1_S0,
                    TEST_A_Q2_S0       => ntRef_ntTEST_A_Q2_S0,
                    TEST_A_Q3_S0       => ntRef_ntTEST_A_Q3_S0,
                    TEST_A_Y6AB_S0     => ntRef_ntTEST_A_Y6AB_S0,
                    TEST_A_Y6CD_S0     => ntRef_ntTEST_A_Y6CD_S0,
                    TEST_S_Y0_S0       => ntRef_ntTEST_S_Y0_S0,
                    TEST_S_Y1_S0       => ntRef_ntTEST_S_Y1_S0,
                    TEST_S_Y2_S0       => ntRef_ntTEST_S_Y2_S0,
                    TEST_S_Y3_S0       => ntRef_ntTEST_S_Y3_S0,
                    TEST_S_Q0_S0       => ntRef_ntTEST_S_Q0_S0,
                    TEST_S_Q1_S0       => ntRef_ntTEST_S_Q1_S0,
                    TEST_S_Q2_S0       => ntRef_ntTEST_S_Q2_S0,
                    TEST_S_Q3_S0       => ntRef_ntTEST_S_Q3_S0,
                    TEST_S_Y6AB_S0     => ntRef_ntTEST_S_Y6AB_S0,
                    TEST_S_Y6CD_S0     => ntRef_ntTEST_S_Y6CD_S0,
                    TEST_A_Y0_S1       => ntRef_ntTEST_A_Y0_S1,
                    TEST_A_Y1_S1       => ntRef_ntTEST_A_Y1_S1,
                    TEST_A_Y2_S1       => ntRef_ntTEST_A_Y2_S1,
                    TEST_A_Y3_S1       => ntRef_ntTEST_A_Y3_S1,
                    TEST_A_Q0_S1       => ntRef_ntTEST_A_Q0_S1,
                    TEST_A_Q1_S1       => ntRef_ntTEST_A_Q1_S1,
                    TEST_A_Q2_S1       => ntRef_ntTEST_A_Q2_S1,
                    TEST_A_Q3_S1       => ntRef_ntTEST_A_Q3_S1,
                    TEST_A_Y6AB_S1     => ntRef_ntTEST_A_Y6AB_S1,
                    TEST_A_Y6CD_S1     => ntRef_ntTEST_A_Y6CD_S1,
                    TEST_S_Y0_S1       => ntRef_ntTEST_S_Y0_S1,
                    TEST_S_Y1_S1       => ntRef_ntTEST_S_Y1_S1,
                    TEST_S_Y2_S1       => ntRef_ntTEST_S_Y2_S1,
                    TEST_S_Y3_S1       => ntRef_ntTEST_S_Y3_S1,
                    TEST_S_Q0_S1       => ntRef_ntTEST_S_Q0_S1,
                    TEST_S_Q1_S1       => ntRef_ntTEST_S_Q1_S1,
                    TEST_S_Q2_S1       => ntRef_ntTEST_S_Q2_S1,
                    TEST_S_Q3_S1       => ntRef_ntTEST_S_Q3_S1,
                    TEST_S_Y6AB_S1     => ntRef_ntTEST_S_Y6AB_S1,
                    TEST_S_Y6CD_S1     => ntRef_ntTEST_S_Y6CD_S1,
                    TEST_A_Y0_S2       => ntRef_ntTEST_A_Y0_S2,
                    TEST_A_Y1_S2       => ntRef_ntTEST_A_Y1_S2,
                    TEST_A_Y2_S2       => ntRef_ntTEST_A_Y2_S2,
                    TEST_A_Y3_S2       => ntRef_ntTEST_A_Y3_S2,
                    TEST_A_Q0_S2       => ntRef_ntTEST_A_Q0_S2,
                    TEST_A_Q1_S2       => ntRef_ntTEST_A_Q1_S2,
                    TEST_A_Q2_S2       => ntRef_ntTEST_A_Q2_S2,
                    TEST_A_Q3_S2       => ntRef_ntTEST_A_Q3_S2,
                    TEST_A_Y6AB_S2     => ntRef_ntTEST_A_Y6AB_S2,
                    TEST_A_Y6CD_S2     => ntRef_ntTEST_A_Y6CD_S2,
                    TEST_S_Y0_S2       => ntRef_ntTEST_S_Y0_S2,
                    TEST_S_Y1_S2       => ntRef_ntTEST_S_Y1_S2,
                    TEST_S_Y2_S2       => ntRef_ntTEST_S_Y2_S2,
                    TEST_S_Y3_S2       => ntRef_ntTEST_S_Y3_S2,
                    TEST_S_Q0_S2       => ntRef_ntTEST_S_Q0_S2,
                    TEST_S_Q1_S2       => ntRef_ntTEST_S_Q1_S2,
                    TEST_S_Q2_S2       => ntRef_ntTEST_S_Q2_S2,
                    TEST_S_Q3_S2       => ntRef_ntTEST_S_Q3_S2,
                    TEST_S_Y6AB_S2     => ntRef_ntTEST_S_Y6AB_S2,
                    TEST_S_Y6CD_S2     => ntRef_ntTEST_S_Y6CD_S2,

                     TIEHI             => ntRef_ntTIEHI,
                     TIELO             => ntRef_ntTIELO
                    )
        @([sx,sy]);

        STRUCT inc_spec_CCS incVar;
        string pin_SRB;
        string pin_logic_device;
        string attribute_IO;
        int loc_SRB;
        int sy_SRB;
  
        foreach incVar(inc_CCS_SRB_spec)
        {
            pin_SRB = incVar.port_name_SRB;
            pin_logic_device = incVar.port_name_device;
            attribute_IO = incVar.attribute_IO;
            loc_SRB = incVar.loc_SRB;
           
            if(loc_SRB==0)
            {
              sy_SRB = sy;
            }
            else
            {
              sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
            }
            
            if(attribute_IO =="I")
            { 
             
               connect(<pin *pin_logic_device of <device CCS_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-3,sy_SRB]>>);
            }
            else
            {
              connect(<pin *pin_SRB of<device SRB_TILE@[sx-3,sy_SRB]>> =>  <wire *pin_logic_device of <device CCS_TILE @[sx,sy]>>); 
            }
        }

    if(!((tx_pll0==0)&&(ty_pll0==0)))
    {
      int sx_pll0 = tx_pll0 * NUM_GRID_X + 3;
      int sy_pll0 = ty_pll0 * NUM_GRID_Y;

      connect
        (
          <pin PLL0_PRDATA of <device CCS_TILE @[sx,sy]>> => <wire PRDATA of <device PLL_TILE @[sx_pll0,sy_pll0]>>,
          <pin PLL0_PREADY of <device CCS_TILE @[sx,sy]>> => <wire PREADY of <device PLL_TILE @[sx_pll0,sy_pll0]>>
        );
    }
    else
    {
      connect
        (
          <pin PLL0_PRDATA[0] of <device CCS_TILE @[sx,sy]>> => <wire TIELO of <device CCS_TILE @[sx,sy]>>,
          <pin PLL0_PRDATA[1] of <device CCS_TILE @[sx,sy]>> => <wire TIELO of <device CCS_TILE @[sx,sy]>>,
          <pin PLL0_PRDATA[2] of <device CCS_TILE @[sx,sy]>> => <wire TIELO of <device CCS_TILE @[sx,sy]>>,
          <pin PLL0_PRDATA[3] of <device CCS_TILE @[sx,sy]>> => <wire TIELO of <device CCS_TILE @[sx,sy]>>,
          <pin PLL0_PRDATA[4] of <device CCS_TILE @[sx,sy]>> => <wire TIELO of <device CCS_TILE @[sx,sy]>>,
          <pin PLL0_PRDATA[5] of <device CCS_TILE @[sx,sy]>> => <wire TIELO of <device CCS_TILE @[sx,sy]>>,
          <pin PLL0_PRDATA[6] of <device CCS_TILE @[sx,sy]>> => <wire TIELO of <device CCS_TILE @[sx,sy]>>,
          <pin PLL0_PRDATA[7] of <device CCS_TILE @[sx,sy]>> => <wire TIELO of <device CCS_TILE @[sx,sy]>>,
          <pin PLL0_PREADY of <device CCS_TILE @[sx,sy]>>    => <wire TIELO of <device CCS_TILE @[sx,sy]>>
        );
    }

    

    if(!((tx_pll1==0)&&(ty_pll1==0)))
    {
      int sx_pll1 = tx_pll1 * NUM_GRID_X + 3;
      int sy_pll1 = ty_pll1 * NUM_GRID_Y;

      connect
        (
          <pin PLL1_PRDATA of <device CCS_TILE @[sx,sy]>> => <wire PRDATA of <device PLL_TILE @[sx_pll1,sy_pll1]>>,
          <pin PLL1_PREADY of <device CCS_TILE @[sx,sy]>> => <wire PREADY of <device PLL_TILE @[sx_pll1,sy_pll1]>>
        );
    }
    else
    {
      connect
        (
          <pin PLL1_PRDATA[0] of <device CCS_TILE @[sx,sy]>> => <wire TIELO of <device CCS_TILE @[sx,sy]>>,
          <pin PLL1_PRDATA[1] of <device CCS_TILE @[sx,sy]>> => <wire TIELO of <device CCS_TILE @[sx,sy]>>,
          <pin PLL1_PRDATA[2] of <device CCS_TILE @[sx,sy]>> => <wire TIELO of <device CCS_TILE @[sx,sy]>>,
          <pin PLL1_PRDATA[3] of <device CCS_TILE @[sx,sy]>> => <wire TIELO of <device CCS_TILE @[sx,sy]>>,
          <pin PLL1_PRDATA[4] of <device CCS_TILE @[sx,sy]>> => <wire TIELO of <device CCS_TILE @[sx,sy]>>,
          <pin PLL1_PRDATA[5] of <device CCS_TILE @[sx,sy]>> => <wire TIELO of <device CCS_TILE @[sx,sy]>>,
          <pin PLL1_PRDATA[6] of <device CCS_TILE @[sx,sy]>> => <wire TIELO of <device CCS_TILE @[sx,sy]>>,
          <pin PLL1_PRDATA[7] of <device CCS_TILE @[sx,sy]>> => <wire TIELO of <device CCS_TILE @[sx,sy]>>,
          <pin PLL1_PREADY of <device CCS_TILE @[sx,sy]>>    => <wire TIELO of <device CCS_TILE @[sx,sy]>>
        );
    }

                 
}// end of function place_ccs_tile

/********************************************************************************
********************************************************************************/
function place_drm_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;
    
    string strVar;
   
    //LOGIC OUTPUT
    sprintf(strVar,"ntX1CASQO_A_%d_%d",sx,sy);
    &wire ntRef_ntX1CASQO_A = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
   
    sprintf(strVar,"ntX1CASQO_B_%d_%d",sx,sy);
    &wire ntRef_ntX1CASQO_B = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY0_TEST_A_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntGY0_TEST_A_Y6AB = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY0_TEST_A_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntGY0_TEST_A_Y6CD = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY0_TEST_A_Y0_%d_%d",sx,sy);
    &wire ntRef_ntGY0_TEST_A_Y0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY0_TEST_A_Y1_%d_%d",sx,sy);
    &wire ntRef_ntGY0_TEST_A_Y1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY0_TEST_A_Y2_%d_%d",sx,sy);
    &wire ntRef_ntGY0_TEST_A_Y2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY0_TEST_A_Y3_%d_%d",sx,sy);
    &wire ntRef_ntGY0_TEST_A_Y3 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY0_TEST_A_Q0_%d_%d",sx,sy);
    &wire ntRef_ntGY0_TEST_A_Q0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY0_TEST_A_Q1_%d_%d",sx,sy);
    &wire ntRef_ntGY0_TEST_A_Q1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY0_TEST_A_Q2_%d_%d",sx,sy);
    &wire ntRef_ntGY0_TEST_A_Q2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY0_TEST_A_Q3_%d_%d",sx,sy);
    &wire ntRef_ntGY0_TEST_A_Q3 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY0_TEST_S_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntGY0_TEST_S_Y6AB = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY0_TEST_S_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntGY0_TEST_S_Y6CD = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY0_TEST_S_Y0_%d_%d",sx,sy);
    &wire ntRef_ntGY0_TEST_S_Y0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY0_TEST_S_Y1_%d_%d",sx,sy);
    &wire ntRef_ntGY0_TEST_S_Y1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY0_TEST_S_Y2_%d_%d",sx,sy);
    &wire ntRef_ntGY0_TEST_S_Y2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY0_TEST_S_Y3_%d_%d",sx,sy);
    &wire ntRef_ntGY0_TEST_S_Y3 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY0_TEST_S_Q0_%d_%d",sx,sy);
    &wire ntRef_ntGY0_TEST_S_Q0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY0_TEST_S_Q1_%d_%d",sx,sy);
    &wire ntRef_ntGY0_TEST_S_Q1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY0_TEST_S_Q2_%d_%d",sx,sy);
    &wire ntRef_ntGY0_TEST_S_Q2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY0_TEST_S_Q3_%d_%d",sx,sy);
    &wire ntRef_ntGY0_TEST_S_Q3 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY1_TEST_A_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntGY1_TEST_A_Y6AB = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY1_TEST_A_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntGY1_TEST_A_Y6CD = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY1_TEST_A_Y0_%d_%d",sx,sy);
    &wire ntRef_ntGY1_TEST_A_Y0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY1_TEST_A_Y1_%d_%d",sx,sy);
    &wire ntRef_ntGY1_TEST_A_Y1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY1_TEST_A_Y2_%d_%d",sx,sy);
    &wire ntRef_ntGY1_TEST_A_Y2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY1_TEST_A_Y3_%d_%d",sx,sy);
    &wire ntRef_ntGY1_TEST_A_Y3 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY1_TEST_A_Q0_%d_%d",sx,sy);
    &wire ntRef_ntGY1_TEST_A_Q0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY1_TEST_A_Q1_%d_%d",sx,sy);
    &wire ntRef_ntGY1_TEST_A_Q1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY1_TEST_A_Q2_%d_%d",sx,sy);
    &wire ntRef_ntGY1_TEST_A_Q2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY1_TEST_A_Q3_%d_%d",sx,sy);
    &wire ntRef_ntGY1_TEST_A_Q3 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY1_TEST_S_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntGY1_TEST_S_Y6AB = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY1_TEST_S_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntGY1_TEST_S_Y6CD = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY1_TEST_S_Y0_%d_%d",sx,sy);
    &wire ntRef_ntGY1_TEST_S_Y0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY1_TEST_S_Y1_%d_%d",sx,sy);
    &wire ntRef_ntGY1_TEST_S_Y1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY1_TEST_S_Y2_%d_%d",sx,sy);
    &wire ntRef_ntGY1_TEST_S_Y2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY1_TEST_S_Y3_%d_%d",sx,sy);
    &wire ntRef_ntGY1_TEST_S_Y3 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY1_TEST_S_Q0_%d_%d",sx,sy);
    &wire ntRef_ntGY1_TEST_S_Q0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY1_TEST_S_Q1_%d_%d",sx,sy);
    &wire ntRef_ntGY1_TEST_S_Q1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY1_TEST_S_Q2_%d_%d",sx,sy);
    &wire ntRef_ntGY1_TEST_S_Q2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY1_TEST_S_Q3_%d_%d",sx,sy);
    &wire ntRef_ntGY1_TEST_S_Q3 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY2_TEST_A_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntGY2_TEST_A_Y6AB = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY2_TEST_A_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntGY2_TEST_A_Y6CD = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY2_TEST_A_Y0_%d_%d",sx,sy);
    &wire ntRef_ntGY2_TEST_A_Y0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY2_TEST_A_Y1_%d_%d",sx,sy);
    &wire ntRef_ntGY2_TEST_A_Y1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY2_TEST_A_Y2_%d_%d",sx,sy);
    &wire ntRef_ntGY2_TEST_A_Y2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY2_TEST_A_Y3_%d_%d",sx,sy);
    &wire ntRef_ntGY2_TEST_A_Y3 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY2_TEST_A_Q0_%d_%d",sx,sy);
    &wire ntRef_ntGY2_TEST_A_Q0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY2_TEST_A_Q1_%d_%d",sx,sy);
    &wire ntRef_ntGY2_TEST_A_Q1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY2_TEST_A_Q2_%d_%d",sx,sy);
    &wire ntRef_ntGY2_TEST_A_Q2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY2_TEST_A_Q3_%d_%d",sx,sy);
    &wire ntRef_ntGY2_TEST_A_Q3 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY2_TEST_S_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntGY2_TEST_S_Y6AB = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY2_TEST_S_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntGY2_TEST_S_Y6CD = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY2_TEST_S_Y0_%d_%d",sx,sy);
    &wire ntRef_ntGY2_TEST_S_Y0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY2_TEST_S_Y1_%d_%d",sx,sy);
    &wire ntRef_ntGY2_TEST_S_Y1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY2_TEST_S_Y2_%d_%d",sx,sy);
    &wire ntRef_ntGY2_TEST_S_Y2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY2_TEST_S_Y3_%d_%d",sx,sy);
    &wire ntRef_ntGY2_TEST_S_Y3 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY2_TEST_S_Q0_%d_%d",sx,sy);
    &wire ntRef_ntGY2_TEST_S_Q0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY2_TEST_S_Q1_%d_%d",sx,sy);
    &wire ntRef_ntGY2_TEST_S_Q1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY2_TEST_S_Q2_%d_%d",sx,sy);
    &wire ntRef_ntGY2_TEST_S_Q2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGY2_TEST_S_Q3_%d_%d",sx,sy);
    &wire ntRef_ntGY2_TEST_S_Q3 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;


    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar, "DRM_TILE_%d_%d", sx, sy);
    
    device DRM_TILE *strVar
         port map (
                    X1CASQO_A           => ntRef_ntX1CASQO_A,
                    X1CASQO_B           => ntRef_ntX1CASQO_B,
                    GY0_TEST_A_Y0       => ntRef_ntGY0_TEST_A_Y0,
                    GY0_TEST_A_Y1       => ntRef_ntGY0_TEST_A_Y1,
                    GY0_TEST_A_Y2       => ntRef_ntGY0_TEST_A_Y2,
                    GY0_TEST_A_Y3       => ntRef_ntGY0_TEST_A_Y3,
                    GY0_TEST_A_Q0       => ntRef_ntGY0_TEST_A_Q0,
                    GY0_TEST_A_Q1       => ntRef_ntGY0_TEST_A_Q1,
                    GY0_TEST_A_Q2       => ntRef_ntGY0_TEST_A_Q2,
                    GY0_TEST_A_Q3       => ntRef_ntGY0_TEST_A_Q3,
                    GY0_TEST_A_Y6AB     => ntRef_ntGY0_TEST_A_Y6AB,
                    GY0_TEST_A_Y6CD     => ntRef_ntGY0_TEST_A_Y6CD,
                    GY0_TEST_S_Y0       => ntRef_ntGY0_TEST_S_Y0,
                    GY0_TEST_S_Y1       => ntRef_ntGY0_TEST_S_Y1,
                    GY0_TEST_S_Y2       => ntRef_ntGY0_TEST_S_Y2,
                    GY0_TEST_S_Y3       => ntRef_ntGY0_TEST_S_Y3,
                    GY0_TEST_S_Q0       => ntRef_ntGY0_TEST_S_Q0,
                    GY0_TEST_S_Q1       => ntRef_ntGY0_TEST_S_Q1,
                    GY0_TEST_S_Q2       => ntRef_ntGY0_TEST_S_Q2,
                    GY0_TEST_S_Q3       => ntRef_ntGY0_TEST_S_Q3,
                    GY0_TEST_S_Y6AB     => ntRef_ntGY0_TEST_S_Y6AB,
                    GY0_TEST_S_Y6CD     => ntRef_ntGY0_TEST_S_Y6CD,
                    GY1_TEST_A_Y0       => ntRef_ntGY1_TEST_A_Y0,
                    GY1_TEST_A_Y1       => ntRef_ntGY1_TEST_A_Y1,
                    GY1_TEST_A_Y2       => ntRef_ntGY1_TEST_A_Y2,
                    GY1_TEST_A_Y3       => ntRef_ntGY1_TEST_A_Y3,
                    GY1_TEST_A_Q0       => ntRef_ntGY1_TEST_A_Q0,
                    GY1_TEST_A_Q1       => ntRef_ntGY1_TEST_A_Q1,
                    GY1_TEST_A_Q2       => ntRef_ntGY1_TEST_A_Q2,
                    GY1_TEST_A_Q3       => ntRef_ntGY1_TEST_A_Q3,
                    GY1_TEST_A_Y6AB     => ntRef_ntGY1_TEST_A_Y6AB,
                    GY1_TEST_A_Y6CD     => ntRef_ntGY1_TEST_A_Y6CD,
                    GY1_TEST_S_Y0       => ntRef_ntGY1_TEST_S_Y0,
                    GY1_TEST_S_Y1       => ntRef_ntGY1_TEST_S_Y1,
                    GY1_TEST_S_Y2       => ntRef_ntGY1_TEST_S_Y2,
                    GY1_TEST_S_Y3       => ntRef_ntGY1_TEST_S_Y3,
                    GY1_TEST_S_Q0       => ntRef_ntGY1_TEST_S_Q0,
                    GY1_TEST_S_Q1       => ntRef_ntGY1_TEST_S_Q1,
                    GY1_TEST_S_Q2       => ntRef_ntGY1_TEST_S_Q2,
                    GY1_TEST_S_Q3       => ntRef_ntGY1_TEST_S_Q3,
                    GY1_TEST_S_Y6AB     => ntRef_ntGY1_TEST_S_Y6AB,
                    GY1_TEST_S_Y6CD     => ntRef_ntGY1_TEST_S_Y6CD,
                    GY2_TEST_A_Y0       => ntRef_ntGY2_TEST_A_Y0,
                    GY2_TEST_A_Y1       => ntRef_ntGY2_TEST_A_Y1,
                    GY2_TEST_A_Y2       => ntRef_ntGY2_TEST_A_Y2,
                    GY2_TEST_A_Y3       => ntRef_ntGY2_TEST_A_Y3,
                    GY2_TEST_A_Q0       => ntRef_ntGY2_TEST_A_Q0,
                    GY2_TEST_A_Q1       => ntRef_ntGY2_TEST_A_Q1,
                    GY2_TEST_A_Q2       => ntRef_ntGY2_TEST_A_Q2,
                    GY2_TEST_A_Q3       => ntRef_ntGY2_TEST_A_Q3,
                    GY2_TEST_A_Y6AB     => ntRef_ntGY2_TEST_A_Y6AB,
                    GY2_TEST_A_Y6CD     => ntRef_ntGY2_TEST_A_Y6CD,
                    GY2_TEST_S_Y0       => ntRef_ntGY2_TEST_S_Y0,
                    GY2_TEST_S_Y1       => ntRef_ntGY2_TEST_S_Y1,
                    GY2_TEST_S_Y2       => ntRef_ntGY2_TEST_S_Y2,
                    GY2_TEST_S_Y3       => ntRef_ntGY2_TEST_S_Y3,
                    GY2_TEST_S_Q0       => ntRef_ntGY2_TEST_S_Q0,
                    GY2_TEST_S_Q1       => ntRef_ntGY2_TEST_S_Q1,
                    GY2_TEST_S_Q2       => ntRef_ntGY2_TEST_S_Q2,
                    GY2_TEST_S_Q3       => ntRef_ntGY2_TEST_S_Q3,
                    GY2_TEST_S_Y6AB     => ntRef_ntGY2_TEST_S_Y6AB,
                    GY2_TEST_S_Y6CD     => ntRef_ntGY2_TEST_S_Y6CD,
                    TIEHI               => ntRef_ntTIEHI
                  )
        @([sx,sy]);
  
      STRUCT inc_spec_DRM incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_DRM_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device DRM_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-3,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx-3,sy_SRB]>> =>  <wire *pin_logic_device of <device DRM_TILE @[sx,sy]>>); 
          }
      }         
        
}// end of function place_drm_tile
/********************************************************************************
********************************************************************************/
function place_pll_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;
       
    string strVar;
    sprintf(strVar,"ntLOCKOUT_CAS_%d_%d",sx,sy);
    &wire ntRef_ntLOCKOUT_CAS = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOP_%d_%d",sx,sy);
    &wire ntRef_ntCLKOP = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLKOS_%d_%d",sx,sy);
    &wire ntRef_ntCLKOS = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLKOS2_%d_%d",sx,sy);
    &wire ntRef_ntCLKOS2 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLKOS3_%d_%d",sx,sy);
    &wire ntRef_ntCLKOS3 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntPREADY_%d_%d",sx,sy);
    &wire ntRef_ntPREADY = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPRDATA_%d_%d",sx,sy);
    &wire ntRef_ntPRDATA[7:0] = wire *strVar[7:0]           /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y6AB_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6AB_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y6CD_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6CD_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y0_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y0_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y1_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y1_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y2_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y2_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y3_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y3_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q0_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q0_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q1_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q1_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q2_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q2_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q3_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q3_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y6AB_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6AB_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y6CD_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6CD_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y0_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y0_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y1_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y1_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y2_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y2_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y3_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y3_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q0_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q0_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q1_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q1_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q2_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q2_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q3_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q3_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y6AB_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6AB_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y6CD_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6CD_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y0_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y0_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y1_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y1_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y2_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y2_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y3_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y3_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q0_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q0_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q1_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q1_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q2_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q2_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q3_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q3_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y6AB_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6AB_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y6CD_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6CD_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y0_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y0_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y1_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y1_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y2_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y2_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y3_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y3_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q0_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q0_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q1_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q1_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q2_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q2_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q3_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q3_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;   

    sprintf(strVar,"ntLDO_TEST_OUT_%d_%d",sx,sy);
    &wire ntRef_ntLDO_TEST_OUT = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;       

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar, "PLL_TILE_%d_%d", sx, sy);
    
    device PLL_TILE *strVar
         port map (
                    LOCKOUT_CAS   => ntRef_ntLOCKOUT_CAS, 

                    CLKOP         => ntRef_ntCLKOP,
                    CLKOS         => ntRef_ntCLKOS,
                    CLKOS2        => ntRef_ntCLKOS2,
                    CLKOS3        => ntRef_ntCLKOS3,
                    PREADY        => ntRef_ntPREADY,
                    PRDATA        => ntRef_ntPRDATA,
                    LDO_TEST_OUT  => ntRef_ntLDO_TEST_OUT,

                    TEST_A_Y0_0       => ntRef_ntTEST_A_Y0_0,
                    TEST_A_Y1_0       => ntRef_ntTEST_A_Y1_0,
                    TEST_A_Y2_0       => ntRef_ntTEST_A_Y2_0,
                    TEST_A_Y3_0       => ntRef_ntTEST_A_Y3_0,
                    TEST_A_Q0_0       => ntRef_ntTEST_A_Q0_0,
                    TEST_A_Q1_0       => ntRef_ntTEST_A_Q1_0,
                    TEST_A_Q2_0       => ntRef_ntTEST_A_Q2_0,
                    TEST_A_Q3_0       => ntRef_ntTEST_A_Q3_0,
                    TEST_A_Y6AB_0     => ntRef_ntTEST_A_Y6AB_0,
                    TEST_A_Y6CD_0     => ntRef_ntTEST_A_Y6CD_0,
                    TEST_S_Y0_0       => ntRef_ntTEST_S_Y0_0,
                    TEST_S_Y1_0       => ntRef_ntTEST_S_Y1_0,
                    TEST_S_Y2_0       => ntRef_ntTEST_S_Y2_0,
                    TEST_S_Y3_0       => ntRef_ntTEST_S_Y3_0,
                    TEST_S_Q0_0       => ntRef_ntTEST_S_Q0_0,
                    TEST_S_Q1_0       => ntRef_ntTEST_S_Q1_0,
                    TEST_S_Q2_0       => ntRef_ntTEST_S_Q2_0,
                    TEST_S_Q3_0       => ntRef_ntTEST_S_Q3_0,
                    TEST_S_Y6AB_0     => ntRef_ntTEST_S_Y6AB_0,
                    TEST_S_Y6CD_0     => ntRef_ntTEST_S_Y6CD_0,
                    TEST_A_Y0_1       => ntRef_ntTEST_A_Y0_1,
                    TEST_A_Y1_1       => ntRef_ntTEST_A_Y1_1,
                    TEST_A_Y2_1       => ntRef_ntTEST_A_Y2_1,
                    TEST_A_Y3_1       => ntRef_ntTEST_A_Y3_1,
                    TEST_A_Q0_1       => ntRef_ntTEST_A_Q0_1,
                    TEST_A_Q1_1       => ntRef_ntTEST_A_Q1_1,
                    TEST_A_Q2_1       => ntRef_ntTEST_A_Q2_1,
                    TEST_A_Q3_1       => ntRef_ntTEST_A_Q3_1,
                    TEST_A_Y6AB_1     => ntRef_ntTEST_A_Y6AB_1,
                    TEST_A_Y6CD_1     => ntRef_ntTEST_A_Y6CD_1,
                    TEST_S_Y0_1       => ntRef_ntTEST_S_Y0_1,
                    TEST_S_Y1_1       => ntRef_ntTEST_S_Y1_1,
                    TEST_S_Y2_1       => ntRef_ntTEST_S_Y2_1,
                    TEST_S_Y3_1       => ntRef_ntTEST_S_Y3_1,
                    TEST_S_Q0_1       => ntRef_ntTEST_S_Q0_1,
                    TEST_S_Q1_1       => ntRef_ntTEST_S_Q1_1,
                    TEST_S_Q2_1       => ntRef_ntTEST_S_Q2_1,
                    TEST_S_Q3_1       => ntRef_ntTEST_S_Q3_1,
                    TEST_S_Y6AB_1     => ntRef_ntTEST_S_Y6AB_1,
                    TEST_S_Y6CD_1     => ntRef_ntTEST_S_Y6CD_1,
                    TIEHI             => ntRef_ntTIEHI
                  )
        @([sx,sy]);
     

      STRUCT inc_spec_PLL incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_PLL_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device PLL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-2,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx-3,sy_SRB]>> => <wire *pin_logic_device of <device PLL_TILE @[sx,sy]>>); 
          }
      } 

    
}// end of function place_pll_tile

/********************************************************************************
********************************************************************************/
function place_uscm_tile(unsigned int tx,ty, tx_srb, ty_srb)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
   
    string strVar;

    sprintf(strVar,"ntCLK_GLOBAL_L_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_L[7:0] = wire *strVar[7:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntSIG_GLOBAL_L_%d_%d",sx,sy);
    &wire ntRef_ntSIG_GLOBAL_L[7:0] = wire *strVar[7:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_GLOBAL_R_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_R[7:0] = wire *strVar[7:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntSIG_GLOBAL_R_%d_%d",sx,sy);
    &wire ntRef_ntSIG_GLOBAL_R[7:0] = wire *strVar[7:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_BRGMUX_L_%d_%d",sx,sy);
    &wire ntRef_ntCLK_BRGMUX_L[1:0] = wire *strVar[1:0]      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_BRGMUX_R_%d_%d",sx,sy);
    &wire ntRef_ntCLK_BRGMUX_R[1:0] = wire *strVar[1:0]      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_BRG_L0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_BRG_L0 = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_BRG_L1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_BRG_L1 = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_BRG_R0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_BRG_R0 = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_BRG_R1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_BRG_R1 = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[15:0] = wire *strVar[15:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[15:0] = wire *strVar[15:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLKOP_PLL_D_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOP_PLL_D_BUF = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOS_PLL_D_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOS_PLL_D_BUF = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOP_PLL_U_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOP_PLL_U_BUF = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOS_PLL_U_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOS_PLL_U_BUF = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_P_BL_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_P_BL_BUF = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_P_BM_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_P_BM_BUF = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_P_BR_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_P_BR_BUF = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_P_TL_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_P_TL_BUF = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_P_TM_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_P_TM_BUF = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_P_TR_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_P_TR_BUF = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_PIO2PLL_R_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO2PLL_R[1:0] = wire *strVar[1:0]      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_IOMUX2PLL_R_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOMUX2PLL_R_BUF[1:0] = wire *strVar[1:0]      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;


    sprintf(strVar,"ntDCI_INIT_OUT_%d_%d",sx,sy);
    &wire ntRef_ntDCI_INIT_OUT = wire *strVar;


    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    
    sprintf(strVar, "USCM_TILE_%d_%d", sx, sy);
    
    device USCM_TILE *strVar
          port map (
                      CLK_GLOBAL_L    => ntRef_ntCLK_GLOBAL_L,
                      SIG_GLOBAL_L    => ntRef_ntSIG_GLOBAL_L,
                      CLK_GLOBAL_R    => ntRef_ntCLK_GLOBAL_R,
                      SIG_GLOBAL_R    => ntRef_ntSIG_GLOBAL_R,
 //                     CLK_BRGMUX_L    => ntRef_ntCLK_BRGMUX_L,
 //                     CLK_BRGMUX_R    => ntRef_ntCLK_BRGMUX_R,
                      CLK_BRG_L0      => ntRef_ntCLK_BRG_L0,
                      CLK_BRG_R0      => ntRef_ntCLK_BRG_R0,
                      CLK_BRG_L1      => ntRef_ntCLK_BRG_L1,
                      CLK_BRG_R1      => ntRef_ntCLK_BRG_R1,
                      CLK_OUTT        => ntRef_ntCLK_OUTT,
                      CLK_OUTB        => ntRef_ntCLK_OUTB,     
                      TIEHI           => ntRef_ntTIEHI,
                      CLKOP_PLL_D_BUF => ntRef_ntCLKOP_PLL_D_BUF,
                      CLKOS_PLL_D_BUF => ntRef_ntCLKOS_PLL_D_BUF,
                      CLKOP_PLL_U_BUF => ntRef_ntCLKOP_PLL_U_BUF,
                      CLKOS_PLL_U_BUF => ntRef_ntCLKOS_PLL_U_BUF,
                      CLK_P_BL_BUF    => ntRef_ntCLK_P_BL_BUF,
                      CLK_P_BM_BUF    => ntRef_ntCLK_P_BM_BUF,
                      CLK_P_BR_BUF    => ntRef_ntCLK_P_BR_BUF,
                      CLK_P_TL_BUF    => ntRef_ntCLK_P_TL_BUF,
                      CLK_P_TM_BUF    => ntRef_ntCLK_P_TM_BUF,
                      CLK_P_TR_BUF    => ntRef_ntCLK_P_TR_BUF,
                      CLK_PIO2PLL_R   => ntRef_ntCLK_PIO2PLL_R,
                      CLK_IOMUX2PLL_R_BUF   => ntRef_ntCLK_IOMUX2PLL_R_BUF
                    )
        @([sx,sy]);

      STRUCT inc_spec_USCM incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      string dir;
      int sy_srb;
      int sx_srb = tx_srb * NUM_GRID_X;
      int sy_srb0 = ty * NUM_GRID_Y;

      foreach incVar(inc_USCM_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
          dir = incVar.direction_srb;
         
          if(dir=="dn")
          {
           sy_srb = sy_srb0 - (loc_SRB+1)*NUM_GRID_Y;
          }
          else
          {
            sy_srb = sy_srb0 + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device USCM_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> => <wire *pin_logic_device of <device USCM_TILE @[sx,sy]>>); 
          }
      }
        
}// end of function place_uscm_tile
/********************************************************************************
********************************************************************************/
function place_ckeb_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
   
    string strVar;

    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[15:0] = wire *strVar[15:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[15:0] = wire *strVar[15:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;


    
    sprintf(strVar, "CKEB_TILE_%d_%d", sx, sy);
    
    device CKEB_TILE *strVar
          port map (
                      CLK_OUTT    => ntRef_ntCLK_OUTT,
                      CLK_OUTB    => ntRef_ntCLK_OUTB         
                    )
        @([sx,sy]);
        
}// end of function place_ckeb_tile
/********************************************************************************
********************************************************************************/
function place_clkdlyt_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
   
    string strVar;

    sprintf(strVar,"ntCLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCOUT_%d_%d",sx,sy);
    &wire ntRef_ntCOUT = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;


    
    sprintf(strVar, "CLKDLYT_TILE_%d_%d", sx, sy);
    
    device CLKDLYT_TILE *strVar
          port map (
                      CLK_OUT    => ntRef_ntCLK_OUT,
                      COUT       => ntRef_ntCOUT         
                    )
        @([sx,sy]);

      STRUCT inc_spec_CLKDLYT incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      string dir;
      int sy_srb;
      int sx_srb = (tx-1) * NUM_GRID_X;
      int sx_drm = (tx-1) * NUM_GRID_X + 3;
      int sy_drm = (ty-2) * NUM_GRID_X;


      foreach incVar(inc_CLKDLYT_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
          sy_srb = sy + loc_SRB*NUM_GRID_Y; 
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device CLKDLYT_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device DRM_TILE@[sx_drm,sy_drm]>> => <wire *pin_logic_device of <device CLKDLYT_TILE @[sx,sy]>>); 
          }
      }
        
}// end of function place_clkdlyt_tile
/********************************************************************************
********************************************************************************/
function place_clkdlyb_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
   
    string strVar;

    sprintf(strVar,"ntCLK_OUT_L_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT_L = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCOUT_L_%d_%d",sx,sy);
    &wire ntRef_ntCOUT_L = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_OUT_M_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT_M = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCOUT_M_%d_%d",sx,sy);
    &wire ntRef_ntCOUT_M = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_OUT_R_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT_R = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCOUT_R_%d_%d",sx,sy);
    &wire ntRef_ntCOUT_R = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    
    sprintf(strVar, "CLKDLYB_TILE_%d_%d", sx, sy);
    
    device CLKDLYB_TILE *strVar
          port map (
                      CLK_OUT_L    => ntRef_ntCLK_OUT_L,
                      COUT_L       => ntRef_ntCOUT_L,
                      CLK_OUT_M    => ntRef_ntCLK_OUT_M,
                      COUT_M       => ntRef_ntCOUT_M, 
                      CLK_OUT_R    => ntRef_ntCLK_OUT_R,
                      COUT_R       => ntRef_ntCOUT_R         
                    )
        @([sx,sy]);

      STRUCT inc_spec_CLKDLYB incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      string dir;
      int sy_srb;
      int sx_srb = (tx-1) * NUM_GRID_X;
      int sx_drm = (tx-1) * NUM_GRID_X + 3;
      int sy_drm = ty * NUM_GRID_X;


      foreach incVar(inc_CLKDLYB_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
          sy_srb = sy + loc_SRB*NUM_GRID_Y; 
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device CLKDLYB_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device DRM_TILE@[sx_drm,sy_drm]>> => <wire *pin_logic_device of <device CLKDLYB_TILE @[sx,sy]>>); 
          }
      }
        
}// end of function place_clkdlyb_tile
/********************************************************************************
********************************************************************************/
function place_iock_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;
    
   
    string strVar;

    sprintf(strVar,"ntCLK_IOMUX2PLL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOMUX2PLL[1:0] = wire *strVar[1:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_PIO2PLL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO2PLL[1:0] = wire *strVar[1:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;


    sprintf(strVar,"ntCLK_DIV_0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DIV_0[1:0] = wire *strVar[1:0]        /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_DIV_1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DIV_1[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCOUT_%d_%d",sx,sy);
    &wire ntRef_ntCOUT[1:0] = wire *strVar[1:0]            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT[1:0] = wire *strVar[1:0]         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[15:0] = wire *strVar[15:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[15:0] = wire *strVar[15:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_IOPRE2BRGMUX_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOPRE2BRGMUX[1:0] = wire *strVar[1:0]         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_IOL_D_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOL_D[1:0] = wire *strVar[1:0]         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_IOL_U_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOL_U[1:0] = wire *strVar[1:0]         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6AB[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6CD[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y0[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y1[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y2[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y3[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q0[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q1[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q2[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q3[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6AB[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6CD[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y0[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y1[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y2[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y3[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q0[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q1[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q2[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q3[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOP_PLLD_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOP_PLLD_BUF = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOS_PLLD_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOS_PLLD_BUF = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOS2_PLLD_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOS2_PLLD_BUF = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOS3_PLLD_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOS3_PLLD_BUF = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOP_PLLU_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOP_PLLU_BUF = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOS_PLLU_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOS_PLLU_BUF = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOS2_PLLU_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOS2_PLLU_BUF = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOS3_PLLU_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOS3_PLLU_BUF = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_IOMUX2PLL_R_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOMUX2PLL_R_OUT[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_GLOBAL_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_BUF = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_PIO2PLL_R_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO2PLL_R_BUF[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_CFGS_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_CFGS_BUF = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTIEH_%d_%d",sx,sy);
    &wire ntRef_ntTIEH = wire *strVar;

    
    sprintf(strVar, "IOCK_TILE_%d_%d", sx, sy);
    
    device IOCK_TILE *strVar
          port map (
                      CLK_IOMUX2PLL      => ntRef_ntCLK_IOMUX2PLL,
                      CLK_PIO2PLL        => ntRef_ntCLK_PIO2PLL,
                      CLK_DIV_0          => ntRef_ntCLK_DIV_0,
                      CLK_DIV_1          => ntRef_ntCLK_DIV_1,  
                      CLK_OUT            => ntRef_ntCLK_OUT,
                      CLK_OUTT           => ntRef_ntCLK_OUTT,
                      CLK_OUTB           => ntRef_ntCLK_OUTB,
                      CLK_IOPRE2BRGMUX   => ntRef_ntCLK_IOPRE2BRGMUX,
                      TIEH               => ntRef_ntTIEH,
                      CLK_IOL_U          => ntRef_ntCLK_IOL_U,
                      CLK_IOL_D          => ntRef_ntCLK_IOL_D,

                      TEST_A_Y0       => ntRef_ntTEST_A_Y0,
                      TEST_A_Y1       => ntRef_ntTEST_A_Y1,
                      TEST_A_Y2       => ntRef_ntTEST_A_Y2,
                      TEST_A_Y3       => ntRef_ntTEST_A_Y3,
                      TEST_A_Q0       => ntRef_ntTEST_A_Q0,
                      TEST_A_Q1       => ntRef_ntTEST_A_Q1,
                      TEST_A_Q2       => ntRef_ntTEST_A_Q2,
                      TEST_A_Q3       => ntRef_ntTEST_A_Q3,
                      TEST_A_Y6AB     => ntRef_ntTEST_A_Y6AB,
                      TEST_A_Y6CD     => ntRef_ntTEST_A_Y6CD,
                      TEST_S_Y0       => ntRef_ntTEST_S_Y0,
                      TEST_S_Y1       => ntRef_ntTEST_S_Y1,
                      TEST_S_Y2       => ntRef_ntTEST_S_Y2,
                      TEST_S_Y3       => ntRef_ntTEST_S_Y3,
                      TEST_S_Q0       => ntRef_ntTEST_S_Q0,
                      TEST_S_Q1       => ntRef_ntTEST_S_Q1,
                      TEST_S_Q2       => ntRef_ntTEST_S_Q2,
                      TEST_S_Q3       => ntRef_ntTEST_S_Q3,
                      TEST_S_Y6AB     => ntRef_ntTEST_S_Y6AB,
                      TEST_S_Y6CD     => ntRef_ntTEST_S_Y6CD,
                      CLKOP_PLLD_BUF  => ntRef_ntCLKOP_PLLD_BUF,
                      CLKOS_PLLD_BUF  => ntRef_ntCLKOS_PLLD_BUF,
                      CLKOS2_PLLD_BUF => ntRef_ntCLKOS2_PLLD_BUF,
                      CLKOS3_PLLD_BUF => ntRef_ntCLKOS3_PLLD_BUF,
                      CLKOP_PLLU_BUF  => ntRef_ntCLKOP_PLLU_BUF,
                      CLKOS_PLLU_BUF  => ntRef_ntCLKOS_PLLU_BUF,
                      CLKOS2_PLLU_BUF => ntRef_ntCLKOS2_PLLU_BUF,
                      CLKOS3_PLLU_BUF => ntRef_ntCLKOS3_PLLU_BUF,

                      CLK_IOMUX2PLL_R_OUT => ntRef_ntCLK_IOMUX2PLL_R_OUT,
                      CLK_GLOBAL_BUF      => ntRef_ntCLK_GLOBAL_BUF,
                      CLK_PIO2PLL_R_BUF   => ntRef_ntCLK_PIO2PLL_R_BUF,
                      CLK_CFGS_BUF        => ntRef_ntCLK_CFGS_BUF
                    )
        @([sx,sy]);

      STRUCT inc_spec_IOCK incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_srb;
      int sx_srb = sx-3;

      foreach incVar(inc_IOCK_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          sy_srb = sy + loc_SRB*NUM_GRID_Y; 
          
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device IOCK_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> => (incVar.port_name_device=="TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx_srb,sy_srb]>>
                                                                         : <wire *pin_logic_device of <device IOCK_TILE @[sx,sy]>>); 
          }
      }
        
}// end of function place_iock_tile

/********************************************************************************
********************************************************************************/
function place_iol_tile(unsigned int tx,ty,flag)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;
    
    string strVar;

    sprintf(strVar,"ntDQ_A_%d_%d",sx,sy);
    &wire ntRef_ntDQ_A = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQ_B_%d_%d",sx,sy);
    &wire ntRef_ntDQ_B = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQ_C_%d_%d",sx,sy);
    &wire ntRef_ntDQ_C = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQ_D_%d_%d",sx,sy);
    &wire ntRef_ntDQ_D = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTQ_A_%d_%d",sx,sy);
    &wire ntRef_ntTQ_A = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTQ_B_%d_%d",sx,sy);
    &wire ntRef_ntTQ_B = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTQ_C_%d_%d",sx,sy);
    &wire ntRef_ntTQ_C = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTQ_D_%d_%d",sx,sy);
    &wire ntRef_ntTQ_D = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;



    sprintf(strVar,"ntMIPI_SW_DYN_O_A_%d_%d",sx,sy);
    &wire ntRef_ntMIPI_SW_DYN_O_A = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntMIPI_SW_DYN_O_B_%d_%d",sx,sy);
    &wire ntRef_ntMIPI_SW_DYN_O_B = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMIPI_SW_DYN_O_C_%d_%d",sx,sy);
    &wire ntRef_ntMIPI_SW_DYN_O_C = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntMIPI_SW_DYN_O_D_%d_%d",sx,sy);
    &wire ntRef_ntMIPI_SW_DYN_O_D = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntINBUF_DYN_DIS_N_O_A_%d_%d",sx,sy);
    &wire ntRef_ntINBUF_DYN_DIS_N_O_A = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntINBUF_DYN_DIS_N_O_B_%d_%d",sx,sy);
    &wire ntRef_ntINBUF_DYN_DIS_N_O_B = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntINBUF_DYN_DIS_N_O_C_%d_%d",sx,sy);
    &wire ntRef_ntINBUF_DYN_DIS_N_O_C = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntINBUF_DYN_DIS_N_O_D_%d_%d",sx,sy);
    &wire ntRef_ntINBUF_DYN_DIS_N_O_D = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar,"ntTEST_A_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6AB = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6CD = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y3 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q3 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6AB = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6CD = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y3 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q3 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDO0_%d_%d",sx,sy);
    &wire ntRef_ntDO0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDO1_%d_%d",sx,sy);
    &wire ntRef_ntDO1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    if(flag==0)
    {
      sprintf(strVar, "IOLT_TILE_%d_%d", sx, sy);
      device IOLT_TILE *strVar
           port map (
                     DQ_A            =>  ntRef_ntDQ_A,
                     DQ_B            =>  ntRef_ntDQ_B,
                     DQ_C            =>  ntRef_ntDQ_C,
                     DQ_D            =>  ntRef_ntDQ_D,
                     TQ_A            =>  ntRef_ntTQ_A,
                     TQ_B            =>  ntRef_ntTQ_B,
                     TQ_C            =>  ntRef_ntTQ_C,
                     TQ_D            =>  ntRef_ntTQ_D,
                     TEST_A_Y0       => ntRef_ntTEST_A_Y0,
                     TEST_A_Y1       => ntRef_ntTEST_A_Y1,
                     TEST_A_Y2       => ntRef_ntTEST_A_Y2,
                     TEST_A_Y3       => ntRef_ntTEST_A_Y3,
                     TEST_A_Q0       => ntRef_ntTEST_A_Q0,
                     TEST_A_Q1       => ntRef_ntTEST_A_Q1,
                     TEST_A_Q2       => ntRef_ntTEST_A_Q2,
                     TEST_A_Q3       => ntRef_ntTEST_A_Q3,
                     TEST_A_Y6AB     => ntRef_ntTEST_A_Y6AB,
                     TEST_A_Y6CD     => ntRef_ntTEST_A_Y6CD,
                     TEST_S_Y0       => ntRef_ntTEST_S_Y0,
                     TEST_S_Y1       => ntRef_ntTEST_S_Y1,
                     TEST_S_Y2       => ntRef_ntTEST_S_Y2,
                     TEST_S_Y3       => ntRef_ntTEST_S_Y3,
                     TEST_S_Q0       => ntRef_ntTEST_S_Q0,
                     TEST_S_Q1       => ntRef_ntTEST_S_Q1,
                     TEST_S_Q2       => ntRef_ntTEST_S_Q2,
                     TEST_S_Q3       => ntRef_ntTEST_S_Q3,
                     TEST_S_Y6AB     => ntRef_ntTEST_S_Y6AB,
                     TEST_S_Y6CD     => ntRef_ntTEST_S_Y6CD,
                     MIPI_SW_DYN_O_A => ntRef_ntMIPI_SW_DYN_O_A,
                     MIPI_SW_DYN_O_B => ntRef_ntMIPI_SW_DYN_O_B,
                     MIPI_SW_DYN_O_C => ntRef_ntMIPI_SW_DYN_O_C,
                     MIPI_SW_DYN_O_D => ntRef_ntMIPI_SW_DYN_O_D,
                     INBUF_DYN_DIS_N_O_A => ntRef_ntINBUF_DYN_DIS_N_O_A,
                     INBUF_DYN_DIS_N_O_B => ntRef_ntINBUF_DYN_DIS_N_O_B,
                     INBUF_DYN_DIS_N_O_C => ntRef_ntINBUF_DYN_DIS_N_O_C,
                     INBUF_DYN_DIS_N_O_D => ntRef_ntINBUF_DYN_DIS_N_O_D,
                     TIEHI           => ntRef_ntTIEHI
                    )
          @([sx,sy]);

      STRUCT inc_spec_IOL incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;
   
      unsigned int sx_SRB;
      sx_SRB = sx-3;
      int cnt;

      foreach incVar(inc_IOL_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
            connect(<pin *pin_logic_device of <device IOLT_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_SRB,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy_SRB]>> =>  <wire *pin_logic_device of <device IOLT_TILE @[sx,sy]>>);
          }
      }     
    }     
    else if(flag==1)
    {
      sprintf(strVar, "IOLTC_TILE_%d_%d", sx, sy);
      device IOLTC_TILE *strVar
           port map (
                     DQ_A            =>  ntRef_ntDQ_A,
                     DQ_B            =>  ntRef_ntDQ_B,
                     DQ_C            =>  ntRef_ntDQ_C,
                     DQ_D            =>  ntRef_ntDQ_D,
                     TQ_A            =>  ntRef_ntTQ_A,
                     TQ_B            =>  ntRef_ntTQ_B,
                     TQ_C            =>  ntRef_ntTQ_C,
                     TQ_D            =>  ntRef_ntTQ_D,

                     TEST_A_Y0       => ntRef_ntTEST_A_Y0,
                     TEST_A_Y1       => ntRef_ntTEST_A_Y1,
                     TEST_A_Y2       => ntRef_ntTEST_A_Y2,
                     TEST_A_Y3       => ntRef_ntTEST_A_Y3,
                     TEST_A_Q0       => ntRef_ntTEST_A_Q0,
                     TEST_A_Q1       => ntRef_ntTEST_A_Q1,
                     TEST_A_Q2       => ntRef_ntTEST_A_Q2,
                     TEST_A_Q3       => ntRef_ntTEST_A_Q3,
                     TEST_A_Y6AB     => ntRef_ntTEST_A_Y6AB,
                     TEST_A_Y6CD     => ntRef_ntTEST_A_Y6CD,
                     TEST_S_Y0       => ntRef_ntTEST_S_Y0,
                     TEST_S_Y1       => ntRef_ntTEST_S_Y1,
                     TEST_S_Y2       => ntRef_ntTEST_S_Y2,
                     TEST_S_Y3       => ntRef_ntTEST_S_Y3,
                     TEST_S_Q0       => ntRef_ntTEST_S_Q0,
                     TEST_S_Q1       => ntRef_ntTEST_S_Q1,
                     TEST_S_Q2       => ntRef_ntTEST_S_Q2,
                     TEST_S_Q3       => ntRef_ntTEST_S_Q3,
                     TEST_S_Y6AB     => ntRef_ntTEST_S_Y6AB,
                     TEST_S_Y6CD     => ntRef_ntTEST_S_Y6CD,
                     MIPI_SW_DYN_O_A => ntRef_ntMIPI_SW_DYN_O_A,
                     MIPI_SW_DYN_O_B => ntRef_ntMIPI_SW_DYN_O_B,
                     MIPI_SW_DYN_O_C => ntRef_ntMIPI_SW_DYN_O_C,
                     MIPI_SW_DYN_O_D => ntRef_ntMIPI_SW_DYN_O_D,
                     INBUF_DYN_DIS_N_O_A => ntRef_ntINBUF_DYN_DIS_N_O_A,
                     INBUF_DYN_DIS_N_O_B => ntRef_ntINBUF_DYN_DIS_N_O_B,
                     INBUF_DYN_DIS_N_O_C => ntRef_ntINBUF_DYN_DIS_N_O_C,
                     INBUF_DYN_DIS_N_O_D => ntRef_ntINBUF_DYN_DIS_N_O_D,
                     TIEHI           => ntRef_ntTIEHI
                    )
          @([sx,sy]);

      STRUCT inc_spec_IOL incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;
   
      unsigned int sx_SRB;
      sx_SRB = sx-3;
      int cnt;

      foreach incVar(inc_IOL_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          {     
            connect
              (
                <pin *pin_logic_device of <device IOLTC_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_SRB,sy_SRB]>>
              );
          }
          else
          {
            connect
              (
                <pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy_SRB]>> => <wire *pin_logic_device of <device IOLTC_TILE @[sx,sy]>>
              );
          }
      }     
    } 
    else if(flag==2)
    {
      sprintf(strVar, "IOLL_TILE_%d_%d", sx, sy);
      device IOLL_TILE *strVar
           port map (
                     DQ_A            =>  ntRef_ntDQ_A,
                     DQ_B            =>  ntRef_ntDQ_B,
                     DQ_C            =>  ntRef_ntDQ_C,
                     DQ_D            =>  ntRef_ntDQ_D,
                     TQ_A            =>  ntRef_ntTQ_A,
                     TQ_B            =>  ntRef_ntTQ_B,
                     TQ_C            =>  ntRef_ntTQ_C,
                     TQ_D            =>  ntRef_ntTQ_D,

                     TEST_A_Y0       => ntRef_ntTEST_A_Y0,
                     TEST_A_Y1       => ntRef_ntTEST_A_Y1,
                     TEST_A_Y2       => ntRef_ntTEST_A_Y2,
                     TEST_A_Y3       => ntRef_ntTEST_A_Y3,
                     TEST_A_Q0       => ntRef_ntTEST_A_Q0,
                     TEST_A_Q1       => ntRef_ntTEST_A_Q1,
                     TEST_A_Q2       => ntRef_ntTEST_A_Q2,
                     TEST_A_Q3       => ntRef_ntTEST_A_Q3,
                     TEST_A_Y6AB     => ntRef_ntTEST_A_Y6AB,
                     TEST_A_Y6CD     => ntRef_ntTEST_A_Y6CD,
                     TEST_S_Y0       => ntRef_ntTEST_S_Y0,
                     TEST_S_Y1       => ntRef_ntTEST_S_Y1,
                     TEST_S_Y2       => ntRef_ntTEST_S_Y2,
                     TEST_S_Y3       => ntRef_ntTEST_S_Y3,
                     TEST_S_Q0       => ntRef_ntTEST_S_Q0,
                     TEST_S_Q1       => ntRef_ntTEST_S_Q1,
                     TEST_S_Q2       => ntRef_ntTEST_S_Q2,
                     TEST_S_Q3       => ntRef_ntTEST_S_Q3,
                     TEST_S_Y6AB     => ntRef_ntTEST_S_Y6AB,
                     TEST_S_Y6CD     => ntRef_ntTEST_S_Y6CD,
                     MIPI_SW_DYN_O_A => ntRef_ntMIPI_SW_DYN_O_A,
                     MIPI_SW_DYN_O_B => ntRef_ntMIPI_SW_DYN_O_B,
                     MIPI_SW_DYN_O_C => ntRef_ntMIPI_SW_DYN_O_C,
                     MIPI_SW_DYN_O_D => ntRef_ntMIPI_SW_DYN_O_D,
                     INBUF_DYN_DIS_N_O_A => ntRef_ntINBUF_DYN_DIS_N_O_A,
                     INBUF_DYN_DIS_N_O_B => ntRef_ntINBUF_DYN_DIS_N_O_B,
                     INBUF_DYN_DIS_N_O_C => ntRef_ntINBUF_DYN_DIS_N_O_C,
                     INBUF_DYN_DIS_N_O_D => ntRef_ntINBUF_DYN_DIS_N_O_D,
                     TIEHI           => ntRef_ntTIEHI
                    )
          @([sx,sy]);

      STRUCT inc_spec_IOLL incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;
   
      unsigned int sx_SRB;
      sx_SRB = sx-3;
      int cnt;

      foreach incVar(inc_IOLL_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
            connect(<pin *pin_logic_device of <device IOLL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_SRB,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy_SRB]>> => <wire *pin_logic_device of <device IOLL_TILE @[sx,sy]>>);
          }
      }     
    }          
    else if(flag==3)
    {
      sprintf(strVar, "IOLR_TILE_%d_%d", sx, sy);
      device IOLR_TILE *strVar
           port map (
                     DQ_A            =>  ntRef_ntDQ_A,
                     DQ_B            =>  ntRef_ntDQ_B,
                     DQ_C            =>  ntRef_ntDQ_C,
                     DQ_D            =>  ntRef_ntDQ_D,
                     TQ_A            =>  ntRef_ntTQ_A,
                     TQ_B            =>  ntRef_ntTQ_B,
                     TQ_C            =>  ntRef_ntTQ_C,
                     TQ_D            =>  ntRef_ntTQ_D,

                     TEST_A_Y0       => ntRef_ntTEST_A_Y0,
                     TEST_A_Y1       => ntRef_ntTEST_A_Y1,
                     TEST_A_Y2       => ntRef_ntTEST_A_Y2,
                     TEST_A_Y3       => ntRef_ntTEST_A_Y3,
                     TEST_A_Q0       => ntRef_ntTEST_A_Q0,
                     TEST_A_Q1       => ntRef_ntTEST_A_Q1,
                     TEST_A_Q2       => ntRef_ntTEST_A_Q2,
                     TEST_A_Q3       => ntRef_ntTEST_A_Q3,
                     TEST_A_Y6AB     => ntRef_ntTEST_A_Y6AB,
                     TEST_A_Y6CD     => ntRef_ntTEST_A_Y6CD,
                     TEST_S_Y0       => ntRef_ntTEST_S_Y0,
                     TEST_S_Y1       => ntRef_ntTEST_S_Y1,
                     TEST_S_Y2       => ntRef_ntTEST_S_Y2,
                     TEST_S_Y3       => ntRef_ntTEST_S_Y3,
                     TEST_S_Q0       => ntRef_ntTEST_S_Q0,
                     TEST_S_Q1       => ntRef_ntTEST_S_Q1,
                     TEST_S_Q2       => ntRef_ntTEST_S_Q2,
                     TEST_S_Q3       => ntRef_ntTEST_S_Q3,
                     TEST_S_Y6AB     => ntRef_ntTEST_S_Y6AB,
                     TEST_S_Y6CD     => ntRef_ntTEST_S_Y6CD,
                     MIPI_SW_DYN_O_A => ntRef_ntMIPI_SW_DYN_O_A,
                     MIPI_SW_DYN_O_B => ntRef_ntMIPI_SW_DYN_O_B,
                     MIPI_SW_DYN_O_C => ntRef_ntMIPI_SW_DYN_O_C,
                     MIPI_SW_DYN_O_D => ntRef_ntMIPI_SW_DYN_O_D,
                     INBUF_DYN_DIS_N_O_A => ntRef_ntINBUF_DYN_DIS_N_O_A,
                     INBUF_DYN_DIS_N_O_B => ntRef_ntINBUF_DYN_DIS_N_O_B,
                     INBUF_DYN_DIS_N_O_C => ntRef_ntINBUF_DYN_DIS_N_O_C,
                     INBUF_DYN_DIS_N_O_D => ntRef_ntINBUF_DYN_DIS_N_O_D,
                     TIEHI           => ntRef_ntTIEHI
                    )
          @([sx,sy]);

      STRUCT inc_spec_IOLR incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;
   
      unsigned int sx_SRB;
      sx_SRB = sx-3;
      int cnt;

      foreach incVar(inc_IOLR_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
            connect
              (
                <pin *pin_logic_device of <device IOLR_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_SRB,sy_SRB]>>
              );
          }
          else
          {
            connect
              (
                <pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy_SRB]>> => <wire *pin_logic_device of <device IOLR_TILE @[sx,sy]>>
              );
          }
      }     
    }     
    else if(flag==4)
    {
      sprintf(strVar, "IOLB_TILE_%d_%d", sx, sy);
      device IOLB_TILE *strVar
           port map (
                     DQ_A            =>  ntRef_ntDQ_A,
                     DQ_B            =>  ntRef_ntDQ_B,
                     DQ_C            =>  ntRef_ntDQ_C,
                     DQ_D            =>  ntRef_ntDQ_D,
                     TQ_A            =>  ntRef_ntTQ_A,
                     TQ_B            =>  ntRef_ntTQ_B,
                     TQ_C            =>  ntRef_ntTQ_C,
                     TQ_D            =>  ntRef_ntTQ_D,

                     TEST_A_Y0       => ntRef_ntTEST_A_Y0,
                     TEST_A_Y1       => ntRef_ntTEST_A_Y1,
                     TEST_A_Y2       => ntRef_ntTEST_A_Y2,
                     TEST_A_Y3       => ntRef_ntTEST_A_Y3,
                     TEST_A_Q0       => ntRef_ntTEST_A_Q0,
                     TEST_A_Q1       => ntRef_ntTEST_A_Q1,
                     TEST_A_Q2       => ntRef_ntTEST_A_Q2,
                     TEST_A_Q3       => ntRef_ntTEST_A_Q3,
                     TEST_A_Y6AB     => ntRef_ntTEST_A_Y6AB,
                     TEST_A_Y6CD     => ntRef_ntTEST_A_Y6CD,
                     TEST_S_Y0       => ntRef_ntTEST_S_Y0,
                     TEST_S_Y1       => ntRef_ntTEST_S_Y1,
                     TEST_S_Y2       => ntRef_ntTEST_S_Y2,
                     TEST_S_Y3       => ntRef_ntTEST_S_Y3,
                     TEST_S_Q0       => ntRef_ntTEST_S_Q0,
                     TEST_S_Q1       => ntRef_ntTEST_S_Q1,
                     TEST_S_Q2       => ntRef_ntTEST_S_Q2,
                     TEST_S_Q3       => ntRef_ntTEST_S_Q3,
                     TEST_S_Y6AB     => ntRef_ntTEST_S_Y6AB,
                     TEST_S_Y6CD     => ntRef_ntTEST_S_Y6CD,
                     MIPI_SW_DYN_O_A => ntRef_ntMIPI_SW_DYN_O_A,
                     MIPI_SW_DYN_O_B => ntRef_ntMIPI_SW_DYN_O_B,
                     MIPI_SW_DYN_O_C => ntRef_ntMIPI_SW_DYN_O_C,
                     MIPI_SW_DYN_O_D => ntRef_ntMIPI_SW_DYN_O_D,
                     INBUF_DYN_DIS_N_O_A => ntRef_ntINBUF_DYN_DIS_N_O_A,
                     INBUF_DYN_DIS_N_O_B => ntRef_ntINBUF_DYN_DIS_N_O_B,
                     INBUF_DYN_DIS_N_O_C => ntRef_ntINBUF_DYN_DIS_N_O_C,
                     INBUF_DYN_DIS_N_O_D => ntRef_ntINBUF_DYN_DIS_N_O_D,
                     TIEHI           => ntRef_ntTIEHI
                    )
          @([sx,sy]);

      STRUCT inc_spec_IOL incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;
   
      unsigned int sx_SRB;
      sx_SRB = sx-3;
      int cnt;

      foreach incVar(inc_IOL_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
            connect(<pin *pin_logic_device of <device IOLB_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_SRB,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy_SRB]>> =>  <wire *pin_logic_device of <device IOLB_TILE @[sx,sy]>>);
          }
      }     
    }     
    else
    {
      sprintf(strVar, "IOLBC_TILE_%d_%d", sx, sy);
      device IOLBC_TILE *strVar
           port map (
                     DQ_A            =>  ntRef_ntDQ_A,
                     DQ_B            =>  ntRef_ntDQ_B,
                     DQ_C            =>  ntRef_ntDQ_C,
                     DQ_D            =>  ntRef_ntDQ_D,
                     TQ_A            =>  ntRef_ntTQ_A,
                     TQ_B            =>  ntRef_ntTQ_B,
                     TQ_C            =>  ntRef_ntTQ_C,
                     TQ_D            =>  ntRef_ntTQ_D,

                     TEST_A_Y0       => ntRef_ntTEST_A_Y0,
                     TEST_A_Y1       => ntRef_ntTEST_A_Y1,
                     TEST_A_Y2       => ntRef_ntTEST_A_Y2,
                     TEST_A_Y3       => ntRef_ntTEST_A_Y3,
                     TEST_A_Q0       => ntRef_ntTEST_A_Q0,
                     TEST_A_Q1       => ntRef_ntTEST_A_Q1,
                     TEST_A_Q2       => ntRef_ntTEST_A_Q2,
                     TEST_A_Q3       => ntRef_ntTEST_A_Q3,
                     TEST_A_Y6AB     => ntRef_ntTEST_A_Y6AB,
                     TEST_A_Y6CD     => ntRef_ntTEST_A_Y6CD,
                     TEST_S_Y0       => ntRef_ntTEST_S_Y0,
                     TEST_S_Y1       => ntRef_ntTEST_S_Y1,
                     TEST_S_Y2       => ntRef_ntTEST_S_Y2,
                     TEST_S_Y3       => ntRef_ntTEST_S_Y3,
                     TEST_S_Q0       => ntRef_ntTEST_S_Q0,
                     TEST_S_Q1       => ntRef_ntTEST_S_Q1,
                     TEST_S_Q2       => ntRef_ntTEST_S_Q2,
                     TEST_S_Q3       => ntRef_ntTEST_S_Q3,
                     TEST_S_Y6AB     => ntRef_ntTEST_S_Y6AB,
                     TEST_S_Y6CD     => ntRef_ntTEST_S_Y6CD,
                     MIPI_SW_DYN_O_A => ntRef_ntMIPI_SW_DYN_O_A,
                     MIPI_SW_DYN_O_B => ntRef_ntMIPI_SW_DYN_O_B,
                     MIPI_SW_DYN_O_C => ntRef_ntMIPI_SW_DYN_O_C,
                     MIPI_SW_DYN_O_D => ntRef_ntMIPI_SW_DYN_O_D,
                     INBUF_DYN_DIS_N_O_A => ntRef_ntINBUF_DYN_DIS_N_O_A,
                     INBUF_DYN_DIS_N_O_B => ntRef_ntINBUF_DYN_DIS_N_O_B,
                     INBUF_DYN_DIS_N_O_C => ntRef_ntINBUF_DYN_DIS_N_O_C,
                     INBUF_DYN_DIS_N_O_D => ntRef_ntINBUF_DYN_DIS_N_O_D,
                     TIEHI           => ntRef_ntTIEHI
                    )
          @([sx,sy]);

      STRUCT inc_spec_IOL incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;
   
      unsigned int sx_SRB;
      sx_SRB = sx-3;
      int cnt;

      foreach incVar(inc_IOL_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          {     
            connect
              (
                <pin *pin_logic_device of <device IOLBC_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_SRB,sy_SRB]>>
              );
          }
          else
          {
            connect
              (
                <pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy_SRB]>> => <wire *pin_logic_device of <device IOLBC_TILE @[sx,sy]>>
              );
          }
      }     
    } 
     
         
     
}// end of function place_iol_tile
///********************************************************************************
//********************************************************************************/
//function place_cramsl2_tile(unsigned int tx,ty)
//{ 
//    unsigned int sx, sy;
//    
//    sx = tx * NUM_GRID_X + 2;
//    sy = ty * NUM_GRID_Y;
//
//    string strVar;
//    sprintf(strVar, "CRAMSL2_TILE_%d_%d", sx, sy);
//    
////    device CRAMSL2_TILE *strVar
////        @([sx,sy]);
//
//    
//}
/********************************************************************************
********************************************************************************/
function place_dll_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;
    
    string strVar;

    sprintf(strVar,"ntDLL_TIHI_%d_%d",sx,sy);    
    &wire ntRef_ntDLL_TIHI = wire *strVar; 

    sprintf(strVar,"ntDLL_TILO_%d_%d",sx,sy);    
    &wire ntRef_ntDLL_TILO = wire *strVar; 

    sprintf(strVar,"ntCTRL_CODE_%d_%d",sx,sy);
    &wire ntRef_ntCTRL_CODE[7:0] = wire *strVar[7:0]   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCTRL_CODE_T_%d_%d",sx,sy);
    &wire ntRef_ntCTRL_CODE_T[7:0] = wire *strVar[7:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCTRL_CODE_B_%d_%d",sx,sy);
    &wire ntRef_ntCTRL_CODE_B[7:0] = wire *strVar[7:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDIV_OSCCLK_T_%d_%d",sx,sy);
    &wire ntRef_ntDIV_OSCCLK_T = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntDIV_CLKIN_T_%d_%d",sx,sy);
    &wire ntRef_ntDIV_CLKIN_T = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntLOCK_%d_%d",sx,sy);
    &wire ntRef_ntLOCK = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6AB = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6CD = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y3 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q3 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6AB = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6CD = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y3 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q3 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;


    sprintf(strVar, "DLL_TILE_%d_%d", sx, sy);
    device DLL_TILE *strVar
         port map(
                    DLL_TIHI       => ntRef_ntDLL_TIHI,

                    CTRL_CODE_T    => ntRef_ntCTRL_CODE_T,
                    CTRL_CODE_B    => ntRef_ntCTRL_CODE_B,
                    DLL_TILO         => ntRef_ntDLL_TILO,

                    TEST_A_Y0       => ntRef_ntTEST_A_Y0,
                    TEST_A_Y1       => ntRef_ntTEST_A_Y1,
                    TEST_A_Y2       => ntRef_ntTEST_A_Y2,
                    TEST_A_Y3       => ntRef_ntTEST_A_Y3,
                    TEST_A_Q0       => ntRef_ntTEST_A_Q0,
                    TEST_A_Q1       => ntRef_ntTEST_A_Q1,
                    TEST_A_Q2       => ntRef_ntTEST_A_Q2,
                    TEST_A_Q3       => ntRef_ntTEST_A_Q3,
                    TEST_A_Y6AB     => ntRef_ntTEST_A_Y6AB,
                    TEST_A_Y6CD     => ntRef_ntTEST_A_Y6CD,
                    TEST_S_Y0       => ntRef_ntTEST_S_Y0,
                    TEST_S_Y1       => ntRef_ntTEST_S_Y1,
                    TEST_S_Y2       => ntRef_ntTEST_S_Y2,
                    TEST_S_Y3       => ntRef_ntTEST_S_Y3,
                    TEST_S_Q0       => ntRef_ntTEST_S_Q0,
                    TEST_S_Q1       => ntRef_ntTEST_S_Q1,
                    TEST_S_Q2       => ntRef_ntTEST_S_Q2,
                    TEST_S_Q3       => ntRef_ntTEST_S_Q3,
                    TEST_S_Y6AB     => ntRef_ntTEST_S_Y6AB,
                    TEST_S_Y6CD     => ntRef_ntTEST_S_Y6CD
                  )
        @([sx,sy]);

      STRUCT inc_spec_DLL incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB,ty_srb;
      int sx_srb,sy_srb;

      foreach incVar(inc_DLL_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;

          ty_srb = (loc_SRB==0) ? ty : ty+2;
          sy_srb = ty_srb * NUM_GRID_Y;
          
          sx_srb = sx-2;

          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device DLL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect
            (
              <pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE @ [sx_srb,sy_srb]>>
                                                                                                         : <wire *pin_logic_device of <device DLL_TILE @[sx,sy]>>
            ); 
          }
      }
  
        
}// end of function place_dll_tile
/********************************************************************************
********************************************************************************/

}//end of package pgc_funcs_place


