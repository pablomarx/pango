use pgc_defs;
use pgc_DRM_input_inc;

package pgc_funcs_connect_logic
{


/********************************************************************************/
/********************************************************************************/
function connect_SRB_inputs
( 
    unsigned int N_SRB,    // The IOB tile X/Y tile index
    unsigned int S_SRB,
    unsigned int W_SRB,
    unsigned int E_SRB,
    unsigned int blank_x,
    unsigned int blank_y,
    unsigned int X_TILES[],   // Entire 2-D array of X tiles
    unsigned int Y_TILES[]
)
{
    // Tile index variable
    unsigned int tx, ty;

    // Site index variable
    unsigned int sx, sy;
    
    string strVar0;          
    string strVar1;
    
    // Indexes of the tiles from which inputs are taken
    int site_n_1, site_n_2, site_n_4, site_n_8, site_n_3, site_n_5; // North
    int site_s_1, site_s_2, site_s_4, site_s_8, site_s_3, site_s_5; // South
    int site_w_1, site_w_2, site_w_4, site_w_8; // West
    int site_e_1, site_e_2, site_e_4, site_e_8; // East
    int tile_n_1, tile_n_2, tile_n_4, tile_n_8; // North
    int tile_s_1, tile_s_2, tile_s_4, tile_s_8; // South
  
    foreach tx ( X_TILES )
    {
        // Calculate the west/east source tile index. Adjust the X index for the sake of
        // central tile gap
        site_w_1 = (tx==blank_x+1) ? (tx-2)*NUM_GRID_X : (tx-1)*NUM_GRID_X;
        site_w_2 = (tx==blank_x+1 ||  tx==blank_x+2) ? (tx-3)*NUM_GRID_X : (tx-2)*NUM_GRID_X;
        site_w_4 = (tx==blank_x+1 || tx==blank_x+2 || tx==blank_x+3 || tx==blank_x+4) ? (tx-5)*NUM_GRID_X : (tx-4)*NUM_GRID_X;                    


        site_e_1 = (tx==blank_x-1) ? (tx+2)*NUM_GRID_X : (tx+1)*NUM_GRID_X;
        site_e_2 = (tx==blank_x-1 ||
                    tx==blank_x-2) ? (tx+3)*NUM_GRID_X : (tx+2)*NUM_GRID_X;
        site_e_4 = (tx==blank_x-1 ||
                    tx==blank_x-2 ||
                    tx==blank_x-3 ||
                    tx==blank_x-4) ? (tx+5)*NUM_GRID_X : (tx+4)*NUM_GRID_X;
                    

                                     
        foreach ty ( Y_TILES )
        {
             
            unsigned int temp_ty;
            
            // The current tile
           
            sx = tx * NUM_GRID_X;
            sy = ty * NUM_GRID_Y;
    
            // Calculate the north/south source grid site

            

            if(ty == (blank_y+1))
            {
              tile_s_1 = ty - 2;
              tile_s_2 = ty - 3;
              tile_s_4 = ty - 5;
              site_s_3 = sy - 4*NUM_GRID_Y;
            }
            else if(ty == (blank_y+2))
            {
              tile_s_1 = ty - 1;
              tile_s_2 = ty - 3;
              tile_s_4 = ty - 5;
              site_s_3 = sy - 4*NUM_GRID_Y;
            }
            else if(ty == (blank_y+3))
            {
              tile_s_1 = ty - 1;
              tile_s_2 = ty - 2;
              tile_s_4 = ty - 5;
              site_s_3 = sy - 4*NUM_GRID_Y;
            }
            else if (ty == (blank_y+4))
            {
              tile_s_1 = ty - 1;
              tile_s_2 = ty - 2;
              tile_s_4 = ty - 5;
              site_s_3 = sy - 3*NUM_GRID_Y;
            }
            else
            {
              tile_s_1 = ty - 1;
              tile_s_2 = ty - 2;
              tile_s_4 = ty - 4;
              site_s_3 = sy - 3*NUM_GRID_Y;
            }
        
            site_s_1 = tile_s_1 * NUM_GRID_Y;
            site_s_2 = tile_s_2 * NUM_GRID_Y;
            site_s_4 = tile_s_4 * NUM_GRID_Y;

            //

            if(ty == (blank_y-1))
            {
              tile_n_1 = ty + 2;
              tile_n_2 = ty + 3;
              tile_n_4 = ty + 5;
              site_n_3 = sy + 4*NUM_GRID_Y;
            }
            else if(ty == (blank_y-2))
            {
              tile_n_1 = ty + 1;
              tile_n_2 = ty + 3;
              tile_n_4 = ty + 5;
              site_n_3 = sy + 4*NUM_GRID_Y;
            }
            else if(ty == (blank_y-3))
            {
              tile_n_1 = ty + 1;
              tile_n_2 = ty + 2;
              tile_n_4 = ty + 5;
              site_n_3 = sy + 4*NUM_GRID_Y;
            }
            else if(ty == (blank_y-4))
            {
              tile_n_1 = ty + 1;
              tile_n_2 = ty + 2;
              tile_n_4 = ty + 5;
              site_n_3 = sy + 3*NUM_GRID_Y;
            }
            else
            {
              tile_n_1 = ty + 1;
              tile_n_2 = ty + 2;
              tile_n_4 = ty + 4;
              site_n_3 = sy + 3*NUM_GRID_Y;
            }

            site_n_1 = tile_n_1 * NUM_GRID_Y;
            site_n_2 = tile_n_2 * NUM_GRID_Y;
            site_n_4 = tile_n_4 * NUM_GRID_Y;



            connect
              (
                //
                // From SRB to the Sourth
                //
                <pin ISS of <device SRB_TILE @[sx,sy]>> => (ty+1==N_SRB+1) ? <wire ZSN of <device SRB_TILE @[sx,sy]>> :
                                                                             <wire ZSS of <device SRB_TILE @[sx,site_n_1]>>,    

                <pin IDS of <device SRB_TILE @[sx,sy]>> => (ty+1==N_SRB+1) ? <wire ZDN  of <device SRB_TILE @[sx,site_s_1]>> : 
                                                           (ty+2==N_SRB+1) ? <wire ZDN  of <device SRB_TILE @[sx,site_n_1]>> :
                                                                             <wire ZDS  of <device SRB_TILE @[sx,site_n_2]>>,

                <pin IQS of <device SRB_TILE @[sx,sy]>> => (ty+1==N_SRB+1) ? <wire ZQN  of <device SRB_TILE @[sx,site_s_3]>> :
                                                           (ty+2==N_SRB+1) ? <wire ZQN  of <device SRB_TILE @[sx,site_s_1]>> :
                                                           (ty+3==N_SRB+1) ? <wire ZQN  of <device SRB_TILE @[sx,site_n_1]>> :
                                                           (ty+4==N_SRB+1) ? <wire ZQN  of <device SRB_TILE @[sx,site_n_3]>> :
                                                                             <wire ZQS  of <device SRB_TILE @[sx,site_n_4]>>, 


                //
                // From SRB to the North
                //
                <pin ISN of <device SRB_TILE @[sx,sy]>>  => (ty-1==S_SRB-1) ? <wire ZSS  of <device SRB_TILE @[sx,sy]>> :
                                                                              <wire ZSN of <device SRB_TILE @[sx,site_s_1]>>,    

                <pin IDN of <device SRB_TILE @[sx,sy]>>  => (ty-1==S_SRB-1) ? <wire ZDS  of <device SRB_TILE @[sx,site_n_1]>> :
                                                            (ty-2==S_SRB-1) ? <wire ZDS  of <device SRB_TILE @[sx,site_s_1]>> :
                                                                              <wire ZDN  of <device SRB_TILE @[sx,site_s_2]>>,

                <pin IQN of <device SRB_TILE @[sx,sy]>>  => (ty-1==S_SRB-1) ? <wire ZQS  of <device SRB_TILE @[sx,site_n_3]>> :
                                                            (ty-2==S_SRB-1) ? <wire ZQS  of <device SRB_TILE @[sx,site_n_1]>> :
                                                            (ty-3==S_SRB-1) ? <wire ZQS  of <device SRB_TILE @[sx,site_s_1]>> :
                                                            (ty-4==S_SRB-1) ? <wire ZQS  of <device SRB_TILE @[sx,site_s_3]>> :
                                                                              <wire ZQN  of <device SRB_TILE @[sx,site_s_4]>>,

                                                                                                     
                //
                // From SRB to the West
                //
                <pin ISW of <device SRB_TILE @[sx,sy]>>  => (tx+1==E_SRB+1) ? <wire ZSE of <device SRB_TILE @[sx,sy]>> :
                                                                              <wire ZSW of <device SRB_TILE @[site_e_1,sy]>>,    

                <pin IDW of <device SRB_TILE @[sx,sy]>>  => (tx+1==E_SRB+1) ? <wire ZDE of <device SRB_TILE @[site_w_1,sy]>> : 
                                                            (tx+2==E_SRB+1) ? <wire ZDE of <device SRB_TILE @[site_e_1,sy]>> :
                                                                              <wire ZDW of <device SRB_TILE @[site_e_2,sy]>>,

                <pin IQW of <device SRB_TILE @[sx,sy]>>  => (tx+1==E_SRB+1) ? <wire ZQE of <device SRB_TILE @[(tx-3)*NUM_GRID_X,sy]>> :
                                                            (tx+2==E_SRB+1) ? <wire ZQE of <device SRB_TILE @[site_w_1,sy]>> :
                                                            (tx+3==E_SRB+1) ? <wire ZQE of <device SRB_TILE @[site_e_1,sy]>> :
                                                            (tx+4==E_SRB+1) ? <wire ZQE of <device SRB_TILE @[(tx+3)*NUM_GRID_X,sy]>> :  
                                                                              <wire ZQW of <device SRB_TILE @[site_e_4,sy]>>,  

 
                                    
                //
                // From SRB to the East
                //
                <pin ISE of <device SRB_TILE @[sx,sy]>>  => (tx-1==W_SRB-1) ? <wire ZSW of <device SRB_TILE @[sx,sy]>> :
                                                                             <wire ZSE of <device SRB_TILE @[site_w_1,sy]>>,    

                <pin IDE of <device SRB_TILE @[sx,sy]>>  => (tx-1==W_SRB-1) ? <wire ZDW of <device SRB_TILE @[(tx+1)*NUM_GRID_X,sy]>> :
                                                            (tx-2==W_SRB-1) ? <wire ZDW of <device SRB_TILE @[(tx-1)*NUM_GRID_X,sy]>> :
                                                                              <wire ZDE of <device SRB_TILE @[site_w_2,sy]>>,

                <pin IQE of <device SRB_TILE @[sx,sy]>>  => (tx-1==W_SRB-1) ? <wire ZQW  of <device SRB_TILE @[(tx+3)*NUM_GRID_X,sy]>> :
                                                            (tx-2==W_SRB-1) ? <wire ZQW  of <device SRB_TILE @[(tx+1)*NUM_GRID_X,sy]>> :
                                                            (tx-3==W_SRB-1) ? <wire ZQW  of <device SRB_TILE @[(tx-1)*NUM_GRID_X,sy]>> :
                                                            (tx-4==W_SRB-1) ? <wire ZQW  of <device SRB_TILE @[(tx-3)*NUM_GRID_X,sy]>> :
                                                                              <wire ZQE  of <device SRB_TILE @[site_w_4,sy]>>


              );//end of -- connect
                
                // ZSNE
                if((tx<E_SRB) && (ty==N_SRB))
                {
                     connect
                        (
                            <pin ISSW of <device SRB_TILE @[sx,sy]>>       => <wire ZSNE  of <device SRB_TILE @[sx,sy]>>,
                            <pin TSNE of <device SRB_TILE @[site_e_1,sy]>> => <wire ZSNE  of <device SRB_TILE @[sx,sy]>>
                        );
                }
                else if((tx==E_SRB) && (ty<N_SRB))
                {
                     connect
                        (
                            <pin ISSW of <device SRB_TILE @[sx,sy]>>        => <wire ZSNE  of <device SRB_TILE @[sx,sy]>>,
                            <pin TSSW of <device SRB_TILE @[sx,site_n_1]>>  => <wire ZSNE  of <device SRB_TILE @[sx,sy]>>
                        );
                }
                else if((ty==N_SRB) && (tx==E_SRB))
                {
                     connect
                        (
                            <pin ISSW of <device SRB_TILE @[sx,sy]>>  => <wire ZSNE  of <device SRB_TILE @[sx,sy]>>,
                            <pin TSSE of <device SRB_TILE @[sx,sy]>>  => <wire ZSNE  of <device SRB_TILE @[sx,sy]>>
                        );
                }
                else
                {                    
                     connect
                        (
                            <pin ISNE of <device SRB_TILE @[site_e_1,site_n_1]>>  => <wire ZSNE  of <device SRB_TILE @[sx,sy]>>,
                            <pin TSNE of <device SRB_TILE @[site_e_1,sy]>>        => <wire ZSNE  of <device SRB_TILE @[sx,sy]>>
                        );    
                }
                
                
                // ZSSW
                if((tx>W_SRB) && (ty==S_SRB))
                {
                     connect
                        (
                            <pin TSSW of <device SRB_TILE @[site_w_1,sy]>> => <wire ZSSW  of <device SRB_TILE @[sx,sy]>>,
                            <pin ISNE of <device SRB_TILE @[sx,sy]>>       => <wire ZSSW  of <device SRB_TILE @[sx,sy]>>
                        ); 
                }
                else if((tx==W_SRB) && (ty>S_SRB))
                {
                     connect
                        (
                            <pin TSNE of <device SRB_TILE @[sx,site_s_1]>>  => <wire ZSSW  of <device SRB_TILE @[sx,sy]>>,
                            <pin ISNE of <device SRB_TILE @[sx,sy]>>        => <wire ZSSW  of <device SRB_TILE @[sx,sy]>>
                        ); 
                }
                else if((tx==W_SRB) && (ty==S_SRB))
                {
                     connect
                        (
                            <pin TSNW of <device SRB_TILE @[sx,sy]>>  => <wire ZSSW  of <device SRB_TILE @[sx,sy]>>,
                            <pin ISNE of <device SRB_TILE @[sx,sy]>>  => <wire ZSSW  of <device SRB_TILE @[sx,sy]>>
                        ); 
                }
                else
                {
                     connect
                        (
                            <pin TSSW of <device SRB_TILE @[site_w_1,sy]>>        => <wire ZSSW  of <device SRB_TILE @[sx,sy]>>,
                            <pin ISSW of <device SRB_TILE @[site_w_1,site_s_1]>>  => <wire ZSSW  of <device SRB_TILE @[sx,sy]>>
                        );   
                }
                
                
                //ZSSE
                if((tx==E_SRB) && (ty>S_SRB))
                {
                     connect
                        (
                            <pin TSSE of <device SRB_TILE @[sx,site_s_1]>>  => <wire ZSSE  of <device SRB_TILE @[sx,sy]>>,
                            <pin ISNW of <device SRB_TILE @[sx,sy]>>        => <wire ZSSE  of <device SRB_TILE @[sx,sy]>>
                        ); 
                }
                else if((ty==S_SRB) && (tx<E_SRB))
                {
                    connect
                      (
                          <pin TSNW of <device SRB_TILE @[site_e_1,sy]>> => <wire ZSSE  of <device SRB_TILE @[sx,sy]>>,
                          <pin ISNW of <device SRB_TILE @[sx,sy]>>       => <wire ZSSE  of <device SRB_TILE @[sx,sy]>>
                      ); 
                }
                else if((tx==E_SRB) && (ty==S_SRB))
                {
                    connect
                        (
                            <pin TSSW of <device SRB_TILE @[sx,sy]>>  => <wire ZSSE  of <device SRB_TILE @[sx,sy]>>,
                            <pin ISNW of <device SRB_TILE @[sx,sy]>>  => <wire ZSSE  of <device SRB_TILE @[sx,sy]>>
                        );     
                }
                else
                {
                     connect
                        (
                            <pin TSSE of <device SRB_TILE @[sx,site_s_1]>>        => <wire ZSSE  of <device SRB_TILE @[sx,sy]>>,
                            <pin ISSE of <device SRB_TILE @[site_e_1,site_s_1]>>  => <wire ZSSE  of <device SRB_TILE @[sx,sy]>>
                        );
                }
                
                //ZSNW
                if((tx==W_SRB) && (ty< N_SRB))
                {
                     connect
                        (
                            <pin TSNW of <device SRB_TILE @[sx,site_n_1]>>           => <wire ZSNW  of <device SRB_TILE @[sx,sy]>>,
                            <pin ISSE of <device SRB_TILE @[sx,sy]>>                 => <wire ZSNW  of <device SRB_TILE @[sx,sy]>>
                        );    
                }
                else if((tx>W_SRB) && (ty==N_SRB))
                {
                     connect
                        (
                            <pin TSSE of <device SRB_TILE @[site_w_1,sy]>>  => <wire ZSNW  of <device SRB_TILE @[sx,sy]>>,
                            <pin ISSE of <device SRB_TILE @[sx,sy]>>        => <wire ZSNW  of <device SRB_TILE @[sx,sy]>>
                        );    
                }
                else if((tx==W_SRB) && (ty==N_SRB))
                {
                     connect
                        (
                            <pin TSNE of <device SRB_TILE @[sx,sy]>>  => <wire ZSNW  of <device SRB_TILE @[sx,sy]>>,
                            <pin ISSE of <device SRB_TILE @[sx,sy]>>  => <wire ZSNW  of <device SRB_TILE @[sx,sy]>>
                        ); 
                }
                else
                {
                     connect
                        (
                            <pin TSNW of <device SRB_TILE @[sx,site_n_1]>>        => <wire ZSNW  of <device SRB_TILE @[sx,sy]>>,
                            <pin ISNW of <device SRB_TILE @[site_w_1,site_n_1]>>  => <wire ZSNW  of <device SRB_TILE @[sx,sy]>>
                        ); 
                }
          
        } // foreach ty ( Y_TILES )

    } // foreach tx ( X_TILES )
    
}// end of connect_SRB_inputs

/****************************************************************************************************
*****************************************************************************************************/
function connect_CLM_input
(
  unsigned int tx,
  unsigned int ty,
  unsigned int blank_y,
  unsigned int max_y
)
{
  unsigned int sx,sy;
  sx = tx * NUM_GRID_X + 3;
  sy = ty * NUM_GRID_Y;

  int site_s_1 = (ty==blank_y+1) ? sy-2*NUM_GRID_Y : sy-NUM_GRID_Y;
  int site_n_1 = (ty==blank_y-1) ? sy+2*NUM_GRID_Y : sy+NUM_GRID_Y;

  
  if(ty!=2)
  {
    connect
     (
        <pin A_CECI of <device CLMS_TILE @[sx,sy]>>  => <wire A_CECO of <device CLMS_TILE @ [sx,site_s_1]>>,
        <pin S_CECI of <device CLMS_TILE @[sx,sy]>>  => <wire S_CECO of <device CLMS_TILE @ [sx,site_s_1]>>,
        <pin A_CIN of <device CLMS_TILE @[sx,sy]>>   => <wire A_COUT of <device CLMS_TILE @ [sx,site_s_1]>>,
        <pin S_CIN of <device CLMS_TILE @[sx,sy]>>   => <wire S_COUT of <device CLMS_TILE @ [sx,site_s_1]>>,
        <pin A_RSCI of <device CLMS_TILE @[sx,sy]>>  => <wire A_RSCO of <device CLMS_TILE @ [sx,site_s_1]>>,
        <pin S_RSCI of <device CLMS_TILE @[sx,sy]>>  => <wire S_RSCO of <device CLMS_TILE @ [sx,site_s_1]>>,
        <pin A_SRCI of <device CLMS_TILE @[sx,sy]>>  => <wire A_SRCO of <device CLMS_TILE @ [sx,site_s_1]>>,
        <pin S_SRCI of <device CLMS_TILE @[sx,sy]>>  => <wire S_SRCO of <device CLMS_TILE @ [sx,site_s_1]>>
     );
  }
  else
  {
    connect
     (
        <pin A_CECI of <device CLMS_TILE @[sx,sy]>>  => <wire TIEHI of <device CLMS_TILE @ [sx,sy]>>,
        <pin S_CECI of <device CLMS_TILE @[sx,sy]>>  => <wire TIEHI of <device CLMS_TILE @ [sx,sy]>>,
        <pin A_CIN of <device CLMS_TILE @[sx,sy]>>   => <wire TIEHI of <device CLMS_TILE @ [sx,sy]>>,
        <pin S_CIN of <device CLMS_TILE @[sx,sy]>>   => <wire TIEHI of <device CLMS_TILE @ [sx,sy]>>,
        <pin A_RSCI of <device CLMS_TILE @[sx,sy]>>  => <wire TIEHI of <device CLMS_TILE @ [sx,sy]>>,
        <pin S_RSCI of <device CLMS_TILE @[sx,sy]>>  => <wire TIEHI of <device CLMS_TILE @ [sx,sy]>>,
        <pin A_SRCI of <device CLMS_TILE @[sx,sy]>>  => <wire TIEHI of <device CLMS_TILE @ [sx,sy]>>,
        <pin S_SRCI of <device CLMS_TILE @[sx,sy]>>  => <wire TIEHI of <device CLMS_TILE @ [sx,sy]>>
     );
  } 

  if(ty!=max_y)
  {
    connect
     (
        <pin L7IN of <device CLMS_TILE @[sx,sy]>>    => <wire L7OUT of <device CLMS_TILE @ [sx,site_n_1]>>
      );
  }
  else
  {
    connect
     (
        <pin L7IN of <device CLMS_TILE @[sx,sy]>>    => <wire TIEHI of <device CLMS_TILE @ [sx,sy]>>
      );
  }
  
}//end of function connect_CLM_input

/****************************************************************************************************
*****************************************************************************************************/
function connect_drm_input
(
  unsigned int tx,
  unsigned int ty,
  unsigned int blank_y,
  unsigned int min_y
)
{
  unsigned int sx,sy;
  sx = tx * NUM_GRID_X + 3;
  sy = ty * NUM_GRID_Y;


// Calculate the north source grid site
  unsigned int tile_s_1,site_s_1;
  tile_s_1 = (ty==blank_y+1) ? ty-4 : ty-3;
  site_s_1 = tile_s_1 * NUM_GRID_Y;

  

  if(ty!=min_y)
  {
    connect
     (
        <pin X1CASQI_A of <device DRM_TILE @[sx,sy]>>    => <wire X1CASQO_A of <device DRM_TILE @ [sx,site_s_1]>>,
        <pin X1CASQI_B of <device DRM_TILE @[sx,sy]>>    => <wire X1CASQO_B of <device DRM_TILE @ [sx,site_s_1]>>
      );
  }
  else
  {
    connect
     (
        <pin X1CASQI_A of <device DRM_TILE @[sx,sy]>>    => <wire TIEHI of <device DRM_TILE @ [sx,sy]>>,
        <pin X1CASQI_B of <device DRM_TILE @[sx,sy]>>    => <wire TIEHI of <device DRM_TILE @ [sx,sy]>>
      );
  }
 
  
}//end of function connect_drm
/****************************************************************************************************
*****************************************************************************************************/
function connect_drm_input_1()
{
      STRUCT inc_spec_DRM_input incVar;
      int tx,ty;
      int tx_con,ty_con;
      string pin_drm;
      string pin_con;
      string device_con;
      int sx,sy;   
      unsigned int temp_ty;

      int sx_con,sy_con;

      foreach incVar(inc_DRM_input_spec)
      {        
        tx = incVar.tx_drm;
        ty = incVar.ty_drm;
        sx = tx * NUM_GRID_X + 3;
        sy = ty * NUM_GRID_Y;

        pin_drm = incVar.port_name_drm;
        pin_con = incVar.port_name_con;

        if(pin_con!="TBD")
        {
            device_con = incVar.device_name_con;
            tx_con = incVar.tx_con;
            ty_con = incVar.ty_con;
            sx_con = (incVar.device_name_con=="SRB_TILE") ? tx_con*NUM_GRID_X : tx_con * NUM_GRID_X + 3;
            sy_con = ty_con * NUM_GRID_Y;

            connect
              (
                <pin *pin_drm of <device DRM_TILE @ [sx,sy]>> => <wire *pin_con of <device *device_con @ [sx_con,sy_con]>>
              );
        }
      }    

}//end of function connect_DRM_input

   

} //end of package pgc_funcs_connect_logic

