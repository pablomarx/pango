*******************************************************************

  Package   [pango_schm_funcs]

  Author    [jhxie]

  Abstract  [Schematic description common to pango architecture]

  Revision History:

********************************************************************************/
library work;
USE pgc_defs, pgc2k_defs, pango_defs;

package pgc_schm_funcs
{

/**VFunction******************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_srb tile]

*****************************************************************************************/
function draw_srb_tile
( 
    unsigned int tx,
    unsigned int ty
)
{
    // Site index variable. The X index for logic and GUI are declared separately
    unsigned int lsx, gsx, lsy, gsy;

    // device reference variables
    &device xRef, mRef;

    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
       
    // Pull out the device instances from logic structure
    xRef  = <device SRB  @[lsx,lsy]     of ARCHITECTURE>;
    
    string strVar;
    sprintf(strVar, "SRB_%d_%d", lsx, lsy);
    device SRB   ( symbol logsym )  *strVar  @[gsx+201,gsy+200];
    map 
    ( 
        <instance *strVar>   => xRef
     );   
     
    // Pull out the device instances from logic structure
    mRef  = <device HARD0N1  @[lsx,lsy+1]     of ARCHITECTURE>;
    
    string strVar1;
    sprintf(strVar1, "HARD0N1_%d_%d", lsx, lsy+1);
    device HARD0N1   ( symbol logsym )  *strVar1  @[gsx+620,gsy+760];
    map 
    ( 
        <instance *strVar1>   => mRef
     );   
       
}; // end of function draw_srb_tile


/**VFunction******************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_sfb tile]

*****************************************************************************************/
function draw_sfb_tile
( 
    unsigned int tx,
    unsigned int ty,
    unsigned int flag
)
{
    // Site index variable. The X index for logic and GUI are declared separately
    unsigned int lsx, gsx, lsy, gsy;

    // device reference variables
    &device xRef;
    string strVar;

    lsx = tx * NUM_GRID_X + 3;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
    if ( flag == 0 )    // sfb_tile
    {
        xRef  = <device SFB  @[lsx,lsy]     of ARCHITECTURE>;
        sprintf(strVar, "SFB_%d_%d", lsx, lsy);
        device SFB   ( symbol logsym )  *strVar  @[gsx+740,gsy+470];
        map 
        ( 
            <instance *strVar>   => xRef
         );
    }
    else                // sfb1_tile
    {
       xRef  = <device SFB  @[lsx,lsy]     of ARCHITECTURE>;
       sprintf(strVar, "SFB_%d_%d", lsx, lsy);
       device SFB   ( symbol logsym )  *strVar  @[gsx+740,gsy+470];
       map 
       (
           <instance *strVar>   => xRef
        );
    }
       
}; // end of function draw_sfb_tile


/**VFunction******************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_clms tile]

*****************************************************************************************/
function draw_clms_tile
( 
    unsigned int tx,
    unsigned int ty
)
{
    // Site index variable. The X index for logic and GUI are declared separately
    unsigned int lsx, gsx, lsy, gsy;

    // device reference variables
    &device xRef, mRef;
    string strVar0, strVar1;

    lsx = tx * NUM_GRID_X + 3;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
    xRef = <device CLMA @[lsx,lsy] of ARCHITECTURE>;
    sprintf(strVar0, "CLMA_%d_%d", lsx, lsy);
    device CLMA ( symbol logsym ) *strVar0 @[gsx+740,gsy+280];
    map
    (
        <instance *strVar0>   => xRef
    );
    
    mRef = <device CLMS @[lsx,lsy+1] of ARCHITECTURE>;
    sprintf(strVar1, "CLMS_%d_%d", lsx, lsy+1);
    device CLMS ( symbol logsym ) *strVar1 @[gsx+870,gsy+540];
    map
    (
        <instance *strVar1>   => mRef
    );
    
}; // end of function draw_clms_tile

/**VFunction******************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_clma tile]

*****************************************************************************************/
function draw_clma_tile
( 
    unsigned int tx,
    unsigned int ty
)
{
    // Site index variable. The X index for logic and GUI are declared separately
    unsigned int lsx, gsx, lsy, gsy;

    // device reference variables
    &device xRef, mRef;
    string strVar0, strVar1;

    lsx = tx * NUM_GRID_X + 3;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
    xRef = <device CLMA @[lsx,lsy] of ARCHITECTURE>;
    sprintf(strVar0, "CLMA_%d_%d", lsx, lsy);
    device CLMA ( symbol logsym ) *strVar0 @[gsx+740,gsy+280];
    map
    (
        <instance *strVar0>   => xRef
    );
    
    mRef = <device CLMA @[lsx,lsy+1] of ARCHITECTURE>;
    sprintf(strVar1, "CLMA_%d_%d", lsx, lsy+1);
    device CLMA ( symbol logsym ) *strVar1 @[gsx+870,gsy+540];
    map
    (
        <instance *strVar1>   => mRef
    );
    
}; // end of function draw_clma_tile

/**VFunction******************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_clm tile]
  
  ---------|---------|---------|---------
  
    V[0,1]    A[1,1]   S[2,1]

    G[0,0]    R[1,0]   I[2,0] 
  ---------|---------|---------|---------  

  Revision History:

*****************************************************************************************/
function draw_clm_tile
( 
    unsigned int tx,
    unsigned int ty,
    unsigned int clm_flag
)
{
    if(clm_flag == 1)
    {
        draw_clma_tile( tx,ty );
    }
    else
    {
        draw_clms_tile( tx,ty );
    }
     
}; // end of function draw_clm_tile


/********************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_drm tile]
  
********************************************************************************/
function draw_drm_tile
(
    unsigned int tx,
    unsigned int ty
)
{   
    unsigned int lsx, lsy, gsx, gsy;
    unsigned int dt, dx, dy;

    // device reference variables
    &device rRef;
    string strVar;
    
    lsx = tx * NUM_GRID_X + 3;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
    rRef = <device DRM @[lsx+2,lsy]  of ARCHITECTURE>;
    sprintf(strVar, "DRM_%d_%d", lsx+2, lsy);
    device DRM  ( symbol logsym )  *strVar  @[gsx+901,gsy+200];
    map 
    ( 
         <instance *strVar>   => rRef
     );
    
    dx = 1;
    for ( dt = 0; dt < 3; dt += 1 )
    {
        dy = 6 * dt;
        
        rRef = <device SFB @[lsx+dx,lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "SFB_%d_%d", lsx+dx, lsy+dy);
        device SFB  ( symbol logsym )  *strVar  @[gsx+740,gsy+470+1200*dt];
        map 
        ( 
             <instance *strVar>   => rRef
        );
    }
    
}// end of function draw_drm_tile


/********************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_dll tile]
  
********************************************************************************/
function draw_dll_tile
(
    unsigned int tx,
    unsigned int ty
)
{
    unsigned int lsx, lsy, gsx, gsy;
    unsigned int dt, dx, dy;

    // device reference variables
    &device rRef;
    string strVar;
    
    lsx = tx * NUM_GRID_X + 3;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
    rRef = <device SFB @[lsx+2, lsy+4] of ARCHITECTURE>;
    sprintf(strVar, "SFB_%d_%d", lsx+2, lsy+4);
    device SFB  ( symbol logsym )  *strVar  @[gsx+740,gsy+470];
    map
    (
         <instance *strVar>   => rRef
    );
    
    rRef = <device DLL @[lsx, lsy]  of ARCHITECTURE>;
    sprintf(strVar, "DLL_%d_%d", lsx, lsy);
    device DLL  ( symbol logsym )  *strVar  @[gsx+840, gsy+400];
    map
    (
         <instance *strVar>   => rRef
    );
    
    rRef = <device DLLMUX @[lsx, lsy+1]  of ARCHITECTURE>;
    sprintf(strVar, "DLLMUX_%d_%d", lsx, lsy+1);
    device DLLMUX  ( symbol logsym )  *strVar  @[gsx+901, gsy+490];
    map
    (
         <instance *strVar>   => rRef
    );
    
    for ( dt = 0; dt < 16; dt += 1 )
    {
        dx = dt / 6;
        dy = dt % 6;
        
        rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
        
        if ( dt < 8 )
        {
            device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+940, gsy+513 + 10*dt];
            map 
            ( 
                 <instance *strVar>   => rRef
            );
        }
        else
        {
            device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+960, gsy+333 + 10*dt];
            map 
            ( 
                 <instance *strVar>   => rRef
            );
        }
    }
    
}// end of function draw_dll_tile


/**VFunction******************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_pll tile]

  ---------|---------|---------|---------
    pll @[2,0]
    pllinmux @[1,6]     pllinmux @[1,7]     pllinmuxd @[1,8]    pllfbmux @[1,9]
  ---------|---------|---------|---------

*****************************************************************************************/
function draw_pll_tile
( 
    unsigned int tx,
    unsigned int ty
)
{
    unsigned int lsx, lsy, gsx, gsy;
    unsigned int dx, dy, dt;

    // device reference variables
    &device rRef;
    string strVar;
    
    lsx = tx * NUM_GRID_X + 3;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
    dx = 0;
    for ( dt = 0; dt < 2; dt += 1 )
    {
        dy = 6 * dt;
        
        rRef = <device SFB @[lsx+dx,lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "SFB_%d_%d", lsx+dx, lsy+dy);
        device SFB  ( symbol logsym )  *strVar  @[gsx+740,gsy+470 + 1200*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    rRef = <device PLLINMUX @[lsx+2,lsy+0] of ARCHITECTURE>;
    sprintf(strVar, "PLLINMUX_%d_%d", lsx+2, lsy+0);
    device PLLINMUX  ( symbol logsym )  *strVar  @[gsx+740,gsy+200 + 1200];
    map
    (
         <instance *strVar>   => rRef
    );
    
    rRef = <device PLLINMUX @[lsx+2,lsy+2] of ARCHITECTURE>;
    sprintf(strVar, "PLLINMUX_%d_%d", lsx+2, lsy+2);
    device PLLINMUX  ( symbol logsym )  *strVar  @[gsx+740,gsy+280 + 1200];
    map
    (
         <instance *strVar>   => rRef
    );
    
    rRef = <device PLLINMUXD @[lsx+2,lsy+4] of ARCHITECTURE>;
    sprintf(strVar, "PLLINMUXD_%d_%d", lsx+2, lsy+4);
    device PLLINMUXD  ( symbol logsym )  *strVar  @[gsx+800,gsy+240 + 1200];
    map
    (
         <instance *strVar>   => rRef
    );
    
    rRef = <device PLLFBMUX @[lsx+2,lsy+6] of ARCHITECTURE>;
    sprintf(strVar, "PLLFBMUX_%d_%d", lsx+2, lsy+6);
    device PLLFBMUX  ( symbol logsym )  *strVar  @[gsx+800,gsy+760 + 1200];
    map
    (
         <instance *strVar>   => rRef
    );
    
    rRef = <device PLL @[lsx+2,lsy+8] of ARCHITECTURE>;
    sprintf(strVar, "PLL_%d_%d", lsx+2, lsy+8);
    device PLL  ( symbol logsym )  *strVar  @[gsx+901,gsy+200];
    map
    (
         <instance *strVar>   => rRef
    );
    
}; // end of function draw_pll_tile


/**VFunction******************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_ccs tile]

*****************************************************************************************/
function draw_ccs_tile
(
    unsigned int tx,
    unsigned int ty
)
{
    unsigned int lsx, lsy, gsx, gsy;
    unsigned int dt, dx, dy;

    // device reference variables
    &device rRef;
    string strVar;
    
    lsx = tx * NUM_GRID_X + 3;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
    dx = 0;
    for ( dt = 0; dt < 3; dt += 1 )
    {
        dy = 6 * dt;
        
        rRef = <device SFB @[lsx+dx,lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "SFB_%d_%d", lsx+dx, lsy+dy);
        device SFB  ( symbol logsym )  *strVar  @[gsx+740,gsy+470 + 1200*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    rRef = <device CCS @[lsx+1,lsy] of ARCHITECTURE>;
    sprintf(strVar, "CCS_%d_%d", lsx+1, lsy);
    device CCS  ( symbol logsym )  *strVar  @[gsx+830,gsy+200];
    map
    (
         <instance *strVar>   => rRef
    );
    
}; // end of function draw_ccs_tile


/**VFunction******************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_analog tile]

*****************************************************************************************/
function draw_analog_tile
(
    unsigned int tx,
    unsigned int ty
)
{
    unsigned int lsx, lsy, gsx, gsy;
    unsigned int dt, dx, dy;

    // device reference variables
    &device rRef;
    string strVar;
    
    lsx = tx * NUM_GRID_X + 3;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
    rRef = <device LDO @[lsx,lsy+2] of ARCHITECTURE>;
    sprintf(strVar, "LDO_%d_%d", lsx, lsy+2);
    device LDO  ( symbol logsym )  *strVar  @[gsx+940,gsy+490];
    map
    (
         <instance *strVar>   => rRef
    );
    
    rRef = <device OSC @[lsx+2,lsy] of ARCHITECTURE>;
    sprintf(strVar, "OSC_%d_%d", lsx+2, lsy);
    device OSC  ( symbol logsym )  *strVar  @[gsx+800,gsy+340];
    map
    (
         <instance *strVar>   => rRef
    );
    
    rRef = <device MFG_TEST @[lsx+2,lsy+1] of ARCHITECTURE>;
    sprintf(strVar, "MFG_TEST_%d_%d", lsx+2, lsy+1);
    device MFG_TEST  ( symbol logsym )  *strVar  @[gsx+850,gsy+590];
    map
    (
         <instance *strVar>   => rRef
    );
    
    rRef = <device SFB @[lsx+2,lsy+2] of ARCHITECTURE>;
    sprintf(strVar, "SFB_%d_%d", lsx+2, lsy+2);
    device SFB  ( symbol logsym )  *strVar  @[gsx+740,gsy+470];
    map
    (
         <instance *strVar>   => rRef
    );
    
}; // end of function draw_analog_tile


/**VFunction******************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_uscm tile]

*****************************************************************************************/
function draw_uscm_tile
(
    unsigned int tx,
    unsigned int ty
)
{
    unsigned int lsx, lsy, gsx, gsy;
    unsigned int dt, dx, dy, dx2, dy2;

    // device reference variables
    &device rRef;
    string strVar;
    
    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
  // Part1
    for ( dt = 0; dt < 6; dt += 1 )
    {
      // draw <USCMMUX XUSCMMUX>
        dx = 0;
        dy = 3 * dt;
        
        rRef = <device USCMMUX_TEST @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USCMMUX_TEST_%d_%d", lsx+dx, lsy+dy);
        device USCMMUX_TEST  ( symbol logsym_1 )  *strVar  @[gsx+280, gsy+260 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 1;
        rRef = <device USCMMUX @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USCMMUX_%d_%d", lsx+dx, lsy+dy);
        device USCMMUX  ( symbol logsym_1 )  *strVar  @[gsx+280, gsy+210 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 1;
        rRef = <device USCMMUX_OUT @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USCMMUX_OUT_%d_%d", lsx+dx, lsy+dy);
        device USCMMUX_OUT  ( symbol logsym_1 )  *strVar  @[gsx+230, gsy+235 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        // draw <USCMDC XUSCMDC>
        dx = (14 + dt) / 18 + 1;
        dy = (14 + dt) % 18;
        
        rRef = <device USCMDC @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USCMDC_%d_%d", lsx+dx, lsy+dy);
        device USCMDC  ( symbol logsym_1 )  *strVar  @[gsx+130, gsy+240 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    for ( dt = 0; dt < 6; dt += 1 )
    {
      // draw <USSMMUX XUSSMMUX>
        dx = (4 + 3 * dt) / 18 + 2;
        dy = (4 + 3 * dt) % 18;
        
        rRef = <device USSMMUX @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USSMMUX_%d_%d", lsx+dx, lsy+dy);
        device USSMMUX  ( symbol logsym )  *strVar  @[gsx+810, gsy+210 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 1;
        rRef = <device USSMMUX_TEST @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USSMMUX_TEST_%d_%d", lsx+dx, lsy+dy);
        device USSMMUX_TEST  ( symbol logsym )  *strVar  @[gsx+810, gsy+260 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dx = (dy + 1) / 18 + dx;            // when dt == 4, dy == 16 + 1; then dy + 1 == 18, this is dx should be dx + 1
        dy = (dy + 1) % 18;
        rRef = <device USSMMUX_OUT @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USSMMUX_OUT_%d_%d", lsx+dx, lsy+dy);
        device USSMMUX_OUT  ( symbol logsym )  *strVar  @[gsx+860, gsy+235 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    gsy += 1200;
    
    for ( dt = 0; dt < 4; dt += 1 )
    {
      // draw <USCMMUX XUSCMMUX>
        dx = 1;
        dy = 3 * dt;
        
        rRef = <device USCMMUX_TEST @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USCMMUX_TEST_%d_%d", lsx+dx, lsy+dy);
        device USCMMUX_TEST  ( symbol logsym_1 )  *strVar  @[gsx+280, gsy+260 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 1;
        rRef = <device USCMMUX @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USCMMUX_%d_%d", lsx+dx, lsy+dy);
        device USCMMUX  ( symbol logsym_1 )  *strVar  @[gsx+280, gsy+210 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 1;
        rRef = <device USCMMUX_OUT @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USCMMUX_OUT_%d_%d", lsx+dx, lsy+dy);
        device USCMMUX_OUT  ( symbol logsym_1 )  *strVar  @[gsx+230, gsy+235 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        if ( dt % 2 == 1 )      // dt = 0 (1) 2 (3)
        {
            unsigned int tmp_dt = dt / 2;
            
          // draw <USCMD XUSCMD>
            dx = 1;
            dy = 12 + tmp_dt;
            
            rRef = <device USCMD @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "USCMD_%d_%d", lsx+dx, lsy+dy);
            device USCMD  ( symbol logsym_1 )  *strVar  @[gsx+180, gsy+290 + 200*tmp_dt];
            map
            (
                 <instance *strVar>   => rRef
            );
            
          // draw <USCMDC XUSCMDC>
            dx = 2;
            dy = 2 + tmp_dt;
            
            rRef = <device USCMDC @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "USCMDC_%d_%d", lsx+dx, lsy+dy);
            device USCMDC  ( symbol logsym_1 )  *strVar  @[gsx+130, gsy+290 + 200*tmp_dt];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
    }
    
    for ( dt = 0; dt < 2; dt += 1 )
    {
      // draw <USSMMUX XUSSMMUX>
        dx = 3;
        dy = 4 + 3 * dt;
        
        rRef = <device USSMMUX @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USSMMUX_%d_%d", lsx+dx, lsy+dy);
        device USSMMUX  ( symbol logsym )  *strVar  @[gsx+810, gsy+210 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 1;
        rRef = <device USSMMUX_TEST @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USSMMUX_TEST_%d_%d", lsx+dx, lsy+dy);
        device USSMMUX_TEST  ( symbol logsym )  *strVar  @[gsx+810, gsy+260 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 1;
        rRef = <device USSMMUX_OUT @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USSMMUX_OUT_%d_%d", lsx+dx, lsy+dy);
        device USSMMUX_OUT  ( symbol logsym )  *strVar  @[gsx+860, gsy+235 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
    }
    
  // Part2
    gsy -= 2400;
    
    dx2 = 0;                // dx2 = (2 * dt) / 18 + 0; => dx2 = 0;
    for ( dt = 0; dt < 8; dt += 1 )
    {
      // drwa <PGC_BUFFERX1 XPGC_BUFFERX1>
        dy2 = 2 * dt;       // dy2 = (2 * dt) % 18; => dy2 = 2 * dt;
        
        rRef = <device PGC_BUFFERX1 @[lsx+dx2, lsy+dy2] of ARCHITECTURE>;
        sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx2, lsy+dy2);
        device PGC_BUFFERX1  ( symbol logsym_1 )  *strVar  @[gsx+90, gsy+910 + 10*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        rRef = <device PGC_BUFFERX1 @[lsx+dx2, lsy+dy2+1] of ARCHITECTURE>;
        sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx2, lsy+dy2+1);
        device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+905, gsy+910 + 10*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    for ( dt = 0; dt < 8; dt += 1 )
    {
      // drwa <PGC_BUFFERX1 XPGC_BUFFERX1_SIG>
        dx2 = (16 + 2 * dt) / 18;
        dy2 = (16 + 2 * dt) % 18;
        
        rRef = <device PGC_BUFFERX1 @[lsx+dx2, lsy+dy2] of ARCHITECTURE>;
        sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx2, lsy+dy2);
        device PGC_BUFFERX1  ( symbol logsym_1 )  *strVar  @[gsx+90, gsy+820 + 10*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        rRef = <device PGC_BUFFERX1 @[lsx+dx2, lsy+dy2+1] of ARCHITECTURE>;
        sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx2, lsy+dy2+1);
        device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+905, gsy+820 + 10*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
  // Part3
    for ( dt = 0; dt < 4; dt += 1 )
    {
        dx = (11 + dt) / 18 + 3;
        dy = (11 + dt) % 18;
        rRef = <device IOCKBRGMUX @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKBRGMUX_%d_%d", lsx+dx, lsy+dy);
        device IOCKBRGMUX  ( symbol logsym )  *strVar  @[gsx+490, gsy+140 + 160*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dx = (15 + dt) / 18 + 3;
        dy = (15 + dt) % 18;
        rRef = <device IOCKBRGMUX_TEST @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKBRGMUX_TEST_%d_%d", lsx+dx, lsy+dy);
        device IOCKBRGMUX_TEST  ( symbol logsym )  *strVar  @[gsx+490, gsy+220 + 160*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dx = (1 + dt) / 18 + 4;
        dy = (1 + dt) % 18;
        rRef = <device IOCKBRGMUX_OUT @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKBRGMUX_OUT_%d_%d", lsx+dx, lsy+dy);
        device IOCKBRGMUX_OUT  ( symbol logsym )  *strVar  @[gsx+590, gsy+180 + 160*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    for ( dt = 0; dt < 2; dt += 1 )
    {
        dx = 4;
        dy = 5 + dt;
        
        rRef = <device IOCKBRG @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKBRG_%d_%d", lsx+dx, lsy+dy);
        device IOCKBRG  ( symbol logsym )  *strVar  @[gsx+640, gsy+280 + 320*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dx2 = (16 + 2 * dt) / 18 + 1;
        dy2 = (16 + 2 * dt) % 18;
        
        rRef = <device PGC_BUFFERX1 @[lsx+dx2, lsy+dy2] of ARCHITECTURE>;
        sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx2, lsy+dy2);
        device PGC_BUFFERX1  ( symbol logsym_1 )  *strVar  @[gsx+90, gsy+780 + 10*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        rRef = <device PGC_BUFFERX1 @[lsx+dx2, lsy+dy2+1] of ARCHITECTURE>;
        sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx2, lsy+dy2+1);
        device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+905, gsy+780 + 10*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    dx = 3;
    for ( dt = 0; dt < 4; dt += 1 )
    {
        dy = dt;
        
        rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
        device PGC_BUFFERX1  ( symbol logsym_1 )  *strVar  @[gsx+90, gsy+20 + 10*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    dx = 4;
    for ( dt = 0; dt < 10; dt += 1 )
    {
        dy = dt;
        
        rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
        device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+905, gsy+20 + 10*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
  // Part4
    gsx -= 1200;
    rRef = <device CKEB @[lsx+4, lsy+9] of ARCHITECTURE>;
    sprintf(strVar, "CKEB_%d_%d", lsx+4, lsy+9);
    device CKEB  ( symbol logsym )  *strVar  @[gsx+680, gsy+1020];
    map
    (
         <instance *strVar>   => rRef
    );
    
}; // end of function draw_uscm_tile


/**VFunction******************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_ckeb tile]

*****************************************************************************************/
function draw_ckeb_tile
(
    unsigned int tx,
    unsigned int ty
)
{
    unsigned int lsx, lsy, gsx, gsy;

    // device reference variables
    &device rRef;
    string strVar;
    
    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
    rRef = <device CKEB @[lsx, lsy] of ARCHITECTURE>;
    sprintf(strVar, "CKEB_%d_%d", lsx, lsy);
    device CKEB  ( symbol logsym )  *strVar  @[gsx+680, gsy+1020];
    map
    (
         <instance *strVar>   => rRef
    );
    
}; // end of function draw_ckeb_tile


/**VFunction******************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_iock tile]

*****************************************************************************************/
function draw_iock_tile
(
    unsigned int tx,
    unsigned int ty
)
{
    unsigned int lsx, lsy, gsx, gsy;
    unsigned int dt, dx, dy;

    // device reference variables
    &device rRef;
    string strVar;
    
    lsx = tx * NUM_GRID_X + 3;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
    for ( dt = 0; dt < 2; dt += 1 )
    {
  // Part1
        dx = 1;
        
        dy = 2 - dt;
        rRef = <device CLKDLY @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CLKDLY_%d_%d", lsx+dx, lsy+dy);
        device CLKDLY  ( symbol logsym_w )  *strVar  @[gsx+740, gsy+360 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy = 4 - dt;
        rRef = <device CLKDLYMUX @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CLKDLYMUX_%d_%d", lsx+dx, lsy+dy);
        device CLKDLYMUX  ( symbol logsym_w )  *strVar  @[gsx+820, gsy+280 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy = 5 + dt;
        rRef = <device CLKDLYMUX_TEST @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CLKDLYMUX_TEST_%d_%d", lsx+dx, lsy+dy);
        device CLKDLYMUX_TEST  ( symbol logsym_w )  *strVar  @[gsx+820, gsy+400 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy = 7 + dt;
        rRef = <device CLKDLYMUX_OUT @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CLKDLYMUX_OUT_%d_%d", lsx+dx, lsy+dy);
        device CLKDLYMUX_OUT  ( symbol logsym_w )  *strVar  @[gsx+860, gsy+340 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    gsy += 1200;
    for ( dt = 0; dt < 2; dt += 1 )
    {
  // Part2
        dx = 0;
        
        dy = dt;
        rRef = <device IOCKPREMUX @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKPREMUX_%d_%d", lsx+dx, lsy+dy);
        device IOCKPREMUX  ( symbol logsym_w )  *strVar  @[gsx+820, gsy+280 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 2;
        rRef = <device IOCKPREMUX_TEST @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKPREMUX_TEST_%d_%d", lsx+dx, lsy+dy);
        device IOCKPREMUX_TEST  ( symbol logsym_w )  *strVar  @[gsx+820, gsy+400 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 2;
        rRef = <device IOCKPREMUX_OUT @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKPREMUX_OUT_%d_%d", lsx+dx, lsy+dy);
        device IOCKPREMUX_OUT  ( symbol logsym_w )  *strVar  @[gsx+860, gsy+340 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    gsy += 1200;
    for ( dt = 0; dt < 2; dt += 1 )
    {
  // Part3
        dx = 0;
        
        dy = 10 + dt;
        rRef = <device IOCKMUX @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKMUX_%d_%d", lsx+dx, lsy+dy);
        device IOCKMUX  ( symbol logsym_w )  *strVar  @[gsx+820, gsy+280 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 1;
        rRef = <device IOCKMUX_TEST @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKMUX_TEST_%d_%d", lsx+dx, lsy+dy);
        device IOCKMUX_TEST  ( symbol logsym_w )  *strVar  @[gsx+820, gsy+400 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 2;
        rRef = <device IOCKMUX_OUT @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKMUX_OUT_%d_%d", lsx+dx, lsy+dy);
        device IOCKMUX_OUT  ( symbol logsym_w )  *strVar  @[gsx+860, gsy+340 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
  // Part4
        dy = 15 + dt;
        rRef = <device IOCKGATE @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKGATE_%d_%d", lsx+dx, lsy+dy);
        device IOCKGATE  ( symbol logsym_w )  *strVar  @[gsx+901, gsy+360 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dx = (18 - dt) / 18;
        dy = (18 - dt) % 18;
        rRef = <device CLKDIV @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CLKDIV_%d_%d", lsx+dx, lsy+dy);
        device CLKDIV  ( symbol logsym_w )  *strVar  @[gsx+940, gsy+360 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    gsy -= 1200;
  // Part5
    dx = 0;
    for ( dt = 0; dt < 2; dt += 1 )
    {
        dy = 6 + 2*dt;
        rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
        device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+920, gsy+513 + 50*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 1;
        rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
        device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+920, gsy+523 + 50*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy = 12 - 2*dt;
        rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
        device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+960, gsy+638 + 50*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 1;
        rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
        device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+960, gsy+648 + 50*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    dx = 2;
    for ( dt = 0; dt < 4; dt += 1 )
    {
        dy = 7 + dt;
        rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
        device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+1080, gsy+628 + 10*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 4;
        rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
        device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+1080, gsy+678 + 10*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    gsy -= 1200;
    
    dx = 1;
    for ( dt = 0; dt < 6; dt += 1 )
    {
        dy = dt;
        rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
        device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+1000, gsy+490 + 10*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    dx = 2;
    for ( dt = 0; dt < 2; dt += 1 )
    {
        dy = dt;
        rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
        device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+1020, gsy+480 + 70*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    gsy += 1200;
    
  // Part6
    rRef = <device CKEB @[lsx+1, lsy+12] of ARCHITECTURE>;
    sprintf(strVar, "CKEB_%d_%d", lsx+1, lsy+12);
    device CKEB  ( symbol logsym )  *strVar  @[gsx+680, gsy+1020];
    map
    (
         <instance *strVar>   => rRef
    );
    
    rRef   = <device SFB @[lsx,lsy] of ARCHITECTURE>;
    sprintf(strVar, "SFB_%d_%d", lsx, lsy);
    device SFB ( symbol logsym ) *strVar @[gsx+740,gsy+470 - 1200];
    map
    (
        <instance *strVar>   => rRef
    );
    
    rRef   = <device SFB @[lsx+1,lsy+12] of ARCHITECTURE>;
    sprintf(strVar, "SFB_%d_%d", lsx+1, lsy+12);
    device SFB ( symbol logsym ) *strVar @[gsx+740,gsy+470 + 1200];
    map
    (
        <instance *strVar>   => rRef
    );
    
}; // end of function draw_iock_tile


/**VFunction******************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_clkdlyb tile]

*****************************************************************************************/
function draw_clkdlyb_tile
(
    unsigned int tx,
    unsigned int ty
)
{
    unsigned int lsx, lsy, gsx, gsy;
    unsigned int dt, dx, dy;

    // device reference variables
    &device rRef;
    string strVar;
    
    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
  // left, middle, right
    for ( dt = 0; dt < 3; dt += 1 )
    {
        dx = (4 * dt) / 6;
        dy = (4 * dt) % 6;
        rRef = <device CLKDLY @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CLKDLY_%d_%d", lsx+dx, lsy+dy);
        device CLKDLY  ( symbol logsym_s )  *strVar  @[gsx+190 + 400*dt, gsy+290];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 1;
        rRef = <device CLKDLYMUX @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CLKDLYMUX_%d_%d", lsx+dx, lsy+dy);
        device CLKDLYMUX  ( symbol logsym_s )  *strVar  @[gsx+100 + 400*dt, gsy+340];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dx += (dy + 1) / 6;
        dy  = (dy + 1) % 6;
        rRef = <device CLKDLYMUX_TEST @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CLKDLYMUX_TEST_%d_%d", lsx+dx, lsy+dy);
        device CLKDLYMUX_TEST  ( symbol logsym_s )  *strVar  @[gsx+240 + 400*dt, gsy+340];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 1;
        rRef = <device CLKDLYMUX_OUT @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CLKDLYMUX_OUT_%d_%d", lsx+dx, lsy+dy);
        device CLKDLYMUX_OUT  ( symbol logsym_s )  *strVar  @[gsx+170 + 400*dt, gsy+390];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
}; // end of function draw_clkdlyb_tile


/**VFunction******************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_clkdlyt tile]

*****************************************************************************************/
function draw_clkdlyt_tile
(
    unsigned int tx,
    unsigned int ty
)
{
    unsigned int lsx, lsy, gsx, gsy;
    unsigned int dt, dx, dy;
    
    // device reference variables
    &device rRef;
    string strVar;
    
    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
    rRef = <device CLKDLY @[lsx, lsy] of ARCHITECTURE>;
    sprintf(strVar, "CLKDLY_%d_%d", lsx, lsy);
    device CLKDLY  ( symbol logsym_n )  *strVar  @[gsx+590, gsy+710];
    map
    (
         <instance *strVar>   => rRef
    );
    
    rRef = <device CLKDLYMUX @[lsx, lsy+1] of ARCHITECTURE>;
    sprintf(strVar, "CLKDLYMUX_%d_%d", lsx, lsy+1);
    device CLKDLYMUX  ( symbol logsym_n )  *strVar  @[gsx+500, gsy+660];
    map
    (
         <instance *strVar>   => rRef
    );
    
    rRef = <device CLKDLYMUX_TEST @[lsx, lsy+2] of ARCHITECTURE>;
    sprintf(strVar, "CLKDLYMUX_TEST_%d_%d", lsx, lsy+2);
    device CLKDLYMUX_TEST  ( symbol logsym_n )  *strVar  @[gsx+640, gsy+660];
    map
    (
         <instance *strVar>   => rRef
    );
    
    rRef = <device CLKDLYMUX_OUT @[lsx, lsy+3] of ARCHITECTURE>;
    sprintf(strVar, "CLKDLYMUX_OUT_%d_%d", lsx, lsy+3);
    device CLKDLYMUX_OUT  ( symbol logsym_n )  *strVar  @[gsx+570, gsy+610];
    map
    (
         <instance *strVar>   => rRef
    );
}; // end of function draw_clkdlyt_tile


/**VFunction******************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_iol tile]
  
  ---------|---------|---------|---------
    IOL         @[1,1]      IOL         @[1,2]      IOL         @[1,3]      IOL         @[1,4]
    IOLDLY(S)   @[0,1]      IOLDLY(S)   @[0,2]      IOLDLY(S)   @[0,3]      IOLDLY(S)   @[0,4]
  ---------|---------|---------|---------  

  Revision History:

*****************************************************************************************/
function draw_iol_tile
( 
    unsigned int tx,
    unsigned int ty,
    unsigned int flag
)
{
    // Site index variable. The X index for logic and GUI are declared separately
    unsigned int lsx, gsx, lsy, gsy;
    unsigned int dt, dx, dy;

    // device reference variables
    &device rRef;
    string strVar;

    lsx = tx * NUM_GRID_X + 3;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
    
    if (flag == 0 || flag == 1 || flag == 4 || flag == 5)   // iolt_tile, ioltc_tile, iolb_tile, iolbc_tile
    {
      // IOL
        dx = 1;
        for ( dt = 0; dt < 4; dt += 1 )
        {
            dy = 1 + dt;
            
            rRef   = <device IOL @[lsx+dx,lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOL_%d_%d", lsx+dx, lsy+dy);
            device IOL ( symbol logsym ) *strVar @[gsx+840,gsy+650 - 120*dt];
            map
            (
                <instance *strVar>   => rRef
            );
        }
        
      // IOLDLYS
        dx = 0;
        for ( dt = 0; dt < 4; dt += 1 )
        {
            dy = 1 + dt;
            
            rRef   = <device IOLDLYS @[lsx+dx,lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOLDLYS_%d_%d", lsx+dx, lsy+dy);
            device IOLDLYS ( symbol logsym ) *strVar @[gsx+940,gsy+650 - 120*dt];
            map
            (
                <instance *strVar>   => rRef
            );
        }
        
      // SFB
        rRef   = <device SFB @[lsx+2,lsy+0] of ARCHITECTURE>;
        sprintf(strVar, "SFB_%d_%d", lsx+2, lsy+0);
        device SFB ( symbol logsym ) *strVar @[gsx+740,gsy+470];
        map
        (
            <instance *strVar>   => rRef
        );
    }
    else if (flag == 2)     // ioll_tile
    {
      // IOL
        dx = 1;
        for ( dt = 0; dt < 4; dt += 1 )
        {
            dy = 1 + dt;
            
            rRef   = <device IOL @[lsx+dx,lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOL_%d_%d", lsx+dx, lsy+dy);
            device IOL ( symbol logsym ) *strVar @[gsx+840,gsy+290 + 120*dt];
            map
            (
                <instance *strVar>   => rRef
            );
        }
        
      // IOLDLYS
        dx = 0;
        for ( dt = 0; dt < 4; dt += 1 )
        {
            dy = 1 + dt;
            
            rRef   = <device IOLDLYS @[lsx+dx,lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOLDLYS_%d_%d", lsx+dx, lsy+dy);
            device IOLDLYS ( symbol logsym ) *strVar @[gsx+940,gsy+290 + 120*dt];
            map
            (
                <instance *strVar>   => rRef
            );
        }
        
      // SFB
        rRef   = <device SFB @[lsx+2,lsy+5] of ARCHITECTURE>;
        sprintf(strVar, "SFB_%d_%d", lsx+2, lsy+5);
        device SFB ( symbol logsym ) *strVar @[gsx+740,gsy+470];
        map
        (
            <instance *strVar>   => rRef
        );
        
      // OSERDES
        rRef   = <device OSERDES @[lsx+1,lsy+5] of ARCHITECTURE>;
        sprintf(strVar, "OSERDES_%d_%d", lsx+1, lsy+5);
        device OSERDES ( symbol logsym ) *strVar @[gsx+840,gsy+200];
        map
        (
            <instance *strVar>   => rRef
        );
        
      // IOLCLK_MUX
        rRef   = <device IOLCLK_MUX @[lsx,lsy] of ARCHITECTURE>;
        sprintf(strVar, "IOLCLK_MUX_%d_%d", lsx, lsy);
        device IOLCLK_MUX ( symbol logsym ) *strVar @[gsx+940,gsy+200];
        map
        (
            <instance *strVar>   => rRef
        );
        
        rRef   = <device IOLCLK_MUX @[lsx,lsy+1] of ARCHITECTURE>;
        sprintf(strVar, "IOLCLK_MUX_%d_%d", lsx, lsy+1);
        device IOLCLK_MUX ( symbol logsym ) *strVar @[gsx+940,gsy+230];
        map
        (
            <instance *strVar>   => rRef
        );
    }
    else if ( flag == 3 )   // iolr_tile
    {
      // IOL
        dx = 1;
        for ( dt = 0; dt < 4; dt += 1 )
        {
            dy = 1 + dt;
            
            rRef   = <device IOL @[lsx+dx,lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOL_%d_%d", lsx+dx, lsy+dy);
            device IOL ( symbol logsym ) *strVar @[gsx+840,gsy+290 + 120*dt];
            map
            (
                <instance *strVar>   => rRef
            );
        }
        
      // IOLDLY
        dx = 0;
        for ( dt = 0; dt < 4; dt += 1 )
        {
            dy = 1 + dt;
            
            rRef   = <device IOLDLY @[lsx+dx,lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOLDLY_%d_%d", lsx+dx, lsy+dy);
            device IOLDLY ( symbol logsym ) *strVar @[gsx+940,gsy+290 + 120*dt];
            map
            (
                <instance *strVar>   => rRef
            );
        }
        
      // SFB
        rRef   = <device SFB @[lsx+2,lsy+5] of ARCHITECTURE>;
        sprintf(strVar, "SFB_%d_%d", lsx+2, lsy+5);
        device SFB ( symbol logsym ) *strVar @[gsx+740,gsy+470];
        map
        (
            <instance *strVar>   => rRef
        );
        
      // ISERDES
        rRef   = <device ISERDES @[lsx+1,lsy+5] of ARCHITECTURE>;
        sprintf(strVar, "ISERDES_%d_%d", lsx+1, lsy+5);
        device ISERDES ( symbol logsym ) *strVar @[gsx+840,gsy+200];
        map
        (
            <instance *strVar>   => rRef
        );
        
      // IOLCLK_MUX
        rRef   = <device IOLCLK_MUX @[lsx,lsy] of ARCHITECTURE>;
        sprintf(strVar, "IOLCLK_MUX_%d_%d", lsx, lsy);
        device IOLCLK_MUX ( symbol logsym ) *strVar @[gsx+940,gsy+200];
        map
        (
            <instance *strVar>   => rRef
        );
        
        rRef   = <device IOLCLK_MUX @[lsx,lsy+1] of ARCHITECTURE>;
        sprintf(strVar, "IOLCLK_MUX_%d_%d", lsx, lsy+1);
        device IOLCLK_MUX ( symbol logsym ) *strVar @[gsx+940,gsy+230];
        map
        (
            <instance *strVar>   => rRef
        );
    }
    
}; // end of function draw_iol_tile


/**VFunction******************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_ioblr tile]

*****************************************************************************************/
function draw_ioblr_tile
(
    unsigned int tx,
    unsigned int ty
)
{
    unsigned int lsx, lsy, gsx, gsy;
    unsigned int dt, dx, dy, d_ty;
    
    unsigned int iobsd_p[] = { 138, 132, 126, 120, 108, 102, 96, 90, 48, 42, 36, 30, 24, 18 };
    unsigned int iobsd_n[] = { 139, 133, 127, 121, 109, 103, 97, 91, 49, 43, 37, 31, 25, 19 };
    unsigned int iobss_p[] = { 140, 134, 128, 122, 110, 104, 98, 92, 50, 44, 38, 32, 26, 20 };
    unsigned int iobss_n[] = { 141, 135, 129, 123, 111, 105, 99, 93, 51, 45, 39, 33, 27, 21 };
    
    unsigned int iobsr_p_0[] = { 144, 138, 126, 120, 102, 96, 90, 66, 60, 42, 36, 24, 18, 12 };
    unsigned int iobsr_n_0[] = { 145, 139, 127, 121, 103, 97, 91, 67, 61, 43, 37, 25, 19, 13 };
    unsigned int iobsr_p_1[] = { 146, 140, 128, 122, 104, 98, 92, 68, 62, 44, 38, 26, 20, 14 };
    unsigned int iobsr_n_1[] = { 147, 141, 129, 123, 105, 99, 93, 69, 63, 45, 39, 27, 21, 15 };
    
    // device reference variables
    &device rRef;
    string strVar;
    
    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
    if(tx==0)       // iob0_2k_tile
    {
        dx = 0;
        
        gsx += 1;   // debug
        foreach dy (iobsd_p)
        {
            if (102 == dy)
            {
                d_ty = dy / 6;
                
                rRef = <device IOBS @[lsx+dx, lsy+dy] of ARCHITECTURE>;
                sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
                device IOBS  ( symbol logsym_w1 )  *strVar  @[gsx+900, gsy+360 + 1200*d_ty];
                map
                (
                     <instance *strVar>   => rRef
                );
            }
            else
            {
                d_ty = dy / 6;
                
                rRef = <device IOBD @[lsx+dx, lsy+dy] of ARCHITECTURE>;
                sprintf(strVar, "IOBD_%d_%d", lsx+dx, lsy+dy);
                device IOBD  ( symbol logsym )  *strVar  @[gsx+900, gsy+360 + 1200*d_ty];
                map
                (
                     <instance *strVar>   => rRef
                );
            }
        }
        
        foreach dy (iobsd_n)
        {
            d_ty = dy / 6;
            
            rRef = <device IOBS @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
            device IOBS  ( symbol logsym_w0 )  *strVar  @[gsx+900, gsy+480 + 1200*d_ty];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        foreach dy (iobss_p)
        {
            d_ty = dy / 6;
            
            rRef = <device IOBS @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
            device IOBS  ( symbol logsym_w1 )  *strVar  @[gsx+900, gsy+600 + 1200*d_ty];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        foreach dy (iobss_n)
        {
            d_ty = dy / 6;
            
            rRef = <device IOBS @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
            device IOBS  ( symbol logsym_w0 )  *strVar  @[gsx+900, gsy+720 + 1200*d_ty];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        gsx -= 1;   // debug
        
        dx = 1;
        d_ty = 11;
        for ( dt = 0; dt < 8; dt += 1 )
        {
            dy = 70 + dt;
            
            rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
            device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+800, gsy+440 + 10*dt + 1200*d_ty];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        
        dx = 2;
        d_ty = 11;
        for ( dt = 0; dt < 2; dt += 1 )
        {
            dy = dt;
            
            rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
            device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+820, gsy+400 + 10*dt + 1200*d_ty];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        
        d_ty = 10;
        rRef = <device BKCL @[lsx+2, lsy+64] of ARCHITECTURE>;
        sprintf(strVar, "BKCL_%d_%d", lsx+1, lsy+64);
        device BKCL  ( symbol logsym_1 )  *strVar  @[gsx+901, gsy+1000 + 1200*d_ty];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    else            // iob2_2k_tile
    {
        dx = 0;
        
        gsx += 1;   // debug
        foreach dy (iobsr_p_0)
        {
            d_ty = dy / 6;
            
            rRef = <device IOBR @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOBR_%d_%d", lsx+dx, lsy+dy);
            device IOBR  ( symbol logsym )  *strVar  @[gsx+300, gsy+360 + 1200*d_ty];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        foreach dy (iobsr_n_0)
        {
            d_ty = dy / 6;
            
            rRef = <device IOBS @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
            device IOBS  ( symbol logsym_e )  *strVar  @[gsx+300, gsy+480 + 1200*d_ty];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        foreach dy (iobsr_p_1)
        {
            d_ty = dy / 6;
            
            rRef = <device IOBR @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOBR_%d_%d", lsx+dx, lsy+dy);
            device IOBR  ( symbol logsym )  *strVar  @[gsx+300, gsy+600 + 1200*d_ty];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        foreach dy (iobsr_n_1)
        {
            d_ty = dy / 6;
            
            rRef = <device IOBS @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
            device IOBS  ( symbol logsym_e )  *strVar  @[gsx+300, gsy+720 + 1200*d_ty];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        gsx -= 1;   // debug
        
        dx = 1;
        d_ty = 11;
        for ( dt = 0; dt < 8; dt += 1 )
        {
            dy = 70 + dt;
            
            rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
            device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+400, gsy+440 + 10*dt + 1200*d_ty];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        
        dx = 2;
        d_ty = 11;
        for ( dt = 0; dt < 8; dt += 1 )
        {
            dy = 70 + dt;
            
            rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
            device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+420, gsy+440 + 10*dt + 1200*d_ty];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        
        d_ty = 10;
        rRef = <device BKCL @[lsx+2, lsy+64] of ARCHITECTURE>;
        sprintf(strVar, "BKCL_%d_%d", lsx+1, lsy+64);
        device BKCL  ( symbol logsym )  *strVar  @[gsx+301, gsy+1000 + 1200*d_ty];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
} // end of function draw_ioblr_tile


/**VFunction******************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_iobt tile]

*****************************************************************************************/
function draw_iobt_tile
(
    unsigned int tx,
    unsigned int ty
)
{
    unsigned int lsx, lsy, gsx, gsy;
    unsigned int dt, dx, dy, d_tx;
    
    unsigned int iobss_p_0[] = { 0, 6, 12, 18, 24, 30, 36, 54, 60, 66, 72, 78, 84 };
    unsigned int iobss_n_0[] = { 1, 7, 13, 19, 25, 31, 37, 55, 61, 67, 73, 79, 85 };
    unsigned int iobss_p_1[] = { 2, 8, 14, 20, 26, 32, 38, 56, 62, 68, 74, 80, 86 };
    unsigned int iobss_n_1[] = { 3, 9, 15, 21, 27, 33, 39, 57, 63, 69, 75, 81, 87 };
    
    // device reference variables
    &device rRef;
    string strVar;
    
    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
    dy = 0;
    foreach dx (iobss_p_0)
    {
        d_tx = dx / 6;
        
        rRef = <device IOBS @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
        device IOBS  ( symbol logsym_n0 )  *strVar  @[gsx+200 +1200*d_tx, gsy+200];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    foreach dx (iobss_n_0)
    {
        d_tx = dx / 6;
        
        rRef = <device IOBS @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
        device IOBS  ( symbol logsym_n1 )  *strVar  @[gsx+320 +1200*d_tx, gsy+200];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    foreach dx (iobss_p_1)
    {
        d_tx = dx / 6;
        
        rRef = <device IOBS @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
        device IOBS  ( symbol logsym_n0 )  *strVar  @[gsx+440 +1200*d_tx, gsy+200];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    foreach dx (iobss_n_1)
    {
        d_tx = dx / 6;
        
        rRef = <device IOBS @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
        device IOBS  ( symbol logsym_n1 )  *strVar  @[gsx+560 +1200*d_tx, gsy+200];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    dy = 0;
    d_tx = 8;
    for ( dt = 0; dt < 8; dt += 1 )
    {
        dx = 43 + dt;
        
        rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
        device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+590 + 1200*d_tx, gsy+410 + 10*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    dy = 1;
    d_tx = 8;
    for ( dt = 0; dt < 9; dt += 1 )
    {
        dx = 42 + dt;
        
        rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
        device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+605 + 1200*d_tx, gsy+400 + 10*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    d_tx = 7;
    rRef = <device BKCL @[lsx+42, lsy] of ARCHITECTURE>;
    sprintf(strVar, "BKCL_%d_%d", lsx+42, lsy);
    device BKCL  ( symbol logsym )  *strVar  @[gsx+1100 + 1200*d_tx, gsy];
    map
    (
         <instance *strVar>   => rRef
    );
    
} // end of function draw_iobt_tile


/**VFunction******************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_iobb tile]

*****************************************************************************************/
function draw_iobb_tile
(
    unsigned int tx,
    unsigned int ty,
    unsigned int flag
)
{
    unsigned int lsx, lsy, gsx, gsy;
    unsigned int dt, dx, dy, d_tx;
    
    // iob3_2k_tile
    unsigned int iobss_p3_0[] = { 0, 6, 12, 18 };
    unsigned int iobss_n3_0[] = { 1, 7, 13, 19 };
    unsigned int iobss_p3_1[] = { 2, 8, 14, 20 };
    unsigned int iobss_n3_1[] = { 3, 9, 15, 21 };
    
    // iob4_2k_tile
    unsigned int iobss_p4_0[] = { 0, 6, 24, 30 };
    unsigned int iobss_n4_0[] = { 1, 7, 25, 31 };
    unsigned int iobss_p4_1[] = { 2, 8, 26, 32 };
    unsigned int iobss_n4_1[] = { 3, 9, 27, 33 };
    
    // iob5_2k_tile
    unsigned int iobss_p5_0[] = { 0, 6, 12, 18, 24 };
    unsigned int iobss_n5_0[] = { 1, 7, 13, 19, 25 };
    unsigned int iobss_p5_1[] = { 2, 8, 14, 20, 26 };
    unsigned int iobss_n5_1[] = { 3, 9, 15, 21, 27 };
    
    // device reference variables
    &device rRef;
    string strVar;
    
    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
    if ( flag == 0 )        // iob3_2k_tile
    {
        dy = 0;
        gsy += 1;   // debug
        foreach dx (iobss_p3_0)
        {
            d_tx = dx / 6;
            
            rRef = <device IOBS @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
            device IOBS  ( symbol logsym_s0 )  *strVar  @[gsx+200 +1200*d_tx, gsy+900];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        foreach dx (iobss_n3_0)
        {
            d_tx = dx / 6;
            
            rRef = <device IOBS @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
            device IOBS  ( symbol logsym_s1 )  *strVar  @[gsx+320 +1200*d_tx, gsy+900];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        foreach dx (iobss_p3_1)
        {
            d_tx = dx / 6;
            
            rRef = <device IOBS @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
            device IOBS  ( symbol logsym_s0 )  *strVar  @[gsx+440 +1200*d_tx, gsy+900];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        foreach dx (iobss_n3_1)
        {
            d_tx = dx / 6;
            
            rRef = <device IOBS @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
            device IOBS  ( symbol logsym_s1 )  *strVar  @[gsx+560 +1200*d_tx, gsy+900];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        gsy -= 1;   // debug
        
        d_tx = 3;
        rRef = <device PGC_BUFFERX1 @[lsx+23, lsy] of ARCHITECTURE>;
        sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+23, lsy);
        device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+590 + 1200*d_tx, gsy+420];
        map
        (
             <instance *strVar>   => rRef
        );
        
        d_tx = 1;
        rRef = <device BKCL @[lsx+11, lsy] of ARCHITECTURE>;
        sprintf(strVar, "BKCL_%d_%d", lsx+11, lsy);
        device BKCL  ( symbol logsym )  *strVar  @[gsx+1100 + 1200*d_tx, gsy+1100];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    else if ( flag == 1 )   // iob4_2k_tile
    {
        dy = 0;
        gsy += 1;   // debug
        foreach dx (iobss_p4_0)
        {
            d_tx = dx / 6;
            
            rRef = <device IOBS @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
            device IOBS  ( symbol logsym_s0 )  *strVar  @[gsx+200 +1200*d_tx, gsy+900];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        foreach dx (iobss_n4_0)
        {
            d_tx = dx / 6;
            
            rRef = <device IOBS @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
            device IOBS  ( symbol logsym_s1 )  *strVar  @[gsx+320 +1200*d_tx, gsy+900];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        foreach dx (iobss_p4_1)
        {
            d_tx = dx / 6;
            
            rRef = <device IOBS @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
            device IOBS  ( symbol logsym_s0 )  *strVar  @[gsx+440 +1200*d_tx, gsy+900];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        foreach dx (iobss_n4_1)
        {
            d_tx = dx / 6;
            
            rRef = <device IOBS @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
            device IOBS  ( symbol logsym_s1 )  *strVar  @[gsx+560 +1200*d_tx, gsy+900];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        gsy -= 1;   // debug
        
        dy = 0;
        d_tx = 3;
        for ( dt = 0; dt < 8; dt += 1 )
        {
            dx = 13 + dt;
            
            rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
            device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+590 + 1200*d_tx, gsy+400 + 10*dt];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        
        d_tx = 3;
        rRef = <device PGC_BUFFERX1 @[lsx+21, lsy] of ARCHITECTURE>;
        sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+21, lsy);
        device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+590 + 1200*d_tx, gsy+480];
        map
        (
             <instance *strVar>   => rRef
        );
        
        d_tx = 2;
        rRef = <device BKCL @[lsx+12, lsy] of ARCHITECTURE>;
        sprintf(strVar, "BKCL_%d_%d", lsx+12, lsy);
        device BKCL  ( symbol logsym )  *strVar  @[gsx+1100 + 1200*d_tx, gsy+1100];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    else                    // iob5_2k_tile
    {
        dy = 0;
        gsy += 1;   // debug
        foreach dx (iobss_p5_0)
        {
            d_tx = dx / 6;
            
            rRef = <device IOBS @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
            device IOBS  ( symbol logsym_s0 )  *strVar  @[gsx+200 +1200*d_tx, gsy+900];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        foreach dx (iobss_n5_0)
        {
            d_tx = dx / 6;
            
            rRef = <device IOBS @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
            device IOBS  ( symbol logsym_s1 )  *strVar  @[gsx+320 +1200*d_tx, gsy+900];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        foreach dx (iobss_p5_1)
        {
            d_tx = dx / 6;
            
            rRef = <device IOBS @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
            device IOBS  ( symbol logsym_s0 )  *strVar  @[gsx+440 +1200*d_tx, gsy+900];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        foreach dx (iobss_n5_1)
        {
            d_tx = dx / 6;
            
            rRef = <device IOBS @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
            device IOBS  ( symbol logsym_s1 )  *strVar  @[gsx+560 +1200*d_tx, gsy+900];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        gsy -= 1;   // debug
        
        dy = 1;
        d_tx = 1;
        for ( dt = 0; dt < 8; dt += 1 )
        {
            dx = dt;
            
            rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
            device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+605 + 1200*d_tx, gsy+400 + 10*dt];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
        
        d_tx = 1;
        rRef = <device PGC_BUFFERX1 @[lsx+8, lsy+1] of ARCHITECTURE>;
        sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+8, lsy+1);
        device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+605 + 1200*d_tx, gsy+480];
        map
        (
             <instance *strVar>   => rRef
        );
        
        d_tx = 2;
        rRef = <device BKCL @[lsx+17, lsy] of ARCHITECTURE>;
        sprintf(strVar, "BKCL_%d_%d", lsx+17, lsy);
        device BKCL  ( symbol logsym )  *strVar  @[gsx+1100 + 1200*d_tx, gsy+1100];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
} // end of function draw_iobb_tile

};










