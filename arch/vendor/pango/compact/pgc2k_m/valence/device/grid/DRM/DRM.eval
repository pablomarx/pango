tarted
grid
device DRM
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config bit CP_CSA_POL[2:0] = 3'b000,
        config bit CP_CSB_POL[2:0] = 3'b000,
        config bit CP_MASK = 1'b0,
        config string CP_DRM_CAS = "FALSE",
        config string CP_GRS_DIS = "FALSE",
        config int CP_DATA_WIDTH_A = 9,
        config int CP_DATA_WIDTH_B = 9,
        config string CP_WRITE_MODE_A = "NORMAL_WRITE",
        config string CP_WRITE_MODE_B = "NORMAL_WRITE",
        config string CP_OUTPUT_REG_A = "DISABLE",
        config string CP_OUTPUT_REG_B = "DISABLE",
        config string CP_RESET_TYPE = "SYNC_RESET",
        config string CP_CLKA_OR_POL_INV = "FALSE",
        config string CP_CLKB_OR_POL_INV = "FALSE",
        config bit CP_SRVAL_A[8:0] = 9'b000000000,
        config bit CP_SRVAL_B[8:0] = 9'b000000000,
        config bit CP_INIT_00[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_01[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_02[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_03[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_04[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_05[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_06[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_07[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_08[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_09[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_0A[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_0B[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_0C[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_0D[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_0E[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_0F[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_10[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_11[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_12[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_13[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_14[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_15[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_16[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_17[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_18[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_19[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_1A[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_1B[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_1C[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_1D[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_1E[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_1F[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config string CP_DRM_EN = "FALSE",
        config string CP_PICEA = "FALSE",
        config string CP_PICEB = "FALSE",
        config string CP_PIWEA = "FALSE",
        config string CP_PIWEB = "FALSE",
        config string CP_PIOCEA = "FALSE",
        config string CP_PIOCEB = "FALSE",
        config string CP_PICLKA = "FALSE",
        config string CP_PICLKB = "FALSE",
        config string CP_PIRSTA = "FALSE",
        config string CP_PIRSTB = "FALSE",
        config string CP_PIBELA = "FALSE",
        config string CP_PIBEHA = "FALSE",
        config string CP_BELA_SET = "FALSE",
        config string CP_BEHA_SET = "FALSE",
        config string CP_FIFO_EN = "FALSE",
        config bit CP_ALMOST_FULL_OFFSET[12:0] = 13'b0000000000000,
        config bit CP_ALMOST_EMPTY_OFFSET[12:0] = 13'b0000000000000,
        config string CP_SYNC_FIFO = "FALSE",
        config string CP_FLAGEMPTY_EN = "FALSE",
        config string CP_FLAGFULL_EN = "FALSE"
    );
    port
    (
// configuration_body_def_on


    config input SC_AF_OFFSET[12:0] = 13'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_AF_OFFSET[12],SC_AF_OFFSET[11],SC_AF_OFFSET[10],SC_AF_OFFSET[9],SC_AF_OFFSET[8],SC_AF_OFFSET[7],SC_AF_OFFSET[6],SC_AF_OFFSET[5],SC_AF_OFFSET[4],SC_AF_OFFSET[3],SC_AF_OFFSET[2],SC_AF_OFFSET[1],SC_AF_OFFSET[0]" */,

    config input SC_AE_OFFSET[12:0] = 13'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_AE_OFFSET[12],SC_AE_OFFSET[11],SC_AE_OFFSET[10],SC_AE_OFFSET[9],SC_AE_OFFSET[8],SC_AE_OFFSET[7],SC_AE_OFFSET[6],SC_AE_OFFSET[5],SC_AE_OFFSET[4],SC_AE_OFFSET[3],SC_AE_OFFSET[2],SC_AE_OFFSET[1],SC_AE_OFFSET[0]" */,

    config input SC_FIFO_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FIFO_EN" */,

    config input SC_SYNC_FIFO = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SYNC_FIFO" */,

    config input SC_FLAGEMPTY_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FLAGEMPTY_EN" */,

    config input SC_FLAGFULL_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FLAGFULL_EN" */,

    config input SC_DRM_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DRM_EN" */,

    config input SC_DRM_CAS = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DRM_CAS" */,

    config input SC_PICSA[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICSA[2],SC_PICSA[1],SC_PICSA[0]" */,

    config input SC_PICSB[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICSB[2],SC_PICSB[1],SC_PICSB[0]" */,

    config input SC_OREA = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_OREA" */,

    config input SC_OREB = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_OREB" */,

    config input SC_CKQA_INV = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CKQA_INV" */,

    config input SC_CKQB_INV = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CKQB_INV" */,

    config input SC_PICEA = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICEA" */,

    config input SC_PICEB = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICEB" */,

    config input SC_PIWEA = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIWEA" */,

    config input SC_PIWEB = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIWEB" */,

    config input SC_PIOCEA = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIOCEA" */,

    config input SC_PIOCEB = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIOCEB" */,

    config input SC_PICLKA = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICLKA" */,

    config input SC_PICLKB = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICLKB" */,

    config input SC_PIRSTA = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIRSTA" */,

    config input SC_PIRSTB = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIRSTB" */,

    config input SC_PIBELA = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIBELA" */,

    config input SC_PIBEHA = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIBEHA" */,

    config input SC_BELA_SET = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_BELA_SET" */,

    config input SC_BEHA_SET = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_BEHA_SET" */,

    config input SC_TWA = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TWA" */,

    config input SC_RBWA = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RBWA" */,

    config input SC_TWB = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TWB" */,

    config input SC_RBWB = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RBWB" */,

    config input SC_GRS_DIS = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GRS_DIS" */,

    config input SC_RESET_TYPE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RESET_TYPE" */,

    config input SC_DWA[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DWA[3],SC_DWA[2],SC_DWA[1],SC_DWA[0]" */,

    config input SC_DWB[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DWB[3],SC_DWB[2],SC_DWB[1],SC_DWB[0]" */,

    config input SC_SAE_DEL[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SAE_DEL[3],SC_SAE_DEL[2],SC_SAE_DEL[1],SC_SAE_DEL[0]" */,

    config input SC_SAE_PW[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SAE_PW[3],SC_SAE_PW[2],SC_SAE_PW[1],SC_SAE_PW[0]" */,

    config input SC_WR_PW[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_WR_PW[3],SC_WR_PW[2],SC_WR_PW[1],SC_WR_PW[0]" */,

    config input SC_RD_PW[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RD_PW[3],SC_RD_PW[2],SC_RD_PW[1],SC_RD_PW[0]" */,

    config input SC_MASK = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MASK" */,

    config input SC_SRVAL_A[8:0] = 9'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SRVAL_A[8],SC_SRVAL_A[7],SC_SRVAL_A[6],SC_SRVAL_A[5],SC_SRVAL_A[4],SC_SRVAL_A[3],SC_SRVAL_A[2],SC_SRVAL_A[1],SC_SRVAL_A[0]" */,

    config input SC_SRVAL_B[8:0] = 9'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SRVAL_B[8],SC_SRVAL_B[7],SC_SRVAL_B[6],SC_SRVAL_B[5],SC_SRVAL_B[4],SC_SRVAL_B[3],SC_SRVAL_B[2],SC_SRVAL_B[1],SC_SRVAL_B[0]" */,

// configuration_body_def_end

        input ADA[12:0] = 13'b1111_1111_1111_1,
        input DA[8:0] = 9'b1111_1111_1,
        input CSA[2:0] = 3'b111,
        input ADB[12:0] = 13'b1111_1111_1111_1,
        input DB[8:0] = 9'b1111_1111_1,
        input CSB[2:0] = 3'b111,
        input ADA_CAS = 1'b1,
        input ADSA = 1'b1,
        input WEA = 1'b1,
        input CLKA = 1'b1,
        input CEA = 1'b1,
        input OCEA = 1'b1,
        input RSTA = 1'b1,
        input ADB_CAS = 1'b1,
        input ADSB = 1'b1,
        input WEB = 1'b1,
        input CLKB = 1'b1,
        input CEB = 1'b1,
        input OCEB = 1'b1,
        input RSTB = 1'b1,
        input X1CASQI_A = 1'b1,
        input X1CASQI_B = 1'b1,
        input TEST_MODE_N = 1'b1,
        input TEST_RST_N = 1'b1,
        input TEST_SE_N = 1'b1,
        input TEST_SI = 1'b1,
        output QA[8:0],
        output QB[8:0],
        output WCNT[12:0],
        output RCNT[12:0],
        output X1CASQO_A,
        output X1CASQO_B,
        output EMPTY,
        output FULL,
        output ALMOST_EMPTY,
        output ALMOST_FULL,
        output TEST_SO
    );
};
//grid device end

//grid device structure netlist started
structure netlist of DRM
{

};
//grid device structure netlist end

//grid device configure body started

configuration cfg of DRM
{

 // assign config body begin
    SC_SAE_DEL  :=  4'b0000;
    SC_SAE_PW   :=  4'b0000;
    SC_RD_PW    :=  4'b0000;
    SC_MASK   :=  CP_MASK;
    SC_PICSA  :=  CP_CSA_POL;
    SC_PICSB  :=  CP_CSB_POL;
    SC_AF_OFFSET  :=  CP_ALMOST_FULL_OFFSET;
    SC_AE_OFFSET  :=  CP_ALMOST_EMPTY_OFFSET;
    SC_SRVAL_A   :=  CP_SRVAL_A;
    SC_SRVAL_B   :=  CP_SRVAL_B;
// assign config body end

//initial config body0 begin
    if ((CP_WRITE_MODE_A == "READ_BEFORE_WRITE") && (CP_WRITE_MODE_B == "READ_BEFORE_WRITE"))
    {
        SC_WR_PW  :=  4'b1000;
    }
    else
    {
        SC_WR_PW  :=  4'b0000;
    }

//initial config body0 end


//initial config body1 begin
    if (CP_DRM_EN == "TRUE")
    {
        SC_DRM_EN  :=  1'b1;
    }
    else if (CP_DRM_EN == "FALSE")
    {
        SC_DRM_EN  :=  1'b0;
    }
    else
    {
        SC_DRM_EN  :=  1'bx;
        error("9K mode EN(%s) is invalid!",CP_DRM_EN);
    }

//initial config body1 end


//initial config body2 begin
    if (CP_DRM_CAS == "TRUE")
    {
        SC_DRM_CAS  :=  1'b1;
    }
    else if (CP_DRM_CAS == "FALSE")
    {
        SC_DRM_CAS  :=  1'b0;
    }
    else
    {
        SC_DRM_CAS  :=  1'bx;
        error("9K mode EN(%s) is invalid!",CP_DRM_CAS);
    }

//initial config body2 end


//initial config body3 begin
    if (CP_FIFO_EN == "TRUE")
    {
        SC_FIFO_EN  :=  1'b1;
    }
    else if (CP_FIFO_EN == "FALSE")
    {
        SC_FIFO_EN  :=  1'b0;
    }
    else
    {
        SC_FIFO_EN  :=  1'bx;
        error("FIFO EN(%s) is invalid!",CP_FIFO_EN);
    }

//initial config body3 end


//initial config body4 begin
    if (CP_FLAGEMPTY_EN == "TRUE")
    {
        SC_FLAGEMPTY_EN  :=  1'b1;
    }
    else if (CP_FLAGEMPTY_EN == "FALSE")
    {
        SC_FLAGEMPTY_EN  :=  1'b0;
    }
    else
    {
        SC_FLAGEMPTY_EN  :=  1'bx;
        error("FLAGEMPTY EN(%s) is invalid!",CP_FLAGEMPTY_EN);
    }

//initial config body4 end


//initial config body5 begin
    if (CP_FLAGFULL_EN == "TRUE")
    {
        SC_FLAGFULL_EN  :=  1'b1;
    }
    else if (CP_FLAGFULL_EN == "FALSE")
    {
        SC_FLAGFULL_EN  :=  1'b0;
    }
    else
    {
        SC_FLAGFULL_EN  :=  1'bx;
        error("FLAGFULL EN(%s) is invalid!",CP_FLAGFULL_EN);
    }

//initial config body5 end


//initial config body6 begin
    if (CP_SYNC_FIFO == "TRUE")
    {
        SC_SYNC_FIFO  :=  1'b1;
    }
    else if (CP_SYNC_FIFO == "FALSE")
    {
        SC_SYNC_FIFO  :=  1'b0;
    }
    else
    {
        SC_SYNC_FIFO  :=  1'bx;
        error("SYNC FIFO SETTING(%s) is invalid!",CP_SYNC_FIFO);
    }

//initial config body6 end


//initial config body7 begin
    if (CP_DATA_WIDTH_A == 16 || CP_DATA_WIDTH_A == 18)
    {
        SC_DWA  :=  4'b1000;
    }
    else if (CP_DATA_WIDTH_A == 8 || CP_DATA_WIDTH_A == 9)
    {
        SC_DWA  :=  4'b0000;
    }
    else if (CP_DATA_WIDTH_A == 4)
    {
        SC_DWA  :=  4'b0100;
    }
    else if (CP_DATA_WIDTH_A == 2)
    {
        SC_DWA  :=  4'b0110;
    }
    else if (CP_DATA_WIDTH_A == 1)
    {
        SC_DWA  :=  4'b0111;
    }
    else
    {
        SC_DWA  :=  4'b0000;
        error("DATA WIDTH(%s) is invalid!",CP_DATA_WIDTH_A);
    }

//initial config body7 end


//initial config body8 begin
    if (CP_DATA_WIDTH_B == 16 || CP_DATA_WIDTH_B == 18)
    {
        SC_DWB  :=  4'b1000;
    }
    else if (CP_DATA_WIDTH_B == 8 || CP_DATA_WIDTH_B == 9)
    {
        SC_DWB  :=  4'b0000;
    }
    else if (CP_DATA_WIDTH_B == 4)
    {
        SC_DWB  :=  4'b0100;
    }
    else if (CP_DATA_WIDTH_B == 2)
    {
        SC_DWB  :=  4'b0110;
    }
    else if (CP_DATA_WIDTH_B == 1)
    {
        SC_DWB  :=  4'b0111;
    }
    else
    {
        SC_DWB  :=  4'b0000;
        error("DATA WIDTH(%s) is invalid!",CP_DATA_WIDTH_B);
    }

//initial config body8 end


//initial config body9 begin
    if (CP_WRITE_MODE_A == "NORMAL_WRITE")
    {
        SC_TWA  :=  1'b0;
        SC_RBWA  :=  1'b0;
    }
    else if (CP_WRITE_MODE_A == "TRANSPARENT_WRITE")
    {
        SC_TWA  :=  1'b1;
        SC_RBWA  :=  1'b0;
    }
    else if (CP_WRITE_MODE_A == "READ_BEFORE_WRITE")
    {
        SC_TWA  :=  1'b0;
        SC_RBWA  :=  1'b1;
    }
    else
    {
        SC_TWA  :=  1'b0;
        SC_RBWA  :=  1'b0;
        error("WRITE MODE A(%s) is invalid!",CP_WRITE_MODE_A);
    }

//initial config body9 end


//initial config body10 begin
    if (CP_WRITE_MODE_B == "NORMAL_WRITE")
    {
        SC_TWB  :=  1'b0;
        SC_RBWB  :=  1'b0;
    }
    else if (CP_WRITE_MODE_B == "TRANSPARENT_WRITE")
    {
        SC_TWB  :=  1'b1;
        SC_RBWB  :=  1'b0;
    }
    else if (CP_WRITE_MODE_B == "READ_BEFORE_WRITE")
    {
        SC_TWB  :=  1'b0;
        SC_RBWB  :=  1'b1;
    }
    else
    {
        SC_TWB  :=  1'b0;
        SC_RBWB  :=  1'b0;
        error("WRITE MODE B(%s) is invalid!",CP_WRITE_MODE_B);
    }

//initial config body10 end


//initial config body11 begin
    if (CP_OUTPUT_REG_A == "ENABLE")
    {
        SC_OREA  :=  1'b1;
    }
    else if (CP_OUTPUT_REG_A == "DISABLE")
    {
        SC_OREA  :=  1'b0;
    }
    else
    {
        SC_OREA  :=  1'bx;
        error("OUTPUT REG(%s) is invalid!",CP_OUTPUT_REG_A);
    }

//initial config body11 end


//initial config body12 begin
    if (CP_OUTPUT_REG_B == "ENABLE")
    {
        SC_OREB  :=  1'b1;
    }
    else if (CP_OUTPUT_REG_B == "DISABLE")
    {
        SC_OREB  :=  1'b0;
    }
    else
    {
        SC_OREB  :=  1'bx;
        error("OUTPUT REG(%s) is invalid!",CP_OUTPUT_REG_B);
    }

//initial config body12 end


//initial config body13 begin
    if (CP_RESET_TYPE == "ASYNC_RESET")
    {
        SC_RESET_TYPE  :=  1'b1;
    }
    else if (CP_RESET_TYPE == "SYNC_RESET")
    {
        SC_RESET_TYPE  :=  1'b0;
    }
    else
    {
        SC_RESET_TYPE  :=  1'bx;
        error("RESET TYPE(%s) is invalid!",CP_RESET_TYPE);
    }

//initial config body13 end


//initial config body14 begin
    if (CP_CLKA_OR_POL_INV == "TRUE")
    {
        SC_CKQA_INV  :=  1'b1;
    }
    else if (CP_CLKA_OR_POL_INV == "FALSE")
    {
        SC_CKQA_INV  :=  1'b0;
    }
    else
    {
        SC_CKQA_INV  :=  1'bx;
        error("CLKA OR POL INV(%s) is invalid!",CP_CLKA_OR_POL_INV);
    }

//initial config body14 end


//initial config body15 begin
    if (CP_CLKB_OR_POL_INV == "TRUE")
    {
        SC_CKQB_INV  :=  1'b1;
    }
    else if (CP_CLKB_OR_POL_INV == "FALSE")
    {
        SC_CKQB_INV  :=  1'b0;
    }
    else
    {
        SC_CKQB_INV  :=  1'bx;
        error("CLKB OR POL INV(%s) is invalid!",CP_CLKB_OR_POL_INV);
    }

//initial config body15 end


//initial config body16 begin
    if (CP_PICEA == "TRUE")
    {
        SC_PICEA  :=  1'b1;
    }
    else if (CP_PICEA == "FALSE")
    {
        SC_PICEA  :=  1'b0;
    }
    else
    {
        SC_PICEA  :=  1'bx;
        error("PICEA(%s) is invalid!",CP_PICEA);
    }

//initial config body16 end


//initial config body17 begin
    if (CP_PICEB == "TRUE")
    {
        SC_PICEB  :=  1'b1;
    }
    else if (CP_PICEB == "FALSE")
    {
        SC_PICEB  :=  1'b0;
    }
    else
    {
        SC_PICEB  :=  1'bx;
        error("PICEB(%s) is invalid!",CP_PICEB);
    }

//initial config body17 end


//initial config body18 begin
    if (CP_PIWEA == "TRUE")
    {
        SC_PIWEA  :=  1'b1;
    }
    else if (CP_PIWEA == "FALSE")
    {
        SC_PIWEA  :=  1'b0;
    }
    else
    {
        SC_PIWEA  :=  1'bx;
        error("PIWEA(%s) is invalid!",CP_PIWEA);
    }

//initial config body18 end


//initial config body19 begin
    if (CP_PIWEB == "TRUE")
    {
        SC_PIWEB  :=  1'b1;
    }
    else if (CP_PIWEB == "FALSE")
    {
        SC_PIWEB  :=  1'b0;
    }
    else
    {
        SC_PIWEB  :=  1'bx;
        error("PIWEB(%s) is invalid!",CP_PIWEB);
    }

//initial config body19 end


//initial config body20 begin
    if (CP_PIOCEA == "TRUE")
    {
        SC_PIOCEA  :=  1'b1;
    }
    else if (CP_PIOCEA == "FALSE")
    {
        SC_PIOCEA  :=  1'b0;
    }
    else
    {
        SC_PIOCEA  :=  1'bx;
        error("PIOCEA(%s) is invalid!",CP_PIOCEA);
    }

//initial config body20 end


//initial config body21 begin
    if (CP_PIOCEB == "TRUE")
    {
        SC_PIOCEB  :=  1'b1;
    }
    else if (CP_PIOCEB == "FALSE")
    {
        SC_PIOCEB  :=  1'b0;
    }
    else
    {
        SC_PIOCEB  :=  1'bx;
        error("PIOCEB(%s) is invalid!",CP_PIOCEB);
    }

//initial config body21 end


//initial config body22 begin
    if (CP_PICLKA == "TRUE")
    {
        SC_PICLKA  :=  1'b1;
    }
    else if (CP_PICLKA == "FALSE")
    {
        SC_PICLKA  :=  1'b0;
    }
    else
    {
        SC_PICLKA  :=  1'bx;
        error("PICLKA(%s) is invalid!",CP_PICLKA);
    }

//initial config body22 end


//initial config body23 begin
    if (CP_PICLKB == "TRUE")
    {
        SC_PICLKB  :=  1'b1;
    }
    else if (CP_PICLKB == "FALSE")
    {
        SC_PICLKB  :=  1'b0;
    }
    else
    {
        SC_PICLKB  :=  1'bx;
        error("PICLKB(%s) is invalid!",CP_PICLKB);
    }

//initial config body23 end


//initial config body24 begin
    if (CP_PIRSTA == "TRUE")
    {
        SC_PIRSTA  :=  1'b1;
    }
    else if (CP_PIRSTA == "FALSE")
    {
        SC_PIRSTA  :=  1'b0;
    }
    else
    {
        SC_PIRSTA  :=  1'bx;
        error("PIRSTA(%s) is invalid!",CP_PIRSTA);
    }

//initial config body24 end


//initial config body25 begin
    if (CP_PIRSTB == "TRUE")
    {
        SC_PIRSTB  :=  1'b1;
    }
    else if (CP_PIRSTB == "FALSE")
    {
        SC_PIRSTB  :=  1'b0;
    }
    else
    {
        SC_PIRSTB  :=  1'bx;
        error("PIRSTB(%s) is invalid!",CP_PIRSTB);
    }

//initial config body25 end


//initial config body26 begin
    if (CP_PIBELA == "TRUE")
    {
        if(CP_DATA_WIDTH_A<16)
        {
            error("PIBELA(%s) is invalid!",CP_PIBELA);
        }
        else
        {
            SC_PIBELA  :=  1'b1;
        }

    }
    else if (CP_PIBELA == "FALSE")
    {
        SC_PIBELA  :=  1'b0;
    }
    else
    {
        SC_PIBELA  :=  1'bx;
        error("PIBELA(%s) is invalid!",CP_PIBELA);
    }

//initial config body26 end


//initial config body27 begin
    if (CP_PIBEHA == "TRUE")
    {
        if(CP_DATA_WIDTH_A<16)
        {
            error("PIBEHA(%s) is invalid!",CP_PIBEHA);
        }
        else
        {
            SC_PIBEHA  :=  1'b1;
        }

    }
    else if (CP_PIBEHA == "FALSE")
    {
        SC_PIBEHA  :=  1'b0;
    }
    else
    {
        SC_PIBEHA  :=  1'bx;
        error("PIBEHA(%s) is invalid!",CP_PIBEHA);
    }

//initial config body27 end


//initial config body28 begin
    if (CP_BEHA_SET == "TRUE")
    {
        if(CP_DATA_WIDTH_A<16)
        {
            error("BEHA_SET(%s) is invalid!",CP_BEHA_SET);
        }
        else
        {
            SC_BEHA_SET  :=  1'b1;
        }

    }
    else if (CP_BEHA_SET == "FALSE")
    {
        SC_BEHA_SET  :=  1'b0;
    }
    else
    {
        SC_BEHA_SET  :=  1'bx;
        error("BEHA_SET(%s) is invalid!",CP_BEHA_SET);
    }

//initial config body28 end


//initial config body29 begin
    if (CP_BELA_SET == "TRUE")
    {
        if(CP_DATA_WIDTH_A<16)
        {
            error("BELA_SET(%s) is invalid!",CP_BELA_SET);
        }
        else
        {
            SC_BELA_SET  :=  1'b1;
        }

    }
    else if (CP_BELA_SET == "FALSE")
    {
        SC_BELA_SET  :=  1'b0;
    }
    else
    {
        SC_BELA_SET  :=  1'bx;
        error("BELA_SET(%s) is invalid!",CP_BELA_SET);
    }

//initial config body29 end


//initial config body30 begin
    if (CP_GRS_DIS == "TRUE")
    {
        SC_GRS_DIS  :=  1'b1;
    }
    else if (CP_GRS_DIS == "FALSE")
    {
        SC_GRS_DIS  :=  1'b0;
    }
    else
    {
        SC_GRS_DIS  :=  1'bx;
        error("GRS_DIS(%s) is invalid!",CP_GRS_DIS);
    }

//initial config body30 end

};

//grid device configure body end


timing drm_tnl of DRM
{
    //config string CP_PIBELA = "FALSE",
    //config string CP_PIBEHA = "FALSE",
    //config string CP_BELA_SET = "FALSE",
    //config string CP_BEHA_SET = "FALSE",
        
    wire ntCLKA, ntCLKB, ntCEA, ntCEB, ntWEA, ntWEB;
    wire ntOCEA, ntOCEB, ntRSTA, ntRSTB;
    wire ntBWEAH_N, ntBWEAL_N;

    if (CP_PIBELA == "TRUE")
    {
        operator V_INV BELA_INV
            port map 
            (
                 I => ADA[0],
                 Z => ntBWEAL_N
            );
    }
    if (CP_PIBEHA == "TRUE")
    {
        operator V_INV BEHA_INV
            port map 
            (
                 I => ADA[1],
                 Z => ntBWEAH_N
            );
    }

    // CLKA AND CLKB
    if (CP_PICLKA == "TRUE")
    {
        operator V_INV CLKA_INV
            port map 
            (
                 I => CLKA,
                 Z => ntCLKA
            );
    }
    else if (CP_PICLKA == "FALSE")
    {
        ntCLKA <= CLKA;
    }

    if (CP_PICLKB == "TRUE")
    {
        operator V_INV CLKB_INV
            port map 
            (
                 I => CLKB,
                 Z => ntCLKB
            );
    }
    else if (CP_PICLKB == "FALSE")
    {
        ntCLKB <= CLKB;
    }
    
    // CEA AND CEB
    if (CP_PICEA == "TRUE")
    {
        operator V_INV CEA_INV
            port map 
            (
                 I => CEA,
                 Z => ntCEA
            );
    }
    else if (CP_PICEA == "FALSE")
    {
        ntCEA <= CEA;
    }

    if (CP_PICEB == "TRUE")
    {
        operator V_INV CEB_INV
            port map 
            (
                 I => CEB,
                 Z => ntCEB
            );
    }
    else if (CP_PICEB == "FALSE")
    {
        ntCEB <= CEB;
    }
    
    // WEA AND WEB
    if (CP_PIWEA == "TRUE")
    {
        operator V_INV WEA_INV
            port map 
            (
                 I => WEA,
                 Z => ntWEA
            );
    }
    else if (CP_PIWEA == "FALSE")
    {
        ntWEA <= WEA;
    }

    if (CP_PIWEB == "TRUE")
    {
        operator V_INV WEB_INV
            port map 
            (
                 I => WEB,
                 Z => ntWEB
            );
    }
    else if (CP_PIWEB == "FALSE")
    {
        ntWEB <= WEB;
    }
    
    // OCEA AND OCEB
    if (CP_PIOCEA == "TRUE")
    {
        operator V_INV OCEA_INV
            port map 
            (
                 I => OCEA,
                 Z => ntOCEA
            );
    }
    else if (CP_PIOCEA == "FALSE")
    {
        ntOCEA <= OCEA;
    }

    if (CP_PIOCEB == "TRUE")
    {
        operator V_INV OCEB_INV
            port map 
            (
                 I => OCEB,
                 Z => ntOCEB
            );
    }
    else if (CP_PIOCEB == "FALSE")
    {
        ntOCEB <= OCEB;
    }
    
    // RSTA AND RSTB
    if (CP_PIRSTA == "TRUE")
    {
        operator V_INV RSTA_INV
            port map 
            (
                 I => RSTA,
                 Z => ntRSTA
            );
    }
    else if (CP_PIRSTA == "FALSE")
    {
        ntRSTA <= RSTA;
    }

    if (CP_PIRSTB == "TRUE")
    {
        operator V_INV RSTB_INV
            port map 
            (
                 I => RSTB,
                 Z => ntRSTB
            );
    }
    else if (CP_PIRSTB == "FALSE")
    {
        ntRSTB <= RSTB;
    }
        
    if (CP_FIFO_EN == "TRUE")
    {
        wire nt_DI_floating[8:0];
        wire nt_DO_floating[8:0];

        operator V_FIFO9K V_FIFO9K
            parameter map
            (
                DO_REG              => (CP_OUTPUT_REG_B == "ENABLE") ? 1 : 0,
                USE_FULL            => (CP_FLAGFULL_EN  == "TRUE"  ) ? 1 : 0,
                USE_EMPTY           => (CP_FLAGEMPTY_EN == "TRUE"  ) ? 1 : 0,

                SYNC_FIFO           =>  CP_SYNC_FIFO           ,
                ALMOST_EMPTY_OFFSET =>  CP_ALMOST_EMPTY_OFFSET ,
                ALMOST_FULL_OFFSET  =>  CP_ALMOST_FULL_OFFSET  ,
                DATA_WIDTH          =>  CP_DATA_WIDTH_A        ,
                //DATA_WIDTH        =>  CP_DATA_WIDTH_B      ,
                GRS_EN              => (CP_GRS_DIS == "TRUE") ? "FALSE" : "TRUE"
            )
            port map
            (
                DI[8:0]      =>  DA          ,
                DI[17:9]     => (CP_DATA_WIDTH_A < 16) ? nt_DI_floating : DB,
                WCLK         =>  ntCLKA        ,
                WCE          =>  ntCEA         ,
                RST          =>  ntRSTA        ,
                RCLK         =>  ntCLKB        ,
                RCE          =>  ntCEB         ,
                ORCE         =>  ntOCEB        ,
                //RST          =>  ntRSTB        ,

                DO[8:0]      => (CP_DATA_WIDTH_A < 16) ? QB : QA ,
                DO[17:9]     => (CP_DATA_WIDTH_A < 16) ? nt_DO_floating : QB ,
                EMPTY        =>  EMPTY       ,
                FULL         =>  FULL        ,
                ALMOST_EMPTY =>  ALMOST_EMPTY,
                ALMOST_FULL  =>  ALMOST_FULL ,
                WCNT         =>  WCNT        ,
                RCNT         =>  RCNT        
            );
    }
    else
    {
        operator V_DRM9K_E1 V_DRM9K_E1
            parameter map
            (
            
                RSTA_VAL       =>  CP_SRVAL_A,
                RSTB_VAL       =>  CP_SRVAL_B,
                RAM_CASCADE    => (CP_DRM_CAS == "TRUE" ) ? "UPPER" : 
                                  (CP_DRM_CAS == "FALSE") ? "NONE"  : "", // "NONE" "LOWER" is same.
                CSA_MASK       => (CP_CSA_POL == 3'h7) ? 3'b000 :
                                  (CP_CSA_POL == 3'h6) ? 3'b001 :
                                  (CP_CSA_POL == 3'h5) ? 3'b010 :
                                  (CP_CSA_POL == 3'h4) ? 3'b011 :
                                  (CP_CSA_POL == 3'h3) ? 3'b100 :
                                  (CP_CSA_POL == 3'h2) ? 3'b101 :
                                  (CP_CSA_POL == 3'h1) ? 3'b110 :
                                /*(CP_CSA_POL == 3'h0) ?*/ 3'b111 ,
                CSB_MASK       => (CP_CSB_POL == 3'h7) ? 3'b000 :
                                  (CP_CSB_POL == 3'h6) ? 3'b001 :
                                  (CP_CSB_POL == 3'h5) ? 3'b010 :
                                  (CP_CSB_POL == 3'h4) ? 3'b011 :
                                  (CP_CSB_POL == 3'h3) ? 3'b100 :
                                  (CP_CSB_POL == 3'h2) ? 3'b101 :
                                  (CP_CSB_POL == 3'h1) ? 3'b110 :
                                /*(CP_CSB_POL == 3'h0) ?*/ 3'b111 ,
                DATA_WIDTH_A   =>  CP_DATA_WIDTH_A,
                DATA_WIDTH_B   =>  CP_DATA_WIDTH_B,
                WRITE_MODE_A   =>  CP_WRITE_MODE_A,
                WRITE_MODE_B   =>  CP_WRITE_MODE_B,
                RST_TYPE       => (CP_RESET_TYPE      == "ASYNC_RESET") ? "ASYNC" : 
                                  (CP_RESET_TYPE      == "SYNC_RESET" ) ? "SYNC"  : "",
                GRS_EN         => (CP_GRS_DIS         == "TRUE"       ) ? "FALSE" : 
                                  (CP_GRS_DIS         == "FALSE"      ) ? "TRUE"  : "",
                DOA_REG        => (CP_OUTPUT_REG_A    == "ENABLE"     ) ? 1 : 0,
                DOB_REG        => (CP_OUTPUT_REG_B    == "ENABLE"     ) ? 1 : 0,
                DOA_REG_CLKINV => (CP_CLKA_OR_POL_INV == "TRUE"       ) ? 1 : 0,
                DOB_REG_CLKINV => (CP_CLKB_OR_POL_INV == "TRUE"       ) ? 1 : 0,
                INIT_00        =>  CP_INIT_00,
                INIT_01        =>  CP_INIT_01,
                INIT_02        =>  CP_INIT_02,
                INIT_03        =>  CP_INIT_03,
                INIT_04        =>  CP_INIT_04,
                INIT_05        =>  CP_INIT_05,
                INIT_06        =>  CP_INIT_06,
                INIT_07        =>  CP_INIT_07,
                INIT_08        =>  CP_INIT_08,
                INIT_09        =>  CP_INIT_09,
                INIT_0A        =>  CP_INIT_0A,
                INIT_0B        =>  CP_INIT_0B,
                INIT_0C        =>  CP_INIT_0C,
                INIT_0D        =>  CP_INIT_0D,
                INIT_0E        =>  CP_INIT_0E,
                INIT_0F        =>  CP_INIT_0F,
                INIT_10        =>  CP_INIT_10,
                INIT_11        =>  CP_INIT_11,
                INIT_12        =>  CP_INIT_12,
                INIT_13        =>  CP_INIT_13,
                INIT_14        =>  CP_INIT_14,
                INIT_15        =>  CP_INIT_15,
                INIT_16        =>  CP_INIT_16,
                INIT_17        =>  CP_INIT_17,
                INIT_18        =>  CP_INIT_18,
                INIT_19        =>  CP_INIT_19,
                INIT_1A        =>  CP_INIT_1A,
                INIT_1B        =>  CP_INIT_1B,
                INIT_1C        =>  CP_INIT_1C,
                INIT_1D        =>  CP_INIT_1D,
                INIT_1E        =>  CP_INIT_1E,
                INIT_1F        =>  CP_INIT_1F,
                RAM_MODE       =>  (CP_DATA_WIDTH_A <= 9 && CP_DATA_WIDTH_B <= 9) ? "TRUE_DUAL_PORT" : "SIMPLE_DUAL_PORT"
            )
            port map
            (
                DOA            =>  QA       ,
                DOB            =>  QB       ,
                DIA            =>  DA       ,
                DIB            =>  DB       ,
                ADDRA[12:2]    =>  ADA[12:2],
                ADDRA[1:0]     => (CP_DATA_WIDTH_A > 9) ? 2'b00 : ADA[1:0],
                BWEA[1]        => (CP_BEHA_SET == "TRUE") ? 1'b1 :
                                  (CP_DATA_WIDTH_A > 9 && CP_PIBEHA == "TRUE" ) ? ntBWEAH_N :
                                  (CP_DATA_WIDTH_A > 9 && CP_PIBEHA == "FALSE") ? ADA[1] : 1'b1,
                BWEA[0]        => (CP_BELA_SET == "TRUE") ? 1'b1 :
                                  (CP_DATA_WIDTH_A > 9 && CP_PIBELA == "TRUE" ) ? ntBWEAL_N :
                                  (CP_DATA_WIDTH_A > 9 && CP_PIBELA == "FALSE") ? ADA[0] : 1'b1,
                ADDRA[13]      =>  ADA_CAS  ,
                ADDRA_HOLD     =>  ADSA     ,
                ADDRB[12:0]    =>  ADB      ,
                ADDRB[13]      =>  ADB_CAS  ,
                ADDRB_HOLD     =>  ADSB     ,
                CSA            =>  CSA      ,
                CSB            =>  CSB      ,
                CLKA           =>  ntCLKA   ,
                CLKB           =>  ntCLKB   ,
                CEA            =>  ntCEA    ,
                CEB            =>  ntCEB    ,
                WEA            =>  ntWEA    ,
                WEB            =>  ntWEB    ,
                ORCEA          =>  ntOCEA   ,
                ORCEB          =>  ntOCEB   ,
                RSTA           =>  ntRSTA   ,
                RSTB           =>  ntRSTB   ,
                CINA           =>  X1CASQI_A,
                CINB           =>  X1CASQI_B,
                COUTA          =>  X1CASQO_A,
                COUTB          =>  X1CASQO_B
            );
    }
};
