tarted
grid
device PLL
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config int CP_CLKI_DIV = 1,
        config int CP_CLKFB_DIV = 1,
        config int CP_CLKOP_DIV = 1,
        config int CP_CLKOS_DIV = 1,
        config int CP_CLKOS2_DIV = 1,
        config int CP_CLKOS3_DIV = 1,
        config int CP_CLKOP_FPHASE = 0,
        config int CP_CLKOS_FPHASE = 0,
        config int CP_CLKOS2_FPHASE = 0,
        config int CP_CLKOS3_FPHASE = 0,
        config int CP_CLKOP_CPHASE = 0,
        config int CP_CLKOS_CPHASE = 0,
        config int CP_CLKOS2_CPHASE = 0,
        config int CP_CLKOS3_CPHASE = 0,
        config string CP_FRACN_ENABLE = "FALSE",
        config int CP_FRACN_DIV = 0,
        config string CP_REFCLK_DETECT_ENABLE = "FALSE",
        config int CP_LOCK_MODE = 0,
        config int CP_LOCK_ACCURACY = 0,
        config string CP_PLL_USE_APB = "FALSE",
        config string CP_PFDEN_ENABLE = "FALSE",
        config int CP_DPFDEN_SOURCE = 0,
        config int CP_DPHASE_SOURCE = 0,
        config int CP_DTEST_SOURCE = 0,
        config int CP_FEEDBK_PATH = 0,
        config string CP_GLOGEN_ENABLE = "TRUE",
        config string CP_STDBY_ENABLE = "FALSE",
        config string CP_PLL_PWD_ENABLE = "FALSE",
        config string CP_RST_ENABLE = "FALSE",
        config string CP_RESETM_ENABLE = "FALSE",
        config string CP_RESETC_ENABLE = "FALSE",
        config string CP_RESETD_ENABLE = "FALSE",
        config string CP_LDO_TEST_EN = "TRUE",
        config int CP_LDO_TRIM = 0,
        config string CP_ICP_BASE_TRIM = "FALSE",
        config int CP_ICP_SEL = 0,
        config int CP_LPFRES_SEL = 0,
        config int CP_CRIPPLE_SEL = 0,
        config string CP_VCO_BYPASS_A0 = "FALSE",
        config string CP_VCO_BYPASS_B0 = "FALSE",
        config string CP_VCO_BYPASS_C0 = "FALSE",
        config string CP_VCO_BYPASS_D0 = "FALSE",
        config int CP_PREDIVIDER_MUXA1 = 0,
        config int CP_PREDIVIDER_MUXB1 = 0,
        config int CP_PREDIVIDER_MUXC1 = 0,
        config int CP_PREDIVIDER_MUXD1 = 0,
        config string CP_OUTDIVIDER_MUXA2 = "DIVA",
        config string CP_OUTDIVIDER_MUXB2 = "DIVB",
        config string CP_OUTDIVIDER_MUXC2 = "DIVC",
        config string CP_OUTDIVIDER_MUXD2 = "DIVD",
        config string CP_CLKOPGATE_ENABLE = "TRUE",
        config string CP_CLKOSGATE_ENABLE = "TRUE",
        config string CP_CLKOS2GATE_ENABLE = "TRUE",
        config string CP_CLKOS3GATE_ENABLE = "TRUE"
    );
    port
    (
// configuration_body_def_on


    config input SC_CLKI_DIV[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKI_DIV[7],SC_CLKI_DIV[6],SC_CLKI_DIV[5],SC_CLKI_DIV[4],SC_CLKI_DIV[3],SC_CLKI_DIV[2],SC_CLKI_DIV[1],SC_CLKI_DIV[0]" */,

    config input SC_CLKFB_DIV[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKFB_DIV[7],SC_CLKFB_DIV[6],SC_CLKFB_DIV[5],SC_CLKFB_DIV[4],SC_CLKFB_DIV[3],SC_CLKFB_DIV[2],SC_CLKFB_DIV[1],SC_CLKFB_DIV[0]" */,

    config input SC_CLKOP_DIV[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOP_DIV[7],SC_CLKOP_DIV[6],SC_CLKOP_DIV[5],SC_CLKOP_DIV[4],SC_CLKOP_DIV[3],SC_CLKOP_DIV[2],SC_CLKOP_DIV[1],SC_CLKOP_DIV[0]" */,

    config input SC_CLKOS_DIV[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOS_DIV[7],SC_CLKOS_DIV[6],SC_CLKOS_DIV[5],SC_CLKOS_DIV[4],SC_CLKOS_DIV[3],SC_CLKOS_DIV[2],SC_CLKOS_DIV[1],SC_CLKOS_DIV[0]" */,

    config input SC_CLKOS2_DIV[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOS2_DIV[7],SC_CLKOS2_DIV[6],SC_CLKOS2_DIV[5],SC_CLKOS2_DIV[4],SC_CLKOS2_DIV[3],SC_CLKOS2_DIV[2],SC_CLKOS2_DIV[1],SC_CLKOS2_DIV[0]" */,

    config input SC_CLKOS3_DIV[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOS3_DIV[7],SC_CLKOS3_DIV[6],SC_CLKOS3_DIV[5],SC_CLKOS3_DIV[4],SC_CLKOS3_DIV[3],SC_CLKOS3_DIV[2],SC_CLKOS3_DIV[1],SC_CLKOS3_DIV[0]" */,

    config input SC_CLKOP_FPHASE[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOP_FPHASE[2],SC_CLKOP_FPHASE[1],SC_CLKOP_FPHASE[0]" */,

    config input SC_CLKOS_FPHASE[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOS_FPHASE[2],SC_CLKOS_FPHASE[1],SC_CLKOS_FPHASE[0]" */,

    config input SC_CLKOS2_FPHASE[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOS2_FPHASE[2],SC_CLKOS2_FPHASE[1],SC_CLKOS2_FPHASE[0]" */,

    config input SC_CLKOS3_FPHASE[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOS3_FPHASE[2],SC_CLKOS3_FPHASE[1],SC_CLKOS3_FPHASE[0]" */,

    config input SC_CLKOP_CPHASE[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOP_CPHASE[7],SC_CLKOP_CPHASE[6],SC_CLKOP_CPHASE[5],SC_CLKOP_CPHASE[4],SC_CLKOP_CPHASE[3],SC_CLKOP_CPHASE[2],SC_CLKOP_CPHASE[1],SC_CLKOP_CPHASE[0]" */,

    config input SC_CLKOS_CPHASE[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOS_CPHASE[7],SC_CLKOS_CPHASE[6],SC_CLKOS_CPHASE[5],SC_CLKOS_CPHASE[4],SC_CLKOS_CPHASE[3],SC_CLKOS_CPHASE[2],SC_CLKOS_CPHASE[1],SC_CLKOS_CPHASE[0]" */,

    config input SC_CLKOS2_CPHASE[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOS2_CPHASE[7],SC_CLKOS2_CPHASE[6],SC_CLKOS2_CPHASE[5],SC_CLKOS2_CPHASE[4],SC_CLKOS2_CPHASE[3],SC_CLKOS2_CPHASE[2],SC_CLKOS2_CPHASE[1],SC_CLKOS2_CPHASE[0]" */,

    config input SC_CLKOS3_CPHASE[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOS3_CPHASE[7],SC_CLKOS3_CPHASE[6],SC_CLKOS3_CPHASE[5],SC_CLKOS3_CPHASE[4],SC_CLKOS3_CPHASE[3],SC_CLKOS3_CPHASE[2],SC_CLKOS3_CPHASE[1],SC_CLKOS3_CPHASE[0]" */,

    config input SC_FRACN_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FRACN_ENABLE" */,

    config input SC_FRACN_DIV[15:0] = 16'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FRACN_DIV[15],SC_FRACN_DIV[14],SC_FRACN_DIV[13],SC_FRACN_DIV[12],SC_FRACN_DIV[11],SC_FRACN_DIV[10],SC_FRACN_DIV[9],SC_FRACN_DIV[8],SC_FRACN_DIV[7],SC_FRACN_DIV[6],SC_FRACN_DIV[5],SC_FRACN_DIV[4],SC_FRACN_DIV[3],SC_FRACN_DIV[2],SC_FRACN_DIV[1],SC_FRACN_DIV[0]" */,

    config input SC_REFCLK_DETECT_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_REFCLK_DETECT_ENABLE" */,

    config input SC_LOCK_MODE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LOCK_MODE" */,

    config input SC_LOCK_ACCURACY[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LOCK_ACCURACY[2],SC_LOCK_ACCURACY[1],SC_LOCK_ACCURACY[0]" */,

    config input SC_PLL_USE_APB = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PLL_USE_APB" */,

    config input SC_PFDEN_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PFDEN_ENABLE" */,

    config input SC_DPFDEN_SOURCE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DPFDEN_SOURCE" */,

    config input SC_DPHASE_SOURCE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DPHASE_SOURCE" */,

    config input SC_DTEST_SOURCE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DTEST_SOURCE" */,

    config input SC_FEEDBK_PATH[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FEEDBK_PATH[2],SC_FEEDBK_PATH[1],SC_FEEDBK_PATH[0]" */,

    config input SC_GLOGEN_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GLOGEN_ENABLE" */,

    config input SC_STDBY_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_STDBY_ENABLE" */,

    config input SC_PLL_PWD_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PLL_PWD_ENABLE" */,

    config input SC_RST_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RST_ENABLE" */,

    config input SC_RESETM_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RESETM_ENABLE" */,

    config input SC_RESETC_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RESETC_ENABLE" */,

    config input SC_RESETD_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RESETD_ENABLE" */,

    config input SC_LDO_TEST_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LDO_TEST_EN" */,

    config input SC_LDO_TRIM[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LDO_TRIM[2],SC_LDO_TRIM[1],SC_LDO_TRIM[0]" */,

    config input SC_ICP_BASE_TRIM = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ICP_BASE_TRIM" */,

    config input SC_ICP_SEL[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ICP_SEL[3],SC_ICP_SEL[2],SC_ICP_SEL[1],SC_ICP_SEL[0]" */,

    config input SC_LPFRES_SEL[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LPFRES_SEL[2],SC_LPFRES_SEL[1],SC_LPFRES_SEL[0]" */,

    config input SC_CRIPPLE_SEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CRIPPLE_SEL" */,

    config input SC_VCO_BYPASS_A0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_VCO_BYPASS_A0" */,

    config input SC_VCO_BYPASS_B0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_VCO_BYPASS_B0" */,

    config input SC_VCO_BYPASS_C0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_VCO_BYPASS_C0" */,

    config input SC_VCO_BYPASS_D0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_VCO_BYPASS_D0" */,

    config input SC_PREDIVIDER_MUXA1[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PREDIVIDER_MUXA1[1],SC_PREDIVIDER_MUXA1[0]" */,

    config input SC_PREDIVIDER_MUXB1[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PREDIVIDER_MUXB1[1],SC_PREDIVIDER_MUXB1[0]" */,

    config input SC_PREDIVIDER_MUXC1[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PREDIVIDER_MUXC1[1],SC_PREDIVIDER_MUXC1[0]" */,

    config input SC_PREDIVIDER_MUXD1[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PREDIVIDER_MUXD1[1],SC_PREDIVIDER_MUXD1[0]" */,

    config input SC_OUTDIVIDER_MUXA2[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_OUTDIVIDER_MUXA2[2],SC_OUTDIVIDER_MUXA2[1],SC_OUTDIVIDER_MUXA2[0]" */,

    config input SC_OUTDIVIDER_MUXB2[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_OUTDIVIDER_MUXB2[2],SC_OUTDIVIDER_MUXB2[1],SC_OUTDIVIDER_MUXB2[0]" */,

    config input SC_OUTDIVIDER_MUXC2[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_OUTDIVIDER_MUXC2[2],SC_OUTDIVIDER_MUXC2[1],SC_OUTDIVIDER_MUXC2[0]" */,

    config input SC_OUTDIVIDER_MUXD2[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_OUTDIVIDER_MUXD2[2],SC_OUTDIVIDER_MUXD2[1],SC_OUTDIVIDER_MUXD2[0]" */,

    config input SC_CLKOPGATE_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOPGATE_ENABLE" */,

    config input SC_CLKOSGATE_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOSGATE_ENABLE" */,

    config input SC_CLKOS2GATE_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOS2GATE_ENABLE" */,

    config input SC_CLKOS3GATE_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOS3GATE_ENABLE" */,

// configuration_body_def_end

        input PHASESEL[1:0] = 2'b11,
        input CLK_TEST_SEL[2:0] = 3'b111,
        input PADDR[4:0] = 5'b1111_1,
        input PWDATA[7:0] = 8'b1111_1111,
        input CLKI = 1'b1,
        input CLKFB = 1'b1,
        input PFDEN = 1'b1,
        input LOCKIN_CAS = 1'b1,
        input PHASEDIR = 1'b1,
        input FPHASESTEP_N = 1'b1,
        input LOAD_FPHASE = 1'b1,
        input CPHASESTEP_N = 1'b1,
        input CLKOP_GATE = 1'b1,
        input CLKOS_GATE = 1'b1,
        input CLKOS2_GATE = 1'b1,
        input CLKOS3_GATE = 1'b1,
        input STDBY = 1'b1,
        input PLL_PWD = 1'b1,
        input RST = 1'b1,
        input RESETM = 1'b1,
        input RESETC = 1'b1,
        input RESETD = 1'b1,
        input LDO_TEST_SEL = 1'b1,
        input PCLK = 1'b1,
        input PRESETN = 1'b1,
        input PSEL = 1'b1,
        input PENABLE = 1'b1,
        input PWRITE = 1'b1,
        input TEST_MODE_N = 1'b1,
        input TEST_CLK = 1'b1,
        input TEST_SE_N = 1'b1,
        input TEST_RSTN = 1'b1,
        input TEST_SI0 = 1'b1,
        input TEST_SI1 = 1'b1,
        input TEST_SI2 = 1'b1,
        output PRDATA[7:0],
        output CLKI_OUT,
        output CLKOP,
        output CLKOS,
        output CLKOS2,
        output CLKOS3,
        output DPHSRC,
        output FPHASE_OB,
        output PLL_LOCK,
        output LOCKOUT_CAS,
        output CLK_TEST_OUT,
        output PREADY,
        output TEST_SO0,
        output TEST_SO1,
        output TEST_SO2
    );
};
//grid device end

//grid device structure netlist started
structure netlist of PLL
{

};
//grid device structure netlist end

//grid device configure body started

configuration cfg of PLL
{

 // assign config body begin
    SC_CLKI_DIV       :=  CP_CLKI_DIV;
    SC_CLKFB_DIV      :=  CP_CLKFB_DIV;
    SC_CLKOP_DIV      :=  CP_CLKOP_DIV;
    SC_CLKOS_DIV      :=  CP_CLKOS_DIV;
    SC_CLKOS2_DIV     :=  CP_CLKOS2_DIV;
    SC_CLKOS3_DIV     :=  CP_CLKOS3_DIV;
    SC_CLKOP_FPHASE   :=  CP_CLKOP_FPHASE;
    SC_CLKOS_FPHASE   :=  CP_CLKOS_FPHASE;
    SC_CLKOS2_FPHASE  :=  CP_CLKOS2_FPHASE;
    SC_CLKOS3_FPHASE  :=  CP_CLKOS3_FPHASE;
    SC_CLKOP_CPHASE   :=  CP_CLKOP_CPHASE;
    SC_CLKOS_CPHASE   :=  CP_CLKOS_CPHASE;
    SC_CLKOS2_CPHASE  :=  CP_CLKOS2_CPHASE;
    SC_CLKOS3_CPHASE  :=  CP_CLKOS3_CPHASE;
    SC_FRACN_DIV  :=  CP_FRACN_DIV;
    SC_LOCK_MODE      :=  CP_LOCK_MODE;
    SC_LOCK_ACCURACY  :=  CP_LOCK_ACCURACY;
    SC_DPFDEN_SOURCE  :=  CP_DPFDEN_SOURCE;
    SC_DPHASE_SOURCE  :=  CP_DPHASE_SOURCE;
    SC_DTEST_SOURCE   :=  CP_DTEST_SOURCE;
    SC_FEEDBK_PATH    :=  CP_FEEDBK_PATH;
    SC_LDO_TRIM  :=  CP_LDO_TRIM;
    SC_ICP_SEL        :=  CP_ICP_SEL;
    SC_LPFRES_SEL     :=  CP_LPFRES_SEL;
    SC_CRIPPLE_SEL    :=  CP_CRIPPLE_SEL;
    SC_PREDIVIDER_MUXA1  :=  CP_PREDIVIDER_MUXA1;
    SC_PREDIVIDER_MUXB1  :=  CP_PREDIVIDER_MUXB1;
    SC_PREDIVIDER_MUXC1  :=  CP_PREDIVIDER_MUXC1;
    SC_PREDIVIDER_MUXD1  :=  CP_PREDIVIDER_MUXD1;
// assign config body end

//initial config body0 begin
    if(CP_FRACN_ENABLE == "FALSE")
    {
        SC_FRACN_ENABLE  :=  1'b0;
    }
    else if(CP_FRACN_ENABLE == "TRUE")
    {
        SC_FRACN_ENABLE  :=  1'b1;
    }
    else
    {
        SC_FRACN_ENABLE  :=  1'bx;
        error("illegal setting for CP_FRACN_ENABLE  :=  %s",CP_FRACN_ENABLE);
    }

//initial config body0 end


//initial config body1 begin
    if(CP_REFCLK_DETECT_ENABLE == "FALSE")
    {
        SC_REFCLK_DETECT_ENABLE  :=  1'b0;
    }
    else if(CP_REFCLK_DETECT_ENABLE == "TRUE")
    {
        SC_REFCLK_DETECT_ENABLE  :=  1'b1;
    }
    else
    {
        SC_REFCLK_DETECT_ENABLE  :=  1'bx;
        error("illegal setting for CP_REFCLK_DETECT_ENABLE  :=  %s",CP_REFCLK_DETECT_ENABLE);
    }

//initial config body1 end


//initial config body2 begin
    if(CP_PLL_USE_APB == "FALSE")
    {
        SC_PLL_USE_APB  :=  1'b0;
    }
    else if(CP_PLL_USE_APB == "TRUE")
    {
        SC_PLL_USE_APB  :=  1'b1;
    }
    else
    {
        SC_PLL_USE_APB  :=  1'bx;
        error("illegal setting for CP_PLL_USE_APB  :=  %s",CP_PLL_USE_APB);
    }

//initial config body2 end


//initial config body3 begin
    if(CP_PFDEN_ENABLE == "FALSE")
    {
        SC_PFDEN_ENABLE  :=  1'b0;
    }
    else if(CP_PFDEN_ENABLE == "TRUE")
    {
        SC_PFDEN_ENABLE  :=  1'b1;
    }
    else
    {
        SC_PFDEN_ENABLE  :=  1'bx;
        error("illegal setting for CP_PFDEN_ENABLE  :=  %s",CP_PFDEN_ENABLE);
    }

//initial config body3 end


//initial config body4 begin
    if(CP_GLOGEN_ENABLE == "FALSE")
    {
        SC_GLOGEN_ENABLE  :=  1'b0;
    }
    else if(CP_GLOGEN_ENABLE == "TRUE")
    {
        SC_GLOGEN_ENABLE  :=  1'b1;
    }
    else
    {
        SC_GLOGEN_ENABLE  :=  1'bx;
        error("illegal setting for CP_GLOGEN_ENABLE  :=  %s",CP_GLOGEN_ENABLE);
    }

//initial config body4 end


//initial config body5 begin
    if(CP_STDBY_ENABLE == "FALSE")
    {
        SC_STDBY_ENABLE  :=  1'b0;
    }
    else if(CP_STDBY_ENABLE == "TRUE")
    {
        SC_STDBY_ENABLE  :=  1'b1;
    }
    else
    {
        SC_STDBY_ENABLE  :=  1'bx;
        error("illegal setting for CP_STDBY_ENABLE  :=  %s",CP_STDBY_ENABLE);
    }

//initial config body5 end


//initial config body6 begin
    if(CP_PLL_PWD_ENABLE == "FALSE")
    {
        SC_PLL_PWD_ENABLE  :=  1'b0;
    }
    else if(CP_PLL_PWD_ENABLE == "TRUE")
    {
        SC_PLL_PWD_ENABLE  :=  1'b1;
    }
    else
    {
        SC_PLL_PWD_ENABLE  :=  1'bx;
        error("illegal setting for CP_PLL_PWD_ENABLE  :=  %s",CP_PLL_PWD_ENABLE);
    }

//initial config body6 end


//initial config body7 begin
    if(CP_RST_ENABLE == "FALSE")
    {
        SC_RST_ENABLE  :=  1'b0;
    }
    else if(CP_RST_ENABLE == "TRUE")
    {
        SC_RST_ENABLE  :=  1'b1;
    }
    else
    {
        SC_RST_ENABLE  :=  1'bx;
        error("illegal setting for CP_RST_ENABLE  :=  %s",CP_RST_ENABLE);
    }

//initial config body7 end


//initial config body8 begin
    if(CP_RESETM_ENABLE == "FALSE")
    {
        SC_RESETM_ENABLE  :=  1'b0;
    }
    else if(CP_RESETM_ENABLE == "TRUE")
    {
        SC_RESETM_ENABLE  :=  1'b1;
    }
    else
    {
        SC_RESETM_ENABLE  :=  1'bx;
        error("illegal setting for CP_RESETM_ENABLE  :=  %s",CP_RESETM_ENABLE);
    }

//initial config body8 end


//initial config body9 begin
    if(CP_RESETC_ENABLE == "FALSE")
    {
        SC_RESETC_ENABLE  :=  1'b0;
    }
    else if(CP_RESETC_ENABLE == "TRUE")
    {
        SC_RESETC_ENABLE  :=  1'b1;
    }
    else
    {
        SC_RESETC_ENABLE  :=  1'bx;
        error("illegal setting for CP_RESETC_ENABLE  :=  %s",CP_RESETC_ENABLE);
    }

//initial config body9 end


//initial config body10 begin
    if(CP_RESETD_ENABLE == "FALSE")
    {
        SC_RESETD_ENABLE  :=  1'b0;
    }
    else if(CP_RESETD_ENABLE == "TRUE")
    {
        SC_RESETD_ENABLE  :=  1'b1;
    }
    else
    {
        SC_RESETD_ENABLE  :=  1'bx;
        error("illegal setting for CP_RESETD_ENABLE  :=  %s",CP_RESETD_ENABLE);
    }

//initial config body10 end


//initial config body11 begin
    if(CP_LDO_TEST_EN == "FALSE")
    {
        SC_LDO_TEST_EN  :=  1'b0;
    }
    else if(CP_LDO_TEST_EN == "TRUE")
    {
        SC_LDO_TEST_EN  :=  1'b1;
    }
    else
    {
        SC_LDO_TEST_EN  :=  1'bx;
        error("illegal setting for CP_LDO_TEST_EN  :=  %s",CP_LDO_TEST_EN);
    }

//initial config body11 end


//initial config body12 begin
    if(CP_ICP_BASE_TRIM == "FALSE")
    {
        SC_ICP_BASE_TRIM  :=  1'b0;
    }
    else if(CP_ICP_BASE_TRIM == "TRUE")
    {
        SC_ICP_BASE_TRIM  :=  1'b1;
    }
    else
    {
        SC_ICP_BASE_TRIM  :=  1'bx;
        error("illegal setting for CP_ICP_BASE_TRIM  :=  %s",CP_ICP_BASE_TRIM);
    }

//initial config body12 end


//initial config body13 begin
    if(CP_VCO_BYPASS_A0 == "FALSE")
    {
        SC_VCO_BYPASS_A0  :=  1'b0;
    }
    else if(CP_VCO_BYPASS_A0 == "TRUE")
    {
        SC_VCO_BYPASS_A0  :=  1'b1;
    }
    else
    {
        SC_VCO_BYPASS_A0  :=  1'bx;
        error("illegal setting for CP_VCO_BYPASS_A0  :=  %s",CP_VCO_BYPASS_A0);
    }

//initial config body13 end


//initial config body14 begin
    if(CP_VCO_BYPASS_B0 == "FALSE")
    {
        SC_VCO_BYPASS_B0  :=  1'b0;
    }
    else if(CP_VCO_BYPASS_B0 == "TRUE")
    {
        SC_VCO_BYPASS_B0  :=  1'b1;
    }
    else
    {
        SC_VCO_BYPASS_B0  :=  1'bx;
        error("illegal setting for CP_VCO_BYPASS_B0  :=  %s",CP_VCO_BYPASS_B0);
    }

//initial config body14 end


//initial config body15 begin
    if(CP_VCO_BYPASS_C0 == "FALSE")
    {
        SC_VCO_BYPASS_C0  :=  1'b0;
    }
    else if(CP_VCO_BYPASS_C0 == "TRUE")
    {
        SC_VCO_BYPASS_C0  :=  1'b1;
    }
    else
    {
        SC_VCO_BYPASS_C0  :=  1'bx;
        error("illegal setting for CP_VCO_BYPASS_C0  :=  %s",CP_VCO_BYPASS_C0);
    }

//initial config body15 end


//initial config body16 begin
    if(CP_VCO_BYPASS_D0 == "FALSE")
    {
        SC_VCO_BYPASS_D0  :=  1'b0;
    }
    else if(CP_VCO_BYPASS_D0 == "TRUE")
    {
        SC_VCO_BYPASS_D0  :=  1'b1;
    }
    else
    {
        SC_VCO_BYPASS_D0  :=  1'bx;
        error("illegal setting for CP_VCO_BYPASS_D0  :=  %s",CP_VCO_BYPASS_D0);
    }

//initial config body16 end


//initial config body17 begin
    if(CP_OUTDIVIDER_MUXA2 == "DIVA")
    {
        SC_OUTDIVIDER_MUXA2  :=  3'b000;
    }
    else if(CP_OUTDIVIDER_MUXA2 == "DIVB")
    {
        SC_OUTDIVIDER_MUXA2  :=  3'b001;
    }
    else if(CP_OUTDIVIDER_MUXA2 == "DIVC")
    {
        SC_OUTDIVIDER_MUXA2  :=  3'b010;
    }
    else if(CP_OUTDIVIDER_MUXA2 == "DIVD")
    {
        SC_OUTDIVIDER_MUXA2  :=  3'b011;
    }
    else if(CP_OUTDIVIDER_MUXA2 == "REFCLK")
    {
        SC_OUTDIVIDER_MUXA2  :=  3'b100;
    }
    else
    {
        SC_OUTDIVIDER_MUXA2  :=  1'bx;
        error("illegal setting for CP_OUTDIVIDER_MUXA2  :=  %s",CP_OUTDIVIDER_MUXA2);
    }

//initial config body17 end


//initial config body18 begin
    if(CP_OUTDIVIDER_MUXB2 == "DIVA")
    {
        SC_OUTDIVIDER_MUXB2  :=  3'b011;
    }
    else if(CP_OUTDIVIDER_MUXB2 == "DIVB")
    {
        SC_OUTDIVIDER_MUXB2  :=  3'b000;
    }
    else if(CP_OUTDIVIDER_MUXB2 == "DIVC")
    {
        SC_OUTDIVIDER_MUXB2  :=  3'b001;
    }
    else if(CP_OUTDIVIDER_MUXB2 == "DIVD")
    {
        SC_OUTDIVIDER_MUXB2  :=  3'b010;
    }
    else if(CP_OUTDIVIDER_MUXB2 == "REFCLK")
    {
        SC_OUTDIVIDER_MUXB2  :=  3'b100;
    }
    else
    {
        SC_OUTDIVIDER_MUXB2  :=  1'bx;
        error("illegal setting for CP_OUTDIVIDER_MUXB2  :=  %s",CP_OUTDIVIDER_MUXB2);
    }

//initial config body18 end


//initial config body19 begin
    if(CP_OUTDIVIDER_MUXC2 == "DIVA")
    {
        SC_OUTDIVIDER_MUXC2  :=  3'b010;
    }
    else if(CP_OUTDIVIDER_MUXC2 == "DIVB")
    {
        SC_OUTDIVIDER_MUXC2  :=  3'b011;
    }
    else if(CP_OUTDIVIDER_MUXC2 == "DIVC")
    {
        SC_OUTDIVIDER_MUXC2  :=  3'b000;
    }
    else if(CP_OUTDIVIDER_MUXC2 == "DIVD")
    {
        SC_OUTDIVIDER_MUXC2  :=  3'b001;
    }
    else if(CP_OUTDIVIDER_MUXC2 == "REFCLK")
    {
        SC_OUTDIVIDER_MUXC2  :=  3'b100;
    }
    else
    {
        SC_OUTDIVIDER_MUXC2  :=  1'bx;
        error("illegal setting for CP_OUTDIVIDER_MUXC2  :=  %s",CP_OUTDIVIDER_MUXC2);
    }

//initial config body19 end


//initial config body20 begin
    if(CP_OUTDIVIDER_MUXD2 == "DIVA")
    {
        SC_OUTDIVIDER_MUXD2  :=  3'b001;
    }
    else if(CP_OUTDIVIDER_MUXD2 == "DIVB")
    {
        SC_OUTDIVIDER_MUXD2  :=  3'b010;
    }
    else if(CP_OUTDIVIDER_MUXD2 == "DIVC")
    {
        SC_OUTDIVIDER_MUXD2  :=  3'b011;
    }
    else if(CP_OUTDIVIDER_MUXD2 == "DIVD")
    {
        SC_OUTDIVIDER_MUXD2  :=  3'b000;
    }
    else if(CP_OUTDIVIDER_MUXD2 == "REFCLK")
    {
        SC_OUTDIVIDER_MUXD2  :=  3'b100;
    }
    else
    {
        SC_OUTDIVIDER_MUXD2  :=  1'bx;
        error("illegal setting for CP_OUTDIVIDER_MUXD2  :=  %s",CP_OUTDIVIDER_MUXD2);
    }

//initial config body20 end


//initial config body21 begin
    if(CP_CLKOPGATE_ENABLE == "FALSE")
    {
        SC_CLKOPGATE_ENABLE  :=  1'b0;
    }
    else if(CP_CLKOPGATE_ENABLE == "TRUE")
    {
        SC_CLKOPGATE_ENABLE  :=  1'b1;
    }
    else
    {
        SC_CLKOPGATE_ENABLE  :=  1'bx;
        error("illegal setting for CP_CLKOPGATE_ENABLE  :=  %s",CP_CLKOPGATE_ENABLE);
    }

//initial config body21 end


//initial config body22 begin
    if(CP_CLKOSGATE_ENABLE == "FALSE")
    {
        SC_CLKOSGATE_ENABLE  :=  1'b0;
    }
    else if(CP_CLKOSGATE_ENABLE == "TRUE")
    {
        SC_CLKOSGATE_ENABLE  :=  1'b1;
    }
    else
    {
        SC_CLKOSGATE_ENABLE  :=  1'bx;
        error("illegal setting for CP_CLKOSGATE_ENABLE  :=  %s",CP_CLKOSGATE_ENABLE);
    }

//initial config body22 end


//initial config body23 begin
    if(CP_CLKOS2GATE_ENABLE == "FALSE")
    {
        SC_CLKOS2GATE_ENABLE  :=  1'b0;
    }
    else if(CP_CLKOS2GATE_ENABLE == "TRUE")
    {
        SC_CLKOS2GATE_ENABLE  :=  1'b1;
    }
    else
    {
        SC_CLKOS2GATE_ENABLE  :=  1'bx;
        error("illegal setting for CP_CLKOS2GATE_ENABLE  :=  %s",CP_CLKOS2GATE_ENABLE);
    }

//initial config body23 end


//initial config body24 begin
    if(CP_CLKOS3GATE_ENABLE == "FALSE")
    {
        SC_CLKOS3GATE_ENABLE  :=  1'b0;
    }
    else if(CP_CLKOS3GATE_ENABLE == "TRUE")
    {
        SC_CLKOS3GATE_ENABLE  :=  1'b1;
    }
    else
    {
        SC_CLKOS3GATE_ENABLE  :=  1'bx;
        error("illegal setting for CP_CLKOS3GATE_ENABLE  :=  %s",CP_CLKOS3GATE_ENABLE);
    }

//initial config body24 end

};

//grid device configure body end


timing  pll_tnl of PLL
{
    int CLKOUT0_SEL = (CP_OUTDIVIDER_MUXA2 == "DIVA") ? 0 :
                      (CP_OUTDIVIDER_MUXA2 == "DIVB") ? 1 :
                      (CP_OUTDIVIDER_MUXA2 == "DIVC") ? 2 :
                      (CP_OUTDIVIDER_MUXA2 == "DIVD") ? 3 :
                    /*(CP_OUTDIVIDER_MUXA2 == "REFCLK")*/ 4;

    int CLKOUT1_SEL = (CP_OUTDIVIDER_MUXB2 == "DIVA") ? 3 :
                      (CP_OUTDIVIDER_MUXB2 == "DIVB") ? 0 :
                      (CP_OUTDIVIDER_MUXB2 == "DIVC") ? 1 :
                      (CP_OUTDIVIDER_MUXB2 == "DIVD") ? 2 :
                    /*(CP_OUTDIVIDER_MUXB2 == "REFCLK")*/ 4;

    int CLKOUT2_SEL = (CP_OUTDIVIDER_MUXC2 == "DIVA") ? 2 :
                      (CP_OUTDIVIDER_MUXC2 == "DIVB") ? 3 :
                      (CP_OUTDIVIDER_MUXC2 == "DIVC") ? 0 :
                      (CP_OUTDIVIDER_MUXC2 == "DIVD") ? 1 :
                    /*(CP_OUTDIVIDER_MUXC2 == "REFCLK")*/ 4;

    int CLKOUT3_SEL = (CP_OUTDIVIDER_MUXD2 == "DIVA") ? 1 :
                      (CP_OUTDIVIDER_MUXD2 == "DIVB") ? 2 :
                      (CP_OUTDIVIDER_MUXD2 == "DIVC") ? 3 :
                      (CP_OUTDIVIDER_MUXD2 == "DIVD") ? 0 :
                    /*(CP_OUTDIVIDER_MUXD2 == "REFCLK")*/ 4;

    string INTERNAL_FB = (CP_FEEDBK_PATH == 0) ? "CLKOUT0" :
                         (CP_FEEDBK_PATH == 1) ? "CLKOUT1" :
                         (CP_FEEDBK_PATH == 2) ? "CLKOUT2" :
                         (CP_FEEDBK_PATH == 3) ? "CLKOUT3" :
                       /*(CP_FEEDBK_PATH == 4/5/6/7)*/ "DISABLE";

    string EXTERNAL_FB = (CP_FEEDBK_PATH == 4) ? "CLKOUT0" :
                         (CP_FEEDBK_PATH == 5) ? "CLKOUT1" :
                         (CP_FEEDBK_PATH == 6) ? "CLKOUT2" :
                         (CP_FEEDBK_PATH == 7) ? "CLKOUT3" :
                       /*(CP_FEEDBK_PATH == 0/1/2/3)*/ "DISABLE";

    string PFDEN_APB_EN = (CP_DPFDEN_SOURCE == 0) ? "FALSE" : "TRUE";
    string PHASE_APB_EN = (CP_DPHASE_SOURCE == 0) ? "FALSE" : "TRUE";

    bit LOCK_MODE = (CP_LOCK_MODE == 0) ? 1'b0 : 1'b1;


    operator V_PLL_E2 V_PLL_E2
        parameter map
        (
            PFDEN_EN                =>  CP_PFDEN_ENABLE     ,
            PFDEN_APB_EN            =>     PFDEN_APB_EN     ,
            LOCK_MODE               =>     LOCK_MODE        ,
            STATIC_RATIOI           =>  CP_CLKI_DIV         ,
            STATIC_RATIO0           =>  CP_CLKOP_DIV        ,
            STATIC_RATIO1           =>  CP_CLKOS_DIV        ,
            STATIC_RATIO2           =>  CP_CLKOS2_DIV       ,
            STATIC_RATIO3           =>  CP_CLKOS3_DIV       ,
            STATIC_RATIOF           =>  CP_CLKFB_DIV        ,
            FRACN_EN                =>  CP_FRACN_ENABLE     ,
            FRACN_DIV               =>  CP_FRACN_DIV        ,
            PHASE_APB_EN            =>     PHASE_APB_EN     ,
            STATIC_PHASE0           =>  CP_CLKOP_FPHASE     ,
            STATIC_PHASE1           =>  CP_CLKOS_FPHASE     ,
            STATIC_PHASE2           =>  CP_CLKOS2_FPHASE    ,
            STATIC_PHASE3           =>  CP_CLKOS3_FPHASE    ,
            STATIC_CPHASE0          =>  CP_CLKOP_CPHASE     ,
            STATIC_CPHASE1          =>  CP_CLKOS_CPHASE     ,
            STATIC_CPHASE2          =>  CP_CLKOS2_CPHASE    ,
            STATIC_CPHASE3          =>  CP_CLKOS3_CPHASE    ,
            VCOCLK_BYPASS0          =>  CP_VCO_BYPASS_A0    ,
            VCOCLK_BYPASS1          =>  CP_VCO_BYPASS_B0    ,
            VCOCLK_BYPASS2          =>  CP_VCO_BYPASS_C0    ,
            VCOCLK_BYPASS3          =>  CP_VCO_BYPASS_D0    ,
            ODIV0_CLKIN_SEL         =>  CP_PREDIVIDER_MUXA1 ,
            ODIV1_CLKIN_SEL         =>  CP_PREDIVIDER_MUXB1 ,
            ODIV2_CLKIN_SEL         =>  CP_PREDIVIDER_MUXC1 ,
            ODIV3_CLKIN_SEL         =>  CP_PREDIVIDER_MUXD1 ,
            CLKOUT0_SEL             =>     CLKOUT0_SEL      ,
            CLKOUT1_SEL             =>     CLKOUT1_SEL      ,
            CLKOUT2_SEL             =>     CLKOUT2_SEL      ,
            CLKOUT3_SEL             =>     CLKOUT3_SEL      ,
            CLKOUT0_SYN_EN          =>  CP_CLKOPGATE_ENABLE ,
            CLKOUT1_SYN_EN          =>  CP_CLKOSGATE_ENABLE ,
            CLKOUT2_SYN_EN          =>  CP_CLKOS2GATE_ENABLE,
            CLKOUT3_SYN_EN          =>  CP_CLKOS3GATE_ENABLE,
            INTERNAL_FB             =>     INTERNAL_FB      ,
            EXTERNAL_FB             =>     EXTERNAL_FB      ,
            STDBY_EN                =>  CP_STDBY_ENABLE     ,
            RST_INNER_EN            =>  CP_RESETM_ENABLE    ,
            RSTODIV_EN              =>  CP_RST_ENABLE       ,
            RSTODIV2_EN             =>  CP_RESETC_ENABLE    ,
            RSTODIV3_EN             =>  CP_RESETD_ENABLE 
            //BANDWIDTH               => CP_ICP_SEL / CP_LPFRES_SEL / CP_CRIPPLE_SEL
        )                    
        port map
        (
             CLKI           => CLKI        ,
             CLKFB          => CLKFB       ,
             CLKOUT         => CLKI_OUT    ,
             CLKOUT0        => CLKOP       ,
             CLKOUT1        => CLKOS       ,
             CLKOUT2        => CLKOS2      ,
             CLKOUT3        => CLKOS3      ,
             PHASE_SOURCE   => DPHSRC      ,
             LOCK           => PLL_LOCK    ,
             PFDEN          => PFDEN       ,
             PHASE_SEL      => PHASESEL    ,
             PHASE_DIR      => PHASEDIR    ,
             PHASE_STEP_N   => FPHASESTEP_N,
             LOAD_PHASE     => LOAD_FPHASE ,
             CPHASE_STEP_N  => CPHASESTEP_N,
             CLKOUT0_SYN    => CLKOP_GATE  ,
             CLKOUT1_SYN    => CLKOS_GATE  ,
             CLKOUT2_SYN    => CLKOS2_GATE ,
             CLKOUT3_SYN    => CLKOS3_GATE ,
             STDBY          => STDBY       ,
             PLL_PWD        => PLL_PWD     ,
             RST            => RESETM      ,
             RSTODIV        => RST         ,
             RSTODIV2       => RESETC      ,
             RSTODIV3       => RESETD      ,
             APB_CLK        => PCLK        ,
             APB_RST_N      => PRESETN     ,
             APB_ADDR       => PADDR       ,
             APB_SEL        => PSEL        ,
             APB_EN         => PENABLE     ,
             APB_WRITE      => PWRITE      ,
             APB_WDATA      => PWDATA      
        );
};
