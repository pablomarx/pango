tarted
grid
device CCS
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config string CP_GOUTEN_EN = "DISABLE",
        config string CP_GRSN_EN = "DISABLE",
        config string CP_GWEN_EN = "DISABLE",
        config string CP_CP_SD = "ENABLE",
        config bit CP_USERCODE[31:0] = 32'hFFFFFFFF,
        config bit CP_TRIM_SEL = 1'b0,
        config bit CP_TRIM_LDO_VREF_SEL = 1'b0,
        config bit CP_TRIM_LDO_VREF[4:0] = 5'b00000
    );
    port
    (
// configuration_body_def_on


    config input SC_GOUTEN_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GOUTEN_EN" */,

    config input SC_GRS_N_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GRS_N_EN" */,

    config input SC_GWEN_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GWEN_EN" */,

    config input SC_CP_SD = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CP_SD" */,

    config input SC_USERCODE[31:0] = 32'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_USERCODE[31],SC_USERCODE[30],SC_USERCODE[29],SC_USERCODE[28],SC_USERCODE[27],SC_USERCODE[26],SC_USERCODE[25],SC_USERCODE[24],SC_USERCODE[23],SC_USERCODE[22],SC_USERCODE[21],SC_USERCODE[20],SC_USERCODE[19],SC_USERCODE[18],SC_USERCODE[17],SC_USERCODE[16],SC_USERCODE[15],SC_USERCODE[14],SC_USERCODE[13],SC_USERCODE[12],SC_USERCODE[11],SC_USERCODE[10],SC_USERCODE[9],SC_USERCODE[8],SC_USERCODE[7],SC_USERCODE[6],SC_USERCODE[5],SC_USERCODE[4],SC_USERCODE[3],SC_USERCODE[2],SC_USERCODE[1],SC_USERCODE[0]" */,

    config input SC_TRIM_SEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TRIM_SEL" */,

    config input SC_TRIM_LDO_VREF_SEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TRIM_LDO_VREF_SEL" */,

    config input SC_TRIM_LDO_VREF[4:0] = 5'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TRIM_LDO_VREF[4],SC_TRIM_LDO_VREF[3],SC_TRIM_LDO_VREF[2],SC_TRIM_LDO_VREF[1],SC_TRIM_LDO_VREF[0]" */,

// configuration_body_def_end

        input PADDR[4:0] = 5'b1111_1,
        input PWDATA[7:0] = 8'b1111_1111,
        input PLL0_PRDATA[7:0] = 8'b1111_1111,
        input PLL1_PRDATA[7:0] = 8'b1111_1111,
        input TRIM_LDO_VREF_I[4:0] = 5'b1111_1,
        input TRIM_ICONST_I[5:0] = 6'b1111_11,
        input FREQ_TRIM_I[4:0] = 5'b1111_1,
        input GOUTEN_I = 1'b1,
        input GRS_N_I = 1'b1,
        input GWEN_I = 1'b1,
        input TDO_USER1 = 1'b1,
        input TDO_USER2 = 1'b1,
        input UID_CLK = 1'b1,
        input UID_DIN = 1'b1,
        input UID_LOAD = 1'b1,
        input UID_SE = 1'b1,
        input PCTLR_CLK = 1'b1,
        input PCTLR_STDBY_EN_N = 1'b1,
        input PCTLR_TIMER_EN_N = 1'b1,
        input PCTLR_CLR_N = 1'b1,
        input PCTLR_BG_STABLE = 1'b1,
        input OSC_OFF = 1'b1,
        input CLK = 1'b1,
        input MCLK = 1'b1,
        input EFB_PCLK = 1'b1,
        input UCLK = 1'b1,
        input PCLK = 1'b1,
        input PRESETN = 1'b1,
        input PSEL_CCS = 1'b1,
        input PSEL_SPI = 1'b1,
        input PSEL_I2C0 = 1'b1,
        input PSEL_I2C1 = 1'b1,
        input PSEL_TIMER = 1'b1,
        input PSEL_PLL0 = 1'b1,
        input PSEL_PLL1 = 1'b1,
        input PENABLE = 1'b1,
        input PWRITE = 1'b1,
        input PLL0_PREADY = 1'b1,
        input PLL1_PREADY = 1'b1,
        input RBCRC_RST = 1'b1,
        input RBCRC_START = 1'b1,
        input RBCRC_SEC_START = 1'b1,
        input SPI_SS_I_N = 1'b1,
        input SPI_SCK_I = 1'b1,
        input SPI_MOSI_I = 1'b1,
        input SPI_MISO_I = 1'b1,
        input I2C0_SCL_I = 1'b1,
        input I2C0_SDA_I = 1'b1,
        input I2C1_SCL_I = 1'b1,
        input I2C1_SDA_I = 1'b1,
        input TIMER_RSTN = 1'b1,
        input TIMER_CLK = 1'b1,
        input TIMER_STAMP = 1'b1,
        input TEST_CLK = 1'b1,
        input TEST_MODE_N = 1'b1,
        input TEST_RSTN = 1'b1,
        input TEST_SE_N = 1'b1,
        input TEST_SI = 1'b1,
        output OSCFSEL[6:0],
        output FREQ_TRIM[4:0],
        output PRDATA[7:0],
        output SPI_SS_O_N[7:0],
        output GOUTEN,
        output GRS_N,
        output GWEN,
        output TCK1,
        output TMS1,
        output TDI1,
        output FLG_USER1,
        output CLOCKDR1,
        output JRST,
        output JRTI,
        output CAPTUREDR,
        output SHIFTDR,
        output UPDATEDR,
        output FLG_USER2,
        output CLOCKDR2,
        output UID_DOUT,
        output PCTLR_STDBY_FLG,
        output PCTLR_STOP,
        output PCTLR_STDBY,
        output PCTLR_POR_OFF,
        output PCTLR_BG_OFF,
        output OSC_TR,
        output OSC_TR_RBCRC,
        output MCLK_EN,
        output WAKEUP_OVER_N,
        output PREADY,
        output RBCRC_ERR,
        output RBCRC_VALID,
        output RBCRC_SEC_OVER,
        output IRQ_CCS,
        output IRQ,
        output SPI_SCK_OE_N,
        output SPI_SCK_O,
        output SPI_MOSI_OE_N,
        output SPI_MOSI_O,
        output SPI_MISO_OE_N,
        output SPI_MISO_O,
        output IRQ_SPI,
        output I2C0_SCL_O,
        output I2C0_SDA_O,
        output IRQ_I2C0,
        output I2C1_SCL_O,
        output I2C1_SDA_O,
        output IRQ_I2C1,
        output TIMER_PWM,
        output IRQ_TIMER,
        output TEST_SO
    );
};
//grid device end

//grid device structure netlist started
structure netlist of CCS
{

};
//grid device structure netlist end

//grid device configure body started

configuration cfg of CCS
{

//initial config body0 begin
    if(CP_GOUTEN_EN == "ENABLE")
    {
        SC_GOUTEN_EN  :=  1'b1;
    }
    else if(CP_GOUTEN_EN == "DISABLE")
    {
        SC_GOUTEN_EN  :=  1'b0;
    }
    else
    {
        SC_GOUTEN_EN  :=  1'bx;
        error ("illegal setting for CP_GOUTEN_EN := %s",CP_GOUTEN_EN);
    }

//initial config body0 end


//initial config body1 begin
    if(CP_GRSN_EN == "ENABLE")
    {
        SC_GRS_N_EN  :=  1'b1;
    }
    else if(CP_GRSN_EN == "DISABLE")
    {
        SC_GRS_N_EN  :=  1'b0;
    }
    else
    {
        SC_GRS_N_EN  :=  1'bx;
        error ("illegal setting for CP_GRSN_EN := %s",CP_GRSN_EN);
    }

//initial config body1 end


//initial config body2 begin
    if(CP_GWEN_EN == "ENABLE")
    {
        SC_GWEN_EN  :=  1'b1;
    }
    else if(CP_GWEN_EN == "DISABLE")
    {
        SC_GWEN_EN  :=  1'b0;
    }
    else
    {
        SC_GWEN_EN  :=  1'bx;
        error ("illegal setting for CP_GWEN_EN := %s",CP_GWEN_EN);
    }

//initial config body2 end


//initial config body3 begin
    if(CP_CP_SD == "ENABLE")
    {
        SC_CP_SD  :=  1'b1;
    }
    else if(CP_CP_SD == "DISABLE")
    {
        SC_CP_SD  :=  1'b0;
    }
    else
    {
        SC_CP_SD  :=  1'bx;
        error ("illegal setting for CP_CP_SD := %s",CP_CP_SD);
    }

//initial config body3 end


//initial config body4 begin
   SC_USERCODE  :=  CP_USERCODE;
//initial config body4 end


//initial config body5 begin
   SC_TRIM_SEL  :=  CP_TRIM_SEL;
//initial config body5 end


//initial config body6 begin
   SC_TRIM_LDO_VREF_SEL  :=  CP_TRIM_LDO_VREF_SEL;
//initial config body6 end


//initial config body7 begin
   SC_TRIM_LDO_VREF  :=  CP_TRIM_LDO_VREF;
//initial config body7 end

};

//grid device configure body end


timing ccs_tnl of CCS
{
    operator V_GRS V_GRS
        port map
        (
            GRS_N  => GRS_N_I
        );

    operator V_START_E1 V_START_E1
        port map
        (
            WAKEUP_OVER => WAKEUP_OVER_N,
            CLK         => UCLK         ,
            GOE         => GOUTEN_I     ,
            GRS_N       => GRS_N_I      ,
            GWE         => GWEN_I       
        );
        
    operator V_SCANCHAIN_E1 V_SCANCHAIN_E1
        port map
        (
            RST      => JRST     ,
            CAPDR    => CAPTUREDR,
            SHFTDR   => SHIFTDR  ,
            UPDR     => UPDATEDR ,
            JCLK     => CLOCKDR1 ,
            FLG_USER => FLG_USER1,
            TDI_USER => TDI1     ,
            TDO_USER => TDO_USER1,
            JRTI     => JRTI     ,
            TCK_USER => TCK1     ,
            TMS_USER => TMS1         
        );
   
    operator V_SCANCHAIN_E1 V_SCANCHAIN_E1_2
        port map
        (
            JCLK     => CLOCKDR2 ,
            FLG_USER => FLG_USER2,
            TDO_USER => TDO_USER2
        );
   
   
   // operator V_I2C V_I2C0
   //     port map
   //     (
   //         SCL_I      => I2C0_SCL_I ,
   //         SCL_O      => I2C0_SCL_O ,
   //         SDA_I      => I2C0_SDA_I ,
   //         SDA_O      => I2C0_SDA_O ,
   //         IRQ        => IRQ_I2C0       
   //     );
   //
   // operator V_I2C V_I2C1
   //     port map
   //     (
   //         SCL_I      => I2C1_SCL_I ,
   //         SCL_O      => I2C1_SCL_O ,
   //         SDA_I      => I2C1_SDA_I ,
   //         SDA_O      => I2C1_SDA_O ,
   //         IRQ        => IRQ_I2C1       
   //     );
   //
   //
   // operator V_POWERCTL V_POWERCTL
   //     port map
   //     (
   //         CLK              => PCTLR_CLK       ,
   //         STDBY_EN_N       => PCTLR_STDBY_EN_N,
   //         TIMER_EN_N       => PCTLR_TIMER_EN_N,
   //         CLR_N            => PCTLR_CLR_N     ,
   //         STOP             => PCTLR_STOP      ,
   //         STDBY            => PCTLR_STDBY     ,
   //         STDBY_FLG        => PCTLR_STDBY_FLG 
   //     );
   //
   // operator V_RBCRC V_RBCRC
   //     port map
   //     (
   //         RST    => RBCRC_RST   ,
   //         START  => RBCRC_START ,
   //         ERR    => RBCRC_ERR   ,
   //         VALID  => RBCRC_VALID 
   //     );
   //
   //
   // operator V_SPI V_SPI
   //     port map
   //     (
   //         SCK_OE_N   =>  SPI_SCK_OE_N ,
   //         SCK_I      =>  SPI_SCK_I    ,
   //         SCK_O      =>  SPI_SCK_O    ,
   //         SS_O_N     =>  SPI_SS_O_N   ,
   //         SS_I_N     =>  SPI_SS_I_N   ,
   //         MISO_OE_N  =>  SPI_MISO_OE_N,
   //         MISO_I     =>  SPI_MISO_I   ,
   //         MISO_O     =>  SPI_MISO_O   ,
   //         MOSI_OE_N  =>  SPI_MOSI_OE_N,
   //         MOSI_I     =>  SPI_MOSI_I   ,
   //         MOSI_O     =>  SPI_MOSI_O   ,
   //         IRQ        =>  IRQ_SPI      
   //     );
   //
   // operator V_TIMER V_TIMER
   //     port map
   //     (
   //         CLK      => TIMER_CLK   ,
   //         RST_N    => TIMER_RSTN  ,
   //         STAMP    => TIMER_STAMP ,
   //         PWM      => TIMER_PWM   ,
   //         IRQ      => IRQ_TIMER   
   //     );
   //     
   // operator V_APB V_APB
   //     port map
   //     (
   //         CLK        => PCLK      ,
   //         RST_N      => PRESETN   ,
   //         ADDR       => PADDR     ,
   //         SEL_CCS    => PSEL_CCS  ,
   //         SEL_SPI    => PSEL_SPI  ,
   //         SEL_I2C0   => PSEL_I2C0 ,
   //         SEL_I2C1   => PSEL_I2C1 ,
   //         SEL_TIMER  => PSEL_TIMER,
   //         SEL_PLL0   => PSEL_PLL0 ,
   //         SEL_PLL1   => PSEL_PLL1 ,
   //         EN         => PENABLE   ,
   //         WR         => PWRITE    ,
   //         WDATA      => PWDATA    ,
   //         RDATA      => PRDATA    ,
   //         RDY        => PREADY      
   //     );
        
    operator V_UDID V_UDID
        port map
        (
            DI    => UID_DIN   ,
            DO    => UID_DOUT  ,
            SE    => UID_SE    ,
            LOAD  => UID_LOAD  ,
            CLK   => UID_CLK  
        );
};
