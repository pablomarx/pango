*******************************************************************

  Package   [pango_schm_funcs]

  Author    [jhxie]

  Abstract  [Schematic description common to pango architecture]

  Revision History:

********************************************************************************/
library work;
USE pgc_defs, pgc7km_defs, pango_defs;

package pgc_schm_funcs
{

/**VFunction******************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_srb tile]

*****************************************************************************************/
function draw_srb_tile
( 
    unsigned int tx,
    unsigned int ty
)
{
    // Site index variable. The X index for logic and GUI are declared separately
    unsigned int lsx, gsx, lsy, gsy;

    // device reference variables
    &device xRef, mRef;

    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
       
    // Pull out the device instances from logic structure
    xRef  = <device SRB  @[lsx,lsy]     of ARCHITECTURE>;
    
    string strVar;
    sprintf(strVar, "SRB_%d_%d", lsx, lsy);
    device SRB   ( symbol logsym )  *strVar  @[gsx+201,gsy+200];
    map 
    ( 
        <instance *strVar>   => xRef
     );   
     
    // Pull out the device instances from logic structure
    mRef  = <device HARD0N1  @[lsx,lsy+1]     of ARCHITECTURE>;
    
    string strVar1;
    sprintf(strVar1, "HARD0N1_%d_%d", lsx, lsy+1);
    device HARD0N1   ( symbol logsym )  *strVar1  @[gsx+620,gsy+760];
    map 
    ( 
        <instance *strVar1>   => mRef
     );   
       
}; // end of function draw_srb_tile


function draw_clm_tile
( 
    unsigned int tx,
    unsigned int ty
)
{
    // Site index variable. The X index for logic and GUI are declared separately
    unsigned int lsx, gsx, lsy, gsy;

    // device reference variables
    &device xRef, mRef, rRef;
    string strVar0, strVar1, strVar;

    lsx = tx * NUM_GRID_X + 3;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
    xRef = <device CLMA @[lsx,lsy] of ARCHITECTURE>;
    sprintf(strVar0, "CLMA_%d_%d", lsx, lsy);
    device CLMA ( symbol logsym ) *strVar0 @[gsx+740,gsy+280];
    map
    (
        <instance *strVar0>   => xRef
    );
    
    mRef = <device CLMS @[lsx,lsy+1] of ARCHITECTURE>;
    sprintf(strVar1, "CLMS_%d_%d", lsx, lsy+1);
    device CLMS ( symbol logsym ) *strVar1 @[gsx+870,gsy+540];
    map
    (
        <instance *strVar1>   => mRef
    );
    
    //rRef = <device PGC_BUFFERX1 @[lsx+2,lsy+1] of ARCHITECTURE>;
    //sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+2, lsy+1);
    //device PGC_BUFFERX1 ( symbol logsym ) *strVar @[gsx+1000,gsy+510];
    //map
    //(
    //    <instance *strVar>   => rRef
    //);
    
}; // end of function draw_clm_7k_tile

function draw_clmss_tile
( 
    unsigned int tx,
    unsigned int ty
)
{
    // Site index variable. The X index for logic and GUI are declared separately
    unsigned int lsx, gsx, lsy, gsy;

    // device reference variables
    &device xRef, mRef, rRef;
    string strVar0, strVar1, strVar;

    lsx = tx * NUM_GRID_X + 3;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
    xRef = <device CLMS @[lsx,lsy] of ARCHITECTURE>;
    sprintf(strVar0, "CLMS_%d_%d", lsx, lsy);
    device CLMS ( symbol logsym ) *strVar0 @[gsx+740,gsy+280];
    map
    (
        <instance *strVar0>   => xRef
    );
    
    mRef = <device CLMS @[lsx,lsy+1] of ARCHITECTURE>;
    sprintf(strVar1, "CLMS_%d_%d", lsx, lsy+1);
    device CLMS ( symbol logsym ) *strVar1 @[gsx+870,gsy+540];
    map
    (
        <instance *strVar1>   => mRef
    );
    
    //rRef = <device PGC_BUFFERX1 @[lsx+2,lsy+2] of ARCHITECTURE>;
    //sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+2, lsy+2);
    //device PGC_BUFFERX1 ( symbol logsym ) *strVar @[gsx+1000,gsy+280];
    //map
    //(
    //    <instance *strVar>   => rRef
    //);
    //
    //rRef = <device PGC_BUFFERX1 @[lsx+2,lsy+3] of ARCHITECTURE>;
    //sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+2, lsy+3);
    //device PGC_BUFFERX1 ( symbol logsym ) *strVar @[gsx+1000,gsy+540];
    //map
    //(
    //    <instance *strVar>   => rRef
    //);
    
}; // end of function draw_clmss_tile


/********************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_drm tile]
  
********************************************************************************/
function draw_drm_tile
(
    unsigned int tx,
    unsigned int ty
)
{   
    unsigned int lsx, lsy, gsx, gsy;
    unsigned int dt, dx, dy;

    // device reference variables
    &device rRef;
    string strVar;
    
    lsx = tx * NUM_GRID_X + 3;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
    rRef = <device DRM @[lsx+2,lsy]  of ARCHITECTURE>;
    sprintf(strVar, "DRM_%d_%d", lsx+2, lsy);
    device DRM  ( symbol logsym )  *strVar  @[gsx+901,gsy+200];
    map 
    ( 
         <instance *strVar>   => rRef
     );
    
    dx = 1;
    for ( dt = 0; dt < 3; dt += 1 )
    {
        dy = 6 * dt;
        
        rRef = <device SFB @[lsx+dx,lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "SFB_%d_%d", lsx+dx, lsy+dy);
        device SFB  ( symbol logsym )  *strVar  @[gsx+740,gsy+470+1200*dt];
        map 
        ( 
             <instance *strVar>   => rRef
        );
    }
    
}// end of function draw_drm_tile


/********************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_dll tile]
  
********************************************************************************/
function draw_dll_tile
(
    unsigned int tx,
    unsigned int ty
)
{
    unsigned int lsx, lsy, gsx, gsy;
    unsigned int dt, dx, dy;

    // device reference variables
    &device rRef;
    string strVar;
    
    lsx = tx * NUM_GRID_X + 3;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
    rRef = <device SFB @[lsx+2, lsy+4] of ARCHITECTURE>;
    sprintf(strVar, "SFB_%d_%d", lsx+2, lsy+4);
    device SFB  ( symbol logsym )  *strVar  @[gsx+740,gsy+470];
    map
    (
         <instance *strVar>   => rRef
    );
    
    rRef = <device DLL @[lsx, lsy]  of ARCHITECTURE>;
    sprintf(strVar, "DLL_%d_%d", lsx, lsy);
    device DLL  ( symbol logsym )  *strVar  @[gsx+840, gsy+400];
    map
    (
         <instance *strVar>   => rRef
    );
    
    rRef = <device DLLMUX @[lsx, lsy+1]  of ARCHITECTURE>;
    sprintf(strVar, "DLLMUX_%d_%d", lsx, lsy+1);
    device DLLMUX  ( symbol logsym )  *strVar  @[gsx+901, gsy+490];
    map
    (
         <instance *strVar>   => rRef
    );
    
    //for ( dt = 0; dt < 16; dt += 1 )
    //{
    //    dx = dt / 6;
    //    dy = dt % 6;
    //    
    //    rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
    //    sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
    //    
    //    if ( dt < 8 )
    //    {
    //        device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+940, gsy+513 + 10*dt];
    //        map 
    //        ( 
    //             <instance *strVar>   => rRef
    //        );
    //    }
    //    else
    //    {
    //        device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+960, gsy+333 + 10*dt];
    //        map 
    //        ( 
    //             <instance *strVar>   => rRef
    //        );
    //    }
    //}
    
}// end of function draw_dll_tile


/**VFunction******************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_uscm tile]

*****************************************************************************************/
function draw_uscm_7km_tile
(
    unsigned int tx,
    unsigned int ty
)
{
    unsigned int lsx, lsy, gsx, gsy;
    unsigned int dt, dx, dy, dx2, dy2;

    // device reference variables
    &device rRef;
    string strVar;
    
    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
  // Part1
    for ( dt = 0; dt < 6; dt += 1 )
    {
      // draw <USCMMUX XUSCMMUX>
        dx = 0;
        dy = 3 * dt;
        
        rRef = <device USCMMUX_TEST @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USCMMUX_TEST_%d_%d", lsx+dx, lsy+dy);
        device USCMMUX_TEST  ( symbol logsym_1 )  *strVar  @[gsx+280, gsy+260 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 1;
        rRef = <device USCMMUX @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USCMMUX_%d_%d", lsx+dx, lsy+dy);
        device USCMMUX  ( symbol logsym_1 )  *strVar  @[gsx+280, gsy+210 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 1;
        rRef = <device USCMMUX_OUT @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USCMMUX_OUT_%d_%d", lsx+dx, lsy+dy);
        device USCMMUX_OUT  ( symbol logsym_1 )  *strVar  @[gsx+230, gsy+235 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        // draw <USCMDC XUSCMDC>
        dx = (14 + dt) / 18 + 1;
        dy = (14 + dt) % 18;
        
        rRef = <device USCMDC @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USCMDC_%d_%d", lsx+dx, lsy+dy);
        device USCMDC  ( symbol logsym_1 )  *strVar  @[gsx+130, gsy+240 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    for ( dt = 0; dt < 6; dt += 1 )
    {
      // draw <USSMMUX XUSSMMUX>
        dx = (4 + 3 * dt) / 18 + 2;
        dy = (4 + 3 * dt) % 18;
        
        rRef = <device USSMMUX @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USSMMUX_%d_%d", lsx+dx, lsy+dy);
        device USSMMUX  ( symbol logsym )  *strVar  @[gsx+810, gsy+210 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 1;
        rRef = <device USSMMUX_TEST @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USSMMUX_TEST_%d_%d", lsx+dx, lsy+dy);
        device USSMMUX_TEST  ( symbol logsym )  *strVar  @[gsx+810, gsy+260 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dx = (dy + 1) / 18 + dx;            // when dt == 4, dy == 16 + 1; then dy + 1 == 18, this is dx should be dx + 1
        dy = (dy + 1) % 18;
        rRef = <device USSMMUX_OUT @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USSMMUX_OUT_%d_%d", lsx+dx, lsy+dy);
        device USSMMUX_OUT  ( symbol logsym )  *strVar  @[gsx+860, gsy+235 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    gsy += 1200;
    
    for ( dt = 0; dt < 4; dt += 1 )
    {
      // draw <USCMMUX XUSCMMUX>
        dx = 1;
        dy = 3 * dt;
        
        rRef = <device USCMMUX_TEST @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USCMMUX_TEST_%d_%d", lsx+dx, lsy+dy);
        device USCMMUX_TEST  ( symbol logsym_1 )  *strVar  @[gsx+280, gsy+260 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 1;
        rRef = <device USCMMUX @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USCMMUX_%d_%d", lsx+dx, lsy+dy);
        device USCMMUX  ( symbol logsym_1 )  *strVar  @[gsx+280, gsy+210 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 1;
        rRef = <device USCMMUX_OUT @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USCMMUX_OUT_%d_%d", lsx+dx, lsy+dy);
        device USCMMUX_OUT  ( symbol logsym_1 )  *strVar  @[gsx+230, gsy+235 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        if ( dt % 2 == 1 )      // dt = 0 (1) 2 (3)
        {
            unsigned int tmp_dt = dt / 2;
            
          // draw <USCMD XUSCMD>
            dx = 1;
            dy = 12 + tmp_dt;
            
            rRef = <device USCMD @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "USCMD_%d_%d", lsx+dx, lsy+dy);
            device USCMD  ( symbol logsym_1 )  *strVar  @[gsx+180, gsy+290 + 200*tmp_dt];
            map
            (
                 <instance *strVar>   => rRef
            );
            
          // draw <USCMDC XUSCMDC>
            dx = 2;
            dy = 2 + tmp_dt;
            
            rRef = <device USCMDC @[lsx+dx, lsy+dy] of ARCHITECTURE>;
            sprintf(strVar, "USCMDC_%d_%d", lsx+dx, lsy+dy);
            device USCMDC  ( symbol logsym_1 )  *strVar  @[gsx+130, gsy+290 + 200*tmp_dt];
            map
            (
                 <instance *strVar>   => rRef
            );
        }
    }
    
    for ( dt = 0; dt < 2; dt += 1 )
    {
      // draw <USSMMUX XUSSMMUX>
        dx = 3;
        dy = 4 + 3 * dt;
        
        rRef = <device USSMMUX @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USSMMUX_%d_%d", lsx+dx, lsy+dy);
        device USSMMUX  ( symbol logsym )  *strVar  @[gsx+810, gsy+210 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 1;
        rRef = <device USSMMUX_TEST @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USSMMUX_TEST_%d_%d", lsx+dx, lsy+dy);
        device USSMMUX_TEST  ( symbol logsym )  *strVar  @[gsx+810, gsy+260 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 1;
        rRef = <device USSMMUX_OUT @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USSMMUX_OUT_%d_%d", lsx+dx, lsy+dy);
        device USSMMUX_OUT  ( symbol logsym )  *strVar  @[gsx+860, gsy+235 + 100*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
    }
    
  // Part2
    gsy -= 2400;
    
    dx2 = 0;                // dx2 = (2 * dt) / 18 + 0; => dx2 = 0;
    //for ( dt = 0; dt < 8; dt += 1 )
    //{
    //  // drwa <PGC_BUFFERX1 XPGC_BUFFERX1>
    //    dy2 = 2 * dt;       // dy2 = (2 * dt) % 18; => dy2 = 2 * dt;
    //    
    //    rRef = <device PGC_BUFFERX1 @[lsx+dx2, lsy+dy2] of ARCHITECTURE>;
    //    sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx2, lsy+dy2);
    //    device PGC_BUFFERX1  ( symbol logsym_1 )  *strVar  @[gsx+90, gsy+910 + 10*dt];
    //    map
    //    (
    //         <instance *strVar>   => rRef
    //    );
    //    
    //    rRef = <device PGC_BUFFERX1 @[lsx+dx2, lsy+dy2+1] of ARCHITECTURE>;
    //    sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx2, lsy+dy2+1);
    //    device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+905, gsy+910 + 10*dt];
    //    map
    //    (
    //         <instance *strVar>   => rRef
    //    );
    //}
    
    //for ( dt = 0; dt < 8; dt += 1 )
    //{
    //  // drwa <PGC_BUFFERX1 XPGC_BUFFERX1_SIG>
    //    dx2 = (16 + 2 * dt) / 18;
    //    dy2 = (16 + 2 * dt) % 18;
    //    
    //    rRef = <device PGC_BUFFERX1 @[lsx+dx2, lsy+dy2] of ARCHITECTURE>;
    //    sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx2, lsy+dy2);
    //    device PGC_BUFFERX1  ( symbol logsym_1 )  *strVar  @[gsx+90, gsy+820 + 10*dt];
    //    map
    //    (
    //         <instance *strVar>   => rRef
    //    );
    //    
    //    rRef = <device PGC_BUFFERX1 @[lsx+dx2, lsy+dy2+1] of ARCHITECTURE>;
    //    sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx2, lsy+dy2+1);
    //    device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+905, gsy+820 + 10*dt];
    //    map
    //    (
    //         <instance *strVar>   => rRef
    //    );
    //}
    
  // Part3
    for ( dt = 0; dt < 4; dt += 1 )
    {
        dx = (11 + dt) / 18 + 3;
        dy = (11 + dt) % 18;
        rRef = <device IOCKBRGMUX @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKBRGMUX_%d_%d", lsx+dx, lsy+dy);
        device IOCKBRGMUX  ( symbol logsym )  *strVar  @[gsx+490, gsy+140 + 160*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dx = (15 + dt) / 18 + 3;
        dy = (15 + dt) % 18;
        rRef = <device IOCKBRGMUX_TEST @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKBRGMUX_TEST_%d_%d", lsx+dx, lsy+dy);
        device IOCKBRGMUX_TEST  ( symbol logsym )  *strVar  @[gsx+490, gsy+220 + 160*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dx = (1 + dt) / 18 + 4;
        dy = (1 + dt) % 18;
        rRef = <device IOCKBRGMUX_OUT @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKBRGMUX_OUT_%d_%d", lsx+dx, lsy+dy);
        device IOCKBRGMUX_OUT  ( symbol logsym )  *strVar  @[gsx+590, gsy+180 + 160*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    for ( dt = 0; dt < 2; dt += 1 )
    {
        dx = 4;
        dy = 5 + dt;
        
        rRef = <device IOCKBRG @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKBRG_%d_%d", lsx+dx, lsy+dy);
        device IOCKBRG  ( symbol logsym )  *strVar  @[gsx+640, gsy+280 + 320*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dx2 = (16 + 2 * dt) / 18 + 1;
        dy2 = (16 + 2 * dt) % 18;
        
        //rRef = <device PGC_BUFFERX1 @[lsx+dx2, lsy+dy2] of ARCHITECTURE>;
        //sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx2, lsy+dy2);
        //device PGC_BUFFERX1  ( symbol logsym_1 )  *strVar  @[gsx+90, gsy+780 + 10*dt];
        //map
        //(
        //     <instance *strVar>   => rRef
        //);
        //
        //rRef = <device PGC_BUFFERX1 @[lsx+dx2, lsy+dy2+1] of ARCHITECTURE>;
        //sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx2, lsy+dy2+1);
        //device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+905, gsy+780 + 10*dt];
        //map
        //(
        //     <instance *strVar>   => rRef
        //);
    }
    
    dx = 3;
    //for ( dt = 0; dt < 4; dt += 1 )
    //{
    //    dy = dt;
    //    
    //    rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
    //    sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
    //    device PGC_BUFFERX1  ( symbol logsym_1 )  *strVar  @[gsx+90, gsy+20 + 10*dt];
    //    map
    //    (
    //         <instance *strVar>   => rRef
    //    );
    //}
    
    dx = 4;
    //for ( dt = 0; dt < 10; dt += 1 )
    //{
    //    dy = dt;
    //    
    //    rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
    //    sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
    //    device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+905, gsy+20 + 10*dt];
    //    map
    //    (
    //         <instance *strVar>   => rRef
    //    );
    //}
    
  // Part4
    gsx -= 1200;
    rRef = <device CKEB @[lsx+4, lsy+9] of ARCHITECTURE>;
    sprintf(strVar, "CKEB_%d_%d", lsx+4, lsy+9);
    device CKEB  ( symbol logsym )  *strVar  @[gsx+680, gsy+1020];
    map
    (
         <instance *strVar>   => rRef
    );
    
}; // end of function draw_uscm_tile


/**VFunction******************************************************************************

  Author    [jhxie]

  Abstract  [Draw logic_ckeb tile]

*****************************************************************************************/
function draw_ckeb_tile
(
    unsigned int tx,
    unsigned int ty
)
{
    unsigned int lsx, lsy, gsx, gsy;

    // device reference variables
    &device rRef;
    string strVar;
    
    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
    rRef = <device CKEB @[lsx, lsy] of ARCHITECTURE>;
    sprintf(strVar, "CKEB_%d_%d", lsx, lsy);
    device CKEB  ( symbol logsym )  *strVar  @[gsx+680, gsy+1020];
    map
    (
         <instance *strVar>   => rRef
    );
    
}; // end of function draw_ckeb_tile

function draw_ckeb2_tile
(
    unsigned int tx,
    unsigned int ty
)
{
    draw_ckeb_tile(tx, ty);
    
  //58 PGC_BUFFERX1
    
}; // end of function draw_ckeb2_tile

function draw_ckebd_tile
(
    unsigned int tx,
    unsigned int ty
)
{
    unsigned int lsx, lsy, gsx, gsy;

    // device reference variables
    &device rRef;
    string strVar;

    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;

    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;

    rRef = <device CKEB @[lsx, lsy] of ARCHITECTURE>;
    sprintf(strVar, "CKEB_%d_%d", lsx, lsy);
    device CKEB  ( symbol logsym )  *strVar  @[gsx+680, gsy+1020];
    map
    (
         <instance *strVar>   => rRef
    );

}; // end of function draw_ckebd_tile


function draw_iock_7km_tile
(
    unsigned int tx,
    unsigned int ty
)
{
    unsigned int lsx, lsy, gsx, gsy;
    unsigned int dt, dx, dy;

    // device reference variables
    &device rRef;
    string strVar;
    
    lsx = tx * NUM_GRID_X + 3;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
    for ( dt = 0; dt < 2; dt += 1 )
    {
  // Part1
        dx = 1;
        
        dy = 2 - dt;
        rRef = <device CLKDLY @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CLKDLY_%d_%d", lsx+dx, lsy+dy);
        device CLKDLY  ( symbol logsym_w )  *strVar  @[gsx+740, gsy+360 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy = 4 - dt;
        rRef = <device CLKDLYMUX @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CLKDLYMUX_%d_%d", lsx+dx, lsy+dy);
        device CLKDLYMUX  ( symbol logsym_w )  *strVar  @[gsx+820, gsy+280 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy = 5 + dt;
        rRef = <device CLKDLYMUX_TEST @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CLKDLYMUX_TEST_%d_%d", lsx+dx, lsy+dy);
        device CLKDLYMUX_TEST  ( symbol logsym_w )  *strVar  @[gsx+820, gsy+400 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy = 7 + dt;
        rRef = <device CLKDLYMUX_OUT @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CLKDLYMUX_OUT_%d_%d", lsx+dx, lsy+dy);
        device CLKDLYMUX_OUT  ( symbol logsym_w )  *strVar  @[gsx+860, gsy+340 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    gsy += 1200;
    for ( dt = 0; dt < 2; dt += 1 )
    {
  // Part2
        dx = 0;
        
        dy = dt;
        rRef = <device IOCKPREMUX @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKPREMUX_%d_%d", lsx+dx, lsy+dy);
        device IOCKPREMUX  ( symbol logsym_w )  *strVar  @[gsx+820, gsy+280 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 2;
        rRef = <device IOCKPREMUX_TEST @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKPREMUX_TEST_%d_%d", lsx+dx, lsy+dy);
        device IOCKPREMUX_TEST  ( symbol logsym_w )  *strVar  @[gsx+820, gsy+400 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 2;
        rRef = <device IOCKPREMUX_OUT @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKPREMUX_OUT_%d_%d", lsx+dx, lsy+dy);
        device IOCKPREMUX_OUT  ( symbol logsym_w )  *strVar  @[gsx+860, gsy+340 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    gsy += 1200;
    for ( dt = 0; dt < 2; dt += 1 )
    {
  // Part3
        dx = 0;
        
        dy = 10 + dt;
        rRef = <device IOCKMUX @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKMUX_%d_%d", lsx+dx, lsy+dy);
        device IOCKMUX  ( symbol logsym_w )  *strVar  @[gsx+820, gsy+280 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 1;
        rRef = <device IOCKMUX_TEST @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKMUX_TEST_%d_%d", lsx+dx, lsy+dy);
        device IOCKMUX_TEST  ( symbol logsym_w )  *strVar  @[gsx+820, gsy+400 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 2;
        rRef = <device IOCKMUX_OUT @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKMUX_OUT_%d_%d", lsx+dx, lsy+dy);
        device IOCKMUX_OUT  ( symbol logsym_w )  *strVar  @[gsx+860, gsy+340 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
  // Part4
        dy = 15 + dt;
        rRef = <device IOCKGATE @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKGATE_%d_%d", lsx+dx, lsy+dy);
        device IOCKGATE  ( symbol logsym_w )  *strVar  @[gsx+901, gsy+360 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dx = (18 - dt) / 18;
        dy = (18 - dt) % 18;
        rRef = <device CLKDIV @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CLKDIV_%d_%d", lsx+dx, lsy+dy);
        device CLKDIV  ( symbol logsym )  *strVar  @[gsx+940, gsy+360 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    gsy -= 1200;
  // Part5
  //rRef = <device PGC_BUFFERX1 @[lsx, lsy+6] of ARCHITECTURE>;
  //sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
  //device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+920, gsy+513];
  //map
  //(
  //      <instance *strVar>   => rRef
  //);
  //
  //rRef = <device PGC_BUFFERX1 @[lsx, lsy+7] of ARCHITECTURE>;
  //sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
  //device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+920, gsy+523];
  //map
  //(
  //      <instance *strVar>   => rRef
  //);
  
  
  //dx = 0;
  //for ( dt = 0; dt < 2; dt += 1 )
  //{
  //    dy = 6 + 2*dt;
  //    rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
  //    sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
  //    device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+920, gsy+513 + 50*dt];
  //    map
  //    (
  //         <instance *strVar>   => rRef
  //    );
  //    
  //    dy += 1;
  //    rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
  //    sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
  //    device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+920, gsy+523 + 50*dt];
  //    map
  //    (
  //         <instance *strVar>   => rRef
  //    );
  //    
  //    dy = 12 - 2*dt;   // (0, 12) 4; (0, 13) 6.
  //    rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
  //    sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
  //    device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+960, gsy+638 + 50*dt];
  //    map
  //    (
  //         <instance *strVar>   => rRef
  //    );
  //    
  //    dy += 1;
  //    rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
  //    sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
  //    device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+960, gsy+648 + 50*dt];
  //    map
  //    (
  //         <instance *strVar>   => rRef
  //    );
  //}
  //
  //dx = 2;               // (2, 0) 54;
  //for ( dt = 0; dt < 4; dt += 1 )
  //{
  //    dy = 7 + dt;
  //    rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
  //    sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
  //    device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+1080, gsy+628 + 10*dt];
  //    map
  //    (
  //         <instance *strVar>   => rRef
  //    );
  //    
  //    dy += 4;
  //    rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
  //    sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
  //    device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+1080, gsy+678 + 10*dt];
  //    map
  //    (
  //         <instance *strVar>   => rRef
  //    );
  //}
  //
  //gsy -= 1200;
  //
  
  //rRef = <device PGC_BUFFERX1 @[lsx+1, lsy+5] of ARCHITECTURE>;
  //sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
  //device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+1000, gsy+490 + 10*5];
  //map
  //(
  //      <instance *strVar>   => rRef
  //);
  
  
  //dx = 1;
  //for ( dt = 0; dt < 6; dt += 1 )
  //{
  //    dy = dt;
  //    rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
  //    sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
  //    device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+1000, gsy+490 + 10*dt];
  //    map
  //    (
  //         <instance *strVar>   => rRef
  //    );
  //}
  //
  //dx = 2;
  //for ( dt = 0; dt < 2; dt += 1 )
  //{
  //    dy = dt;
  //    rRef = <device PGC_BUFFERX1 @[lsx+dx, lsy+dy] of ARCHITECTURE>;
  //    sprintf(strVar, "PGC_BUFFERX1_%d_%d", lsx+dx, lsy+dy);
  //    device PGC_BUFFERX1  ( symbol logsym )  *strVar  @[gsx+1020, gsy+480 + 70*dt];
  //    map
  //    (
  //         <instance *strVar>   => rRef
  //    );
  //}
  //
  //gsy += 1200;
    
  // Part6
    rRef = <device CKEB @[lsx+1, lsy+12] of ARCHITECTURE>;
    sprintf(strVar, "CKEB_%d_%d", lsx+1, lsy+12);
    device CKEB  ( symbol logsym )  *strVar  @[gsx+680, gsy+1020];
    map
    (
         <instance *strVar>   => rRef
    );
    
    rRef   = <device SFB @[lsx,lsy] of ARCHITECTURE>;
    sprintf(strVar, "SFB_%d_%d", lsx, lsy);
    device SFB ( symbol logsym ) *strVar @[gsx+740,gsy+470 - 1200];
    map
    (
        <instance *strVar>   => rRef
    );
    
    rRef   = <device SFB @[lsx+1,lsy+12] of ARCHITECTURE>;
    sprintf(strVar, "SFB_%d_%d", lsx+1, lsy+12);
    device SFB ( symbol logsym ) *strVar @[gsx+740,gsy+470 + 1200];
    map
    (
        <instance *strVar>   => rRef
    );
    
}; // end of function draw_iock_7km_tile

function draw_iock_7km1_tile
(
    unsigned int tx,
    unsigned int ty
)
{
    unsigned int lsx, lsy, gsx, gsy;
    unsigned int dt, dx, dy;

    // device reference variables
    &device rRef;
    string strVar;
    
    lsx = tx * NUM_GRID_X + 3;
    lsy = ty * NUM_GRID_Y;
    
    gsx = (lsx/NUM_GRID_X) * TILE_NUM_GUI_GRID_X;
    gsy = (lsy/NUM_GRID_Y) * TILE_NUM_GUI_GRID_Y;
    
    for ( dt = 0; dt < 2; dt += 1 )
    {
  // Part1
        dx = 1;
        
        dy = 2 - dt;
        rRef = <device CLKDLY @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CLKDLY_%d_%d", lsx+dx, lsy+dy);
        printf("CLKDLY x = %d,y = %d",gsx+740,gsy+360 + 300*dt);
        device CLKDLY  ( symbol logsym_w )  *strVar  @[gsx+740, gsy+360 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        //dy = 4 - dt;
        //rRef = <device CLKDLYMUX @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        //sprintf(strVar, "CLKDLYMUX_%d_%d", lsx+dx, lsy+dy);
        //device CLKDLYMUX  ( symbol logsym_w )  *strVar  @[gsx+820, gsy+280 + 300*dt];
        //map
        //(
        //     <instance *strVar>   => rRef
        //);
        
        dy = 5 + dt;
        rRef = <device CLKDLYMUX_TEST @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CLKDLYMUX_TEST_%d_%d", lsx+dx, lsy+dy);
        printf("CLKDLYMUX_TEST x = %d,y = %d",gsx+820, gsy+400 + 300*dt);
        device CLKDLYMUX_TEST  ( symbol logsym_w )  *strVar  @[gsx+820, gsy+400 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy = 7 + dt;
        rRef = <device CLKDLYMUX_OUT @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CLKDLYMUX_OUT_%d_%d", lsx+dx, lsy+dy);
        printf("CLKDLYMUX_OUT x = %d,y = %d",gsx+860, gsy+340 + 300*dt);
        device CLKDLYMUX_OUT  ( symbol logsym_w )  *strVar  @[gsx+860, gsy+340 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
//    gsy += 1200;
//    for ( dt = 0; dt < 2; dt += 1 )
//    {
//  // Part2
//        dx = 0;
//        
//        dy = dt;
//        rRef = <device IOCKPREMUX_7KM @[lsx+dx, lsy+dy] of ARCHITECTURE>;
//        sprintf(strVar, "IOCKPREMUX_7KM_%d_%d", lsx+dx, lsy+dy);
//        device IOCKPREMUX_7KM  ( symbol logsym_w )  *strVar  @[gsx+820, gsy+280 + 300*dt];
//        map
//        (
//             <instance *strVar>   => rRef
//        );
//        
//        dy += 2;
//        rRef = <device IOCKPREMUX_7KM_TEST @[lsx+dx, lsy+dy] of ARCHITECTURE>;
//        sprintf(strVar, "IOCKPREMUX_7KM_TEST_%d_%d", lsx+dx, lsy+dy);
//        device IOCKPREMUX_7KM_TEST  ( symbol logsym_w )  *strVar  @[gsx+820, gsy+400 + 300*dt];
//        map
//        (
//             <instance *strVar>   => rRef
//        );
//        
//        dy += 2;
//        rRef = <device IOCKPREMUX_7KM_OUT @[lsx+dx, lsy+dy] of ARCHITECTURE>;
//        sprintf(strVar, "IOCKPREMUX_7KM_OUT_%d_%d", lsx+dx, lsy+dy);
//        device IOCKPREMUX_7KM_OUT  ( symbol logsym_w )  *strVar  @[gsx+860, gsy+340 + 300*dt];
//        map
//        (
//             <instance *strVar>   => rRef
//        );
//    }
    
    gsy += 1200;
    for ( dt = 0; dt < 2; dt += 1 )
    {
  // Part3
        dx = 0;
        
        dy = 10 + dt;
        rRef = <device IOCKMUX @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKMUX_%d_%d", lsx+dx, lsy+dy);
        printf("IOCKMUX x = %d,y = %d",gsx+820, gsy+280 + 300*dt);
        device IOCKMUX  ( symbol logsym_w )  *strVar  @[gsx+820, gsy+280 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 1;
        rRef = <device IOCKMUX_TEST @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKMUX_TEST_%d_%d", lsx+dx, lsy+dy);
        printf("IOCKMUX_TEST x = %d,y = %d",gsx+820, gsy+400 + 300*dt);
        device IOCKMUX_TEST  ( symbol logsym_w )  *strVar  @[gsx+820, gsy+400 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dy += 2;
        rRef = <device IOCKMUX_OUT @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKMUX_OUT_%d_%d", lsx+dx, lsy+dy);
        printf("IOCKMUX_OUT x = %d,y = %d",gsx+860, gsy+340 + 300*dt);
        device IOCKMUX_OUT  ( symbol logsym_w )  *strVar  @[gsx+860, gsy+340 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
  // Part4
        dy = 15 + dt;
        rRef = <device IOCKGATE @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOCKGATE_%d_%d", lsx+dx, lsy+dy);
        printf("IOCKGATE x = %d,y = %d",gsx+920, gsy+280 + 300*dt);
        device IOCKGATE  ( symbol logsym_w )  *strVar  @[gsx+920, gsy+280 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
        
        dx = (18 - dt) / 18;
        dy = (18 - dt) % 18;
        rRef = <device CLKDIV @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CLKDIV_%d_%d", lsx+dx, lsy+dy);
        printf("CLKDIV x = %d,y = %d",gsx+940, gsy+360 + 300*dt);
        device CLKDIV  ( symbol logsym )  *strVar  @[gsx+940, gsy+360 + 300*dt];
        map
        (
             <instance *strVar>   => rRef
        );
    }
    
    //gsy -= 1200;
  
  //gsy += 1200;
    
  // Part6
    rRef = <device CKEB @[lsx+1, lsy+12] of ARCHITECTURE>;
    sprintf(strVar, "CKEB_%d_%d", lsx+1, lsy+12);
    printf("CKEB x = %d,y = %d",gsx+680, gsy+1020);
    device CKEB  ( symbol logsym )  *strVar  @[gsx+680, gsy+1020];
    map
    (
         <instance *strVar>   => rRef
    );
    
    rRef   = <device SFB @[lsx,lsy] of ARCHITECTURE>;
    sprintf(strVar, "SFB_%d_%d", lsx, lsy);
    printf("SFB x = %d,y = %d",gsx+740,gsy+470 - 1200);
    device SFB ( symbol logsym ) *strVar @[gsx+740,gsy+470 - 1200];
    map
    (
        <instance *strVar>   => rRef
    );
    
    rRef   = <device SFB @[lsx+1,lsy+12] of ARCHITECTURE>;
    sprintf(strVar, "SFB_%d_%d", lsx+1, lsy+12);
    printf("SFB x = %d,y = %d",gsx+740,gsy+470 + 1200);
    device SFB ( symbol logsym ) *strVar @[gsx+740,gsy+470 + 1200];
    map
    (
        <instance *strVar>   => rRef
    );
    
    rRef = <device CLKDLY @[lsx+2, lsy+1] of ARCHITECTURE>;
    sprintf(strVar, "CLKDLY_%d_%d", lsx+2, lsy+1);
    printf("CLKDLY x = %d,y = %d",gsx, gsy + 40);
    device CLKDLY  ( symbol logsym_s )  *strVar  @[gsx, gsy + 40];
    map
    (
        <instance *strVar>   => rRef
    );
    
    rRef = <device CLKDLY @[lsx+2, lsy+2] of ARCHITECTURE>;
    sprintf(strVar, "CLKDLY_%d_%d", lsx+2, lsy+2);
    printf("CLKDLY x = %d,y = %d",gsx, gsy + 80);
    device CLKDLY  ( symbol logsym_s )  *strVar  @[gsx, gsy + 80];
    map
    (
        <instance *strVar>   => rRef
    );
    
    rRef = <device CLKDLY @[lsx, lsy+8] of ARCHITECTURE>;
    sprintf(strVar, "CLKDLY_%d_%d", lsx, lsy+8);
    printf("CLKDLY x = %d,y = %d",gsx, gsy + 320);
    device CLKDLY  ( symbol logsym_s )  *strVar  @[gsx, gsy + 320];
    map
    (
        <instance *strVar>   => rRef
    );
    
    rRef = <device CLKDLY @[lsx, lsy+9] of ARCHITECTURE>;
    sprintf(strVar, "CLKDLY_%d_%d", lsx, lsy+9);
    printf("CLKDLY x = %d,y = %d",gsx, gsy + 360);
    device CLKDLY  ( symbol logsym_s )  *strVar  @[gsx, gsy + 360];
    map
    (
        <instance *strVar>   => rRef
    );
    
    dx = 2;
    for( dt = 0; dt < 6; dt += 1 )
    {
        dy = dt + 3;
        rRef = <device CLKDLYMUX @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CLKDLYMUX_%d_%d", lsx+dx, lsy+dy);
        printf("CLKDLYMUX x = %d,y = %d",gsx+860, gsy+320 + 300*dt);
        device CLKDLYMUX  ( symbol logsym_s )  *strVar  @[gsx+860, gsy+320 + 300*dt];
        map
        (
            <instance *strVar>   => rRef
        );
    }
    
    for( dt = 0; dt < 4; dt += 1 )
    {
        dy = dt + 9;
        rRef = <device CLKDLYMUX_TEST @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CLKDLYMUX_TEST_%d_%d", lsx+dx, lsy+dy);
        printf("CLKDLYMUX_TEST x = %d,y = %d",gsx+820, gsy+2000 + 300*dt);
        device CLKDLYMUX_TEST  ( symbol logsym_w )  *strVar  @[gsx+820, gsy+2000 + 300*dt];
        map
        (
            <instance *strVar>   => rRef
        );
    }
    
    for( dt = 0; dt < 4; dt += 1 )
    {
        dy = dt + 13;
        rRef = <device CLKDLYMUX_OUT @[lsx+dx, lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CLKDLYMUX_OUT_%d_%d", lsx+dx, lsy+dy);
        printf("CLKDLYMUX_OUT x = %d,y = %d",gsx+920, gsy+340 + 300*dt);
        device CLKDLYMUX_OUT  ( symbol logsym_w )  *strVar  @[gsx+920, gsy+340 + 300*dt];
        map
        (
            <instance *strVar>   => rRef
        );
    }
    
}; // end of function draw_iock_7km1_tile


};

