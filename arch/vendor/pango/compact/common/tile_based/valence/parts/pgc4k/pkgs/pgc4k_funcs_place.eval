use pgc_defs,pgc4k_defs;
use pgc_ANALOG_4K_SRB_inc,pgc_CLMS_SRB_inc,pgc_CCS_4K_SRB_inc;

package pgc4k_funcs_place
{
/********************************************************************************
********************************************************************************/
function place_cram_ctrl_tile(unsigned int tx,ty,tx_ccs,ty_ccs,tx_analog,ty_analog)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    string strVar;

    sprintf(strVar,"ntDATA_%d_%d",sx,sy);
    &wire ntRef_ntDATA[2143:0] = wire *strVar[2143:0];
    
    sprintf(strVar,"ntDATAN_%d_%d",sx,sy);
    &wire ntRef_ntDATAN[2143:0] = wire *strVar[2143:0];
    
    sprintf(strVar,"ntDATA_R_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_NEXT[2143:0] = wire *strVar[2143:0];
    
    sprintf(strVar,"ntDATAN_R_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_NEXT[2143:0] = wire *strVar[2143:0];
    
    sprintf(strVar,"ntDATA_L_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_NEXT[2143:0] = wire *strVar[2143:0];
    
    sprintf(strVar,"ntDATAN_L_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_NEXT[2143:0] = wire *strVar[2143:0];
    
    sprintf(strVar,"ntDATA_BACK_%d_%d",sx,sy);
    &wire ntRef_ntDATA_BACK[31:0] = wire *strVar[31:0];
    
    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[489:0] = wire *strVar[489:0];
    
    sprintf(strVar,"ntCOLUMN_INC_%d_%d",sx,sy);
    &wire ntRef_ntCOLUMN_INC = wire *strVar;
    
    sprintf(strVar,"ntMCE_OU_%d_%d",sx,sy);
    &wire ntRef_ntMCE_OU = wire *strVar;
    
    sprintf(strVar,"ntMWR_OU_%d_%d",sx,sy);
    &wire ntRef_ntMWR_OU = wire *strVar;
    
    sprintf(strVar,"ntMCLKB_OU_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OU = wire *strVar;
    
    sprintf(strVar,"ntMCE_OD_%d_%d",sx,sy);
    &wire ntRef_ntMCE_OD = wire *strVar;
    
    sprintf(strVar,"ntMWR_OD_%d_%d",sx,sy);
    &wire ntRef_ntMWR_OD = wire *strVar;
    
    sprintf(strVar,"ntMCLKB_OD_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OD = wire *strVar;
    
    sprintf(strVar,"ntNONDRM_END_%d_%d",sx,sy);
    &wire ntRef_ntNONDRM_END = wire *strVar;
    
    sprintf(strVar,"ntMASK_N_%d_%d",sx,sy);
    &wire ntRef_ntMASK_N[19:0] = wire *strVar[19:0];
    
    sprintf(strVar,"ntREAD2T_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T[15:0] = wire *strVar[15:0];
    
    sprintf(strVar,"ntGLOGEN_OUTL_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUTL[9:0] = wire *strVar[9:0];
    
    sprintf(strVar,"ntGLOGEN_OUTR_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUTR[8:0] = wire *strVar[8:0];
    
    sprintf(strVar,"ntGWEN_OUTL_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OUTL[9:0] = wire *strVar[9:0];
    
    sprintf(strVar,"ntGWEN_OUTR_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OUTR[8:0] = wire *strVar[8:0];
    
    sprintf(strVar,"ntGRS_N_OUTL_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OUTL[9:0] = wire *strVar[9:0];
    
    sprintf(strVar,"ntGRS_N_OUTR_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OUTR[8:0] = wire *strVar[8:0];
    
    sprintf(strVar,"ntPOR_N_OUTL_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OUTL[9:0] = wire *strVar[9:0];
    
    sprintf(strVar,"ntPOR_N_OUTR_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OUTR[8:0] = wire *strVar[8:0];
    
    sprintf(strVar,"ntPUP_REL_N_OUTL_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OUTL[9:0] = wire *strVar[9:0];
    
    sprintf(strVar,"ntPUP_REL_N_OUTR_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OUTR[8:0] = wire *strVar[8:0];

    sprintf(strVar, "CRAM_CTRL_4K_TILE_%d_%d", sx, sy);
      device CRAM_CTRL_4K_TILE *strVar
        port map(
                    DATA           => ntRef_ntDATA,          
                    DATAN          => ntRef_ntDATAN,         
                    DATA_R_NEXT    => ntRef_ntDATA_R_NEXT,   
                    DATAN_R_NEXT   => ntRef_ntDATAN_R_NEXT,  
                    DATA_L_NEXT    => ntRef_ntDATA_L_NEXT,   
                    DATAN_L_NEXT   => ntRef_ntDATAN_L_NEXT,  
                    DATA_BACK      => ntRef_ntDATA_BACK,     
                    ADDR           => ntRef_ntADDR,          
                    COLUMN_INC     => ntRef_ntCOLUMN_INC,    
                    MCE_OU         => ntRef_ntMCE_OU,        
                    MWR_OU         => ntRef_ntMWR_OU,        
                    MCLKB_OU       => ntRef_ntMCLKB_OU,      
                    MCE_OD         => ntRef_ntMCE_OD,        
                    MWR_OD         => ntRef_ntMWR_OD,        
                    MCLKB_OD       => ntRef_ntMCLKB_OD,      
                    NONDRM_END     => ntRef_ntNONDRM_END,    
                    MASK_N         => ntRef_ntMASK_N,        
                    READ2T         => ntRef_ntREAD2T,        
                    GLOGEN_OUTL    => ntRef_ntGLOGEN_OUTL,   
                    GLOGEN_OUTR    => ntRef_ntGLOGEN_OUTR,   
                    GWEN_OUTL      => ntRef_ntGWEN_OUTL,     
                    GWEN_OUTR      => ntRef_ntGWEN_OUTR,     
                    GRS_N_OUTL     => ntRef_ntGRS_N_OUTL,    
                    GRS_N_OUTR     => ntRef_ntGRS_N_OUTR,    
                    POR_N_OUTL     => ntRef_ntPOR_N_OUTL,    
                    POR_N_OUTR     => ntRef_ntPOR_N_OUTR,    
                    PUP_REL_N_OUTL => ntRef_ntPUP_REL_N_OUTL,
                    PUP_REL_N_OUTR => ntRef_ntPUP_REL_N_OUTR
                )
        @([sx,sy]);  

}// end of function place_cram_ctrl_tile
/********************************************************************************
********************************************************************************/
function place_ioblr_tile(unsigned int tx,ty)
{
    unsigned int sx, sy; 
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;


    string strVar;
    if(tx==0)
    {
    sprintf(strVar,"ntDIN_%d_%d",sx,sy);
    &wire ntRef_ntDIN[71:0] = wire *strVar[71:0];
    
    sprintf(strVar,"ntDONE_DIN_%d_%d",sx,sy);
    &wire ntRef_ntDONE_DIN = wire *strVar;
    
    sprintf(strVar,"ntEFB_CLK_%d_%d",sx,sy);
    &wire ntRef_ntEFB_CLK = wire *strVar;
    
    sprintf(strVar,"ntEFB_DIN_%d_%d",sx,sy);
    &wire ntRef_ntEFB_DIN = wire *strVar;
    
    sprintf(strVar,"ntEFB_STR_%d_%d",sx,sy);
    &wire ntRef_ntEFB_STR = wire *strVar;
    
    sprintf(strVar,"ntGOUTEN_BUF_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_BUF = wire *strVar;
    
    sprintf(strVar,"ntINITN_DIN_%d_%d",sx,sy);
    &wire ntRef_ntINITN_DIN = wire *strVar;
    
    sprintf(strVar,"ntJTAGEN_%d_%d",sx,sy);
    &wire ntRef_ntJTAGEN = wire *strVar;
    
    sprintf(strVar,"ntMODE1_BUF_%d_%d",sx,sy);
    &wire ntRef_ntMODE1_BUF = wire *strVar;
    
    sprintf(strVar,"ntMODE2_BUF_%d_%d",sx,sy);
    &wire ntRef_ntMODE2_BUF = wire *strVar;
    
    sprintf(strVar,"ntMODE3_BUF_%d_%d",sx,sy);
    &wire ntRef_ntMODE3_BUF = wire *strVar;
    
    sprintf(strVar,"ntPOR_N_O_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_O = wire *strVar;
    
    sprintf(strVar,"ntRSTN_%d_%d",sx,sy);
    &wire ntRef_ntRSTN = wire *strVar;
    
    sprintf(strVar,"ntS12_RST_BUF_%d_%d",sx,sy);
    &wire ntRef_ntS12_RST_BUF = wire *strVar;
    
    sprintf(strVar,"ntSCL_DIN_%d_%d",sx,sy);
    &wire ntRef_ntSCL_DIN = wire *strVar;
    
    sprintf(strVar,"ntSDA_DIN_%d_%d",sx,sy);
    &wire ntRef_ntSDA_DIN = wire *strVar;
    
    sprintf(strVar,"ntSHIFT_DR_BUF_%d_%d",sx,sy);
    &wire ntRef_ntSHIFT_DR_BUF = wire *strVar;
    
    sprintf(strVar,"ntSIO_VDDIO_DET_N_T_%d_%d",sx,sy);
    &wire ntRef_ntSIO_VDDIO_DET_N_T = wire *strVar;
    
    sprintf(strVar,"ntSPAL_CLK_%d_%d",sx,sy);
    &wire ntRef_ntSPAL_CLK = wire *strVar;
    
    sprintf(strVar,"ntSPAL_CS_N_%d_%d",sx,sy);
    &wire ntRef_ntSPAL_CS_N = wire *strVar;
    
    sprintf(strVar,"ntSPAL_DIN_%d_%d",sx,sy);
    &wire ntRef_ntSPAL_DIN[15:0] = wire *strVar[15:0];
    
    sprintf(strVar,"ntSPAL_RDWR_N_%d_%d",sx,sy);
    &wire ntRef_ntSPAL_RDWR_N = wire *strVar;
    
    sprintf(strVar,"ntTCK_BUF_O_%d_%d",sx,sy);
    &wire ntRef_ntTCK_BUF_O = wire *strVar;
    
    sprintf(strVar,"ntTCK_DIN_%d_%d",sx,sy);
    &wire ntRef_ntTCK_DIN = wire *strVar;
    
    sprintf(strVar,"ntTDI_DIN_%d_%d",sx,sy);
    &wire ntRef_ntTDI_DIN = wire *strVar;
    
    sprintf(strVar,"ntTDO_CCS_%d_%d",sx,sy);
    &wire ntRef_ntTDO_CCS = wire *strVar;
    
    sprintf(strVar,"ntTDO_INT_%d_%d",sx,sy);
    &wire ntRef_ntTDO_INT = wire *strVar;
    
    sprintf(strVar,"ntTMS_DIN_%d_%d",sx,sy);
    &wire ntRef_ntTMS_DIN = wire *strVar;
    
    sprintf(strVar,"ntUPDATE_DR_BUF_%d_%d",sx,sy);
    &wire ntRef_ntUPDATE_DR_BUF = wire *strVar;
    
    sprintf(strVar,"ntVH_%d_%d",sx,sy);
    &wire ntRef_ntVH = wire *strVar;
    
    sprintf(strVar,"ntVL_%d_%d",sx,sy);
    &wire ntRef_ntVL = wire *strVar;
    
    sprintf(strVar,"ntVREF_TEST_%d_%d",sx,sy);
    &wire ntRef_ntVREF_TEST = wire *strVar;


      sprintf(strVar, "IOB0_4K_TILE_%d_%d", sx, sy);
      device IOB0_4K_TILE *strVar
        port map(
                    DIN               => ntRef_ntDIN,              
                    DONE_DIN          => ntRef_ntDONE_DIN,         
                    EFB_CLK           => ntRef_ntEFB_CLK,          
                    EFB_DIN           => ntRef_ntEFB_DIN,          
                    EFB_STR           => ntRef_ntEFB_STR,          
                    GOUTEN_BUF        => ntRef_ntGOUTEN_BUF,       
                    INITN_DIN         => ntRef_ntINITN_DIN,        
                    JTAGEN            => ntRef_ntJTAGEN,           
                    MODE1_BUF         => ntRef_ntMODE1_BUF,        
                    MODE2_BUF         => ntRef_ntMODE2_BUF,        
                    MODE3_BUF         => ntRef_ntMODE3_BUF,        
                    POR_N_O           => ntRef_ntPOR_N_O,          
                    RSTN              => ntRef_ntRSTN,             
                    S12_RST_BUF       => ntRef_ntS12_RST_BUF,      
                    SCL_DIN           => ntRef_ntSCL_DIN,          
                    SDA_DIN           => ntRef_ntSDA_DIN,          
                    SHIFT_DR_BUF      => ntRef_ntSHIFT_DR_BUF,     
                    SIO_VDDIO_DET_N_T => ntRef_ntSIO_VDDIO_DET_N_T,
                    SPAL_CLK          => ntRef_ntSPAL_CLK,         
                    SPAL_CS_N         => ntRef_ntSPAL_CS_N,        
                    SPAL_DIN          => ntRef_ntSPAL_DIN,         
                    SPAL_RDWR_N       => ntRef_ntSPAL_RDWR_N,      
                    TCK_BUF_O         => ntRef_ntTCK_BUF_O,        
                    TCK_DIN           => ntRef_ntTCK_DIN,          
                    TDI_DIN           => ntRef_ntTDI_DIN,          
                    TDO_CCS           => ntRef_ntTDO_CCS,          
                    TDO_INT           => ntRef_ntTDO_INT,          
                    TMS_DIN           => ntRef_ntTMS_DIN,          
                    UPDATE_DR_BUF     => ntRef_ntUPDATE_DR_BUF,    
                    VH                => ntRef_ntVH,               
                    VL                => ntRef_ntVL,               
                    VREF_TEST         => ntRef_ntVREF_TEST
                )
        @([sx,sy]);

    }
    else
    {

      sprintf(strVar,"ntDIN_%d_%d",sx,sy);
      &wire ntRef_ntDIN[71:0] = wire *strVar[71:0];
      
      sprintf(strVar,"ntDIN_MIPI_LP_%d_%d",sx,sy);
      &wire ntRef_ntDIN_MIPI_LP[35:0] = wire *strVar[35:0];
      
      sprintf(strVar,"ntMISO_I_%d_%d",sx,sy);
      &wire ntRef_ntMISO_I = wire *strVar;
      
      sprintf(strVar,"ntMOSI_I_%d_%d",sx,sy);
      &wire ntRef_ntMOSI_I = wire *strVar;
      
      sprintf(strVar,"ntSCLK_%d_%d",sx,sy);
      &wire ntRef_ntSCLK = wire *strVar;
      
      sprintf(strVar,"ntSS_N_%d_%d",sx,sy);
      &wire ntRef_ntSS_N = wire *strVar;
      
      sprintf(strVar,"ntTCK_BUF_O_%d_%d",sx,sy);
      &wire ntRef_ntTCK_BUF_O = wire *strVar;
      
      sprintf(strVar,"ntTDO_INT_%d_%d",sx,sy);
      &wire ntRef_ntTDO_INT = wire *strVar;
      
      sprintf(strVar,"ntVREF_TEST_%d_%d",sx,sy);
      &wire ntRef_ntVREF_TEST = wire *strVar;

      sprintf(strVar, "IOB2_4K_TILE_%d_%d", sx, sy);
      device IOB2_4K_TILE *strVar 
        port map(
                       DIN         => ntRef_ntDIN,        
                       DIN_MIPI_LP => ntRef_ntDIN_MIPI_LP,
                       MISO_I      => ntRef_ntMISO_I,     
                       MOSI_I      => ntRef_ntMOSI_I,     
                       SCLK        => ntRef_ntSCLK,       
                       SS_N        => ntRef_ntSS_N,       
                       TCK_BUF_O   => ntRef_ntTCK_BUF_O,  
                       TDO_INT     => ntRef_ntTDO_INT,    
                       VREF_TEST   => ntRef_ntVREF_TEST
                )
        @([sx,sy]);

    }

}//end of place_ioblr_tile
/********************************************************************************
********************************************************************************/
function place_iobt_tile(unsigned int tx,ty)
{
    unsigned int sx, sy; 
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    string strVar;
    sprintf(strVar,"ntDIN_%d_%d",sx,sy);
    &wire ntRef_ntDIN[67:0] = wire *strVar[67:0];
    
    sprintf(strVar,"ntGOUTEN_O_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_O = wire *strVar;
    
    sprintf(strVar,"ntMODE1_O_%d_%d",sx,sy);
    &wire ntRef_ntMODE1_O = wire *strVar;
    
    sprintf(strVar,"ntMODE2_O_%d_%d",sx,sy);
    &wire ntRef_ntMODE2_O = wire *strVar;
    
    sprintf(strVar,"ntMODE3_O_%d_%d",sx,sy);
    &wire ntRef_ntMODE3_O = wire *strVar;
    
    sprintf(strVar,"ntPOR_N_O_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_O = wire *strVar;
    
    sprintf(strVar,"ntS12_RST_O_%d_%d",sx,sy);
    &wire ntRef_ntS12_RST_O = wire *strVar;
    
    sprintf(strVar,"ntSHIFT_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntSHIFT_DR_O = wire *strVar;
    
    sprintf(strVar,"ntTCK_BUF_O_%d_%d",sx,sy);
    &wire ntRef_ntTCK_BUF_O = wire *strVar;
    
    sprintf(strVar,"ntTDO_INT_%d_%d",sx,sy);
    &wire ntRef_ntTDO_INT = wire *strVar;
    
    sprintf(strVar,"ntUPDATE_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntUPDATE_DR_O = wire *strVar;
    
    sprintf(strVar,"ntVREF_TEST_%d_%d",sx,sy);
    &wire ntRef_ntVREF_TEST = wire *strVar;


    sprintf(strVar, "IOB1_4K_TILE_%d_%d", sx, sy);
    device IOB1_4K_TILE *strVar
      port map(
                    DIN         => ntRef_ntDIN,        
                    GOUTEN_O    => ntRef_ntGOUTEN_O,   
                    MODE1_O     => ntRef_ntMODE1_O,    
                    MODE2_O     => ntRef_ntMODE2_O,    
                    MODE3_O     => ntRef_ntMODE3_O,    
                    POR_N_O     => ntRef_ntPOR_N_O,    
                    S12_RST_O   => ntRef_ntS12_RST_O,  
                    SHIFT_DR_O  => ntRef_ntSHIFT_DR_O, 
                    TCK_BUF_O   => ntRef_ntTCK_BUF_O,  
                    TDO_INT     => ntRef_ntTDO_INT,    
                    UPDATE_DR_O => ntRef_ntUPDATE_DR_O,
                    VREF_TEST   => ntRef_ntVREF_TEST
              )
      @([sx,sy]);

}//end of place_iobt_tile
/********************************************************************************
********************************************************************************/
function place_iobb_tile(unsigned int tx, ty,flag)
{
    unsigned int sx, sy; 
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    string strVar;

    if(flag==0)
    {
      sprintf(strVar,"ntDIN_%d_%d",sx,sy);
      &wire ntRef_ntDIN[23:0] = wire *strVar[23:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

      sprintf(strVar,"ntTDO_INT_%d_%d",sx,sy);
      &wire ntRef_ntTDO_INT = wire *strVar;

      sprintf(strVar,"ntTCK_BUF_%d_%d",sx,sy);
      &wire ntRef_ntTCK_BUF = wire *strVar;

      sprintf(strVar,"ntVREF_TEST_%d_%d",sx,sy);
      &wire ntRef_ntVREF_TEST = wire *strVar                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

      sprintf(strVar, "IOB3_4K_TILE_%d_%d", sx, sy);
      device IOB3_4K_TILE *strVar
        port map(
                  DIN        => ntRef_ntDIN,
                  TCK_BUF    => ntRef_ntTCK_BUF,
                  TDO_INT    => ntRef_ntTDO_INT,
                  VREF_TEST     => ntRef_ntVREF_TEST
                )
        @([sx,sy]);

    }
    else if(flag==1)
    {
      sprintf(strVar,"ntDIN_%d_%d",sx,sy);
      &wire ntRef_ntDIN[15:0] = wire *strVar[15:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

      sprintf(strVar,"ntGOUTEN_BUF_%d_%d",sx,sy);
      &wire ntRef_ntGOUTEN_BUF = wire *strVar;
  
      sprintf(strVar,"ntMODE1_BUF_%d_%d",sx,sy);
      &wire ntRef_ntMODE1_BUF = wire *strVar;
  
      sprintf(strVar,"ntMODE2_BUF_%d_%d",sx,sy);
      &wire ntRef_ntMODE2_BUF = wire *strVar;
  
      sprintf(strVar,"ntMODE3_BUF_%d_%d",sx,sy);
      &wire ntRef_ntMODE3_BUF = wire *strVar;
  
      sprintf(strVar,"ntS12_RST_BUF_%d_%d",sx,sy);
      &wire ntRef_ntS12_RST_BUF = wire *strVar;
  
      sprintf(strVar,"ntUPDATE_DR_BUF_%d_%d",sx,sy);
      &wire ntRef_ntUPDATE_DR_BUF = wire *strVar;
  
      sprintf(strVar,"ntSHIFT_DR_BUF_%d_%d",sx,sy);
      &wire ntRef_ntSHIFT_DR_BUF = wire *strVar;

      sprintf(strVar,"ntTCK_BUF_%d_%d",sx,sy);
      &wire ntRef_ntTCK_BUF = wire *strVar;

      sprintf(strVar,"ntTDO_INIT_%d_%d",sx,sy);
      &wire ntRef_ntTDO_INIT = wire *strVar;

      sprintf(strVar,"ntPOR_N_O_%d_%d",sx,sy);
      &wire ntRef_ntPOR_N_O = wire *strVar;

      sprintf(strVar,"ntVREF_TEST_%d_%d",sx,sy);
      &wire ntRef_ntVREF_TEST = wire *strVar                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

      sprintf(strVar, "IOB4_4K_TILE_%d_%d", sx, sy);
      device IOB4_4K_TILE *strVar
        port map(
                  DIN        => ntRef_ntDIN,
                  TCK_BUF    => ntRef_ntTCK_BUF,
                  TDO_INIT   => ntRef_ntTDO_INIT,
                  GOUTEN_BUF => ntRef_ntGOUTEN_BUF,
                  MODE1_BUF  => ntRef_ntMODE1_BUF,
                  MODE2_BUF  => ntRef_ntMODE2_BUF,
                  MODE3_BUF  => ntRef_ntMODE3_BUF,
                  S12_RST_BUF   => ntRef_ntS12_RST_BUF,
                  UPDATE_DR_BUF => ntRef_ntUPDATE_DR_BUF,
                  SHIFT_DR_BUF  => ntRef_ntSHIFT_DR_BUF,
                  POR_N_O       => ntRef_ntPOR_N_O,
                  VREF_TEST     => ntRef_ntVREF_TEST

                )
        @([sx,sy]);
    }
    else
    {
      sprintf(strVar,"ntDIN_%d_%d",sx,sy);
      &wire ntRef_ntDIN[27:0] = wire *strVar[27:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

      sprintf(strVar,"ntTDO_INIT_%d_%d",sx,sy);
      &wire ntRef_ntTDO_INIT = wire *strVar;
  
      sprintf(strVar,"ntTCK_O_%d_%d",sx,sy);
      &wire ntRef_ntTCK_O = wire *strVar;
  
      sprintf(strVar,"ntGOUTEN_O_%d_%d",sx,sy);
      &wire ntRef_ntGOUTEN_O = wire *strVar;
  
      sprintf(strVar,"ntMODE1_O_%d_%d",sx,sy);
      &wire ntRef_ntMODE1_O = wire *strVar;
  
      sprintf(strVar,"ntMODE2_O_%d_%d",sx,sy);
      &wire ntRef_ntMODE2_O = wire *strVar;
  
      sprintf(strVar,"ntMODE3_O_%d_%d",sx,sy);
      &wire ntRef_ntMODE3_O = wire *strVar;
  
      sprintf(strVar,"ntS12_RST_O_%d_%d",sx,sy);
      &wire ntRef_ntS12_RST_O = wire *strVar;
  
      sprintf(strVar,"ntUPDATE_DR_O_%d_%d",sx,sy);
      &wire ntRef_ntUPDATE_DR_O = wire *strVar;
  
      sprintf(strVar,"ntSHIFT_DR_O_%d_%d",sx,sy);
      &wire ntRef_ntSHIFT_DR_O = wire *strVar;
  
      sprintf(strVar,"ntPOR_N_O_%d_%d",sx,sy);
      &wire ntRef_ntPOR_N_O = wire *strVar;

      sprintf(strVar,"ntVREF_TEST_%d_%d",sx,sy);
      &wire ntRef_ntVREF_TEST = wire *strVar                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

      sprintf(strVar, "IOB5_4K_TILE_%d_%d", sx, sy);
      device IOB5_4K_TILE *strVar
        port map(
                  DIN        => ntRef_ntDIN,
                  TCK_O      => ntRef_ntTCK_O,
                  TDO_INIT    => ntRef_ntTDO_INIT,
                  GOUTEN_O   => ntRef_ntGOUTEN_O,
                  MODE1_O    => ntRef_ntMODE1_O,
                  MODE2_O    => ntRef_ntMODE2_O,
                  MODE3_O    => ntRef_ntMODE3_O,
                  S12_RST_O  => ntRef_ntS12_RST_O,
                  UPDATE_DR_O => ntRef_ntUPDATE_DR_O,
                  SHIFT_DR_O  => ntRef_ntSHIFT_DR_O,
                  POR_N_O     => ntRef_ntPOR_N_O,
                  VREF_TEST     => ntRef_ntVREF_TEST
                )
        @([sx,sy]);

    }


}//end of place_iobb_tile
/********************************************************************************
********************************************************************************/
function place_analog_tile
(
    unsigned int tx,
    unsigned int ty, 
    unsigned int ty_ccs,
    unsigned int ty_pll
)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;
    
    string strVar;
    sprintf(strVar,"ntIPOLY_10U_%d_%d",sx,sy);
    &wire ntRef_ntIPOLY_10U[13:0] = wire *strVar[13:0];
    
    sprintf(strVar,"ntICONST_3U_%d_%d",sx,sy);
    &wire ntRef_ntICONST_3U[12:0] = wire *strVar[12:0];
    
    sprintf(strVar,"ntVBG_0P75V_%d_%d",sx,sy);
    &wire ntRef_ntVBG_0P75V = wire *strVar;
    
    sprintf(strVar,"ntVBG_0P5V_%d_%d",sx,sy);
    &wire ntRef_ntVBG_0P5V = wire *strVar;
    
    sprintf(strVar,"ntBGSTABLE_%d_%d",sx,sy);
    &wire ntRef_ntBGSTABLE = wire *strVar;
    
    sprintf(strVar,"ntLDO_VREF_%d_%d",sx,sy);
    &wire ntRef_ntLDO_VREF = wire *strVar;
    
    sprintf(strVar,"ntLDO_OUT_%d_%d",sx,sy);
    &wire ntRef_ntLDO_OUT = wire *strVar;
    
    sprintf(strVar,"ntPOR_N_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N = wire *strVar;
 
    sprintf(strVar,"ntPOR_N_1P06_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P06 = wire *strVar;  

    sprintf(strVar,"ntCLK_CFGM_%d_%d",sx,sy);
    &wire ntRef_ntCLK_CFGM = wire *strVar;
    
    sprintf(strVar,"ntCLK_CFGS_%d_%d",sx,sy);
    &wire ntRef_ntCLK_CFGS = wire *strVar;
    
    sprintf(strVar,"ntCLK_EFLASH_%d_%d",sx,sy);
    &wire ntRef_ntCLK_EFLASH = wire *strVar;
    
    sprintf(strVar,"ntCLK_SED_%d_%d",sx,sy);
    &wire ntRef_ntCLK_SED = wire *strVar;
    
    sprintf(strVar,"ntCLK_USER_O_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USER_O = wire *strVar;
    
    sprintf(strVar,"ntMFG_TEST_O_%d_%d",sx,sy);
    &wire ntRef_ntMFG_TEST_O = wire *strVar;
    
    sprintf(strVar,"ntDUMMY_%d_%d",sx,sy);
    &wire ntRef_ntDUMMY = wire *strVar;
    
    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6AB = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6CD = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6AB = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6CD = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y2 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y3 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y2 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y3 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Q0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Q1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Q2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q2 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Q3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q3 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Q0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Q1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Q2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q2 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Q3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q3 = wire *strVar;

    sprintf(strVar, "ANALOG_4K_TILE_%d_%d", sx, sy);
      device ANALOG_4K_TILE *strVar
        port map(
                   IPOLY_10U   => ntRef_ntIPOLY_10U,  
                   ICONST_3U   => ntRef_ntICONST_3U,  
                   VBG_0P75V   => ntRef_ntVBG_0P75V,  
                   VBG_0P5V    => ntRef_ntVBG_0P5V,   
                   BGSTABLE    => ntRef_ntBGSTABLE,   
                   LDO_VREF    => ntRef_ntLDO_VREF,   
                   LDO_OUT     => ntRef_ntLDO_OUT,    
                   POR_N       => ntRef_ntPOR_N,      
                   POR_N_1P06       => ntRef_ntPOR_N_1P06,      
                   CLK_CFGM    => ntRef_ntCLK_CFGM,   
                   CLK_CFGS    => ntRef_ntCLK_CFGS,   
                   CLK_EFLASH  => ntRef_ntCLK_EFLASH, 
                   CLK_SED     => ntRef_ntCLK_SED,    
                   CLK_USER_O  => ntRef_ntCLK_USER_O, 
                   MFG_TEST_O  => ntRef_ntMFG_TEST_O, 
                   DUMMY       => ntRef_ntDUMMY,      
                   TIEHI       => ntRef_ntTIEHI,      
                   TEST_A_Y6AB => ntRef_ntTEST_A_Y6AB,
                   TEST_A_Y6CD => ntRef_ntTEST_A_Y6CD,
                   TEST_S_Y6AB => ntRef_ntTEST_S_Y6AB,
                   TEST_S_Y6CD => ntRef_ntTEST_S_Y6CD,
                   TEST_A_Y0   => ntRef_ntTEST_A_Y0,  
                   TEST_A_Y1   => ntRef_ntTEST_A_Y1,  
                   TEST_A_Y2   => ntRef_ntTEST_A_Y2,  
                   TEST_A_Y3   => ntRef_ntTEST_A_Y3,  
                   TEST_S_Y0   => ntRef_ntTEST_S_Y0,  
                   TEST_S_Y1   => ntRef_ntTEST_S_Y1,  
                   TEST_S_Y2   => ntRef_ntTEST_S_Y2,  
                   TEST_S_Y3   => ntRef_ntTEST_S_Y3,  
                   TEST_A_Q0   => ntRef_ntTEST_A_Q0,  
                   TEST_A_Q1   => ntRef_ntTEST_A_Q1,  
                   TEST_A_Q2   => ntRef_ntTEST_A_Q2,  
                   TEST_A_Q3   => ntRef_ntTEST_A_Q3,  
                   TEST_S_Q0   => ntRef_ntTEST_S_Q0,  
                   TEST_S_Q1   => ntRef_ntTEST_S_Q1,  
                   TEST_S_Q2   => ntRef_ntTEST_S_Q2,  
                   TEST_S_Q3   => ntRef_ntTEST_S_Q3
                )
        @([sx,sy]);  

    STRUCT inc_spec_ANALOG_4K incVar;
    string pin_SRB;
    string pin_logic_device;
    string attribute_IO;
    int loc_SRB;

    string analog = "ANALOG_4K_TILE";


    foreach incVar(inc_ANALOG_4K_SRB_spec)
    {
        pin_SRB = incVar.port_name_SRB;
        pin_logic_device = incVar.port_name_device;
        attribute_IO = incVar.attribute_IO;
        loc_SRB = incVar.loc_SRB;
       
        if(attribute_IO =="I")
        { 
          
           connect(<pin *pin_logic_device of <device *analog @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-3,sy]>>);
        }
        else
        {
          connect(<pin *pin_SRB of<device SRB_TILE@[sx-3,sy]>> => <wire *pin_logic_device of <device *analog @[sx,sy]>>); 
        }
    }   


}//end of place_analog_tile
/********************************************************************************
********************************************************************************/
function place_idcode_tile
(
    unsigned int tx,
    unsigned int ty,
    unsigned int tx_ccs,
    unsigned int ty_ccs
)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    string strVar;
    sprintf(strVar,"ntIDCODE_H12_%d_%d",sx,sy);
    &wire ntRef_ntIDCODE_H12[11:0] = wire *strVar[11:0];

    sprintf(strVar,"ntIDCODE_L18_%d_%d",sx,sy);
    &wire ntRef_ntIDCODE_L18[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntDRM_COLUMN_NUM_%d_%d",sx,sy);
    &wire ntRef_ntDRM_COLUMN_NUM[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntROW_NUM_%d_%d",sx,sy);
    &wire ntRef_ntROW_NUM[8:0] = wire *strVar[8:0];

    sprintf(strVar, "IDCODE_4K_TILE_%d_%d", sx, sy);
      device IDCODE_4K_TILE *strVar
        port map(
                  IDCODE_H12     => ntRef_ntIDCODE_H12,
                  IDCODE_L18     => ntRef_ntIDCODE_L18,
                  ROW_NUM        => ntRef_ntROW_NUM,
                  DRM_COLUMN_NUM => ntRef_ntDRM_COLUMN_NUM
                )
        @([sx,sy]);  

}//end of place_idcode_tile
/********************************************************************************
********************************************************************************/
function place_esd_tile
(
    unsigned int tx,
    unsigned int ty,
    unsigned int tx_ccs,
    unsigned int ty_ccs,
    unsigned int tx_iob0,
    unsigned int ty_iob0,
    unsigned int tx_analog,
    unsigned int ty_analog
)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    string strVar;
    sprintf(strVar,"ntTP_%d_%d",sx,sy);
    &wire ntRef_ntTP = wire *strVar;
    sprintf(strVar,"ntCP_EN_%d_%d",sx,sy);
    &wire ntRef_ntCP_EN = wire *strVar;


    sprintf(strVar, "ESD_4K_TILE_%d_%d", sx, sy);
      device ESD_4K_TILE *strVar
        port map(
                  TP   => ntRef_ntTP,
                  CP_EN   => ntRef_ntCP_EN
                )
        @([sx,sy]);  

    int sx_ccs = tx_ccs * NUM_GRID_X + 3;
    int sy_ccs = ty_ccs * NUM_GRID_Y;

    int sx_analog = tx_analog * NUM_GRID_X + 3;
    int sy_analog = ty_analog * NUM_GRID_Y;

    int sx_iob0 = tx_iob0 * NUM_GRID_X;
    int sy_iob0 = ty_iob0 * NUM_GRID_Y;

    string ccs = "CCS_4K_TILE";
    string analog = "ANALOG_4K_TILE";

    &wire ntRef_ntCP_EN_PAD     = <wire ntCP_EN  of architecture>;

    connect
      (
        <pin CLK of <device ESD_4K_TILE @[sx,sy]>>             => <wire CLK_CFGM of <device *analog @[sx_analog,sy_analog]>>,
        <pin VREF_BG of <device ESD_4K_TILE @[sx,sy]>>         => <wire VBG_0P75V of <device *analog @[sx_analog,sy_analog]>>,
        <pin ICONST of <device ESD_4K_TILE @[sx,sy]>>          => <wire ICONST_3U[10] of <device *analog @[sx_analog,sy_analog]>>,
        <pin ICONST_BG of <device ESD_4K_TILE @[sx,sy]>>       => <wire ICONST_3U[9] of <device *analog @[sx_analog,sy_analog]>>,
        <pin LDO_OUT of <device ESD_4K_TILE @[sx,sy]>>         => <wire LDO_OUT of <device *analog @[sx_analog,sy_analog]>>,

        <pin SIO_VDDIO_DET_N of <device ESD_4K_TILE @[sx,sy]>> => <wire SIO_VDDIO_DET_N_T of <device IOB0_4K_TILE @[sx_iob0,sy_iob0]>>,
        <pin MFG_TRIM_BIT of <device ESD_4K_TILE @[sx,sy]>>    => <wire MFG_TRIM_BIT of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin VNEG of <device ESD_4K_TILE @[sx,sy]>>            => <wire EFB_TP_BIAS of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin CP_DIS of <device ESD_4K_TILE @[sx,sy]>>          => <wire CP_SD of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin CP_EN_I of <device ESD_4K_TILE @[sx,sy]>>         => ntRef_ntCP_EN_PAD
      );

}//end of place_esd_tile

/********************************************************************************
********************************************************************************/
function place_ccs_4k_tile(unsigned int tx,ty,tx_pll0,ty_pll0,tx_pll1,ty_pll1)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;
   
    string strVar;
    sprintf(strVar,"ntINIT_COMPLETE_%d_%d",sx,sy);
    &wire ntRef_ntINIT_COMPLETE = wire *strVar;
    
    sprintf(strVar,"ntINIT_N_OE_%d_%d",sx,sy);
    &wire ntRef_ntINIT_N_OE = wire *strVar;
    
    sprintf(strVar,"ntDONE_%d_%d",sx,sy);
    &wire ntRef_ntDONE = wire *strVar;
    
    sprintf(strVar,"ntDONE_OE_%d_%d",sx,sy);
    &wire ntRef_ntDONE_OE = wire *strVar;
    
    sprintf(strVar,"ntTDO_%d_%d",sx,sy);
    &wire ntRef_ntTDO = wire *strVar;
    
    sprintf(strVar,"ntTDO_OE_%d_%d",sx,sy);
    &wire ntRef_ntTDO_OE = wire *strVar;
    
    sprintf(strVar,"ntMS_N_%d_%d",sx,sy);
    &wire ntRef_ntMS_N = wire *strVar;
    
    sprintf(strVar,"ntSCK_%d_%d",sx,sy);
    &wire ntRef_ntSCK = wire *strVar;
    
    sprintf(strVar,"ntSCK_OE_%d_%d",sx,sy);
    &wire ntRef_ntSCK_OE = wire *strVar;
    
    sprintf(strVar,"ntMOSI_OE_%d_%d",sx,sy);
    &wire ntRef_ntMOSI_OE = wire *strVar;
    
    sprintf(strVar,"ntMS_N_OE_%d_%d",sx,sy);
    &wire ntRef_ntMS_N_OE = wire *strVar;
    
    sprintf(strVar,"ntMISO_O_%d_%d",sx,sy);
    &wire ntRef_ntMISO_O = wire *strVar;
    
    sprintf(strVar,"ntMISO_OE_%d_%d",sx,sy);
    &wire ntRef_ntMISO_OE = wire *strVar;
    
    sprintf(strVar,"ntMOSI_O_%d_%d",sx,sy);
    &wire ntRef_ntMOSI_O = wire *strVar;
    
    sprintf(strVar,"ntSDA_O_%d_%d",sx,sy);
    &wire ntRef_ntSDA_O = wire *strVar;
    
    sprintf(strVar,"ntSPAL_DOUT_%d_%d",sx,sy);
    &wire ntRef_ntSPAL_DOUT[15:0] = wire *strVar[15:0];
    
    sprintf(strVar,"ntSPAL_D_OE_%d_%d",sx,sy);
    &wire ntRef_ntSPAL_D_OE = wire *strVar;
    
    sprintf(strVar,"ntSPAL_BUSY_%d_%d",sx,sy);
    &wire ntRef_ntSPAL_BUSY = wire *strVar;
    
    sprintf(strVar,"ntMODE_1_%d_%d",sx,sy);
    &wire ntRef_ntMODE_1 = wire *strVar;
    
    sprintf(strVar,"ntMODE_2_%d_%d",sx,sy);
    &wire ntRef_ntMODE_2 = wire *strVar;
    
    sprintf(strVar,"ntMODE_3_%d_%d",sx,sy);
    &wire ntRef_ntMODE_3 = wire *strVar;
    
    sprintf(strVar,"ntJRST_%d_%d",sx,sy);
    &wire ntRef_ntJRST = wire *strVar;
    
    sprintf(strVar,"ntCLOCKDR_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR = wire *strVar;
    
    sprintf(strVar,"ntSHIFTDR_%d_%d",sx,sy);
    &wire ntRef_ntSHIFTDR = wire *strVar;
    
    sprintf(strVar,"ntUPDATEDR_%d_%d",sx,sy);
    &wire ntRef_ntUPDATEDR = wire *strVar;
    
    sprintf(strVar,"ntEFB_TDO_%d_%d",sx,sy);
    &wire ntRef_ntEFB_TDO = wire *strVar;
    
    sprintf(strVar,"ntEFB_TOE_%d_%d",sx,sy);
    &wire ntRef_ntEFB_TOE = wire *strVar;
    
    sprintf(strVar,"ntEFB_TP_BIAS_%d_%d",sx,sy);
    &wire ntRef_ntEFB_TP_BIAS = wire *strVar;
    
    sprintf(strVar,"ntMFG_TRIM_BIT_%d_%d",sx,sy);
    &wire ntRef_ntMFG_TRIM_BIT[2:0] = wire *strVar[2:0];
    
    sprintf(strVar,"ntTRIM_VREF1_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_VREF1[4:0] = wire *strVar[4:0];
    
    sprintf(strVar,"ntTRIM_VREF2_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_VREF2[4:0] = wire *strVar[4:0];
    
    sprintf(strVar,"ntTRIM_ICONST_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_ICONST[5:0] = wire *strVar[5:0];
    
    sprintf(strVar,"ntFREQ_TRIM_%d_%d",sx,sy);
    &wire ntRef_ntFREQ_TRIM[4:0] = wire *strVar[4:0];
    
    sprintf(strVar,"ntTRIM_LDO_VREF_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_LDO_VREF[4:0] = wire *strVar[4:0];
    
    sprintf(strVar,"ntCLK_CRAM_%d_%d",sx,sy);
    &wire ntRef_ntCLK_CRAM = wire *strVar;
    
    sprintf(strVar,"ntCMEM_TYPE_%d_%d",sx,sy);
    &wire ntRef_ntCMEM_TYPE[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntERASE_EN_%d_%d",sx,sy);
    &wire ntRef_ntERASE_EN = wire *strVar;
    
    sprintf(strVar,"ntWL_ON_%d_%d",sx,sy);
    &wire ntRef_ntWL_ON = wire *strVar;
    
    sprintf(strVar,"ntFRAME_ADDR_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR[7:0] = wire *strVar[7:0];
    
    sprintf(strVar,"ntCOLUMN_%d_%d",sx,sy);
    &wire ntRef_ntCOLUMN[7:0] = wire *strVar[7:0];
    
    sprintf(strVar,"ntPROG_ON_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON = wire *strVar;
    
    sprintf(strVar,"ntPROG_CAP_%d_%d",sx,sy);
    &wire ntRef_ntPROG_CAP = wire *strVar;
    
    sprintf(strVar,"ntREGION_RW_EN_%d_%d",sx,sy);
    &wire ntRef_ntREGION_RW_EN = wire *strVar;
    
    sprintf(strVar,"ntBLSRIN_%d_%d",sx,sy);
    &wire ntRef_ntBLSRIN[31:0] = wire *strVar[31:0];
    
    sprintf(strVar,"ntPRECHGE_%d_%d",sx,sy);
    &wire ntRef_ntPRECHGE = wire *strVar;
    
    sprintf(strVar,"ntREAD_%d_%d",sx,sy);
    &wire ntRef_ntREAD = wire *strVar;
    
    sprintf(strVar,"ntRDBK_CAP_%d_%d",sx,sy);
    &wire ntRef_ntRDBK_CAP = wire *strVar;
    
    sprintf(strVar,"ntCFGMOD_JEN_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_JEN = wire *strVar;
    
    sprintf(strVar,"ntCFGMOD_JTAG_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_JTAG = wire *strVar;
    
    sprintf(strVar,"ntCFGMOD_RST_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_RST = wire *strVar;
    
    sprintf(strVar,"ntCFGMOD_INIT_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_INIT = wire *strVar;
    
    sprintf(strVar,"ntCFGMOD_DONE_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_DONE = wire *strVar;
    
    sprintf(strVar,"ntCFGMOD_SPI_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_SPI = wire *strVar;
    
    sprintf(strVar,"ntCFGMOD_MS_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_MS = wire *strVar;
    
    sprintf(strVar,"ntCFGMOD_SS_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_SS = wire *strVar;
    
    sprintf(strVar,"ntCFGMOD_I2C_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_I2C = wire *strVar;
    
    sprintf(strVar,"ntCFGMOD_EFB_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_EFB = wire *strVar;
    
    sprintf(strVar,"ntCFGMOD_SPAL_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_SPAL = wire *strVar;
    
    sprintf(strVar,"ntGLOGEN_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN = wire *strVar;
    
    sprintf(strVar,"ntGOUTEN_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN = wire *strVar;
    
    sprintf(strVar,"ntGRS_N_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N = wire *strVar;
    
    sprintf(strVar,"ntGWEN_%d_%d",sx,sy);
    &wire ntRef_ntGWEN = wire *strVar;
    
    sprintf(strVar,"ntPUP_SEL_N_%d_%d",sx,sy);
    &wire ntRef_ntPUP_SEL_N = wire *strVar;
    
    sprintf(strVar,"ntMASK_EN_%d_%d",sx,sy);
    &wire ntRef_ntMASK_EN = wire *strVar;
    
    sprintf(strVar,"ntCLK_DRM_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DRM = wire *strVar;
    
    sprintf(strVar,"ntMCE_%d_%d",sx,sy);
    &wire ntRef_ntMCE = wire *strVar;
    
    sprintf(strVar,"ntMWR_%d_%d",sx,sy);
    &wire ntRef_ntMWR = wire *strVar;
    
    sprintf(strVar,"ntMFG_SRAM_RETENTION_%d_%d",sx,sy);
    &wire ntRef_ntMFG_SRAM_RETENTION = wire *strVar;
    
    sprintf(strVar,"ntOSCFSEL_%d_%d",sx,sy);
    &wire ntRef_ntOSCFSEL[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntOSC_TR_%d_%d",sx,sy);
    &wire ntRef_ntOSC_TR = wire *strVar;
    
    sprintf(strVar,"ntOSCFSEL_RBCRC_%d_%d",sx,sy);
    &wire ntRef_ntOSCFSEL_RBCRC[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntOSC_TR_RBCRC_%d_%d",sx,sy);
    &wire ntRef_ntOSC_TR_RBCRC = wire *strVar;
    
    sprintf(strVar,"ntOSC_EN_%d_%d",sx,sy);
    &wire ntRef_ntOSC_EN = wire *strVar;
    
    sprintf(strVar,"ntMCLK_EN_%d_%d",sx,sy);
    &wire ntRef_ntMCLK_EN = wire *strVar;
    
    sprintf(strVar,"ntRBCRC_CLK_EN_%d_%d",sx,sy);
    &wire ntRef_ntRBCRC_CLK_EN = wire *strVar;
    
    sprintf(strVar,"ntPCTLR_POR_OFF_%d_%d",sx,sy);
    &wire ntRef_ntPCTLR_POR_OFF = wire *strVar;
    
    sprintf(strVar,"ntPCTLR_BG_OFF_%d_%d",sx,sy);
    &wire ntRef_ntPCTLR_BG_OFF = wire *strVar;
    
    sprintf(strVar,"ntJRTI_%d_%d",sx,sy);
    &wire ntRef_ntJRTI = wire *strVar;
    
    sprintf(strVar,"ntCAPTUREDR_%d_%d",sx,sy);
    &wire ntRef_ntCAPTUREDR = wire *strVar;
    
    sprintf(strVar,"ntFLG_USER1_%d_%d",sx,sy);
    &wire ntRef_ntFLG_USER1 = wire *strVar;
    
    sprintf(strVar,"ntCLOCKDR1_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR1 = wire *strVar;
    
    sprintf(strVar,"ntFLG_USER2_%d_%d",sx,sy);
    &wire ntRef_ntFLG_USER2 = wire *strVar;
    
    sprintf(strVar,"ntCLOCKDR2_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR2 = wire *strVar;
    
    sprintf(strVar,"ntUID_DOUT_%d_%d",sx,sy);
    &wire ntRef_ntUID_DOUT = wire *strVar;
    
    sprintf(strVar,"ntPCTLR_STOP_%d_%d",sx,sy);
    &wire ntRef_ntPCTLR_STOP = wire *strVar;
    
    sprintf(strVar,"ntPCTLR_STDBY_%d_%d",sx,sy);
    &wire ntRef_ntPCTLR_STDBY = wire *strVar;
    
    sprintf(strVar,"ntPCTLR_STDBY_FLG_%d_%d",sx,sy);
    &wire ntRef_ntPCTLR_STDBY_FLG = wire *strVar;
    
    sprintf(strVar,"ntWAKEUP_OVER_N_%d_%d",sx,sy);
    &wire ntRef_ntWAKEUP_OVER_N = wire *strVar;
    
    sprintf(strVar,"ntPRDATA_%d_%d",sx,sy);
    &wire ntRef_ntPRDATA[7:0] = wire *strVar[7:0];
    
    sprintf(strVar,"ntPREADY_%d_%d",sx,sy);
    &wire ntRef_ntPREADY = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y6AB_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6AB_S0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y6CD_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6CD_S0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y6AB_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6AB_S0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y6CD_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6CD_S0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y0_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y0_S0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y1_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y1_S0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y2_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y2_S0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y3_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y3_S0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y0_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y0_S0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y1_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y1_S0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y2_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y2_S0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y3_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y3_S0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Q0_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q0_S0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Q1_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q1_S0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Q2_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q2_S0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Q3_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q3_S0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Q0_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q0_S0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Q1_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q1_S0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Q2_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q2_S0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Q3_S0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q3_S0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y6AB_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6AB_S1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y6CD_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6CD_S1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y6AB_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6AB_S1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y6CD_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6CD_S1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y0_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y0_S1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y1_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y1_S1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y2_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y2_S1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y3_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y3_S1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y0_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y0_S1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y1_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y1_S1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y2_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y2_S1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y3_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y3_S1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Q0_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q0_S1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Q1_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q1_S1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Q2_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q2_S1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Q3_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q3_S1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Q0_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q0_S1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Q1_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q1_S1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Q2_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q2_S1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Q3_S1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q3_S1 = wire *strVar;
    
    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;
    
    sprintf(strVar,"ntTIELO_%d_%d",sx,sy);
    &wire ntRef_ntTIELO = wire *strVar;

    sprintf(strVar,"ntCP_SD_%d_%d",sx,sy);
    &wire ntRef_ntCP_SD = wire *strVar;


    sprintf(strVar, "CCS_4K_TILE_%d_%d", sx, sy);
    device CCS_4K_TILE *strVar
          port map (
      INIT_COMPLETE      => ntRef_ntINIT_COMPLETE,     
      INIT_N_OE          => ntRef_ntINIT_N_OE,         
      DONE               => ntRef_ntDONE,              
      DONE_OE            => ntRef_ntDONE_OE,           
      TDO                => ntRef_ntTDO,               
      TDO_OE             => ntRef_ntTDO_OE,            
      MS_N               => ntRef_ntMS_N,              
      SCK                => ntRef_ntSCK,               
      SCK_OE             => ntRef_ntSCK_OE,            
      MOSI_OE            => ntRef_ntMOSI_OE,           
      MS_N_OE            => ntRef_ntMS_N_OE,           
      MISO_O             => ntRef_ntMISO_O,            
      MISO_OE            => ntRef_ntMISO_OE,           
      MOSI_O             => ntRef_ntMOSI_O,            
      SDA_O              => ntRef_ntSDA_O,             
      SPAL_DOUT          => ntRef_ntSPAL_DOUT,         
      SPAL_D_OE          => ntRef_ntSPAL_D_OE,         
      SPAL_BUSY          => ntRef_ntSPAL_BUSY,         
      MODE_1             => ntRef_ntMODE_1,            
      MODE_2             => ntRef_ntMODE_2,            
      MODE_3             => ntRef_ntMODE_3,            
      JRST               => ntRef_ntJRST,              
      CLOCKDR            => ntRef_ntCLOCKDR,           
      SHIFTDR            => ntRef_ntSHIFTDR,           
      UPDATEDR           => ntRef_ntUPDATEDR,          
      EFB_TDO            => ntRef_ntEFB_TDO,           
      EFB_TOE            => ntRef_ntEFB_TOE,           
      EFB_TP_BIAS        => ntRef_ntEFB_TP_BIAS,       
      MFG_TRIM_BIT       => ntRef_ntMFG_TRIM_BIT,      
      TRIM_VREF1         => ntRef_ntTRIM_VREF1,        
      TRIM_VREF2         => ntRef_ntTRIM_VREF2,        
      TRIM_ICONST        => ntRef_ntTRIM_ICONST,       
      FREQ_TRIM          => ntRef_ntFREQ_TRIM,         
      TRIM_LDO_VREF      => ntRef_ntTRIM_LDO_VREF,     
      CLK_CRAM           => ntRef_ntCLK_CRAM,          
      CMEM_TYPE          => ntRef_ntCMEM_TYPE,         
      ERASE_EN           => ntRef_ntERASE_EN,          
      WL_ON              => ntRef_ntWL_ON,             
      FRAME_ADDR         => ntRef_ntFRAME_ADDR,        
      COLUMN             => ntRef_ntCOLUMN,            
      PROG_ON            => ntRef_ntPROG_ON,           
      PROG_CAP           => ntRef_ntPROG_CAP,          
      REGION_RW_EN       => ntRef_ntREGION_RW_EN,      
      BLSRIN             => ntRef_ntBLSRIN,            
      PRECHGE            => ntRef_ntPRECHGE,           
      READ               => ntRef_ntREAD,              
      RDBK_CAP           => ntRef_ntRDBK_CAP,          
      CFGMOD_JEN         => ntRef_ntCFGMOD_JEN,        
      CFGMOD_JTAG        => ntRef_ntCFGMOD_JTAG,       
      CFGMOD_RST         => ntRef_ntCFGMOD_RST,        
      CFGMOD_INIT        => ntRef_ntCFGMOD_INIT,       
      CFGMOD_DONE        => ntRef_ntCFGMOD_DONE,       
      CFGMOD_SPI         => ntRef_ntCFGMOD_SPI,        
      CFGMOD_MS          => ntRef_ntCFGMOD_MS,         
      CFGMOD_SS          => ntRef_ntCFGMOD_SS,         
      CFGMOD_I2C         => ntRef_ntCFGMOD_I2C,        
      CFGMOD_EFB         => ntRef_ntCFGMOD_EFB,        
      CFGMOD_SPAL        => ntRef_ntCFGMOD_SPAL,       
      GLOGEN             => ntRef_ntGLOGEN,            
      GOUTEN             => ntRef_ntGOUTEN,            
      GRS_N              => ntRef_ntGRS_N,             
      GWEN               => ntRef_ntGWEN,              
      PUP_SEL_N          => ntRef_ntPUP_SEL_N,         
      MASK_EN            => ntRef_ntMASK_EN,           
      CLK_DRM            => ntRef_ntCLK_DRM,           
      MCE                => ntRef_ntMCE,               
      MWR                => ntRef_ntMWR,               
      MFG_SRAM_RETENTION => ntRef_ntMFG_SRAM_RETENTION,
      OSCFSEL            => ntRef_ntOSCFSEL,           
      OSC_TR             => ntRef_ntOSC_TR,            
      OSCFSEL_RBCRC      => ntRef_ntOSCFSEL_RBCRC,     
      OSC_TR_RBCRC       => ntRef_ntOSC_TR_RBCRC,      
      OSC_EN             => ntRef_ntOSC_EN,            
      MCLK_EN            => ntRef_ntMCLK_EN,           
      RBCRC_CLK_EN       => ntRef_ntRBCRC_CLK_EN,      
      PCTLR_POR_OFF      => ntRef_ntPCTLR_POR_OFF,     
      PCTLR_BG_OFF       => ntRef_ntPCTLR_BG_OFF,      
      JRTI               => ntRef_ntJRTI,              
      CAPTUREDR          => ntRef_ntCAPTUREDR,         
      FLG_USER1          => ntRef_ntFLG_USER1,         
      CLOCKDR1           => ntRef_ntCLOCKDR1,          
      FLG_USER2          => ntRef_ntFLG_USER2,         
      CLOCKDR2           => ntRef_ntCLOCKDR2,          
      UID_DOUT           => ntRef_ntUID_DOUT,          
      PCTLR_STOP         => ntRef_ntPCTLR_STOP,        
      PCTLR_STDBY        => ntRef_ntPCTLR_STDBY,       
      PCTLR_STDBY_FLG    => ntRef_ntPCTLR_STDBY_FLG,   
      WAKEUP_OVER_N      => ntRef_ntWAKEUP_OVER_N,     
      PRDATA             => ntRef_ntPRDATA,            
      PREADY             => ntRef_ntPREADY,            
      TEST_A_Y6AB_S0     => ntRef_ntTEST_A_Y6AB_S0,    
      TEST_A_Y6CD_S0     => ntRef_ntTEST_A_Y6CD_S0,    
      TEST_S_Y6AB_S0     => ntRef_ntTEST_S_Y6AB_S0,    
      TEST_S_Y6CD_S0     => ntRef_ntTEST_S_Y6CD_S0,    
      TEST_A_Y0_S0       => ntRef_ntTEST_A_Y0_S0,      
      TEST_A_Y1_S0       => ntRef_ntTEST_A_Y1_S0,      
      TEST_A_Y2_S0       => ntRef_ntTEST_A_Y2_S0,      
      TEST_A_Y3_S0       => ntRef_ntTEST_A_Y3_S0,      
      TEST_S_Y0_S0       => ntRef_ntTEST_S_Y0_S0,      
      TEST_S_Y1_S0       => ntRef_ntTEST_S_Y1_S0,      
      TEST_S_Y2_S0       => ntRef_ntTEST_S_Y2_S0,      
      TEST_S_Y3_S0       => ntRef_ntTEST_S_Y3_S0,      
      TEST_A_Q0_S0       => ntRef_ntTEST_A_Q0_S0,      
      TEST_A_Q1_S0       => ntRef_ntTEST_A_Q1_S0,      
      TEST_A_Q2_S0       => ntRef_ntTEST_A_Q2_S0,      
      TEST_A_Q3_S0       => ntRef_ntTEST_A_Q3_S0,      
      TEST_S_Q0_S0       => ntRef_ntTEST_S_Q0_S0,      
      TEST_S_Q1_S0       => ntRef_ntTEST_S_Q1_S0,      
      TEST_S_Q2_S0       => ntRef_ntTEST_S_Q2_S0,      
      TEST_S_Q3_S0       => ntRef_ntTEST_S_Q3_S0,      
      TEST_A_Y6AB_S1     => ntRef_ntTEST_A_Y6AB_S1,    
      TEST_A_Y6CD_S1     => ntRef_ntTEST_A_Y6CD_S1,    
      TEST_S_Y6AB_S1     => ntRef_ntTEST_S_Y6AB_S1,    
      TEST_S_Y6CD_S1     => ntRef_ntTEST_S_Y6CD_S1,    
      TEST_A_Y0_S1       => ntRef_ntTEST_A_Y0_S1,      
      TEST_A_Y1_S1       => ntRef_ntTEST_A_Y1_S1,      
      TEST_A_Y2_S1       => ntRef_ntTEST_A_Y2_S1,      
      TEST_A_Y3_S1       => ntRef_ntTEST_A_Y3_S1,      
      TEST_S_Y0_S1       => ntRef_ntTEST_S_Y0_S1,      
      TEST_S_Y1_S1       => ntRef_ntTEST_S_Y1_S1,      
      TEST_S_Y2_S1       => ntRef_ntTEST_S_Y2_S1,      
      TEST_S_Y3_S1       => ntRef_ntTEST_S_Y3_S1,      
      TEST_A_Q0_S1       => ntRef_ntTEST_A_Q0_S1,      
      TEST_A_Q1_S1       => ntRef_ntTEST_A_Q1_S1,      
      TEST_A_Q2_S1       => ntRef_ntTEST_A_Q2_S1,      
      TEST_A_Q3_S1       => ntRef_ntTEST_A_Q3_S1,      
      TEST_S_Q0_S1       => ntRef_ntTEST_S_Q0_S1,      
      TEST_S_Q1_S1       => ntRef_ntTEST_S_Q1_S1,      
      TEST_S_Q2_S1       => ntRef_ntTEST_S_Q2_S1,      
      TEST_S_Q3_S1       => ntRef_ntTEST_S_Q3_S1,      
      TIEHI              => ntRef_ntTIEHI,             
      CP_SD              => ntRef_ntCP_SD,
      TIELO              => ntRef_ntTIELO
                    )
        @([sx,sy]);

        STRUCT inc_spec_CCS_4K incVar;
        string pin_SRB;
        string pin_logic_device;
        string attribute_IO;
        int loc_SRB;
        int sy_SRB;
 
        string ccs = "CCS_4K_TILE";
        string analog = "ANALOG_4K_TILE";
 
        foreach incVar(inc_CCS_4K_SRB_spec)
        {
            pin_SRB = incVar.port_name_SRB;
            pin_logic_device = incVar.port_name_device;
            attribute_IO = incVar.attribute_IO;
            loc_SRB = incVar.loc_SRB;
           
            if(loc_SRB==0)
            {
              sy_SRB = sy;
            }
            else
            {
              sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
            }
            
            if(attribute_IO =="I")
            { 
             
               connect(<pin *pin_logic_device of <device *ccs @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-3,sy_SRB]>>);
            }
            else
            {
              connect(<pin *pin_SRB of<device SRB_TILE@[sx-3,sy_SRB]>> =>  <wire *pin_logic_device of <device *ccs @[sx,sy]>>); 
            }
        }

    if(!((tx_pll0==0)&&(ty_pll0==0)))
    {
      int sx_pll0 = tx_pll0 * NUM_GRID_X + 3;
      int sy_pll0 = ty_pll0 * NUM_GRID_Y;

      connect
        (
          <pin PLL0_PRDATA of <device *ccs @[sx,sy]>> => <wire PRDATA of <device PLL_TILE @[sx_pll0,sy_pll0]>>,
          <pin PLL0_PREADY of <device *ccs @[sx,sy]>> => <wire PREADY of <device PLL_TILE @[sx_pll0,sy_pll0]>>
        );
    }
    else
    {
      connect
        (
          <pin PLL0_PRDATA[0] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
          <pin PLL0_PRDATA[1] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
          <pin PLL0_PRDATA[2] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
          <pin PLL0_PRDATA[3] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
          <pin PLL0_PRDATA[4] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
          <pin PLL0_PRDATA[5] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
          <pin PLL0_PRDATA[6] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
          <pin PLL0_PRDATA[7] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
          <pin PLL0_PREADY of <device *ccs @[sx,sy]>>    => <wire TIELO of <device *ccs @[sx,sy]>>
        );
    }

    

    if(!((tx_pll1==0)&&(ty_pll1==0)))
    {
      int sx_pll1 = tx_pll1 * NUM_GRID_X + 3;
      int sy_pll1 = ty_pll1 * NUM_GRID_Y;

      connect
        (
          <pin PLL1_PRDATA of <device *ccs @[sx,sy]>> => <wire PRDATA of <device PLL_TILE @[sx_pll1,sy_pll1]>>,
          <pin PLL1_PREADY of <device *ccs @[sx,sy]>> => <wire PREADY of <device PLL_TILE @[sx_pll1,sy_pll1]>>
        );
    }
    else
    {
      connect
        (
          <pin PLL1_PRDATA[0] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
          <pin PLL1_PRDATA[1] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
          <pin PLL1_PRDATA[2] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
          <pin PLL1_PRDATA[3] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
          <pin PLL1_PRDATA[4] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
          <pin PLL1_PRDATA[5] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
          <pin PLL1_PRDATA[6] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
          <pin PLL1_PRDATA[7] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
          <pin PLL1_PREADY of <device *ccs @[sx,sy]>>    => <wire TIELO of <device *ccs @[sx,sy]>>
        );
    }
                 
}// end of function place_ccs_tile
/********************************************************************************/
/********************************************************************************/

function place_sfbudc_tile(unsigned int tx,ty,ty_uscm)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;

    string strVar;
    sprintf(strVar,"ntTEST_A_Y0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y0 = wire *strVar        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y1 = wire *strVar        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y2 = wire *strVar        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y3 = wire *strVar        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q0 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q1 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q2 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q3 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntTEST_A_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6AB = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 
 
    sprintf(strVar,"ntTEST_A_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6CD = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y0 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y1 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y2 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y3 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q0 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q1 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q2 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q3 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntTEST_S_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6AB = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;   
 
    sprintf(strVar,"ntTEST_S_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6CD = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;  

    string sfb = (ty<ty_uscm) ? "SFBBC_4K_TILE" : "SFBTC_TILE";

    if(ty<ty_uscm)
    {
      sprintf(strVar, "SFBBC_4K_TILE_%d_%d", sx, sy);
      device SFBBC_4K_TILE *strVar
           port map (
                     TEST_A_Y0       => ntRef_ntTEST_A_Y0,
                     TEST_A_Y1       => ntRef_ntTEST_A_Y1,
                     TEST_A_Y2       => ntRef_ntTEST_A_Y2,
                     TEST_A_Y3       => ntRef_ntTEST_A_Y3,
                     TEST_A_Q0       => ntRef_ntTEST_A_Q0,
                     TEST_A_Q1       => ntRef_ntTEST_A_Q1,
                     TEST_A_Q2       => ntRef_ntTEST_A_Q2,
                     TEST_A_Q3       => ntRef_ntTEST_A_Q3,
                     TEST_A_Y6AB     => ntRef_ntTEST_A_Y6AB,
                     TEST_A_Y6CD     => ntRef_ntTEST_A_Y6CD,
                     TEST_S_Y0       => ntRef_ntTEST_S_Y0,
                     TEST_S_Y1       => ntRef_ntTEST_S_Y1,
                     TEST_S_Y2       => ntRef_ntTEST_S_Y2,
                     TEST_S_Y3       => ntRef_ntTEST_S_Y3,
                     TEST_S_Q0       => ntRef_ntTEST_S_Q0,
                     TEST_S_Q1       => ntRef_ntTEST_S_Q1,
                     TEST_S_Q2       => ntRef_ntTEST_S_Q2,
                     TEST_S_Q3       => ntRef_ntTEST_S_Q3,
                     TEST_S_Y6AB     => ntRef_ntTEST_S_Y6AB,
                     TEST_S_Y6CD     => ntRef_ntTEST_S_Y6CD
                    )
          @([sx,sy]);
     connect
      (
        <pin SRB_TEST_SEL of <device *sfb @[sx,sy]>> => <wire S_D4 of <device SRB_TILE @[sx-3,sy]>>,
        <pin SRB_LDO_TEST_EN of <device *sfb @[sx,sy]>> => <wire S_BD of <device SRB_TILE @[sx-3,sy]>>
      );
    }
    else
    {
      sprintf(strVar, "SFBTC_TILE_%d_%d", sx, sy);
      device SFBTC_TILE *strVar
           port map (
                     TEST_A_Y0       => ntRef_ntTEST_A_Y0,
                     TEST_A_Y1       => ntRef_ntTEST_A_Y1,
                     TEST_A_Y2       => ntRef_ntTEST_A_Y2,
                     TEST_A_Y3       => ntRef_ntTEST_A_Y3,
                     TEST_A_Q0       => ntRef_ntTEST_A_Q0,
                     TEST_A_Q1       => ntRef_ntTEST_A_Q1,
                     TEST_A_Q2       => ntRef_ntTEST_A_Q2,
                     TEST_A_Q3       => ntRef_ntTEST_A_Q3,
                     TEST_A_Y6AB     => ntRef_ntTEST_A_Y6AB,
                     TEST_A_Y6CD     => ntRef_ntTEST_A_Y6CD,
                     TEST_S_Y0       => ntRef_ntTEST_S_Y0,
                     TEST_S_Y1       => ntRef_ntTEST_S_Y1,
                     TEST_S_Y2       => ntRef_ntTEST_S_Y2,
                     TEST_S_Y3       => ntRef_ntTEST_S_Y3,
                     TEST_S_Q0       => ntRef_ntTEST_S_Q0,
                     TEST_S_Q1       => ntRef_ntTEST_S_Q1,
                     TEST_S_Q2       => ntRef_ntTEST_S_Q2,
                     TEST_S_Q3       => ntRef_ntTEST_S_Q3,
                     TEST_S_Y6AB     => ntRef_ntTEST_S_Y6AB,
                     TEST_S_Y6CD     => ntRef_ntTEST_S_Y6CD
                    )
          @([sx,sy]);

    }

    connect
      (
        <pin A_Y0 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_A_Y0 of <device *sfb @[sx,sy]>>,
        <pin A_Y1 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_A_Y1 of <device *sfb @[sx,sy]>>,
        <pin A_Y2 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_A_Y2 of <device *sfb @[sx,sy]>>,
        <pin A_Y3 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_A_Y3 of <device *sfb @[sx,sy]>>,
        <pin A_Q0 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_A_Q0 of <device *sfb @[sx,sy]>>,
        <pin A_Q1 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_A_Q1 of <device *sfb @[sx,sy]>>,
        <pin A_Q2 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_A_Q2 of <device *sfb @[sx,sy]>>,
        <pin A_Q3 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_A_Q3 of <device *sfb @[sx,sy]>>,
        <pin S_Y0 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_S_Y0 of <device *sfb @[sx,sy]>>,
        <pin S_Y1 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_S_Y1 of <device *sfb @[sx,sy]>>,
        <pin S_Y2 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_S_Y2 of <device *sfb @[sx,sy]>>,
        <pin S_Y3 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_S_Y3 of <device *sfb @[sx,sy]>>,
        <pin S_Q0 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_S_Q0 of <device *sfb @[sx,sy]>>,
        <pin S_Q1 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_S_Q1 of <device *sfb @[sx,sy]>>,
        <pin S_Q2 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_S_Q2 of <device *sfb @[sx,sy]>>,
        <pin S_Q3 of <device SRB_TILE @[sx-3,sy]>>    => <wire TEST_S_Q3 of <device *sfb @[sx,sy]>>,
        <pin A_Y6AB of <device SRB_TILE @[sx-3,sy]>>  => <wire TEST_A_Y6AB of <device *sfb @[sx,sy]>>,
        <pin A_Y6CD of <device SRB_TILE @[sx-3,sy]>>  => <wire TEST_A_Y6CD of <device *sfb @[sx,sy]>>,
        <pin S_Y6AB of <device SRB_TILE @[sx-3,sy]>>  => <wire TEST_S_Y6AB of <device *sfb @[sx,sy]>>,
        <pin S_Y6CD of <device SRB_TILE @[sx-3,sy]>>  => <wire TEST_S_Y6CD of <device *sfb @[sx,sy]>>,

        <pin A_A0 of <device *sfb @[sx,sy]>> => <wire A_A0 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_A1 of <device *sfb @[sx,sy]>> => <wire A_A1 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_A2 of <device *sfb @[sx,sy]>> => <wire A_A2 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_A3 of <device *sfb @[sx,sy]>> => <wire A_A3 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_A4 of <device *sfb @[sx,sy]>> => <wire A_A4 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_AD of <device *sfb @[sx,sy]>> => <wire A_AD of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_B0 of <device *sfb @[sx,sy]>> => <wire A_B0 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_B1 of <device *sfb @[sx,sy]>> => <wire A_B1 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_B2 of <device *sfb @[sx,sy]>> => <wire A_B2 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_B3 of <device *sfb @[sx,sy]>> => <wire A_B3 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_B4 of <device *sfb @[sx,sy]>> => <wire A_B4 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_BD of <device *sfb @[sx,sy]>> => <wire A_BD of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_C0 of <device *sfb @[sx,sy]>> => <wire A_C0 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_C1 of <device *sfb @[sx,sy]>> => <wire A_C1 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_C2 of <device *sfb @[sx,sy]>> => <wire A_C2 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_C3 of <device *sfb @[sx,sy]>> => <wire A_C3 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_C4 of <device *sfb @[sx,sy]>> => <wire A_C4 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_CD of <device *sfb @[sx,sy]>> => <wire A_CD of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_D0 of <device *sfb @[sx,sy]>> => <wire A_D0 of <device SRB_TILE @[sx-3,sy]>>,

        <pin A_D1 of <device *sfb @[sx,sy]>> => <wire A_D1 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_D2 of <device *sfb @[sx,sy]>> => <wire A_D2 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_D3 of <device *sfb @[sx,sy]>> => <wire A_D3 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_D4 of <device *sfb @[sx,sy]>> => <wire A_D4 of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_DD of <device *sfb @[sx,sy]>> => <wire A_DD of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_A0 of <device *sfb @[sx,sy]>> => <wire S_A0 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_A1 of <device *sfb @[sx,sy]>> => <wire S_A1 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_A2 of <device *sfb @[sx,sy]>> => <wire S_A2 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_A3 of <device *sfb @[sx,sy]>> => <wire S_A3 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_A4 of <device *sfb @[sx,sy]>> => <wire S_A4 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_AD of <device *sfb @[sx,sy]>> => <wire S_AD of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_B0 of <device *sfb @[sx,sy]>> => <wire S_B0 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_B1 of <device *sfb @[sx,sy]>> => <wire S_B1 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_B2 of <device *sfb @[sx,sy]>> => <wire S_B2 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_B3 of <device *sfb @[sx,sy]>> => <wire S_B3 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_B4 of <device *sfb @[sx,sy]>> => <wire S_B4 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_BD of <device *sfb @[sx,sy]>> => <wire S_BD of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_C0 of <device *sfb @[sx,sy]>> => <wire S_C0 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_C1 of <device *sfb @[sx,sy]>> => <wire S_C1 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_C2 of <device *sfb @[sx,sy]>> => <wire S_C2 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_C3 of <device *sfb @[sx,sy]>> => <wire S_C3 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_C4 of <device *sfb @[sx,sy]>> => <wire S_C4 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_CD of <device *sfb @[sx,sy]>> => <wire S_CD of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_D0 of <device *sfb @[sx,sy]>> => <wire S_D0 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_D1 of <device *sfb @[sx,sy]>> => <wire S_D1 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_D2 of <device *sfb @[sx,sy]>> => <wire S_D2 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_D3 of <device *sfb @[sx,sy]>> => <wire S_D3 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_D4 of <device *sfb @[sx,sy]>> => <wire S_D4 of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_DD of <device *sfb @[sx,sy]>> => <wire S_DD of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_CE of <device *sfb @[sx,sy]>>  => <wire A_CE of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_RS of <device *sfb @[sx,sy]>>  => <wire A_RS of <device SRB_TILE @[sx-3,sy]>>,
        <pin A_CLK of <device *sfb @[sx,sy]>> => <wire A_CLK of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_CE of <device *sfb @[sx,sy]>>  => <wire S_CE of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_RS of <device *sfb @[sx,sy]>>  => <wire S_RS of <device SRB_TILE @[sx-3,sy]>>,
        <pin S_CLK of <device *sfb @[sx,sy]>> => <wire S_CLK of <device SRB_TILE @[sx-3,sy]>>,
        <pin IOLA_CE of <device *sfb @[sx,sy]>>  => <wire IOLA_CE of <device SRB_TILE @[sx-3,sy]>>,
        <pin IOLA_RS of <device *sfb @[sx,sy]>>  => <wire IOLA_RS of <device SRB_TILE @[sx-3,sy]>>,
        <pin IOLA_CLK of <device *sfb @[sx,sy]>> => <wire IOLA_CLK of <device SRB_TILE @[sx-3,sy]>>,
        <pin IOLB_CE of <device *sfb @[sx,sy]>>  => <wire IOLB_CE of <device SRB_TILE @[sx-3,sy]>>,
        <pin IOLB_RS of <device *sfb @[sx,sy]>>  => <wire IOLB_RS of <device SRB_TILE @[sx-3,sy]>>,
        <pin IOLB_CLK of <device *sfb @[sx,sy]>> => <wire IOLB_CLK of <device SRB_TILE @[sx-3,sy]>>,
        <pin ZM_1 of <device *sfb @[sx,sy]>>     => <wire ZM[1] of <device SRB_TILE @[sx-3,sy]>>,
        <pin ZM_5 of <device *sfb @[sx,sy]>>     => <wire ZM[5] of <device SRB_TILE @[sx-3,sy]>>,
        <pin ZM_9 of <device *sfb @[sx,sy]>>     => <wire ZM[9] of <device SRB_TILE @[sx-3,sy]>>,
        <pin ZM_13 of <device *sfb @[sx,sy]>>    => <wire ZM[13] of <device SRB_TILE @[sx-3,sy]>>,
        <pin ZM_2 of <device *sfb @[sx,sy]>>     => <wire ZM[2] of <device SRB_TILE @[sx-3,sy]>>,
        <pin ZM_6 of <device *sfb @[sx,sy]>>     => <wire ZM[6] of <device SRB_TILE @[sx-3,sy]>>,
        <pin ZM_10 of <device *sfb @[sx,sy]>>    => <wire ZM[10] of <device SRB_TILE @[sx-3,sy]>>,
        <pin ZM_14 of <device *sfb @[sx,sy]>>    => <wire ZM[14] of <device SRB_TILE @[sx-3,sy]>>
      );


}//end of function place_sfbudc_tile

}; // end of package pgc4k_funcs_place
