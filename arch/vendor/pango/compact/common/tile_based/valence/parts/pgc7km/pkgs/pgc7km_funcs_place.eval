**********************************************
************************************************************/
library work;
use pgc_defs, pgc7km_defs;
use pgc_ANALOG_7K_SRB_inc, pgc_CLMS_SRB_inc,pgc_CCS_7K_SRB_inc;
use pgc_USCM_SRB_inc,pgc_PLL_SRB_inc,pgc_IOCK_SRB_inc;
//use pgc_MIPI_DPHY_7KM_SRB_inc;
use pgc_PLL_SRB_inc;

package pgc7km_funcs_place
{
/************************************************************
************************************************************/
function place_cram_ctrl_tile(unsigned int tx,ty,tx_ccs,ty_ccs,tx_analog,ty_analog)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    string strVar;
    
    sprintf(strVar,"ntDATA_%d_%d",sx,sy);
    &wire ntRef_ntDATA[2695:0] = wire *strVar[2695:0];
    
    sprintf(strVar,"ntDATAN_%d_%d",sx,sy);
    &wire ntRef_ntDATAN[2695:0] = wire *strVar[2695:0];
    
    sprintf(strVar,"ntDATA_R_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_NEXT[2695:0] = wire *strVar[2695:0];
    
    sprintf(strVar,"ntDATAN_R_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_NEXT[2695:0] = wire *strVar[2695:0];
    
    sprintf(strVar,"ntDATA_L_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_NEXT[2695:0] = wire *strVar[2695:0];
    
    sprintf(strVar,"ntDATAN_L_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_NEXT[2695:0] = wire *strVar[2695:0];
    
    sprintf(strVar,"ntDATA_BACK_%d_%d",sx,sy);
    &wire ntRef_ntDATA_BACK[31:0] = wire *strVar[31:0];
    
    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[607:0] = wire *strVar[607:0];
    
    sprintf(strVar,"ntMCE_OU_%d_%d",sx,sy);
    &wire ntRef_ntMCE_OU[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntMWR_OU_%d_%d",sx,sy);
    &wire ntRef_ntMWR_OU[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntMCLKB_OU_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OU[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntMCE_OD_%d_%d",sx,sy);
    &wire ntRef_ntMCE_OD[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntMWR_OD_%d_%d",sx,sy);
    &wire ntRef_ntMWR_OD[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntMCLKB_OD_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OD[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntMASK_N_%d_%d",sx,sy);
    &wire ntRef_ntMASK_N[22:0] = wire *strVar[22:0];
    
    sprintf(strVar,"ntREAD2T_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T[17:0] = wire *strVar[17:0];
    
    sprintf(strVar,"ntGLOGEN_OUTL_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUTL[12:0] = wire *strVar[12:0];
    
    sprintf(strVar,"ntGLOGEN_OUTR_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUTR[10:0] = wire *strVar[10:0];
    
    sprintf(strVar,"ntGWEN_OUTL_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OUTL[12:0] = wire *strVar[12:0];
    
    sprintf(strVar,"ntGWEN_OUTR_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OUTR[10:0] = wire *strVar[10:0];
    
    sprintf(strVar,"ntGRS_N_OUTL_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OUTL[12:0] = wire *strVar[12:0];
    
    sprintf(strVar,"ntGRS_N_OUTR_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OUTR[10:0] = wire *strVar[10:0];
    
    sprintf(strVar,"ntPOR_N_OUTL_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OUTL[12:0] = wire *strVar[12:0];
    
    sprintf(strVar,"ntPOR_N_OUTR_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OUTR[10:0] = wire *strVar[10:0];
    
    sprintf(strVar,"ntPUP_REL_N_OUTL_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OUTL[12:0] = wire *strVar[12:0];
    
    sprintf(strVar,"ntPUP_REL_N_OUTR_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OUTR[10:0] = wire *strVar[10:0];
    
    sprintf(strVar,"ntMASK_OD_%d_%d",sx,sy);
    &wire ntRef_ntMASK_OD[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntMASK_OU_%d_%d",sx,sy);
    &wire ntRef_ntMASK_OU[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntIREF_%d_%d",sx,sy);
    &wire ntRef_ntIREF = wire *strVar;
    
    sprintf(strVar,"ntCOLUMN_INC_%d_%d",sx,sy);
    &wire ntRef_ntCOLUMN_INC = wire *strVar;
    
    sprintf(strVar,"ntNONDRM_END_%d_%d",sx,sy);
    &wire ntRef_ntNONDRM_END = wire *strVar;
    
    
    
    sprintf(strVar, "CRAM_CTRL_7KM_TILE_%d_%d", sx, sy);
      device CRAM_CTRL_7KM_TILE *strVar
        port map(
    
    
        DATA           =>           ntRef_ntDATA,
        DATAN          =>           ntRef_ntDATAN,
        DATA_R_NEXT    =>           ntRef_ntDATA_R_NEXT,
        DATAN_R_NEXT   =>           ntRef_ntDATAN_R_NEXT,
        DATA_L_NEXT    =>           ntRef_ntDATA_L_NEXT,
        DATAN_L_NEXT   =>           ntRef_ntDATAN_L_NEXT,
        DATA_BACK      =>           ntRef_ntDATA_BACK,
        ADDR           =>           ntRef_ntADDR,
        MCE_OU         =>           ntRef_ntMCE_OU,
        MWR_OU         =>           ntRef_ntMWR_OU,
        MCLKB_OU       =>           ntRef_ntMCLKB_OU,
        MCE_OD         =>           ntRef_ntMCE_OD,
        MWR_OD         =>           ntRef_ntMWR_OD,
        MCLKB_OD       =>           ntRef_ntMCLKB_OD,
        MASK_N         =>           ntRef_ntMASK_N,
        READ2T         =>           ntRef_ntREAD2T,
        GLOGEN_OUTL    =>           ntRef_ntGLOGEN_OUTL,
        GLOGEN_OUTR    =>           ntRef_ntGLOGEN_OUTR,
        GWEN_OUTL      =>           ntRef_ntGWEN_OUTL,
        GWEN_OUTR      =>           ntRef_ntGWEN_OUTR,
        GRS_N_OUTL     =>           ntRef_ntGRS_N_OUTL,
        GRS_N_OUTR     =>           ntRef_ntGRS_N_OUTR,
        POR_N_OUTL     =>           ntRef_ntPOR_N_OUTL,
        POR_N_OUTR     =>           ntRef_ntPOR_N_OUTR,
        PUP_REL_N_OUTL =>           ntRef_ntPUP_REL_N_OUTL,
        PUP_REL_N_OUTR =>           ntRef_ntPUP_REL_N_OUTR,
        MASK_OD        =>           ntRef_ntMASK_OD,
        MASK_OU        =>           ntRef_ntMASK_OU,
    
        IREF           =>        ntRef_ntIREF,
        COLUMN_INC     =>        ntRef_ntCOLUMN_INC,
        NONDRM_END     =>        ntRef_ntNONDRM_END
    
            )
        @([sx,sy]);
 
}//end of function place_cram_ctrl_tile
/************************************************************
************************************************************/
function place_ckebd_tile(unsigned int tx,ty)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
   
    string strVar;

    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[15:0] = wire *strVar[15:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[15:0] = wire *strVar[15:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;


    
    sprintf(strVar, "CKEBD_TILE_%d_%d", sx, sy);
    
    device CKEBD_TILE *strVar
          port map (
                      CLK_OUTT    => ntRef_ntCLK_OUTT,
                      CLK_OUTB    => ntRef_ntCLK_OUTB         
                    )
        @([sx,sy]);

}//end of function place_ckebd_tile
/********************************************************************************
********************************************************************************/
//  function place_ckeb2_7km_tile(unsigned int tx,ty)
//  {   
//      unsigned int sx, sy;
//      
//      sx = tx * NUM_GRID_X;
//      sy = ty * NUM_GRID_Y;
//     
//      string strVar;

//      sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_OUTT[15:0] = wire *strVar[15:0];
//      
//      sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_OUTB[15:0] = wire *strVar[15:0];
//      
//      sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
//      &wire ntRef_ntTIEHI = wire *strVar;
//      
//      sprintf(strVar,"ntCLK_GLOBAL_OUTR_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_GLOBAL_OUTR[7:0] = wire *strVar[7:0];
//      
//      sprintf(strVar,"ntCLK_GLOBAL_OUTL_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_GLOBAL_OUTL[7:0] = wire *strVar[7:0];
//      
//      sprintf(strVar,"ntSIG_GLOBAL_OUTR_%d_%d",sx,sy);
//      &wire ntRef_ntSIG_GLOBAL_OUTR[7:0] = wire *strVar[7:0];
//      
//      sprintf(strVar,"ntSIG_GLOBAL_OUTL_%d_%d",sx,sy);
//      &wire ntRef_ntSIG_GLOBAL_OUTL[7:0] = wire *strVar[7:0];
//      
//      sprintf(strVar,"ntCLK_BRG_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_BRG_OUT[1:0] = wire *strVar[1:0];
//      
//      sprintf(strVar,"ntCLK_DLY_L_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_DLY_L_OUT = wire *strVar;
//      
//      sprintf(strVar,"ntCLK_DLY_M_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_DLY_M_OUT = wire *strVar;
//      
//      sprintf(strVar,"ntCLK_DLY_R_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_DLY_R_OUT = wire *strVar;
//      
//      sprintf(strVar,"ntCLKOS_PLL0_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLKOS_PLL0_OUT = wire *strVar;
//      
//      sprintf(strVar,"ntCLKOS_PLL1_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLKOS_PLL1_OUT = wire *strVar;
//      
//      sprintf(strVar,"ntCLKOP_PLL0_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLKOP_PLL0_OUT = wire *strVar;
//      
//      sprintf(strVar,"ntCLKOP_PLL1_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLKOP_PLL1_OUT = wire *strVar;
//      
//      sprintf(strVar,"ntCLKOS2_PLL1_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLKOS2_PLL1_OUT = wire *strVar;
//      
//      sprintf(strVar,"ntCLKOS3_PLL1_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLKOS3_PLL1_OUT = wire *strVar;
//      
//      sprintf(strVar,"ntCLKOS2_PLL0_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLKOS2_PLL0_OUT = wire *strVar;
//      
//      sprintf(strVar,"ntCLKOS3_PLL0_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLKOS3_PLL0_OUT = wire *strVar;
//      
//      sprintf(strVar,"ntCLK_PIO_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_PIO_OUT[1:0] = wire *strVar[1:0];
//      
//      sprintf(strVar,"ntCLK_DIV0_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_DIV0_OUT[1:0] = wire *strVar[1:0];
//      
//      sprintf(strVar,"ntCLK_DIV1_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_DIV1_OUT[1:0] = wire *strVar[1:0];
//      
//      sprintf(strVar,"ntCLK_IOMUX2PLL_O_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_IOMUX2PLL_O[1:0] = wire *strVar[1:0];
//      
//      sprintf(strVar,"ntCLK_IOPRE2BRG_O_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_IOPRE2BRG_O[1:0] = wire *strVar[1:0];
//      
//      sprintf(strVar,"ntCLK_PIO2PLL_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_PIO2PLL_OUT[1:0] = wire *strVar[1:0];
//      
//      sprintf(strVar,"ntCLK_CFGS_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_CFGS_OUT = wire *strVar;

//      sprintf(strVar, "CKEB2_7KM_TILE_%d_%d", sx, sy);
//      
//      device CKEB2_7KM_TILE *strVar
//            port map (
//                 CLK_OUTT => ntRef_ntCLK_OUTT,
//                 CLK_OUTB => ntRef_ntCLK_OUTB,
//                 TIEHI => ntRef_ntTIEHI,
//                 CLK_GLOBAL_OUTR => ntRef_ntCLK_GLOBAL_OUTR,
//                 CLK_GLOBAL_OUTL => ntRef_ntCLK_GLOBAL_OUTL,
//                 SIG_GLOBAL_OUTR => ntRef_ntSIG_GLOBAL_OUTR,
//                 SIG_GLOBAL_OUTL => ntRef_ntSIG_GLOBAL_OUTL,
//                 CLK_BRG_OUT => ntRef_ntCLK_BRG_OUT,
//                 CLK_DLY_L_OUT => ntRef_ntCLK_DLY_L_OUT,
//                 CLK_DLY_M_OUT => ntRef_ntCLK_DLY_M_OUT,
//                 CLK_DLY_R_OUT => ntRef_ntCLK_DLY_R_OUT,
//                 CLKOS_PLL0_OUT => ntRef_ntCLKOS_PLL0_OUT,
//                 CLKOS_PLL1_OUT => ntRef_ntCLKOS_PLL1_OUT,
//                 CLKOP_PLL0_OUT => ntRef_ntCLKOP_PLL0_OUT,
//                 CLKOP_PLL1_OUT => ntRef_ntCLKOP_PLL1_OUT,
//                 CLKOS2_PLL1_OUT => ntRef_ntCLKOS2_PLL1_OUT,
//                 CLKOS3_PLL1_OUT => ntRef_ntCLKOS3_PLL1_OUT,
//                 CLKOS2_PLL0_OUT => ntRef_ntCLKOS2_PLL0_OUT,
//                 CLKOS3_PLL0_OUT => ntRef_ntCLKOS3_PLL0_OUT,
//                 CLK_PIO_OUT => ntRef_ntCLK_PIO_OUT,
//                 CLK_DIV0_OUT => ntRef_ntCLK_DIV0_OUT,
//                 CLK_DIV1_OUT => ntRef_ntCLK_DIV1_OUT,
//                 CLK_IOMUX2PLL_O => ntRef_ntCLK_IOMUX2PLL_O,
//                 CLK_IOPRE2BRG_O => ntRef_ntCLK_IOPRE2BRG_O,
//                 CLK_PIO2PLL_OUT => ntRef_ntCLK_PIO2PLL_OUT,
//                 CLK_CFGS_OUT => ntRef_ntCLK_CFGS_OUT         
//                      )
//          @([sx,sy]);

//  }// end of function place_ckeb2_7km_tile
//  /********************************************************************************
//  ********************************************************************************/
//  function place_ckeb2d_7km_tile( unsigned int tx,ty )
//  {   
//      unsigned int sx, sy;
//      
//      sx = tx * NUM_GRID_X;
//      sy = ty * NUM_GRID_Y;
//     
//      string strVar;

//      sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_OUTT[15:0] = wire *strVar[15:0];
//      
//      sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_OUTB[15:0] = wire *strVar[15:0];
//      
//      sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
//      &wire ntRef_ntTIEHI = wire *strVar;
//      
//      sprintf(strVar,"ntCLK_GLOBAL_OUTR_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_GLOBAL_OUTR[7:0] = wire *strVar[7:0];
//      
//      sprintf(strVar,"ntCLK_GLOBAL_OUTL_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_GLOBAL_OUTL[7:0] = wire *strVar[7:0];
//      
//      sprintf(strVar,"ntSIG_GLOBAL_OUTR_%d_%d",sx,sy);
//      &wire ntRef_ntSIG_GLOBAL_OUTR[7:0] = wire *strVar[7:0];
//      
//      sprintf(strVar,"ntSIG_GLOBAL_OUTL_%d_%d",sx,sy);
//      &wire ntRef_ntSIG_GLOBAL_OUTL[7:0] = wire *strVar[7:0];
//      
//      sprintf(strVar,"ntCLK_BRG_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_BRG_OUT[1:0] = wire *strVar[1:0];
//      
//      sprintf(strVar,"ntCLK_DLY_L_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_DLY_L_OUT = wire *strVar;
//      
//      sprintf(strVar,"ntCLK_DLY_M_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_DLY_M_OUT = wire *strVar;
//      
//      sprintf(strVar,"ntCLK_DLY_R_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_DLY_R_OUT = wire *strVar;
//      
//      sprintf(strVar,"ntCLKOS_PLL0_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLKOS_PLL0_OUT = wire *strVar;
//      
//      sprintf(strVar,"ntCLKOS_PLL1_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLKOS_PLL1_OUT = wire *strVar;
//      
//      sprintf(strVar,"ntCLKOP_PLL0_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLKOP_PLL0_OUT = wire *strVar;
//      
//      sprintf(strVar,"ntCLKOP_PLL1_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLKOP_PLL1_OUT = wire *strVar;
//      
//      sprintf(strVar,"ntCLKOS2_PLL1_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLKOS2_PLL1_OUT = wire *strVar;
//      
//      sprintf(strVar,"ntCLKOS3_PLL1_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLKOS3_PLL1_OUT = wire *strVar;
//      
//      sprintf(strVar,"ntCLKOS2_PLL0_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLKOS2_PLL0_OUT = wire *strVar;
//      
//      sprintf(strVar,"ntCLKOS3_PLL0_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLKOS3_PLL0_OUT = wire *strVar;
//      
//      sprintf(strVar,"ntCLK_PIO_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_PIO_OUT[1:0] = wire *strVar[1:0];
//      
//      sprintf(strVar,"ntCLK_DIV0_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_DIV0_OUT[1:0] = wire *strVar[1:0];
//      
//      sprintf(strVar,"ntCLK_DIV1_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_DIV1_OUT[1:0] = wire *strVar[1:0];
//      
//      sprintf(strVar,"ntCLK_IOMUX2PLL_O_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_IOMUX2PLL_O[1:0] = wire *strVar[1:0];
//      
//      sprintf(strVar,"ntCLK_IOPRE2BRG_O_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_IOPRE2BRG_O[1:0] = wire *strVar[1:0];
//      
//      sprintf(strVar,"ntCLK_PIO2PLL_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_PIO2PLL_OUT[1:0] = wire *strVar[1:0];
//      
//      sprintf(strVar,"ntCLK_CFGS_OUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_CFGS_OUT = wire *strVar;

//      sprintf(strVar, "CKEB2D_7KM_TILE_%d_%d", sx, sy);
//      
//      device CKEB2D_7KM_TILE *strVar
//            port map (
//                 CLK_OUTT => ntRef_ntCLK_OUTT,
//                 CLK_OUTB => ntRef_ntCLK_OUTB,
//                 TIEHI => ntRef_ntTIEHI,
//                 CLK_GLOBAL_OUTR => ntRef_ntCLK_GLOBAL_OUTR,
//                 CLK_GLOBAL_OUTL => ntRef_ntCLK_GLOBAL_OUTL,
//                 SIG_GLOBAL_OUTR => ntRef_ntSIG_GLOBAL_OUTR,
//                 SIG_GLOBAL_OUTL => ntRef_ntSIG_GLOBAL_OUTL,
//                 CLK_BRG_OUT => ntRef_ntCLK_BRG_OUT,
//                 CLK_DLY_L_OUT => ntRef_ntCLK_DLY_L_OUT,
//                 CLK_DLY_M_OUT => ntRef_ntCLK_DLY_M_OUT,
//                 CLK_DLY_R_OUT => ntRef_ntCLK_DLY_R_OUT,
//                 CLKOS_PLL0_OUT => ntRef_ntCLKOS_PLL0_OUT,
//                 CLKOS_PLL1_OUT => ntRef_ntCLKOS_PLL1_OUT,
//                 CLKOP_PLL0_OUT => ntRef_ntCLKOP_PLL0_OUT,
//                 CLKOP_PLL1_OUT => ntRef_ntCLKOP_PLL1_OUT,
//                 CLKOS2_PLL1_OUT => ntRef_ntCLKOS2_PLL1_OUT,
//                 CLKOS3_PLL1_OUT => ntRef_ntCLKOS3_PLL1_OUT,
//                 CLKOS2_PLL0_OUT => ntRef_ntCLKOS2_PLL0_OUT,
//                 CLKOS3_PLL0_OUT => ntRef_ntCLKOS3_PLL0_OUT,
//                 CLK_PIO_OUT => ntRef_ntCLK_PIO_OUT,
//                 CLK_DIV0_OUT => ntRef_ntCLK_DIV0_OUT,
//                 CLK_DIV1_OUT => ntRef_ntCLK_DIV1_OUT,
//                 CLK_IOMUX2PLL_O => ntRef_ntCLK_IOMUX2PLL_O,
//                 CLK_IOPRE2BRG_O => ntRef_ntCLK_IOPRE2BRG_O,
//                 CLK_PIO2PLL_OUT => ntRef_ntCLK_PIO2PLL_OUT,
//                 CLK_CFGS_OUT => ntRef_ntCLK_CFGS_OUT         
//                      )
//          @([sx,sy]);

//  }// end of function place_ckeb2d_7km_tile
/********************************************************************************
********************************************************************************/
function place_esd_tile
(
    unsigned int tx,
    unsigned int ty,
    unsigned int tx_ccs,
    unsigned int ty_ccs,
    unsigned int tx_iob0,
    unsigned int ty_iob0,
    unsigned int tx_analog,
    unsigned int ty_analog
)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    string strVar;
    sprintf(strVar,"ntTP_%d_%d",sx,sy);
    &wire ntRef_ntTP = wire *strVar;

    sprintf(strVar,"ntCP_EN_%d_%d",sx,sy);
    &wire ntRef_ntCP_EN = wire *strVar;

    &wire ntRef_ntCP_EN_PAD     = <wire ntCP_EN  of architecture>;

    sprintf(strVar, "ESD_7K_TILE_%d_%d", sx, sy);
      device ESD_7K_TILE *strVar
        port map(
                  CP_EN   => ntRef_ntCP_EN,
                  TP      => ntRef_ntTP
                )
        @([sx,sy]);  

    int sx_ccs = tx_ccs * NUM_GRID_X + 3;
    int sy_ccs = ty_ccs * NUM_GRID_Y;

    int sx_analog = tx_analog * NUM_GRID_X + 3;
    int sy_analog = ty_analog * NUM_GRID_Y;

    int sx_iob0 = tx_iob0 * NUM_GRID_X;
    int sy_iob0 = ty_iob0 * NUM_GRID_Y;

    string ccs = "CCS_7K_TILE";
    string analog = "ANALOG_7K_TILE";

    connect
      (
        <pin CLK of <device ESD_7K_TILE @[sx,sy]>>             => <wire CLK_CFGM of <device *analog @[sx_analog,sy_analog]>>,
        <pin VREF_BG of <device ESD_7K_TILE @[sx,sy]>>         => <wire VBG_0P75V of <device *analog @[sx_analog,sy_analog]>>,
        <pin ICONST of <device ESD_7K_TILE @[sx,sy]>>          => <wire ICONST_3U[10] of <device *analog @[sx_analog,sy_analog]>>,
        <pin ICONST_BG of <device ESD_7K_TILE @[sx,sy]>>       => <wire ICONST_3U[9] of <device *analog @[sx_analog,sy_analog]>>,
        <pin LDO_OUT of <device ESD_7K_TILE @[sx,sy]>>         => <wire LDO_OUT of <device *analog @[sx_analog,sy_analog]>>

//      <pin SIO_VDDIO_DET_N of <device ESD_7K_TILE @[sx,sy]>> => <wire SIO_VDDIO_DET_N_T of <device IOB0_7KM_TILE @[sx_iob0,sy_iob0]>>,
//      <pin MFG_TRIM_BIT of <device ESD_7K_TILE @[sx,sy]>>    => <wire MFG_TRIM_BIT of <device *ccs @[sx_ccs,sy_ccs]>>,
//      <pin CP_DIS of <device ESD_7K_TILE @[sx,sy]>>    => <wire CP_SD of <device *ccs @[sx_ccs,sy_ccs]>>,
//      <pin CP_EN_I of <device ESD_7K_TILE @[sx,sy]>>    => ntRef_ntCP_EN_PAD,
//      <pin VNEG of <device ESD_7K_TILE @[sx,sy]>>            => <wire EFB_TP_BIAS of <device *ccs @[sx_ccs,sy_ccs]>>

      );

}//end of place_esd_tile
/********************************************************************************
********************************************************************************/
function place_analog_tile
(
    unsigned int tx,
    unsigned int ty, 
    unsigned int ty_ccs,
    unsigned int ty_pll
)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;
    
    string strVar;
    sprintf(strVar,"ntIPOLY_10U_%d_%d",sx,sy);
    &wire ntRef_ntIPOLY_10U[13:0] = wire *strVar[13:0];
   
    sprintf(strVar,"ntLDO_VREF_%d_%d",sx,sy);
    &wire ntRef_ntLDO_VREF = wire *strVar;
 
    sprintf(strVar,"ntICONST_3U_%d_%d",sx,sy);
    &wire ntRef_ntICONST_3U[12:0] = wire *strVar[12:0];
    
    sprintf(strVar,"ntVBG_0P75V_%d_%d",sx,sy);
    &wire ntRef_ntVBG_0P75V = wire *strVar;

    sprintf(strVar,"ntVBG_0P5V_%d_%d",sx,sy);
    &wire ntRef_ntVBG_0P5V = wire *strVar;
    
    sprintf(strVar,"ntBGSTABLE_%d_%d",sx,sy);
    &wire ntRef_ntBGSTABLE = wire *strVar;
    
    sprintf(strVar,"ntLDO_OUT_%d_%d",sx,sy);
    &wire ntRef_ntLDO_OUT = wire *strVar;
    
    sprintf(strVar,"ntPOR_N_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N = wire *strVar;

    sprintf(strVar,"ntPOR_N_1P06_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P06 = wire *strVar;
    
    sprintf(strVar,"ntCLK_CFGM_%d_%d",sx,sy);
    &wire ntRef_ntCLK_CFGM = wire *strVar;
    
    sprintf(strVar,"ntCLK_CFGS_%d_%d",sx,sy);
    &wire ntRef_ntCLK_CFGS = wire *strVar;
    
    sprintf(strVar,"ntCLK_EFLASH_%d_%d",sx,sy);
    &wire ntRef_ntCLK_EFLASH = wire *strVar;
    
    sprintf(strVar,"ntCLK_SED_%d_%d",sx,sy);
    &wire ntRef_ntCLK_SED = wire *strVar;
    
    sprintf(strVar,"ntCLK_USER_O_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USER_O = wire *strVar;
    
    sprintf(strVar,"ntMFG_TEST_O_%d_%d",sx,sy);
    &wire ntRef_ntMFG_TEST_O = wire *strVar;
    
    sprintf(strVar,"ntDUMMY_%d_%d",sx,sy);
    &wire ntRef_ntDUMMY = wire *strVar;
    
    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6AB = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6CD = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6AB = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6CD = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y2 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Y3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y3 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y2 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Y3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y3 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Q0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Q1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Q2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q2 = wire *strVar;
    
    sprintf(strVar,"ntTEST_A_Q3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q3 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Q0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q0 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Q1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q1 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Q2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q2 = wire *strVar;
    
    sprintf(strVar,"ntTEST_S_Q3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q3 = wire *strVar;


    sprintf(strVar, "ANALOG_7K_TILE_%d_%d", sx, sy);
      device ANALOG_7K_TILE *strVar
        port map(
                  IPOLY_10U   => ntRef_ntIPOLY_10U,  
                  ICONST_3U   => ntRef_ntICONST_3U,  
                  VBG_0P75V   => ntRef_ntVBG_0P75V,  
                  VBG_0P5V   => ntRef_ntVBG_0P5V,  
                  BGSTABLE    => ntRef_ntBGSTABLE,   
                  LDO_OUT     => ntRef_ntLDO_OUT,    
                  LDO_VREF     => ntRef_ntLDO_VREF,    
                  POR_N       => ntRef_ntPOR_N,      
                  POR_N_1P06       => ntRef_ntPOR_N_1P06,      
                  CLK_CFGM    => ntRef_ntCLK_CFGM,   
                  CLK_CFGS    => ntRef_ntCLK_CFGS,   
                  CLK_EFLASH  => ntRef_ntCLK_EFLASH, 
                  CLK_SED     => ntRef_ntCLK_SED,    
                  CLK_USER_O  => ntRef_ntCLK_USER_O, 
                  MFG_TEST_O  => ntRef_ntMFG_TEST_O, 
                  DUMMY       => ntRef_ntDUMMY,      
                  TIEHI       => ntRef_ntTIEHI,      
                  TEST_A_Y6AB => ntRef_ntTEST_A_Y6AB,
                  TEST_A_Y6CD => ntRef_ntTEST_A_Y6CD,
                  TEST_S_Y6AB => ntRef_ntTEST_S_Y6AB,
                  TEST_S_Y6CD => ntRef_ntTEST_S_Y6CD,
                  TEST_A_Y0   => ntRef_ntTEST_A_Y0,  
                  TEST_A_Y1   => ntRef_ntTEST_A_Y1,  
                  TEST_A_Y2   => ntRef_ntTEST_A_Y2,  
                  TEST_A_Y3   => ntRef_ntTEST_A_Y3,  
                  TEST_S_Y0   => ntRef_ntTEST_S_Y0,  
                  TEST_S_Y1   => ntRef_ntTEST_S_Y1,  
                  TEST_S_Y2   => ntRef_ntTEST_S_Y2,  
                  TEST_S_Y3   => ntRef_ntTEST_S_Y3,  
                  TEST_A_Q0   => ntRef_ntTEST_A_Q0,  
                  TEST_A_Q1   => ntRef_ntTEST_A_Q1,  
                  TEST_A_Q2   => ntRef_ntTEST_A_Q2,  
                  TEST_A_Q3   => ntRef_ntTEST_A_Q3,  
                  TEST_S_Q0   => ntRef_ntTEST_S_Q0,  
                  TEST_S_Q1   => ntRef_ntTEST_S_Q1,  
                  TEST_S_Q2   => ntRef_ntTEST_S_Q2,  
                  TEST_S_Q3   => ntRef_ntTEST_S_Q3
                )
        @([sx,sy]);  

    STRUCT inc_spec_ANALOG_7K incVar;
    string pin_SRB;
    string pin_logic_device;
    string attribute_IO;
    int loc_SRB;

    string analog = "ANALOG_7K_TILE";


    foreach incVar(inc_ANALOG_7K_SRB_spec)
    {
        pin_SRB = incVar.port_name_SRB;
        pin_logic_device = incVar.port_name_device;
        attribute_IO = incVar.attribute_IO;
        loc_SRB = incVar.loc_SRB;
       
        if(attribute_IO == "I")
        { 
          
           connect(<pin *pin_logic_device of <device *analog @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-3,sy]>>);
        }
        else
        {
          connect(<pin *pin_SRB of<device SRB_TILE@[sx-3,sy]>> => <wire *pin_logic_device of <device *analog @[sx,sy]>>); 
        }
    }   


}//end of place_analog_tile
/********************************************************************************
********************************************************************************/
function place_idcode_tile
(
    unsigned int tx,
    unsigned int ty,
    unsigned int tx_ccs,
    unsigned int ty_ccs
)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    string strVar;
    sprintf(strVar,"ntIDCODE_H12_%d_%d",sx,sy);
    &wire ntRef_ntIDCODE_H12[11:0] = wire *strVar[11:0];

    sprintf(strVar,"ntIDCODE_L18_%d_%d",sx,sy);
    &wire ntRef_ntIDCODE_L18[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntDRM_COLUMN_NUM_%d_%d",sx,sy);
    &wire ntRef_ntDRM_COLUMN_NUM[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntROW_NUM_%d_%d",sx,sy);
    &wire ntRef_ntROW_NUM[8:0] = wire *strVar[8:0];

    sprintf(strVar, "IDCODE_7K_TILE_%d_%d", sx, sy);
      device IDCODE_7K_TILE *strVar
        port map(
                  IDCODE_H12     => ntRef_ntIDCODE_H12,
                  IDCODE_L18     => ntRef_ntIDCODE_L18,
                  ROW_NUM        => ntRef_ntROW_NUM,
                  DRM_COLUMN_NUM => ntRef_ntDRM_COLUMN_NUM
                )
        @([sx,sy]);  

}//end of place_idcode_tile
/********************************************************************************
********************************************************************************/
function place_pll_tile_7km(unsigned int tx,ty)
{   

   unsigned int sx, sy;

    
    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;
       
    string strVar;
    sprintf(strVar,"ntLOCKOUT_CAS_%d_%d",sx,sy);
    &wire ntRef_ntLOCKOUT_CAS = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOP_%d_%d",sx,sy);
    &wire ntRef_ntCLKOP = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLKOS_%d_%d",sx,sy);
    &wire ntRef_ntCLKOS = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLKOS2_%d_%d",sx,sy);
    &wire ntRef_ntCLKOS2 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLKOS3_%d_%d",sx,sy);
    &wire ntRef_ntCLKOS3 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntPREADY_%d_%d",sx,sy);
    &wire ntRef_ntPREADY = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPRDATA_%d_%d",sx,sy);
    &wire ntRef_ntPRDATA[7:0] = wire *strVar[7:0]           /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y6AB_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6AB_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y6CD_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6CD_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y0_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y0_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y1_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y1_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y2_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y2_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y3_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y3_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q0_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q0_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q1_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q1_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q2_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q2_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q3_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q3_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y6AB_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6AB_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y6CD_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6CD_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y0_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y0_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y1_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y1_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y2_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y2_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y3_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y3_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q0_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q0_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q1_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q1_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q2_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q2_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q3_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q3_0 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y6AB_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6AB_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y6CD_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6CD_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y0_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y0_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y1_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y1_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y2_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y2_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Y3_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y3_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q0_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q0_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q1_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q1_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q2_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q2_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_A_Q3_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q3_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y6AB_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6AB_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y6CD_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6CD_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y0_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y0_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y1_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y1_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y2_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y2_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Y3_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y3_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q0_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q0_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q1_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q1_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q2_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q2_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_S_Q3_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q3_1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;   

    sprintf(strVar,"ntLDO_TEST_OUT_%d_%d",sx,sy);
    &wire ntRef_ntLDO_TEST_OUT = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;       

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar, "PLL_TILE_%d_%d", sx, sy);
    
    device PLL_TILE *strVar
         port map (
                    LOCKOUT_CAS   => ntRef_ntLOCKOUT_CAS, 

                    CLKOP         => ntRef_ntCLKOP,
                    CLKOS         => ntRef_ntCLKOS,
                    CLKOS2        => ntRef_ntCLKOS2,
                    CLKOS3        => ntRef_ntCLKOS3,
                    PREADY        => ntRef_ntPREADY,
                    PRDATA        => ntRef_ntPRDATA,
                    LDO_TEST_OUT  => ntRef_ntLDO_TEST_OUT,

                    TEST_A_Y0_0       => ntRef_ntTEST_A_Y0_0,
                    TEST_A_Y1_0       => ntRef_ntTEST_A_Y1_0,
                    TEST_A_Y2_0       => ntRef_ntTEST_A_Y2_0,
                    TEST_A_Y3_0       => ntRef_ntTEST_A_Y3_0,
                    TEST_A_Q0_0       => ntRef_ntTEST_A_Q0_0,
                    TEST_A_Q1_0       => ntRef_ntTEST_A_Q1_0,
                    TEST_A_Q2_0       => ntRef_ntTEST_A_Q2_0,
                    TEST_A_Q3_0       => ntRef_ntTEST_A_Q3_0,
                    TEST_A_Y6AB_0     => ntRef_ntTEST_A_Y6AB_0,
                    TEST_A_Y6CD_0     => ntRef_ntTEST_A_Y6CD_0,
                    TEST_S_Y0_0       => ntRef_ntTEST_S_Y0_0,
                    TEST_S_Y1_0       => ntRef_ntTEST_S_Y1_0,
                    TEST_S_Y2_0       => ntRef_ntTEST_S_Y2_0,
                    TEST_S_Y3_0       => ntRef_ntTEST_S_Y3_0,
                    TEST_S_Q0_0       => ntRef_ntTEST_S_Q0_0,
                    TEST_S_Q1_0       => ntRef_ntTEST_S_Q1_0,
                    TEST_S_Q2_0       => ntRef_ntTEST_S_Q2_0,
                    TEST_S_Q3_0       => ntRef_ntTEST_S_Q3_0,
                    TEST_S_Y6AB_0     => ntRef_ntTEST_S_Y6AB_0,
                    TEST_S_Y6CD_0     => ntRef_ntTEST_S_Y6CD_0,
                    TEST_A_Y0_1       => ntRef_ntTEST_A_Y0_1,
                    TEST_A_Y1_1       => ntRef_ntTEST_A_Y1_1,
                    TEST_A_Y2_1       => ntRef_ntTEST_A_Y2_1,
                    TEST_A_Y3_1       => ntRef_ntTEST_A_Y3_1,
                    TEST_A_Q0_1       => ntRef_ntTEST_A_Q0_1,
                    TEST_A_Q1_1       => ntRef_ntTEST_A_Q1_1,
                    TEST_A_Q2_1       => ntRef_ntTEST_A_Q2_1,
                    TEST_A_Q3_1       => ntRef_ntTEST_A_Q3_1,
                    TEST_A_Y6AB_1     => ntRef_ntTEST_A_Y6AB_1,
                    TEST_A_Y6CD_1     => ntRef_ntTEST_A_Y6CD_1,
                    TEST_S_Y0_1       => ntRef_ntTEST_S_Y0_1,
                    TEST_S_Y1_1       => ntRef_ntTEST_S_Y1_1,
                    TEST_S_Y2_1       => ntRef_ntTEST_S_Y2_1,
                    TEST_S_Y3_1       => ntRef_ntTEST_S_Y3_1,
                    TEST_S_Q0_1       => ntRef_ntTEST_S_Q0_1,
                    TEST_S_Q1_1       => ntRef_ntTEST_S_Q1_1,
                    TEST_S_Q2_1       => ntRef_ntTEST_S_Q2_1,
                    TEST_S_Q3_1       => ntRef_ntTEST_S_Q3_1,
                    TEST_S_Y6AB_1     => ntRef_ntTEST_S_Y6AB_1,
                    TEST_S_Y6CD_1     => ntRef_ntTEST_S_Y6CD_1,
                    TIEHI             => ntRef_ntTIEHI
                  )
        @([sx,sy]);
     

      STRUCT inc_spec_PLL incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_PLL_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device PLL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-2,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx-3,sy_SRB]>> => <wire *pin_logic_device of <device PLL_TILE @[sx,sy]>>); 
          }
      } 
    
}// end of function place_pll_tile


/********************************************************************************
********************************************************************************/
//  function place_ccs_7k_tile(unsigned int tx, ty, tx_pll, ty_pll)
//  {   
//      unsigned int sx, sy;
//      
//      sx = tx * NUM_GRID_X + 3;
//      sy = ty * NUM_GRID_Y;
//     
//      string strVar;
//     

//      sprintf(strVar,"ntBLSRIN_%d_%d",sx,sy);
//      &wire ntRef_ntBLSRIN[31:0] = wire *strVar[31:0];
//      
//      sprintf(strVar,"ntCAPTUREDR_%d_%d",sx,sy);
//      &wire ntRef_ntCAPTUREDR = wire *strVar;
//      
//      sprintf(strVar,"ntCFGMOD_DONE_%d_%d",sx,sy);
//      &wire ntRef_ntCFGMOD_DONE = wire *strVar;
//      
//      sprintf(strVar,"ntCFGMOD_EFB_%d_%d",sx,sy);
//      &wire ntRef_ntCFGMOD_EFB = wire *strVar;
//      
//      sprintf(strVar,"ntCFGMOD_I2C_%d_%d",sx,sy);
//      &wire ntRef_ntCFGMOD_I2C = wire *strVar;
//      
//      sprintf(strVar,"ntCFGMOD_INIT_%d_%d",sx,sy);
//      &wire ntRef_ntCFGMOD_INIT = wire *strVar;
//      
//      sprintf(strVar,"ntCFGMOD_JEN_%d_%d",sx,sy);
//      &wire ntRef_ntCFGMOD_JEN = wire *strVar;
//      
//      sprintf(strVar,"ntCFGMOD_JTAG_%d_%d",sx,sy);
//      &wire ntRef_ntCFGMOD_JTAG = wire *strVar;
//      
//      sprintf(strVar,"ntCFGMOD_MS_%d_%d",sx,sy);
//      &wire ntRef_ntCFGMOD_MS = wire *strVar;
//      
//      sprintf(strVar,"ntCFGMOD_RST_%d_%d",sx,sy);
//      &wire ntRef_ntCFGMOD_RST = wire *strVar;
//      
//      sprintf(strVar,"ntCFGMOD_SPAL_%d_%d",sx,sy);
//      &wire ntRef_ntCFGMOD_SPAL = wire *strVar;
//      
//      sprintf(strVar,"ntCFGMOD_SPI_%d_%d",sx,sy);
//      &wire ntRef_ntCFGMOD_SPI = wire *strVar;
//      
//      sprintf(strVar,"ntCFGMOD_SS_%d_%d",sx,sy);
//      &wire ntRef_ntCFGMOD_SS = wire *strVar;
//      
//      sprintf(strVar,"ntCLK_CRAM_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_CRAM = wire *strVar;
//      
//      sprintf(strVar,"ntCLK_DRM_%d_%d",sx,sy);
//      &wire ntRef_ntCLK_DRM = wire *strVar;
//      
//      sprintf(strVar,"ntCLOCKDR_%d_%d",sx,sy);
//      &wire ntRef_ntCLOCKDR = wire *strVar;
//      
//      sprintf(strVar,"ntCLOCKDR1_%d_%d",sx,sy);
//      &wire ntRef_ntCLOCKDR1 = wire *strVar;
//      
//      sprintf(strVar,"ntCLOCKDR2_%d_%d",sx,sy);
//      &wire ntRef_ntCLOCKDR2 = wire *strVar;
//      
//      sprintf(strVar,"ntCMEM_TYPE_%d_%d",sx,sy);
//      &wire ntRef_ntCMEM_TYPE[1:0] = wire *strVar[1:0];
//      
//      sprintf(strVar,"ntCOLUMN_%d_%d",sx,sy);
//      &wire ntRef_ntCOLUMN[7:0] = wire *strVar[7:0];
//      
//      sprintf(strVar,"ntDONE_%d_%d",sx,sy);
//      &wire ntRef_ntDONE = wire *strVar;
//      
//      sprintf(strVar,"ntDONE_OE_%d_%d",sx,sy);
//      &wire ntRef_ntDONE_OE = wire *strVar;
//      
//      sprintf(strVar,"ntEFB_TDO_%d_%d",sx,sy);
//      &wire ntRef_ntEFB_TDO = wire *strVar;
//      
//      sprintf(strVar,"ntEFB_TOE_%d_%d",sx,sy);
//      &wire ntRef_ntEFB_TOE = wire *strVar;
//      
//      sprintf(strVar,"ntEFB_TP_BIAS_%d_%d",sx,sy);
//      &wire ntRef_ntEFB_TP_BIAS = wire *strVar;
//      
//      sprintf(strVar,"ntERASE_EN_%d_%d",sx,sy);
//      &wire ntRef_ntERASE_EN = wire *strVar;
//      
//      sprintf(strVar,"ntFLG_USER1_%d_%d",sx,sy);
//      &wire ntRef_ntFLG_USER1 = wire *strVar;
//      
//      sprintf(strVar,"ntFLG_USER2_%d_%d",sx,sy);
//      &wire ntRef_ntFLG_USER2 = wire *strVar;
//      
//      sprintf(strVar,"ntFRAME_ADDR_%d_%d",sx,sy);
//      &wire ntRef_ntFRAME_ADDR[7:0] = wire *strVar[7:0];
//      
//      sprintf(strVar,"ntFREQ_TRIM_%d_%d",sx,sy);
//      &wire ntRef_ntFREQ_TRIM[4:0] = wire *strVar[4:0];
//      
//      sprintf(strVar,"ntGLOGEN_%d_%d",sx,sy);
//      &wire ntRef_ntGLOGEN = wire *strVar;
//      
//      sprintf(strVar,"ntGOUTEN_%d_%d",sx,sy);
//      &wire ntRef_ntGOUTEN = wire *strVar;
//      
//      sprintf(strVar,"ntGRS_N_%d_%d",sx,sy);
//      &wire ntRef_ntGRS_N = wire *strVar;
//      
//      sprintf(strVar,"ntGWEN_%d_%d",sx,sy);
//      &wire ntRef_ntGWEN = wire *strVar;
//      
//      sprintf(strVar,"ntINIT_COMPLETE_%d_%d",sx,sy);
//      &wire ntRef_ntINIT_COMPLETE = wire *strVar;
//      
//      sprintf(strVar,"ntINIT_N_OE_%d_%d",sx,sy);
//      &wire ntRef_ntINIT_N_OE = wire *strVar;
//      
//      sprintf(strVar,"ntJRST_%d_%d",sx,sy);
//      &wire ntRef_ntJRST = wire *strVar;
//      
//      sprintf(strVar,"ntJRTI_%d_%d",sx,sy);
//      &wire ntRef_ntJRTI = wire *strVar;
//      
//      sprintf(strVar,"ntMASK_EN_%d_%d",sx,sy);
//      &wire ntRef_ntMASK_EN = wire *strVar;
//      
//      sprintf(strVar,"ntMCE_%d_%d",sx,sy);
//      &wire ntRef_ntMCE = wire *strVar;
//      
//      sprintf(strVar,"ntMCLK_EN_%d_%d",sx,sy);
//      &wire ntRef_ntMCLK_EN = wire *strVar;
//      
//      sprintf(strVar,"ntMFG_SRAM_RETENTION_%d_%d",sx,sy);
//      &wire ntRef_ntMFG_SRAM_RETENTION = wire *strVar;
//      
//      sprintf(strVar,"ntMFG_TRIM_BIT_%d_%d",sx,sy);
//      &wire ntRef_ntMFG_TRIM_BIT[2:0] = wire *strVar[2:0];
//      
//      sprintf(strVar,"ntMISO_O_%d_%d",sx,sy);
//      &wire ntRef_ntMISO_O = wire *strVar;
//      
//      sprintf(strVar,"ntMISO_OE_%d_%d",sx,sy);
//      &wire ntRef_ntMISO_OE = wire *strVar;
//      
//      sprintf(strVar,"ntMODE_1_%d_%d",sx,sy);
//      &wire ntRef_ntMODE_1 = wire *strVar;
//      
//      sprintf(strVar,"ntMODE_2_%d_%d",sx,sy);
//      &wire ntRef_ntMODE_2 = wire *strVar;
//      
//      sprintf(strVar,"ntMODE_3_%d_%d",sx,sy);
//      &wire ntRef_ntMODE_3 = wire *strVar;
//      
//      sprintf(strVar,"ntMOSI_O_%d_%d",sx,sy);
//      &wire ntRef_ntMOSI_O = wire *strVar;
//      
//      sprintf(strVar,"ntMOSI_OE_%d_%d",sx,sy);
//      &wire ntRef_ntMOSI_OE = wire *strVar;
//      
//      sprintf(strVar,"ntMS_N_%d_%d",sx,sy);
//      &wire ntRef_ntMS_N = wire *strVar;
//      
//      sprintf(strVar,"ntMS_N_OE_%d_%d",sx,sy);
//      &wire ntRef_ntMS_N_OE = wire *strVar;
//      
//      sprintf(strVar,"ntMWR_%d_%d",sx,sy);
//      &wire ntRef_ntMWR = wire *strVar;
//      
//      sprintf(strVar,"ntOSC_EN_%d_%d",sx,sy);
//      &wire ntRef_ntOSC_EN = wire *strVar;
//      
//      sprintf(strVar,"ntOSCFSEL_%d_%d",sx,sy);
//      &wire ntRef_ntOSCFSEL[6:0] = wire *strVar[6:0];
//      
//      sprintf(strVar,"ntOSCFSEL_RBCRC_%d_%d",sx,sy);
//      &wire ntRef_ntOSCFSEL_RBCRC[6:0] = wire *strVar[6:0];
//      
//      sprintf(strVar,"ntOSC_TR_%d_%d",sx,sy);
//      &wire ntRef_ntOSC_TR = wire *strVar;
//      
//      sprintf(strVar,"ntOSC_TR_RBCRC_%d_%d",sx,sy);
//      &wire ntRef_ntOSC_TR_RBCRC = wire *strVar;
//      
//      sprintf(strVar,"ntPCTLR_BG_OFF_%d_%d",sx,sy);
//      &wire ntRef_ntPCTLR_BG_OFF = wire *strVar;
//      
//      sprintf(strVar,"ntPCTLR_POR_OFF_%d_%d",sx,sy);
//      &wire ntRef_ntPCTLR_POR_OFF = wire *strVar;
//      
//      sprintf(strVar,"ntPCTLR_STDBY_%d_%d",sx,sy);
//      &wire ntRef_ntPCTLR_STDBY = wire *strVar;
//      
//      sprintf(strVar,"ntPCTLR_STDBY_FLG_%d_%d",sx,sy);
//      &wire ntRef_ntPCTLR_STDBY_FLG = wire *strVar;
//      
//      sprintf(strVar,"ntPCTLR_STOP_%d_%d",sx,sy);
//      &wire ntRef_ntPCTLR_STOP = wire *strVar;
//      
//      sprintf(strVar,"ntPRDATA_%d_%d",sx,sy);
//      &wire ntRef_ntPRDATA[7:0] = wire *strVar[7:0];
//      
//      sprintf(strVar,"ntPREADY_%d_%d",sx,sy);
//      &wire ntRef_ntPREADY = wire *strVar;
//      
//      sprintf(strVar,"ntPRECHGE_%d_%d",sx,sy);
//      &wire ntRef_ntPRECHGE = wire *strVar;
//      
//      sprintf(strVar,"ntPROG_CAP_%d_%d",sx,sy);
//      &wire ntRef_ntPROG_CAP = wire *strVar;
//      
//      sprintf(strVar,"ntPROG_ON_%d_%d",sx,sy);
//      &wire ntRef_ntPROG_ON = wire *strVar;
//      
//      sprintf(strVar,"ntPUP_SEL_N_%d_%d",sx,sy);
//      &wire ntRef_ntPUP_SEL_N = wire *strVar;
//      
//      sprintf(strVar,"ntRBCRC_CLK_EN_%d_%d",sx,sy);
//      &wire ntRef_ntRBCRC_CLK_EN = wire *strVar;
//      
//      sprintf(strVar,"ntRDBK_CAP_%d_%d",sx,sy);
//      &wire ntRef_ntRDBK_CAP = wire *strVar;
//      
//      sprintf(strVar,"ntREAD_%d_%d",sx,sy);
//      &wire ntRef_ntREAD = wire *strVar;
//      
//      sprintf(strVar,"ntREGION_RW_EN_%d_%d",sx,sy);
//      &wire ntRef_ntREGION_RW_EN = wire *strVar;
//      
//      sprintf(strVar,"ntSCK_%d_%d",sx,sy);
//      &wire ntRef_ntSCK = wire *strVar;
//      
//      sprintf(strVar,"ntSCK_OE_%d_%d",sx,sy);
//      &wire ntRef_ntSCK_OE = wire *strVar;
//      
//      sprintf(strVar,"ntSDA_O_%d_%d",sx,sy);
//      &wire ntRef_ntSDA_O = wire *strVar;
//      
//      sprintf(strVar,"ntSHIFTDR_%d_%d",sx,sy);
//      &wire ntRef_ntSHIFTDR = wire *strVar;
//      
//      sprintf(strVar,"ntSPAL_BUSY_%d_%d",sx,sy);
//      &wire ntRef_ntSPAL_BUSY = wire *strVar;
//      
//      sprintf(strVar,"ntSPAL_D_OE_%d_%d",sx,sy);
//      &wire ntRef_ntSPAL_D_OE = wire *strVar;
//      
//      sprintf(strVar,"ntSPAL_DOUT_%d_%d",sx,sy);
//      &wire ntRef_ntSPAL_DOUT[15:0] = wire *strVar[15:0];
//      
//      sprintf(strVar,"ntTDO_%d_%d",sx,sy);
//      &wire ntRef_ntTDO = wire *strVar;
//      
//      sprintf(strVar,"ntTDO_OE_%d_%d",sx,sy);
//      &wire ntRef_ntTDO_OE = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_A_Q0_S0_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_A_Q0_S0 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_A_Q0_S1_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_A_Q0_S1 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_A_Q1_S0_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_A_Q1_S0 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_A_Q1_S1_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_A_Q1_S1 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_A_Q2_S0_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_A_Q2_S0 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_A_Q2_S1_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_A_Q2_S1 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_A_Q3_S0_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_A_Q3_S0 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_A_Q3_S1_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_A_Q3_S1 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_A_Y0_S0_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_A_Y0_S0 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_A_Y0_S1_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_A_Y0_S1 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_A_Y1_S0_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_A_Y1_S0 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_A_Y1_S1_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_A_Y1_S1 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_A_Y2_S0_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_A_Y2_S0 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_A_Y2_S1_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_A_Y2_S1 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_A_Y3_S0_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_A_Y3_S0 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_A_Y3_S1_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_A_Y3_S1 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_A_Y6AB_S0_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_A_Y6AB_S0 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_A_Y6AB_S1_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_A_Y6AB_S1 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_A_Y6CD_S0_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_A_Y6CD_S0 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_A_Y6CD_S1_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_A_Y6CD_S1 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_S_Q0_S0_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_S_Q0_S0 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_S_Q0_S1_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_S_Q0_S1 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_S_Q1_S0_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_S_Q1_S0 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_S_Q1_S1_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_S_Q1_S1 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_S_Q2_S0_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_S_Q2_S0 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_S_Q2_S1_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_S_Q2_S1 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_S_Q3_S0_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_S_Q3_S0 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_S_Q3_S1_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_S_Q3_S1 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_S_Y0_S0_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_S_Y0_S0 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_S_Y0_S1_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_S_Y0_S1 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_S_Y1_S0_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_S_Y1_S0 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_S_Y1_S1_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_S_Y1_S1 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_S_Y2_S0_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_S_Y2_S0 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_S_Y2_S1_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_S_Y2_S1 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_S_Y3_S0_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_S_Y3_S0 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_S_Y3_S1_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_S_Y3_S1 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_S_Y6AB_S0_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_S_Y6AB_S0 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_S_Y6AB_S1_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_S_Y6AB_S1 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_S_Y6CD_S0_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_S_Y6CD_S0 = wire *strVar;
//      
//      sprintf(strVar,"ntTEST_S_Y6CD_S1_%d_%d",sx,sy);
//      &wire ntRef_ntTEST_S_Y6CD_S1 = wire *strVar;
//      
//      sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
//      &wire ntRef_ntTIEHI = wire *strVar;
//      
//      sprintf(strVar,"ntTIELO_%d_%d",sx,sy);
//      &wire ntRef_ntTIELO = wire *strVar;
//      
//      sprintf(strVar,"ntTRIM_ICONST_%d_%d",sx,sy);
//      &wire ntRef_ntTRIM_ICONST[5:0] = wire *strVar[5:0];
//      
//      sprintf(strVar,"ntTRIM_LDO_VREF_%d_%d",sx,sy);
//      &wire ntRef_ntTRIM_LDO_VREF[4:0] = wire *strVar[4:0];
//      
//      sprintf(strVar,"ntTRIM_VREF1_%d_%d",sx,sy);
//      &wire ntRef_ntTRIM_VREF1[4:0] = wire *strVar[4:0];
//      
//      sprintf(strVar,"ntTRIM_VREF2_%d_%d",sx,sy);
//      &wire ntRef_ntTRIM_VREF2[4:0] = wire *strVar[4:0];
//      
//      sprintf(strVar,"ntUID_DOUT_%d_%d",sx,sy);
//      &wire ntRef_ntUID_DOUT = wire *strVar;
//      
//      sprintf(strVar,"ntUPDATEDR_%d_%d",sx,sy);
//      &wire ntRef_ntUPDATEDR = wire *strVar;
//      
//      sprintf(strVar,"ntWAKEUP_OVER_N_%d_%d",sx,sy);
//      &wire ntRef_ntWAKEUP_OVER_N = wire *strVar;
//      
//      sprintf(strVar,"ntWL_ON_%d_%d",sx,sy);
//      &wire ntRef_ntWL_ON = wire *strVar;

//      sprintf(strVar,"ntCP_SD_%d_%d",sx,sy);
//      &wire ntRef_ntCP_SD = wire *strVar;


//      sprintf(strVar, "CCS_7K_TILE_%d_%d", sx, sy);
//      device CCS_7K_TILE *strVar
//            port map (
//                       BLSRIN             => ntRef_ntBLSRIN,            
//                       CAPTUREDR          => ntRef_ntCAPTUREDR,         
//                       CFGMOD_DONE        => ntRef_ntCFGMOD_DONE,       
//                       CFGMOD_EFB         => ntRef_ntCFGMOD_EFB,        
//                       CFGMOD_I2C         => ntRef_ntCFGMOD_I2C,        
//                       CFGMOD_INIT        => ntRef_ntCFGMOD_INIT,       
//                       CFGMOD_JEN         => ntRef_ntCFGMOD_JEN,        
//                       CFGMOD_JTAG        => ntRef_ntCFGMOD_JTAG,       
//                       CFGMOD_MS          => ntRef_ntCFGMOD_MS,         
//                       CFGMOD_RST         => ntRef_ntCFGMOD_RST,        
//                       CFGMOD_SPAL        => ntRef_ntCFGMOD_SPAL,       
//                       CFGMOD_SPI         => ntRef_ntCFGMOD_SPI,        
//                       CFGMOD_SS          => ntRef_ntCFGMOD_SS,         
//                       CLK_CRAM           => ntRef_ntCLK_CRAM,          
//                       CLK_DRM            => ntRef_ntCLK_DRM,           
//                       CLOCKDR            => ntRef_ntCLOCKDR,           
//                       CLOCKDR1           => ntRef_ntCLOCKDR1,          
//                       CLOCKDR2           => ntRef_ntCLOCKDR2,          
//                       CMEM_TYPE          => ntRef_ntCMEM_TYPE,         
//                       COLUMN             => ntRef_ntCOLUMN,            
//                       DONE               => ntRef_ntDONE,              
//                       DONE_OE            => ntRef_ntDONE_OE,           
//                       EFB_TDO            => ntRef_ntEFB_TDO,           
//                       EFB_TOE            => ntRef_ntEFB_TOE,           
//                       EFB_TP_BIAS        => ntRef_ntEFB_TP_BIAS,       
//                       ERASE_EN           => ntRef_ntERASE_EN,          
//                       FLG_USER1          => ntRef_ntFLG_USER1,         
//                       FLG_USER2          => ntRef_ntFLG_USER2,         
//                       FRAME_ADDR         => ntRef_ntFRAME_ADDR,        
//                       FREQ_TRIM          => ntRef_ntFREQ_TRIM,         
//                       GLOGEN             => ntRef_ntGLOGEN,            
//                       GOUTEN             => ntRef_ntGOUTEN,            
//                       GRS_N              => ntRef_ntGRS_N,             
//                       GWEN               => ntRef_ntGWEN,              
//                       INIT_COMPLETE      => ntRef_ntINIT_COMPLETE,     
//                       INIT_N_OE          => ntRef_ntINIT_N_OE,         
//                       JRST               => ntRef_ntJRST,              
//                       JRTI               => ntRef_ntJRTI,              
//                       MASK_EN            => ntRef_ntMASK_EN,           
//                       MCE                => ntRef_ntMCE,               
//                       MCLK_EN            => ntRef_ntMCLK_EN,           
//                       MFG_SRAM_RETENTION => ntRef_ntMFG_SRAM_RETENTION,
//                       MFG_TRIM_BIT       => ntRef_ntMFG_TRIM_BIT,      
//                       MISO_O             => ntRef_ntMISO_O,            
//                       MISO_OE            => ntRef_ntMISO_OE,           
//                       MODE_1             => ntRef_ntMODE_1,            
//                       MODE_2             => ntRef_ntMODE_2,            
//                       MODE_3             => ntRef_ntMODE_3,            
//                       MOSI_O             => ntRef_ntMOSI_O,            
//                       MOSI_OE            => ntRef_ntMOSI_OE,           
//                       MS_N               => ntRef_ntMS_N,              
//                       MS_N_OE            => ntRef_ntMS_N_OE,           
//                       MWR                => ntRef_ntMWR,               
//                       OSC_EN             => ntRef_ntOSC_EN,            
//                       OSCFSEL            => ntRef_ntOSCFSEL,           
//                       OSCFSEL_RBCRC      => ntRef_ntOSCFSEL_RBCRC,     
//                       OSC_TR             => ntRef_ntOSC_TR,            
//                       OSC_TR_RBCRC       => ntRef_ntOSC_TR_RBCRC,      
//                       PCTLR_BG_OFF       => ntRef_ntPCTLR_BG_OFF,      
//                       PCTLR_POR_OFF      => ntRef_ntPCTLR_POR_OFF,     
//                       PCTLR_STDBY        => ntRef_ntPCTLR_STDBY,       
//                       PCTLR_STDBY_FLG    => ntRef_ntPCTLR_STDBY_FLG,   
//                       PCTLR_STOP         => ntRef_ntPCTLR_STOP,        
//                       PRDATA             => ntRef_ntPRDATA,            
//                       PREADY             => ntRef_ntPREADY,            
//                       PRECHGE            => ntRef_ntPRECHGE,           
//                       PROG_CAP           => ntRef_ntPROG_CAP,          
//                       PROG_ON            => ntRef_ntPROG_ON,           
//                       PUP_SEL_N          => ntRef_ntPUP_SEL_N,         
//                       RBCRC_CLK_EN       => ntRef_ntRBCRC_CLK_EN,      
//                       RDBK_CAP           => ntRef_ntRDBK_CAP,          
//                       READ               => ntRef_ntREAD,              
//                       REGION_RW_EN       => ntRef_ntREGION_RW_EN,      
//                       SCK                => ntRef_ntSCK,               
//                       SCK_OE             => ntRef_ntSCK_OE,            
//                       SDA_O              => ntRef_ntSDA_O,             
//                       SHIFTDR            => ntRef_ntSHIFTDR,           
//                       SPAL_BUSY          => ntRef_ntSPAL_BUSY,         
//                       SPAL_D_OE          => ntRef_ntSPAL_D_OE,         
//                       SPAL_DOUT          => ntRef_ntSPAL_DOUT,         
//                       TDO                => ntRef_ntTDO,               
//                       TDO_OE             => ntRef_ntTDO_OE,            
//                       TEST_A_Q0_S0       => ntRef_ntTEST_A_Q0_S0,      
//                       TEST_A_Q0_S1       => ntRef_ntTEST_A_Q0_S1,      
//                       TEST_A_Q1_S0       => ntRef_ntTEST_A_Q1_S0,      
//                       TEST_A_Q1_S1       => ntRef_ntTEST_A_Q1_S1,      
//                       TEST_A_Q2_S0       => ntRef_ntTEST_A_Q2_S0,      
//                       TEST_A_Q2_S1       => ntRef_ntTEST_A_Q2_S1,      
//                       TEST_A_Q3_S0       => ntRef_ntTEST_A_Q3_S0,      
//                       TEST_A_Q3_S1       => ntRef_ntTEST_A_Q3_S1,      
//                       TEST_A_Y0_S0       => ntRef_ntTEST_A_Y0_S0,      
//                       TEST_A_Y0_S1       => ntRef_ntTEST_A_Y0_S1,      
//                       TEST_A_Y1_S0       => ntRef_ntTEST_A_Y1_S0,      
//                       TEST_A_Y1_S1       => ntRef_ntTEST_A_Y1_S1,      
//                       TEST_A_Y2_S0       => ntRef_ntTEST_A_Y2_S0,      
//                       TEST_A_Y2_S1       => ntRef_ntTEST_A_Y2_S1,      
//                       TEST_A_Y3_S0       => ntRef_ntTEST_A_Y3_S0,      
//                       TEST_A_Y3_S1       => ntRef_ntTEST_A_Y3_S1,      
//                       TEST_A_Y6AB_S0     => ntRef_ntTEST_A_Y6AB_S0,    
//                       TEST_A_Y6AB_S1     => ntRef_ntTEST_A_Y6AB_S1,    
//                       TEST_A_Y6CD_S0     => ntRef_ntTEST_A_Y6CD_S0,    
//                       TEST_A_Y6CD_S1     => ntRef_ntTEST_A_Y6CD_S1,    
//                       TEST_S_Q0_S0       => ntRef_ntTEST_S_Q0_S0,      
//                       TEST_S_Q0_S1       => ntRef_ntTEST_S_Q0_S1,      
//                       TEST_S_Q1_S0       => ntRef_ntTEST_S_Q1_S0,      
//                       TEST_S_Q1_S1       => ntRef_ntTEST_S_Q1_S1,      
//                       TEST_S_Q2_S0       => ntRef_ntTEST_S_Q2_S0,      
//                       TEST_S_Q2_S1       => ntRef_ntTEST_S_Q2_S1,      
//                       TEST_S_Q3_S0       => ntRef_ntTEST_S_Q3_S0,      
//                       TEST_S_Q3_S1       => ntRef_ntTEST_S_Q3_S1,      
//                       TEST_S_Y0_S0       => ntRef_ntTEST_S_Y0_S0,      
//                       TEST_S_Y0_S1       => ntRef_ntTEST_S_Y0_S1,      
//                       TEST_S_Y1_S0       => ntRef_ntTEST_S_Y1_S0,      
//                       TEST_S_Y1_S1       => ntRef_ntTEST_S_Y1_S1,      
//                       TEST_S_Y2_S0       => ntRef_ntTEST_S_Y2_S0,      
//                       TEST_S_Y2_S1       => ntRef_ntTEST_S_Y2_S1,      
//                       TEST_S_Y3_S0       => ntRef_ntTEST_S_Y3_S0,      
//                       TEST_S_Y3_S1       => ntRef_ntTEST_S_Y3_S1,      
//                       TEST_S_Y6AB_S0     => ntRef_ntTEST_S_Y6AB_S0,    
//                       TEST_S_Y6AB_S1     => ntRef_ntTEST_S_Y6AB_S1,    
//                       TEST_S_Y6CD_S0     => ntRef_ntTEST_S_Y6CD_S0,    
//                       TEST_S_Y6CD_S1     => ntRef_ntTEST_S_Y6CD_S1,    
//                       TIEHI              => ntRef_ntTIEHI,             
//                       TIELO              => ntRef_ntTIELO,             
//                       TRIM_ICONST        => ntRef_ntTRIM_ICONST,       
//                       TRIM_LDO_VREF      => ntRef_ntTRIM_LDO_VREF,     
//                       TRIM_VREF1         => ntRef_ntTRIM_VREF1,        
//                       TRIM_VREF2         => ntRef_ntTRIM_VREF2,        
//                       UID_DOUT           => ntRef_ntUID_DOUT,          
//                       UPDATEDR           => ntRef_ntUPDATEDR,          
//                       WAKEUP_OVER_N      => ntRef_ntWAKEUP_OVER_N,     
//                       CP_SD              => ntRef_ntCP_SD,     
//                       WL_ON              => ntRef_ntWL_ON
//                      )
//          @([sx,sy]);

//          STRUCT inc_spec_CCS_7K incVar;
//          string pin_SRB;
//          string pin_logic_device;
//          string attribute_IO;
//          int loc_SRB;
//          int sy_SRB;
//   
//          string ccs = "CCS_7K_TILE";
//          string analog = "ANALOG_7K_TILE";
//   
//          foreach incVar(inc_CCS_7K_SRB_spec)
//          {
//              pin_SRB = incVar.port_name_SRB;
//              pin_logic_device = incVar.port_name_device;
//              attribute_IO = incVar.attribute_IO;
//              loc_SRB = incVar.loc_SRB;
//             
//              if(loc_SRB==0)
//              {
//                sy_SRB = sy;
//              }
//              else
//              {
//                sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
//              }
//              
//              if(attribute_IO =="I")
//              { 
//               
//                 connect(<pin *pin_logic_device of <device *ccs @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-3,sy_SRB]>>);
//              }
//              else
//              {
//                connect(<pin *pin_SRB of<device SRB_TILE@[sx-3,sy_SRB]>> =>  <wire *pin_logic_device of <device *ccs @[sx,sy]>>); 
//              }
//          }

//      if(!((tx_pll==0)&&(ty_pll==0)))
//      {
//        int sx_pll = tx_pll * NUM_GRID_X + 3;
//        int sy_pll = ty_pll * NUM_GRID_Y;

//        connect
//          (
//            <pin PLL1_PRDATA of <device *ccs @[sx,sy]>> => <wire PRDATA of <device PLL_7KM_TILE @[sx_pll,sy_pll]>>,
//            <pin PLL1_PREADY of <device *ccs @[sx,sy]>> => <wire PREADY of <device PLL_7KM_TILE @[sx_pll,sy_pll]>>
//          );
//      }
//      else
//      {
//        connect
//          (
//            <pin PLL1_PRDATA[0] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
//            <pin PLL1_PRDATA[1] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
//            <pin PLL1_PRDATA[2] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
//            <pin PLL1_PRDATA[3] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
//            <pin PLL1_PRDATA[4] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
//            <pin PLL1_PRDATA[5] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
//            <pin PLL1_PRDATA[6] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
//            <pin PLL1_PRDATA[7] of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>,
//            <pin PLL1_PREADY    of <device *ccs @[sx,sy]>> => <wire TIELO of <device *ccs @[sx,sy]>>
//          );
//      }
//                   
//  }// end of function place_ccs_tile
/********************************************************************************
********************************************************************************/
function place_iock_7km_tile(unsigned int tx, ty)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;
    
    
    string strVar;
    
    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[15:0] = wire *strVar[15:0];
    
    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[15:0] = wire *strVar[15:0];
    
    sprintf(strVar,"ntCLK_IOPRE2BRGMUX_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOPRE2BRGMUX[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntCLK_IOMUX2PLLU_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOMUX2PLLU[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntCLK_DIV_0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DIV_0[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntCLK_DIV_1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DIV_1[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntCLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_S_Q1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q1[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_A_Q0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q0[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_A_Y0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y0[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_A_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6AB[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_S_Y3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y3[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_A_Q1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q1[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_A_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6CD[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_S_Y0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y0[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_S_Y1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y1[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_S_Q0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q0[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_A_Q3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q3[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_A_Y1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y1[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_S_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6AB[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_A_Q2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q2[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_S_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6CD[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_S_Q2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q2[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_S_Y2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y2[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_S_Q3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q3[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_A_Y2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y2[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_A_Y3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y3[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntCLK_IOL_DD_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOL_DD[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntCLK_IOL_DU_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOL_DU[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntCLK_IOL_UD_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOL_UD[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntCLK_IOL_UU_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOL_UU[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntCLK_IOMUX2PLL_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOMUX2PLL_BUF[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntCLK_PIO2PLL_BANK0_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO2PLL_BANK0_BUF[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntCLK_IOMUX2PLL_RU_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOMUX2PLL_RU_OUT[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntCLK_PIO2PLL_RU_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO2PLL_RU_BUF[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntCLK_PIO2PLL_LU_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO2PLL_LU_BUF[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTIEH_%d_%d",sx,sy);
    &wire ntRef_ntTIEH = wire *strVar;
    
    sprintf(strVar,"ntTIEL_%d_%d",sx,sy);
    &wire ntRef_ntTIEL = wire *strVar;
    
    sprintf(strVar,"ntCLK_CFGS1_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_CFGS1_BUF = wire *strVar;
    
    sprintf(strVar,"ntCLKOP_PLLU_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOP_PLLU_BUF = wire *strVar;
    
    sprintf(strVar,"ntCLKOS2_PLLU_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOS2_PLLU_BUF = wire *strVar;
    
    sprintf(strVar,"ntCLKOS3_PLLU_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOS3_PLLU_BUF = wire *strVar;
    
    sprintf(strVar,"ntCLKOS_PLLU_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOS_PLLU_BUF = wire *strVar;
    
    sprintf(strVar,"ntCLK_GLOBAL_BUFU_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_BUFU = wire *strVar;
    
    sprintf(strVar,"ntCLK_CFGS_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_CFGS_BUF = wire *strVar;
    
    sprintf(strVar,"ntCLK_MIPI0_RX_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MIPI0_RX = wire *strVar;
    
    sprintf(strVar,"ntCLK_MIPI0_TX_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MIPI0_TX = wire *strVar;
    
    sprintf(strVar,"ntCLK_MIPI1_RX_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MIPI1_RX = wire *strVar;
    
    sprintf(strVar,"ntCLK_MIPI1_TX_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MIPI1_TX = wire *strVar;
    
    sprintf(strVar,"ntCLK_MIPI0_REF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MIPI0_REF = wire *strVar;
    
    sprintf(strVar,"ntCLK_MIPI1_REF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MIPI1_REF = wire *strVar;
    
    
    
    sprintf(strVar, "IOCK_7KM_TILE_%d_%d", sx, sy);
      device IOCK_7KM_TILE *strVar
        port map(
    
    
        CLK_OUTT           =>           ntRef_ntCLK_OUTT,
        CLK_OUTB           =>           ntRef_ntCLK_OUTB,
        CLK_IOPRE2BRGMUX           =>           ntRef_ntCLK_IOPRE2BRGMUX,
        CLK_IOMUX2PLLU           =>           ntRef_ntCLK_IOMUX2PLLU,
        CLK_DIV_0           =>           ntRef_ntCLK_DIV_0,
        CLK_DIV_1           =>           ntRef_ntCLK_DIV_1,
        CLK_OUT           =>           ntRef_ntCLK_OUT,
        TEST_S_Q1           =>           ntRef_ntTEST_S_Q1,
        TEST_A_Q0           =>           ntRef_ntTEST_A_Q0,
        TEST_A_Y0           =>           ntRef_ntTEST_A_Y0,
        TEST_A_Y6AB           =>           ntRef_ntTEST_A_Y6AB,
        TEST_S_Y3           =>           ntRef_ntTEST_S_Y3,
        TEST_A_Q1           =>           ntRef_ntTEST_A_Q1,
        TEST_A_Y6CD           =>           ntRef_ntTEST_A_Y6CD,
        TEST_S_Y0           =>           ntRef_ntTEST_S_Y0,
        TEST_S_Y1           =>           ntRef_ntTEST_S_Y1,
        TEST_S_Q0           =>           ntRef_ntTEST_S_Q0,
        TEST_A_Q3           =>           ntRef_ntTEST_A_Q3,
        TEST_A_Y1           =>           ntRef_ntTEST_A_Y1,
        TEST_S_Y6AB           =>           ntRef_ntTEST_S_Y6AB,
        TEST_A_Q2           =>           ntRef_ntTEST_A_Q2,
        TEST_S_Y6CD           =>           ntRef_ntTEST_S_Y6CD,
        TEST_S_Q2           =>           ntRef_ntTEST_S_Q2,
        TEST_S_Y2           =>           ntRef_ntTEST_S_Y2,
        TEST_S_Q3           =>           ntRef_ntTEST_S_Q3,
        TEST_A_Y2           =>           ntRef_ntTEST_A_Y2,
        TEST_A_Y3           =>           ntRef_ntTEST_A_Y3,
        CLK_IOL_DD           =>           ntRef_ntCLK_IOL_DD,
        CLK_IOL_DU           =>           ntRef_ntCLK_IOL_DU,
        CLK_IOL_UD           =>           ntRef_ntCLK_IOL_UD,
        CLK_IOL_UU           =>           ntRef_ntCLK_IOL_UU,
        CLK_IOMUX2PLL_BUF           =>           ntRef_ntCLK_IOMUX2PLL_BUF,
        CLK_PIO2PLL_BANK0_BUF           =>           ntRef_ntCLK_PIO2PLL_BANK0_BUF,
        CLK_IOMUX2PLL_RU_OUT           =>           ntRef_ntCLK_IOMUX2PLL_RU_OUT,
        CLK_PIO2PLL_RU_BUF           =>           ntRef_ntCLK_PIO2PLL_RU_BUF,
        CLK_PIO2PLL_LU_BUF           =>           ntRef_ntCLK_PIO2PLL_LU_BUF,
    
        TIEH        =>        ntRef_ntTIEH,
        TIEL        =>        ntRef_ntTIEL,
        CLK_CFGS1_BUF        =>        ntRef_ntCLK_CFGS1_BUF,
        CLKOP_PLLU_BUF        =>        ntRef_ntCLKOP_PLLU_BUF,
        CLKOS2_PLLU_BUF        =>        ntRef_ntCLKOS2_PLLU_BUF,
        CLKOS3_PLLU_BUF        =>        ntRef_ntCLKOS3_PLLU_BUF,
        CLKOS_PLLU_BUF        =>        ntRef_ntCLKOS_PLLU_BUF,
        CLK_GLOBAL_BUFU        =>        ntRef_ntCLK_GLOBAL_BUFU,
        CLK_CFGS_BUF        =>        ntRef_ntCLK_CFGS_BUF,
        CLK_MIPI0_RX        =>        ntRef_ntCLK_MIPI0_RX,
        CLK_MIPI0_TX        =>        ntRef_ntCLK_MIPI0_TX,
        CLK_MIPI1_RX        =>        ntRef_ntCLK_MIPI1_RX,
        CLK_MIPI1_TX        =>        ntRef_ntCLK_MIPI1_TX,
        CLK_MIPI0_REF        =>        ntRef_ntCLK_MIPI0_REF,
        CLK_MIPI1_REF        =>        ntRef_ntCLK_MIPI1_REF
    
            )
        @([sx,sy]);

      STRUCT inc_spec_IOCK incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_srb;
      int sx_srb = sx-3;

      foreach incVar(inc_IOCK_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          sy_srb = sy + loc_SRB*NUM_GRID_Y; 
          
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device IOCK_7KM_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> => (incVar.port_name_device=="TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx_srb,sy_srb]>>
                                                                         : <wire *pin_logic_device of <device IOCK_7KM_TILE @[sx,sy]>>); 
          }
      }
        
    }//end of function place_iock_7km_tile
///********************************************************************************
//********************************************************************************/
function place_iock_7km1_tile(unsigned int tx, ty)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;
    
    
    string strVar;
    
    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[15:0] = wire *strVar[15:0];
    
    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[15:0] = wire *strVar[15:0];
    
    sprintf(strVar,"ntCLK_IOPRE2BRGMUX_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOPRE2BRGMUX[1:0] = wire *strVar[1:0];
    
//  sprintf(strVar,"ntCLK_IOMUX2PLLD_%d_%d",sx,sy);
//  &wire ntRef_ntCLK_IOMUX2PLLD[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntCLK_IOMUX2PLLU_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOMUX2PLLU[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntCLK_DIV_0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DIV_0[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntCLK_DIV_1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DIV_1[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntCLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT[5:0] = wire *strVar[5:0];
    
    sprintf(strVar,"ntTEST_S_Q1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q1[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_A_Q0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q0[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_A_Y0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y0[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_A_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6AB[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_S_Y3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y3[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_A_Q1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q1[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_A_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y6CD[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_S_Y0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y0[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_S_Y1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y1[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_S_Q0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q0[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_A_Q3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q3[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_A_Y1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y1[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_S_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6AB[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_A_Q2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Q2[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_S_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y6CD[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_S_Q2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q2[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_S_Y2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Y2[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_S_Q3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_S_Q3[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_A_Y2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y2[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTEST_A_Y3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_A_Y3[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntCLK_IOL_DD_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOL_DD[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntCLK_IOL_DU_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOL_DU[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntCLK_IOL_UD_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOL_UD[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntCLK_IOL_UU_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOL_UU[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntCLK_IOMUX2PLL_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOMUX2PLL_BUF[1:0] = wire *strVar[1:0];
    
//  sprintf(strVar,"ntCLK_PIO2PLL_BANK0_BUF_%d_%d",sx,sy);
//  &wire ntRef_ntCLK_PIO2PLL_BANK0_BUF[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntCLK_PIO2PLL_BANK_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO2PLL_BANK_BUF[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntCLK_IOMUX2PLL_RU_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOMUX2PLL_RU_OUT[1:0] = wire *strVar[1:0];
    
//  sprintf(strVar,"ntCLK_IOMUX2PLL_RD_OUT_%d_%d",sx,sy);
//  &wire ntRef_ntCLK_IOMUX2PLL_RD_OUT[1:0] = wire *strVar[1:0];
    
//  sprintf(strVar,"ntCLK_PIO2PLL_RD_BUF_%d_%d",sx,sy);
//  &wire ntRef_ntCLK_PIO2PLL_RD_BUF[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntCLK_PIO2PLL_RU_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO2PLL_RU_BUF[3:0] = wire *strVar[3:0];
    
//  sprintf(strVar,"ntCLK_PIO2PLL_LD_BUF_%d_%d",sx,sy);
//  &wire ntRef_ntCLK_PIO2PLL_LD_BUF[1:0] = wire *strVar[1:0];
//  
//  sprintf(strVar,"ntCLK_PIO2PLL_LU_BUF_%d_%d",sx,sy);
//  &wire ntRef_ntCLK_PIO2PLL_LU_BUF[1:0] = wire *strVar[1:0];
    
    sprintf(strVar,"ntTIEH_%d_%d",sx,sy);
    &wire ntRef_ntTIEH = wire *strVar;
    
    sprintf(strVar,"ntTIEL_%d_%d",sx,sy);
    &wire ntRef_ntTIEL = wire *strVar;
    
    sprintf(strVar,"ntCLK_CFGS1_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_CFGS1_BUF = wire *strVar;
    
    sprintf(strVar,"ntCLKOP_PLLU_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOP_PLLU_BUF = wire *strVar;
    
    sprintf(strVar,"ntCLKOS2_PLLU_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOS2_PLLU_BUF = wire *strVar;
    
    sprintf(strVar,"ntCLKOS3_PLLU_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOS3_PLLU_BUF = wire *strVar;
    
    sprintf(strVar,"ntCLKOS_PLLU_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOS_PLLU_BUF = wire *strVar;
    
    sprintf(strVar,"ntCLK_GLOBAL_BUFU_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_BUFU = wire *strVar;
    
    sprintf(strVar,"ntCLK_CFGS_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_CFGS_BUF = wire *strVar;
    
    
    
    sprintf(strVar, "IOCK_7KM1_TILE_%d_%d", sx, sy);
      device IOCK_7KM1_TILE *strVar
        port map(
    
    
        CLK_OUTT                 =>           ntRef_ntCLK_OUTT,
        CLK_OUTB                 =>           ntRef_ntCLK_OUTB,
        CLK_IOPRE2BRGMUX         =>           ntRef_ntCLK_IOPRE2BRGMUX,
//      CLK_IOMUX2PLLD           =>           ntRef_ntCLK_IOMUX2PLLD,
        CLK_IOMUX2PLLU           =>           ntRef_ntCLK_IOMUX2PLLU,
        CLK_DIV_0                =>           ntRef_ntCLK_DIV_0,
        CLK_DIV_1                =>           ntRef_ntCLK_DIV_1,
        CLK_OUT                  =>           ntRef_ntCLK_OUT,
        TEST_S_Q1                =>           ntRef_ntTEST_S_Q1,
        TEST_A_Q0                =>           ntRef_ntTEST_A_Q0,
        TEST_A_Y0                =>           ntRef_ntTEST_A_Y0,
        TEST_A_Y6AB              =>           ntRef_ntTEST_A_Y6AB,
        TEST_S_Y3                =>           ntRef_ntTEST_S_Y3,
        TEST_A_Q1                =>           ntRef_ntTEST_A_Q1,
        TEST_A_Y6CD              =>           ntRef_ntTEST_A_Y6CD,
        TEST_S_Y0                =>           ntRef_ntTEST_S_Y0,
        TEST_S_Y1                =>           ntRef_ntTEST_S_Y1,
        TEST_S_Q0                =>           ntRef_ntTEST_S_Q0,
        TEST_A_Q3                =>           ntRef_ntTEST_A_Q3,
        TEST_A_Y1                =>           ntRef_ntTEST_A_Y1,
        TEST_S_Y6AB              =>           ntRef_ntTEST_S_Y6AB,
        TEST_A_Q2                =>           ntRef_ntTEST_A_Q2,
        TEST_S_Y6CD              =>           ntRef_ntTEST_S_Y6CD,
        TEST_S_Q2                =>           ntRef_ntTEST_S_Q2,
        TEST_S_Y2                =>           ntRef_ntTEST_S_Y2,
        TEST_S_Q3                =>           ntRef_ntTEST_S_Q3,
        TEST_A_Y2                =>           ntRef_ntTEST_A_Y2,
        TEST_A_Y3                =>           ntRef_ntTEST_A_Y3,
        CLK_IOL_DD               =>           ntRef_ntCLK_IOL_DD,
        CLK_IOL_DU               =>           ntRef_ntCLK_IOL_DU,
        CLK_IOL_UD               =>           ntRef_ntCLK_IOL_UD,
        CLK_IOL_UU               =>           ntRef_ntCLK_IOL_UU,
        CLK_IOMUX2PLL_BUF        =>           ntRef_ntCLK_IOMUX2PLL_BUF,
//      CLK_PIO2PLL_BANK0_BUF    =>           ntRef_ntCLK_PIO2PLL_BANK0_BUF,
        CLK_PIO2PLL_BANK_BUF     =>           ntRef_ntCLK_PIO2PLL_BANK_BUF,
        CLK_IOMUX2PLL_RU_OUT     =>           ntRef_ntCLK_IOMUX2PLL_RU_OUT,
//      CLK_IOMUX2PLL_RD_OUT     =>           ntRef_ntCLK_IOMUX2PLL_RD_OUT,
//      CLK_PIO2PLL_RD_BUF       =>           ntRef_ntCLK_PIO2PLL_RD_BUF,
        CLK_PIO2PLL_RU_BUF       =>           ntRef_ntCLK_PIO2PLL_RU_BUF,
//      CLK_PIO2PLL_LD_BUF       =>           ntRef_ntCLK_PIO2PLL_LD_BUF,
//      CLK_PIO2PLL_LU_BUF       =>           ntRef_ntCLK_PIO2PLL_LU_BUF,
    
        TIEH        =>        ntRef_ntTIEH,
        TIEL        =>        ntRef_ntTIEL,
        CLK_CFGS1_BUF        =>        ntRef_ntCLK_CFGS1_BUF,
        CLKOP_PLLU_BUF       =>        ntRef_ntCLKOP_PLLU_BUF,
        CLKOS2_PLLU_BUF      =>        ntRef_ntCLKOS2_PLLU_BUF,
        CLKOS3_PLLU_BUF      =>        ntRef_ntCLKOS3_PLLU_BUF,
        CLKOS_PLLU_BUF       =>        ntRef_ntCLKOS_PLLU_BUF,
        CLK_GLOBAL_BUFU      =>        ntRef_ntCLK_GLOBAL_BUFU,
        CLK_CFGS_BUF         =>        ntRef_ntCLK_CFGS_BUF
    
            )
        @([sx,sy]);


      STRUCT inc_spec_IOCK incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_srb;
      int sx_srb = sx-3;

      foreach incVar(inc_IOCK_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          sy_srb = sy + loc_SRB*NUM_GRID_Y; 
          
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device IOCK_7KM1_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> => (incVar.port_name_device=="TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx_srb,sy_srb]>>
                                                                         : <wire *pin_logic_device of <device IOCK_7KM1_TILE @[sx,sy]>>); 
          }
      }
        
    }//end of function place_iock_7km1_tile
/********************************************************************************
********************************************************************************/
function place_uscm_7km_tile(unsigned int tx,ty, tx_srb, ty_srb)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
   
    string strVar;

    sprintf(strVar,"ntCLK_GLOBAL_L_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_L[7:0] = wire *strVar[7:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntSIG_GLOBAL_L_%d_%d",sx,sy);
    &wire ntRef_ntSIG_GLOBAL_L[7:0] = wire *strVar[7:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_GLOBAL_R_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_R[7:0] = wire *strVar[7:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntSIG_GLOBAL_R_%d_%d",sx,sy);
    &wire ntRef_ntSIG_GLOBAL_R[7:0] = wire *strVar[7:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

//  sprintf(strVar,"ntCLK_BRGMUX_L_%d_%d",sx,sy);
//  &wire ntRef_ntCLK_BRGMUX_L[1:0] = wire *strVar[1:0]      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

//  sprintf(strVar,"ntCLK_BRGMUX_R_%d_%d",sx,sy);
//  &wire ntRef_ntCLK_BRGMUX_R[1:0] = wire *strVar[1:0]      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_BRG_L0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_BRG_L0 = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_BRG_L1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_BRG_L1 = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_BRG_R0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_BRG_R0 = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_BRG_R1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_BRG_R1 = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[15:0] = wire *strVar[15:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[15:0] = wire *strVar[15:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLKOP_PLL_D_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOP_PLL_D_BUF = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOS_PLL_D_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOS_PLL_D_BUF = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOP_PLL_U_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOP_PLL_U_BUF = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOS_PLL_U_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLKOS_PLL_U_BUF = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_P_BL_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_P_BL_BUF = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_P_BM_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_P_BM_BUF = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_P_BR_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_P_BR_BUF = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_P_TL_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_P_TL_BUF = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_P_TM_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_P_TM_BUF = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_P_TR_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_P_TR_BUF = wire *strVar      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_PIO2PLL_R_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO2PLL_R[1:0] = wire *strVar[1:0]      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_IOMUX2PLL_R_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOMUX2PLL_R_BUF[1:0] = wire *strVar[1:0]      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;


    sprintf(strVar,"ntDCI_INIT_OUT_%d_%d",sx,sy);
    &wire ntRef_ntDCI_INIT_OUT = wire *strVar;


    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    
    sprintf(strVar, "USCM_7KM_TILE_%d_%d", sx, sy);
    
    device USCM_7KM_TILE *strVar
          port map (
                      CLK_GLOBAL_L    => ntRef_ntCLK_GLOBAL_L,
                      SIG_GLOBAL_L    => ntRef_ntSIG_GLOBAL_L,
                      CLK_GLOBAL_R    => ntRef_ntCLK_GLOBAL_R,
                      SIG_GLOBAL_R    => ntRef_ntSIG_GLOBAL_R,
 //                     CLK_BRGMUX_L    => ntRef_ntCLK_BRGMUX_L,
 //                     CLK_BRGMUX_R    => ntRef_ntCLK_BRGMUX_R,
                      CLK_BRG_L0      => ntRef_ntCLK_BRG_L0,
                      CLK_BRG_R0      => ntRef_ntCLK_BRG_R0,
                      CLK_BRG_L1      => ntRef_ntCLK_BRG_L1,
                      CLK_BRG_R1      => ntRef_ntCLK_BRG_R1,
                      CLK_OUTT        => ntRef_ntCLK_OUTT,
                      CLK_OUTB        => ntRef_ntCLK_OUTB,     
                      TIEHI           => ntRef_ntTIEHI,
                      CLKOP_PLL_D_BUF => ntRef_ntCLKOP_PLL_D_BUF,
                      CLKOS_PLL_D_BUF => ntRef_ntCLKOS_PLL_D_BUF,
                      CLKOP_PLL_U_BUF => ntRef_ntCLKOP_PLL_U_BUF,
                      CLKOS_PLL_U_BUF => ntRef_ntCLKOS_PLL_U_BUF,
                      CLK_P_BL_BUF    => ntRef_ntCLK_P_BL_BUF,
                      CLK_P_BM_BUF    => ntRef_ntCLK_P_BM_BUF,
                      CLK_P_BR_BUF    => ntRef_ntCLK_P_BR_BUF,
                      CLK_P_TL_BUF    => ntRef_ntCLK_P_TL_BUF,
                      CLK_P_TM_BUF    => ntRef_ntCLK_P_TM_BUF,
                      CLK_P_TR_BUF    => ntRef_ntCLK_P_TR_BUF,
                      CLK_PIO2PLL_R   => ntRef_ntCLK_PIO2PLL_R,
                      CLK_IOMUX2PLL_R_BUF   => ntRef_ntCLK_IOMUX2PLL_R_BUF
                    )
        @([sx,sy]);

      STRUCT inc_spec_USCM incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      string dir;
      int sy_srb;
      int sx_srb = tx_srb * NUM_GRID_X;
      int sy_srb0 = ty * NUM_GRID_Y;

      foreach incVar(inc_USCM_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
          dir = incVar.direction_srb;
         
          if(dir=="dn")
          {
           sy_srb = sy_srb0 - (loc_SRB+1)*NUM_GRID_Y;
          }
          else
          {
            sy_srb = sy_srb0 + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device USCM_7KM_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> => <wire *pin_logic_device of <device USCM_7KM_TILE @[sx,sy]>>); 
          }
      }
        
}// end of function place_uscm_7km_tile
/************************************************************
************************************************************/
//  function place_clkbuf_tile(unsigned int tx,ty)
//  {
//      unsigned int sx, sy;
//      
//      sx = tx * NUM_GRID_X;
//      sy = ty * NUM_GRID_Y;
//      
//      string strVar;

//      sprintf(strVar,"ntCLKOUT_%d_%d",sx,sy);
//      &wire ntRef_ntCLKOUT[2:0] = wire *strVar[2:0];     

//      sprintf(strVar, "CLKBUF_TILE_%d_%d", sx, sy);
//      
//      device CLKBUF_TILE *strVar
//            port map (
//                        CLKOUT    => ntRef_ntCLKOUT
//                      )
//          @([sx,sy]);

//  }//end of function place_clkbuf_tile
/********************************************************************************
********************************************************************************/
//  function place_mipi_dphy_7km_tile( unsigned int tx,ty )
//  {   
//      unsigned int sx, sy;
//      
//      sx = tx * NUM_GRID_X + 3;
//      sy = ty * NUM_GRID_Y;
//     
//      string strVar;

//      sprintf(strVar,"ntCLKBUF_CLKIN0_%d_%d",sx,sy);
//      &wire ntRef_ntCLKBUF_CLKIN0 = wire *strVar;

//      sprintf(strVar,"ntCLKBUF_CLKIN1_%d_%d",sx,sy);
//      &wire ntRef_ntCLKBUF_CLKIN1 = wire *strVar;

//      sprintf(strVar,"ntCLKBUF_CLKIN2_%d_%d",sx,sy);
//      &wire ntRef_ntCLKBUF_CLKIN2 = wire *strVar;

//      sprintf(strVar,"ntGY5_A_Y0_%d_%d",sx,sy);
//      &wire ntRef_ntGY5_A_Y0 = wire *strVar;

//      sprintf(strVar,"ntGY5_A_Y1_%d_%d",sx,sy);
//      &wire ntRef_ntGY5_A_Y1 = wire *strVar;

//      sprintf(strVar,"ntGY5_A_Y2_%d_%d",sx,sy);
//      &wire ntRef_ntGY5_A_Y2 = wire *strVar;

//      sprintf(strVar,"ntGY5_A_Y3_%d_%d",sx,sy);
//      &wire ntRef_ntGY5_A_Y3 = wire *strVar;

//      sprintf(strVar,"ntGY5_A_Q0_%d_%d",sx,sy);
//      &wire ntRef_ntGY5_A_Q0 = wire *strVar;

//      sprintf(strVar,"ntGY5_A_Q1_%d_%d",sx,sy);
//      &wire ntRef_ntGY5_A_Q1 = wire *strVar;

//      sprintf(strVar,"ntGY5_A_Q2_%d_%d",sx,sy);
//      &wire ntRef_ntGY5_A_Q2 = wire *strVar;

//      sprintf(strVar,"ntGY5_A_Q3_%d_%d",sx,sy);
//      &wire ntRef_ntGY5_A_Q3 = wire *strVar;

//      sprintf(strVar,"ntGY5_A_Y6CD_%d_%d",sx,sy);
//      &wire ntRef_ntGY5_A_Y6CD = wire *strVar;

//      sprintf(strVar,"ntGY5_A_Y6AB_%d_%d",sx,sy);
//      &wire ntRef_ntGY5_A_Y6AB = wire *strVar;

//      sprintf(strVar,"ntGY5_S_Y0_%d_%d",sx,sy);
//      &wire ntRef_ntGY5_S_Y0 = wire *strVar;

//      sprintf(strVar,"ntGY5_S_Y1_%d_%d",sx,sy);
//      &wire ntRef_ntGY5_S_Y1 = wire *strVar;

//      sprintf(strVar,"ntGY5_S_Y2_%d_%d",sx,sy);
//      &wire ntRef_ntGY5_S_Y2 = wire *strVar;

//      sprintf(strVar,"ntGY5_S_Y3_%d_%d",sx,sy);
//      &wire ntRef_ntGY5_S_Y3 = wire *strVar;

//      sprintf(strVar,"ntGY5_S_Q0_%d_%d",sx,sy);
//      &wire ntRef_ntGY5_S_Q0 = wire *strVar;

//      sprintf(strVar,"ntGY5_S_Q1_%d_%d",sx,sy);
//      &wire ntRef_ntGY5_S_Q1 = wire *strVar;

//      sprintf(strVar,"ntGY5_S_Q2_%d_%d",sx,sy);
//      &wire ntRef_ntGY5_S_Q2 = wire *strVar;

//      sprintf(strVar,"ntGY5_S_Q3_%d_%d",sx,sy);
//      &wire ntRef_ntGY5_S_Q3 = wire *strVar;

//      sprintf(strVar,"ntGY4_A_Y0_%d_%d",sx,sy);
//      &wire ntRef_ntGY4_A_Y0 = wire *strVar;

//      sprintf(strVar,"ntGY4_A_Y1_%d_%d",sx,sy);
//      &wire ntRef_ntGY4_A_Y1 = wire *strVar;

//      sprintf(strVar,"ntGY4_A_Y2_%d_%d",sx,sy);
//      &wire ntRef_ntGY4_A_Y2 = wire *strVar;

//      sprintf(strVar,"ntGY4_A_Y3_%d_%d",sx,sy);
//      &wire ntRef_ntGY4_A_Y3 = wire *strVar;

//      sprintf(strVar,"ntGY4_A_Q0_%d_%d",sx,sy);
//      &wire ntRef_ntGY4_A_Q0 = wire *strVar;

//      sprintf(strVar,"ntGY4_A_Q1_%d_%d",sx,sy);
//      &wire ntRef_ntGY4_A_Q1 = wire *strVar;

//      sprintf(strVar,"ntGY4_A_Q2_%d_%d",sx,sy);
//      &wire ntRef_ntGY4_A_Q2 = wire *strVar;

//      sprintf(strVar,"ntGY4_A_Q3_%d_%d",sx,sy);
//      &wire ntRef_ntGY4_A_Q3 = wire *strVar;

//      sprintf(strVar,"ntGY4_A_Y6CD_%d_%d",sx,sy);
//      &wire ntRef_ntGY4_A_Y6CD = wire *strVar;

//      sprintf(strVar,"ntGY4_A_Y6AB_%d_%d",sx,sy);
//      &wire ntRef_ntGY4_A_Y6AB = wire *strVar;

//      sprintf(strVar,"ntGY4_S_Y0_%d_%d",sx,sy);
//      &wire ntRef_ntGY4_S_Y0 = wire *strVar;

//      sprintf(strVar,"ntGY4_S_Y1_%d_%d",sx,sy);
//      &wire ntRef_ntGY4_S_Y1 = wire *strVar;

//      sprintf(strVar,"ntGY4_S_Y2_%d_%d",sx,sy);
//      &wire ntRef_ntGY4_S_Y2 = wire *strVar;

//      sprintf(strVar,"ntGY4_S_Y3_%d_%d",sx,sy);
//      &wire ntRef_ntGY4_S_Y3 = wire *strVar;

//      sprintf(strVar,"ntGY4_S_Q0_%d_%d",sx,sy);
//      &wire ntRef_ntGY4_S_Q0 = wire *strVar;

//      sprintf(strVar,"ntGY4_S_Q1_%d_%d",sx,sy);
//      &wire ntRef_ntGY4_S_Q1 = wire *strVar;

//      sprintf(strVar,"ntGY4_S_Q2_%d_%d",sx,sy);
//      &wire ntRef_ntGY4_S_Q2 = wire *strVar;

//      sprintf(strVar,"ntGY4_S_Q3_%d_%d",sx,sy);
//      &wire ntRef_ntGY4_S_Q3 = wire *strVar;

//      sprintf(strVar,"ntGY4_S_Y6AB_%d_%d",sx,sy);
//      &wire ntRef_ntGY4_S_Y6AB = wire *strVar;

//      sprintf(strVar,"ntGY4_S_Y6CD_%d_%d",sx,sy);
//      &wire ntRef_ntGY4_S_Y6CD = wire *strVar;

//      sprintf(strVar,"ntGY3_A_Y0_%d_%d",sx,sy);
//      &wire ntRef_ntGY3_A_Y0 = wire *strVar;

//      sprintf(strVar,"ntGY3_A_Y1_%d_%d",sx,sy);
//      &wire ntRef_ntGY3_A_Y1 = wire *strVar;

//      sprintf(strVar,"ntGY3_A_Y2_%d_%d",sx,sy);
//      &wire ntRef_ntGY3_A_Y2 = wire *strVar;

//      sprintf(strVar,"ntGY3_A_Y3_%d_%d",sx,sy);
//      &wire ntRef_ntGY3_A_Y3 = wire *strVar;

//      sprintf(strVar,"ntGY3_A_Q0_%d_%d",sx,sy);
//      &wire ntRef_ntGY3_A_Q0 = wire *strVar;

//      sprintf(strVar,"ntGY3_A_Q1_%d_%d",sx,sy);
//      &wire ntRef_ntGY3_A_Q1 = wire *strVar;

//      sprintf(strVar,"ntGY3_A_Q2_%d_%d",sx,sy);
//      &wire ntRef_ntGY3_A_Q2 = wire *strVar;

//      sprintf(strVar,"ntGY3_A_Q3_%d_%d",sx,sy);
//      &wire ntRef_ntGY3_A_Q3 = wire *strVar;

//      sprintf(strVar,"ntGY3_A_Y6CD_%d_%d",sx,sy);
//      &wire ntRef_ntGY3_A_Y6CD = wire *strVar;

//      sprintf(strVar,"ntGY3_A_Y6AB_%d_%d",sx,sy);
//      &wire ntRef_ntGY3_A_Y6AB = wire *strVar;

//      sprintf(strVar,"ntGY3_S_Y0_%d_%d",sx,sy);
//      &wire ntRef_ntGY3_S_Y0 = wire *strVar;

//      sprintf(strVar,"ntGY3_S_Y1_%d_%d",sx,sy);
//      &wire ntRef_ntGY3_S_Y1 = wire *strVar;

//      sprintf(strVar,"ntGY3_S_Y2_%d_%d",sx,sy);
//      &wire ntRef_ntGY3_S_Y2 = wire *strVar;

//      sprintf(strVar,"ntGY3_S_Y3_%d_%d",sx,sy);
//      &wire ntRef_ntGY3_S_Y3 = wire *strVar;

//      sprintf(strVar,"ntGY3_S_Q0_%d_%d",sx,sy);
//      &wire ntRef_ntGY3_S_Q0 = wire *strVar;

//      sprintf(strVar,"ntGY3_S_Q1_%d_%d",sx,sy);
//      &wire ntRef_ntGY3_S_Q1 = wire *strVar;

//      sprintf(strVar,"ntGY3_S_Q2_%d_%d",sx,sy);
//      &wire ntRef_ntGY3_S_Q2 = wire *strVar;

//      sprintf(strVar,"ntGY3_S_Q3_%d_%d",sx,sy);
//      &wire ntRef_ntGY3_S_Q3 = wire *strVar;

//      sprintf(strVar,"ntGY3_S_Y6AB_%d_%d",sx,sy);
//      &wire ntRef_ntGY3_S_Y6AB = wire *strVar;

//      sprintf(strVar,"ntGY3_S_Y6CD_%d_%d",sx,sy);
//      &wire ntRef_ntGY3_S_Y6CD = wire *strVar;

//      sprintf(strVar,"ntGY2_A_Y0_%d_%d",sx,sy);
//      &wire ntRef_ntGY2_A_Y0 = wire *strVar;

//      sprintf(strVar,"ntGY2_A_Y1_%d_%d",sx,sy);
//      &wire ntRef_ntGY2_A_Y1 = wire *strVar;

//      sprintf(strVar,"ntGY2_A_Y2_%d_%d",sx,sy);
//      &wire ntRef_ntGY2_A_Y2 = wire *strVar;

//      sprintf(strVar,"ntGY2_A_Y3_%d_%d",sx,sy);
//      &wire ntRef_ntGY2_A_Y3 = wire *strVar;

//      sprintf(strVar,"ntGY2_A_Q0_%d_%d",sx,sy);
//      &wire ntRef_ntGY2_A_Q0 = wire *strVar;

//      sprintf(strVar,"ntGY2_A_Q1_%d_%d",sx,sy);
//      &wire ntRef_ntGY2_A_Q1 = wire *strVar;

//      sprintf(strVar,"ntGY2_A_Q2_%d_%d",sx,sy);
//      &wire ntRef_ntGY2_A_Q2 = wire *strVar;

//      sprintf(strVar,"ntGY2_A_Q3_%d_%d",sx,sy);
//      &wire ntRef_ntGY2_A_Q3 = wire *strVar;

//      sprintf(strVar,"ntGY2_A_Y6CD_%d_%d",sx,sy);
//      &wire ntRef_ntGY2_A_Y6CD = wire *strVar;

//      sprintf(strVar,"ntGY2_A_Y6AB_%d_%d",sx,sy);
//      &wire ntRef_ntGY2_A_Y6AB = wire *strVar;

//      sprintf(strVar,"ntGY2_S_Y0_%d_%d",sx,sy);
//      &wire ntRef_ntGY2_S_Y0 = wire *strVar;

//      sprintf(strVar,"ntGY2_S_Y1_%d_%d",sx,sy);
//      &wire ntRef_ntGY2_S_Y1 = wire *strVar;

//      sprintf(strVar,"ntGY2_S_Y2_%d_%d",sx,sy);
//      &wire ntRef_ntGY2_S_Y2 = wire *strVar;

//      sprintf(strVar,"ntGY2_S_Y3_%d_%d",sx,sy);
//      &wire ntRef_ntGY2_S_Y3 = wire *strVar;

//      sprintf(strVar,"ntGY2_S_Q0_%d_%d",sx,sy);
//      &wire ntRef_ntGY2_S_Q0 = wire *strVar;

//      sprintf(strVar,"ntGY2_S_Q1_%d_%d",sx,sy);
//      &wire ntRef_ntGY2_S_Q1 = wire *strVar;

//      sprintf(strVar,"ntGY2_S_Q2_%d_%d",sx,sy);
//      &wire ntRef_ntGY2_S_Q2 = wire *strVar;

//      sprintf(strVar,"ntGY2_S_Q3_%d_%d",sx,sy);
//      &wire ntRef_ntGY2_S_Q3 = wire *strVar;

//      sprintf(strVar,"ntGY2_S_Y6AB_%d_%d",sx,sy);
//      &wire ntRef_ntGY2_S_Y6AB = wire *strVar;

//      sprintf(strVar,"ntGY2_S_Y6CD_%d_%d",sx,sy);
//      &wire ntRef_ntGY2_S_Y6CD = wire *strVar;

//      sprintf(strVar,"ntGY1_A_Y0_%d_%d",sx,sy);
//      &wire ntRef_ntGY1_A_Y0 = wire *strVar;

//      sprintf(strVar,"ntGY1_A_Y1_%d_%d",sx,sy);
//      &wire ntRef_ntGY1_A_Y1 = wire *strVar;

//      sprintf(strVar,"ntGY1_A_Y2_%d_%d",sx,sy);
//      &wire ntRef_ntGY1_A_Y2 = wire *strVar;

//      sprintf(strVar,"ntGY1_A_Y3_%d_%d",sx,sy);
//      &wire ntRef_ntGY1_A_Y3 = wire *strVar;

//      sprintf(strVar,"ntGY1_A_Q0_%d_%d",sx,sy);
//      &wire ntRef_ntGY1_A_Q0 = wire *strVar;

//      sprintf(strVar,"ntGY1_A_Q1_%d_%d",sx,sy);
//      &wire ntRef_ntGY1_A_Q1 = wire *strVar;

//      sprintf(strVar,"ntGY1_A_Q2_%d_%d",sx,sy);
//      &wire ntRef_ntGY1_A_Q2 = wire *strVar;

//      sprintf(strVar,"ntGY1_A_Q3_%d_%d",sx,sy);
//      &wire ntRef_ntGY1_A_Q3 = wire *strVar;

//      sprintf(strVar,"ntGY1_A_Y6CD_%d_%d",sx,sy);
//      &wire ntRef_ntGY1_A_Y6CD = wire *strVar;

//      sprintf(strVar,"ntGY1_A_Y6AB_%d_%d",sx,sy);
//      &wire ntRef_ntGY1_A_Y6AB = wire *strVar;

//      sprintf(strVar,"ntGY1_S_Y0_%d_%d",sx,sy);
//      &wire ntRef_ntGY1_S_Y0 = wire *strVar;

//      sprintf(strVar,"ntGY1_S_Y1_%d_%d",sx,sy);
//      &wire ntRef_ntGY1_S_Y1 = wire *strVar;

//      sprintf(strVar,"ntGY1_S_Y2_%d_%d",sx,sy);
//      &wire ntRef_ntGY1_S_Y2 = wire *strVar;

//      sprintf(strVar,"ntGY1_S_Y3_%d_%d",sx,sy);
//      &wire ntRef_ntGY1_S_Y3 = wire *strVar;

//      sprintf(strVar,"ntGY1_S_Q0_%d_%d",sx,sy);
//      &wire ntRef_ntGY1_S_Q0 = wire *strVar;

//      sprintf(strVar,"ntGY1_S_Q1_%d_%d",sx,sy);
//      &wire ntRef_ntGY1_S_Q1 = wire *strVar;

//      sprintf(strVar,"ntGY1_S_Q2_%d_%d",sx,sy);
//      &wire ntRef_ntGY1_S_Q2 = wire *strVar;

//      sprintf(strVar,"ntGY1_S_Q3_%d_%d",sx,sy);
//      &wire ntRef_ntGY1_S_Q3 = wire *strVar;

//      sprintf(strVar,"ntGY1_S_Y6AB_%d_%d",sx,sy);
//      &wire ntRef_ntGY1_S_Y6AB = wire *strVar;

//      sprintf(strVar,"ntGY1_S_Y6CD_%d_%d",sx,sy);
//      &wire ntRef_ntGY1_S_Y6CD = wire *strVar;

//      sprintf(strVar,"ntGY0_A_Y0_%d_%d",sx,sy);
//      &wire ntRef_ntGY0_A_Y0 = wire *strVar;

//      sprintf(strVar,"ntTCK_O_%d_%d",sx,sy);
//      &wire ntRef_ntTCK_O = wire *strVar;

//      sprintf(strVar,"ntTDO_%d_%d",sx,sy);
//      &wire ntRef_ntTDO = wire *strVar;


//      sprintf(strVar, "MIPI_DPHY_TILE_%d_%d", sx, sy);
//      
//      device MIPI_DPHY_TILE *strVar
//            port map (
//                 CLKBUF_CLKIN0 => ntRef_ntCLKBUF_CLKIN0,
//                 CLKBUF_CLKIN1 => ntRef_ntCLKBUF_CLKIN1,
//                 CLKBUF_CLKIN2 => ntRef_ntCLKBUF_CLKIN2,
//                 GY5_A_Y0      => ntRef_ntGY5_A_Y0,
//                 GY5_A_Y1      => ntRef_ntGY5_A_Y1,
//                 GY5_A_Y2      => ntRef_ntGY5_A_Y2,
//                 GY5_A_Y3      => ntRef_ntGY5_A_Y3,
//                 GY5_A_Q0      => ntRef_ntGY5_A_Q0,
//                 GY5_A_Q1      => ntRef_ntGY5_A_Q1,
//                 GY5_A_Q2      => ntRef_ntGY5_A_Q2,
//                 GY5_A_Q3      => ntRef_ntGY5_A_Q3,
//                 GY5_A_Y6CD    => ntRef_ntGY5_A_Y6CD,
//                 GY5_A_Y6AB    => ntRef_ntGY5_A_Y6AB,
//                 GY5_S_Y0      => ntRef_ntGY5_S_Y0,
//                 GY5_S_Y1      => ntRef_ntGY5_S_Y1,
//                 GY5_S_Y2      => ntRef_ntGY5_S_Y2,
//                 GY5_S_Y3      => ntRef_ntGY5_S_Y3,
//                 GY5_S_Q0      => ntRef_ntGY5_S_Q0,
//                 GY5_S_Q1      => ntRef_ntGY5_S_Q1,
//                 GY5_S_Q2      => ntRef_ntGY5_S_Q2,
//                 GY5_S_Q3      => ntRef_ntGY5_S_Q3,
//                 GY4_A_Y0      => ntRef_ntGY4_A_Y0,
//                 GY4_A_Y1      => ntRef_ntGY4_A_Y1,
//                 GY4_A_Y2      => ntRef_ntGY4_A_Y2,
//                 GY4_A_Y3      => ntRef_ntGY4_A_Y3,
//                 GY4_A_Q0      => ntRef_ntGY4_A_Q0,
//                 GY4_A_Q1      => ntRef_ntGY4_A_Q1,
//                 GY4_A_Q2      => ntRef_ntGY4_A_Q2,
//                 GY4_A_Q3      => ntRef_ntGY4_A_Q3,
//                 GY4_A_Y6CD    => ntRef_ntGY4_A_Y6CD,
//                 GY4_A_Y6AB    => ntRef_ntGY4_A_Y6AB,
//                 GY4_S_Y0      => ntRef_ntGY4_S_Y0,
//                 GY4_S_Y1      => ntRef_ntGY4_S_Y1,
//                 GY4_S_Y2      => ntRef_ntGY4_S_Y2,
//                 GY4_S_Y3      => ntRef_ntGY4_S_Y3,
//                 GY4_S_Q0      => ntRef_ntGY4_S_Q0,
//                 GY4_S_Q1      => ntRef_ntGY4_S_Q1,
//                 GY4_S_Q2      => ntRef_ntGY4_S_Q2,
//                 GY4_S_Q3      => ntRef_ntGY4_S_Q3,
//                 GY4_S_Y6CD    => ntRef_ntGY4_S_Y6CD,
//                 GY4_S_Y6AB    => ntRef_ntGY4_S_Y6AB,
//                 GY3_A_Y0      => ntRef_ntGY3_A_Y0,
//                 GY3_A_Y1      => ntRef_ntGY3_A_Y1,
//                 GY3_A_Y2      => ntRef_ntGY3_A_Y2,
//                 GY3_A_Y3      => ntRef_ntGY3_A_Y3,
//                 GY3_A_Q0      => ntRef_ntGY3_A_Q0,
//                 GY3_A_Q1      => ntRef_ntGY3_A_Q1,
//                 GY3_A_Q2      => ntRef_ntGY3_A_Q2,
//                 GY3_A_Q3      => ntRef_ntGY3_A_Q3,
//                 GY3_A_Y6CD    => ntRef_ntGY3_A_Y6CD,
//                 GY3_A_Y6AB    => ntRef_ntGY3_A_Y6AB,
//                 GY3_S_Y0      => ntRef_ntGY3_S_Y0,
//                 GY3_S_Y1      => ntRef_ntGY3_S_Y1,
//                 GY3_S_Y2      => ntRef_ntGY3_S_Y2,
//                 GY3_S_Y3      => ntRef_ntGY3_S_Y3,
//                 GY3_S_Q0      => ntRef_ntGY3_S_Q0,
//                 GY3_S_Q1      => ntRef_ntGY3_S_Q1,
//                 GY3_S_Q2      => ntRef_ntGY3_S_Q2,
//                 GY3_S_Q3      => ntRef_ntGY3_S_Q3,
//                 GY3_S_Y6CD    => ntRef_ntGY3_S_Y6CD,
//                 GY3_S_Y6AB    => ntRef_ntGY3_S_Y6AB,
//                 GY2_A_Y0      => ntRef_ntGY2_A_Y0,
//                 GY2_A_Y1      => ntRef_ntGY2_A_Y1,
//                 GY2_A_Y2      => ntRef_ntGY2_A_Y2,
//                 GY2_A_Y3      => ntRef_ntGY2_A_Y3,
//                 GY2_A_Q0      => ntRef_ntGY2_A_Q0,
//                 GY2_A_Q1      => ntRef_ntGY2_A_Q1,
//                 GY2_A_Q2      => ntRef_ntGY2_A_Q2,
//                 GY2_A_Q3      => ntRef_ntGY2_A_Q3,
//                 GY2_A_Y6CD    => ntRef_ntGY2_A_Y6CD,
//                 GY2_A_Y6AB    => ntRef_ntGY2_A_Y6AB,
//                 GY2_S_Y0      => ntRef_ntGY2_S_Y0,
//                 GY2_S_Y1      => ntRef_ntGY2_S_Y1,
//                 GY2_S_Y2      => ntRef_ntGY2_S_Y2,
//                 GY2_S_Y3      => ntRef_ntGY2_S_Y3,
//                 GY2_S_Q0      => ntRef_ntGY2_S_Q0,
//                 GY2_S_Q1      => ntRef_ntGY2_S_Q1,
//                 GY2_S_Q2      => ntRef_ntGY2_S_Q2,
//                 GY2_S_Q3      => ntRef_ntGY2_S_Q3,
//                 GY2_S_Y6CD    => ntRef_ntGY2_S_Y6CD,
//                 GY2_S_Y6AB    => ntRef_ntGY2_S_Y6AB,
//                 GY1_A_Y0      => ntRef_ntGY1_A_Y0,
//                 GY1_A_Y1      => ntRef_ntGY1_A_Y1,
//                 GY1_A_Y2      => ntRef_ntGY1_A_Y2,
//                 GY1_A_Y3      => ntRef_ntGY1_A_Y3,
//                 GY1_A_Q0      => ntRef_ntGY1_A_Q0,
//                 GY1_A_Q1      => ntRef_ntGY1_A_Q1,
//                 GY1_A_Q2      => ntRef_ntGY1_A_Q2,
//                 GY1_A_Q3      => ntRef_ntGY1_A_Q3,
//                 GY1_A_Y6CD    => ntRef_ntGY1_A_Y6CD,
//                 GY1_A_Y6AB    => ntRef_ntGY1_A_Y6AB,
//                 GY1_S_Y0      => ntRef_ntGY1_S_Y0,
//                 GY1_S_Y1      => ntRef_ntGY1_S_Y1,
//                 GY1_S_Y2      => ntRef_ntGY1_S_Y2,
//                 GY1_S_Y3      => ntRef_ntGY1_S_Y3,
//                 GY1_S_Q0      => ntRef_ntGY1_S_Q0,
//                 GY1_S_Q1      => ntRef_ntGY1_S_Q1,
//                 GY1_S_Q2      => ntRef_ntGY1_S_Q2,
//                 GY1_S_Q3      => ntRef_ntGY1_S_Q3,
//                 GY1_S_Y6CD    => ntRef_ntGY1_S_Y6CD,
//                 GY1_S_Y6AB    => ntRef_ntGY1_S_Y6AB,
//                 GY0_A_Y0      => ntRef_ntGY0_A_Y0,
//                 TCK_O         => ntRef_ntTCK_O,
//                 TDO           => ntRef_ntTDO
//                      )
//          @([sx,sy]);

//          
//         STRUCT inc_spec_MIPI_DPHY_7KM incVar;
//         string pin_SRB;
//         string pin_logic_device;
//         string attribute_IO;
//         int loc_SRB;
//         int sy_srb;

//         string mipi_dphy = "MIPI_DPHY_TILE";
//        
//        
//         foreach incVar(inc_MIPI_DPHY_7KM_SRB_spec)
//         {
//             pin_SRB = incVar.port_name_SRB;
//             pin_logic_device = incVar.port_name_device;
//             attribute_IO = incVar.attribute_IO;
//             loc_SRB = incVar.loc_SRB;
//           
//             sy_srb = sy + loc_SRB * NUM_GRID_Y;
//   
//             if(attribute_IO == "I")
//             { 
//               
//                connect(<pin *pin_logic_device of <device *mipi_dphy @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-3,sy_srb]>>);
//             }
//             else
//             {
//               connect(<pin *pin_SRB of<device SRB_TILE@[sx-3,sy_srb]>> => <wire *pin_logic_device of <device *mipi_dphy @[sx,sy]>>); 
//             }
//         }   


//  }// end of function place_mipi_dphy_7km_tile
}; //end of package pgc7km_funcs_place
