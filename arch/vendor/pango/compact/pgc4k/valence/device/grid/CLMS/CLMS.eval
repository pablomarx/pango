tarted
grid
device CLMS
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config bit CP_INITA[31:0] = 32'hFFFFFFFF,
        config bit CP_INITB[31:0] = 32'hFFFFFFFF,
        config bit CP_INITC[31:0] = 32'hFFFFFFFF,
        config bit CP_INITD[31:0] = 32'hFFFFFFFF,
        config string CP_MODEA = "COMP",
        config string CP_MODEB = "COMP",
        config string CP_MODEC = "COMP",
        config string CP_MODED = "COMP",
        config string CP_Y0MUX_SEL = "FX",
        config string CP_Y1MUX_SEL = "FX",
        config string CP_Y2MUX_SEL = "FX",
        config string CP_Y3MUX_SEL = "FX",
        config string CP_Q0MUX_SEL = "YX",
        config string CP_Q1MUX_SEL = "YX",
        config string CP_Q2MUX_SEL = "YX",
        config string CP_Q3MUX_SEL = "YX",
        config string CP_QABMUX_SEL = "Y6",
        config string CP_QCDMUX_SEL = "Y6",
        config string CP_ABPMUX_SEL = "X0D",
        config string CP_CDPMUX_SEL = "X0D",
        config string CP_CEMUX_SEL = "LOCAL",
        config string CP_RSMUX_SEL = "LOCAL",
        config string CP_CLK_POL = "FALSE",
        config string CP_LCE_POL = "FALSE",
        config string CP_LRS_POL = "FALSE",
        config string CP_LCE_EN = "FALSE",
        config string CP_LRS_EN = "FALSE",
        config string CP_GRS_EN = "TRUE",
        config string CP_RS_MODE = "SYNC",
        config string CP_FF0_RS = "SET",
        config string CP_FF1_RS = "SET",
        config string CP_FF2_RS = "SET",
        config string CP_FF3_RS = "SET",
        config string CP_FFAB_RS = "SET",
        config string CP_FFCD_RS = "SET",
        config string CP_WCK_SEL = "LOCAL",
        config string CP_MASK = "FALSE"
    );
    port
    (
// configuration_body_def_on


    config input SC_Q_0[31:0] = 32'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_Q_0[31],SC_Q_0[30],SC_Q_0[29],SC_Q_0[28],SC_Q_0[27],SC_Q_0[26],SC_Q_0[25],SC_Q_0[24],SC_Q_0[23],SC_Q_0[22],SC_Q_0[21],SC_Q_0[20],SC_Q_0[19],SC_Q_0[18],SC_Q_0[17],SC_Q_0[16],SC_Q_0[15],SC_Q_0[14],SC_Q_0[13],SC_Q_0[12],SC_Q_0[11],SC_Q_0[10],SC_Q_0[9],SC_Q_0[8],SC_Q_0[7],SC_Q_0[6],SC_Q_0[5],SC_Q_0[4],SC_Q_0[3],SC_Q_0[2],SC_Q_0[1],SC_Q_0[0]" */,

    config input SC_Q_1[31:0] = 32'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_Q_1[31],SC_Q_1[30],SC_Q_1[29],SC_Q_1[28],SC_Q_1[27],SC_Q_1[26],SC_Q_1[25],SC_Q_1[24],SC_Q_1[23],SC_Q_1[22],SC_Q_1[21],SC_Q_1[20],SC_Q_1[19],SC_Q_1[18],SC_Q_1[17],SC_Q_1[16],SC_Q_1[15],SC_Q_1[14],SC_Q_1[13],SC_Q_1[12],SC_Q_1[11],SC_Q_1[10],SC_Q_1[9],SC_Q_1[8],SC_Q_1[7],SC_Q_1[6],SC_Q_1[5],SC_Q_1[4],SC_Q_1[3],SC_Q_1[2],SC_Q_1[1],SC_Q_1[0]" */,

    config input SC_Q_2[31:0] = 32'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_Q_2[31],SC_Q_2[30],SC_Q_2[29],SC_Q_2[28],SC_Q_2[27],SC_Q_2[26],SC_Q_2[25],SC_Q_2[24],SC_Q_2[23],SC_Q_2[22],SC_Q_2[21],SC_Q_2[20],SC_Q_2[19],SC_Q_2[18],SC_Q_2[17],SC_Q_2[16],SC_Q_2[15],SC_Q_2[14],SC_Q_2[13],SC_Q_2[12],SC_Q_2[11],SC_Q_2[10],SC_Q_2[9],SC_Q_2[8],SC_Q_2[7],SC_Q_2[6],SC_Q_2[5],SC_Q_2[4],SC_Q_2[3],SC_Q_2[2],SC_Q_2[1],SC_Q_2[0]" */,

    config input SC_Q_3[31:0] = 32'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_Q_3[31],SC_Q_3[30],SC_Q_3[29],SC_Q_3[28],SC_Q_3[27],SC_Q_3[26],SC_Q_3[25],SC_Q_3[24],SC_Q_3[23],SC_Q_3[22],SC_Q_3[21],SC_Q_3[20],SC_Q_3[19],SC_Q_3[18],SC_Q_3[17],SC_Q_3[16],SC_Q_3[15],SC_Q_3[14],SC_Q_3[13],SC_Q_3[12],SC_Q_3[11],SC_Q_3[10],SC_Q_3[9],SC_Q_3[8],SC_Q_3[7],SC_Q_3[6],SC_Q_3[5],SC_Q_3[4],SC_Q_3[3],SC_Q_3[2],SC_Q_3[1],SC_Q_3[0]" */,

    config input SC_CARRY[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CARRY[3],SC_CARRY[2],SC_CARRY[1],SC_CARRY[0]" */,

    config input SC_I0ID[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_I0ID[3],SC_I0ID[2],SC_I0ID[1],SC_I0ID[0]" */,

    config input SC_I5CONST[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_I5CONST[3],SC_I5CONST[2],SC_I5CONST[1],SC_I5CONST[0]" */,

    config input SC_MATH[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MATH[3],SC_MATH[2],SC_MATH[1],SC_MATH[0]" */,

    config input SC_FDI[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FDI[3],SC_FDI[2],SC_FDI[1],SC_FDI[0]" */,

    config input SC_CDI[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CDI[3],SC_CDI[2],SC_CDI[1],SC_CDI[0]" */,

    config input SC_XDI[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_XDI[3],SC_XDI[2],SC_XDI[1],SC_XDI[0]" */,

    config input SC_SREN[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SREN[3],SC_SREN[2],SC_SREN[1],SC_SREN[0]" */,

    config input SC_MDI[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MDI[3],SC_MDI[2],SC_MDI[1],SC_MDI[0]" */,

    config input SC_MDI_APP[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MDI_APP[1],SC_MDI_APP[0]" */,

    config input SC_SREN_APP[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SREN_APP[1],SC_SREN_APP[0]" */,

    config input SC_DDIS_APP[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DDIS_APP[1],SC_DDIS_APP[0]" */,

    config input SC_CECHAIN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CECHAIN" */,

    config input SC_RSCHAIN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RSCHAIN" */,

    config input SC_PICLK = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICLK" */,

    config input SC_PICE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICE" */,

    config input SC_PIRS = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIRS" */,

    config input SC_ASYNC = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ASYNC" */,

    config input SC_RSS[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RSS[3],SC_RSS[2],SC_RSS[1],SC_RSS[0]" */,

    config input SC_RSS_APP[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RSS_APP[1],SC_RSS_APP[0]" */,

    config input SC_LCE_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LCE_EN" */,

    config input SC_LRS_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LRS_EN" */,

    config input SC_MASK = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MASK" */,

    config input SC_RAM_WCK = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RAM_WCK" */,

    config input SC_GRS_DIS = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GRS_DIS" */,

// configuration_body_def_end

        input A4 = 1'b1,
        input A3 = 1'b1,
        input A2 = 1'b1,
        input A1 = 1'b1,
        input A0 = 1'b1,
        input B4 = 1'b1,
        input B3 = 1'b1,
        input B2 = 1'b1,
        input B1 = 1'b1,
        input B0 = 1'b1,
        input C4 = 1'b1,
        input C3 = 1'b1,
        input C2 = 1'b1,
        input C1 = 1'b1,
        input C0 = 1'b1,
        input D4 = 1'b1,
        input D3 = 1'b1,
        input D2 = 1'b1,
        input D1 = 1'b1,
        input D0 = 1'b1,
        input AD = 1'b1,
        input BD = 1'b1,
        input CD = 1'b1,
        input DD = 1'b1,
        input M3 = 1'b1,
        input M2 = 1'b1,
        input M1 = 1'b1,
        input M0 = 1'b1,
        input RS = 1'b1,
        input CE = 1'b1,
        input CLK = 1'b1,
        input L7IN = 1'b1,
        input CIN = 1'b1,
        input RSCI = 1'b1,
        input CECI = 1'b1,
        input SRCI = 1'b1,
        input WCLK = 1'b1,
        output Y3,
        output Y2,
        output Y1,
        output Y0,
        output Y6AB,
        output Y6CD,
        output Q3,
        output Q2,
        output Q1,
        output Q0,
        output L7OUT,
        output COUT,
        output RSCO,
        output CECO,
        output SRCO
    );
};
//grid device end

//grid device structure netlist started
structure netlist of CLMS
{
    wire ntA4;
    wire ntA3;
    wire ntA2;
    wire ntA1;
    wire ntA0;
    wire ntB4;
    wire ntB3;
    wire ntB2;
    wire ntB1;
    wire ntB0;
    wire ntC4;
    wire ntC3;
    wire ntC2;
    wire ntC1;
    wire ntC0;
    wire ntD4;
    wire ntD3;
    wire ntD2;
    wire ntD1;
    wire ntD0;
    wire ntAD;
    wire ntBD;
    wire ntCD;
    wire ntDD;
    wire ntM3;
    wire ntM2;
    wire ntM1;
    wire ntM0;
    wire ntRS;
    wire ntCE;
    wire ntCLK;
    wire ntL7IN;
    wire ntCIN;
    wire ntRSCI;
    wire ntCECI;
    wire ntSRCI;
    wire ntY3;
    wire ntY2;
    wire ntY1;
    wire ntY0;
    wire ntY6AB;
    wire ntY6CD;
    wire ntQ3;
    wire ntQ2;
    wire ntQ1;
    wire ntQ0;
    wire ntL7OUT;
    wire ntCOUT;
    wire ntRSCO;
    wire ntCECO;
    wire ntSRCO;
    wire ntWCLK;

    // the interior net
    wire ntCYA;
    wire ntCYB;
    wire ntCYC;
    wire ntL8;
    wire ntQP0;
    wire ntQP1;
    wire ntQD0;
    wire ntDP0;
    wire ntQD1;
    wire ntQD2;
    wire ntDP1;
    wire ntQD3;
    wire ntDP0_DI;
    wire ntDP1_DI;
    wire ntWE;
    wire ntK0;
    wire ntG0;
    wire ntK2;
    wire ntG2;
    wire ntL5A;
    wire ntL5B;
    wire ntL5C;
    wire ntL5D;
    wire ntCLK_W;
    wire ntCLKCO;
    wire ntR_WCLK;
    wire ntRS_P;
    wire ntCE_P;
    wire ntWCLK1;
    
    // the connection of all input
    ntA4          <=  A4;
    ntA3          <=  A3;
    ntA2          <=  A2;
    ntA1          <=  A1;
    ntA0          <=  A0;
    ntB4          <=  B4;
    ntB3          <=  B3;
    ntB2          <=  B2;
    ntB1          <=  B1;
    ntB0          <=  B0;
    ntC4          <=  C4;
    ntC3          <=  C3;
    ntC2          <=  C2;
    ntC1          <=  C1;
    ntC0          <=  C0;
    ntD4          <=  D4;
    ntD3          <=  D3;
    ntD2          <=  D2;
    ntD1          <=  D1;
    ntD0          <=  D0;
    ntAD          <=  AD;
    ntBD          <=  BD;
    ntCD          <=  CD;
    ntDD          <=  DD;
    ntM3          <=  M3;
    ntM2          <=  M2;
    ntM1          <=  M1;
    ntM0          <=  M0;
    ntRS          <=  RS;
    ntCE          <=  CE;
    ntCLK         <=  CLK;
    ntL7IN        <=  L7IN;
    ntCIN         <=  CIN;
    ntRSCI        <=  RSCI;
    ntCECI        <=  CECI;
    ntSRCI        <=  SRCI;
    ntWCLK        <=  WCLK;

    // the connection of all output
    Y3          <=  ntY3;
    Y2          <=  ntY2;
    Y1          <=  ntY1;
    Y0          <=  ntY0;
    Y6AB        <=  ntY6AB;
    Y6CD        <=  ntY6CD;
    Q3          <=  ntQ3;
    Q2          <=  ntQ2;
    Q1          <=  ntQ1;
    Q0          <=  ntQ0;
    L7OUT       <=  ntL7OUT;
    COUT        <=  ntCOUT;
    RSCO        <=  ntRSCO;
    CECO        <=  ntCECO;
    SRCO        <=  ntQ3;

    device LUT5S FYA
        parameter map
        (
            CP_INIT     =>  CP_INITA,
            CP_MODE     =>  CP_MODEA,
            CP_MASK     =>  CP_MASK
        )
        port map
       (
            A0        =>  ntA0,
            A1        =>  ntA1,
            A2        =>  ntA2,
            A3        =>  ntA3,
            A4        =>  ntA4,
            AD        =>  ntAD,
            CIN       =>  ntCIN,
            COUT      =>  ntCYA,
            K         =>  ntK0,
            G         =>  ntG0,
            L5        =>  ntL5A,
            WA        =>  {ntM3, ntM2, ntM1, ntM0},
            WCK       =>  ntCLK_W,
            WE        =>  ntWE
       );

    device LUT5SC FYB
        parameter map
        (
            CP_INIT     =>  CP_INITB,
            CP_MODE     =>  CP_MODEB,
            CP_MASK     =>  CP_MASK
        )
        port map
       (
            A0        =>  ntB0,
            A1        =>  ntB1,
            A2        =>  ntB2,
            A3        =>  ntB3,
            A4        =>  ntB4,
            AD        =>  ntBD,
            CIN       =>  ntCYA,
            K         =>  ntK0,
            G         =>  ntG0,
            FCIN      =>  ntCIN,
            COUT      =>  ntCYB,
            L5        =>  ntL5B,
            WA        =>  {ntM3, ntM2, ntM1, ntM0},
            WCK       =>  ntCLK_W,
            WE        =>  ntWE
       );

    device LUT5S FYC
        parameter map
        (
            CP_INIT     =>  CP_INITC,
            CP_MODE     =>  CP_MODEC,
            CP_MASK     =>  CP_MASK
        )
        port map
       (
            A0        =>  ntC0,
            A1        =>  ntC1,
            A2        =>  ntC2,
            A3        =>  ntC3,
            A4        =>  ntC4,
            AD        =>  ntCD,
            CIN       =>  ntCYB,
            K         =>  ntK2,
            G         =>  ntG2,
            COUT      =>  ntCYC,
            L5        =>  ntL5C,
            WA        =>  {ntM3, ntM2, ntM1, ntM0},
            WCK       =>  ntCLK_W,
            WE        =>  ntWE
       );

    device LUT5SC FYD
        parameter map
        (
            CP_INIT     =>  CP_INITD,
            CP_MODE     =>  CP_MODED,
            CP_MASK     =>  CP_MASK
        )
        port map
       (
            A0        =>  ntD0,
            A1        =>  ntD1,
            A2        =>  ntD2,
            A3        =>  ntD3,
            A4        =>  ntD4,
            AD        =>  ntDD,
            CIN       =>  ntCYC,
            K         =>  ntK2,
            G         =>  ntG2,
            FCIN      =>  ntCYB,
            COUT      =>  ntCOUT,
            L5        =>  ntL5D,
            WA        =>  {ntM3, ntM2, ntM1, ntM0},
            WCK       =>  ntCLK_W,
            WE        =>  ntWE
       );

    device RAM_RS U0_NOT
        port map
        (
            IN  => ntRS_P,
            OUT => ntWE
        ); 
    
    device RAM_RS RAM_RS_BUF2
        port map
        (
            IN  => ntWCLK,
            OUT => ntWCLK1
        ); 
        
    device MUX2_P WCKMUX
        parameter map
        (
            SEL  => CP_WCK_SEL
        )
        port map
       (
            DOUT      =>  ntCLK_W,
            DI1       =>  ntWCLK1,
            DI0       =>  ntCLKCO
       );

    device MUX2 L6ABMUX
        port map
       (
            DOUT      =>  ntY6AB,
            SEL       =>  ntM0,
            DI1       =>  ntL5B,
            DI0       =>  ntL5A
       );

    device MUX2 L6CDMUX
        port map
       (
            DOUT      =>  ntY6CD,
            SEL       =>  ntM1,
            DI1       =>  ntL5D,
            DI0       =>  ntL5C
       );

    device MUX2 L7MUX
        port map
       (
            DOUT      =>  ntL7OUT,
            SEL       =>  ntM2,
            DI1       =>  ntY6CD,
            DI0       =>  ntY6AB
       );

    device MUX2 L8MUX
        port map
       (
            DOUT      =>  ntL8,
            SEL       =>  ntM3,
            DI1       =>  ntL7IN,
            DI0       =>  ntL7OUT
       );

    device CLK_POLMUX CLKPOLMUX
        parameter map
        (
            CP_CLK_POL  =>  CP_CLK_POL
        )
        port map
       (
            Y         =>  ntCLKCO,
            IN        =>  ntCLK
       );

    device LCE_POLMUX LCEPOLMUX
        parameter map
        (
            CP_LCE_EN   =>  CP_LCE_EN,
            CP_LCE_POL  =>  CP_LCE_POL
        )
        port map
       (
            Y         =>  ntCE_P,
            IN        =>  ntCE
       );

    device LRS_POLMUX LRSPOLMUX
        parameter map
        (
            CP_LRS_EN   =>  CP_LRS_EN,
            CP_LRS_POL  =>  CP_LRS_POL
        )
        port map
       (
            Y         =>  ntRS_P,
            IN        =>  ntRS
       );

    device MUX2_P CEMUX
        parameter map
        (
            SEL     =>  CP_CEMUX_SEL
        )
        port map
       (
            DOUT      =>  ntCECO,
            DI1       =>  ntCECI,
            DI0       =>  ntCE_P
       );

    device MUX2_P RSMUX
        parameter map
        (
            SEL    =>   CP_RSMUX_SEL
        )
        port map
       (
            DOUT      =>  ntRSCO,
            DI1       =>  ntRSCI,
            DI0       =>  ntRS_P
       );

    device YMUX Y3MUX
        parameter map
        (
            CP_OUT_SEL  =>  CP_Y3MUX_SEL
        )
        port map
       (
            Y         =>  ntY3,
            FX        =>  ntL5D,
            CYX       =>  ntCOUT,
            MF        =>  ntL8
       );

    device YMUX Y2MUX
        parameter map
        (
            CP_OUT_SEL  =>  CP_Y2MUX_SEL
        )
        port map
       (
            Y         =>  ntY2,
            FX        =>  ntL5C,
            CYX       =>  ntCYC,
            MF        =>  ntQP1
       );

    device YMUX Y1MUX
        parameter map
        (
            CP_OUT_SEL  =>  CP_Y1MUX_SEL
        )
        port map
       (
            Y         =>  ntY1,
            FX        =>  ntL5B,
            CYX       =>  ntCYB,
            MF        =>  ntL7OUT
       );

    device YMUX Y0MUX
        parameter map
        (
            CP_OUT_SEL  =>  CP_Y0MUX_SEL
        )
        port map
       (
            Y         =>  ntY0,
            FX        =>  ntL5A,
            CYX       =>  ntCYA,
            MF        =>  ntQP0
       );

    device QMUX Q3MUX
        parameter map
        (
            CP_OUT_SEL  =>  CP_Q3MUX_SEL
        )
        port map
       (
            Q         =>  ntQD3,
            YX        =>  ntY3,
            MX        =>  ntM3,
            SRQ       =>  ntQP1
       );

    device QMUX Q2MUX
        parameter map
        (
            CP_OUT_SEL  =>  CP_Q2MUX_SEL
        )
        port map
       (
            Q         =>  ntQD2,
            YX        =>  ntY2,
            MX        =>  ntM1,
            SRQ       =>  ntQ1
       );

    device QMUX Q1MUX
        parameter map
        (
            CP_OUT_SEL  =>  CP_Q1MUX_SEL
        )
        port map
       (
            Q         =>  ntQD1,
            YX        =>  ntY1,
            MX        =>  ntM2,
            SRQ       =>  ntQP0
       );

    device QMUX Q0MUX
        parameter map
        (
            CP_OUT_SEL  =>  CP_Q0MUX_SEL
        )
        port map
       (
            Q         =>  ntQD0,
            YX        =>  ntY0,
            MX        =>  ntM0,
            SRQ       =>  ntSRCI
       );

    device PMUX ABPMUX
        parameter map
        (
            CP_OUT_SEL  =>  CP_ABPMUX_SEL
        )
        port map
       (
            Y         =>  ntDP0_DI,
            X1D       =>  ntBD,
            X0D       =>  ntAD
       );

    device PMUX CDPMUX
        parameter map
        (
            CP_OUT_SEL  =>  CP_CDPMUX_SEL
        )
        port map
       (
            Y         =>  ntDP1_DI,
            X1D       =>  ntDD,
            X0D       =>  ntCD
       );

    device APPQMUX QABMUX
        parameter map
        (
            CP_OUT_SEL  =>  CP_QABMUX_SEL
        )
        port map
       (
            Q         =>  ntDP0,
            Y6        =>  ntY6AB,
            PY        =>  ntDP0_DI,
            SRQ       =>  ntQ0
       );

    device APPQMUX QCDMUX
        parameter map
        (
            CP_OUT_SEL  =>  CP_QCDMUX_SEL
        )
        port map
       (
            Q         =>  ntDP1,
            Y6        =>  ntY6CD,
            PY        =>  ntDP1_DI,
            SRQ       =>  ntQ2
       );

    device FF FF0
        parameter map
        (
            CP_GRS_EN  => CP_GRS_EN,
            CP_RS_MODE  =>  CP_RS_MODE,
            CP_FF_RS    =>  CP_FF0_RS
        )
        port map
       (
            Q         =>  ntQ0,
            D         =>  ntQD0,
            CE        =>  ntCECO,
            CLK       =>  ntCLKCO,
            RS        =>  ntRSCO
       );

    device FF FFAB
        parameter map
        (
            CP_GRS_EN  => CP_GRS_EN,
            CP_RS_MODE  =>  CP_RS_MODE,
            CP_FF_RS    =>  CP_FFAB_RS
        )
        port map
       (
            Q         =>  ntQP0,
            D         =>  ntDP0,
            CE        =>  ntCECO,
            CLK       =>  ntCLKCO,
            RS        =>  ntRSCO
       );

    device FF FF1
        parameter map
        (
            CP_GRS_EN  => CP_GRS_EN,
            CP_RS_MODE  =>  CP_RS_MODE,
            CP_FF_RS    =>  CP_FF1_RS
        )
        port map
       (
            Q         =>  ntQ1,
            D         =>  ntQD1,
            CE        =>  ntCECO,
            CLK       =>  ntCLKCO,
            RS        =>  ntRSCO
       );

    device FF FF2
        parameter map
        (
             CP_GRS_EN  => CP_GRS_EN,
            CP_RS_MODE  =>  CP_RS_MODE,
            CP_FF_RS    =>  CP_FF2_RS
        )
        port map
       (
            Q         =>  ntQ2,
            D         =>  ntQD2,
            CE        =>  ntCECO,
            CLK       =>  ntCLKCO,
            RS        =>  ntRSCO
       );

    device FF FFCD
        parameter map
        (
            CP_GRS_EN  => CP_GRS_EN,
            CP_RS_MODE  =>  CP_RS_MODE,
            CP_FF_RS    =>  CP_FFCD_RS
        )
        port map
       (
            Q         =>  ntQP1,
            D         =>  ntDP1,
            CE        =>  ntCECO,
            CLK       =>  ntCLKCO,
            RS        =>  ntRSCO
       );

    device FF FF3
        parameter map
        (
            CP_GRS_EN  => CP_GRS_EN,
            CP_RS_MODE  =>  CP_RS_MODE,
            CP_FF_RS    =>  CP_FF3_RS
        )
        port map
       (
            Q         =>  ntQ3,
            D         =>  ntQD3,
            CE        =>  ntCECO,
            CLK       =>  ntCLKCO,
            RS        =>  ntRSCO
       );

};
//grid device structure netlist end

//grid device configure body started

configuration cfg of CLMS
{

 // assign config body begin
    SC_Q_0[0]    :=    (CP_INITA[3] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[1]    :=    (CP_INITA[11] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[2]    :=    (CP_INITA[7] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[3]    :=    (CP_INITA[15] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[4]    :=    (CP_INITA[1] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[5]    :=    (CP_INITA[9] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[6]    :=    (CP_INITA[5] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[7]    :=    (CP_INITA[13] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[8]    :=    (CP_INITA[2] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[9]    :=    (CP_INITA[10] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[10]   :=    (CP_INITA[6] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[11]   :=    (CP_INITA[14] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[12]   :=    (CP_INITA[0] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[13]   :=    (CP_INITA[8] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[14]   :=    (CP_INITA[4] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[15]   :=    (CP_INITA[12] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[16]   :=    (CP_INITA[19] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[17]   :=    (CP_INITA[27] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[18]   :=    (CP_INITA[23] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[19]   :=    (CP_INITA[31] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[20]   :=    (CP_INITA[17] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[21]   :=    (CP_INITA[25] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[22]   :=    (CP_INITA[21] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[23]   :=    (CP_INITA[29] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[24]   :=    (CP_INITA[18] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[25]   :=    (CP_INITA[26] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[26]   :=    (CP_INITA[22] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[27]   :=    (CP_INITA[30] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[28]   :=    (CP_INITA[16] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[29]   :=    (CP_INITA[24] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[30]   :=    (CP_INITA[20] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[31]   :=    (CP_INITA[28] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[0]    :=    (CP_INITB[3] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[1]    :=    (CP_INITB[11] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[2]    :=    (CP_INITB[7] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[3]    :=    (CP_INITB[15] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[4]    :=    (CP_INITB[1] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[5]    :=    (CP_INITB[9] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[6]    :=    (CP_INITB[5] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[7]    :=    (CP_INITB[13] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[8]    :=    (CP_INITB[2] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[9]    :=    (CP_INITB[10] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[10]   :=    (CP_INITB[6] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[11]   :=    (CP_INITB[14] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[12]   :=    (CP_INITB[0] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[13]   :=    (CP_INITB[8] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[14]   :=    (CP_INITB[4] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[15]   :=    (CP_INITB[12] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[16]   :=    (CP_INITB[19] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[17]   :=    (CP_INITB[27] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[18]   :=    (CP_INITB[23] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[19]   :=    (CP_INITB[31] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[20]   :=    (CP_INITB[17] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[21]   :=    (CP_INITB[25] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[22]   :=    (CP_INITB[21] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[23]   :=    (CP_INITB[29] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[24]   :=    (CP_INITB[18] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[25]   :=    (CP_INITB[26] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[26]   :=    (CP_INITB[22] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[27]   :=    (CP_INITB[30] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[28]   :=    (CP_INITB[16] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[29]   :=    (CP_INITB[24] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[30]   :=    (CP_INITB[20] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[31]   :=    (CP_INITB[28] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[0]    :=    (CP_INITC[3] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[1]    :=    (CP_INITC[11] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[2]    :=    (CP_INITC[7] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[3]    :=    (CP_INITC[15] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[4]    :=    (CP_INITC[1] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[5]    :=    (CP_INITC[9] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[6]    :=    (CP_INITC[5] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[7]    :=    (CP_INITC[13] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[8]    :=    (CP_INITC[2] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[9]    :=    (CP_INITC[10] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[10]   :=    (CP_INITC[6] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[11]   :=    (CP_INITC[14] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[12]   :=    (CP_INITC[0] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[13]   :=    (CP_INITC[8] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[14]   :=    (CP_INITC[4] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[15]   :=    (CP_INITC[12] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[16]   :=    (CP_INITC[19] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[17]   :=    (CP_INITC[27] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[18]   :=    (CP_INITC[23] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[19]   :=    (CP_INITC[31] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[20]   :=    (CP_INITC[17] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[21]   :=    (CP_INITC[25] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[22]   :=    (CP_INITC[21] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[23]   :=    (CP_INITC[29] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[24]   :=    (CP_INITC[18] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[25]   :=    (CP_INITC[26] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[26]   :=    (CP_INITC[22] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[27]   :=    (CP_INITC[30] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[28]   :=    (CP_INITC[16] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[29]   :=    (CP_INITC[24] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[30]   :=    (CP_INITC[20] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[31]   :=    (CP_INITC[28] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[0]    :=    (CP_INITD[3] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[1]    :=    (CP_INITD[11] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[2]    :=    (CP_INITD[7] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[3]    :=    (CP_INITD[15] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[4]    :=    (CP_INITD[1] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[5]    :=    (CP_INITD[9] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[6]    :=    (CP_INITD[5] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[7]    :=    (CP_INITD[13] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[8]    :=    (CP_INITD[2] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[9]    :=    (CP_INITD[10] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[10]   :=    (CP_INITD[6] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[11]   :=    (CP_INITD[14] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[12]   :=    (CP_INITD[0] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[13]   :=    (CP_INITD[8] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[14]   :=    (CP_INITD[4] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[15]   :=    (CP_INITD[12] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[16]   :=    (CP_INITD[19] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[17]   :=    (CP_INITD[27] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[18]   :=    (CP_INITD[23] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[19]   :=    (CP_INITD[31] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[20]   :=    (CP_INITD[17] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[21]   :=    (CP_INITD[25] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[22]   :=    (CP_INITD[21] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[23]   :=    (CP_INITD[29] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[24]   :=    (CP_INITD[18] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[25]   :=    (CP_INITD[26] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[26]   :=    (CP_INITD[22] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[27]   :=    (CP_INITD[30] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[28]   :=    (CP_INITD[16] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[29]   :=    (CP_INITD[24] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[30]   :=    (CP_INITD[20] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[31]   :=    (CP_INITD[28] == 1'b1? 1'b0 : 1'b1);
// assign config body end

//initial config body0 begin
    if (CP_MODEA == "LUT5" ||  CP_MODEA == "ROM" ||  CP_MODEA == "WAND" ||  CP_MODEA == "PRIENC" || CP_MODEA == "LATCH")
    {
        SC_I5CONST[0]  :=  1'b0;
        SC_CARRY[0]  :=  1'b1;
        SC_MATH[0]  :=  1'b0;
        SC_I0ID[0]  :=  1'b0;
    }
    else if(CP_MODEA == "MUX4" || CP_MODEA == "LUT5M")
    {
        SC_I5CONST[0]  :=  1'b0;
        SC_CARRY[0]  :=  1'b0;
        SC_MATH[0]  :=  1'b0;
        SC_I0ID[0]  :=  1'b1;
    }
    else if(CP_MODEA == "ARITH")
    {
        SC_I5CONST[0]  :=  1'b1;
        SC_CARRY[0]  :=  1'b0;
        SC_MATH[0]  :=  1'b1;
        SC_I0ID[0]  :=  1'b0;
    }
    else if(CP_MODEA == "XOR")
    {
        SC_I5CONST[0]  :=  1'b1;
        SC_CARRY[0]  :=  1'b1;
        SC_MATH[0]  :=  1'b1;
        SC_I0ID[0]  :=  1'b0;
    }
    else if(CP_MODEA == "COMP")
    {
        SC_I5CONST[0]  :=  1'b0;
        SC_CARRY[0]  :=  1'b0;
        SC_MATH[0]  :=  1'b0;
        SC_I0ID[0]  :=  1'b0;
    }
    else if(CP_MODEA == "ARITH1")
    {
        SC_I5CONST[0]  :=  1'b0;
        SC_CARRY[0]  :=  1'b0;
        SC_MATH[0]  :=  1'b1;
        SC_I0ID[0]  :=  1'b0;
    }
    else if(CP_MODEA == "ARITH2")
    {
        SC_I5CONST[0]  :=  1'b0;
        SC_CARRY[0]  :=  1'b0;
        SC_MATH[0]  :=  1'b1;
        SC_I0ID[0]  :=  1'b1;
    }
    else if(CP_MODEA == "ARITH3")
    {
        SC_I5CONST[0]  :=  1'b0;
        SC_CARRY[0]  :=  1'b1;
        SC_MATH[0]  :=  1'b0;
        SC_I0ID[0]  :=  1'b1;
    }
    else if(CP_MODEA == "ARITH4")
    {
        SC_I5CONST[0]  :=  1'b0;
        SC_CARRY[0]  :=  1'b1;
        SC_MATH[0]  :=  1'b1;
        SC_I0ID[0]  :=  1'b0;
    }
    else if(CP_MODEA == "ARITH5")
    {
        SC_I5CONST[0]  :=  1'b0;
        SC_CARRY[0]  :=  1'b1;
        SC_MATH[0]  :=  1'b1;
        SC_I0ID[0]  :=  1'b1;
    }
    else if(CP_MODEA == "ARITH6" || CP_MODEA == "RAM")
    {
        SC_I5CONST[0]  :=  1'b1;
        SC_CARRY[0]  :=  1'b0;
        SC_MATH[0]  :=  1'b0;
        SC_I0ID[0]  :=  1'b0;
    }
    else if(CP_MODEA == "ARITH7")
    {
        SC_I5CONST[0]  :=  1'b1;
        SC_CARRY[0]  :=  1'b0;
        SC_MATH[0]  :=  1'b0;
        SC_I0ID[0]  :=  1'b1;
    }
    else if(CP_MODEA == "ARITH8")
    {
        SC_I5CONST[0]  :=  1'b1;
        SC_CARRY[0]  :=  1'b0;
        SC_MATH[0]  :=  1'b1;
        SC_I0ID[0]  :=  1'b1;
    }
    else if(CP_MODEA == "ARITH9")
    {
        SC_I5CONST[0]  :=  1'b1;
        SC_CARRY[0]  :=  1'b1;
        SC_MATH[0]  :=  1'b0;
        SC_I0ID[0]  :=  1'b0;
    }
    else if(CP_MODEA == "ARITH10")
    {
        SC_I5CONST[0]  :=  1'b1;
        SC_CARRY[0]  :=  1'b1;
        SC_MATH[0]  :=  1'b0;
        SC_I0ID[0]  :=  1'b1;
    }
    else if(CP_MODEA == "ARITH11")
    {
        SC_I5CONST[0]  :=  1'b1;
        SC_CARRY[0]  :=  1'b1;
        SC_MATH[0]  :=  1'b1;
        SC_I0ID[0]  :=  1'b1;
    }
    else
    {
        SC_I5CONST[0]  :=  1'b0;
        SC_CARRY[0]  :=  1'b0;
        SC_MATH[0]  :=  1'b0;
        SC_I0ID[0]  :=  1'b0;
        error("MODE(%s) is not support!",CP_MODEA);
    }

//initial config body0 end


//initial config body1 begin
    if (CP_MODEB == "LUT5" ||  CP_MODEB == "ROM" ||  CP_MODEB == "WAND" ||  CP_MODEB == "PRIENC" || CP_MODEB == "LATCH")
    {
        SC_I5CONST[1]  :=  1'b0;
        SC_CARRY[1]  :=  1'b1;
        SC_MATH[1]  :=  1'b0;
        SC_I0ID[1]  :=  1'b0;
    }
    else if(CP_MODEB == "MUX4" || CP_MODEB == "LUT5M")
    {
        SC_I5CONST[1]  :=  1'b0;
        SC_CARRY[1]  :=  1'b0;
        SC_MATH[1]  :=  1'b0;
        SC_I0ID[1]  :=  1'b1;
    }
    else if(CP_MODEB == "ARITH")
    {
        SC_I5CONST[1]  :=  1'b1;
        SC_CARRY[1]  :=  1'b0;
        SC_MATH[1]  :=  1'b1;
        SC_I0ID[1]  :=  1'b0;
    }
    else if(CP_MODEB == "XOR")
    {
        SC_I5CONST[1]  :=  1'b1;
        SC_CARRY[1]  :=  1'b1;
        SC_MATH[1]  :=  1'b1;
        SC_I0ID[1]  :=  1'b0;
    }
    else if(CP_MODEB == "COMP")
    {
        SC_I0ID[1]  :=  1'b0;
        SC_MATH[1]  :=  1'b0;
        SC_CARRY[1]  :=  1'b0;
        SC_I5CONST[1]  :=  1'b0;
    }
    else if(CP_MODEB == "ARITH1")
    {
        SC_I5CONST[1]  :=  1'b0;
        SC_CARRY[1]  :=  1'b0;
        SC_MATH[1]  :=  1'b1;
        SC_I0ID[1]  :=  1'b0;
    }
    else if(CP_MODEB == "ARITH2")
    {
        SC_I5CONST[1]  :=  1'b0;
        SC_CARRY[1]  :=  1'b0;
        SC_MATH[1]  :=  1'b1;
        SC_I0ID[1]  :=  1'b1;
    }
    else if(CP_MODEB == "ARITH3")
    {
        SC_I5CONST[1]  :=  1'b0;
        SC_CARRY[1]  :=  1'b1;
        SC_MATH[1]  :=  1'b0;
        SC_I0ID[1]  :=  1'b1;
    }
    else if(CP_MODEB == "ARITH4")
    {
        SC_I5CONST[1]  :=  1'b0;
        SC_CARRY[1]  :=  1'b1;
        SC_MATH[1]  :=  1'b1;
        SC_I0ID[1]  :=  1'b0;
    }
    else if(CP_MODEB == "ARITH5")
    {
        SC_I5CONST[1]  :=  1'b0;
        SC_CARRY[1]  :=  1'b1;
        SC_MATH[1]  :=  1'b1;
        SC_I0ID[1]  :=  1'b1;
    }
    else if(CP_MODEB == "ARITH6" || CP_MODEB == "RAM")
    {
        SC_I5CONST[1]  :=  1'b1;
        SC_CARRY[1]  :=  1'b0;
        SC_MATH[1]  :=  1'b0;
        SC_I0ID[1]  :=  1'b0;
    }
    else if(CP_MODEB == "ARITH7")
    {
        SC_I5CONST[1]  :=  1'b1;
        SC_CARRY[1]  :=  1'b0;
        SC_MATH[1]  :=  1'b0;
        SC_I0ID[1]  :=  1'b1;
    }
    else if(CP_MODEB == "ARITH8")
    {
        SC_I5CONST[1]  :=  1'b1;
        SC_CARRY[1]  :=  1'b0;
        SC_MATH[1]  :=  1'b1;
        SC_I0ID[1]  :=  1'b1;
    }
    else if(CP_MODEB == "ARITH9")
    {
        SC_I5CONST[1]  :=  1'b1;
        SC_CARRY[1]  :=  1'b1;
        SC_MATH[1]  :=  1'b0;
        SC_I0ID[1]  :=  1'b0;
    }
    else if(CP_MODEB == "ARITH10")
    {
        SC_I5CONST[1]  :=  1'b1;
        SC_CARRY[1]  :=  1'b1;
        SC_MATH[1]  :=  1'b0;
        SC_I0ID[1]  :=  1'b1;
    }
    else if(CP_MODEB == "ARITH11")
    {
        SC_I5CONST[1]  :=  1'b1;
        SC_CARRY[1]  :=  1'b1;
        SC_MATH[1]  :=  1'b1;
        SC_I0ID[1]  :=  1'b1;
    }
    else
    {
        SC_I0ID[1]  :=  1'b0;
        SC_MATH[1]  :=  1'b0;
        SC_CARRY[1]  :=  1'b0;
        SC_I5CONST[1]  :=  1'b0;
        error("MODE(%s) is not support!",CP_MODEB);
    }

//initial config body1 end


//initial config body2 begin
    if (CP_MODEC == "LUT5" ||  CP_MODEC == "ROM" ||  CP_MODEC == "WAND" ||  CP_MODEC == "PRIENC" || CP_MODEC == "LATCH")
    {
        SC_I5CONST[2]  :=  1'b0;
        SC_CARRY[2]  :=  1'b1;
        SC_MATH[2]  :=  1'b0;
        SC_I0ID[2]  :=  1'b0;
    }
    else if(CP_MODEC == "MUX4" || CP_MODEC == "LUT5M")
    {
        SC_I5CONST[2]  :=  1'b0;
        SC_CARRY[2]  :=  1'b0;
        SC_MATH[2]  :=  1'b0;
        SC_I0ID[2]  :=  1'b1;
    }
    else if(CP_MODEC == "ARITH")
    {
        SC_I5CONST[2]  :=  1'b1;
        SC_CARRY[2]  :=  1'b0;
        SC_MATH[2]  :=  1'b1;
        SC_I0ID[2]  :=  1'b0;
    }
    else if(CP_MODEC == "XOR")
    {
        SC_I5CONST[2]  :=  1'b1;
        SC_CARRY[2]  :=  1'b1;
        SC_MATH[2]  :=  1'b1;
        SC_I0ID[2]  :=  1'b0;
    }
    else if(CP_MODEC == "COMP")
    {
        SC_I0ID[2]  :=  1'b0;
        SC_MATH[2]  :=  1'b0;
        SC_CARRY[2]  :=  1'b0;
        SC_I5CONST[2]  :=  1'b0;
    }
    else if(CP_MODEC == "ARITH1")
    {
        SC_I5CONST[2]  :=  1'b0;
        SC_CARRY[2]  :=  1'b0;
        SC_MATH[2]  :=  1'b1;
        SC_I0ID[2]  :=  1'b0;
    }
    else if(CP_MODEC == "ARITH2")
    {
        SC_I5CONST[2]  :=  1'b0;
        SC_CARRY[2]  :=  1'b0;
        SC_MATH[2]  :=  1'b1;
        SC_I0ID[2]  :=  1'b1;
    }
    else if(CP_MODEC == "ARITH3")
    {
        SC_I5CONST[2]  :=  1'b0;
        SC_CARRY[2]  :=  1'b1;
        SC_MATH[2]  :=  1'b0;
        SC_I0ID[2]  :=  1'b1;
    }
    else if(CP_MODEC == "ARITH4")
    {
        SC_I5CONST[2]  :=  1'b0;
        SC_CARRY[2]  :=  1'b1;
        SC_MATH[2]  :=  1'b1;
        SC_I0ID[2]  :=  1'b0;
    }
    else if(CP_MODEC == "ARITH5")
    {
        SC_I5CONST[2]  :=  1'b0;
        SC_CARRY[2]  :=  1'b1;
        SC_MATH[2]  :=  1'b1;
        SC_I0ID[2]  :=  1'b1;
    }
    else if(CP_MODEC == "ARITH6" || CP_MODEC == "RAM")
    {
        SC_I5CONST[2]  :=  1'b1;
        SC_CARRY[2]  :=  1'b0;
        SC_MATH[2]  :=  1'b0;
        SC_I0ID[2]  :=  1'b0;
    }
    else if(CP_MODEC == "ARITH7")
    {
        SC_I5CONST[2]  :=  1'b1;
        SC_CARRY[2]  :=  1'b0;
        SC_MATH[2]  :=  1'b0;
        SC_I0ID[2]  :=  1'b1;
    }
    else if(CP_MODEC == "ARITH8")
    {
        SC_I5CONST[2]  :=  1'b1;
        SC_CARRY[2]  :=  1'b0;
        SC_MATH[2]  :=  1'b1;
        SC_I0ID[2]  :=  1'b1;
    }
    else if(CP_MODEC == "ARITH9")
    {
        SC_I5CONST[2]  :=  1'b1;
        SC_CARRY[2]  :=  1'b1;
        SC_MATH[2]  :=  1'b0;
        SC_I0ID[2]  :=  1'b0;
    }
    else if(CP_MODEC == "ARITH10")
    {
        SC_I5CONST[2]  :=  1'b1;
        SC_CARRY[2]  :=  1'b1;
        SC_MATH[2]  :=  1'b0;
        SC_I0ID[2]  :=  1'b1;
    }
    else if(CP_MODEC == "ARITH11")
    {
        SC_I5CONST[2]  :=  1'b1;
        SC_CARRY[2]  :=  1'b1;
        SC_MATH[2]  :=  1'b1;
        SC_I0ID[2]  :=  1'b1;
    }
    else
    {
        SC_I0ID[2]  :=  1'b0;
        SC_MATH[2]  :=  1'b0;
        SC_CARRY[2]  :=  1'b0;
        SC_I5CONST[2]  :=  1'b0;
        error("MODE(%s) is not support!",CP_MODEC);
    }

//initial config body2 end


//initial config body3 begin
    if (CP_MODED == "LUT5" ||  CP_MODED == "ROM" ||  CP_MODED == "WAND" ||  CP_MODED == "PRIENC" || CP_MODED == "LATCH")
    {
        SC_I5CONST[3]  :=  1'b0;
        SC_CARRY[3]  :=  1'b1;
        SC_MATH[3]  :=  1'b0;
        SC_I0ID[3]  :=  1'b0;
    }
    else if(CP_MODED == "MUX4" || CP_MODED == "LUT5M")
    {
        SC_I5CONST[3]  :=  1'b0;
        SC_CARRY[3]  :=  1'b0;
        SC_MATH[3]  :=  1'b0;
        SC_I0ID[3]  :=  1'b1;
    }
    else if(CP_MODED == "ARITH")
    {
        SC_I5CONST[3]  :=  1'b1;
        SC_CARRY[3]  :=  1'b0;
        SC_MATH[3]  :=  1'b1;
        SC_I0ID[3]  :=  1'b0;
    }
    else if(CP_MODED == "XOR")
    {
        SC_I5CONST[3]  :=  1'b1;
        SC_CARRY[3]  :=  1'b1;
        SC_MATH[3]  :=  1'b1;
        SC_I0ID[3]  :=  1'b0;
    }
    else if(CP_MODED == "COMP")
    {
        SC_I0ID[3]  :=  1'b0;
        SC_MATH[3]  :=  1'b0;
        SC_CARRY[3]  :=  1'b0;
        SC_I5CONST[3]  :=  1'b0;
    }
    else if(CP_MODED == "ARITH1")
    {
        SC_I5CONST[3]  :=  1'b0;
        SC_CARRY[3]  :=  1'b0;
        SC_MATH[3]  :=  1'b1;
        SC_I0ID[3]  :=  1'b0;
    }
    else if(CP_MODED == "ARITH2")
    {
        SC_I5CONST[3]  :=  1'b0;
        SC_CARRY[3]  :=  1'b0;
        SC_MATH[3]  :=  1'b1;
        SC_I0ID[3]  :=  1'b1;
    }
    else if(CP_MODED == "ARITH3")
    {
        SC_I5CONST[3]  :=  1'b0;
        SC_CARRY[3]  :=  1'b1;
        SC_MATH[3]  :=  1'b0;
        SC_I0ID[3]  :=  1'b1;
    }
    else if(CP_MODED == "ARITH4")
    {
        SC_I5CONST[3]  :=  1'b0;
        SC_CARRY[3]  :=  1'b1;
        SC_MATH[3]  :=  1'b1;
        SC_I0ID[3]  :=  1'b0;
    }
    else if(CP_MODED == "ARITH5")
    {
        SC_I5CONST[3]  :=  1'b0;
        SC_CARRY[3]  :=  1'b1;
        SC_MATH[3]  :=  1'b1;
        SC_I0ID[3]  :=  1'b1;
    }
    else if(CP_MODED == "ARITH6" || CP_MODED == "RAM")
    {
        SC_I5CONST[3]  :=  1'b1;
        SC_CARRY[3]  :=  1'b0;
        SC_MATH[3]  :=  1'b0;
        SC_I0ID[3]  :=  1'b0;
    }
    else if(CP_MODED == "ARITH7")
    {
        SC_I5CONST[3]  :=  1'b1;
        SC_CARRY[3]  :=  1'b0;
        SC_MATH[3]  :=  1'b0;
        SC_I0ID[3]  :=  1'b1;
    }
    else if(CP_MODED == "ARITH8")
    {
        SC_I5CONST[3]  :=  1'b1;
        SC_CARRY[3]  :=  1'b0;
        SC_MATH[3]  :=  1'b1;
        SC_I0ID[3]  :=  1'b1;
    }
    else if(CP_MODED == "ARITH9")
    {
        SC_I5CONST[3]  :=  1'b1;
        SC_CARRY[3]  :=  1'b1;
        SC_MATH[3]  :=  1'b0;
        SC_I0ID[3]  :=  1'b0;
    }
    else if(CP_MODED == "ARITH10")
    {
        SC_I5CONST[3]  :=  1'b1;
        SC_CARRY[3]  :=  1'b1;
        SC_MATH[3]  :=  1'b0;
        SC_I0ID[3]  :=  1'b1;
    }
    else if(CP_MODED == "ARITH11")
    {
        SC_I5CONST[3]  :=  1'b1;
        SC_CARRY[3]  :=  1'b1;
        SC_MATH[3]  :=  1'b1;
        SC_I0ID[3]  :=  1'b1;
    }
    else
    {
        SC_I0ID[3]  :=  1'b0;
        SC_MATH[3]  :=  1'b0;
        SC_CARRY[3]  :=  1'b0;
        SC_I5CONST[3]  :=  1'b0;
        error("MODE(%s) is not support!",CP_MODED);
    }

//initial config body3 end


//initial config body4 begin
    if (CP_Y0MUX_SEL == "FX")
    {
        SC_XDI[0]  :=  1'b0;
        SC_FDI[0]  :=  1'b0;
        SC_CDI[0]  :=  1'b0;
    }
    else if(CP_Y0MUX_SEL == "CYX")
    {
        SC_XDI[0]  :=  1'b0;
        SC_FDI[0]  :=  1'b1;
        SC_CDI[0]  :=  1'b1;
    }
    else if(CP_Y0MUX_SEL == "MF")
    {
        SC_XDI[0]  :=  1'b1;
        SC_FDI[0]  :=  1'b1;
        SC_CDI[0]  :=  1'b0;
    }
    else
    {
        SC_XDI[0]  :=  1'b0;
        SC_FDI[0]  :=  1'b0;
        SC_CDI[0]  :=  1'b0;
        error("YMUX SEL(%s) is not support!",CP_Y0MUX_SEL);
    }

//initial config body4 end


//initial config body5 begin
    if (CP_Y1MUX_SEL == "FX")
    {
        SC_XDI[1]  :=  1'b0;
        SC_FDI[1]  :=  1'b0;
        SC_CDI[1]  :=  1'b0;
    }
    else if(CP_Y1MUX_SEL == "CYX")
    {
        SC_XDI[1]  :=  1'b0;
        SC_FDI[1]  :=  1'b1;
        SC_CDI[1]  :=  1'b1;
    }
    else if(CP_Y1MUX_SEL == "MF")
    {
        SC_XDI[1]  :=  1'b1;
        SC_FDI[1]  :=  1'b1;
        SC_CDI[1]  :=  1'b0;
    }
    else
    {
        SC_XDI[1]  :=  1'b0;
        SC_FDI[1]  :=  1'b0;
        SC_CDI[1]  :=  1'b0;
        error("YMUX SEL(%s) is not support!",CP_Y1MUX_SEL);
    }

//initial config body5 end


//initial config body6 begin
    if (CP_Y2MUX_SEL == "FX")
    {
        SC_XDI[2]  :=  1'b0;
        SC_FDI[2]  :=  1'b0;
        SC_CDI[2]  :=  1'b0;
    }
    else if(CP_Y2MUX_SEL == "CYX")
    {
        SC_XDI[2]  :=  1'b0;
        SC_FDI[2]  :=  1'b1;
        SC_CDI[2]  :=  1'b1;
    }
    else if(CP_Y2MUX_SEL == "MF")
    {
        SC_XDI[2]  :=  1'b1;
        SC_FDI[2]  :=  1'b1;
        SC_CDI[2]  :=  1'b0;
    }
    else
    {
        SC_XDI[2]  :=  1'b0;
        SC_FDI[2]  :=  1'b0;
        SC_CDI[2]  :=  1'b0;
        error("YMUX SEL(%s) is not support!",CP_Y2MUX_SEL);
    }

//initial config body6 end


//initial config body7 begin
    if (CP_Y3MUX_SEL == "FX")
    {
        SC_XDI[3]  :=  1'b0;
        SC_FDI[3]  :=  1'b0;
        SC_CDI[3]  :=  1'b0;
    }
    else if(CP_Y3MUX_SEL == "CYX")
    {
        SC_XDI[3]  :=  1'b0;
        SC_FDI[3]  :=  1'b1;
        SC_CDI[3]  :=  1'b1;
    }
    else if(CP_Y3MUX_SEL == "MF")
    {
        SC_XDI[3]  :=  1'b1;
        SC_FDI[3]  :=  1'b1;
        SC_CDI[3]  :=  1'b0;
    }
    else
    {
        SC_XDI[3]  :=  1'b0;
        SC_FDI[3]  :=  1'b0;
        SC_CDI[3]  :=  1'b0;
        error("YMUX SEL(%s) is not support!",CP_Y3MUX_SEL);
    }

//initial config body7 end


//initial config body8 begin
    if (CP_Q0MUX_SEL == "YX")
    {
        SC_SREN[0]  :=  1'b0;
        SC_MDI[0]  :=  1'b0;
    }
    else if(CP_Q0MUX_SEL == "MX")
    {
        SC_SREN[0]  :=  1'b0;
        SC_MDI[0]  :=  1'b1;
    }
    else if(CP_Q0MUX_SEL == "SRQ")
    {
        SC_SREN[0]  :=  1'b1;
        SC_MDI[0]  :=  1'b0;
    }
    else
    {
        SC_SREN[0]  :=  1'b0;
        SC_MDI[0]  :=  1'b0;
        error("QMUX SEL(%s) is not support!",CP_Q0MUX_SEL);
    }

//initial config body8 end


//initial config body9 begin
    if (CP_Q1MUX_SEL == "YX")
    {
        SC_SREN[1]  :=  1'b0;
        SC_MDI[1]  :=  1'b0;
    }
    else if(CP_Q1MUX_SEL == "MX")
    {
        SC_SREN[1]  :=  1'b0;
        SC_MDI[1]  :=  1'b1;
    }
    else if(CP_Q1MUX_SEL == "SRQ")
    {
        SC_SREN[1]  :=  1'b1;
        SC_MDI[1]  :=  1'b0;
    }
    else
    {
        SC_SREN[1]  :=  1'b0;
        SC_MDI[1]  :=  1'b0;
        error("QMUX SEL(%s) is not support!",CP_Q1MUX_SEL);
    }

//initial config body9 end


//initial config body10 begin
    if (CP_Q2MUX_SEL == "YX")
    {
        SC_SREN[2]  :=  1'b0;
        SC_MDI[2]  :=  1'b0;
    }
    else if(CP_Q2MUX_SEL == "MX")
    {
        SC_SREN[2]  :=  1'b0;
        SC_MDI[2]  :=  1'b1;
    }
    else if(CP_Q2MUX_SEL == "SRQ")
    {
        SC_SREN[2]  :=  1'b1;
        SC_MDI[2]  :=  1'b0;
    }
    else
    {
        SC_SREN[2]  :=  1'b0;
        SC_MDI[2]  :=  1'b0;
        error("QMUX SEL(%s) is not support!",CP_Q2MUX_SEL);
    }

//initial config body10 end


//initial config body11 begin
    if (CP_Q3MUX_SEL == "YX")
    {
        SC_SREN[3]  :=  1'b0;
        SC_MDI[3]  :=  1'b0;
    }
    else if(CP_Q3MUX_SEL == "MX")
    {
        SC_SREN[3]  :=  1'b0;
        SC_MDI[3]  :=  1'b1;
    }
    else if(CP_Q3MUX_SEL == "SRQ")
    {
        SC_SREN[3]  :=  1'b1;
        SC_MDI[3]  :=  1'b0;
    }
    else
    {
        SC_SREN[3]  :=  1'b0;
        SC_MDI[3]  :=  1'b0;
        error("QMUX SEL(%s) is not support!",CP_Q3MUX_SEL);
    }

//initial config body11 end


//initial config body12 begin
    if (CP_QABMUX_SEL == "Y6")
    {
        SC_SREN_APP[0]  :=  1'b0;
        SC_MDI_APP[0]  :=  1'b0;
    }
    else if(CP_QABMUX_SEL == "PY")
    {
        SC_SREN_APP[0]  :=  1'b0;
        SC_MDI_APP[0]  :=  1'b1;
    }
    else if(CP_QABMUX_SEL == "SRQ")
    {
        SC_SREN_APP[0]  :=  1'b1;
        SC_MDI_APP[0]  :=  1'b0;
    }
    else
    {
        SC_SREN_APP[0]  :=  1'b0;
        SC_MDI_APP[0]  :=  1'b0;
        error("QABMUX SEL(%s) is not support!",CP_QABMUX_SEL);
    }

//initial config body12 end


//initial config body13 begin
    if (CP_QCDMUX_SEL == "Y6")
    {
        SC_SREN_APP[1]  :=  1'b0;
        SC_MDI_APP[1]  :=  1'b0;
    }
    else if(CP_QCDMUX_SEL == "PY")
    {
        SC_SREN_APP[1]  :=  1'b0;
        SC_MDI_APP[1]  :=  1'b1;
    }
    else if(CP_QCDMUX_SEL == "SRQ")
    {
        SC_SREN_APP[1]  :=  1'b1;
        SC_MDI_APP[1]  :=  1'b0;
    }
    else
    {
        SC_SREN_APP[0]  :=  1'b0;
        SC_MDI_APP[0]  :=  1'b0;
        error("QCDMUX SEL(%s) is not support!",CP_QCDMUX_SEL);
    }

//initial config body13 end


//initial config body14 begin
    if (CP_ABPMUX_SEL == "X0D")
    {
        SC_DDIS_APP[0]  :=  1'b0;
    }
    else if(CP_ABPMUX_SEL == "X1D")
    {
        SC_DDIS_APP[0]  :=  1'b1;
    }
    else
    {
        SC_DDIS_APP[0]  :=  1'b0;
        error("ABPMUX SEL(%s) is not support!",CP_ABPMUX_SEL);
    }

//initial config body14 end


//initial config body15 begin
    if (CP_CDPMUX_SEL == "X0D")
    {
        SC_DDIS_APP[1]  :=  1'b0;
    }
    else if(CP_CDPMUX_SEL == "X1D")
    {
        SC_DDIS_APP[1]  :=  1'b1;
    }
    else
    {
        SC_DDIS_APP[1]  :=  1'b0;
        error("CDPMUX SEL(%s) is not support!",CP_CDPMUX_SEL);
    }

//initial config body15 end


//initial config body16 begin
    if (CP_CEMUX_SEL == "LOCAL")
    {
        SC_CECHAIN  :=  1'b0;
    }
    else if(CP_CEMUX_SEL == "CHAIN")
    {
        SC_CECHAIN  :=  1'b1;
    }
    else
    {
        SC_CECHAIN  :=  1'b0;
        error("CEMUX SEL(%s) is not support!",CP_CEMUX_SEL);
    }

//initial config body16 end


//initial config body17 begin
    if (CP_RSMUX_SEL == "LOCAL")
    {
        SC_RSCHAIN  :=  1'b0;
    }
    else if(CP_RSMUX_SEL == "CHAIN")
    {
        SC_RSCHAIN  :=  1'b1;
    }
    else
    {
        SC_RSCHAIN  :=  1'b0;
        error("RSMUX SEL(%s) is not support!",CP_RSMUX_SEL);
    }

//initial config body17 end


//initial config body18 begin
    if (CP_CLK_POL == "FALSE")
    {
        SC_PICLK  :=  1'b0;
    }
    else if(CP_CLK_POL == "TRUE")
    {
        SC_PICLK  :=  1'b1;
    }
    else
    {
        SC_PICLK  :=  1'b0;
        error("CLK POL(%s) is not support!",CP_CLK_POL);
    }

//initial config body18 end


//initial config body19 begin
    if (CP_LCE_POL == "FALSE")
    {
        SC_PICE  :=  1'b0;
    }
    else if(CP_LCE_POL == "TRUE")
    {
        SC_PICE  :=  1'b1;
    }
    else
    {
        SC_PICE  :=  1'b0;
        error("LCE POL(%s) is not support!",CP_LCE_POL);
    }

//initial config body19 end


//initial config body20 begin
    if (CP_LRS_POL == "FALSE")
    {
        SC_PIRS  :=  1'b0;
    }
    else if(CP_LRS_POL == "TRUE")
    {
        SC_PIRS  :=  1'b1;
    }
    else
    {
        SC_PIRS  :=  1'b0;
        error("LRS POL(%s) is not support!",CP_LRS_POL);
    }

//initial config body20 end


//initial config body21 begin
    if (CP_LCE_EN == "FALSE")
    {
        SC_LCE_EN  :=  1'b0;
    }
    else if(CP_LCE_EN == "TRUE")
    {
        SC_LCE_EN  :=  1'b1;
    }
    else
    {
        SC_LCE_EN  :=  1'b0;
        error("LCE EN(%s) is not support!",CP_LCE_EN);
    }

//initial config body21 end


//initial config body22 begin
    if (CP_LRS_EN == "FALSE")
    {
        SC_LRS_EN  :=  1'b0;
    }
    else if(CP_LRS_EN == "TRUE")
    {
        SC_LRS_EN  :=  1'b1;
    }
    else
    {
        SC_LRS_EN  :=  1'b0;
        error("LRS EN(%s) is not support!",CP_LRS_EN);
    }

//initial config body22 end


//initial config body23 begin
    if (CP_RS_MODE == "SYNC")
    {
        SC_ASYNC  :=  1'b0;
    }
    else if(CP_RS_MODE == "ASYNC")
    {
        SC_ASYNC  :=  1'b1;
    }
    else
    {
        SC_ASYNC  :=  1'b0;
        error("RS MODE(%s) is not support!",CP_RS_MODE);
    }

//initial config body23 end


//initial config body24 begin
    if (CP_FF0_RS == "SET")
    {
        SC_RSS[0]  :=  1'b0;
    }
    else if(CP_FF0_RS == "RESET")
    {
        SC_RSS[0]  :=  1'b1;
    }
    else
    {
        SC_RSS[0]  :=  1'b0;
        error("FF0 RS(%s) is not support!",CP_FF0_RS);
    }

//initial config body24 end


//initial config body25 begin
    if (CP_FF1_RS == "SET")
    {
        SC_RSS[1]  :=  1'b0;
    }
    else if(CP_FF1_RS == "RESET")
    {
        SC_RSS[1]  :=  1'b1;
    }
    else
    {
        SC_RSS[1]  :=  1'b0;
        error("FF1 RS(%s) is not support!",CP_FF1_RS);
    }

//initial config body25 end


//initial config body26 begin
    if (CP_FF2_RS == "SET")
    {
        SC_RSS[2]  :=  1'b0;
    }
    else if(CP_FF2_RS == "RESET")
    {
        SC_RSS[2]  :=  1'b1;
    }
    else
    {
        SC_RSS[2]  :=  1'b0;
        error("FF2 RS(%s) is not support!",CP_FF2_RS);
    }

//initial config body26 end


//initial config body27 begin
    if (CP_FF3_RS == "SET")
    {
        SC_RSS[3]  :=  1'b0;
    }
    else if(CP_FF3_RS == "RESET")
    {
        SC_RSS[3]  :=  1'b1;
    }
    else
    {
        SC_RSS[3]  :=  1'b0;
        error("FF3 RS(%s) is not support!",CP_FF3_RS);
    }

//initial config body27 end


//initial config body28 begin
    if (CP_FFAB_RS == "SET")
    {
        SC_RSS_APP[0]  :=  1'b0;
    }
    else if(CP_FFAB_RS == "RESET")
    {
        SC_RSS_APP[0]  :=  1'b1;
    }
    else
    {
        SC_RSS_APP[0]  :=  1'b0;
        error("FFAB RS(%s) is not support!",CP_FFAB_RS);
    }

//initial config body28 end


//initial config body29 begin
    if (CP_FFCD_RS == "SET")
    {
        SC_RSS_APP[1]  :=  1'b0;
    }
    else if(CP_FFCD_RS == "RESET")
    {
        SC_RSS_APP[1]  :=  1'b1;
    }
    else
    {
        SC_RSS_APP[1]  :=  1'b0;
        error("FFCD RS(%s) is not support!",CP_FFCD_RS);
    }

//initial config body29 end


//initial config body30 begin
    if (CP_WCK_SEL == "LOCAL")
    {
        SC_RAM_WCK  :=  1'b0;
    }
    else if(CP_WCK_SEL == "CHAIN")
    {
        SC_RAM_WCK  :=  1'b1;
    }
    else
    {
        SC_RAM_WCK  :=  1'b0;
        error("WCK SEL(%s) is not support!",CP_WCK_SEL);
    }

//initial config body30 end


//initial config body31 begin
    if (CP_MASK == "FALSE")
    {
        SC_MASK  :=  1'b0;
    }
    else if(CP_MASK == "TRUE")
    {
        SC_MASK  :=  1'b1;
    }
    else
    {
        SC_MASK  :=  1'b0;
        error("RAM EN(%s) is not support!",CP_MASK);
    }

//initial config body31 end


//initial config body32 begin
    if (CP_GRS_EN == "FALSE")
    {
        SC_GRS_DIS  :=  1'b1;
    }
    else if(CP_GRS_EN == "TRUE")
    {
        SC_GRS_DIS  :=  1'b0;
    }
    else
    {
        SC_GRS_DIS  :=  1'b1;
        error("GRS_EN(%s) is not support!",CP_GRS_EN);
    }

//initial config body32 end

};

//grid device configure body end

