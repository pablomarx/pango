
use pg2l_defs, pg2l_schm_funcs, pg2l100h_defs;

schematic schm_view draw_logic_resource of device PG2L100H
{

    // Tile index variable
    unsigned int rx,tx, ty;
    int ty_tmp;
    int l_tx[];
    
    //draw srb
    foreach rx({[0:2]})
    {
        l_tx = (rx==0) ? L_SRB_TILES_X_R0 : (rx==1) ? L_SRB_TILES_X_R1 : L_SRB_TILES_X_R2;
        foreach tx ( l_tx )
        {
            foreach ty ( L_SRB_TILES_Y )
            {
                ty_tmp = rx * NUM_TILES_REGION + ty;
                draw_srb_tile ( tx, ty_tmp );
            } 
        }
    }
    
    foreach tx ( L_SRB_TILES_X_R3_U )
    {
        foreach ty ( {[26:50]} )
        {
            rx = 3;
            ty_tmp = rx * NUM_TILES_REGION + ty;
            draw_srb_tile ( tx, ty_tmp );
        } 
    }
    
    foreach tx ( L_SRB_TILES_X_R3_D )
    {
        foreach ty ( {[0:24]} )
        {
            rx = 3;
            ty_tmp = rx * NUM_TILES_REGION + ty;
            draw_srb_tile ( tx, ty_tmp );
        } 
    }
    
    //draw clm
    foreach rx({[0:2]})
    {
        l_tx = (rx==0) ? L_CLMS_TILES_X_R0 : (rx==1) ? L_CLMS_TILES_X_R1 : L_CLMS_TILES_X_R2;
        foreach tx ( l_tx )
        {
            foreach ty ( L_CLM_TILES_Y )
            {
                ty_tmp = rx * NUM_TILES_REGION + ty;
                draw_clm_tile ( tx, ty_tmp,1);
            } 
        }
    }
    
    foreach tx ( L_CLMS_TILES_X_R3_U )
    {
        foreach ty ( {[26:50]} )
        {
            rx = 3;
            ty_tmp = rx * NUM_TILES_REGION + ty;
            draw_clm_tile ( tx, ty_tmp,1);
        } 
    }
    
    foreach tx ( L_CLMS_TILES_X_R3_D )
    {
        foreach ty ( {[0:24]} )
        {
            rx = 3;
            ty_tmp = rx * NUM_TILES_REGION + ty;
            draw_clm_tile ( tx, ty_tmp,1);
        } 
    }
    
    foreach rx({[0:2]})
    {
        l_tx = (rx==0) ? L_CLMA_TILES_X_R0 : (rx==1) ? L_CLMA_TILES_X_R1 : L_CLMA_TILES_X_R2;
        foreach tx ( l_tx )
        {
            foreach ty ( L_CLM_TILES_Y )
            {
                ty_tmp = rx * NUM_TILES_REGION + ty;
                draw_clm_tile ( tx, ty_tmp,0);
            } 
        }
    }
    
    foreach tx ( L_CLMA_TILES_X_R3_U )
    {
        foreach ty ( {[26:50]} )
        {
            rx = 3;
            ty_tmp = rx * NUM_TILES_REGION + ty;
            draw_clm_tile ( tx, ty_tmp,0);
        } 
    }
    
    foreach tx ( L_CLMA_TILES_X_R3_D )
    {
        foreach ty ( {[0:24]} )
        {
            rx = 3;
            ty_tmp = rx * NUM_TILES_REGION + ty;
            draw_clm_tile ( tx, ty_tmp,0);
        } 
    }
    draw_adc_tile(ADC_TILE_X,ADC_TILE_Y);
    
    //draw drm
    foreach rx( {[0:3]} )
    {
        foreach ty ( L_DRM_TILES_Y )
        {
            l_tx = (rx==0) ? L_DRM_TILES_X_R0 : 
                   (rx==1) ? L_DRM_TILES_X_R1 : 
                   (rx==2) ? L_DRM_TILES_X_R2 : 
                   (ty<25) ? L_DRM_TILES_X_R3_D : L_DRM_TILES_X_R3_U;
            foreach tx ( l_tx )
            {             
                int ty_tmp = rx * NUM_TILES_REGION + ty;
                draw_drm_tile( tx, ty_tmp);
            }
        } 
    }

    //draw iock
    foreach rx( {[0:3]} )
    {
        foreach ty ( L_IOCK_TILES_Y )
        {
            l_tx = ((rx==0)||(rx==3)) ? L_IOCK_TILES_X_R0 : L_IOCK_TILES_X_R1;
            foreach tx ( l_tx )
            {             
                int ty_tmp = rx * NUM_TILES_REGION + ty;
                draw_iock_tile( tx, ty_tmp);
            }
        } 
    }
    
    //draw apm
    foreach rx( {[0:3]} )
    {
        foreach tx ( L_APM_TILES_X )
        {
            foreach ty ( L_APM_TILES_Y )
            {
                int ty_tmp = rx * NUM_TILES_REGION + ty;
                draw_apm_tile( tx, ty_tmp);
            }
        } 
    }
    
    foreach tx ( {HSST_TILE_X} )
    {
        foreach ty ( {HSST_TILE0_Y,HSST_TILE1_Y} )
        {
            draw_hsst_tile( tx, ty);
        }
    }
    
    draw_pcie_tile( PCIE_TILE_X, PCIE_TILE_Y);
    
    foreach rx( {[0:3]} )
    {
      l_tx = ((rx==1)||(rx==2)) ? L_PLL_TILES_X_R1 : L_PLL_TILES_X_R0;
      foreach tx ( l_tx )
      {
          foreach ty ( {GPLL_TILE_Y} )
          {
              int ty_tmp = rx * NUM_TILES_REGION + ty;
              draw_pll_tile( tx, ty_tmp,0);
          }
      } 
    }

    foreach rx( {[0:3]} )
    {
      l_tx = ((rx==1)||(rx==2)) ? L_PLL_TILES_X_R1 : L_PLL_TILES_X_R0;
      foreach tx ( l_tx )
      {
          foreach ty ( {PPLL_TILE_Y} )
          {
              int ty_tmp = rx * NUM_TILES_REGION + ty;
              draw_pll_tile( tx, ty_tmp,1);
          }
      } 
    }
    draw_uscm_tile( USCM_TILE_X, USCM_TILE_Y);
    
    draw_pregmuxc_tile( PREGMUXC_TILE_X, PREGMUXC_TILE0_Y);
    draw_pregmuxc_tile( PREGMUXC_TILE_X, PREGMUXC_TILE1_Y);
    
    foreach rx( {[0:3]} )
    {
        l_tx = ((rx==1)||(rx==2)) ? L_IOL_TILES_X : {2};
        foreach tx ( l_tx )
        {
            foreach ty ( L_IOL_TILES_Y )
            {
                int ty_tmp = rx * NUM_TILES_REGION + ty;
                draw_iol_tile( tx, ty_tmp);
            }
        } 
    }
    
    foreach rx( {[0:3]} )
    {
        l_tx = ((rx==0)||(rx==3)) ? L_IOB_TILES_X_R0 : L_IOB_TILES_X_R1;
        foreach tx ( l_tx )
        {
            ty = rx * NUM_TILES_REGION;
            draw_iob_tile( tx, ty);   
        } 
    }
    
    
    foreach rx( {[0:3]} )
    {
        l_tx = ((rx==0)||(rx==3)) ? L_CKEB_TILES_X_R0 : L_CKEB_TILES_X_R1;
        foreach tx ( l_tx )
        {
            foreach ty ( L_CKEB_TILES_Y )
            {
                int ty_tmp = rx * NUM_TILES_REGION + ty;
                draw_ckeb_tile( tx, ty_tmp);
            }
        } 
    }

    foreach rx( {[0:3]} )
    {
        foreach tx ( L_CKEB2_TILES_X )
        {
            foreach ty ( L_CKEB_TILES_Y )
            {
                int ty_tmp = rx * NUM_TILES_REGION + ty;
                draw_ckeb2_tile( tx, ty_tmp);
            }
        } 
    }
    
    draw_ccs_tile( CCS_TILE_X , CCS_TILE_Y);
    

    
};