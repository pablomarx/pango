tarted
grid
device SFB
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config bit CP_TEST_LUT[33:0] = 34'h000000000
    );
    port
    (
// configuration_body_def_on


    config input SC_TEST_LUT[33:0] = 34'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TEST_LUT[33],SC_TEST_LUT[32],SC_TEST_LUT[31],SC_TEST_LUT[30],SC_TEST_LUT[29],SC_TEST_LUT[28],SC_TEST_LUT[27],SC_TEST_LUT[26],SC_TEST_LUT[25],SC_TEST_LUT[24],SC_TEST_LUT[23],SC_TEST_LUT[22],SC_TEST_LUT[21],SC_TEST_LUT[20],SC_TEST_LUT[19],SC_TEST_LUT[18],SC_TEST_LUT[17],SC_TEST_LUT[16],SC_TEST_LUT[15],SC_TEST_LUT[14],SC_TEST_LUT[13],SC_TEST_LUT[12],SC_TEST_LUT[11],SC_TEST_LUT[10],SC_TEST_LUT[9],SC_TEST_LUT[8],SC_TEST_LUT[7],SC_TEST_LUT[6],SC_TEST_LUT[5],SC_TEST_LUT[4],SC_TEST_LUT[3],SC_TEST_LUT[2],SC_TEST_LUT[1],SC_TEST_LUT[0]" */,

// configuration_body_def_end

        input A_A0 = 1'b1,
        input A_A1 = 1'b1,
        input A_A2 = 1'b1,
        input A_A3 = 1'b1,
        input A_A4 = 1'b1,
        input A_A5 = 1'b1,
        input A_B0 = 1'b1,
        input A_B1 = 1'b1,
        input A_B2 = 1'b1,
        input A_B3 = 1'b1,
        input A_B4 = 1'b1,
        input A_B5 = 1'b1,
        input A_C0 = 1'b1,
        input A_C1 = 1'b1,
        input A_C2 = 1'b1,
        input A_C3 = 1'b1,
        input A_C4 = 1'b1,
        input A_C5 = 1'b1,
        input A_D0 = 1'b1,
        input A_D1 = 1'b1,
        input A_D2 = 1'b1,
        input A_D3 = 1'b1,
        input A_D4 = 1'b1,
        input A_D5 = 1'b1,
        input S_A0 = 1'b1,
        input S_A1 = 1'b1,
        input S_A2 = 1'b1,
        input S_A3 = 1'b1,
        input S_A4 = 1'b1,
        input S_A5 = 1'b1,
        input S_B0 = 1'b1,
        input S_B1 = 1'b1,
        input S_B2 = 1'b1,
        input S_B3 = 1'b1,
        input S_B4 = 1'b1,
        input S_B5 = 1'b1,
        input S_C0 = 1'b1,
        input S_C1 = 1'b1,
        input S_C2 = 1'b1,
        input S_C3 = 1'b1,
        input S_C4 = 1'b1,
        input S_C5 = 1'b1,
        input S_D0 = 1'b1,
        input S_D1 = 1'b1,
        input S_D2 = 1'b1,
        input S_D3 = 1'b1,
        input S_D4 = 1'b1,
        input S_D5 = 1'b1,
        input A_CLK = 1'b1,
        input S_CLK = 1'b1,
        input A_RS = 1'b1,
        input S_RS = 1'b1,
        input A_CE = 1'b1,
        input S_CE = 1'b1,
        input S_AD = 1'b1,
        input S_BD = 1'b1,
        input S_CD = 1'b1,
        input S_DD = 1'b1,
        input S_WE = 1'b1,
        input A_M0 = 1'b1,
        input A_M1 = 1'b1,
        input A_M2 = 1'b1,
        input A_M3 = 1'b1,
        input S_M0 = 1'b1,
        input S_M1 = 1'b1,
        input S_M2 = 1'b1,
        input S_M3 = 1'b1,
        output SFB_DATA[23:0]
    );
};
//grid device end

//grid device structure netlist started

structure netlist of SFB
{
    routing
    {
        ( A_A0 --> SFB_DATA[10] ) = 150;
        ( A_A1 --> SFB_DATA[10] ) = 150;
        ( A_A2 --> SFB_DATA[9] ) = 150;
        ( A_A3 --> SFB_DATA[0] ) = 150;
        ( A_A4 --> SFB_DATA[22] ) = 150;
        ( A_A5 --> SFB_DATA[13] ) = 150;
        ( A_B0 --> SFB_DATA[2] ) = 150;
        ( A_B1 --> SFB_DATA[7] ) = 150;
        ( A_B2 --> SFB_DATA[6] ) = 150;
        ( A_B3 --> SFB_DATA[1] ) = 150;
        ( A_B4 --> SFB_DATA[4] ) = 150;
        ( A_B5 --> SFB_DATA[14] ) = 150;
        ( A_C0 --> SFB_DATA[23] ) = 150;
        ( A_C1 --> SFB_DATA[23] ) = 150;
        ( A_C2 --> SFB_DATA[17] ) = 150;
        ( A_C3 --> SFB_DATA[17] ) = 150;
        ( A_C4 --> SFB_DATA[9] ) = 150;
        ( A_C5 --> SFB_DATA[20] ) = 150;
        ( A_CE --> SFB_DATA[14] ) = 150;
        ( A_CLK --> SFB_DATA[7] ) = 150;
        ( A_D0 --> SFB_DATA[15] ) = 150;
        ( A_D1 --> SFB_DATA[15] ) = 150;
        ( A_D2 --> SFB_DATA[18] ) = 150;
        ( A_D3 --> SFB_DATA[18] ) = 150;
        ( A_D4 --> SFB_DATA[12] ) = 150;
        ( A_D5 --> SFB_DATA[21] ) = 150;
        ( A_M0 --> SFB_DATA[6] ) = 150;
        ( A_M1 --> SFB_DATA[20] ) = 150;
        ( A_M2 --> SFB_DATA[18] ) = 150;
        ( A_M3 --> SFB_DATA[13] ) = 150;
        ( A_RS --> SFB_DATA[3] ) = 150;
        ( S_A0 --> SFB_DATA[16] ) = 150;
        ( S_A1 --> SFB_DATA[16] ) = 150;
        ( S_A2 --> SFB_DATA[19] ) = 150;
        ( S_A3 --> SFB_DATA[19] ) = 150;
        ( S_A4 --> SFB_DATA[13] ) = 150;
        ( S_A5 --> SFB_DATA[22] ) = 150;
        ( S_AD --> SFB_DATA[9] ) = 150;
        ( S_B0 --> SFB_DATA[13] ) = 150;
        ( S_B1 --> SFB_DATA[22] ) = 150;
        ( S_B2 --> SFB_DATA[6] ) = 150;
        ( S_B3 --> SFB_DATA[1] ) = 150;
        ( S_B4 --> SFB_DATA[11] ) = 150;
        ( S_B5 --> SFB_DATA[11] ) = 150;
        ( S_BD --> SFB_DATA[12] ) = 150;
        ( S_C0 --> SFB_DATA[8] ) = 150;
        ( S_C1 --> SFB_DATA[8] ) = 150;
        ( S_C2 --> SFB_DATA[11] ) = 150;
        ( S_C3 --> SFB_DATA[17] ) = 150;
        ( S_C4 --> SFB_DATA[0] ) = 150;
        ( S_C5 --> SFB_DATA[20] ) = 150;
        ( S_CD --> SFB_DATA[21] ) = 150;
        ( S_CE --> SFB_DATA[17] ) = 150;
        ( S_CLK --> SFB_DATA[2] ) = 150;
        ( S_D0 --> SFB_DATA[5] ) = 150;
        ( S_D1 --> SFB_DATA[5] ) = 150;
        ( S_D2 --> SFB_DATA[3] ) = 150;
        ( S_D3 --> SFB_DATA[3] ) = 150;
        ( S_D4 --> SFB_DATA[1] ) = 150;
        ( S_D5 --> SFB_DATA[6] ) = 150;
        ( S_DD --> SFB_DATA[20] ) = 150;
        ( S_M0 --> SFB_DATA[9] ) = 150;
        ( S_M1 --> SFB_DATA[18] ) = 150;
        ( S_M2 --> SFB_DATA[22] ) = 150;
        ( S_M3 --> SFB_DATA[1] ) = 150;
        ( S_RS --> SFB_DATA[4] ) = 150;
        ( S_WE --> SFB_DATA[3] ) = 150;

    }
};
//grid device structure netlist end
//grid device configure body started

configuration cfg of SFB
{

 // assign config body begin
    SC_TEST_LUT := CP_TEST_LUT;
// assign config body end
    if ( S_C4 --> SFB_DATA[0] )
    {
        SC_TEST_LUT[26] := 1'b0;
    }

    if ( A_A3 --> SFB_DATA[0] )
    {
        SC_TEST_LUT[26] := 1'b1;
    }

    if ( S_M3 --> SFB_DATA[1] )
    {
        SC_TEST_LUT[3] := 1'b0;
        SC_TEST_LUT[2] := 1'b0;
    }

    if ( S_D4 --> SFB_DATA[1] )
    {
        SC_TEST_LUT[3] := 1'b0;
        SC_TEST_LUT[2] := 1'b1;
    }

    if ( A_B3 --> SFB_DATA[1] )
    {
        SC_TEST_LUT[3] := 1'b1;
        SC_TEST_LUT[2] := 1'b0;
    }

    if ( S_B3 --> SFB_DATA[1] )
    {
        SC_TEST_LUT[3] := 1'b1;
        SC_TEST_LUT[2] := 1'b1;
    }

    if ( A_B0 --> SFB_DATA[2] )
    {
        SC_TEST_LUT[12] := 1'b0;
    }

    if ( S_CLK --> SFB_DATA[2] )
    {
        SC_TEST_LUT[12] := 1'b1;
    }

    if ( A_RS --> SFB_DATA[3] )
    {
        SC_TEST_LUT[23] := 1'b0;
        SC_TEST_LUT[22] := 1'b0;
    }

    if ( S_D2 --> SFB_DATA[3] )
    {
        SC_TEST_LUT[23] := 1'b0;
        SC_TEST_LUT[22] := 1'b1;
    }

    if ( S_WE --> SFB_DATA[3] )
    {
        SC_TEST_LUT[23] := 1'b1;
        SC_TEST_LUT[22] := 1'b0;
    }

    if ( S_D3 --> SFB_DATA[3] )
    {
        SC_TEST_LUT[23] := 1'b1;
        SC_TEST_LUT[22] := 1'b1;
    }

    if ( S_RS --> SFB_DATA[4] )
    {
        SC_TEST_LUT[19] := 1'b0;
    }

    if ( A_B4 --> SFB_DATA[4] )
    {
        SC_TEST_LUT[19] := 1'b1;
    }

    if ( S_D1 --> SFB_DATA[5] )
    {
        SC_TEST_LUT[33] := 1'b0;
    }

    if ( S_D0 --> SFB_DATA[5] )
    {
        SC_TEST_LUT[33] := 1'b1;
    }

    if ( A_M0 --> SFB_DATA[6] )
    {
        SC_TEST_LUT[5] := 1'b0;
        SC_TEST_LUT[4] := 1'b0;
    }

    if ( S_D5 --> SFB_DATA[6] )
    {
        SC_TEST_LUT[5] := 1'b0;
        SC_TEST_LUT[4] := 1'b1;
    }

    if ( A_B2 --> SFB_DATA[6] )
    {
        SC_TEST_LUT[5] := 1'b1;
        SC_TEST_LUT[4] := 1'b0;
    }

    if ( S_B2 --> SFB_DATA[6] )
    {
        SC_TEST_LUT[5] := 1'b1;
        SC_TEST_LUT[4] := 1'b1;
    }

    if ( A_B1 --> SFB_DATA[7] )
    {
        SC_TEST_LUT[13] := 1'b0;
    }

    if ( A_CLK --> SFB_DATA[7] )
    {
        SC_TEST_LUT[13] := 1'b1;
    }

    if ( S_C0 --> SFB_DATA[8] )
    {
        SC_TEST_LUT[21] := 1'b0;
    }

    if ( S_C1 --> SFB_DATA[8] )
    {
        SC_TEST_LUT[21] := 1'b1;
    }

    if ( S_AD --> SFB_DATA[9] )
    {
        SC_TEST_LUT[31] := 1'b0;
        SC_TEST_LUT[30] := 1'b0;
    }

    if ( A_A2 --> SFB_DATA[9] )
    {
        SC_TEST_LUT[31] := 1'b0;
        SC_TEST_LUT[30] := 1'b1;
    }

    if ( S_M0 --> SFB_DATA[9] )
    {
        SC_TEST_LUT[31] := 1'b1;
        SC_TEST_LUT[30] := 1'b0;
    }

    if ( A_C4 --> SFB_DATA[9] )
    {
        SC_TEST_LUT[31] := 1'b1;
        SC_TEST_LUT[30] := 1'b1;
    }

    if ( A_A1 --> SFB_DATA[10] )
    {
        SC_TEST_LUT[1] := 1'b0;
    }

    if ( A_A0 --> SFB_DATA[10] )
    {
        SC_TEST_LUT[1] := 1'b1;
    }

    if ( S_B5 --> SFB_DATA[11] )
    {
        SC_TEST_LUT[17] := 1'b0;
        SC_TEST_LUT[16] := 1'b0;
    }

    if ( S_B4 --> SFB_DATA[11] )
    {
        SC_TEST_LUT[17] := 1'b0;
        SC_TEST_LUT[16] := 1'b1;
    }


    if ( S_C2 --> SFB_DATA[11] )
    {
        SC_TEST_LUT[17] := 1'b1;
        SC_TEST_LUT[16] := 1'b1;
    }

    if ( A_D4 --> SFB_DATA[12] )
    {
        SC_TEST_LUT[7] := 1'b0;
    }

    if ( S_BD --> SFB_DATA[12] )
    {
        SC_TEST_LUT[7] := 1'b1;
    }

    if ( S_B0 --> SFB_DATA[13] )
    {
        SC_TEST_LUT[11] := 1'b0;
        SC_TEST_LUT[10] := 1'b0;
    }

    if ( A_A5 --> SFB_DATA[13] )
    {
        SC_TEST_LUT[11] := 1'b0;
        SC_TEST_LUT[10] := 1'b1;
    }

    if ( A_M3 --> SFB_DATA[13] )
    {
        SC_TEST_LUT[11] := 1'b1;
        SC_TEST_LUT[10] := 1'b0;
    }

    if ( S_A4 --> SFB_DATA[13] )
    {
        SC_TEST_LUT[11] := 1'b1;
        SC_TEST_LUT[10] := 1'b1;
    }

    if ( A_CE --> SFB_DATA[14] )
    {
        SC_TEST_LUT[18] := 1'b0;
    }

    if ( A_B5 --> SFB_DATA[14] )
    {
        SC_TEST_LUT[18] := 1'b1;
    }

    if ( A_D0 --> SFB_DATA[15] )
    {
        SC_TEST_LUT[32] := 1'b0;
    }

    if ( A_D1 --> SFB_DATA[15] )
    {
        SC_TEST_LUT[32] := 1'b1;
    }

    if ( S_A1 --> SFB_DATA[16] )
    {
        SC_TEST_LUT[0] := 1'b0;
    }

    if ( S_A0 --> SFB_DATA[16] )
    {
        SC_TEST_LUT[0] := 1'b1;
    }

    if ( A_C3 --> SFB_DATA[17] )
    {
        SC_TEST_LUT[15] := 1'b0;
        SC_TEST_LUT[14] := 1'b0;
    }

    if ( A_C2 --> SFB_DATA[17] )
    {
        SC_TEST_LUT[15] := 1'b0;
        SC_TEST_LUT[14] := 1'b1;
    }

    if ( S_CE --> SFB_DATA[17] )
    {
        SC_TEST_LUT[15] := 1'b1;
        SC_TEST_LUT[14] := 1'b0;
    }

    if ( S_C3 --> SFB_DATA[17] )
    {
        SC_TEST_LUT[15] := 1'b1;
        SC_TEST_LUT[14] := 1'b1;
    }

    if ( A_M2 --> SFB_DATA[18] )
    {
        SC_TEST_LUT[25] := 1'b0;
        SC_TEST_LUT[24] := 1'b0;
    }

    if ( A_D2 --> SFB_DATA[18] )
    {
        SC_TEST_LUT[25] := 1'b0;
        SC_TEST_LUT[24] := 1'b1;
    }

    if ( A_D3 --> SFB_DATA[18] )
    {
        SC_TEST_LUT[25] := 1'b1;
        SC_TEST_LUT[24] := 1'b0;
    }

    if ( S_M1 --> SFB_DATA[18] )
    {
        SC_TEST_LUT[25] := 1'b1;
        SC_TEST_LUT[24] := 1'b1;
    }

    if ( S_A2 --> SFB_DATA[19] )
    {
        SC_TEST_LUT[27] := 1'b0;
    }

    if ( S_A3 --> SFB_DATA[19] )
    {
        SC_TEST_LUT[27] := 1'b1;
    }

    if ( S_C5 --> SFB_DATA[20] )
    {
        SC_TEST_LUT[29] := 1'b0;
        SC_TEST_LUT[28] := 1'b0;
    }

    if ( S_DD --> SFB_DATA[20] )
    {
        SC_TEST_LUT[29] := 1'b0;
        SC_TEST_LUT[28] := 1'b1;
    }

    if ( A_M1 --> SFB_DATA[20] )
    {
        SC_TEST_LUT[29] := 1'b1;
        SC_TEST_LUT[28] := 1'b0;
    }

    if ( A_C5 --> SFB_DATA[20] )
    {
        SC_TEST_LUT[29] := 1'b1;
        SC_TEST_LUT[28] := 1'b1;
    }

    if ( A_D5 --> SFB_DATA[21] )
    {
        SC_TEST_LUT[6] := 1'b0;
    }

    if ( S_CD --> SFB_DATA[21] )
    {
        SC_TEST_LUT[6] := 1'b1;
    }

    if ( A_A4 --> SFB_DATA[22] )
    {
        SC_TEST_LUT[9] := 1'b0;
        SC_TEST_LUT[8] := 1'b0;
    }

    if ( S_B1 --> SFB_DATA[22] )
    {
        SC_TEST_LUT[9] := 1'b0;
        SC_TEST_LUT[8] := 1'b1;
    }

    if ( S_M2 --> SFB_DATA[22] )
    {
        SC_TEST_LUT[9] := 1'b1;
        SC_TEST_LUT[8] := 1'b0;
    }

    if ( S_A5 --> SFB_DATA[22] )
    {
        SC_TEST_LUT[9] := 1'b1;
        SC_TEST_LUT[8] := 1'b1;
    }

    if ( A_C1 --> SFB_DATA[23] )
    {
        SC_TEST_LUT[20] := 1'b0;
    }

    if ( A_C0 --> SFB_DATA[23] )
    {
        SC_TEST_LUT[20] := 1'b1;
    }

};

//grid device configure body end

//timing sfb_tnl of SFB
//{
//    //SFB_DATA[0]  <= (CP_TEST_LUT[26]    == 1'b0)  ? S_C4  :
//    //                (CP_TEST_LUT[26]    == 1'b1)  ? A_A3  : 1'bz;
//    //SFB_DATA[1]  <= (CP_TEST_LUT[3:2]   == 2'b00) ? S_M3  :
//    //                (CP_TEST_LUT[3:2]   == 2'b01) ? S_D4  :
//    //                (CP_TEST_LUT[3:2]   == 2'b10) ? A_B3  :
//    //                (CP_TEST_LUT[3:2]   == 2'b11) ? S_B3  : 1'bz;
//    //SFB_DATA[2]  <= (CP_TEST_LUT[12]    == 1'b0)  ? A_B0  :
//    //                (CP_TEST_LUT[12]    == 1'b1)  ? S_CLK : 1'bz;
//    //SFB_DATA[3]  <= (CP_TEST_LUT[23:22] == 2'b00) ? A_RS  :
//    //                (CP_TEST_LUT[23:22] == 2'b01) ? S_D2  :
//    //                (CP_TEST_LUT[23:22] == 2'b10) ? S_WE  :
//    //                (CP_TEST_LUT[23:22] == 2'b11) ? S_D3  : 1'bz;
//    //SFB_DATA[4]  <= (CP_TEST_LUT[19]    == 1'b0)  ? S_RS  :
//    //                (CP_TEST_LUT[19]    == 1'b1)  ? A_B4  : 1'bz;
//    //SFB_DATA[5]  <= (CP_TEST_LUT[33]    == 1'b0)  ? S_D1  :
//    //                (CP_TEST_LUT[33]    == 1'b1)  ? S_D0  : 1'bz;
//    //SFB_DATA[6]  <= (CP_TEST_LUT[5:4]   == 2'b00) ? A_M0  :
//    //                (CP_TEST_LUT[5:4]   == 2'b01) ? S_D5  :
//    //                (CP_TEST_LUT[5:4]   == 2'b10) ? A_B2  :
//    //                (CP_TEST_LUT[5:4]   == 2'b11) ? S_B2  : 1'bz;
//    //SFB_DATA[7]  <= (CP_TEST_LUT[13]    == 1'b0)  ? A_B1  :
//    //                (CP_TEST_LUT[13]    == 1'b1)  ? A_CLK : 1'bz;
//    //SFB_DATA[8]  <= (CP_TEST_LUT[21]    == 1'b0)  ? S_C0  :
//    //                (CP_TEST_LUT[21]    == 1'b1)  ? S_C1  : 1'bz;
//    //SFB_DATA[9]  <= (CP_TEST_LUT[31:30] == 2'b00) ? S_AD  :
//    //                (CP_TEST_LUT[31:30] == 2'b01) ? A_A2  :
//    //                (CP_TEST_LUT[31:30] == 2'b10) ? S_M0  :
//    //                (CP_TEST_LUT[31:30] == 2'b11) ? A_C4  : 1'bz;
//    //SFB_DATA[10] <= (CP_TEST_LUT[1]     == 1'b0)  ? A_A1  :
//    //                (CP_TEST_LUT[1]     == 1'b1)  ? A_A0  : 1'bz;
//    //SFB_DATA[11] <= (CP_TEST_LUT[17:16] == 2'b00) ? S_B5  :
//    //                (CP_TEST_LUT[17:16] == 2'b01) ? S_B4  :
//    //                (CP_TEST_LUT[17:16] == 2'b10) ? 1'b1  :
//    //                (CP_TEST_LUT[17:16] == 2'b11) ? S_C2  : 1'bz;
//    //SFB_DATA[12] <= (CP_TEST_LUT[7]     == 1'b0)  ? A_D4  :
//    //                (CP_TEST_LUT[7]     == 1'b1)  ? S_BD  : 1'bz;
//    //SFB_DATA[13] <= (CP_TEST_LUT[11:10] == 2'b00) ? S_B0  :
//    //                (CP_TEST_LUT[11:10] == 2'b01) ? A_A5  :
//    //                (CP_TEST_LUT[11:10] == 2'b10) ? A_M3  :
//    //                (CP_TEST_LUT[11:10] == 2'b11) ? S_A4  : 1'bz;
//    //SFB_DATA[14] <= (CP_TEST_LUT[18]    == 1'b0)  ? A_CE  :
//    //                (CP_TEST_LUT[18]    == 1'b1)  ? A_B5  : 1'bz;
//    //SFB_DATA[15] <= (CP_TEST_LUT[32]    == 1'b0)  ? A_D0  :
//    //                (CP_TEST_LUT[32]    == 1'b1)  ? A_D1  : 1'bz;
//    //SFB_DATA[16] <= (CP_TEST_LUT[0]     == 1'b0)  ? S_A1  :
//    //                (CP_TEST_LUT[0]     == 1'b1)  ? S_A0  : 1'bz;
//    //SFB_DATA[17] <= (CP_TEST_LUT[15:14] == 2'b00) ? A_C3  :
//    //                (CP_TEST_LUT[15:14] == 2'b01) ? A_C2  :
//    //                (CP_TEST_LUT[15:14] == 2'b10) ? S_CE  :
//    //                (CP_TEST_LUT[15:14] == 2'b11) ? S_C3  : 1'bz;
//    //SFB_DATA[18] <= (CP_TEST_LUT[25:24] == 2'b00) ? A_M2  :
//    //                (CP_TEST_LUT[25:24] == 2'b01) ? A_D2  :
//    //                (CP_TEST_LUT[25:24] == 2'b10) ? A_D3  :
//    //                (CP_TEST_LUT[25:24] == 2'b11) ? S_M1  : 1'bz;
//    //SFB_DATA[19] <= (CP_TEST_LUT[27]    == 1'b0)  ? S_A2  :
//    //                (CP_TEST_LUT[27]    == 1'b1)  ? S_A3  : 1'bz;
//    //SFB_DATA[20] <= (CP_TEST_LUT[29:28] == 2'b00) ? S_C5  :
//    //                (CP_TEST_LUT[29:28] == 2'b01) ? S_DD  :
//    //                (CP_TEST_LUT[29:28] == 2'b10) ? A_M1  :
//    //                (CP_TEST_LUT[29:28] == 2'b11) ? A_C5  : 1'bz;
//    //SFB_DATA[21] <= (CP_TEST_LUT[6]     == 1'b0)  ? A_D5  :
//    //                (CP_TEST_LUT[6]     == 1'b1)  ? S_CD  : 1'bz;
//    //SFB_DATA[22] <= (CP_TEST_LUT[9:8]   == 2'b00) ? A_A4  :
//    //                (CP_TEST_LUT[9:8]   == 2'b01) ? S_B1  :
//    //                (CP_TEST_LUT[9:8]   == 2'b10) ? S_M2  :
//    //                (CP_TEST_LUT[9:8]   == 2'b11) ? S_A5  : 1'bz;
//    //SFB_DATA[23] <= (CP_TEST_LUT[20]    == 1'b0)  ? A_C1  :
//    //                (CP_TEST_LUT[20]    == 1'b1)  ? A_C0  : 1'bz;
//
//    operator V_BUF SFB_DATA_0  port map (Z => SFB_DATA[0],  I => (CP_TEST_LUT[26]    == 1'b0)  ? S_C4  :
//                                                                 (CP_TEST_LUT[26]    == 1'b1)  ? A_A3  : 1'bz);
//    operator V_BUF SFB_DATA_1  port map (Z => SFB_DATA[1],  I => (CP_TEST_LUT[3:2]   == 2'b00) ? S_M3  :
//                                                                 (CP_TEST_LUT[3:2]   == 2'b01) ? S_D4  :
//                                                                 (CP_TEST_LUT[3:2]   == 2'b10) ? A_B3  :
//                                                                 (CP_TEST_LUT[3:2]   == 2'b11) ? S_B3  : 1'bz);
//    operator V_BUF SFB_DATA_2  port map (Z => SFB_DATA[2],  I => (CP_TEST_LUT[12]    == 1'b0)  ? A_B0  :
//                                                                 (CP_TEST_LUT[12]    == 1'b1)  ? S_CLK : 1'bz);
//    operator V_BUF SFB_DATA_3  port map (Z => SFB_DATA[3],  I => (CP_TEST_LUT[23:22] == 2'b00) ? A_RS  :
//                                                                 (CP_TEST_LUT[23:22] == 2'b01) ? S_D2  :
//                                                                 (CP_TEST_LUT[23:22] == 2'b10) ? S_WE  :
//                                                                 (CP_TEST_LUT[23:22] == 2'b11) ? S_D3  : 1'bz);
//    operator V_BUF SFB_DATA_4  port map (Z => SFB_DATA[4],  I => (CP_TEST_LUT[19]    == 1'b0)  ? S_RS  :
//                                                                 (CP_TEST_LUT[19]    == 1'b1)  ? A_B4  : 1'bz);
//    operator V_BUF SFB_DATA_5  port map (Z => SFB_DATA[5],  I => (CP_TEST_LUT[33]    == 1'b0)  ? S_D1  :
//                                                                 (CP_TEST_LUT[33]    == 1'b1)  ? S_D0  : 1'bz);
//    operator V_BUF SFB_DATA_6  port map (Z => SFB_DATA[6],  I => (CP_TEST_LUT[5:4]   == 2'b00) ? A_M0  :
//                                                                 (CP_TEST_LUT[5:4]   == 2'b01) ? S_D5  :
//                                                                 (CP_TEST_LUT[5:4]   == 2'b10) ? A_B2  :
//                                                                 (CP_TEST_LUT[5:4]   == 2'b11) ? S_B2  : 1'bz);
//    operator V_BUF SFB_DATA_7  port map (Z => SFB_DATA[7],  I => (CP_TEST_LUT[13]    == 1'b0)  ? A_B1  :
//                                                                 (CP_TEST_LUT[13]    == 1'b1)  ? A_CLK : 1'bz);
//    operator V_BUF SFB_DATA_8  port map (Z => SFB_DATA[8],  I => (CP_TEST_LUT[21]    == 1'b0)  ? S_C0  :
//                                                                 (CP_TEST_LUT[21]    == 1'b1)  ? S_C1  : 1'bz);
//    operator V_BUF SFB_DATA_9  port map (Z => SFB_DATA[9],  I => (CP_TEST_LUT[31:30] == 2'b00) ? S_AD  :
//                                                                 (CP_TEST_LUT[31:30] == 2'b01) ? A_A2  :
//                                                                 (CP_TEST_LUT[31:30] == 2'b10) ? S_M0  :
//                                                                 (CP_TEST_LUT[31:30] == 2'b11) ? A_C4  : 1'bz);
//    operator V_BUF SFB_DATA_10 port map (Z => SFB_DATA[10], I => (CP_TEST_LUT[1]     == 1'b0)  ? A_A1  :
//                                                                 (CP_TEST_LUT[1]     == 1'b1)  ? A_A0  : 1'bz);
//    operator V_BUF SFB_DATA_11 port map (Z => SFB_DATA[11], I => (CP_TEST_LUT[17:16] == 2'b00) ? S_B5  :
//                                                                 (CP_TEST_LUT[17:16] == 2'b01) ? S_B4  :
//                                                                 (CP_TEST_LUT[17:16] == 2'b10) ? 1'b1  :
//                                                                 (CP_TEST_LUT[17:16] == 2'b11) ? S_C2  : 1'bz);
//    operator V_BUF SFB_DATA_12 port map (Z => SFB_DATA[12], I => (CP_TEST_LUT[7]     == 1'b0)  ? A_D4  :
//                                                                 (CP_TEST_LUT[7]     == 1'b1)  ? S_BD  : 1'bz);
//    operator V_BUF SFB_DATA_13 port map (Z => SFB_DATA[13], I => (CP_TEST_LUT[11:10] == 2'b00) ? S_B0  :
//                                                                 (CP_TEST_LUT[11:10] == 2'b01) ? A_A5  :
//                                                                 (CP_TEST_LUT[11:10] == 2'b10) ? A_M3  :
//                                                                 (CP_TEST_LUT[11:10] == 2'b11) ? S_A4  : 1'bz);
//    operator V_BUF SFB_DATA_14 port map (Z => SFB_DATA[14], I => (CP_TEST_LUT[18]    == 1'b0)  ? A_CE  :
//                                                                 (CP_TEST_LUT[18]    == 1'b1)  ? A_B5  : 1'bz);
//    operator V_BUF SFB_DATA_15 port map (Z => SFB_DATA[15], I => (CP_TEST_LUT[32]    == 1'b0)  ? A_D0  :
//                                                                 (CP_TEST_LUT[32]    == 1'b1)  ? A_D1  : 1'bz);
//    operator V_BUF SFB_DATA_16 port map (Z => SFB_DATA[16], I => (CP_TEST_LUT[0]     == 1'b0)  ? S_A1  :
//                                                                 (CP_TEST_LUT[0]     == 1'b1)  ? S_A0  : 1'bz);
//    operator V_BUF SFB_DATA_17 port map (Z => SFB_DATA[17], I => (CP_TEST_LUT[15:14] == 2'b00) ? A_C3  :
//                                                                 (CP_TEST_LUT[15:14] == 2'b01) ? A_C2  :
//                                                                 (CP_TEST_LUT[15:14] == 2'b10) ? S_CE  :
//                                                                 (CP_TEST_LUT[15:14] == 2'b11) ? S_C3  : 1'bz);
//    operator V_BUF SFB_DATA_18 port map (Z => SFB_DATA[18], I => (CP_TEST_LUT[25:24] == 2'b00) ? A_M2  :
//                                                                 (CP_TEST_LUT[25:24] == 2'b01) ? A_D2  :
//                                                                 (CP_TEST_LUT[25:24] == 2'b10) ? A_D3  :
//                                                                 (CP_TEST_LUT[25:24] == 2'b11) ? S_M1  : 1'bz);
//    operator V_BUF SFB_DATA_19 port map (Z => SFB_DATA[19], I => (CP_TEST_LUT[27]    == 1'b0)  ? S_A2  :
//                                                                 (CP_TEST_LUT[27]    == 1'b1)  ? S_A3  : 1'bz);
//    operator V_BUF SFB_DATA_20 port map (Z => SFB_DATA[20], I => (CP_TEST_LUT[29:28] == 2'b00) ? S_C5  :
//                                                                 (CP_TEST_LUT[29:28] == 2'b01) ? S_DD  :
//                                                                 (CP_TEST_LUT[29:28] == 2'b10) ? A_M1  :
//                                                                 (CP_TEST_LUT[29:28] == 2'b11) ? A_C5  : 1'bz);
//    operator V_BUF SFB_DATA_21 port map (Z => SFB_DATA[21], I => (CP_TEST_LUT[6]     == 1'b0)  ? A_D5  :
//                                                                 (CP_TEST_LUT[6]     == 1'b1)  ? S_CD  : 1'bz);
//    operator V_BUF SFB_DATA_22 port map (Z => SFB_DATA[22], I => (CP_TEST_LUT[9:8]   == 2'b00) ? A_A4  :
//                                                                 (CP_TEST_LUT[9:8]   == 2'b01) ? S_B1  :
//                                                                 (CP_TEST_LUT[9:8]   == 2'b10) ? S_M2  :
//                                                                 (CP_TEST_LUT[9:8]   == 2'b11) ? S_A5  : 1'bz);
//    operator V_BUF SFB_DATA_23 port map (Z => SFB_DATA[23], I => (CP_TEST_LUT[20]    == 1'b0)  ? A_C1  :
//                                                                 (CP_TEST_LUT[20]    == 1'b1)  ? A_C0  : 1'bz);
//};
