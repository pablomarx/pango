tarted
grid
device CCS
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config string CP_GOUTEN_EN = "DISABLE",
        config string CP_GRSN_EN = "DISABLE",
        config string CP_GWEN_EN = "DISABLE",
        config string CP_USER_EN_ISPAL = "DISABLE",
        config string CP_ISPAL_M = "X8",
        config string CP_JTAG_EN = "DISABLE",
        config string CP_UMCLK_EN = "DISABLE",
        config bit CP_USERCODE[31:0] = 32'hFFFFFFFF
    );
    port
    (
// configuration_body_def_on


    config input SC_GOUTEN_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GOUTEN_EN" */,

    config input SC_GRS_N_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GRS_N_EN" */,

    config input SC_GWEN_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GWEN_EN" */,

    config input SC_USER_EN_ISPAL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_USER_EN_ISPAL" */,

    config input SC_ISPAL_M[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ISPAL_M[1],SC_ISPAL_M[0]" */,

    config input SC_JTAG_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_JTAG_EN" */,

    config input SC_UMCLK_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_UMCLK_EN" */,

    config input SC_USERCODE[31:0] = 32'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_USERCODE[31],SC_USERCODE[30],SC_USERCODE[29],SC_USERCODE[28],SC_USERCODE[27],SC_USERCODE[26],SC_USERCODE[25],SC_USERCODE[24],SC_USERCODE[23],SC_USERCODE[22],SC_USERCODE[21],SC_USERCODE[20],SC_USERCODE[19],SC_USERCODE[18],SC_USERCODE[17],SC_USERCODE[16],SC_USERCODE[15],SC_USERCODE[14],SC_USERCODE[13],SC_USERCODE[12],SC_USERCODE[11],SC_USERCODE[10],SC_USERCODE[9],SC_USERCODE[8],SC_USERCODE[7],SC_USERCODE[6],SC_USERCODE[5],SC_USERCODE[4],SC_USERCODE[3],SC_USERCODE[2],SC_USERCODE[1],SC_USERCODE[0]" */,

// configuration_body_def_end

        input ISPAL_DIN[31:0] = 32'b1111_1111_1111_1111_1111_1111_1111_1111,
        input GOUTEN_I = 1'b1,
        input GRS_N_I = 1'b1,
        input GWEN_I = 1'b1,
        input UTCK = 1'b1,
        input UTMS = 1'b1,
        input UTDI = 1'b1,
        input UID_CLK = 1'b1,
        input UID_DIN = 1'b1,
        input UID_LOAD = 1'b1,
        input UID_SE = 1'b1,
        input UCLK = 1'b1,
        input UMCLK = 1'b1,
        input UMCLK_EN_N = 1'b1,
        input ISPAL_CLK = 1'b1,
        input ISPAL_CS_N = 1'b1,
        input ISPAL_RDWR_N = 1'b1,
        input OSC_OFF = 1'b1,
        output ISPAL_DOUT[31:0],
        output SEU_INDEX[11:0],
        output SEU_COLUMN_ADDR[7:0],
        output SEU_COLUMN_NADDR[7:0],
        output SEU_FRAME_ADDR[7:0],
        output SEU_FRAME_NADDR[7:0],
        output SEU_REGION_ADDR[4:0],
        output SEU_REGION_NADDR[4:0],
        output FUSE[31:0],
        output GOUTEN,
        output GRS_N,
        output GWEN,
        output UTDO,
        output UID_DOUT,
        output WAKEUP_OVER_N,
        output RBCRC_ERR,
        output RBCRC_VALID,
        output DRCFG_ERR,
        output DRCFG_OVER,
        output PRCFG_ERR,
        output PRCFG_OVER,
        output SEU_VALID,
        output SEU_SEC,
        output SEU_DED,
        output OSC_EN
    );
};
//grid device end

//grid device structure netlist started
structure netlist of CCS
{
};
//grid device structure netlist end

timing ccs_tnl of CCS
{
    operator V_GRS V_GRS
    port map
    (
        GRS_N  => GRS_N_I
    );
    //operator V_SCANCHAIN_E1 V_SCANCHAIN_E1
    //port map
    //(
    //    RST      => JRST     ,
    //    CAPDR    => CAPTUREDR,
    //    SHFTDR   => SHIFTDR  ,
    //    UPDR     => UPDATEDR ,
    //    JCLK     => CLOCKDR1 ,
    //    FLG_USER => FLG_USER1,
    //    //TDI_USER => TDI1     ,
    //    TDO_USER => TDO_USER1,
    //    JRTI     => JRTI     
    //    //,
    //    //TCK_USER => TCK1     ,
    //    //TMS_USER => TMS1
    //);
    //operator V_SCANCHAIN_E1 V_SCANCHAIN_E1_2
    //port map
    //(
    //    JCLK     => CLOCKDR2 ,
    //    FLG_USER => FLG_USER2,
    //    TDO_USER => TDO_USER2
    //);
    operator V_UDID V_UDID
    port map
    (
        DI    => UID_DIN   ,
        DO    => UID_DOUT  ,
        SE    => UID_SE    ,
        LOAD  => UID_LOAD  ,
        CLK   => UID_CLK  
    );

    operator V_EFUSECODE V_EFUSECODE
    parameter map
    (
        SIM_EFUSE_VALUE => CP_USERCODE
    )
    port map
    (
        EFUSE_CODE => FUSE
    );

    operator V_IPAL_E2 V_IPAL_E2
    parameter map
    (
        //IDCODE => CP_USERCODE,
        DATA_WIDTH => CP_ISPAL_M,
        SIM_DEVICE => "PG2L100H"
    )
    port map
    (
        DO               => ISPAL_DOUT,
        RBCRC_ERR        => RBCRC_ERR,
        RBCRC_VALID      => RBCRC_VALID,
        ECC_VALID        => SEU_VALID,
        ECC_INDEX        => SEU_INDEX,
        SERROR           => SEU_SEC,
        DERROR           => SEU_DED,
        SEU_FRAME_ADDR   => SEU_FRAME_ADDR,
        SEU_COLUMN_ADDR  => SEU_COLUMN_ADDR,
        SEU_REGION_ADDR  => SEU_REGION_ADDR,
        SEU_FRAME_NADDR  => SEU_FRAME_NADDR,
        SEU_COLUMN_NADDR => SEU_COLUMN_NADDR,
        SEU_REGION_NADDR => SEU_REGION_NADDR,
        PRCFG_OVER       => PRCFG_OVER,
        PRCFG_ERR        => PRCFG_ERR,
        DRCFG_OVER       => DRCFG_OVER,
        DRCFG_ERR        => DRCFG_ERR,
        RST_N            => GRS_N_I,
        CLK              => ISPAL_CLK,
        CS_N             => ISPAL_CS_N,
        RW_SEL           => ISPAL_RDWR_N,
        DI               => ISPAL_DIN
    );

    operator V_JTAGIF V_JTAGIF
    parameter map
    (
        USERCODE => CP_USERCODE
    )
    port map
    (
        TCK    => UTCK,
        TMS    => UTMS,
        TDI    => UTDI,
        TDO    => UTDO     
    );
};
//grid device configure body started

configuration cfg of CCS
{

//initial config body0 begin
    if(CP_GOUTEN_EN == "ENABLE")
    {
        SC_GOUTEN_EN  :=  1'b1;
    }
    else if(CP_GOUTEN_EN == "DISABLE")
    {
        SC_GOUTEN_EN  :=  1'b0;
    }
    else
    {
        SC_GOUTEN_EN  :=  1'bx;
        error ("illegal setting for CP_GOUTEN_EN := %s",CP_GOUTEN_EN);
    }

//initial config body0 end


//initial config body1 begin
    if(CP_GRSN_EN == "ENABLE")
    {
        SC_GRS_N_EN  :=  1'b1;
    }
    else if(CP_GRSN_EN == "DISABLE")
    {
        SC_GRS_N_EN  :=  1'b0;
    }
    else
    {
        SC_GRS_N_EN  :=  1'bx;
        error ("illegal setting for CP_GRSN_EN := %s",CP_GRSN_EN);
    }

//initial config body1 end


//initial config body2 begin
    if(CP_GWEN_EN == "ENABLE")
    {
        SC_GWEN_EN  :=  1'b1;
    }
    else if(CP_GWEN_EN == "DISABLE")
    {
        SC_GWEN_EN  :=  1'b0;
    }
    else
    {
        SC_GWEN_EN  :=  1'bx;
        error ("illegal setting for CP_GWEN_EN := %s",CP_GWEN_EN);
    }

//initial config body2 end


//initial config body3 begin
    if(CP_USER_EN_ISPAL == "ENABLE")
    {
        SC_USER_EN_ISPAL  :=  1'b1;
    }
    else if(CP_USER_EN_ISPAL == "DISABLE")
    {
        SC_USER_EN_ISPAL  :=  1'b0;
    }
    else
    {
        SC_USER_EN_ISPAL  :=  1'bx;
        error ("illegal setting for CP_USER_EN_ISPAL := %s",CP_USER_EN_ISPAL);
    }

//initial config body3 end


//initial config body4 begin
    if(CP_ISPAL_M == "X8")
    {
        SC_ISPAL_M  :=  2'b00;
    }
    else if(CP_ISPAL_M == "X16")
    {
        SC_ISPAL_M :=  2'b01;
    }
    else if(CP_ISPAL_M == "X32")
    {
        SC_ISPAL_M  :=  2'b10;
    }
    else
    {
        SC_ISPAL_M  :=  2'bxx;
        error ("illegal setting CP_ISPAL_Mfor  := %s",CP_ISPAL_M);
    }

//initial config body4 end


//initial config body5 begin
    if(CP_JTAG_EN == "ENABLE")
    {
        SC_JTAG_EN  :=  1'b1;
    }
    else if(CP_JTAG_EN == "DISABLE")
    {
        SC_JTAG_EN  :=  1'b0;
    }
    else
    {
        SC_JTAG_EN  :=  1'bx;
        error ("illegal setting for CP_JTAG_EN := %s",CP_JTAG_EN);
    }

//initial config body5 end


//initial config body6 begin
    if(CP_UMCLK_EN == "ENABLE")
    {
        SC_UMCLK_EN  :=  1'b1;
    }
    else if(CP_UMCLK_EN == "DISABLE")
    {
        SC_UMCLK_EN  :=  1'b0;
    }
    else
    {
        SC_UMCLK_EN  :=  1'bx;
        error ("illegal setting for CP_UMCLK_EN := %s",CP_UMCLK_EN);
    }

//initial config body6 end


//initial config body7 begin
   SC_USERCODE  :=  CP_USERCODE;
//initial config body7 end

};

//grid device configure body end

