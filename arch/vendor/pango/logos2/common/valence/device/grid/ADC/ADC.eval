tarted
grid
device ADC
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config bit CP_CREG_00H[15:0] = 16'h0001,
        config bit CP_CREG_01H[15:0] = 16'hC83F,
        config bit CP_CREG_02H[15:0] = 16'h0009,
        config bit CP_CREG_31H[13:0] = 14'b00000000000000,
        config bit CP_SEQ_03H[15:0] = 16'h0000,
        config bit CP_SEQ_04H[15:0] = 16'h0000,
        config bit CP_SEQ_05H[15:0] = 16'h0000,
        config bit CP_SEQ_06H[15:0] = 16'h0000,
        config bit CP_SEQ_07H[15:0] = 16'h0000,
        config bit CP_SEQ_08H[15:0] = 16'h0000,
        config bit CP_SEQ_0AH[15:0] = 16'h0000,
        config bit CP_SEQ_0CH[15:0] = 16'h0000,
        config bit CP_SEQ_0EH[15:0] = 16'h0000,
        config bit CP_ALM_20H[11:0] = 12'b000000000000,
        config bit CP_ALM_21H[11:0] = 12'b000000000000,
        config bit CP_ALM_22H[11:0] = 12'b000000000000,
        config bit CP_ALM_23H[11:0] = 12'b000000000000,
        config bit CP_ALM_24H[11:0] = 12'b000000000000,
        config bit CP_ALM_25H[11:0] = 12'b000000000000,
        config bit CP_ALM_26H[11:0] = 12'b000000000000,
        config bit CP_ALM_27H[11:0] = 12'b000000000000,
        config bit CP_ALM_28H[11:0] = 12'b000000000000,
        config bit CP_ALM_29H[11:0] = 12'b000000000000,
        config bit CP_ALM_2AH[11:0] = 12'b110011000010,
        config bit CP_ALM_2BH[11:0] = 12'b101001011011,
        config bit CP_ADC_EN = 1'b1
    );
    port
    (
// configuration_body_def_on


    config input SC_CREG_00H[15:0] = 16'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CREG_00H[15],SC_CREG_00H[14],SC_CREG_00H[13],SC_CREG_00H[12],SC_CREG_00H[11],SC_CREG_00H[10],SC_CREG_00H[9],SC_CREG_00H[8],SC_CREG_00H[7],SC_CREG_00H[6],SC_CREG_00H[5],SC_CREG_00H[4],SC_CREG_00H[3],SC_CREG_00H[2],SC_CREG_00H[1],SC_CREG_00H[0]" */,

    config input SC_CREG_01H[15:0] = 16'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CREG_01H[15],SC_CREG_01H[14],SC_CREG_01H[13],SC_CREG_01H[12],SC_CREG_01H[11],SC_CREG_01H[10],SC_CREG_01H[9],SC_CREG_01H[8],SC_CREG_01H[7],SC_CREG_01H[6],SC_CREG_01H[5],SC_CREG_01H[4],SC_CREG_01H[3],SC_CREG_01H[2],SC_CREG_01H[1],SC_CREG_01H[0]" */,

    config input SC_CREG_02H[15:0] = 16'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CREG_02H[15],SC_CREG_02H[14],SC_CREG_02H[13],SC_CREG_02H[12],SC_CREG_02H[11],SC_CREG_02H[10],SC_CREG_02H[9],SC_CREG_02H[8],SC_CREG_02H[7],SC_CREG_02H[6],SC_CREG_02H[5],SC_CREG_02H[4],SC_CREG_02H[3],SC_CREG_02H[2],SC_CREG_02H[1],SC_CREG_02H[0]" */,

    config input SC_CREG_31H[13:0] = 14'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CREG_31H[13],SC_CREG_31H[12],SC_CREG_31H[11],SC_CREG_31H[10],SC_CREG_31H[9],SC_CREG_31H[8],SC_CREG_31H[7],SC_CREG_31H[6],SC_CREG_31H[5],SC_CREG_31H[4],SC_CREG_31H[3],SC_CREG_31H[2],SC_CREG_31H[1],SC_CREG_31H[0]" */,

    config input SC_SEQ_03H[15:0] = 16'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SEQ_03H[15],SC_SEQ_03H[14],SC_SEQ_03H[13],SC_SEQ_03H[12],SC_SEQ_03H[11],SC_SEQ_03H[10],SC_SEQ_03H[9],SC_SEQ_03H[8],SC_SEQ_03H[7],SC_SEQ_03H[6],SC_SEQ_03H[5],SC_SEQ_03H[4],SC_SEQ_03H[3],SC_SEQ_03H[2],SC_SEQ_03H[1],SC_SEQ_03H[0]" */,

    config input SC_SEQ_04H[15:0] = 16'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SEQ_04H[15],SC_SEQ_04H[14],SC_SEQ_04H[13],SC_SEQ_04H[12],SC_SEQ_04H[11],SC_SEQ_04H[10],SC_SEQ_04H[9],SC_SEQ_04H[8],SC_SEQ_04H[7],SC_SEQ_04H[6],SC_SEQ_04H[5],SC_SEQ_04H[4],SC_SEQ_04H[3],SC_SEQ_04H[2],SC_SEQ_04H[1],SC_SEQ_04H[0]" */,

    config input SC_SEQ_05H[15:0] = 16'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SEQ_05H[15],SC_SEQ_05H[14],SC_SEQ_05H[13],SC_SEQ_05H[12],SC_SEQ_05H[11],SC_SEQ_05H[10],SC_SEQ_05H[9],SC_SEQ_05H[8],SC_SEQ_05H[7],SC_SEQ_05H[6],SC_SEQ_05H[5],SC_SEQ_05H[4],SC_SEQ_05H[3],SC_SEQ_05H[2],SC_SEQ_05H[1],SC_SEQ_05H[0]" */,

    config input SC_SEQ_06H[15:0] = 16'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SEQ_06H[15],SC_SEQ_06H[14],SC_SEQ_06H[13],SC_SEQ_06H[12],SC_SEQ_06H[11],SC_SEQ_06H[10],SC_SEQ_06H[9],SC_SEQ_06H[8],SC_SEQ_06H[7],SC_SEQ_06H[6],SC_SEQ_06H[5],SC_SEQ_06H[4],SC_SEQ_06H[3],SC_SEQ_06H[2],SC_SEQ_06H[1],SC_SEQ_06H[0]" */,

    config input SC_SEQ_07H[15:0] = 16'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SEQ_07H[15],SC_SEQ_07H[14],SC_SEQ_07H[13],SC_SEQ_07H[12],SC_SEQ_07H[11],SC_SEQ_07H[10],SC_SEQ_07H[9],SC_SEQ_07H[8],SC_SEQ_07H[7],SC_SEQ_07H[6],SC_SEQ_07H[5],SC_SEQ_07H[4],SC_SEQ_07H[3],SC_SEQ_07H[2],SC_SEQ_07H[1],SC_SEQ_07H[0]" */,

    config input SC_SEQ_08H[15:0] = 16'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SEQ_08H[15],SC_SEQ_08H[14],SC_SEQ_08H[13],SC_SEQ_08H[12],SC_SEQ_08H[11],SC_SEQ_08H[10],SC_SEQ_08H[9],SC_SEQ_08H[8],SC_SEQ_08H[7],SC_SEQ_08H[6],SC_SEQ_08H[5],SC_SEQ_08H[4],SC_SEQ_08H[3],SC_SEQ_08H[2],SC_SEQ_08H[1],SC_SEQ_08H[0]" */,

    config input SC_SEQ_0AH[15:0] = 16'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SEQ_0AH[15],SC_SEQ_0AH[14],SC_SEQ_0AH[13],SC_SEQ_0AH[12],SC_SEQ_0AH[11],SC_SEQ_0AH[10],SC_SEQ_0AH[9],SC_SEQ_0AH[8],SC_SEQ_0AH[7],SC_SEQ_0AH[6],SC_SEQ_0AH[5],SC_SEQ_0AH[4],SC_SEQ_0AH[3],SC_SEQ_0AH[2],SC_SEQ_0AH[1],SC_SEQ_0AH[0]" */,

    config input SC_SEQ_0CH[15:0] = 16'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SEQ_0CH[15],SC_SEQ_0CH[14],SC_SEQ_0CH[13],SC_SEQ_0CH[12],SC_SEQ_0CH[11],SC_SEQ_0CH[10],SC_SEQ_0CH[9],SC_SEQ_0CH[8],SC_SEQ_0CH[7],SC_SEQ_0CH[6],SC_SEQ_0CH[5],SC_SEQ_0CH[4],SC_SEQ_0CH[3],SC_SEQ_0CH[2],SC_SEQ_0CH[1],SC_SEQ_0CH[0]" */,

    config input SC_SEQ_0EH[15:0] = 16'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SEQ_0EH[15],SC_SEQ_0EH[14],SC_SEQ_0EH[13],SC_SEQ_0EH[12],SC_SEQ_0EH[11],SC_SEQ_0EH[10],SC_SEQ_0EH[9],SC_SEQ_0EH[8],SC_SEQ_0EH[7],SC_SEQ_0EH[6],SC_SEQ_0EH[5],SC_SEQ_0EH[4],SC_SEQ_0EH[3],SC_SEQ_0EH[2],SC_SEQ_0EH[1],SC_SEQ_0EH[0]" */,

    config input SC_ALM_20H[11:0] = 12'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ALM_20H[11],SC_ALM_20H[10],SC_ALM_20H[9],SC_ALM_20H[8],SC_ALM_20H[7],SC_ALM_20H[6],SC_ALM_20H[5],SC_ALM_20H[4],SC_ALM_20H[3],SC_ALM_20H[2],SC_ALM_20H[1],SC_ALM_20H[0]" */,

    config input SC_ALM_21H[11:0] = 12'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ALM_21H[11],SC_ALM_21H[10],SC_ALM_21H[9],SC_ALM_21H[8],SC_ALM_21H[7],SC_ALM_21H[6],SC_ALM_21H[5],SC_ALM_21H[4],SC_ALM_21H[3],SC_ALM_21H[2],SC_ALM_21H[1],SC_ALM_21H[0]" */,

    config input SC_ALM_22H[11:0] = 12'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ALM_22H[11],SC_ALM_22H[10],SC_ALM_22H[9],SC_ALM_22H[8],SC_ALM_22H[7],SC_ALM_22H[6],SC_ALM_22H[5],SC_ALM_22H[4],SC_ALM_22H[3],SC_ALM_22H[2],SC_ALM_22H[1],SC_ALM_22H[0]" */,

    config input SC_ALM_23H[11:0] = 12'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ALM_23H[11],SC_ALM_23H[10],SC_ALM_23H[9],SC_ALM_23H[8],SC_ALM_23H[7],SC_ALM_23H[6],SC_ALM_23H[5],SC_ALM_23H[4],SC_ALM_23H[3],SC_ALM_23H[2],SC_ALM_23H[1],SC_ALM_23H[0]" */,

    config input SC_ALM_24H[11:0] = 12'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ALM_24H[11],SC_ALM_24H[10],SC_ALM_24H[9],SC_ALM_24H[8],SC_ALM_24H[7],SC_ALM_24H[6],SC_ALM_24H[5],SC_ALM_24H[4],SC_ALM_24H[3],SC_ALM_24H[2],SC_ALM_24H[1],SC_ALM_24H[0]" */,

    config input SC_ALM_25H[11:0] = 12'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ALM_25H[11],SC_ALM_25H[10],SC_ALM_25H[9],SC_ALM_25H[8],SC_ALM_25H[7],SC_ALM_25H[6],SC_ALM_25H[5],SC_ALM_25H[4],SC_ALM_25H[3],SC_ALM_25H[2],SC_ALM_25H[1],SC_ALM_25H[0]" */,

    config input SC_ALM_26H[11:0] = 12'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ALM_26H[11],SC_ALM_26H[10],SC_ALM_26H[9],SC_ALM_26H[8],SC_ALM_26H[7],SC_ALM_26H[6],SC_ALM_26H[5],SC_ALM_26H[4],SC_ALM_26H[3],SC_ALM_26H[2],SC_ALM_26H[1],SC_ALM_26H[0]" */,

    config input SC_ALM_27H[11:0] = 12'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ALM_27H[11],SC_ALM_27H[10],SC_ALM_27H[9],SC_ALM_27H[8],SC_ALM_27H[7],SC_ALM_27H[6],SC_ALM_27H[5],SC_ALM_27H[4],SC_ALM_27H[3],SC_ALM_27H[2],SC_ALM_27H[1],SC_ALM_27H[0]" */,

    config input SC_ALM_28H[11:0] = 12'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ALM_28H[11],SC_ALM_28H[10],SC_ALM_28H[9],SC_ALM_28H[8],SC_ALM_28H[7],SC_ALM_28H[6],SC_ALM_28H[5],SC_ALM_28H[4],SC_ALM_28H[3],SC_ALM_28H[2],SC_ALM_28H[1],SC_ALM_28H[0]" */,

    config input SC_ALM_29H[11:0] = 12'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ALM_29H[11],SC_ALM_29H[10],SC_ALM_29H[9],SC_ALM_29H[8],SC_ALM_29H[7],SC_ALM_29H[6],SC_ALM_29H[5],SC_ALM_29H[4],SC_ALM_29H[3],SC_ALM_29H[2],SC_ALM_29H[1],SC_ALM_29H[0]" */,

    config input SC_ALM_2AH[11:0] = 12'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ALM_2AH[11],SC_ALM_2AH[10],SC_ALM_2AH[9],SC_ALM_2AH[8],SC_ALM_2AH[7],SC_ALM_2AH[6],SC_ALM_2AH[5],SC_ALM_2AH[4],SC_ALM_2AH[3],SC_ALM_2AH[2],SC_ALM_2AH[1],SC_ALM_2AH[0]" */,

    config input SC_ALM_2BH[11:0] = 12'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ALM_2BH[11],SC_ALM_2BH[10],SC_ALM_2BH[9],SC_ALM_2BH[8],SC_ALM_2BH[7],SC_ALM_2BH[6],SC_ALM_2BH[5],SC_ALM_2BH[4],SC_ALM_2BH[3],SC_ALM_2BH[2],SC_ALM_2BH[1],SC_ALM_2BH[0]" */,

    config input SC_ADC_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ADC_EN" */,

// configuration_body_def_end

        input VAAP[15:0] = 16'b1111_1111_1111_1111,
        input VAAN[15:0] = 16'b1111_1111_1111_1111,
        input PADDR[7:0] = 8'b1111_1111,
        input PWDATA[15:0] = 16'b1111_1111_1111_1111,
        input VAADC_P = 1'b1,
        input VAADC_N = 1'b1,
        input PCLK = 1'b1,
        input PSEL = 1'b1,
        input PENABLE = 1'b1,
        input PWRITE = 1'b1,
        input EVENT_DRV = 1'b1,
        input RST_N = 1'b1,
        input LOAD_SC_N = 1'b1,
        input TEST_CLK = 1'b1,
        input TEST_MODE_N = 1'b1,
        input TEST_RST_N = 1'b1,
        input TEST_SCAN_EN_N = 1'b1,
        input TEST_SI_0 = 1'b1,
        input TEST_SI_1 = 1'b1,
        input TEST_SI_2 = 1'b1,
        input TEST_SI_3 = 1'b1,
        output PRDATA[15:0],
        output ALARM[4:0],
        output PREADY,
        output OVER_TEMP,
        output LOGIC_DONE_A,
        output LOGIC_DONE_B,
        output ADC_CLK_OUT,
        output PMODIFIED,
        output TEST_SO_0,
        output TEST_SO_1,
        output TEST_SO_2,
        output TEST_SO_3
    );
};
//grid device end

//grid device structure netlist started
structure netlist of ADC
{
};
//grid device structure netlist end
//grid device configure body started

configuration cfg of ADC
{

 // assign config body begin
    SC_CREG_00H  :=  CP_CREG_00H;
    SC_CREG_01H  :=  CP_CREG_01H;
    SC_CREG_02H  :=  CP_CREG_02H;
    SC_CREG_31H  :=  CP_CREG_31H;
    SC_SEQ_03H   :=  CP_SEQ_03H;
    SC_SEQ_04H   :=  CP_SEQ_04H;
    SC_SEQ_05H   :=  CP_SEQ_05H;
    SC_SEQ_06H   :=  CP_SEQ_06H;
    SC_SEQ_07H   :=  CP_SEQ_07H;
    SC_SEQ_08H   :=  CP_SEQ_08H;
    SC_SEQ_0AH   :=  CP_SEQ_0AH;
    SC_SEQ_0CH   :=  CP_SEQ_0CH;
    SC_SEQ_0EH   :=  CP_SEQ_0EH;
    SC_ALM_20H   :=  CP_ALM_20H;
    SC_ALM_21H   :=  CP_ALM_21H;
    SC_ALM_22H   :=  CP_ALM_22H;
    SC_ALM_23H   :=  CP_ALM_23H;
    SC_ALM_24H   :=  CP_ALM_24H;
    SC_ALM_25H   :=  CP_ALM_25H;
    SC_ALM_26H   :=  CP_ALM_26H;
    SC_ALM_27H   :=  CP_ALM_27H;
    SC_ALM_28H   :=  CP_ALM_28H;
    SC_ALM_29H   :=  CP_ALM_29H;
    SC_ALM_2AH   :=  CP_ALM_2AH;
    SC_ALM_2BH   :=  CP_ALM_2BH;
    SC_ADC_EN    :=  CP_ADC_EN;
// assign config body end
};

//grid device configure body end


timing adc_tnl of ADC
{
    operator V_ADC_E2 ADC
    parameter map
    (
        CREG_00H => CP_CREG_00H,   
        CREG_01H => CP_CREG_01H,   
        CREG_02H => CP_CREG_02H,   
        CREG_31H => CP_CREG_31H[13:0],    
        CREG_03H => CP_SEQ_03H,    
        CREG_04H => CP_SEQ_04H,    
        CREG_0AH => CP_SEQ_05H,    
        CREG_05H => CP_SEQ_06H,    
        CREG_06H => CP_SEQ_07H,    
        CREG_0CH => CP_SEQ_08H,    
        CREG_07H => CP_SEQ_0AH,    
        CREG_08H => CP_SEQ_0CH,    
        CREG_0EH => CP_SEQ_0EH,    
        CREG_20H => CP_ALM_20H,    
        CREG_21H => CP_ALM_21H,    
        CREG_22H => CP_ALM_22H,    
        CREG_23H => CP_ALM_23H,    
        CREG_24H => CP_ALM_24H,    
        CREG_25H => CP_ALM_25H,    
        CREG_26H => CP_ALM_26H,    
        CREG_27H => CP_ALM_27H,    
        CREG_28H => CP_ALM_28H,    
        CREG_29H => CP_ALM_29H,    
        CREG_2AH => CP_ALM_2AH,    
        CREG_2BH => CP_ALM_2BH     
    )
    port map
    (
        VA           => {VAADC_P, VAADC_N}     ,
        VAUX         => {VAAP[15], VAAN[15], VAAP[14], VAAN[14], VAAP[13], VAAN[13], VAAP[12], VAAN[12],
                         VAAP[11], VAAN[11], VAAP[10], VAAN[10], VAAP[9],  VAAN[9],  VAAP[8],  VAAN[8],
                         VAAP[7],  VAAN[7],  VAAP[6],  VAAN[6],  VAAP[5],  VAAN[5],  VAAP[4],  VAAN[4],
                         VAAP[3],  VAAN[3],  VAAP[2],  VAAN[2],  VAAP[1],  VAAN[1],  VAAP[0],  VAAN[0]},
        DCLK         => PCLK        ,
        DADDR        => PADDR       ,
        DEN          => PSEL        ,
        SECEN        => PENABLE     ,
        DWE          => PWRITE      ,
        DI           => PWDATA      ,
        DO           => PRDATA      ,
        DRDY         => PREADY      ,
        CONVST       => EVENT_DRV   ,
        RST_N        => RST_N       ,
        LOADSC_N     => LOAD_SC_N   ,
        OVER_TEMP    => OVER_TEMP   ,
        LOGIC_DONE_A => LOGIC_DONE_A,
        LOGIC_DONE_B => LOGIC_DONE_B,
        ADC_CLK_OUT  => ADC_CLK_OUT ,
        DMODIFIED    => PMODIFIED   ,
        ALARM        => ALARM       
    );
};
