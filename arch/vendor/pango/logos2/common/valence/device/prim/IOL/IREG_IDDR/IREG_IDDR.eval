*****************************************************************

  Device    [IREG_IDDR]

  Author    [clwang]

  Abstract  [The Prim Device Of IREG_IDDR]

  Revision History:

********************************************************************************/
prim
device IREG_IDDR
{
    parameter
    (
        config string     CP_IHSMEM_EN       = "RESET", 
        config string     CP_LSMEM_EN        = "RESET",   
    
        config string  CP_DDRI_EN         = "FALSE",         
        config string  CP_DES_DDREN       = "FALSE",         
        config string  CP_DES_SDREN       = "FALSE",         
        config string  CP_ISERDES_MODE    = "SDR1TO2",       
        config string  CP_SAMEPIPELINE_EN = "FALSE",         
        config string  CP_ISAME_EN        = "FALSE",         
        config string  CP_IOPPOSITE_EN    = "FALSE",         
        config string  CP_OVERSAMPLE_EN   = "FALSE",          
        config string  CP_ILTHEN          = "FALSE",         
        config string  CP_IDFFEN          = "FALSE",         
        config string  CP_MASTER          = "MASTER",        
        config string  CP_NETWORKING_EN   = "FALSE",         
        config string  CP_BITSLIP_EN      = "FALSE",         
        config string  CP_ISR_SYNC        = "ASYNC",         
        config string  CP_ISR_EN          = "FALSE",         
        config bit     CP_GRS_DIS         = 1'b0,            
        config bit     CP_NUM_ICE         = 1'b0,            
        config string  CP_IFIFO_EN        = "FALSE",         
        config bit     CP_INIT_Q0         = 1'b0,            
        config bit     CP_INIT_Q1         = 1'b0,            
        config bit     CP_INIT_Q2         = 1'b0,            
        config bit     CP_INIT_Q3         = 1'b0,            
        config string  CP_SRVAL_Q0        = "RESET",         
        config string  CP_SRVAL_Q1        = "RESTE",         
        config string  CP_SRVAL_Q2        = "RESTE",         
        config string  CP_SRVAL_Q3        = "RESET"
  
    );
    port 
    (
        input            GRS_N,
        input            SR,
        input            ICE0,
        input            ICE1,
        input            CLK_STG0,
        input            CLKB_STG0,
        input            HSMEM_CLK,
        input            HSMEM_CLKB,
        input            CLK_STG1_0,
        input            CLK_STG1_1,
        input            CLK_STG1_2,
        input            CLK_STG2_0,
        input            CLK_STG2_1,
        input            CLK_STG3,
        input            CLK_FOR_BS,
        input            DI_TO_GEAR,
        input            BITSLIP,
        input            ISHIFTIN0,
        input            ISHIFTIN1,
        input            IFIFO_WADDR[2:0],
        input            IFIFO_RADDR[2:0],
        output           BSCLK,
        output           RSTN_OUT,
        output           RX_DATA[7:0],
        output           ISHIFTOUT0,
        output           ISHIFTOUT1
    );

}; // end of device IREG_IDDR

/**Device***********************************************************************

  Device    [IREG_IDDR]
  
  Author    [kongbiao]  

  Abstract  [This specified how to propagate the input signal to the outputs based on
             configuration]

  Revision History:

********************************************************************************/
propagation pop of IREG_IDDR
{
    propagate ( SR --> BSCLK );
    propagate ( ICE0 --> BSCLK );
    propagate ( ICE1 --> BSCLK );
    propagate ( CLK_STG0 --> BSCLK );
    propagate ( CLKB_STG0 --> BSCLK );
    propagate ( HSMEM_CLK --> BSCLK );
    propagate ( HSMEM_CLKB --> BSCLK );
    propagate ( CLK_STG1_0 --> BSCLK );
    propagate ( CLK_STG1_1 --> BSCLK );
    propagate ( CLK_STG1_2 --> BSCLK );
    propagate ( CLK_STG2_0 --> BSCLK );
    propagate ( CLK_STG2_1 --> BSCLK );
    propagate ( CLK_STG3 --> BSCLK );
    propagate ( CLK_FOR_BS --> BSCLK );
    propagate ( DI_TO_GEAR --> BSCLK );
    propagate ( BITSLIP --> BSCLK );
    propagate ( ISHIFTIN0 --> BSCLK );
    propagate ( ISHIFTIN1 --> BSCLK );
    propagate ( IFIFO_WADDR --> BSCLK );
    propagate ( IFIFO_RADDR --> BSCLK );
    
    propagate ( SR --> RSTN_OUT );
    propagate ( ICE0 --> RSTN_OUT );
    propagate ( ICE1 --> RSTN_OUT );
    propagate ( CLK_STG0 --> RSTN_OUT );
    propagate ( CLKB_STG0 --> RSTN_OUT );
    propagate ( HSMEM_CLK --> RSTN_OUT );
    propagate ( HSMEM_CLKB --> RSTN_OUT );
    propagate ( CLK_STG1_0 --> RSTN_OUT );
    propagate ( CLK_STG1_1 --> RSTN_OUT );
    propagate ( CLK_STG1_2 --> RSTN_OUT );
    propagate ( CLK_STG2_0 --> RSTN_OUT );
    propagate ( CLK_STG2_1 --> RSTN_OUT );
    propagate ( CLK_STG3 --> RSTN_OUT );
    propagate ( CLK_FOR_BS --> RSTN_OUT );
    propagate ( DI_TO_GEAR --> RSTN_OUT );
    propagate ( BITSLIP --> RSTN_OUT );
    propagate ( ISHIFTIN0 --> RSTN_OUT );
    propagate ( ISHIFTIN1 --> RSTN_OUT );
    propagate ( IFIFO_WADDR --> RSTN_OUT );
    propagate ( IFIFO_RADDR --> RSTN_OUT );
    
    propagate ( SR --> RX_DATA );
    propagate ( ICE0 --> RX_DATA );
    propagate ( ICE1 --> RX_DATA );
    propagate ( CLK_STG0 --> RX_DATA );
    propagate ( CLKB_STG0 --> RX_DATA );
    propagate ( HSMEM_CLK --> RX_DATA );
    propagate ( HSMEM_CLKB --> RX_DATA );
    propagate ( CLK_STG1_0 --> RX_DATA );
    propagate ( CLK_STG1_1 --> RX_DATA );
    propagate ( CLK_STG1_2 --> RX_DATA );
    propagate ( CLK_STG2_0 --> RX_DATA );
    propagate ( CLK_STG2_1 --> RX_DATA );
    propagate ( CLK_STG3 --> RX_DATA );
    propagate ( CLK_FOR_BS --> RX_DATA );
    propagate ( DI_TO_GEAR --> RX_DATA );
    propagate ( BITSLIP --> RX_DATA );
    propagate ( ISHIFTIN0 --> RX_DATA );
    propagate ( ISHIFTIN1 --> RX_DATA );
    propagate ( IFIFO_WADDR --> RX_DATA );
    propagate ( IFIFO_RADDR --> RX_DATA );
    
    propagate ( SR --> ISHIFTOUT0 );
    propagate ( ICE0 --> ISHIFTOUT0 );
    propagate ( ICE1 --> ISHIFTOUT0 );
    propagate ( CLK_STG0 --> ISHIFTOUT0 );
    propagate ( CLKB_STG0 --> ISHIFTOUT0 );
    propagate ( HSMEM_CLK --> ISHIFTOUT0 );
    propagate ( HSMEM_CLKB --> ISHIFTOUT0 );
    propagate ( CLK_STG1_0 --> ISHIFTOUT0 );
    propagate ( CLK_STG1_1 --> ISHIFTOUT0 );
    propagate ( CLK_STG1_2 --> ISHIFTOUT0 );
    propagate ( CLK_STG2_0 --> ISHIFTOUT0 );
    propagate ( CLK_STG2_1 --> ISHIFTOUT0 );
    propagate ( CLK_STG3 --> ISHIFTOUT0 );
    propagate ( CLK_FOR_BS --> ISHIFTOUT0 );
    propagate ( DI_TO_GEAR --> ISHIFTOUT0 );
    propagate ( BITSLIP --> ISHIFTOUT0 );
    propagate ( ISHIFTIN0 --> ISHIFTOUT0 );
    propagate ( ISHIFTIN1 --> ISHIFTOUT0 );
    propagate ( IFIFO_WADDR --> ISHIFTOUT0 );
    propagate ( IFIFO_RADDR --> ISHIFTOUT0 );
    
    propagate ( SR --> ISHIFTOUT1 );
    propagate ( ICE0 --> ISHIFTOUT1 );
    propagate ( ICE1 --> ISHIFTOUT1 );
    propagate ( CLK_STG0 --> ISHIFTOUT1 );
    propagate ( CLKB_STG0 --> ISHIFTOUT1 );
    propagate ( HSMEM_CLK --> ISHIFTOUT1 );
    propagate ( HSMEM_CLKB --> ISHIFTOUT1 );
    propagate ( CLK_STG1_0 --> ISHIFTOUT1 );
    propagate ( CLK_STG1_1 --> ISHIFTOUT1 );
    propagate ( CLK_STG1_2 --> ISHIFTOUT1 );
    propagate ( CLK_STG2_0 --> ISHIFTOUT1 );
    propagate ( CLK_STG2_1 --> ISHIFTOUT1 );
    propagate ( CLK_STG3 --> ISHIFTOUT1 );
    propagate ( CLK_FOR_BS --> ISHIFTOUT1 );
    propagate ( DI_TO_GEAR --> ISHIFTOUT1 );
    propagate ( BITSLIP --> ISHIFTOUT1 );
    propagate ( ISHIFTIN0 --> ISHIFTOUT1 );
    propagate ( ISHIFTIN1 --> ISHIFTOUT1 );
    propagate ( IFIFO_WADDR --> ISHIFTOUT1 );
    propagate ( IFIFO_RADDR --> ISHIFTOUT1 );
    
}; // end of propagation for IREG_IDDR

/**Device***********************************************************************                  
                                                                                                  
  Device    [IREG_IDDR]                                                                                
                                                                                                  
  Author    [kongbiao]                                                                               
                                                                                                  
  Abstract  [This specified the timing model under specific configuration]                        
                                                                                                  
  Revision History:                                                                               
                                                                                                  
********************************************************************************/                 
                                                                                                  
timing  mux21_tnl of IREG_IDDR  
{
    //if (CP_DDRI_EN == "TRUE")
    //{
    //    operator V_ISERDES_E2
    //    parameter map
    //    (
    //        ISERDES_MODE    =>  CP_ISERDES_MODE,
    //        GRS_EN          => (CP_GRS_DIS == 1'b0) ? "TRUE" : "FALSE",
    //        CASCADE_MODE    =>  CP_MASTER,
    //        BITSLIP_EN      =>  CP_BITSLIP_EN,
    //        NUM_ICE         => (CP_NUM_ICE == 1'b0) ? 0 : 1,
    //        GRS_TYPE_Q0     =>  CP_INIT_Q0,
    //        GRS_TYPE_Q1     =>  CP_INIT_Q1,
    //        GRS_TYPE_Q2     =>  CP_INIT_Q2,
    //        GRS_TYPE_Q3     =>  CP_INIT_Q3,
    //        LRS_TYPE_Q0     => (CP_ISR_SYNC == "ASYNC" && CP_SRVAL_Q0 == "RESET") ? "ASYNC_RESET" :
    //                           (CP_ISR_SYNC == "ASYNC" && CP_SRVAL_Q0 == "SET")   ? "ASYNC_SET"   :
    //                           (CP_ISR_SYNC == "SYNC"  && CP_SRVAL_Q0 == "RESET") ? "SYNC_RESET"  :
    //                           (CP_ISR_SYNC == "SYNC"  && CP_SRVAL_Q0 == "SET")   ? "SYNC_SET"    : "",
    //        LRS_TYPE_Q1     => (CP_ISR_SYNC == "ASYNC" && CP_SRVAL_Q1 == "RESET") ? "ASYNC_RESET" :
    //                           (CP_ISR_SYNC == "ASYNC" && CP_SRVAL_Q1 == "SET")   ? "ASYNC_SET"   :
    //                           (CP_ISR_SYNC == "SYNC"  && CP_SRVAL_Q1 == "RESET") ? "SYNC_RESET"  :
    //                           (CP_ISR_SYNC == "SYNC"  && CP_SRVAL_Q1 == "SET")   ? "SYNC_SET"    : "",
    //        LRS_TYPE_Q2     => (CP_ISR_SYNC == "ASYNC" && CP_SRVAL_Q2 == "RESET") ? "ASYNC_RESET" :
    //                           (CP_ISR_SYNC == "ASYNC" && CP_SRVAL_Q2 == "SET")   ? "ASYNC_SET"   :
    //                           (CP_ISR_SYNC == "SYNC"  && CP_SRVAL_Q2 == "RESET") ? "SYNC_RESET"  :
    //                           (CP_ISR_SYNC == "SYNC"  && CP_SRVAL_Q2 == "SET")   ? "SYNC_SET"    : "",
    //        LRS_TYPE_Q3     => (CP_ISR_SYNC == "ASYNC" && CP_SRVAL_Q3 == "RESET") ? "ASYNC_RESET" :
    //                           (CP_ISR_SYNC == "ASYNC" && CP_SRVAL_Q3 == "SET")   ? "ASYNC_SET"   :
    //                           (CP_ISR_SYNC == "SYNC"  && CP_SRVAL_Q3 == "RESET") ? "SYNC_RESET"  :
    //                           (CP_ISR_SYNC == "SYNC"  && CP_SRVAL_Q3 == "SET")   ? "SYNC_SET"    : ""
    //    )
    //    port map
    //    (
    //        RST         =>  SR,
    //        ICE0        =>  ICE0,
    //        ICE1        =>  ICE1,
    //        //DESCLK      =>  ,
    //        //ICLK        =>  ,
    //        //ICLKB       =>  ,
    //        //OCLK        =>  ,
    //        //OCLKB       =>  ,
    //        //ICLKDIV     =>  ,
    //        DI          =>  DI_TO_GEAR,
    //        BITSLIP     =>  BITSLIP,
    //        ISHIFTIN0   =>  ISHIFTIN0,
    //        ISHIFTIN1   =>  ISHIFTIN1,
    //        IFIFO_WADDR =>  IFIFO_WADDR,
    //        IFIFO_RADDR =>  IFIFO_RADDR,
    //        DO          =>  RX_DATA,
    //        ISHIFTOUT0  =>  ISHIFTOUT0,
    //        ISHIFTOUT1  =>  ISHIFTOUT1
    //    );
    //}
    //else
    //{
    //}
};
