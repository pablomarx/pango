use pg2l_defs,pg2l100h_defs;//pg2l_ANALOG_SRB_inc;
//use pg2l_CCS_SRB_inc;

package pg2l100h_funcs_place
{
/********************************************************************************
********************************************************************************/
function place_cram_ctrl_tile(unsigned int tx,ty, tx_ccs, ty_ccs)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    string strVar;
    sprintf(strVar,"ntFRAME_ADDR_OU0_R3_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OU0_R3[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OU1_R3_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OU1_R3[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OU2_R3_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OU2_R3[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OU3_R3_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OU3_R3[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OD0_R3_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OD0_R3[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OD1_R3_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OD1_R3[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OD2_R3_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OD2_R3[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OD3_R3_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OD3_R3[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OU0_R2_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OU0_R2[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OU1_R2_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OU1_R2[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OU2_R2_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OU2_R2[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OU3_R2_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OU3_R2[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OD0_R2_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OD0_R2[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OD1_R2_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OD1_R2[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OD2_R2_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OD2_R2[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OD3_R2_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OD3_R2[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OU0_R1_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OU0_R1[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OU1_R1_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OU1_R1[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OU2_R1_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OU2_R1[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OU3_R1_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OU3_R1[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OD0_R1_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OD0_R1[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OD1_R1_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OD1_R1[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OD2_R1_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OD2_R1[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OD3_R1_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OD3_R1[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OU0_R0_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OU0_R0[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OU1_R0_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OU1_R0[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OU2_R0_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OU2_R0[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OU3_R0_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OU3_R0[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OD0_R0_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OD0_R0[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OD1_R0_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OD1_R0[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OD2_R0_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OD2_R0[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntFRAME_ADDR_OD3_R0_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OD3_R0[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntADDR_UP_R3_%d_%d",sx,sy);
    &wire ntRef_ntADDR_UP_R3[2011:0] = wire *strVar[2011:0];

    sprintf(strVar,"ntADDR_DN_R3_%d_%d",sx,sy);
    &wire ntRef_ntADDR_DN_R3[2011:0] = wire *strVar[2011:0];

    sprintf(strVar,"ntADDR_UP_R2_%d_%d",sx,sy);
    &wire ntRef_ntADDR_UP_R2[1659:0] = wire *strVar[1659:0];

    sprintf(strVar,"ntADDR_DN_R2_%d_%d",sx,sy);
    &wire ntRef_ntADDR_DN_R2[1659:0] = wire *strVar[1659:0];

    sprintf(strVar,"ntADDR_UP_R1_%d_%d",sx,sy);
    &wire ntRef_ntADDR_UP_R1[1659:0] = wire *strVar[1659:0];

    sprintf(strVar,"ntADDR_DN_R1_%d_%d",sx,sy);
    &wire ntRef_ntADDR_DN_R1[1659:0] = wire *strVar[1659:0];

    sprintf(strVar,"ntADDR_UP_R0_%d_%d",sx,sy);
    &wire ntRef_ntADDR_UP_R0[2011:0] = wire *strVar[2011:0];

    sprintf(strVar,"ntADDR_DN_R0_%d_%d",sx,sy);
    &wire ntRef_ntADDR_DN_R0[2011:0] = wire *strVar[2011:0];

    sprintf(strVar,"ntDATA_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_L_1_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_1_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_L_1_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_1_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_L_2_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_2_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_L_2_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_2_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_L_3_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_3_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_L_3_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_3_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_L_4_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_4_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_L_4_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_4_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_R_1_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_1_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_R_1_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_1_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_R_2_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_2_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_R_2_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_2_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_R_3_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_3_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_R_3_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_3_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_R_4_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_4_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_R_4_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_4_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_R_5_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_5_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_R_5_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_5_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_R_6_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_6_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_R_6_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_6_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_R_7_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_7_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_R_7_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_7_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_R_8_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_8_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_R_8_R0_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_8_R0[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_L_1_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_1_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_L_1_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_1_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_L_2_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_2_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_L_2_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_2_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_L_3_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_3_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_L_3_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_3_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_L_4_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_4_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_L_4_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_4_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_R_1_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_1_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_R_1_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_1_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_R_2_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_2_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_R_2_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_2_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_R_3_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_3_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_R_3_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_3_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_R_4_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_4_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_R_4_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_4_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_R_5_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_5_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_R_5_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_5_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_R_6_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_6_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_R_6_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_6_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_R_7_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_7_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_R_7_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_7_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_R_8_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_8_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATAN_R_8_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_8_R1[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_L_1_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_1_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_L_1_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_1_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_L_2_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_2_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_L_2_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_2_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_L_3_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_3_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_L_3_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_3_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_L_4_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_4_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_L_4_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_4_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_R_1_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_1_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_R_1_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_1_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_R_2_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_2_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_R_2_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_2_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_R_3_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_3_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_R_3_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_3_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_R_4_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_4_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_R_4_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_4_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_R_5_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_5_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_R_5_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_5_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_R_6_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_6_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_R_6_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_6_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_R_7_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_7_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_R_7_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_7_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_R_8_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_8_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_R_8_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_8_R2[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_L_1_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_1_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_L_1_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_1_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_L_2_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_2_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_L_2_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_2_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_L_3_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_3_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_L_3_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_3_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_L_4_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_4_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_L_4_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_4_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_R_1_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_1_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_R_1_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_1_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_R_2_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_2_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_R_2_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_2_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_R_3_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_3_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_R_3_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_3_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_R_4_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_4_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_R_4_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_4_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_R_5_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_5_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_R_5_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_5_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_R_6_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_6_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_R_6_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_6_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATA_R_7_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_7_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_R_7_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_7_R3[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_R_8_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_8_R3[3231:0] = wire *strVar[3231:0];
 
    sprintf(strVar,"ntDATAN_R_8_R3_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_8_R3[3231:0] = wire *strVar[3231:0];

    sprintf(strVar,"ntDATA_BACK_%d_%d",sx,sy);
    &wire ntRef_ntDATA_BACK[31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntTIEL1_%d_%d",sx,sy);
    &wire ntRef_ntTIEL1 = wire *strVar;

    sprintf(strVar,"ntTIEL2_%d_%d",sx,sy);
    &wire ntRef_ntTIEL2 = wire *strVar;

    sprintf(strVar,"ntMCLKB_OU_R0_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OU_R0[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntMCLKB_OD_R0_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OD_R0[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntMCE_OU_R0_%d_%d",sx,sy);
    &wire ntRef_ntMCE_OU_R0[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntMCE_OD_R0_%d_%d",sx,sy);
    &wire ntRef_ntMCE_OD_R0[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntMWR_OU_R0_%d_%d",sx,sy);
    &wire ntRef_ntMWR_OU_R0[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntMWR_OD_R0_%d_%d",sx,sy);
    &wire ntRef_ntMWR_OD_R0[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntMCLKB_OU_R1_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OU_R1[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntMCLKB_OD_R1_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OD_R1[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntMCE_OU_R1_%d_%d",sx,sy);
    &wire ntRef_ntMCE_OU_R1[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntMCE_OD_R1_%d_%d",sx,sy);
    &wire ntRef_ntMCE_OD_R1[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntMWR_OU_R1_%d_%d",sx,sy);
    &wire ntRef_ntMWR_OU_R1[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntMWR_OD_R1_%d_%d",sx,sy);
    &wire ntRef_ntMWR_OD_R1[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntMCLKB_OU_R2_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OU_R2[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntMCLKB_OD_R2_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OD_R2[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntMCE_OU_R2_%d_%d",sx,sy);
    &wire ntRef_ntMCE_OU_R2[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntMCE_OD_R2_%d_%d",sx,sy);
    &wire ntRef_ntMCE_OD_R2[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntMWR_OU_R2_%d_%d",sx,sy);
    &wire ntRef_ntMWR_OU_R2[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntMWR_OD_R2_%d_%d",sx,sy);
    &wire ntRef_ntMWR_OD_R2[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntMCLKB_OU_R3_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OU_R3[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntMCLKB_OD_R3_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OD_R3[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntMCE_OU_R3_%d_%d",sx,sy);
    &wire ntRef_ntMCE_OU_R3[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntMCE_OD_R3_%d_%d",sx,sy);
    &wire ntRef_ntMCE_OD_R3[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntMWR_OU_R3_%d_%d",sx,sy);
    &wire ntRef_ntMWR_OU_R3[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntMWR_OD_R3_%d_%d",sx,sy);
    &wire ntRef_ntMWR_OD_R3[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntNONDRM_END_%d_%d",sx,sy);
    &wire ntRef_ntNONDRM_END = wire *strVar;

    sprintf(strVar,"ntMASK_N_UP_R0_%d_%d",sx,sy);
    &wire ntRef_ntMASK_N_UP_R0[27:0] = wire *strVar[27:0];

    sprintf(strVar,"ntMASK_N_DN_R0_%d_%d",sx,sy);
    &wire ntRef_ntMASK_N_DN_R0[27:0] = wire *strVar[27:0];

    sprintf(strVar,"ntMASK_N_UP_R1_%d_%d",sx,sy);
    &wire ntRef_ntMASK_N_UP_R1[21:0] = wire *strVar[21:0];

    sprintf(strVar,"ntMASK_N_DN_R1_%d_%d",sx,sy);
    &wire ntRef_ntMASK_N_DN_R1[21:0] = wire *strVar[21:0];

    sprintf(strVar,"ntMASK_N_UP_R2_%d_%d",sx,sy);
    &wire ntRef_ntMASK_N_UP_R2[21:0] = wire *strVar[21:0];

    sprintf(strVar,"ntMASK_N_DN_R2_%d_%d",sx,sy);
    &wire ntRef_ntMASK_N_DN_R2[21:0] = wire *strVar[21:0];

    sprintf(strVar,"ntMASK_N_UP_R3_%d_%d",sx,sy);
    &wire ntRef_ntMASK_N_UP_R3[27:0] = wire *strVar[27:0];

    sprintf(strVar,"ntMASK_N_DN_R3_%d_%d",sx,sy);
    &wire ntRef_ntMASK_N_DN_R3[27:0] = wire *strVar[27:0];

    sprintf(strVar,"ntREAD2T0_UP_R0_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T0_UP_R0[27:0] = wire *strVar[27:0];

    sprintf(strVar,"ntREAD2T0_DN_R0_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T0_DN_R0[27:0] = wire *strVar[27:0];

    sprintf(strVar,"ntREAD2T1_UP_R0_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T1_UP_R0[27:0] = wire *strVar[27:0];

    sprintf(strVar,"ntREAD2T1_DN_R0_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T1_DN_R0[27:0] = wire *strVar[27:0];

    sprintf(strVar,"ntREAD2T0_UP_R1_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T0_UP_R1[21:0] = wire *strVar[21:0];

    sprintf(strVar,"ntREAD2T0_DN_R1_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T0_DN_R1[21:0] = wire *strVar[21:0];

    sprintf(strVar,"ntREAD2T1_UP_R1_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T1_UP_R1[21:0] = wire *strVar[21:0];

    sprintf(strVar,"ntREAD2T1_DN_R1_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T1_DN_R1[21:0] = wire *strVar[21:0];

    sprintf(strVar,"ntREAD2T0_UP_R2_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T0_UP_R2[21:0] = wire *strVar[21:0];

    sprintf(strVar,"ntREAD2T0_DN_R2_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T0_DN_R2[21:0] = wire *strVar[21:0];

    sprintf(strVar,"ntREAD2T1_UP_R2_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T1_UP_R2[21:0] = wire *strVar[21:0];

    sprintf(strVar,"ntREAD2T1_DN_R2_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T1_DN_R2[21:0] = wire *strVar[21:0];

    sprintf(strVar,"ntREAD2T0_UP_R3_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T0_UP_R3[27:0] = wire *strVar[27:0];

    sprintf(strVar,"ntREAD2T0_DN_R3_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T0_DN_R3[27:0] = wire *strVar[27:0];

    sprintf(strVar,"ntREAD2T1_UP_R3_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T1_UP_R3[27:0] = wire *strVar[27:0];

    sprintf(strVar,"ntREAD2T1_DN_R3_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T1_DN_R3[27:0] = wire *strVar[27:0];

    sprintf(strVar,"ntBSRMODE1_OL_R0_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE1_OL_R0 = wire *strVar;

    sprintf(strVar,"ntBSRMODE2_OL_R0_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE2_OL_R0 = wire *strVar;

    sprintf(strVar,"ntBSRMODE3_OL_R0_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE3_OL_R0 = wire *strVar;

    sprintf(strVar,"ntBSRRST_OL_R0_%d_%d",sx,sy);
    &wire ntRef_ntBSRRST_OL_R0 = wire *strVar;
  
    sprintf(strVar,"ntGOUTEN_OL_R0_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_OL_R0[4:0] = wire *strVar[4:0];
  
    sprintf(strVar,"ntBSRSHIFT_OL_R0_%d_%d",sx,sy);
    &wire ntRef_ntBSRSHIFT_OL_R0 = wire *strVar;

    sprintf(strVar,"ntBSRUPDATE_OL_R0_%d_%d",sx,sy);
    &wire ntRef_ntBSRUPDATE_OL_R0 = wire *strVar;

    sprintf(strVar,"ntGRS_N_OL_R0_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OL_R0[4:0] = wire *strVar[4:0];
   
    sprintf(strVar,"ntGWEN_OL_R0_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OL_R0[4:0] = wire *strVar[4:0];
    
    sprintf(strVar,"ntPOR_N_OL_R0_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OL_R0[4:0] = wire *strVar[4:0];
   
    sprintf(strVar,"ntPUP_REL_N_OL_R0_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OL_R0[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntGLOGEN_OL_R0_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OL_R0[4:0] = wire *strVar[4:0];
  
    sprintf(strVar,"ntPOR_N_1P8_OL_R0_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P8_OL_R0[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntPRCFG_N_OL_R0_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_N_OL_R0[4:0] = wire *strVar[4:0];
 
    sprintf(strVar,"ntRST_N_OL_R0_%d_%d",sx,sy);
    &wire ntRef_ntRST_N_OL_R0[4:0] = wire *strVar[4:0];
   
    sprintf(strVar,"ntBSRMODE1_OR_R0_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE1_OR_R0 = wire *strVar;

    sprintf(strVar,"ntBSRMODE2_OR_R0_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE2_OR_R0 = wire *strVar;

    sprintf(strVar,"ntBSRMODE3_OR_R0_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE3_OR_R0 = wire *strVar;

    sprintf(strVar,"ntBSRRST_OR_R0_%d_%d",sx,sy);
    &wire ntRef_ntBSRRST_OR_R0 = wire *strVar;
  
    sprintf(strVar,"ntGOUTEN_OR_R0_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_OR_R0[8:0] = wire *strVar[8:0];
  
    sprintf(strVar,"ntBSRSHIFT_OR_R0_%d_%d",sx,sy);
    &wire ntRef_ntBSRSHIFT_OR_R0 = wire *strVar;

    sprintf(strVar,"ntBSRUPDATE_OR_R0_%d_%d",sx,sy);
    &wire ntRef_ntBSRUPDATE_OR_R0 = wire *strVar;

    sprintf(strVar,"ntGRS_N_OR_R0_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OR_R0[8:0] = wire *strVar[8:0];
   
    sprintf(strVar,"ntGWEN_OR_R0_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OR_R0[8:0] = wire *strVar[8:0];
    
    sprintf(strVar,"ntPOR_N_OR_R0_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OR_R0[8:0] = wire *strVar[8:0];
   
    sprintf(strVar,"ntPUP_REL_N_OR_R0_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OR_R0[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntGLOGEN_OR_R0_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OR_R0[8:0] = wire *strVar[8:0];
  
    sprintf(strVar,"ntPOR_N_1P8_OR_R0_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P8_OR_R0[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntPRCFG_N_OR_R0_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_N_OR_R0[8:0] = wire *strVar[8:0];
 
    sprintf(strVar,"ntRST_N_OR_R0_%d_%d",sx,sy);
    &wire ntRef_ntRST_N_OR_R0[8:0] = wire *strVar[8:0];
   
    sprintf(strVar,"ntBSRMODE1_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE1_OL_R1 = wire *strVar;

    sprintf(strVar,"ntBSRMODE2_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE2_OL_R1 = wire *strVar;

    sprintf(strVar,"ntBSRMODE3_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE3_OL_R1 = wire *strVar;

    sprintf(strVar,"ntBSRRST_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRRST_OL_R1 = wire *strVar;
  
    sprintf(strVar,"ntGOUTEN_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_OL_R1[3:0] = wire *strVar[3:0];
  
    sprintf(strVar,"ntBSRSHIFT_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRSHIFT_OL_R1 = wire *strVar;

    sprintf(strVar,"ntBSRUPDATE_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRUPDATE_OL_R1 = wire *strVar;

    sprintf(strVar,"ntGRS_N_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OL_R1[3:0] = wire *strVar[3:0];
   
    sprintf(strVar,"ntGWEN_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OL_R1[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntPOR_N_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OL_R1[3:0] = wire *strVar[3:0];
   
    sprintf(strVar,"ntPUP_REL_N_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OL_R1[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntGLOGEN_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OL_R1[3:0] = wire *strVar[3:0];
  
    sprintf(strVar,"ntPOR_N_1P8_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P8_OL_R1[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntPRCFG_N_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_N_OL_R1[3:0] = wire *strVar[3:0];
 
    sprintf(strVar,"ntRST_N_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntRST_N_OL_R1[3:0] = wire *strVar[3:0];
   
    sprintf(strVar,"ntBSRMODE1_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE1_OR_R1 = wire *strVar;

    sprintf(strVar,"ntBSRMODE2_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE2_OR_R1 = wire *strVar;

    sprintf(strVar,"ntBSRMODE3_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE3_OR_R1 = wire *strVar;

    sprintf(strVar,"ntBSRRST_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRRST_OR_R1 = wire *strVar;
  
    sprintf(strVar,"ntGOUTEN_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_OR_R1[8:0] = wire *strVar[8:0];
  
    sprintf(strVar,"ntBSRSHIFT_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRSHIFT_OR_R1 = wire *strVar;

    sprintf(strVar,"ntBSRUPDATE_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRUPDATE_OR_R1 = wire *strVar;

    sprintf(strVar,"ntGRS_N_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OR_R1[8:0] = wire *strVar[8:0];
   
    sprintf(strVar,"ntGWEN_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OR_R1[8:0] = wire *strVar[8:0];
    
    sprintf(strVar,"ntPOR_N_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OR_R1[8:0] = wire *strVar[8:0];
   
    sprintf(strVar,"ntPUP_REL_N_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OR_R1[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntGLOGEN_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OR_R1[8:0] = wire *strVar[8:0];
  
    sprintf(strVar,"ntPOR_N_1P8_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P8_OR_R1[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntPRCFG_N_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_N_OR_R1[8:0] = wire *strVar[8:0];
 
    sprintf(strVar,"ntRST_N_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntRST_N_OR_R1[8:0] = wire *strVar[8:0];
   
    sprintf(strVar,"ntBSRMODE1_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE1_OL_R2 = wire *strVar;

    sprintf(strVar,"ntBSRMODE2_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE2_OL_R2 = wire *strVar;

    sprintf(strVar,"ntBSRMODE3_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE3_OL_R2 = wire *strVar;

    sprintf(strVar,"ntBSRRST_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRRST_OL_R2 = wire *strVar;
  
    sprintf(strVar,"ntGOUTEN_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_OL_R2[3:0] = wire *strVar[3:0];
  
    sprintf(strVar,"ntBSRSHIFT_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRSHIFT_OL_R2 = wire *strVar;

    sprintf(strVar,"ntBSRUPDATE_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRUPDATE_OL_R2 = wire *strVar;

    sprintf(strVar,"ntGRS_N_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OL_R2[3:0] = wire *strVar[3:0];
   
    sprintf(strVar,"ntGWEN_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OL_R2[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntPOR_N_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OL_R2[3:0] = wire *strVar[3:0];
   
    sprintf(strVar,"ntPUP_REL_N_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OL_R2[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntGLOGEN_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OL_R2[3:0] = wire *strVar[3:0];
  
    sprintf(strVar,"ntPOR_N_1P8_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P8_OL_R2[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntPRCFG_N_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_N_OL_R2[3:0] = wire *strVar[3:0];
 
    sprintf(strVar,"ntRST_N_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntRST_N_OL_R2[3:0] = wire *strVar[3:0];
   
    sprintf(strVar,"ntBSRMODE1_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE1_OR_R2 = wire *strVar;

    sprintf(strVar,"ntBSRMODE2_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE2_OR_R2 = wire *strVar;

    sprintf(strVar,"ntBSRMODE3_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE3_OR_R2 = wire *strVar;

    sprintf(strVar,"ntBSRRST_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRRST_OR_R2 = wire *strVar;
  
    sprintf(strVar,"ntGOUTEN_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_OR_R2[8:0] = wire *strVar[8:0];
  
    sprintf(strVar,"ntBSRSHIFT_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRSHIFT_OR_R2 = wire *strVar;

    sprintf(strVar,"ntBSRUPDATE_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRUPDATE_OR_R2 = wire *strVar;

    sprintf(strVar,"ntGRS_N_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OR_R2[8:0] = wire *strVar[8:0];
   
    sprintf(strVar,"ntGWEN_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OR_R2[8:0] = wire *strVar[8:0];
    
    sprintf(strVar,"ntPOR_N_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OR_R2[8:0] = wire *strVar[8:0];
   
    sprintf(strVar,"ntPUP_REL_N_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OR_R2[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntGLOGEN_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OR_R2[8:0] = wire *strVar[8:0];
  
    sprintf(strVar,"ntPOR_N_1P8_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P8_OR_R2[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntPRCFG_N_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_N_OR_R2[8:0] = wire *strVar[8:0];
 
    sprintf(strVar,"ntRST_N_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntRST_N_OR_R2[8:0] = wire *strVar[8:0];
   
    sprintf(strVar,"ntBSRMODE1_OL_R3_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE1_OL_R3 = wire *strVar;

    sprintf(strVar,"ntBSRMODE2_OL_R3_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE2_OL_R3 = wire *strVar;

    sprintf(strVar,"ntBSRMODE3_OL_R3_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE3_OL_R3 = wire *strVar;

    sprintf(strVar,"ntBSRRST_OL_R3_%d_%d",sx,sy);
    &wire ntRef_ntBSRRST_OL_R3 = wire *strVar;
  
    sprintf(strVar,"ntGOUTEN_OL_R3_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_OL_R3[4:0] = wire *strVar[4:0];
  
    sprintf(strVar,"ntBSRSHIFT_OL_R3_%d_%d",sx,sy);
    &wire ntRef_ntBSRSHIFT_OL_R3 = wire *strVar;

    sprintf(strVar,"ntBSRUPDATE_OL_R3_%d_%d",sx,sy);
    &wire ntRef_ntBSRUPDATE_OL_R3 = wire *strVar;

    sprintf(strVar,"ntGRS_N_OL_R3_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OL_R3[4:0] = wire *strVar[4:0];
   
    sprintf(strVar,"ntGWEN_OL_R3_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OL_R3[4:0] = wire *strVar[4:0];
    
    sprintf(strVar,"ntPOR_N_OL_R3_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OL_R3[4:0] = wire *strVar[4:0];
   
    sprintf(strVar,"ntPUP_REL_N_OL_R3_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OL_R3[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntGLOGEN_OL_R3_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OL_R3[4:0] = wire *strVar[4:0];
  
    sprintf(strVar,"ntPOR_N_1P8_OL_R3_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P8_OL_R3[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntPRCFG_N_OL_R3_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_N_OL_R3[4:0] = wire *strVar[4:0];
 
    sprintf(strVar,"ntRST_N_OL_R3_%d_%d",sx,sy);
    &wire ntRef_ntRST_N_OL_R3[4:0] = wire *strVar[4:0];
   
    sprintf(strVar,"ntBSRMODE1_OR_R3_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE1_OR_R3 = wire *strVar;

    sprintf(strVar,"ntBSRMODE2_OR_R3_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE2_OR_R3 = wire *strVar;

    sprintf(strVar,"ntBSRMODE3_OR_R3_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE3_OR_R3 = wire *strVar;

    sprintf(strVar,"ntBSRRST_OR_R3_%d_%d",sx,sy);
    &wire ntRef_ntBSRRST_OR_R3 = wire *strVar;
  
    sprintf(strVar,"ntGOUTEN_OR_R3_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_OR_R3[8:0] = wire *strVar[8:0];
  
    sprintf(strVar,"ntBSRSHIFT_OR_R3_%d_%d",sx,sy);
    &wire ntRef_ntBSRSHIFT_OR_R3 = wire *strVar;

    sprintf(strVar,"ntBSRUPDATE_OR_R3_%d_%d",sx,sy);
    &wire ntRef_ntBSRUPDATE_OR_R3 = wire *strVar;

    sprintf(strVar,"ntGRS_N_OR_R3_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OR_R3[8:0] = wire *strVar[8:0];
   
    sprintf(strVar,"ntGWEN_OR_R3_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OR_R3[8:0] = wire *strVar[8:0];
    
    sprintf(strVar,"ntPOR_N_OR_R3_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OR_R3[8:0] = wire *strVar[8:0];
   
    sprintf(strVar,"ntPUP_REL_N_OR_R3_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OR_R3[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntGLOGEN_OR_R3_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OR_R3[8:0] = wire *strVar[8:0];
  
    sprintf(strVar,"ntPOR_N_1P8_OR_R3_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P8_OR_R3[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntPRCFG_N_OR_R3_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_N_OR_R3[8:0] = wire *strVar[8:0];
 
    sprintf(strVar,"ntRST_N_OR_R3_%d_%d",sx,sy);
    &wire ntRef_ntRST_N_OR_R3[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntCOLUMN_INC_O_%d_%d",sx,sy);
    &wire ntRef_ntCOLUMN_INC_O = wire *strVar;
 
    sprintf(strVar,"ntREGION_INC_O_%d_%d",sx,sy);
    &wire ntRef_ntREGION_INC_O = wire *strVar;
 
    sprintf(strVar,"ntREGION_END_O_%d_%d",sx,sy);
    &wire ntRef_ntREGION_END_O = wire *strVar;

    sprintf(strVar,"ntLDO_WL_TEST_OUT_R0_%d_%d",sx,sy);
    &wire ntRef_ntLDO_WL_TEST_OUT_R0 = wire*strVar;

    sprintf(strVar,"ntLDO_WL_TEST_OUT_R1_%d_%d",sx,sy);
    &wire ntRef_ntLDO_WL_TEST_OUT_R1 = wire*strVar;

    sprintf(strVar,"ntLDO_WL_TEST_OUT_R2_%d_%d",sx,sy);
    &wire ntRef_ntLDO_WL_TEST_OUT_R2 = wire*strVar;

    sprintf(strVar,"ntLDO_WL_TEST_OUT_R3_%d_%d",sx,sy);
    &wire ntRef_ntLDO_WL_TEST_OUT_R3 = wire*strVar;

    sprintf(strVar,"ntLDO_CRAM_TEST_OUT_R0_%d_%d",sx,sy);
    &wire ntRef_ntLDO_CRAM_TEST_OUT_R0 = wire*strVar;

    sprintf(strVar,"ntLDO_CRAM_TEST_OUT_R1_%d_%d",sx,sy);
    &wire ntRef_ntLDO_CRAM_TEST_OUT_R1 = wire*strVar;

    sprintf(strVar,"ntLDO_CRAM_TEST_OUT_R2_%d_%d",sx,sy);
    &wire ntRef_ntLDO_CRAM_TEST_OUT_R2 = wire*strVar;

    sprintf(strVar,"ntLDO_CRAM_TEST_OUT_R3_%d_%d",sx,sy);
    &wire ntRef_ntLDO_CRAM_TEST_OUT_R3 = wire*strVar;

    sprintf(strVar,"ntVCC_WL_R0_%d_%d",sx,sy);
    &wire ntRef_ntVCC_WL_R0 = wire*strVar;

    sprintf(strVar,"ntVCC_WL_R1_%d_%d",sx,sy);
    &wire ntRef_ntVCC_WL_R1 = wire*strVar;

    sprintf(strVar,"ntVCC_WL_R2_%d_%d",sx,sy);
    &wire ntRef_ntVCC_WL_R2 = wire*strVar;

    sprintf(strVar,"ntVCC_WL_R3_%d_%d",sx,sy);
    &wire ntRef_ntVCC_WL_R3 = wire*strVar;

    sprintf(strVar,"ntMEM_INIT_OL_R0_%d_%d",sx,sy);
    &wire ntRef_ntMEM_INIT_OL_R0 = wire*strVar;

    sprintf(strVar,"ntAC_TEST_OL_R0_%d_%d",sx,sy);
    &wire ntRef_ntAC_TEST_OL_R0 = wire*strVar;

    sprintf(strVar,"ntAC_MODE_OL_R0_%d_%d",sx,sy);
    &wire ntRef_ntAC_MODE_OL_R0 = wire*strVar;

    sprintf(strVar,"ntMEM_INIT_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntMEM_INIT_OL_R1 = wire*strVar;

    sprintf(strVar,"ntAC_TEST_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntAC_TEST_OL_R1 = wire*strVar;

    sprintf(strVar,"ntAC_MODE_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntAC_MODE_OL_R1 = wire*strVar;

    sprintf(strVar,"ntMEM_INIT_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntMEM_INIT_OL_R2 = wire*strVar;

    sprintf(strVar,"ntAC_TEST_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntAC_TEST_OL_R2 = wire*strVar;

    sprintf(strVar,"ntAC_MODE_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntAC_MODE_OL_R2 = wire*strVar;

    sprintf(strVar,"ntMEM_INIT_OL_R3_%d_%d",sx,sy);
    &wire ntRef_ntMEM_INIT_OL_R3 = wire*strVar;

    sprintf(strVar,"ntAC_TEST_OL_R3_%d_%d",sx,sy);
    &wire ntRef_ntAC_TEST_OL_R3 = wire*strVar;

    sprintf(strVar,"ntAC_MODE_OL_R3_%d_%d",sx,sy);
    &wire ntRef_ntAC_MODE_OL_R3 = wire*strVar;

    sprintf(strVar,"ntMEM_INIT_OR_R0_%d_%d",sx,sy);
    &wire ntRef_ntMEM_INIT_OR_R0 = wire*strVar;

    sprintf(strVar,"ntAC_TEST_OR_R0_%d_%d",sx,sy);
    &wire ntRef_ntAC_TEST_OR_R0 = wire*strVar;

    sprintf(strVar,"ntAC_MODE_OR_R0_%d_%d",sx,sy);
    &wire ntRef_ntAC_MODE_OR_R0 = wire*strVar;

    sprintf(strVar,"ntMEM_INIT_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntMEM_INIT_OR_R1 = wire*strVar;

    sprintf(strVar,"ntAC_TEST_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntAC_TEST_OR_R1 = wire*strVar;

    sprintf(strVar,"ntAC_MODE_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntAC_MODE_OR_R1 = wire*strVar;

    sprintf(strVar,"ntMEM_INIT_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntMEM_INIT_OR_R2 = wire*strVar;

    sprintf(strVar,"ntAC_TEST_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntAC_TEST_OR_R2 = wire*strVar;

    sprintf(strVar,"ntAC_MODE_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntAC_MODE_OR_R2 = wire*strVar;

    sprintf(strVar,"ntMEM_INIT_OR_R3_%d_%d",sx,sy);
    &wire ntRef_ntMEM_INIT_OR_R3 = wire*strVar;

    sprintf(strVar,"ntAC_TEST_OR_R3_%d_%d",sx,sy);
    &wire ntRef_ntAC_TEST_OR_R3 = wire*strVar;

    sprintf(strVar,"ntAC_MODE_OR_R3_%d_%d",sx,sy);
    &wire ntRef_ntAC_MODE_OR_R3 = wire*strVar;

    sprintf(strVar,"ntERASE_OL_R0_%d_%d",sx,sy);
    &wire ntRef_ntERASE_OL_R0[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntERASE_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntERASE_OL_R1[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntERASE_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntERASE_OL_R2[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntERASE_OL_R3_%d_%d",sx,sy);
    &wire ntRef_ntERASE_OL_R3[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntERASE_OR_R0_%d_%d",sx,sy);
    &wire ntRef_ntERASE_OR_R0[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntERASE_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntERASE_OR_R1[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntERASE_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntERASE_OR_R2[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntERASE_OR_R3_%d_%d",sx,sy);
    &wire ntRef_ntERASE_OR_R3[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntPROG_ON_OL_R0_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON_OL_R0[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntPROG_ON_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON_OL_R1[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntPROG_ON_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON_OL_R2[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntPROG_ON_OL_R3_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON_OL_R3[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntPROG_ON_OR_R0_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON_OR_R0[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntPROG_ON_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON_OR_R1[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntPROG_ON_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON_OR_R2[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntPROG_ON_OR_R3_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON_OR_R3[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntWL_ON_OL_R0_%d_%d",sx,sy);
    &wire ntRef_ntWL_ON_OL_R0[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntWL_ON_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntWL_ON_OL_R1[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntWL_ON_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntWL_ON_OL_R2[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntWL_ON_OL_R3_%d_%d",sx,sy);
    &wire ntRef_ntWL_ON_OL_R3[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntWL_ON_OR_R0_%d_%d",sx,sy);
    &wire ntRef_ntWL_ON_OR_R0[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntWL_ON_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntWL_ON_OR_R1[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntWL_ON_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntWL_ON_OR_R2[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntWL_ON_OR_R3_%d_%d",sx,sy);
    &wire ntRef_ntWL_ON_OR_R3[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntFRAME_ADDR_BLINT_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_BLINT[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCOLUMN_ADDR_BLINT_%d_%d",sx,sy);
    &wire ntRef_ntCOLUMN_ADDR_BLINT[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntREAD_BLINT_%d_%d",sx,sy);
    &wire ntRef_ntREAD_BLINT = wire *strVar;

    sprintf(strVar, "CRAM_CTRL_100H_TILE_%d_%d", sx, sy);
      device CRAM_CTRL_100H_TILE *strVar
        port map(
                  BSRMODE1_OL_R0     => ntRef_ntBSRMODE1_OL_R0,
                  BSRMODE2_OL_R0     => ntRef_ntBSRMODE2_OL_R0,
                  BSRMODE3_OL_R0     => ntRef_ntBSRMODE3_OL_R0,
                  BSRRST_OL_R0       => ntRef_ntBSRRST_OL_R0,
                  GOUTEN_OL_R0       => ntRef_ntGOUTEN_OL_R0,
                  BSRSHIFT_OL_R0     => ntRef_ntBSRSHIFT_OL_R0,
                  BSRUPDATE_OL_R0    => ntRef_ntBSRUPDATE_OL_R0,
                  GRS_N_OL_R0        => ntRef_ntGRS_N_OL_R0,
                  GWEN_OL_R0         => ntRef_ntGWEN_OL_R0,
                  POR_N_OL_R0        => ntRef_ntPOR_N_OL_R0,
                  PUP_REL_N_OL_R0    => ntRef_ntPUP_REL_N_OL_R0,
                  GLOGEN_OL_R0       => ntRef_ntGLOGEN_OL_R0,
                  POR_N_1P8_OL_R0    => ntRef_ntPOR_N_1P8_OL_R0,
                  PRCFG_N_OL_R0      => ntRef_ntPRCFG_N_OL_R0,
                  RST_N_OL_R0        => ntRef_ntRST_N_OL_R0,
                  BSRMODE1_OR_R0     => ntRef_ntBSRMODE1_OR_R0,
                  BSRMODE2_OR_R0     => ntRef_ntBSRMODE2_OR_R0,
                  BSRMODE3_OR_R0     => ntRef_ntBSRMODE3_OR_R0,
                  BSRRST_OR_R0       => ntRef_ntBSRRST_OR_R0,
                  GOUTEN_OR_R0       => ntRef_ntGOUTEN_OR_R0,
                  BSRSHIFT_OR_R0     => ntRef_ntBSRSHIFT_OR_R0,
                  BSRUPDATE_OR_R0    => ntRef_ntBSRUPDATE_OR_R0,
                  GRS_N_OR_R0        => ntRef_ntGRS_N_OR_R0,
                  GWEN_OR_R0         => ntRef_ntGWEN_OR_R0,
                  POR_N_OR_R0        => ntRef_ntPOR_N_OR_R0,
                  PUP_REL_N_OR_R0    => ntRef_ntPUP_REL_N_OR_R0,
                  GLOGEN_OR_R0       => ntRef_ntGLOGEN_OR_R0,
                  POR_N_1P8_OR_R0    => ntRef_ntPOR_N_1P8_OR_R0,
                  PRCFG_N_OR_R0      => ntRef_ntPRCFG_N_OR_R0,
                  RST_N_OR_R0        => ntRef_ntRST_N_OR_R0,
                  BSRMODE1_OL_R1     => ntRef_ntBSRMODE1_OL_R1,
                  BSRMODE2_OL_R1     => ntRef_ntBSRMODE2_OL_R1,
                  BSRMODE3_OL_R1     => ntRef_ntBSRMODE3_OL_R1,
                  BSRRST_OL_R1       => ntRef_ntBSRRST_OL_R1,
                  GOUTEN_OL_R1       => ntRef_ntGOUTEN_OL_R1,
                  BSRSHIFT_OL_R1     => ntRef_ntBSRSHIFT_OL_R1,
                  BSRUPDATE_OL_R1    => ntRef_ntBSRUPDATE_OL_R1,
                  GRS_N_OL_R1        => ntRef_ntGRS_N_OL_R1,
                  GWEN_OL_R1         => ntRef_ntGWEN_OL_R1,
                  POR_N_OL_R1        => ntRef_ntPOR_N_OL_R1,
                  PUP_REL_N_OL_R1    => ntRef_ntPUP_REL_N_OL_R1,
                  GLOGEN_OL_R1       => ntRef_ntGLOGEN_OL_R1,
                  POR_N_1P8_OL_R1    => ntRef_ntPOR_N_1P8_OL_R1,
                  PRCFG_N_OL_R1      => ntRef_ntPRCFG_N_OL_R1,
                  RST_N_OL_R1        => ntRef_ntRST_N_OL_R1,
                  BSRMODE1_OR_R1     => ntRef_ntBSRMODE1_OR_R1,
                  BSRMODE2_OR_R1     => ntRef_ntBSRMODE2_OR_R1,
                  BSRMODE3_OR_R1     => ntRef_ntBSRMODE3_OR_R1,
                  BSRRST_OR_R1       => ntRef_ntBSRRST_OR_R1,
                  GOUTEN_OR_R1       => ntRef_ntGOUTEN_OR_R1,
                  BSRSHIFT_OR_R1     => ntRef_ntBSRSHIFT_OR_R1,
                  BSRUPDATE_OR_R1    => ntRef_ntBSRUPDATE_OR_R1,
                  GRS_N_OR_R1        => ntRef_ntGRS_N_OR_R1,
                  GWEN_OR_R1         => ntRef_ntGWEN_OR_R1,
                  POR_N_OR_R1        => ntRef_ntPOR_N_OR_R1,
                  PUP_REL_N_OR_R1    => ntRef_ntPUP_REL_N_OR_R1,
                  GLOGEN_OR_R1       => ntRef_ntGLOGEN_OR_R1,
                  POR_N_1P8_OR_R1    => ntRef_ntPOR_N_1P8_OR_R1,
                  PRCFG_N_OR_R1      => ntRef_ntPRCFG_N_OR_R1,
                  RST_N_OR_R1        => ntRef_ntRST_N_OR_R1,
                  BSRMODE1_OL_R2     => ntRef_ntBSRMODE1_OL_R2,
                  BSRMODE2_OL_R2     => ntRef_ntBSRMODE2_OL_R2,
                  BSRMODE3_OL_R2     => ntRef_ntBSRMODE3_OL_R2,
                  BSRRST_OL_R2       => ntRef_ntBSRRST_OL_R2,
                  GOUTEN_OL_R2       => ntRef_ntGOUTEN_OL_R2,
                  BSRSHIFT_OL_R2     => ntRef_ntBSRSHIFT_OL_R2,
                  BSRUPDATE_OL_R2    => ntRef_ntBSRUPDATE_OL_R2,
                  GRS_N_OL_R2        => ntRef_ntGRS_N_OL_R2,
                  GWEN_OL_R2         => ntRef_ntGWEN_OL_R2,
                  POR_N_OL_R2        => ntRef_ntPOR_N_OL_R2,
                  PUP_REL_N_OL_R2    => ntRef_ntPUP_REL_N_OL_R2,
                  GLOGEN_OL_R2       => ntRef_ntGLOGEN_OL_R2,
                  POR_N_1P8_OL_R2    => ntRef_ntPOR_N_1P8_OL_R2,
                  PRCFG_N_OL_R2      => ntRef_ntPRCFG_N_OL_R2,
                  RST_N_OL_R2        => ntRef_ntRST_N_OL_R2,
                  BSRMODE1_OR_R2     => ntRef_ntBSRMODE1_OR_R2,
                  BSRMODE2_OR_R2     => ntRef_ntBSRMODE2_OR_R2,
                  BSRMODE3_OR_R2     => ntRef_ntBSRMODE3_OR_R2,
                  BSRRST_OR_R2       => ntRef_ntBSRRST_OR_R2,
                  GOUTEN_OR_R2       => ntRef_ntGOUTEN_OR_R2,
                  BSRSHIFT_OR_R2     => ntRef_ntBSRSHIFT_OR_R2,
                  BSRUPDATE_OR_R2    => ntRef_ntBSRUPDATE_OR_R2,
                  GRS_N_OR_R2        => ntRef_ntGRS_N_OR_R2,
                  GWEN_OR_R2         => ntRef_ntGWEN_OR_R2,
                  POR_N_OR_R2        => ntRef_ntPOR_N_OR_R2,
                  PUP_REL_N_OR_R2    => ntRef_ntPUP_REL_N_OR_R2,
                  GLOGEN_OR_R2       => ntRef_ntGLOGEN_OR_R2,
                  POR_N_1P8_OR_R2    => ntRef_ntPOR_N_1P8_OR_R2,
                  PRCFG_N_OR_R2      => ntRef_ntPRCFG_N_OR_R2,
                  RST_N_OR_R2        => ntRef_ntRST_N_OR_R2,
                  BSRMODE1_OL_R3     => ntRef_ntBSRMODE1_OL_R3,
                  BSRMODE2_OL_R3     => ntRef_ntBSRMODE2_OL_R3,
                  BSRMODE3_OL_R3     => ntRef_ntBSRMODE3_OL_R3,
                  BSRRST_OL_R3       => ntRef_ntBSRRST_OL_R3,
                  GOUTEN_OL_R3       => ntRef_ntGOUTEN_OL_R3,
                  BSRSHIFT_OL_R3     => ntRef_ntBSRSHIFT_OL_R3,
                  BSRUPDATE_OL_R3    => ntRef_ntBSRUPDATE_OL_R3,
                  GRS_N_OL_R3        => ntRef_ntGRS_N_OL_R3,
                  GWEN_OL_R3         => ntRef_ntGWEN_OL_R3,
                  POR_N_OL_R3        => ntRef_ntPOR_N_OL_R3,
                  PUP_REL_N_OL_R3    => ntRef_ntPUP_REL_N_OL_R3,
                  GLOGEN_OL_R3       => ntRef_ntGLOGEN_OL_R3,
                  POR_N_1P8_OL_R3    => ntRef_ntPOR_N_1P8_OL_R3,
                  PRCFG_N_OL_R3      => ntRef_ntPRCFG_N_OL_R3,
                  RST_N_OL_R3        => ntRef_ntRST_N_OL_R3,
                  BSRMODE1_OR_R3     => ntRef_ntBSRMODE1_OR_R3,
                  BSRMODE2_OR_R3     => ntRef_ntBSRMODE2_OR_R3,
                  BSRMODE3_OR_R3     => ntRef_ntBSRMODE3_OR_R3,
                  BSRRST_OR_R3       => ntRef_ntBSRRST_OR_R3,
                  GOUTEN_OR_R3       => ntRef_ntGOUTEN_OR_R3,
                  BSRSHIFT_OR_R3     => ntRef_ntBSRSHIFT_OR_R3,
                  BSRUPDATE_OR_R3    => ntRef_ntBSRUPDATE_OR_R3,
                  GRS_N_OR_R3        => ntRef_ntGRS_N_OR_R3,
                  GWEN_OR_R3         => ntRef_ntGWEN_OR_R3,
                  POR_N_OR_R3        => ntRef_ntPOR_N_OR_R3,
                  PUP_REL_N_OR_R3    => ntRef_ntPUP_REL_N_OR_R3,
                  GLOGEN_OR_R3       => ntRef_ntGLOGEN_OR_R3,
                  POR_N_1P8_OR_R3    => ntRef_ntPOR_N_1P8_OR_R3,
                  PRCFG_N_OR_R3      => ntRef_ntPRCFG_N_OR_R3,
                  RST_N_OR_R3        => ntRef_ntRST_N_OR_R3,

                  ERASE_OL_R0        => ntRef_ntERASE_OL_R0,
                  ERASE_OL_R1        => ntRef_ntERASE_OL_R1,
                  ERASE_OL_R2        => ntRef_ntERASE_OL_R2,
                  ERASE_OL_R3        => ntRef_ntERASE_OL_R3,
                  ERASE_OR_R0        => ntRef_ntERASE_OR_R0,
                  ERASE_OR_R1        => ntRef_ntERASE_OR_R1,
                  ERASE_OR_R2        => ntRef_ntERASE_OR_R2,
                  ERASE_OR_R3        => ntRef_ntERASE_OR_R3,
                  PROG_ON_OL_R0      => ntRef_ntPROG_ON_OL_R0,
                  PROG_ON_OL_R1      => ntRef_ntPROG_ON_OL_R1,
                  PROG_ON_OL_R2      => ntRef_ntPROG_ON_OL_R2,
                  PROG_ON_OL_R3      => ntRef_ntPROG_ON_OL_R3,
                  PROG_ON_OR_R0      => ntRef_ntPROG_ON_OR_R0,
                  PROG_ON_OR_R1      => ntRef_ntPROG_ON_OR_R1,
                  PROG_ON_OR_R2      => ntRef_ntPROG_ON_OR_R2,
                  PROG_ON_OR_R3      => ntRef_ntPROG_ON_OR_R3,
                  WL_ON_OL_R0        => ntRef_ntWL_ON_OL_R0,
                  WL_ON_OL_R1        => ntRef_ntWL_ON_OL_R1,
                  WL_ON_OL_R2        => ntRef_ntWL_ON_OL_R2,
                  WL_ON_OL_R3        => ntRef_ntWL_ON_OL_R3,
                  WL_ON_OR_R0        => ntRef_ntWL_ON_OR_R0,
                  WL_ON_OR_R1        => ntRef_ntWL_ON_OR_R1,
                  WL_ON_OR_R2        => ntRef_ntWL_ON_OR_R2,
                  WL_ON_OR_R3        => ntRef_ntWL_ON_OR_R3,

                  DATA_BACK            => ntRef_ntDATA_BACK,
                  ADDR_UP_R3           => ntRef_ntADDR_UP_R3,
                  ADDR_DN_R3           => ntRef_ntADDR_DN_R3,
                  ADDR_UP_R2           => ntRef_ntADDR_UP_R2,
                  ADDR_DN_R2           => ntRef_ntADDR_DN_R2,
                  ADDR_UP_R1           => ntRef_ntADDR_UP_R1,
                  ADDR_DN_R1           => ntRef_ntADDR_DN_R1,
                  ADDR_UP_R0           => ntRef_ntADDR_UP_R0,
                  ADDR_DN_R0           => ntRef_ntADDR_DN_R0,

                  FRAME_ADDR_OU0_R3    => ntRef_ntFRAME_ADDR_OU0_R3,
                  FRAME_ADDR_OU1_R3    => ntRef_ntFRAME_ADDR_OU1_R3,
                  FRAME_ADDR_OU2_R3    => ntRef_ntFRAME_ADDR_OU2_R3,
                  FRAME_ADDR_OU3_R3    => ntRef_ntFRAME_ADDR_OU3_R3,
                  FRAME_ADDR_OD0_R3    => ntRef_ntFRAME_ADDR_OD0_R3,
                  FRAME_ADDR_OD1_R3    => ntRef_ntFRAME_ADDR_OD1_R3,
                  FRAME_ADDR_OD2_R3    => ntRef_ntFRAME_ADDR_OD2_R3,
                  FRAME_ADDR_OD3_R3    => ntRef_ntFRAME_ADDR_OD3_R3,
                  FRAME_ADDR_OU0_R2    => ntRef_ntFRAME_ADDR_OU0_R2,
                  FRAME_ADDR_OU1_R2    => ntRef_ntFRAME_ADDR_OU1_R2,
                  FRAME_ADDR_OU2_R2    => ntRef_ntFRAME_ADDR_OU2_R2,
                  FRAME_ADDR_OU3_R2    => ntRef_ntFRAME_ADDR_OU3_R2,
                  FRAME_ADDR_OD0_R2    => ntRef_ntFRAME_ADDR_OD0_R2,
                  FRAME_ADDR_OD1_R2    => ntRef_ntFRAME_ADDR_OD1_R2,
                  FRAME_ADDR_OD2_R2    => ntRef_ntFRAME_ADDR_OD2_R2,
                  FRAME_ADDR_OD3_R2    => ntRef_ntFRAME_ADDR_OD3_R2,
                  FRAME_ADDR_OU0_R1    => ntRef_ntFRAME_ADDR_OU0_R1,
                  FRAME_ADDR_OU1_R1    => ntRef_ntFRAME_ADDR_OU1_R1,
                  FRAME_ADDR_OU2_R1    => ntRef_ntFRAME_ADDR_OU2_R1,
                  FRAME_ADDR_OU3_R1    => ntRef_ntFRAME_ADDR_OU3_R1,
                  FRAME_ADDR_OD0_R1    => ntRef_ntFRAME_ADDR_OD0_R1,
                  FRAME_ADDR_OD1_R1    => ntRef_ntFRAME_ADDR_OD1_R1,
                  FRAME_ADDR_OD2_R1    => ntRef_ntFRAME_ADDR_OD2_R1,
                  FRAME_ADDR_OD3_R1    => ntRef_ntFRAME_ADDR_OD3_R1,
                  FRAME_ADDR_OU0_R0    => ntRef_ntFRAME_ADDR_OU0_R0,
                  FRAME_ADDR_OU1_R0    => ntRef_ntFRAME_ADDR_OU1_R0,
                  FRAME_ADDR_OU2_R0    => ntRef_ntFRAME_ADDR_OU2_R0,
                  FRAME_ADDR_OU3_R0    => ntRef_ntFRAME_ADDR_OU3_R0,
                  FRAME_ADDR_OD0_R0    => ntRef_ntFRAME_ADDR_OD0_R0,
                  FRAME_ADDR_OD1_R0    => ntRef_ntFRAME_ADDR_OD1_R0,
                  FRAME_ADDR_OD2_R0    => ntRef_ntFRAME_ADDR_OD2_R0,
                  FRAME_ADDR_OD3_R0    => ntRef_ntFRAME_ADDR_OD3_R0,

                  FRAME_ADDR_BLINT     => ntRef_ntFRAME_ADDR_BLINT,
                  COLUMN_ADDR_BLINT    => ntRef_ntCOLUMN_ADDR_BLINT,
                  READ_BLINT           => ntRef_ntREAD_BLINT,

                  MCE_OU_R3            => ntRef_ntMCE_OU_R3,
                  MCE_OD_R3            => ntRef_ntMCE_OD_R3,
                  MCE_OU_R2            => ntRef_ntMCE_OU_R2,
                  MCE_OD_R2            => ntRef_ntMCE_OD_R2,
                  MCE_OU_R1            => ntRef_ntMCE_OU_R1,
                  MCE_OD_R1            => ntRef_ntMCE_OD_R1,
                  MCE_OU_R0            => ntRef_ntMCE_OU_R0,
                  MCE_OD_R0            => ntRef_ntMCE_OD_R0,
                  MWR_OU_R3            => ntRef_ntMWR_OU_R3,
                  MWR_OD_R3            => ntRef_ntMWR_OD_R3,
                  MWR_OU_R2            => ntRef_ntMWR_OU_R2,
                  MWR_OD_R2            => ntRef_ntMWR_OD_R2,
                  MWR_OU_R1            => ntRef_ntMWR_OU_R1,
                  MWR_OD_R1            => ntRef_ntMWR_OD_R1,
                  MWR_OU_R0            => ntRef_ntMWR_OU_R0,
                  MWR_OD_R0            => ntRef_ntMWR_OD_R0,
                  MCLKB_OU_R3          => ntRef_ntMCLKB_OU_R3,
                  MCLKB_OD_R3          => ntRef_ntMCLKB_OD_R3,
                  MCLKB_OU_R2          => ntRef_ntMCLKB_OU_R2,
                  MCLKB_OD_R2          => ntRef_ntMCLKB_OD_R2,
                  MCLKB_OU_R1          => ntRef_ntMCLKB_OU_R1,
                  MCLKB_OD_R1          => ntRef_ntMCLKB_OD_R1,
                  MCLKB_OU_R0          => ntRef_ntMCLKB_OU_R0,
                  MCLKB_OD_R0          => ntRef_ntMCLKB_OD_R0,

                  MASK_N_UP_R3         => ntRef_ntMASK_N_UP_R3,
                  MASK_N_DN_R3         => ntRef_ntMASK_N_DN_R3,
                  MASK_N_UP_R2         => ntRef_ntMASK_N_UP_R2,
                  MASK_N_DN_R2         => ntRef_ntMASK_N_DN_R2,
                  MASK_N_UP_R1         => ntRef_ntMASK_N_UP_R1,
                  MASK_N_DN_R1         => ntRef_ntMASK_N_DN_R1,
                  MASK_N_UP_R0         => ntRef_ntMASK_N_UP_R0,
                  MASK_N_DN_R0         => ntRef_ntMASK_N_DN_R0,
                  READ2T0_UP_R3        => ntRef_ntREAD2T0_UP_R3,
                  READ2T0_DN_R3        => ntRef_ntREAD2T0_DN_R3,
                  READ2T1_UP_R3        => ntRef_ntREAD2T1_UP_R3,
                  READ2T1_DN_R3        => ntRef_ntREAD2T1_DN_R3,
                  READ2T0_UP_R2        => ntRef_ntREAD2T0_UP_R2,
                  READ2T0_DN_R2        => ntRef_ntREAD2T0_DN_R2,
                  READ2T1_UP_R2        => ntRef_ntREAD2T1_UP_R2,
                  READ2T1_DN_R2        => ntRef_ntREAD2T1_DN_R2,
                  READ2T0_UP_R1        => ntRef_ntREAD2T0_UP_R1,
                  READ2T0_DN_R1        => ntRef_ntREAD2T0_DN_R1,
                  READ2T1_UP_R1        => ntRef_ntREAD2T1_UP_R1,
                  READ2T1_DN_R1        => ntRef_ntREAD2T1_DN_R1,
                  READ2T0_UP_R0        => ntRef_ntREAD2T0_UP_R0,
                  READ2T0_DN_R0        => ntRef_ntREAD2T0_DN_R0,
                  READ2T1_UP_R0        => ntRef_ntREAD2T1_UP_R0,
                  READ2T1_DN_R0        => ntRef_ntREAD2T1_DN_R0,

                  DATA_R3              => ntRef_ntDATA_R3,
                  DATAN_R3             => ntRef_ntDATAN_R3,
                  DATA_L_1_R3          => ntRef_ntDATA_L_1_R3,
                  DATAN_L_1_R3         => ntRef_ntDATAN_L_1_R3,
                  DATA_L_2_R3          => ntRef_ntDATA_L_2_R3,
                  DATAN_L_2_R3         => ntRef_ntDATAN_L_2_R3,
                  DATA_L_3_R3          => ntRef_ntDATA_L_3_R3,
                  DATAN_L_3_R3         => ntRef_ntDATAN_L_3_R3,
                  DATA_L_4_R3          => ntRef_ntDATA_L_4_R3,
                  DATAN_L_4_R3         => ntRef_ntDATAN_L_4_R3,
                  DATA_R_1_R3          => ntRef_ntDATA_R_1_R3,
                  DATAN_R_1_R3         => ntRef_ntDATAN_R_1_R3,
                  DATA_R_2_R3          => ntRef_ntDATA_R_2_R3,
                  DATAN_R_2_R3         => ntRef_ntDATAN_R_2_R3,
                  DATA_R_3_R3          => ntRef_ntDATA_R_3_R3,
                  DATAN_R_3_R3         => ntRef_ntDATAN_R_3_R3,
                  DATA_R_4_R3          => ntRef_ntDATA_R_4_R3,
                  DATAN_R_4_R3         => ntRef_ntDATAN_R_4_R3,
                  DATA_R_5_R3          => ntRef_ntDATA_R_5_R3,
                  DATAN_R_5_R3         => ntRef_ntDATAN_R_5_R3,
                  DATA_R_6_R3          => ntRef_ntDATA_R_6_R3,
                  DATAN_R_6_R3         => ntRef_ntDATAN_R_6_R3,
                  DATA_R_7_R3          => ntRef_ntDATA_R_7_R3,
                  DATAN_R_7_R3         => ntRef_ntDATAN_R_7_R3,
                  DATA_R_8_R3          => ntRef_ntDATA_R_8_R3,
                  DATAN_R_8_R3         => ntRef_ntDATAN_R_8_R3,

                  DATA_R2              => ntRef_ntDATA_R2,
                  DATAN_R2             => ntRef_ntDATAN_R2,
                  DATA_L_1_R2          => ntRef_ntDATA_L_1_R2,
                  DATAN_L_1_R2         => ntRef_ntDATAN_L_1_R2,
                  DATA_L_2_R2          => ntRef_ntDATA_L_2_R2,
                  DATAN_L_2_R2         => ntRef_ntDATAN_L_2_R2,
                  DATA_L_3_R2          => ntRef_ntDATA_L_3_R2,
                  DATAN_L_3_R2         => ntRef_ntDATAN_L_3_R2,
                  DATA_R_1_R2          => ntRef_ntDATA_R_1_R2,
                  DATAN_R_1_R2         => ntRef_ntDATAN_R_1_R2,
                  DATA_R_2_R2          => ntRef_ntDATA_R_2_R2,
                  DATAN_R_2_R2         => ntRef_ntDATAN_R_2_R2,
                  DATA_R_3_R2          => ntRef_ntDATA_R_3_R2,
                  DATAN_R_3_R2         => ntRef_ntDATAN_R_3_R2,
                  DATA_R_4_R2          => ntRef_ntDATA_R_4_R2,
                  DATAN_R_4_R2         => ntRef_ntDATAN_R_4_R2,
                  DATA_R_5_R2          => ntRef_ntDATA_R_5_R2,
                  DATAN_R_5_R2         => ntRef_ntDATAN_R_5_R2,
                  DATA_R_6_R2          => ntRef_ntDATA_R_6_R2,
                  DATAN_R_6_R2         => ntRef_ntDATAN_R_6_R2,
                  DATA_R_7_R2          => ntRef_ntDATA_R_7_R2,
                  DATAN_R_7_R2         => ntRef_ntDATAN_R_7_R2,
                  DATA_R_8_R2          => ntRef_ntDATA_R_8_R2,
                  DATAN_R_8_R2         => ntRef_ntDATAN_R_8_R2,

                  DATA_R1              => ntRef_ntDATA_R1,
                  DATAN_R1             => ntRef_ntDATAN_R1,
                  DATA_L_1_R1          => ntRef_ntDATA_L_1_R1,
                  DATAN_L_1_R1         => ntRef_ntDATAN_L_1_R1,
                  DATA_L_2_R1          => ntRef_ntDATA_L_2_R1,
                  DATAN_L_2_R1         => ntRef_ntDATAN_L_2_R1,
                  DATA_L_3_R1          => ntRef_ntDATA_L_3_R1,
                  DATAN_L_3_R1         => ntRef_ntDATAN_L_3_R1,
                  DATA_R_1_R1          => ntRef_ntDATA_R_1_R1,
                  DATAN_R_1_R1         => ntRef_ntDATAN_R_1_R1,
                  DATA_R_2_R1          => ntRef_ntDATA_R_2_R1,
                  DATAN_R_2_R1         => ntRef_ntDATAN_R_2_R1,
                  DATA_R_3_R1          => ntRef_ntDATA_R_3_R1,
                  DATAN_R_3_R1         => ntRef_ntDATAN_R_3_R1,
                  DATA_R_4_R1          => ntRef_ntDATA_R_4_R1,
                  DATAN_R_4_R1         => ntRef_ntDATAN_R_4_R1,
                  DATA_R_5_R1          => ntRef_ntDATA_R_5_R1,
                  DATAN_R_5_R1         => ntRef_ntDATAN_R_5_R1,
                  DATA_R_6_R1          => ntRef_ntDATA_R_6_R1,
                  DATAN_R_6_R1         => ntRef_ntDATAN_R_6_R1,
                  DATA_R_7_R1          => ntRef_ntDATA_R_7_R1,
                  DATAN_R_7_R1         => ntRef_ntDATAN_R_7_R1,
                  DATA_R_8_R1          => ntRef_ntDATA_R_8_R1,
                  DATAN_R_8_R1         => ntRef_ntDATAN_R_8_R1,

                  DATA_R0              => ntRef_ntDATA_R0,
                  DATAN_R0             => ntRef_ntDATAN_R0,
                  DATA_L_1_R0          => ntRef_ntDATA_L_1_R0,
                  DATAN_L_1_R0         => ntRef_ntDATAN_L_1_R0,
                  DATA_L_2_R0          => ntRef_ntDATA_L_2_R0,
                  DATAN_L_2_R0         => ntRef_ntDATAN_L_2_R0,
                  DATA_L_3_R0          => ntRef_ntDATA_L_3_R0,
                  DATAN_L_3_R0         => ntRef_ntDATAN_L_3_R0,
                  DATA_L_4_R0          => ntRef_ntDATA_L_4_R0,
                  DATAN_L_4_R0         => ntRef_ntDATAN_L_4_R0,
                  DATA_R_1_R0          => ntRef_ntDATA_R_1_R0,
                  DATAN_R_1_R0         => ntRef_ntDATAN_R_1_R0,
                  DATA_R_2_R0          => ntRef_ntDATA_R_2_R0,
                  DATAN_R_2_R0         => ntRef_ntDATAN_R_2_R0,
                  DATA_R_3_R0          => ntRef_ntDATA_R_3_R0,
                  DATAN_R_3_R0         => ntRef_ntDATAN_R_3_R0,
                  DATA_R_4_R0          => ntRef_ntDATA_R_4_R0,
                  DATAN_R_4_R0         => ntRef_ntDATAN_R_4_R0,
                  DATA_R_5_R0          => ntRef_ntDATA_R_5_R0,
                  DATAN_R_5_R0         => ntRef_ntDATAN_R_5_R0,
                  DATA_R_6_R0          => ntRef_ntDATA_R_6_R0,
                  DATAN_R_6_R0         => ntRef_ntDATAN_R_6_R0,
                  DATA_R_7_R0          => ntRef_ntDATA_R_7_R0,
                  DATAN_R_7_R0         => ntRef_ntDATAN_R_7_R0,
                  DATA_R_8_R0          => ntRef_ntDATA_R_8_R0,
                  DATAN_R_8_R0         => ntRef_ntDATAN_R_8_R0,
                  COLUMN_INC_O         => ntRef_ntCOLUMN_INC_O,
                  REGION_INC_O         => ntRef_ntREGION_INC_O,
                  REGION_END_O         => ntRef_ntREGION_END_O,

                  VCC_WL_R0            => ntRef_ntVCC_WL_R0,
                  VCC_WL_R1            => ntRef_ntVCC_WL_R1,
                  VCC_WL_R2            => ntRef_ntVCC_WL_R2,
                  VCC_WL_R3            => ntRef_ntVCC_WL_R3,
                  MEM_INIT_OL_R0       => ntRef_ntMEM_INIT_OL_R0,
                  AC_TEST_OL_R0        => ntRef_ntAC_TEST_OL_R0,
                  AC_MODE_OL_R0        => ntRef_ntAC_MODE_OL_R0,
                  MEM_INIT_OR_R0       => ntRef_ntMEM_INIT_OR_R0,
                  AC_TEST_OR_R0        => ntRef_ntAC_TEST_OR_R0,
                  AC_MODE_OR_R0        => ntRef_ntAC_MODE_OR_R0,  
                  MEM_INIT_OL_R1       => ntRef_ntMEM_INIT_OL_R1,
                  AC_TEST_OL_R1        => ntRef_ntAC_TEST_OL_R1,
                  AC_MODE_OL_R1        => ntRef_ntAC_MODE_OL_R1,
                  MEM_INIT_OR_R1       => ntRef_ntMEM_INIT_OR_R1,
                  AC_TEST_OR_R1        => ntRef_ntAC_TEST_OR_R1,
                  AC_MODE_OR_R1        => ntRef_ntAC_MODE_OR_R1,  
                  MEM_INIT_OL_R2       => ntRef_ntMEM_INIT_OL_R2,
                  AC_TEST_OL_R2        => ntRef_ntAC_TEST_OL_R2,
                  AC_MODE_OL_R2        => ntRef_ntAC_MODE_OL_R2,
                  MEM_INIT_OR_R2       => ntRef_ntMEM_INIT_OR_R2,
                  AC_TEST_OR_R2        => ntRef_ntAC_TEST_OR_R2,
                  AC_MODE_OR_R2        => ntRef_ntAC_MODE_OR_R2,  
                  MEM_INIT_OL_R3       => ntRef_ntMEM_INIT_OL_R3,
                  AC_TEST_OL_R3        => ntRef_ntAC_TEST_OL_R3,
                  AC_MODE_OL_R3        => ntRef_ntAC_MODE_OL_R3,
                  MEM_INIT_OR_R3       => ntRef_ntMEM_INIT_OR_R3,
                  AC_TEST_OR_R3        => ntRef_ntAC_TEST_OR_R3,
                  AC_MODE_OR_R3        => ntRef_ntAC_MODE_OR_R3

                )
        @([sx,sy]);  

    int sx_ccs = tx_ccs * NUM_GRID_X + 3;
    int sy_ccs = ty_ccs * NUM_GRID_Y;

    connect
      (
        <pin POR_N of <device CRAM_CTRL_100H_TILE @[sx,sy]>>         => <wire GPOR_N of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin POR_N_1P8 of <device CRAM_CTRL_100H_TILE @[sx,sy]>>     => <wire POR_N_1P8 of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin POR_ERASE_N of <device CRAM_CTRL_100H_TILE @[sx,sy]>>   => <wire POR_ERASE_N of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin POR_SRAM_N of <device CRAM_CTRL_100H_TILE @[sx,sy]>>    => <wire POR_SRAM_N of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VDDT_N of <device CRAM_CTRL_100H_TILE @[sx,sy]>>        => <wire CRAM_VDDT_N of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TYPE of <device CRAM_CTRL_100H_TILE @[sx,sy]>>          => <wire CMEM_TYPE[0] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin PRCFG_N of <device CRAM_CTRL_100H_TILE @[sx,sy]>>       => <wire PRCFG_EN of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin RST_N of <device CRAM_CTRL_100H_TILE @[sx,sy]>>         => <wire POR_BLSR_N of <device CCS_TILE @[sx_ccs,sy_ccs]>>,

        <pin WL_ON of <device CRAM_CTRL_100H_TILE @[sx,sy]>>         => <wire WL_ON of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin READ of <device CRAM_CTRL_100H_TILE @[sx,sy]>>          => <wire READ of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin RDBK_CAP of <device CRAM_CTRL_100H_TILE @[sx,sy]>>      => <wire RDBK_CAP of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin RDBK_ON of <device CRAM_CTRL_100H_TILE @[sx,sy]>>       => <wire RDBK_ON of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin ERASE of <device CRAM_CTRL_100H_TILE @[sx,sy]>>         => <wire ERASE_EN of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin PROG_CAP of <device CRAM_CTRL_100H_TILE @[sx,sy]>>      => <wire PROG_CAP of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin PROG_ON of <device CRAM_CTRL_100H_TILE @[sx,sy]>>       => <wire PROG_ON of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin FRAME_ADDR of <device CRAM_CTRL_100H_TILE @[sx,sy]>>    => <wire FRAME_ADDR of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin COLUMN_ADDR of <device CRAM_CTRL_100H_TILE @[sx,sy]>>   => <wire COLUMN_ADDR of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin PRECHG of <device CRAM_CTRL_100H_TILE @[sx,sy]>>        => <wire PRECHGE of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin REGION_RW_EN of <device CRAM_CTRL_100H_TILE @[sx,sy]>>  => <wire REGION_RW_EN of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin REGION_RW_SEL of <device CRAM_CTRL_100H_TILE @[sx,sy]>> => <wire REGION_SEL of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin DATA_IN of <device CRAM_CTRL_100H_TILE @[sx,sy]>>       => <wire CDATA of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin MCLK_CRAM of <device CRAM_CTRL_100H_TILE @[sx,sy]>>     => <wire CLK_CRAM of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin READ_LATCH of <device CRAM_CTRL_100H_TILE @[sx,sy]>>    => <wire READ_LATCH of <device CCS_TILE @[sx_ccs,sy_ccs]>>,

        <pin MCLKB of <device CRAM_CTRL_100H_TILE @[sx,sy]>>         => <wire CLK_DRM of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin MWR of <device CRAM_CTRL_100H_TILE @[sx,sy]>>           => <wire MWR of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin MCE of <device CRAM_CTRL_100H_TILE @[sx,sy]>>           => <wire MCE of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin MASK of <device CRAM_CTRL_100H_TILE @[sx,sy]>>          => <wire MASK_EN of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin GLOGEN of <device CRAM_CTRL_100H_TILE @[sx,sy]>>        => <wire GLOGEN of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin GRS_N of <device CRAM_CTRL_100H_TILE @[sx,sy]>>         => <wire GRS_N of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin GWEN of <device CRAM_CTRL_100H_TILE @[sx,sy]>>          => <wire GWEN of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin GOUTEN of <device CRAM_CTRL_100H_TILE @[sx,sy]>>        => <wire GOUTEN of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin PUP_REL_N of <device CRAM_CTRL_100H_TILE @[sx,sy]>>     => <wire POR_BLSR_N of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 

        <pin BSRMODE1 of <device CRAM_CTRL_100H_TILE @[sx,sy]>>      => <wire BSMODE_1 of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 
        <pin BSRMODE2 of <device CRAM_CTRL_100H_TILE @[sx,sy]>>      => <wire BSMODE_2 of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 
        <pin BSRMODE3 of <device CRAM_CTRL_100H_TILE @[sx,sy]>>      => <wire BSMODE_3 of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 
        <pin BSRRST of <device CRAM_CTRL_100H_TILE @[sx,sy]>>        => <wire JRST of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 
        <pin BSRSHIFT of <device CRAM_CTRL_100H_TILE @[sx,sy]>>      => <wire SHIFTDR of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 
        <pin BSRUPDATE of <device CRAM_CTRL_100H_TILE @[sx,sy]>>     => <wire UPDATEDR of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 
        <pin VBG1 of <device CRAM_CTRL_100H_TILE @[sx,sy]>>          => <wire WLLDO_VREF_1V of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 
        <pin VBG2 of <device CRAM_CTRL_100H_TILE @[sx,sy]>>          => <wire CRAMLDO_VREF of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 

        <pin MEM_INIT of <device CRAM_CTRL_100H_TILE @[sx,sy]>>      => <wire MEM_INIT of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 
        <pin AC_TEST of <device CRAM_CTRL_100H_TILE @[sx,sy]>>       => <wire AC_TEST of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 
        <pin AC_MODE of <device CRAM_CTRL_100H_TILE @[sx,sy]>>       => <wire AC_MODE of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 

        <pin LDO_CRAM_TRIM[4:0] of <device CRAM_CTRL_100H_TILE @[sx,sy]>>     => <wire TRIM_LDO_CRAM_R3 of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin LDO_CRAM_TRIM[9:5] of <device CRAM_CTRL_100H_TILE @[sx,sy]>>     => <wire TRIM_LDO_CRAM_R2 of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin LDO_CRAM_TRIM[14:10] of <device CRAM_CTRL_100H_TILE @[sx,sy]>>   => <wire TRIM_LDO_CRAM_R1 of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin LDO_CRAM_TRIM[19:15] of <device CRAM_CTRL_100H_TILE @[sx,sy]>>   => <wire TRIM_LDO_CRAM_R0 of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin LDO_CRAM_TRIM[24:20] of <device CRAM_CTRL_100H_TILE @[sx,sy]>>   => <wire TRIM_LDO_CRAM_R4 of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin LDO_CRAM_TRIM[29:25] of <device CRAM_CTRL_100H_TILE @[sx,sy]>>   => <wire TRIM_LDO_CRAM_R5 of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin LDO_CRAM_TRIM[34:30] of <device CRAM_CTRL_100H_TILE @[sx,sy]>>   => <wire TRIM_LDO_CRAM_R6 of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin LDO_CRAM_TRIM[39:35] of <device CRAM_CTRL_100H_TILE @[sx,sy]>>   => <wire TRIM_LDO_CRAM_R7 of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin LDO_WL_TRIM of <device CRAM_CTRL_100H_TILE @[sx,sy]>>            => <wire TRIM_LDO_WL of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin LDO_WL_SEL of <device CRAM_CTRL_100H_TILE @[sx,sy]>>             => <wire TRIM_LDO_WL_SEL of <device CCS_TILE @[sx_ccs,sy_ccs]>>,

        <pin DCI_MATCH of <device CCS_TILE @[sx_ccs,sy_ccs]>>       => <wire TIEHI of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin CDATA_RB of <device CCS_TILE @[sx_ccs,sy_ccs]>>        => <wire DATA_BACK of <device CRAM_CTRL_100H_TILE @[sx,sy]>>,
        <pin REGION_END of <device CCS_TILE @[sx_ccs,sy_ccs]>>      => <wire REGION_END_O of <device CRAM_CTRL_100H_TILE @[sx,sy]>>,
        <pin REGION_INC of <device CCS_TILE @[sx_ccs,sy_ccs]>>      => <wire REGION_INC_O of <device CRAM_CTRL_100H_TILE @[sx,sy]>>,
        <pin COLUMN_INC of <device CCS_TILE @[sx_ccs,sy_ccs]>>      => <wire COLUMN_INC_O of <device CRAM_CTRL_100H_TILE @[sx,sy]>>,
        <pin VLDO_CRAM_R4 of <device CCS_TILE @[sx_ccs,sy_ccs]>>    => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VLDO_CRAM_R5 of <device CCS_TILE @[sx_ccs,sy_ccs]>>    => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VLDO_CRAM_R6 of <device CCS_TILE @[sx_ccs,sy_ccs]>>    => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VLDO_CRAM_R7 of <device CCS_TILE @[sx_ccs,sy_ccs]>>    => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VLDO_WL_R0 of <device CCS_TILE @[sx_ccs,sy_ccs]>>      => <wire VCC_WL_R0 of <device CRAM_CTRL_100H_TILE @[sx,sy]>>,
        <pin VLDO_WL_R1 of <device CCS_TILE @[sx_ccs,sy_ccs]>>      => <wire VCC_WL_R1 of <device CRAM_CTRL_100H_TILE @[sx,sy]>>,
        <pin VLDO_WL_R2 of <device CCS_TILE @[sx_ccs,sy_ccs]>>      => <wire VCC_WL_R2 of <device CRAM_CTRL_100H_TILE @[sx,sy]>>,
        <pin VLDO_WL_R3 of <device CCS_TILE @[sx_ccs,sy_ccs]>>      => <wire VCC_WL_R3 of <device CRAM_CTRL_100H_TILE @[sx,sy]>>,

//        <pin NC1_I of <device CCS_TILE @[sx_ccs,sy_ccs]>>           => <wire MFG_TEST_NC1 of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
//        <pin NC2_I of <device CCS_TILE @[sx_ccs,sy_ccs]>>           => <wire MFG_TEST_NC2 of <device CCS_TILE @[sx_ccs,sy_ccs]>>,

        <pin OSC_CALI_EN of <device CCS_TILE @[sx_ccs,sy_ccs]>>     => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>
      );


    
      
}// end of function place_cram_ctrl_tile
/********************************************************************************
********************************************************************************/
function place_idcode_tile
(
    unsigned int tx,
    unsigned int ty,
    unsigned int tx_ccs,
    unsigned int ty_ccs
)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    string strVar;
    sprintf(strVar,"ntIDCODE_H12_%d_%d",sx,sy);
    &wire ntRef_ntIDCODE_H12[11:0] = wire *strVar[11:0];

    sprintf(strVar,"ntIDCODE_L18_%d_%d",sx,sy);
    &wire ntRef_ntIDCODE_L18[17:0] = wire *strVar[17:0];


    sprintf(strVar, "IDCODE_PG2L100H_TILE_%d_%d", sx, sy);
      device IDCODE_PG2L100H_TILE *strVar
        port map(
                  IDCODE_H12     => ntRef_ntIDCODE_H12,
                  IDCODE_L18     => ntRef_ntIDCODE_L18
                )
        @([sx,sy]);  

    int sx_ccs = tx_ccs * NUM_GRID_X + 3;
    int sy_ccs = ty_ccs * NUM_GRID_Y;
    connect
      (
        <pin IDCODE_H12 of <device CCS_TILE @[sx_ccs,sy_ccs]>>     => <wire IDCODE_H12 of <device IDCODE_PG2L100H_TILE @[sx,sy]>>,
        <pin IDCODE_L18 of <device CCS_TILE @[sx_ccs,sy_ccs]>>     => <wire IDCODE_L18 of <device IDCODE_PG2L100H_TILE @[sx,sy]>>
      );

}//end of place_idcode_tile
/********************************************************************************
********************************************************************************/
function connect_ccs_adc
(
    unsigned int tx_ccs,
    unsigned int ty_ccs,
    unsigned int tx_adc,
    unsigned int ty_adc,
    unsigned int tx_ckeb,
    unsigned int tx_esd,
    unsigned int ty_esd
)
{   
 

    int sx_ccs = tx_ccs * NUM_GRID_X + 3;
    int sy_ccs = ty_ccs * NUM_GRID_Y;

    int sx_adc = tx_adc * NUM_GRID_X + 3;
    int sy_adc = ty_adc * NUM_GRID_Y;

    int sx_ckeb = tx_ckeb * NUM_GRID_X;
    int sy_ckeb = (ty_ccs + 25 )* NUM_GRID_Y;

    connect
      (
        <pin TDO_DRP of <device CCS_TILE @[sx_ccs,sy_ccs]>>            => <wire TDO of <device ADC_TILE @[sx_adc,sy_adc]>>,
        <pin OVER_TEMPERATURE of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire OVER_TEMP_CCS of <device ADC_TILE @[sx_adc,sy_adc]>>,
        <pin TRIM_ADC_FLAG of <device CCS_TILE @[sx_ccs,sy_ccs]>>      => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[0] of <device CCS_TILE @[sx_ccs,sy_ccs]>>      => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[1] of <device CCS_TILE @[sx_ccs,sy_ccs]>>      => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[2] of <device CCS_TILE @[sx_ccs,sy_ccs]>>      => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[3] of <device CCS_TILE @[sx_ccs,sy_ccs]>>      => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[4] of <device CCS_TILE @[sx_ccs,sy_ccs]>>      => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[5] of <device CCS_TILE @[sx_ccs,sy_ccs]>>      => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[6] of <device CCS_TILE @[sx_ccs,sy_ccs]>>      => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[7] of <device CCS_TILE @[sx_ccs,sy_ccs]>>      => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[8] of <device CCS_TILE @[sx_ccs,sy_ccs]>>      => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[9] of <device CCS_TILE @[sx_ccs,sy_ccs]>>      => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[10] of <device CCS_TILE @[sx_ccs,sy_ccs]>>     => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[11] of <device CCS_TILE @[sx_ccs,sy_ccs]>>     => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,

        <pin GLOGEN_FB of <device CCS_TILE @[sx_ccs,sy_ccs]>>          => <wire GLOGEN of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin GLOGEN_IN of <device CCS_TILE @[sx_ccs,sy_ccs]>>          => <wire GLOGEN_OUT_0 of <device CKEB_TILE @[sx_ckeb,sy_ckeb]>>,
//        <pin GWEN of <device ADC_TILE @[sx_adc,sy_adc]>>               => <wire GWEN_OUT_0 of <device CKEB_TILE @[sx_ckeb,sy_ckeb]>>,

        <pin CLOCKDR of <device ADC_TILE @[sx_adc,sy_adc]>>            => <wire CLOCKDR_DRP of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin FLG_JTAG of <device ADC_TILE @[sx_adc,sy_adc]>>           => <wire FLG_JDRP of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin AD_TRIM_MODE of <device ADC_TILE @[sx_adc,sy_adc]>>       => <wire TRIM_ADC_MODE of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TDI of <device ADC_TILE @[sx_adc,sy_adc]>>                => <wire TDI1_ADC of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TCK of <device ADC_TILE @[sx_adc,sy_adc]>>                => <wire TCK1_ADC of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin SHIFTDR of <device ADC_TILE @[sx_adc,sy_adc]>>            => <wire SHIFTDR_ADC of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin UPDATEDR of <device ADC_TILE @[sx_adc,sy_adc]>>           => <wire UPDATEDR_ADC of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin CAPTUREDR of <device ADC_TILE @[sx_adc,sy_adc]>>          => <wire CAPTUREDR of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin AD_TEMP_OFFSET of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire TRIM_ADC_SENSE of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin CLK_OSC of <device ADC_TILE @[sx_adc,sy_adc]>>            => <wire CLK_ADC of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin OSC_ADC_EN of <device CCS_TILE @[sx_ccs,sy_ccs]>>         => <wire OSC_TURN_ON of <device  ADC_TILE @[sx_adc,sy_adc]>>,
        <pin ADC_VREFP_CP of <device CCS_TILE @[sx_ccs,sy_ccs]>>       => <wire ADC_VREFP_CP of <device  ADC_TILE @[sx_adc,sy_adc]>>,

        <pin VREF_INT of <device ADC_TILE @[sx_adc,sy_adc]>>           => <wire VREF_ADC_1P25V of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin I10U_BG of <device ADC_TILE @[sx_adc,sy_adc]>>            => <wire ICONST_10U[12] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TBD_P[0] of <device ADC_TILE @[sx_adc,sy_adc]>>           => <wire MFG_TEST1_ADC of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TBD_P[1] of <device ADC_TILE @[sx_adc,sy_adc]>>           => <wire MFG_TEST2_ADC of <device CCS_TILE @[sx_ccs,sy_ccs]>>
      );

    int tx_pll_l = 1;
    int tx_pll_r = 61;

    int sx_pll_l = tx_pll_l * NUM_GRID_X;
    int sx_pll_r = tx_pll_r * NUM_GRID_X;
    int sy_gpll0 = (0*NUM_TILES_REGION + 26) * NUM_GRID_Y;
    int sy_gpll1 = (1*NUM_TILES_REGION + 26) * NUM_GRID_Y;
    int sy_gpll2 = (2*NUM_TILES_REGION + 26) * NUM_GRID_Y;
    int sy_gpll3 = (3*NUM_TILES_REGION + 26) * NUM_GRID_Y;
    int sy_ppll0 = (0*NUM_TILES_REGION) * NUM_GRID_Y;
    int sy_ppll1 = (1*NUM_TILES_REGION) * NUM_GRID_Y;
    int sy_ppll2 = (2*NUM_TILES_REGION) * NUM_GRID_Y;
    int sy_ppll3 = (3*NUM_TILES_REGION) * NUM_GRID_Y;

    int sx_esd = tx_esd * NUM_GRID_X;
    int sy_esd = ty_esd * NUM_GRID_Y;

    connect
      (
        <pin LDO_PLL[0] of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire DCTEST_OUT of <device GPLL_TILE @[sx_pll_l,sy_gpll0]>>,
        <pin LDO_PLL[1] of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire DCTEST_OUT of <device GPLL_TILE @[sx_pll_l,sy_gpll1]>>,
        <pin LDO_PLL[2] of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire DCTEST_OUT of <device GPLL_TILE @[sx_pll_l,sy_gpll2]>>,
        <pin LDO_PLL[3] of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire DCTEST_OUT of <device GPLL_TILE @[sx_pll_l,sy_gpll3]>>,
        <pin LDO_PLL[4] of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire DCTEST_OUT of <device GPLL_TILE @[sx_pll_r,sy_gpll1]>>,
        <pin LDO_PLL[5] of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire DCTEST_OUT of <device GPLL_TILE @[sx_pll_r,sy_gpll2]>>,

        <pin LDO_PLL[6] of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire DCTEST_OUT of <device PPLL_TILE @[sx_pll_l,sy_ppll0]>>,
        <pin LDO_PLL[7] of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire DCTEST_OUT of <device PPLL_TILE @[sx_pll_l,sy_ppll1]>>,
        <pin LDO_PLL[8] of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire DCTEST_OUT of <device PPLL_TILE @[sx_pll_l,sy_ppll2]>>,
        <pin LDO_PLL[9] of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire DCTEST_OUT of <device PPLL_TILE @[sx_pll_l,sy_ppll3]>>,
        <pin LDO_PLL[10] of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire DCTEST_OUT of <device PPLL_TILE @[sx_pll_r,sy_ppll1]>>,
        <pin LDO_PLL[11] of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire DCTEST_OUT of <device PPLL_TILE @[sx_pll_r,sy_ppll2]>>,

        <pin VLDO_DDRPHY_R2_L of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire VCCREG0 of <device GPLL_TILE @[sx_pll_l,sy_gpll1]>>,
        <pin VLDO_DDRPHY_R2_R of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire VCCREG0 of <device GPLL_TILE @[sx_pll_r,sy_gpll1]>>,

        <pin LOCKIN_CAS of <device PPLL_TILE @[sx_pll_r,sy_ppll1]>> => <wire TIEHI of <device PPLL_TILE @[sx_pll_r,sy_ppll1]>>,
        <pin LOCKIN_CAS of <device GPLL_TILE @[sx_pll_r,sy_gpll1]>> => <wire LOCKOUT_CAS of <device PPLL_TILE @[sx_pll_r,sy_ppll1]>>,
        <pin LOCKIN_CAS of <device PPLL_TILE @[sx_pll_r,sy_ppll2]>> => <wire LOCKOUT_CAS of <device GPLL_TILE @[sx_pll_r,sy_gpll1]>>,
        <pin LOCKIN_CAS of <device GPLL_TILE @[sx_pll_r,sy_gpll2]>> => <wire LOCKOUT_CAS of <device PPLL_TILE @[sx_pll_r,sy_ppll2]>>,
        <pin LOCKIN_CAS of <device GPLL_TILE @[sx_pll_l,sy_gpll3]>> => <wire PLLLOCKEDCAS_PPLLTOGPLL_OUT of <device ESD_100HR_TILE @[sx_esd,sy_esd]>>,
        <pin LOCKIN_CAS of <device PPLL_TILE @[sx_pll_l,sy_ppll3]>> => <wire LOCKOUT_CAS of <device GPLL_TILE @[sx_pll_l,sy_gpll3]>>,
        <pin LOCKIN_CAS of <device GPLL_TILE @[sx_pll_l,sy_gpll2]>> => <wire LOCKOUT_CAS of <device PPLL_TILE @[sx_pll_l,sy_ppll3]>>,
        <pin LOCKIN_CAS of <device PPLL_TILE @[sx_pll_l,sy_ppll2]>> => <wire LOCKOUT_CAS of <device GPLL_TILE @[sx_pll_l,sy_gpll2]>>,
        <pin LOCKIN_CAS of <device GPLL_TILE @[sx_pll_l,sy_gpll1]>> => <wire LOCKOUT_CAS of <device PPLL_TILE @[sx_pll_l,sy_ppll2]>>,
        <pin LOCKIN_CAS of <device PPLL_TILE @[sx_pll_l,sy_ppll1]>> => <wire LOCKOUT_CAS of <device GPLL_TILE @[sx_pll_l,sy_gpll1]>>,
        <pin LOCKIN_CAS of <device GPLL_TILE @[sx_pll_l,sy_gpll0]>> => <wire LOCKOUT_CAS of <device PPLL_TILE @[sx_pll_l,sy_ppll1]>>,
        <pin LOCKIN_CAS of <device PPLL_TILE @[sx_pll_l,sy_ppll0]>> => <wire LOCKOUT_CAS of <device GPLL_TILE @[sx_pll_l,sy_gpll0]>>,

        <pin PLL_LOCK of <device CCS_TILE @[sx_ccs,sy_ccs]>>        => <wire PLLLOCKEDCAS_PPLLTOCCS_OUT of <device ESD_100HR_TILE @[sx_esd,sy_esd]>>
      );

    int sx_iob_l = 0;
    int sx_iob_r = (NUM_TILE_X-1) * NUM_GRID_X;
    int sy_iob0 = (0*NUM_TILES_REGION) * NUM_GRID_Y;
    int sy_iob1 = (1*NUM_TILES_REGION) * NUM_GRID_Y;
    int sy_iob2 = (2*NUM_TILES_REGION) * NUM_GRID_Y;
    int sy_iob3 = (3*NUM_TILES_REGION) * NUM_GRID_Y;

    connect
      (

        <pin ICONST10UA[0] of <device IOBHR_TILE @[sx_iob_l,sy_iob0]>>  => <wire ICONST_10U[0] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin ICONST10UA[1] of <device IOBHR_TILE @[sx_iob_l,sy_iob0]>>  => <wire ICONST_10U[1] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin ICONST10UA[0] of <device IOBHR_TILE @[sx_iob_l,sy_iob1]>>  => <wire ICONST_10U[2] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin ICONST10UA[1] of <device IOBHR_TILE @[sx_iob_l,sy_iob1]>>  => <wire ICONST_10U[3] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin ICONST10UA[0] of <device IOBHR_TILE @[sx_iob_l,sy_iob2]>>  => <wire ICONST_10U[4] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin ICONST10UA[1] of <device IOBHR_TILE @[sx_iob_l,sy_iob2]>>  => <wire ICONST_10U[5] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin ICONST10UA[0] of <device IOBHR_TILE @[sx_iob_l,sy_iob3]>>  => <wire ICONST_10U[6] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin ICONST10UA[1] of <device IOBHR_TILE @[sx_iob_l,sy_iob3]>>  => <wire ICONST_10U[7] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin ICONST10UA[0] of <device IOBHR_TILE @[sx_iob_r,sy_iob1]>>  => <wire ICONST_10U[8] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin ICONST10UA[1] of <device IOBHR_TILE @[sx_iob_r,sy_iob1]>>  => <wire ICONST_10U[9] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin ICONST10UA[0] of <device IOBHR_TILE @[sx_iob_r,sy_iob2]>>  => <wire ICONST_10U[10] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin ICONST10UA[1] of <device IOBHR_TILE @[sx_iob_r,sy_iob2]>>  => <wire ICONST_10U[11] of <device CCS_TILE @[sx_ccs,sy_ccs]>>
      );



}//end of place_idcode_tile
/********************************************************************************
********************************************************************************/
function place_esd_tile
(
    unsigned int tx,
    unsigned int ty
)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    string strVar;
    sprintf(strVar,"ntIO_STATUS_C_O_%d_%d",sx,sy);
    &wire ntRef_ntIO_STATUS_C_O = wire *strVar;

    sprintf(strVar,"ntPLLLOCKEDCAS_PPLLTOCCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPLLLOCKEDCAS_PPLLTOCCS_OUT = wire *strVar;

    sprintf(strVar,"ntPLLLOCKEDCAS_PPLLTOGPLL_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPLLLOCKEDCAS_PPLLTOGPLL_OUT = wire *strVar;

    sprintf(strVar,"ntTCK_OUT_B_%d_%d",sx,sy);
    &wire ntRef_ntTCK_OUT_B = wire *strVar;

    sprintf(strVar,"ntTCK_OUT_T_%d_%d",sx,sy);
    &wire ntRef_ntTCK_OUT_T = wire *strVar;

    sprintf(strVar,"ntTDO_B_%d_%d",sx,sy);
    &wire ntRef_ntTDO_B = wire *strVar;

    sprintf(strVar,"ntTDO_T_%d_%d",sx,sy);
    &wire ntRef_ntTDO_T = wire *strVar;

    sprintf(strVar,"ntVAADC_NO_%d_%d",sx,sy);
    &wire ntRef_ntVAADC_NO = wire *strVar;

    sprintf(strVar,"ntVAADC_PO_%d_%d",sx,sy);
    &wire ntRef_ntVAADC_PO = wire *strVar;

    sprintf(strVar,"ntVREFADC_NO_%d_%d",sx,sy);
    &wire ntRef_ntVREFADC_NO = wire *strVar;

    sprintf(strVar,"ntVREFADC_PO_%d_%d",sx,sy);
    &wire ntRef_ntVREFADC_PO = wire *strVar;

    sprintf(strVar, "ESD_100HR_TILE_%d_%d", sx, sy);
      device ESD_100HR_TILE *strVar
        port map(
                  IO_STATUS_C_O               => ntRef_ntIO_STATUS_C_O,
                  PLLLOCKEDCAS_PPLLTOCCS_OUT  => ntRef_ntPLLLOCKEDCAS_PPLLTOCCS_OUT,
                  PLLLOCKEDCAS_PPLLTOGPLL_OUT => ntRef_ntPLLLOCKEDCAS_PPLLTOGPLL_OUT,
                  TCK_OUT_B                   => ntRef_ntTCK_OUT_B,
                  TCK_OUT_T                   => ntRef_ntTCK_OUT_T,
                  TDO_B                       => ntRef_ntTDO_B,
                  TDO_T                       => ntRef_ntTDO_T,
                  VAADC_NO                    => ntRef_ntVAADC_NO  ,
                  VAADC_PO                    => ntRef_ntVAADC_PO  ,
                  VREFADC_NO                  => ntRef_ntVREFADC_NO,
                  VREFADC_PO                  => ntRef_ntVREFADC_PO
                )
        @([sx,sy]);  

    int tx_iob_l = 0;
    int tx_iob_r = NUM_TILE_X - 1;
    int tx_pll_l = 1;
    int tx_pll_r = NUM_TILE_X - 2;

    int sx_iob_l = tx_iob_l * NUM_GRID_X;
    int sx_iob_r = tx_iob_r * NUM_GRID_X;
    int sx_pll_l = tx_pll_l * NUM_GRID_X;
    int sx_pll_r = tx_pll_r * NUM_GRID_X;
    int sx_hsst = HSST_TILE_X * NUM_GRID_X + 3;

    int sy_iob_u_l = (NUM_REGION-1)*NUM_TILES_REGION*NUM_GRID_Y;
    int sy_iob_u_r = (NUM_REGION-2)*NUM_TILES_REGION*NUM_GRID_Y;
    int sy_iob_d_l = 0;
    int sy_iob_d_r = NUM_TILES_REGION*NUM_GRID_Y;
    int sy_gpll_u_r = ((NUM_REGION-2)*NUM_TILES_REGION+26)*NUM_GRID_Y;
    int sy_hsst_u = (NUM_REGION-1)*NUM_TILES_REGION*NUM_GRID_Y;
    int sy_hsst_d = 0;

    connect
      (
        <pin IO_STATUS_C_I of <device ESD_100HR_TILE @[sx,sy]>>  => <wire IO_STATUS_O of <device IOBHR_TILE @[sx_iob_l,sy_iob_d_l]>>,

        <pin TDI_T of <device ESD_100HR_TILE @[sx,sy]>>          => <wire TDO[0] of <device IOBHR_TILE @[sx_iob_l,sy_iob_u_l]>>,
        <pin TCK_IN_T of <device ESD_100HR_TILE @[sx,sy]>>       => <wire CLOCKDR_OUT of <device HSSTLP_TILE @[sx_hsst,sy_hsst_u]>>,
        <pin TDI_B of <device ESD_100HR_TILE @[sx,sy]>>          => <wire TDO_BSCAN of <device HSSTLP_TILE @[sx_hsst,sy_hsst_d]>>,
        <pin TCK_IN_B of <device ESD_100HR_TILE @[sx,sy]>>       => <wire TCK_OUT of <device IOBHR_TILE @[sx_iob_l,sy_iob_d_l]>>,

        <pin PLLLOCKEDCAS_PPLLTOCCS_IN of <device ESD_100HR_TILE @[sx,sy]>>   => <wire LOCKOUT_CAS of <device PPLL_TILE @[sx_pll_l,0]>>,
        <pin PLLLOCKEDCAS_PPLLTOGPLL_IN of <device ESD_100HR_TILE @[sx,sy]>>  => <wire LOCKOUT_CAS of <device GPLL_TILE @[sx_pll_r,sy_gpll_u_r]>>

      );

}//end of place_idcode_tile



}; // end of package pg2l100h_funcs_place
