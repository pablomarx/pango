*************************************************************************
****************************************************************************************/
library work;
use pg2l_defs,pg2l25h_defs,pg2l_funcs_place,pg2l_funcs_connect_gs;
use pg2l25h_funcs_connect_wl_bl;

structure arch_nl connect_bl of PG2L25H
{
    unsigned int l_tx[];

    unsigned int rx, tx, loc_device;

    int tx_l1 = 12;     
    int tx_l2 = 8;
    int tx_l3 = 4;
    int tx_r1 = 24;
    int tx_r2 = 26;
    int tx_r3 = 32;
    int tx_r4 = 34;
    int tx_r5 = 40;
    int tx_r6 = 42;

    int tx_bl = CRAM_CTRL_TILE_X;
    int ty_bl = CRAM_CTRL_TILE_Y;

    string device_bl = "CRAM_CTRL_25H_TILE";
    string device_name;

//connect_core_bl_input

    foreach rx( L_REGION )
    {
        foreach loc_device( { [0:1] } )
        {
            l_tx = (rx==0) ? L_SRB_TILES_X_R0 : 
           (loc_device==0) ? L_SRB_TILES_X_R1_D : L_SRB_TILES_X_R1_U;
            foreach tx( l_tx )
            {
                connect_core_bl_input(rx, tx, tx_bl, ty_bl, tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, 
                                      loc_device, device_bl, "SRB_TILE");
            }
        }
    }

    foreach rx( L_REGION )
    {
        foreach loc_device( { [0:1] } )
        {
            l_tx = (rx==0) ? L_CLMS_TILES_X_R0 : 
           (loc_device==0) ? L_CLMS_TILES_X_R1_D : L_CLMS_TILES_X_R1_U;
            foreach tx( l_tx )
            {
                connect_core_bl_input(rx, tx, tx_bl, ty_bl, tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, 
                                      loc_device, device_bl, "CLMS_TILE");
            }
        }
    }

    foreach rx( L_REGION )
    {
        foreach loc_device( { [0:1] } )
        {
            l_tx = (rx==0) ? L_CLMA_TILES_X_R0 : 
           (loc_device==0) ? L_CLMA_TILES_X_R1_D : L_CLMA_TILES_X_R1_U;
            foreach tx( l_tx )
            {
                connect_core_bl_input(rx, tx, tx_bl, ty_bl, tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, 
                                      loc_device, device_bl, "CLMA_TILE");
            }
        }
    }

    foreach rx( L_REGION )
    {
        foreach loc_device( { [0:1] } )
        {
            l_tx = (rx==0) ? L_IOL_TILES_X_R0 : L_IOL_TILES_X_R1;
            foreach tx( l_tx )
            {
                connect_core_bl_input(rx, tx, tx_bl, ty_bl, tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, 
                                      loc_device, device_bl, "IOLHR_TILE");
            }
        }
    }

//connect_ckeb_bl_input

    foreach rx( L_REGION )
    {
        l_tx = (rx==0) ? {L_IOCK_TILES_X_R0} : L_IOCK_TILES_X_R1;
        foreach tx( l_tx )
        {
            connect_ckeb_bl_input(rx, tx, tx_bl, ty_bl,tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, device_bl, "IOCK_TILE");
        }

        foreach tx(L_CKEB_TILES_X)
        {
            connect_ckeb_bl_input(rx, tx, tx_bl, ty_bl,tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, device_bl, "CKEB_TILE");
        }
    }

    foreach rx( L_REGION )
    {
        l_tx = (rx==0) ? L_CRAMSL0_TILES_X_R0 : L_CRAMSL0_TILES_X_R1;
        foreach tx( l_tx )
        {
            connect_ckeb_bl_input(rx, tx, tx_bl, ty_bl,tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, device_bl, "CRAMSL0_TILE");
        }

        foreach tx( L_CRAMSL1_TILES_X )
        {
            connect_ckeb_bl_input(rx, tx, tx_bl, ty_bl,tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, device_bl, "CRAMSL1_TILE");
        }

        foreach tx( L_CRAMSL3_TILES_X )
        {
            connect_ckeb_bl_input(rx, tx, tx_bl, ty_bl,tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, device_bl, "CRAMSL3_TILE");
        }

    }

//connect_uscm_bl_input

    connect_uscm_bl_input(LOC_USCM_REGION, USCM_TILE_X, tx_bl, ty_bl,tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, device_bl, "USCM_TILE");

//connect_adc_bl_input


    connect_adc_bl_input(LOC_ADC_REGION, ADC_TILE_X, tx_bl, ty_bl,tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, device_bl, "ADC_TILE");
    connect_adc_bl_input(LOC_ADC_REGION, CCS_TILE_X, tx_bl, ty_bl,tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, device_bl, "CCS_TILE");

//connect_region_bl_input   for IOBHR_TILE, HSSTLP_TILE, CRAM_CTRL_WRENHAN_TILE, CCS_TILE;

    foreach rx( L_REGION )
    {
        l_tx = (rx==0) ? L_IOB_TILES_X_R0 : L_IOB_TILES_X_R1;
        foreach tx( l_tx )
        {
            connect_region_bl_input(rx, tx, tx_bl, ty_bl, tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, device_bl, "IOBHR_TILE");
        }
    }

    foreach rx( L_REGION )
    {
        l_tx = (rx==0) ? L_WRENHAN_TILES_X_R0 : L_WRENHAN_TILES_X_R1;
        foreach tx( l_tx )
        {
            connect_region_bl_input(rx, tx, tx_bl, ty_bl, tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, device_bl, "CRAM_CTRL_WRENHAN_TILE");
        }
    }

    connect_region_bl_input(LOC_HSST_REGION, HSST_TILE_X, tx_bl, ty_bl, tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, device_bl, "HSSTLP_TILE");
    connect_region_bl_input(LOC_CCS_REGION, CCS_TILE_X, tx_bl, ty_bl, tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, device_bl, "CCS_TILE");

//connect_half_region_bl_input  for PLL, PCIE_TILE

    foreach rx( L_REGION )
    {
        l_tx = (rx==0) ? L_PLL_TILES_X_R0 : L_PLL_TILES_X_R1;
        foreach tx( l_tx )
        {
            connect_half_region_bl_input(rx, tx, tx_bl, ty_bl, tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, 0, device_bl, "PPLL_TILE");
            connect_half_region_bl_input(rx, tx, tx_bl, ty_bl, tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, 1, device_bl, "GPLL_TILE");

        }
    }

    connect_half_region_bl_input(LOC_PCIE_REGION, PCIE_TILE_X, tx_bl, ty_bl, tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, 0, device_bl, "PCIE_TILE");

//connect_wrenhan1_bl_input

    connect_wrenhan1_bl_input(LOC_WRENHAN1_REGION, WRENHAN1_TILE_X, tx_bl, ty_bl, tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, device_bl, "CRAM_CTRL_WRENHAN1_TILE");

//connect_drm_apm_bl_input

    foreach rx( L_REGION )
    {
        foreach loc_device( {[0:1]} )
        {
            l_tx = (rx==0) ? L_DRM_TILES_X_R0 :
           (loc_device==0) ? L_DRM_TILES_X_R1_D : L_DRM_TILES_X_R1_U;
            foreach tx( l_tx )
            {
                connect_drm_apm_bl_input(rx, tx, tx_bl, ty_bl, tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, loc_device, device_bl, "DRM_TILE");
            }

            foreach tx( L_APM_TILES_X )
            {
                connect_drm_apm_bl_input(rx, tx, tx_bl, ty_bl, tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, loc_device, device_bl, "APM_TILE");

            }
        }
    }



};//end of structure arch_nl connect_bl of PG2L25H
/***************************************************************************************
****************************************************************************************/
library work;
use pg2l_defs,pg2l25h_defs,pg2l_funcs_place,pg2l_funcs_connect_gs;
use pg2l25h_funcs_connect_wl_bl;

structure arch_nl connect_wl of PG2L25H
{
    unsigned int rx, tx, ty;
    unsigned int ty_tmp;
    unsigned int l_tx[], l_ty[];

    int rx_ccs = LOC_CCS_REGION;
    int tx_wl = CRAM_CTRL_TILE_X;
    int ty_wl = CRAM_CTRL_TILE_Y;

    string device_wl = "CRAM_CTRL_25H_TILE";

//connect_srb_wl_input

    foreach rx( L_REGION )
    {
        foreach ty( L_SRB_TILES_Y )
        {
            connect_srb_wl_input(rx, ty, tx_wl, ty_wl, device_wl);
        }
    }

//connect_clma_wl_input

    foreach rx( L_REGION )
    {
        foreach ty(L_CLM_TILES_Y)
        {
            connect_clma_wl_input(rx, ty, tx_wl, ty_wl, device_wl);
        }
    }

//connect_clms_wl_input

    foreach rx( L_REGION )
    {
        foreach ty(L_CLM_TILES_Y)
        {
            connect_clms_wl_input(rx, ty, tx_wl, ty_wl, device_wl);
        }
    }

//connect_ckeb_wl_input

    foreach rx( L_REGION )
    {
        connect_ckeb_wl_input(rx, MID_TILE_REGION, tx_wl, ty_wl, device_wl);
    }

//connect_drm_wl_input

    foreach rx( L_REGION )
    {
        foreach ty( L_DRM_TILES_Y )
        {
            connect_drm_wl_input(rx, ty, tx_wl, ty_wl, device_wl, "DRM_TILE");
        }
    }

//connect_apm_wl_input

    foreach rx( L_REGION )
    {
        foreach ty(L_APM_TILES_Y)
        {
            connect_apm_wl_input(rx, ty, tx_wl, ty_wl, device_wl, "APM_TILE");
        }
    }

//connect_pll_wl_input

    foreach rx( L_REGION )
    {
        l_ty = {GPLL_TILE_Y, PPLL_TILE_Y};
        foreach ty( l_ty )
        {
            string device_pll = (ty>MID_TILE_REGION) ? "GPLL_TILE" : "PPLL_TILE";
            connect_pll_wl_input(rx, ty, tx_wl, ty_wl, device_wl, device_pll);
        }
    }

//connect_iol_wl_input

    foreach rx( L_REGION )
    {
        foreach ty( L_IOL_TILES_Y )
        {
            connect_iol_wl_input(rx, ty, tx_wl, ty_wl, device_wl, "IOLHR_TILE");
        }
    }

//connect_iob_wl_input

    foreach rx( L_REGION )
    {
        connect_iob_wl_input(rx, tx_wl, ty_wl, device_wl, "IOBHR_TILE", "HSSTLP_TILE");
    }

//connect_uscm_wl_input

    connect_uscm_wl_input(LOC_USCM_REGION, USCM_TILE_X, tx_wl, ty_wl, device_wl, "USCM_TILE");

//connect_adc_wl_input
    
    connect_adc_wl_input(LOC_ADC_REGION, ADC_TILE_X, tx_wl, ty_wl, rx_ccs, device_wl, "ADC_TILE");

    connect_adc_wl_input(LOC_CCS_REGION, CCS_TILE_X, tx_wl, ty_wl, rx_ccs, device_wl, "CCS_TILE");

//connect_pcie_wl_input

    connect_pcie_wl_input(LOC_PCIE_REGION, PCIE_TILE_X, tx_wl, ty_wl, device_wl, "PCIE_TILE");


};//end of structure arch_nl connect_wl of PG2L25H
/***************************************************************************************
****************************************************************************************/
library work;
use pg2l_defs,pg2l25h_defs,pg2l_funcs_place;
use pg2l25h_funcs_connect_wl_bl,pg2l_funcs_connect_gs;

structure arch_nl connect_gs of PG2L25H
{   
    unsigned int rx, tx;
    unsigned int tx_ckeb;
    unsigned int bank;
    unsigned int loc_srb, loc_drm, loc_apm, loc_iol, loc_pll;

    unsigned int l_tx[];
    unsigned int l_bank[];


    int tx_adc = ADC_TILE_X;
    int tx_bl = CRAM_CTRL_TILE_X;
    int ty_bl = CRAM_CTRL_TILE_Y;

    int bank_top = 4;

    int tx_l1 = 12;     
    int tx_l2 = 8;
    int tx_l3 = 4;
    int tx_r1 = 24;
    int tx_r2 = 26;
    int tx_r3 = 32;
    int tx_r4 = 34;
    int tx_r5 = 40;
    int tx_r6 = 42;

    string type_lr;
    string device_srb;
    string device_bl = "CRAM_CTRL_25H_TILE";
    string device_hsst = "HSSTLP_TILE";
    string device_esd = "ESD_25HR_TILE";
    string device_ccs = "CCS_TILE";
    string device_iob = "IOBHR_TILE";
    string device_iol = "IOLHR_TILE";
    string device_ckeb = "CKEB_TILE";
    string device_wrenhan = "CRAM_CTRL_WRENHAN_TILE";
    string device_wrenhan1 = "CRAM_CTRL_WRENHAN1_TILE";


//*********************************gs from common***************************************************//

//connect_srb_gs_input

    int tx_e = NUM_TILE_X -3; //max x site of core

    foreach rx( L_REGION )
    {
        foreach loc_srb( {[0:1]} )
        {
            l_tx = (rx==0) ? L_SRB_TILES_X_R0 :
              (loc_srb==0) ? L_SRB_TILES_X_R1_D : L_SRB_TILES_X_R1_U;
            foreach tx( l_tx )
            {
                tx_ckeb = (tx==44) ? (tx - 1) : (tx==43) ? tx : (tx==tx_adc) ? (tx_bl + 2) :
                          (((tx<tx_bl)&&(tx%2==1))||((tx>tx_bl)&&(tx%2==0))) ? tx : (tx + 1);
                device_srb = "SRB_TILE";
                connect_srb_gs_input(rx, tx, tx_ckeb, tx_bl, tx_e, device_ckeb,device_srb, loc_srb);

            }
        }
    }

    foreach rx( L_REGION )
    {
        foreach loc_srb( {[0:1]} )
        {
            l_tx = (rx==0) ? L_CLMA_TILES_X_R0 :
              (loc_srb==0) ? L_CLMA_TILES_X_R1_D : L_CLMA_TILES_X_R1_U;
            foreach tx( l_tx )
            {
                tx_ckeb = (tx==44) ? (tx - 1) : (tx==43) ? tx : (tx==tx_adc) ? (tx_bl + 2) :
                          (((tx<tx_bl)&&(tx%2==1))||((tx>tx_bl)&&(tx%2==0))) ? tx : (tx + 1);
                device_srb = "CLMA_TILE";
                connect_srb_gs_input(rx, tx, tx_ckeb, tx_bl, tx_e, device_ckeb,device_srb, loc_srb);

            }
        }
    }

    foreach rx( L_REGION )
    {
        foreach loc_srb( {[0:1]} )
        {
            l_tx = (rx==0) ? L_CLMS_TILES_X_R0 :
              (loc_srb==0) ? L_CLMS_TILES_X_R1_D : L_CLMS_TILES_X_R1_U;
            foreach tx( l_tx )
            {
                tx_ckeb = (tx==44) ? (tx - 1) : (tx==43) ? tx : (tx==tx_adc) ? (tx_bl + 2) :
                          (((tx<tx_bl)&&(tx%2==1))||((tx>tx_bl)&&(tx%2==0))) ? tx : (tx + 1);
                device_srb = "CLMS_TILE";
                connect_srb_gs_input(rx, tx, tx_ckeb, tx_bl, tx_e, device_ckeb,device_srb, loc_srb);

            }
        }
    }

//connect_drm_gs_input

    foreach rx( L_REGION )
    {
        foreach loc_drm( {[0:1]} )
        {
            l_tx = (rx==0) ? L_DRM_TILES_X_R0 :
              (loc_drm==0) ? L_DRM_TILES_X_R1_D : L_DRM_TILES_X_R1_U;
            foreach tx( l_tx )
            {
                tx_ckeb = (tx==44) ? (tx - 1) : (tx==43) ? tx : (tx==tx_adc) ? (tx_bl + 2) :
                          (((tx<tx_bl)&&(tx%2==1))||((tx>tx_bl)&&(tx%2==0))) ? tx : (tx + 1);
                connect_drm_gs_input(rx, tx, tx_ckeb, tx_bl, tx_e, device_ckeb, loc_drm);
            }
        }
    }

//connect_apm_gs_input

    foreach rx( L_REGION )
    {
        foreach loc_apm( {[0:1]} )
        {
            foreach tx( L_APM_TILES_X )
            {
                tx_ckeb = (tx==44) ? (tx - 1) : (tx==43) ? tx : (tx==tx_adc) ? (tx_bl + 2) :
                          (((tx<tx_bl)&&(tx%2==1))||((tx>tx_bl)&&(tx%2==0))) ? tx : (tx + 1);
                connect_apm_gs_input(rx, tx, tx_ckeb, tx_bl, tx_e, device_ckeb, loc_apm);
            }
        }
    }

//connect_adc_gs_input

    foreach rx( {LOC_ADC_REGION} )
    {
        tx = ADC_TILE_X;
        tx_ckeb = (tx==44) ? (tx - 1) : (tx==43) ? tx : (tx==tx_adc) ? (tx_bl + 2) :
                  (((tx<tx_bl)&&(tx%2==1))||((tx>tx_bl)&&(tx%2==0))) ? tx : (tx + 1);
        connect_adc_gs_input(rx, ADC_TILE_X, tx_ckeb, device_ckeb);
    }

//connect_iol_gs_input

    foreach rx( L_REGION )
    {
        l_tx = (rx==0) ? L_IOL_TILES_X_R0 : L_IOL_TILES_X_R1;
        foreach loc_iol( {[0:1]} )
        {
            foreach tx( l_tx )
            {
                tx_ckeb = (tx<tx_bl) ? (tx - 1) : tx;
                connect_iol_gs_input(rx, tx, tx_ckeb, device_iol, loc_iol);
            }
        }
    }

//connect_pll_gs_input

    foreach rx( L_REGION )
    {
        l_tx = (rx==0) ? L_PLL_TILES_X_R0 : L_PLL_TILES_X_R1;
        foreach tx( l_tx )
        {
            foreach loc_pll( {[0:1]} )
            {
                tx_ckeb = (tx==44) ? (tx - 1) : (tx==43) ? tx : (tx==tx_adc) ? (tx_bl + 2) : (tx==1) ? (tx + 2) : (tx==NUM_TILE_X - 2) ? (tx - 2) :
                          (((tx<tx_bl)&&(tx%2==1))||((tx>tx_bl)&&(tx%2==0))) ? tx : (tx + 1);
                connect_pll_gs_input(rx, tx, tx_ckeb, device_ckeb, loc_pll);
            }
        }
    }

//connect_iock_gs_input

    foreach rx( L_REGION )
    {
        l_tx = (rx==0) ? L_IOCK_TILES_X_R0 : L_IOCK_TILES_X_R1;
        foreach tx(l_tx)
        {
            connect_iock_gs_input(rx, tx);
        }
    }

//connect_uscm_gs_input

    foreach rx( {LOC_USCM_REGION} )
    {
        tx = USCM_TILE_X;
        tx_ckeb = (tx==44) ? (tx - 1) : (tx==43) ? tx : (tx==tx_adc) ? (tx_bl + 2) :
                  (((tx<tx_bl)&&(tx%2==1))||((tx>tx_bl)&&(tx%2==0))) ? tx : (tx + 1);

        connect_uscm_gs_input(rx, tx, tx_ckeb, tx_bl, device_ckeb);
    }

//connect_pcie_gs_input

    foreach rx( {LOC_PCIE_REGION} )
    {
        tx = PCIE_TILE_X;
        tx_ckeb = (tx==44) ? (tx - 1) : (tx==43) ? tx : (tx==tx_adc) ? (tx_bl + 2) :
                  (((tx<tx_bl)&&(tx%2==1))||((tx>tx_bl)&&(tx%2==0))) ? tx : (tx + 1);
        connect_pcie_gs_input(rx, tx, tx_ckeb, tx_bl, device_ckeb);
    }

//connect_hsst_gs_input

    foreach rx( {LOC_HSST_REGION} )
    {
        tx = HSST_TILE_X;
        tx_ckeb = (tx==44) ? (tx - 1) : (tx==43) ? tx : (tx==tx_adc) ? (tx_bl + 2) :
                  (((tx<tx_bl)&&(tx%2==1))||((tx>tx_bl)&&(tx%2==0))) ? tx : (tx + 1);
        connect_hsst_gs_input(rx, tx, tx_ckeb, device_ckeb, device_hsst);
    }

//*********************************gs from parts***************************************************//

//connect_hsst_gs_input_50h

    connect_hsst_gs_input_50h(HSST_TILE_X, HSST_TILE_Y, LOC_HSST_REGION, CCS_TILE_X, CCS_TILE_Y, LOC_CCS_REGION, 
                              tx_bl, ty_bl, ESD_TILE_X, ESD_TILE_Y, device_bl, device_iob, device_esd, device_hsst);

//connect_pll_iconst_input

    foreach rx( L_REGION )
    {
        l_tx = (rx==0) ? L_PLL_TILES_X_R0 : L_PLL_TILES_X_R1;
        foreach tx( l_tx )
        {
            connect_pll_iconst_input(rx, tx, GPLL_TILE_Y, device_iob);
        }
    }

//connect_ckeb_gs_input

    int tx_iock_l = IOCK_TILE_X_L;
    int tx_iock_r = IOCK_TILE_X_R;

    int tx_ckeb2_l = CKEB2_TILE_X_L;
    int tx_ckeb2_r = CKEB2_TILE_X_R;

    unsigned int l_tx_ckeb[];
    foreach rx(L_REGION)
    {
        l_tx_ckeb = (rx==0) ? { L_CKEB_TILES_X, L_IOCK_TILES_X_R0 } : { L_CKEB_TILES_X, L_IOCK_TILES_X_R1 };

        connect_ckeb_gs_input(rx, l_tx_ckeb, tx_bl, ty_bl, tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, 
                              tx_ckeb2_l, tx_ckeb2_r, tx_iock_l, tx_iock_r, device_bl);
    }

//connect_cram_wrenhan_gs_input for CRAM_CTRL_WRENHAN_TILE & CRAM_CTRL_WRENHAN1_TILE

    foreach rx( L_REGION )
    {
        l_tx = (rx==0) ? L_WRENHAN_TILES_X_R0 : L_WRENHAN_TILES_X_R1;
        foreach tx( l_tx )
        {
            connect_cram_wrenhan_gs_input(rx, tx, tx_bl, ty_bl, tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, device_bl, device_wrenhan);
        }
    }

    connect_cram_wrenhan_gs_input(LOC_WRENHAN1_REGION, WRENHAN1_TILE_X, tx_bl, ty_bl, tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, device_bl, device_wrenhan1);


//connect_cram_ctrl_gs_input

    foreach rx( L_REGION )
    {
        connect_cram_ctrl_gs_input(rx, tx_bl, ty_bl, tx_l1, tx_l2, tx_l3, tx_r1, tx_r2, tx_r3, tx_r4, tx_r5, tx_r6, device_bl);
    }

//connect_iob_gs

    foreach type_lr( {"L", "R"} )
    {
        l_bank = (type_lr=="L") ? {4,5} : {5};
        foreach bank( l_bank )
        {
            connect_iob_gs(type_lr, bank, bank_top, NUM_TILE_X, NUM_REGION, tx_bl, ty_bl, device_bl, device_iob);
        }
    }



};//end of structure arch_nl connect_gs of PG2L25H
