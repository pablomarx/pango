use pg2l_defs,pg2l25h_defs;//pg2l_ANALOG_SRB_inc;
//use pg2l_CCS_SRB_inc;
use pg2l_ccs_srb_inc;

package pg2l25h_funcs_place
{
/********************************************************************************
********************************************************************************/
function place_cram_ctrl_tile(unsigned int tx,ty, tx_ccs, ty_ccs)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    string strVar;

    sprintf(strVar,"ntDATA_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R2[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATAN_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R2[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATA_L_1_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_1_R2[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATAN_L_1_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_1_R2[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATA_L_2_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_2_R2[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATAN_L_2_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_2_R2[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATA_L_3_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_3_R2[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATAN_L_3_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_3_R2[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATA_R_1_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_1_R2[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATAN_R_1_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_1_R2[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATA_R_2_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_2_R2[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATAN_R_2_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_2_R2[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATA_R_3_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_3_R2[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATAN_R_3_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_3_R2[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATA_R_4_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_4_R2[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATAN_R_4_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_4_R2[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATA_R_5_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_5_R2[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATAN_R_5_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_5_R2[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATA_R_6_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_6_R2[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATAN_R_6_R2_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_6_R2[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATA_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R1[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATAN_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R1[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATA_L_1_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_1_R1[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATAN_L_1_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_1_R1[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATA_L_2_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_2_R1[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATAN_L_2_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_2_R1[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATA_L_3_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_3_R1[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATAN_L_3_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_3_R1[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATA_R_1_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_1_R1[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATAN_R_1_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_1_R1[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATA_R_2_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_2_R1[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATAN_R_2_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_2_R1[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATA_R_3_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_3_R1[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATAN_R_3_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_3_R1[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATA_R_4_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_4_R1[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATAN_R_4_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_4_R1[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATA_R_5_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_5_R1[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATAN_R_5_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_5_R1[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATA_R_6_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_6_R1[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATAN_R_6_R1_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_6_R1[3231:0] = wire *strVar[3231:0];
    
    sprintf(strVar,"ntDATA_BACK_%d_%d",sx,sy);
    &wire ntRef_ntDATA_BACK[31:0] = wire *strVar[31:0];
    
    sprintf(strVar,"ntADDR_UP_R2_%d_%d",sx,sy);
    &wire ntRef_ntADDR_UP_R2[1098:0] = wire *strVar[1098:0];
    
    sprintf(strVar,"ntADDR_DN_R2_%d_%d",sx,sy);
    &wire ntRef_ntADDR_DN_R2[1098:0] = wire *strVar[1098:0];
    
    sprintf(strVar,"ntMASK_N_UP_R2_%d_%d",sx,sy);
    &wire ntRef_ntMASK_N_UP_R2[13:0] = wire *strVar[13:0];
    
    sprintf(strVar,"ntMASK_N_DN_R2_%d_%d",sx,sy);
    &wire ntRef_ntMASK_N_DN_R2[13:0] = wire *strVar[13:0];
    
    sprintf(strVar,"ntREAD2T0_UP_R2_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T0_UP_R2[13:0] = wire *strVar[13:0];
    
    sprintf(strVar,"ntREAD2T0_DN_R2_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T0_DN_R2[13:0] = wire *strVar[13:0];
    
    sprintf(strVar,"ntREAD2T1_UP_R2_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T1_UP_R2[13:0] = wire *strVar[13:0];
    
    sprintf(strVar,"ntREAD2T1_DN_R2_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T1_DN_R2[13:0] = wire *strVar[13:0];
    
    sprintf(strVar,"ntMCE_OU_R2_%d_%d",sx,sy);
    &wire ntRef_ntMCE_OU_R2[2:0] = wire *strVar[2:0];
    
    sprintf(strVar,"ntMWR_OU_R2_%d_%d",sx,sy);
    &wire ntRef_ntMWR_OU_R2[2:0] = wire *strVar[2:0];
    
    sprintf(strVar,"ntMCLKB_OU_R2_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OU_R2[2:0] = wire *strVar[2:0];
    
    sprintf(strVar,"ntMCE_OD_R2_%d_%d",sx,sy);
    &wire ntRef_ntMCE_OD_R2[2:0] = wire *strVar[2:0];
    
    sprintf(strVar,"ntMWR_OD_R2_%d_%d",sx,sy);
    &wire ntRef_ntMWR_OD_R2[2:0] = wire *strVar[2:0];
    
    sprintf(strVar,"ntMCLKB_OD_R2_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OD_R2[2:0] = wire *strVar[2:0];
    
    sprintf(strVar,"ntFRAME_ADDR_OU0_R2_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OU0_R2[7:0] = wire *strVar[7:0];
    
    sprintf(strVar,"ntFRAME_ADDR_OD0_R2_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OD0_R2[7:0] = wire *strVar[7:0];
    
    sprintf(strVar,"ntFRAME_ADDR_OU1_R2_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OU1_R2[7:0] = wire *strVar[7:0];
    
    sprintf(strVar,"ntFRAME_ADDR_OD1_R2_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OD1_R2[7:0] = wire *strVar[7:0];
    
    sprintf(strVar,"ntFRAME_ADDR_OU2_R2_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OU2_R2[7:0] = wire *strVar[7:0];
    
    sprintf(strVar,"ntFRAME_ADDR_OD2_R2_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OD2_R2[7:0] = wire *strVar[7:0];
    
    sprintf(strVar,"ntADDR_UP_R1_%d_%d",sx,sy);
    &wire ntRef_ntADDR_UP_R1[1090:0] = wire *strVar[1090:0];
    
    sprintf(strVar,"ntADDR_DN_R1_%d_%d",sx,sy);
    &wire ntRef_ntADDR_DN_R1[1090:0] = wire *strVar[1090:0];
    
    sprintf(strVar,"ntMASK_N_UP_R1_%d_%d",sx,sy);
    &wire ntRef_ntMASK_N_UP_R1[13:0] = wire *strVar[13:0];
    
    sprintf(strVar,"ntMASK_N_DN_R1_%d_%d",sx,sy);
    &wire ntRef_ntMASK_N_DN_R1[13:0] = wire *strVar[13:0];
    
    sprintf(strVar,"ntREAD2T0_UP_R1_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T0_UP_R1[13:0] = wire *strVar[13:0];
    
    sprintf(strVar,"ntREAD2T0_DN_R1_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T0_DN_R1[13:0] = wire *strVar[13:0];
    
    sprintf(strVar,"ntREAD2T1_UP_R1_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T1_UP_R1[13:0] = wire *strVar[13:0];
    
    sprintf(strVar,"ntREAD2T1_DN_R1_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T1_DN_R1[13:0] = wire *strVar[13:0];
    
    sprintf(strVar,"ntMCE_OU_R1_%d_%d",sx,sy);
    &wire ntRef_ntMCE_OU_R1[2:0] = wire *strVar[2:0];
    
    sprintf(strVar,"ntMWR_OU_R1_%d_%d",sx,sy);
    &wire ntRef_ntMWR_OU_R1[2:0] = wire *strVar[2:0];
    
    sprintf(strVar,"ntMCLKB_OU_R1_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OU_R1[2:0] = wire *strVar[2:0];
    
    sprintf(strVar,"ntMCE_OD_R1_%d_%d",sx,sy);
    &wire ntRef_ntMCE_OD_R1[2:0] = wire *strVar[2:0];
    
    sprintf(strVar,"ntMWR_OD_R1_%d_%d",sx,sy);
    &wire ntRef_ntMWR_OD_R1[2:0] = wire *strVar[2:0];
    
    sprintf(strVar,"ntMCLKB_OD_R1_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OD_R1[2:0] = wire *strVar[2:0];
    
    sprintf(strVar,"ntFRAME_ADDR_OU0_R1_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OU0_R1[7:0] = wire *strVar[7:0];
    
    sprintf(strVar,"ntFRAME_ADDR_OD0_R1_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OD0_R1[7:0] = wire *strVar[7:0];
    
    sprintf(strVar,"ntFRAME_ADDR_OU1_R1_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OU1_R1[7:0] = wire *strVar[7:0];
    
    sprintf(strVar,"ntFRAME_ADDR_OD1_R1_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OD1_R1[7:0] = wire *strVar[7:0];
    
    sprintf(strVar,"ntFRAME_ADDR_OU2_R1_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OU2_R1[7:0] = wire *strVar[7:0];
    
    sprintf(strVar,"ntFRAME_ADDR_OD2_R1_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OD2_R1[7:0] = wire *strVar[7:0];
    
    sprintf(strVar,"ntGRS_N_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OL_R1[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntGWEN_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OL_R1[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntPOR_N_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OL_R1[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntPUP_REL_N_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OL_R1[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntGLOGEN_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OL_R1[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntPOR_N_1P8_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P8_OL_R1[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntPRCFG_N_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_N_OL_R1[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntRST_N_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntRST_N_OL_R1[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntGRS_N_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OR_R1[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntGWEN_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OR_R1[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntPOR_N_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OR_R1[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntPUP_REL_N_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OR_R1[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntGLOGEN_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OR_R1[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntPOR_N_1P8_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P8_OR_R1[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntPRCFG_N_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_N_OR_R1[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntRST_N_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntRST_N_OR_R1[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntGRS_N_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OL_R2[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntGWEN_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OL_R2[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntPOR_N_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OL_R2[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntPUP_REL_N_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OL_R2[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntGLOGEN_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OL_R2[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntPOR_N_1P8_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P8_OL_R2[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntPRCFG_N_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_N_OL_R2[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntRST_N_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntRST_N_OL_R2[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntGRS_N_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OR_R2[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntGWEN_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OR_R2[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntPOR_N_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OR_R2[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntPUP_REL_N_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OR_R2[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntGLOGEN_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OR_R2[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntPOR_N_1P8_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P8_OR_R2[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntPRCFG_N_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_N_OR_R2[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntRST_N_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntRST_N_OR_R2[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntFRAME_ADDR_BLINT_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_BLINT[7:0] = wire *strVar[7:0];
    
    sprintf(strVar,"ntCOLUMN_ADDR_BLINT_%d_%d",sx,sy);
    &wire ntRef_ntCOLUMN_ADDR_BLINT[4:0] = wire *strVar[4:0];
    
    sprintf(strVar,"ntERASE_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntERASE_OL_R1[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntERASE_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntERASE_OR_R1[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntPROG_ON_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON_OL_R1[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntPROG_ON_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON_OR_R1[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntERASE_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntERASE_OL_R2[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntERASE_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntERASE_OR_R2[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntPROG_ON_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON_OL_R2[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntPROG_ON_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON_OR_R2[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntGOUTEN_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_OL_R1[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntGOUTEN_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_OR_R1[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntGOUTEN_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_OL_R2[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntGOUTEN_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_OR_R2[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntWL_ON_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntWL_ON_OL_R1[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntWL_ON_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntWL_ON_OR_R1[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntWL_ON_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntWL_ON_OL_R2[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntWL_ON_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntWL_ON_OR_R2[6:0] = wire *strVar[6:0];
    
    sprintf(strVar,"ntCOLUMN_INC_O_%d_%d",sx,sy);
    &wire ntRef_ntCOLUMN_INC_O = wire *strVar;
    
    sprintf(strVar,"ntREGION_INC_O_%d_%d",sx,sy);
    &wire ntRef_ntREGION_INC_O = wire *strVar;
    
    sprintf(strVar,"ntREGION_END_O_%d_%d",sx,sy);
    &wire ntRef_ntREGION_END_O = wire *strVar;
    
    sprintf(strVar,"ntBSRMODE1_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE1_OL_R1 = wire *strVar;
    
    sprintf(strVar,"ntBSRMODE2_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE2_OL_R1 = wire *strVar;
    
    sprintf(strVar,"ntBSRMODE3_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE3_OL_R1 = wire *strVar;
    
    sprintf(strVar,"ntBSRRST_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRRST_OL_R1 = wire *strVar;
    
    sprintf(strVar,"ntBSRSHIFT_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRSHIFT_OL_R1 = wire *strVar;
    
    sprintf(strVar,"ntBSRUPDATE_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRUPDATE_OL_R1 = wire *strVar;
    
    sprintf(strVar,"ntBSRMODE1_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE1_OR_R1 = wire *strVar;
    
    sprintf(strVar,"ntBSRMODE2_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE2_OR_R1 = wire *strVar;
    
    sprintf(strVar,"ntBSRMODE3_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE3_OR_R1 = wire *strVar;
    
    sprintf(strVar,"ntBSRRST_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRRST_OR_R1 = wire *strVar;
    
    sprintf(strVar,"ntBSRSHIFT_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRSHIFT_OR_R1 = wire *strVar;
    
    sprintf(strVar,"ntBSRUPDATE_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntBSRUPDATE_OR_R1 = wire *strVar;
    
    sprintf(strVar,"ntBSRMODE1_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE1_OL_R2 = wire *strVar;
    
    sprintf(strVar,"ntBSRMODE2_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE2_OL_R2 = wire *strVar;
    
    sprintf(strVar,"ntBSRMODE3_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE3_OL_R2 = wire *strVar;
    
    sprintf(strVar,"ntBSRRST_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRRST_OL_R2 = wire *strVar;
    
    sprintf(strVar,"ntBSRSHIFT_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRSHIFT_OL_R2 = wire *strVar;
    
    sprintf(strVar,"ntBSRUPDATE_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRUPDATE_OL_R2 = wire *strVar;
    
    sprintf(strVar,"ntBSRMODE1_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE1_OR_R2 = wire *strVar;
    
    sprintf(strVar,"ntBSRMODE2_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE2_OR_R2 = wire *strVar;
    
    sprintf(strVar,"ntBSRMODE3_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRMODE3_OR_R2 = wire *strVar;
    
    sprintf(strVar,"ntBSRRST_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRRST_OR_R2 = wire *strVar;
    
    sprintf(strVar,"ntBSRSHIFT_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRSHIFT_OR_R2 = wire *strVar;
    
    sprintf(strVar,"ntBSRUPDATE_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntBSRUPDATE_OR_R2 = wire *strVar;
    
    sprintf(strVar,"ntREAD_BLINT_%d_%d",sx,sy);
    &wire ntRef_ntREAD_BLINT = wire *strVar;
    
    sprintf(strVar,"ntVCC_WL_R1_%d_%d",sx,sy);
    &wire ntRef_ntVCC_WL_R1 = wire *strVar;
    
    sprintf(strVar,"ntVCC_WL_R2_%d_%d",sx,sy);
    &wire ntRef_ntVCC_WL_R2 = wire *strVar;
    
    sprintf(strVar,"ntMEM_INIT_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntMEM_INIT_OL_R1 = wire *strVar;
    
    sprintf(strVar,"ntAC_TEST_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntAC_TEST_OL_R1 = wire *strVar;
    
    sprintf(strVar,"ntAC_MODE_OL_R1_%d_%d",sx,sy);
    &wire ntRef_ntAC_MODE_OL_R1 = wire *strVar;
    
    sprintf(strVar,"ntMEM_INIT_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntMEM_INIT_OR_R1 = wire *strVar;
    
    sprintf(strVar,"ntAC_TEST_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntAC_TEST_OR_R1 = wire *strVar;
    
    sprintf(strVar,"ntAC_MODE_OR_R1_%d_%d",sx,sy);
    &wire ntRef_ntAC_MODE_OR_R1 = wire *strVar;
    
    sprintf(strVar,"ntMEM_INIT_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntMEM_INIT_OL_R2 = wire *strVar;
    
    sprintf(strVar,"ntAC_TEST_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntAC_TEST_OL_R2 = wire *strVar;
    
    sprintf(strVar,"ntAC_MODE_OL_R2_%d_%d",sx,sy);
    &wire ntRef_ntAC_MODE_OL_R2 = wire *strVar;
    
    sprintf(strVar,"ntMEM_INIT_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntMEM_INIT_OR_R2 = wire *strVar;
    
    sprintf(strVar,"ntAC_TEST_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntAC_TEST_OR_R2 = wire *strVar;
    
    sprintf(strVar,"ntAC_MODE_OR_R2_%d_%d",sx,sy);
    &wire ntRef_ntAC_MODE_OR_R2 = wire *strVar;



    sprintf(strVar, "CRAM_CTRL_25H_TILE_%d_%d", sx, sy);
      device CRAM_CTRL_25H_TILE *strVar
        port map(

                  AC_MODE_OL_R1        =>    ntRef_ntAC_MODE_OL_R1,       
                  AC_MODE_OL_R2        =>    ntRef_ntAC_MODE_OL_R2,       
                  AC_MODE_OR_R1        =>    ntRef_ntAC_MODE_OR_R1,       
                  AC_MODE_OR_R2        =>    ntRef_ntAC_MODE_OR_R2,       
                  AC_TEST_OL_R1        =>    ntRef_ntAC_TEST_OL_R1,       
                  AC_TEST_OL_R2        =>    ntRef_ntAC_TEST_OL_R2,       
                  AC_TEST_OR_R1        =>    ntRef_ntAC_TEST_OR_R1,       
                  AC_TEST_OR_R2        =>    ntRef_ntAC_TEST_OR_R2,       
                  ADDR_DN_R1           =>    ntRef_ntADDR_DN_R1,          
                  ADDR_DN_R2           =>    ntRef_ntADDR_DN_R2,          
                  ADDR_UP_R1           =>    ntRef_ntADDR_UP_R1,          
                  ADDR_UP_R2           =>    ntRef_ntADDR_UP_R2,          
                  BSRMODE1_OL_R1       =>    ntRef_ntBSRMODE1_OL_R1,      
                  BSRMODE1_OL_R2       =>    ntRef_ntBSRMODE1_OL_R2,      
                  BSRMODE1_OR_R1       =>    ntRef_ntBSRMODE1_OR_R1,      
                  BSRMODE1_OR_R2       =>    ntRef_ntBSRMODE1_OR_R2,      
                  BSRMODE2_OL_R1       =>    ntRef_ntBSRMODE2_OL_R1,      
                  BSRMODE2_OL_R2       =>    ntRef_ntBSRMODE2_OL_R2,      
                  BSRMODE2_OR_R1       =>    ntRef_ntBSRMODE2_OR_R1,      
                  BSRMODE2_OR_R2       =>    ntRef_ntBSRMODE2_OR_R2,      
                  BSRMODE3_OL_R1       =>    ntRef_ntBSRMODE3_OL_R1,      
                  BSRMODE3_OL_R2       =>    ntRef_ntBSRMODE3_OL_R2,      
                  BSRMODE3_OR_R1       =>    ntRef_ntBSRMODE3_OR_R1,      
                  BSRMODE3_OR_R2       =>    ntRef_ntBSRMODE3_OR_R2,      
                  BSRRST_OL_R1         =>    ntRef_ntBSRRST_OL_R1,        
                  BSRRST_OL_R2         =>    ntRef_ntBSRRST_OL_R2,        
                  BSRRST_OR_R1         =>    ntRef_ntBSRRST_OR_R1,        
                  BSRRST_OR_R2         =>    ntRef_ntBSRRST_OR_R2,        
                  BSRSHIFT_OL_R1       =>    ntRef_ntBSRSHIFT_OL_R1,      
                  BSRSHIFT_OL_R2       =>    ntRef_ntBSRSHIFT_OL_R2,      
                  BSRSHIFT_OR_R1       =>    ntRef_ntBSRSHIFT_OR_R1,      
                  BSRSHIFT_OR_R2       =>    ntRef_ntBSRSHIFT_OR_R2,      
                  BSRUPDATE_OL_R1      =>    ntRef_ntBSRUPDATE_OL_R1,     
                  BSRUPDATE_OL_R2      =>    ntRef_ntBSRUPDATE_OL_R2,     
                  BSRUPDATE_OR_R1      =>    ntRef_ntBSRUPDATE_OR_R1,     
                  BSRUPDATE_OR_R2      =>    ntRef_ntBSRUPDATE_OR_R2,     
                  COLUMN_ADDR_BLINT    =>    ntRef_ntCOLUMN_ADDR_BLINT,   
                  COLUMN_INC_O         =>    ntRef_ntCOLUMN_INC_O,        
                  DATA_BACK            =>    ntRef_ntDATA_BACK,           
                  DATA_L_1_R1          =>    ntRef_ntDATA_L_1_R1,         
                  DATA_L_1_R2          =>    ntRef_ntDATA_L_1_R2,         
                  DATA_L_2_R1          =>    ntRef_ntDATA_L_2_R1,         
                  DATA_L_2_R2          =>    ntRef_ntDATA_L_2_R2,         
                  DATA_L_3_R1          =>    ntRef_ntDATA_L_3_R1,         
                  DATA_L_3_R2          =>    ntRef_ntDATA_L_3_R2,         
                  DATAN_L_1_R1         =>    ntRef_ntDATAN_L_1_R1,        
                  DATAN_L_1_R2         =>    ntRef_ntDATAN_L_1_R2,        
                  DATAN_L_2_R1         =>    ntRef_ntDATAN_L_2_R1,        
                  DATAN_L_2_R2         =>    ntRef_ntDATAN_L_2_R2,        
                  DATAN_L_3_R1         =>    ntRef_ntDATAN_L_3_R1,        
                  DATAN_L_3_R2         =>    ntRef_ntDATAN_L_3_R2,        
                  DATAN_R1             =>    ntRef_ntDATAN_R1,            
                  DATAN_R2             =>    ntRef_ntDATAN_R2,            
                  DATAN_R_1_R1         =>    ntRef_ntDATAN_R_1_R1,        
                  DATAN_R_1_R2         =>    ntRef_ntDATAN_R_1_R2,        
                  DATAN_R_2_R1         =>    ntRef_ntDATAN_R_2_R1,        
                  DATAN_R_2_R2         =>    ntRef_ntDATAN_R_2_R2,        
                  DATAN_R_3_R1         =>    ntRef_ntDATAN_R_3_R1,        
                  DATAN_R_3_R2         =>    ntRef_ntDATAN_R_3_R2,        
                  DATAN_R_4_R1         =>    ntRef_ntDATAN_R_4_R1,        
                  DATAN_R_4_R2         =>    ntRef_ntDATAN_R_4_R2,        
                  DATAN_R_5_R1         =>    ntRef_ntDATAN_R_5_R1,        
                  DATAN_R_5_R2         =>    ntRef_ntDATAN_R_5_R2,        
                  DATAN_R_6_R1         =>    ntRef_ntDATAN_R_6_R1,        
                  DATAN_R_6_R2         =>    ntRef_ntDATAN_R_6_R2,        
                  DATA_R1              =>    ntRef_ntDATA_R1,             
                  DATA_R2              =>    ntRef_ntDATA_R2,             
                  DATA_R_1_R1          =>    ntRef_ntDATA_R_1_R1,         
                  DATA_R_1_R2          =>    ntRef_ntDATA_R_1_R2,         
                  DATA_R_2_R1          =>    ntRef_ntDATA_R_2_R1,         
                  DATA_R_2_R2          =>    ntRef_ntDATA_R_2_R2,         
                  DATA_R_3_R1          =>    ntRef_ntDATA_R_3_R1,         
                  DATA_R_3_R2          =>    ntRef_ntDATA_R_3_R2,         
                  DATA_R_4_R1          =>    ntRef_ntDATA_R_4_R1,         
                  DATA_R_4_R2          =>    ntRef_ntDATA_R_4_R2,         
                  DATA_R_5_R1          =>    ntRef_ntDATA_R_5_R1,         
                  DATA_R_5_R2          =>    ntRef_ntDATA_R_5_R2,         
                  DATA_R_6_R1          =>    ntRef_ntDATA_R_6_R1,         
                  DATA_R_6_R2          =>    ntRef_ntDATA_R_6_R2,         
                  ERASE_OL_R1          =>    ntRef_ntERASE_OL_R1,         
                  ERASE_OL_R2          =>    ntRef_ntERASE_OL_R2,         
                  ERASE_OR_R1          =>    ntRef_ntERASE_OR_R1,         
                  ERASE_OR_R2          =>    ntRef_ntERASE_OR_R2,         
                  FRAME_ADDR_BLINT     =>    ntRef_ntFRAME_ADDR_BLINT,    
                  FRAME_ADDR_OD0_R1    =>    ntRef_ntFRAME_ADDR_OD0_R1,   
                  FRAME_ADDR_OD0_R2    =>    ntRef_ntFRAME_ADDR_OD0_R2,   
                  FRAME_ADDR_OD1_R1    =>    ntRef_ntFRAME_ADDR_OD1_R1,   
                  FRAME_ADDR_OD1_R2    =>    ntRef_ntFRAME_ADDR_OD1_R2,   
                  FRAME_ADDR_OD2_R1    =>    ntRef_ntFRAME_ADDR_OD2_R1,   
                  FRAME_ADDR_OD2_R2    =>    ntRef_ntFRAME_ADDR_OD2_R2,   
                  FRAME_ADDR_OU0_R1    =>    ntRef_ntFRAME_ADDR_OU0_R1,   
                  FRAME_ADDR_OU0_R2    =>    ntRef_ntFRAME_ADDR_OU0_R2,   
                  FRAME_ADDR_OU1_R1    =>    ntRef_ntFRAME_ADDR_OU1_R1,   
                  FRAME_ADDR_OU1_R2    =>    ntRef_ntFRAME_ADDR_OU1_R2,   
                  FRAME_ADDR_OU2_R1    =>    ntRef_ntFRAME_ADDR_OU2_R1,   
                  FRAME_ADDR_OU2_R2    =>    ntRef_ntFRAME_ADDR_OU2_R2,   
                  GLOGEN_OL_R1         =>    ntRef_ntGLOGEN_OL_R1,        
                  GLOGEN_OL_R2         =>    ntRef_ntGLOGEN_OL_R2,        
                  GLOGEN_OR_R1         =>    ntRef_ntGLOGEN_OR_R1,        
                  GLOGEN_OR_R2         =>    ntRef_ntGLOGEN_OR_R2,        
                  GOUTEN_OL_R1         =>    ntRef_ntGOUTEN_OL_R1,        
                  GOUTEN_OL_R2         =>    ntRef_ntGOUTEN_OL_R2,        
                  GOUTEN_OR_R1         =>    ntRef_ntGOUTEN_OR_R1,        
                  GOUTEN_OR_R2         =>    ntRef_ntGOUTEN_OR_R2,        
                  GRS_N_OL_R1          =>    ntRef_ntGRS_N_OL_R1,         
                  GRS_N_OL_R2          =>    ntRef_ntGRS_N_OL_R2,         
                  GRS_N_OR_R1          =>    ntRef_ntGRS_N_OR_R1,         
                  GRS_N_OR_R2          =>    ntRef_ntGRS_N_OR_R2,         
                  GWEN_OL_R1           =>    ntRef_ntGWEN_OL_R1,          
                  GWEN_OL_R2           =>    ntRef_ntGWEN_OL_R2,          
                  GWEN_OR_R1           =>    ntRef_ntGWEN_OR_R1,          
                  GWEN_OR_R2           =>    ntRef_ntGWEN_OR_R2,          
                  MASK_N_DN_R1         =>    ntRef_ntMASK_N_DN_R1,        
                  MASK_N_DN_R2         =>    ntRef_ntMASK_N_DN_R2,        
                  MASK_N_UP_R1         =>    ntRef_ntMASK_N_UP_R1,        
                  MASK_N_UP_R2         =>    ntRef_ntMASK_N_UP_R2,        
                  MCE_OD_R1            =>    ntRef_ntMCE_OD_R1,           
                  MCE_OD_R2            =>    ntRef_ntMCE_OD_R2,           
                  MCE_OU_R1            =>    ntRef_ntMCE_OU_R1,           
                  MCE_OU_R2            =>    ntRef_ntMCE_OU_R2,           
                  MCLKB_OD_R1          =>    ntRef_ntMCLKB_OD_R1,         
                  MCLKB_OD_R2          =>    ntRef_ntMCLKB_OD_R2,         
                  MCLKB_OU_R1          =>    ntRef_ntMCLKB_OU_R1,         
                  MCLKB_OU_R2          =>    ntRef_ntMCLKB_OU_R2,         
                  MEM_INIT_OL_R1       =>    ntRef_ntMEM_INIT_OL_R1,       
                  MEM_INIT_OL_R2       =>    ntRef_ntMEM_INIT_OL_R2,       
                  MEM_INIT_OR_R1       =>    ntRef_ntMEM_INIT_OR_R1,       
                  MEM_INIT_OR_R2       =>    ntRef_ntMEM_INIT_OR_R2,       
                  MWR_OD_R1            =>    ntRef_ntMWR_OD_R1,           
                  MWR_OD_R2            =>    ntRef_ntMWR_OD_R2,           
                  MWR_OU_R1            =>    ntRef_ntMWR_OU_R1,           
                  MWR_OU_R2            =>    ntRef_ntMWR_OU_R2,           
                  POR_N_1P8_OL_R1      =>    ntRef_ntPOR_N_1P8_OL_R1,     
                  POR_N_1P8_OL_R2      =>    ntRef_ntPOR_N_1P8_OL_R2,     
                  POR_N_1P8_OR_R1      =>    ntRef_ntPOR_N_1P8_OR_R1,     
                  POR_N_1P8_OR_R2      =>    ntRef_ntPOR_N_1P8_OR_R2,     
                  POR_N_OL_R1          =>    ntRef_ntPOR_N_OL_R1,         
                  POR_N_OL_R2          =>    ntRef_ntPOR_N_OL_R2,         
                  POR_N_OR_R1          =>    ntRef_ntPOR_N_OR_R1,         
                  POR_N_OR_R2          =>    ntRef_ntPOR_N_OR_R2,         
                  PRCFG_N_OL_R1        =>    ntRef_ntPRCFG_N_OL_R1,       
                  PRCFG_N_OL_R2        =>    ntRef_ntPRCFG_N_OL_R2,       
                  PRCFG_N_OR_R1        =>    ntRef_ntPRCFG_N_OR_R1,       
                  PRCFG_N_OR_R2        =>    ntRef_ntPRCFG_N_OR_R2,       
                  PROG_ON_OL_R1        =>    ntRef_ntPROG_ON_OL_R1,       
                  PROG_ON_OL_R2        =>    ntRef_ntPROG_ON_OL_R2,       
                  PROG_ON_OR_R1        =>    ntRef_ntPROG_ON_OR_R1,       
                  PROG_ON_OR_R2        =>    ntRef_ntPROG_ON_OR_R2,       
                  PUP_REL_N_OL_R1      =>    ntRef_ntPUP_REL_N_OL_R1,     
                  PUP_REL_N_OL_R2      =>    ntRef_ntPUP_REL_N_OL_R2,     
                  PUP_REL_N_OR_R1      =>    ntRef_ntPUP_REL_N_OR_R1,     
                  PUP_REL_N_OR_R2      =>    ntRef_ntPUP_REL_N_OR_R2,     
                  READ2T0_DN_R1        =>    ntRef_ntREAD2T0_DN_R1,       
                  READ2T0_DN_R2        =>    ntRef_ntREAD2T0_DN_R2,       
                  READ2T0_UP_R1        =>    ntRef_ntREAD2T0_UP_R1,       
                  READ2T0_UP_R2        =>    ntRef_ntREAD2T0_UP_R2,       
                  READ2T1_DN_R1        =>    ntRef_ntREAD2T1_DN_R1,       
                  READ2T1_DN_R2        =>    ntRef_ntREAD2T1_DN_R2,       
                  READ2T1_UP_R1        =>    ntRef_ntREAD2T1_UP_R1,       
                  READ2T1_UP_R2        =>    ntRef_ntREAD2T1_UP_R2,       
                  READ_BLINT           =>    ntRef_ntREAD_BLINT,          
                  REGION_END_O         =>    ntRef_ntREGION_END_O,        
                  REGION_INC_O         =>    ntRef_ntREGION_INC_O,        
                  RST_N_OL_R1          =>    ntRef_ntRST_N_OL_R1,         
                  RST_N_OL_R2          =>    ntRef_ntRST_N_OL_R2,         
                  RST_N_OR_R1          =>    ntRef_ntRST_N_OR_R1,         
                  RST_N_OR_R2          =>    ntRef_ntRST_N_OR_R2,         
                  VCC_WL_R1            =>    ntRef_ntVCC_WL_R1,           
                  VCC_WL_R2            =>    ntRef_ntVCC_WL_R2,           
                  WL_ON_OL_R1          =>    ntRef_ntWL_ON_OL_R1,         
                  WL_ON_OL_R2          =>    ntRef_ntWL_ON_OL_R2,         
                  WL_ON_OR_R1          =>    ntRef_ntWL_ON_OR_R1,         
                  WL_ON_OR_R2          =>    ntRef_ntWL_ON_OR_R2         

                )
        @([sx,sy]);  



    int sx_ccs = tx_ccs * NUM_GRID_X + 3;
    int sy_ccs = ty_ccs * NUM_GRID_Y;

    connect
      (
        <pin POR_N       of <device CRAM_CTRL_25H_TILE @[sx,sy]>>   => <wire GPOR_N         of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin POR_N_1P8   of <device CRAM_CTRL_25H_TILE @[sx,sy]>>   => <wire POR_N_1P8      of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin POR_ERASE_N of <device CRAM_CTRL_25H_TILE @[sx,sy]>>   => <wire POR_ERASE_N    of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin POR_SRAM_N  of <device CRAM_CTRL_25H_TILE @[sx,sy]>>   => <wire POR_SRAM_N     of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VDDT_N      of <device CRAM_CTRL_25H_TILE @[sx,sy]>>   => <wire CRAM_VDDT_N    of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TYPE        of <device CRAM_CTRL_25H_TILE @[sx,sy]>>   => <wire CMEM_TYPE[0]   of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin PRCFG_N     of <device CRAM_CTRL_25H_TILE @[sx,sy]>>   => <wire PRCFG_EN       of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin RST_N       of <device CRAM_CTRL_25H_TILE @[sx,sy]>>   => <wire POR_BLSR_N     of <device CCS_TILE @[sx_ccs,sy_ccs]>>,

        <pin WL_ON          of <device CRAM_CTRL_25H_TILE @[sx,sy]>> => <wire WL_ON         of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin READ           of <device CRAM_CTRL_25H_TILE @[sx,sy]>> => <wire READ          of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin RDBK_CAP       of <device CRAM_CTRL_25H_TILE @[sx,sy]>> => <wire RDBK_CAP      of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin RDBK_ON        of <device CRAM_CTRL_25H_TILE @[sx,sy]>> => <wire RDBK_ON       of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin ERASE          of <device CRAM_CTRL_25H_TILE @[sx,sy]>> => <wire ERASE_EN      of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin PROG_CAP       of <device CRAM_CTRL_25H_TILE @[sx,sy]>> => <wire PROG_CAP      of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin PROG_ON        of <device CRAM_CTRL_25H_TILE @[sx,sy]>> => <wire PROG_ON       of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin FRAME_ADDR     of <device CRAM_CTRL_25H_TILE @[sx,sy]>> => <wire FRAME_ADDR    of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin COLUMN_ADDR    of <device CRAM_CTRL_25H_TILE @[sx,sy]>> => <wire COLUMN_ADDR   of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin PRECHG         of <device CRAM_CTRL_25H_TILE @[sx,sy]>> => <wire PRECHGE       of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin REGION_RW_EN   of <device CRAM_CTRL_25H_TILE @[sx,sy]>> => <wire REGION_RW_EN  of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin REGION_RW_SEL  of <device CRAM_CTRL_25H_TILE @[sx,sy]>> => <wire REGION_SEL    of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin DATA_IN        of <device CRAM_CTRL_25H_TILE @[sx,sy]>> => <wire CDATA         of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin MCLK_CRAM      of <device CRAM_CTRL_25H_TILE @[sx,sy]>> => <wire CLK_CRAM      of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin READ_LATCH     of <device CRAM_CTRL_25H_TILE @[sx,sy]>> => <wire READ_LATCH    of <device CCS_TILE @[sx_ccs,sy_ccs]>>,

        <pin MCLKB  of <device CRAM_CTRL_25H_TILE @[sx,sy]>>        => <wire CLK_DRM    of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin MWR    of <device CRAM_CTRL_25H_TILE @[sx,sy]>>        => <wire MWR        of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin MCE    of <device CRAM_CTRL_25H_TILE @[sx,sy]>>        => <wire MCE        of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin MASK   of <device CRAM_CTRL_25H_TILE @[sx,sy]>>        => <wire MASK_EN    of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin GLOGEN of <device CRAM_CTRL_25H_TILE @[sx,sy]>>        => <wire GLOGEN     of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin GRS_N  of <device CRAM_CTRL_25H_TILE @[sx,sy]>>        => <wire GRS_N      of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin GWEN   of <device CRAM_CTRL_25H_TILE @[sx,sy]>>        => <wire GWEN       of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin GOUTEN of <device CRAM_CTRL_25H_TILE @[sx,sy]>>        => <wire GOUTEN     of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin PUP_REL_N  of <device CRAM_CTRL_25H_TILE @[sx,sy]>>    => <wire POR_BLSR_N of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 

        <pin BSRMODE1   of <device CRAM_CTRL_25H_TILE @[sx,sy]>>     => <wire BSMODE_1      of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 
        <pin BSRMODE2   of <device CRAM_CTRL_25H_TILE @[sx,sy]>>     => <wire BSMODE_2      of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 
        <pin BSRMODE3   of <device CRAM_CTRL_25H_TILE @[sx,sy]>>     => <wire BSMODE_3      of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 
        <pin BSRRST     of <device CRAM_CTRL_25H_TILE @[sx,sy]>>     => <wire JRST          of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 
        <pin BSRSHIFT   of <device CRAM_CTRL_25H_TILE @[sx,sy]>>     => <wire SHIFTDR       of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 
        <pin BSRUPDATE  of <device CRAM_CTRL_25H_TILE @[sx,sy]>>     => <wire UPDATEDR      of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 
        <pin VBG1       of <device CRAM_CTRL_25H_TILE @[sx,sy]>>     => <wire WLLDO_VREF_1V of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 
        <pin VBG2       of <device CRAM_CTRL_25H_TILE @[sx,sy]>>     => <wire CRAMLDO_VREF  of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 

        <pin MEM_INIT of <device CRAM_CTRL_25H_TILE @[sx,sy]>>      => <wire MEM_INIT of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 
        <pin AC_TEST  of <device CRAM_CTRL_25H_TILE @[sx,sy]>>      => <wire AC_TEST  of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 
        <pin AC_MODE  of <device CRAM_CTRL_25H_TILE @[sx,sy]>>      => <wire AC_MODE  of <device CCS_TILE @[sx_ccs,sy_ccs]>>, 

        <pin LDO_CRAM_TRIM[4:0]   of <device CRAM_CTRL_25H_TILE @[sx,sy]>>   => <wire TRIM_LDO_CRAM_R3 of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin LDO_CRAM_TRIM[9:5]   of <device CRAM_CTRL_25H_TILE @[sx,sy]>>   => <wire TRIM_LDO_CRAM_R2 of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin LDO_CRAM_TRIM[14:10] of <device CRAM_CTRL_25H_TILE @[sx,sy]>>   => <wire TRIM_LDO_CRAM_R1 of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin LDO_CRAM_TRIM[19:15] of <device CRAM_CTRL_25H_TILE @[sx,sy]>>   => <wire TRIM_LDO_CRAM_R0 of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin LDO_CRAM_TRIM[24:20] of <device CRAM_CTRL_25H_TILE @[sx,sy]>>   => <wire TRIM_LDO_CRAM_R4 of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin LDO_CRAM_TRIM[29:25] of <device CRAM_CTRL_25H_TILE @[sx,sy]>>   => <wire TRIM_LDO_CRAM_R5 of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin LDO_CRAM_TRIM[34:30] of <device CRAM_CTRL_25H_TILE @[sx,sy]>>   => <wire TRIM_LDO_CRAM_R6 of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin LDO_CRAM_TRIM[39:35] of <device CRAM_CTRL_25H_TILE @[sx,sy]>>   => <wire TRIM_LDO_CRAM_R7 of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin LDO_WL_TRIM          of <device CRAM_CTRL_25H_TILE @[sx,sy]>>   => <wire TRIM_LDO_WL      of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin LDO_WL_SEL           of <device CRAM_CTRL_25H_TILE @[sx,sy]>>   => <wire TRIM_LDO_WL_SEL  of <device CCS_TILE @[sx_ccs,sy_ccs]>>,

        <pin DCI_MATCH    of <device CCS_TILE @[sx_ccs,sy_ccs]>>    => <wire TIEHI of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin CDATA_RB     of <device CCS_TILE @[sx_ccs,sy_ccs]>>    => <wire DATA_BACK of <device CRAM_CTRL_25H_TILE @[sx,sy]>>,
        <pin REGION_END   of <device CCS_TILE @[sx_ccs,sy_ccs]>>    => <wire REGION_END_O of <device CRAM_CTRL_25H_TILE @[sx,sy]>>,
        <pin REGION_INC   of <device CCS_TILE @[sx_ccs,sy_ccs]>>    => <wire REGION_INC_O of <device CRAM_CTRL_25H_TILE @[sx,sy]>>,
        <pin COLUMN_INC   of <device CCS_TILE @[sx_ccs,sy_ccs]>>    => <wire COLUMN_INC_O of <device CRAM_CTRL_25H_TILE @[sx,sy]>>,
        <pin VLDO_CRAM_R0 of <device CCS_TILE @[sx_ccs,sy_ccs]>>    => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VLDO_CRAM_R3 of <device CCS_TILE @[sx_ccs,sy_ccs]>>    => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VLDO_CRAM_R4 of <device CCS_TILE @[sx_ccs,sy_ccs]>>    => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VLDO_CRAM_R5 of <device CCS_TILE @[sx_ccs,sy_ccs]>>    => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VLDO_CRAM_R6 of <device CCS_TILE @[sx_ccs,sy_ccs]>>    => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VLDO_CRAM_R7 of <device CCS_TILE @[sx_ccs,sy_ccs]>>    => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VLDO_WL_R0   of <device CCS_TILE @[sx_ccs,sy_ccs]>>    => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VLDO_WL_R1   of <device CCS_TILE @[sx_ccs,sy_ccs]>>    => <wire VCC_WL_R1 of <device CRAM_CTRL_25H_TILE @[sx,sy]>>,
        <pin VLDO_WL_R2   of <device CCS_TILE @[sx_ccs,sy_ccs]>>    => <wire VCC_WL_R2 of <device CRAM_CTRL_25H_TILE @[sx,sy]>>,
        <pin VLDO_WL_R3   of <device CCS_TILE @[sx_ccs,sy_ccs]>>    => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,

//        <pin NC1_I of <device CCS_TILE @[sx_ccs,sy_ccs]>>           => <wire MFG_TEST_NC1 of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
//        <pin NC2_I of <device CCS_TILE @[sx_ccs,sy_ccs]>>           => <wire MFG_TEST_NC2 of <device CCS_TILE @[sx_ccs,sy_ccs]>>,

        <pin OSC_CALI_EN of <device CCS_TILE @[sx_ccs,sy_ccs]>>     => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>
      );


    
      
}// end of function place_cram_ctrl_tile
/********************************************************************************
********************************************************************************/
function place_idcode_tile
(
    unsigned int tx,
    unsigned int ty,
    unsigned int tx_ccs,
    unsigned int ty_ccs
)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    string strVar;
    sprintf(strVar,"ntIDCODE_H12_%d_%d",sx,sy);
    &wire ntRef_ntIDCODE_H12[11:0] = wire *strVar[11:0];

    sprintf(strVar,"ntIDCODE_L18_%d_%d",sx,sy);
    &wire ntRef_ntIDCODE_L18[17:0] = wire *strVar[17:0];


    sprintf(strVar, "IDCODE_PG2L25H_TILE_%d_%d", sx, sy);
      device IDCODE_PG2L25H_TILE *strVar
        port map(
                  IDCODE_H12     => ntRef_ntIDCODE_H12,
                  IDCODE_L18     => ntRef_ntIDCODE_L18
                )
        @([sx,sy]);  

    int sx_ccs = tx_ccs * NUM_GRID_X + 3;
    int sy_ccs = ty_ccs * NUM_GRID_Y;
    connect
      (
        <pin IDCODE_H12 of <device CCS_TILE @[sx_ccs,sy_ccs]>>     => <wire IDCODE_H12 of <device IDCODE_PG2L25H_TILE @[sx,sy]>>,
        <pin IDCODE_L18 of <device CCS_TILE @[sx_ccs,sy_ccs]>>     => <wire IDCODE_L18 of <device IDCODE_PG2L25H_TILE @[sx,sy]>>
      );

}//end of place_idcode_tile
/********************************************************************************
********************************************************************************/
function place_esd_tile
(
    unsigned int tx,
    unsigned int ty
)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    string strVar;
    sprintf(strVar,"ntIO_STATUS_C_O_%d_%d",sx,sy);
    &wire ntRef_ntIO_STATUS_C_O = wire *strVar;

    sprintf(strVar,"ntPLLLOCKEDCAS_PPLLTOCCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPLLLOCKEDCAS_PPLLTOCCS_OUT = wire *strVar;

    sprintf(strVar,"ntPLLLOCKEDCAS_PPLLTOGPLL_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPLLLOCKEDCAS_PPLLTOGPLL_OUT = wire *strVar;

    sprintf(strVar,"ntTCK_OUT_B_%d_%d",sx,sy);
    &wire ntRef_ntTCK_OUT_B = wire *strVar;

    sprintf(strVar,"ntTCK_OUT_T_%d_%d",sx,sy);
    &wire ntRef_ntTCK_OUT_T = wire *strVar;

//  sprintf(strVar,"ntTCK_OUT_L34_%d_%d",sx,sy);
//  &wire ntRef_ntTCK_OUT_L34 = wire *strVar;

    sprintf(strVar,"ntTCK_OUT_L45_%d_%d",sx,sy);
    &wire ntRef_ntTCK_OUT_L45 = wire *strVar;

//  sprintf(strVar,"ntTCK_OUT_R45_%d_%d",sx,sy);
//  &wire ntRef_ntTCK_OUT_R45 = wire *strVar;

    sprintf(strVar,"ntTCK_OUT_TO_PMA_%d_%d",sx,sy);
    &wire ntRef_ntTCK_OUT_TO_PMA = wire *strVar;

    sprintf(strVar,"ntTDO_B_%d_%d",sx,sy);
    &wire ntRef_ntTDO_B = wire *strVar;

    sprintf(strVar,"ntTDO_T_%d_%d",sx,sy);
    &wire ntRef_ntTDO_T = wire *strVar;

    sprintf(strVar,"ntVAADC_NO_%d_%d",sx,sy);
    &wire ntRef_ntVAADC_NO = wire *strVar;

    sprintf(strVar,"ntVAADC_PO_%d_%d",sx,sy);
    &wire ntRef_ntVAADC_PO = wire *strVar;

    sprintf(strVar,"ntVREFADC_NO_%d_%d",sx,sy);
    &wire ntRef_ntVREFADC_NO = wire *strVar;

    sprintf(strVar,"ntVREFADC_PO_%d_%d",sx,sy);
    &wire ntRef_ntVREFADC_PO = wire *strVar;

    sprintf(strVar, "ESD_25HR_TILE_%d_%d", sx, sy);
      device ESD_25HR_TILE *strVar
        port map(
                  IO_STATUS_C_O               => ntRef_ntIO_STATUS_C_O,
                  PLLLOCKEDCAS_PPLLTOCCS_OUT  => ntRef_ntPLLLOCKEDCAS_PPLLTOCCS_OUT,
                  PLLLOCKEDCAS_PPLLTOGPLL_OUT => ntRef_ntPLLLOCKEDCAS_PPLLTOGPLL_OUT,
                  TCK_OUT_B                   => ntRef_ntTCK_OUT_B,
                  TCK_OUT_T                   => ntRef_ntTCK_OUT_T,
//                TCK_OUT_L34                 => ntRef_ntTCK_OUT_L34,
                  TCK_OUT_L45                 => ntRef_ntTCK_OUT_L45,
//                TCK_OUT_R45                 => ntRef_ntTCK_OUT_R45,
                  TCK_OUT_TO_PMA              => ntRef_ntTCK_OUT_TO_PMA,
                  TDO_B                       => ntRef_ntTDO_B,
                  TDO_T                       => ntRef_ntTDO_T,
                  VAADC_NO                    => ntRef_ntVAADC_NO  ,
                  VAADC_PO                    => ntRef_ntVAADC_PO  ,
                  VREFADC_NO                  => ntRef_ntVREFADC_NO,
                  VREFADC_PO                  => ntRef_ntVREFADC_PO
                )
        @([sx,sy]);  

    int tx_iob_l = 0;
    int tx_iob_r = NUM_TILE_X - 1;
    int tx_pll_l = 1;
    int tx_pll_r = NUM_TILE_X - 2;

    int sx_iob_l = tx_iob_l * NUM_GRID_X;
    int sx_iob_r = tx_iob_r * NUM_GRID_X;
    int sx_ccs = CCS_TILE_X * NUM_GRID_X + 3;
    int sx_pll_l = tx_pll_l * NUM_GRID_X;
    int sx_pll_r = tx_pll_r * NUM_GRID_X;
    int sx_hsst = HSST_TILE_X * NUM_GRID_X + 3;

    int sy_iob_u_l = (NUM_REGION-1)*NUM_TILES_REGION*NUM_GRID_Y;
    int sy_iob_l4 = (NUM_REGION - 1) * NUM_TILES_REGION * NUM_GRID_Y;
    int sy_iob_u_r = (NUM_REGION-2)*NUM_TILES_REGION*NUM_GRID_Y;
    int sy_iob_d_l = 0;
    int sy_iob_d_r = 0;
    int sy_gpll_u_r = ((NUM_REGION-2)*NUM_TILES_REGION + GPLL_TILE_Y)*NUM_GRID_Y;
    int sy_hsst_u = (NUM_REGION-1)*NUM_TILES_REGION*NUM_GRID_Y;
    int sy_ccs = LOC_CCS_REGION * NUM_TILES_REGION * NUM_GRID_Y;
//  int sy_hsst_d = 0;

    connect
      (
        <pin IO_STATUS_C_I of <device ESD_25HR_TILE @[sx,sy]>>  => <wire IO_STATUS_O of <device IOBHR_TILE @[sx_iob_l,sy_iob_d_l]>>,

        <pin TDI_T      of <device ESD_25HR_TILE @[sx,sy]>>     => <wire TDO[0]      of <device IOBHR_TILE @[sx_iob_l,sy_iob_u_l]>>,
        <pin TCK_IN_T   of <device ESD_25HR_TILE @[sx,sy]>>     => <wire CLOCKDR_OUT of <device HSSTLP_TILE @[sx_hsst,sy_hsst_u]>>,
//      <pin TCK_IN_L34 of <device ESD_25HR_TILE @[sx,sy]>>     => <wire TCK_OUT     of <device IOBHR_TILE @[sx_iob_l,sy_iob_u_l]>>,
        <pin TCK_IN_L45 of <device ESD_25HR_TILE @[sx,sy]>>     => <wire TCK_OUT     of <device IOBHR_TILE @[sx_iob_l,sy_iob_l4]>>,
    


        <pin TDI_B          of <device ESD_25HR_TILE @[sx,sy]>> => <wire TDO[49] of <device IOBHR_TILE @[sx_iob_r,sy_iob_d_r]>>,
        <pin TCK_IN_B       of <device ESD_25HR_TILE @[sx,sy]>> => <wire CLOCKDR of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TCK_IN_TO_PMA  of <device ESD_25HR_TILE @[sx,sy]>> => <wire TCK_OUT of <device IOBHR_TILE @[sx_iob_r,sy_iob_u_r]>>,
//      <pin TCK_IN_R45     of <device ESD_25HR_TILE @[sx,sy]>> => <wire TCK_OUT of <device IOBHR_TILE @[sx_iob_r,sy_iob_d_r]>>,

        <pin PLLLOCKEDCAS_PPLLTOCCS_IN of <device ESD_25HR_TILE @[sx,sy]>>   => <wire LOCKOUT_CAS of <device PPLL_TILE @[sx_pll_l,0]>>,
        <pin PLLLOCKEDCAS_PPLLTOGPLL_IN of <device ESD_25HR_TILE @[sx,sy]>>  => <wire LOCKOUT_CAS of <device GPLL_TILE @[sx_pll_r,sy_gpll_u_r]>>

      );

}//end of place_esd_tile
/********************************************************************************
********************************************************************************/
function connect_ccs_adc
(
    unsigned int tx_ccs,
    unsigned int ty_ccs,
    unsigned int tx_adc,
    unsigned int ty_adc,
    unsigned int tx_ckeb,
    unsigned int tx_esd,
    unsigned int ty_esd
)
{   
 

    int sx_ccs = tx_ccs * NUM_GRID_X + 3;
    int sy_ccs = ty_ccs * NUM_GRID_Y;

    int sx_adc = tx_adc * NUM_GRID_X + 3;
    int sy_adc = ty_adc * NUM_GRID_Y;

    int sx_ckeb = tx_ckeb * NUM_GRID_X;
    int sy_ckeb = (ty_ccs + MID_TILE_REGION )* NUM_GRID_Y;

    connect
      (
        <pin TDO_DRP            of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire TDO of <device ADC_TILE @[sx_adc,sy_adc]>>,
        <pin OVER_TEMPERATURE   of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire OVER_TEMP_CCS of <device ADC_TILE @[sx_adc,sy_adc]>>,
        <pin TRIM_ADC_FLAG      of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[0]      of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[1]      of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[2]      of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[3]      of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[4]      of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[5]      of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[6]      of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[7]      of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[8]      of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[9]      of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[10]     of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TRIM_VDATA[11]     of <device CCS_TILE @[sx_ccs,sy_ccs]>>   => <wire TIELO of <device CCS_TILE @[sx_ccs,sy_ccs]>>,

        <pin GLOGEN_FB  of <device CCS_TILE @[sx_ccs,sy_ccs]>>         => <wire GLOGEN       of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin GLOGEN_IN  of <device CCS_TILE @[sx_ccs,sy_ccs]>>         => <wire GLOGEN_OUT_0 of <device CKEB_TILE @[sx_ckeb,sy_ckeb]>>,
//        <pin GWEN     of <device ADC_TILE @[sx_adc,sy_adc]>>         => <wire GWEN_OUT_0   of <device CKEB_TILE @[sx_ckeb,sy_ckeb]>>,

        <pin CLOCKDR        of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire CLOCKDR_DRP     of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin FLG_JTAG       of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire FLG_JDRP        of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin AD_TRIM_MODE   of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire TRIM_ADC_MODE   of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TDI            of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire TDI1_ADC        of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TCK            of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire TCK1_ADC        of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin SHIFTDR        of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire SHIFTDR_ADC     of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin UPDATEDR       of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire UPDATEDR_ADC    of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin CAPTUREDR      of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire CAPTUREDR       of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin AD_TEMP_OFFSET of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire TRIM_ADC_SENSE  of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin CLK_OSC        of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire CLK_ADC         of <device CCS_TILE @[sx_ccs,sy_ccs]>>,

        <pin OSC_ADC_EN     of <device CCS_TILE @[sx_ccs,sy_ccs]>>     => <wire OSC_TURN_ON     of <device ADC_TILE @[sx_adc,sy_adc]>>,
        <pin ADC_VREFP_CP   of <device CCS_TILE @[sx_ccs,sy_ccs]>>     => <wire ADC_VREFP_CP    of <device ADC_TILE @[sx_adc,sy_adc]>>,

        <pin VREF_INT   of <device ADC_TILE @[sx_adc,sy_adc]>>         => <wire VREF_ADC_1P25V  of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin I10U_BG    of <device ADC_TILE @[sx_adc,sy_adc]>>         => <wire ICONST_10U[12]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TBD_P[0]   of <device ADC_TILE @[sx_adc,sy_adc]>>         => <wire MFG_TEST1_ADC   of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TBD_P[1]   of <device ADC_TILE @[sx_adc,sy_adc]>>         => <wire MFG_TEST2_ADC   of <device CCS_TILE @[sx_ccs,sy_ccs]>>
      );

    int tx_pll_l = 1;
    int tx_pll_r = NUM_TILE_X - 2;

    int sx_pll_l = tx_pll_l * NUM_GRID_X;
    int sx_pll_r = tx_pll_r * NUM_GRID_X;
    int sy_gpll_l_u = ((NUM_REGION - 1) * NUM_TILES_REGION + GPLL_TILE_Y) * NUM_GRID_Y;
//  int sy_gpll0 = (0*NUM_TILES_REGION + GPLL_TILE_Y) * NUM_GRID_Y;
    int sy_gpll1 = (0*NUM_TILES_REGION + GPLL_TILE_Y) * NUM_GRID_Y;
    int sy_gpll2 = (1*NUM_TILES_REGION + GPLL_TILE_Y) * NUM_GRID_Y;
//  int sy_gpll3 = (3*NUM_TILES_REGION + GPLL_TILE_Y) * NUM_GRID_Y;
//  int sy_ppll0 = (0*NUM_TILES_REGION) * NUM_GRID_Y;
    int sy_ppll1 = (0*NUM_TILES_REGION) * NUM_GRID_Y;
    int sy_ppll2 = (1*NUM_TILES_REGION) * NUM_GRID_Y;
//  int sy_ppll3 = (3*NUM_TILES_REGION) * NUM_GRID_Y;

    int sx_esd = tx_esd * NUM_GRID_X;
    int sy_esd = ty_esd * NUM_GRID_Y;

    connect
      (
//      <pin LDO_PLL[0]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire DCTEST_OUT of <device GPLL_TILE @[sx_pll_l,sy_gpll0]>>,
        <pin LDO_PLL[0]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire TIELO      of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin LDO_PLL[1]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire DCTEST_OUT of <device GPLL_TILE @[sx_pll_l,sy_gpll1]>>,
        <pin LDO_PLL[2]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire DCTEST_OUT of <device GPLL_TILE @[sx_pll_l,sy_gpll2]>>,
//      <pin LDO_PLL[3]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire DCTEST_OUT of <device GPLL_TILE @[sx_pll_l,sy_gpll3]>>,
        <pin LDO_PLL[3]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire TIELO      of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin LDO_PLL[4]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire DCTEST_OUT of <device GPLL_TILE @[sx_pll_r,sy_gpll1]>>,
//      <pin LDO_PLL[5]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire DCTEST_OUT of <device GPLL_TILE @[sx_pll_r,sy_gpll2]>>,
        <pin LDO_PLL[5]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire TIELO      of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
                        
//      <pin LDO_PLL[6]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire DCTEST_OUT of <device PPLL_TILE @[sx_pll_l,sy_ppll0]>>,
        <pin LDO_PLL[6]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire TIELO      of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin LDO_PLL[7]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire DCTEST_OUT of <device PPLL_TILE @[sx_pll_l,sy_ppll1]>>,
        <pin LDO_PLL[8]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire DCTEST_OUT of <device PPLL_TILE @[sx_pll_l,sy_ppll2]>>,
//      <pin LDO_PLL[9]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire DCTEST_OUT of <device PPLL_TILE @[sx_pll_l,sy_ppll3]>>,
        <pin LDO_PLL[9]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire TIELO      of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin LDO_PLL[10] of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire DCTEST_OUT of <device PPLL_TILE @[sx_pll_r,sy_ppll1]>>,
//      <pin LDO_PLL[11] of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire DCTEST_OUT of <device PPLL_TILE @[sx_pll_r,sy_ppll2]>>,
        <pin LDO_PLL[11] of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire TIELO      of <device CCS_TILE @[sx_ccs,sy_ccs]>>,

        <pin VLDO_DDRPHY_R2_L of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire VCCREG0 of <device GPLL_TILE @[sx_pll_l,sy_gpll1]>>,
        <pin VLDO_DDRPHY_R2_R of <device CCS_TILE @[sx_ccs,sy_ccs]>>  => <wire VCCREG0 of <device GPLL_TILE @[sx_pll_r,sy_gpll1]>>,

        <pin LOCKIN_CAS of <device PPLL_TILE @[sx_pll_r,sy_ppll1]>> => <wire TIEHI       of <device PPLL_TILE @[sx_pll_r,sy_ppll1]>>,
        <pin LOCKIN_CAS of <device GPLL_TILE @[sx_pll_r,sy_gpll1]>> => <wire LOCKOUT_CAS of <device PPLL_TILE @[sx_pll_r,sy_ppll1]>>,
//      <pin LOCKIN_CAS of <device PPLL_TILE @[sx_pll_r,sy_ppll2]>> => <wire LOCKOUT_CAS of <device GPLL_TILE @[sx_pll_r,sy_gpll1]>>,
//      <pin LOCKIN_CAS of <device GPLL_TILE @[sx_pll_r,sy_gpll2]>> => <wire LOCKOUT_CAS of <device PPLL_TILE @[sx_pll_r,sy_ppll2]>>,

        <pin LOCKIN_CAS of <device GPLL_TILE @[sx_pll_l,sy_gpll_l_u]>> => <wire PLLLOCKEDCAS_PPLLTOGPLL_OUT of <device ESD_25HR_TILE @[sx_esd,sy_esd]>>,

        <pin LOCKIN_CAS of <device PPLL_TILE @[sx_pll_l,sy_ppll2]>> => <wire LOCKOUT_CAS of <device GPLL_TILE @[sx_pll_l,sy_gpll_l_u]>>,
        <pin LOCKIN_CAS of <device GPLL_TILE @[sx_pll_l,sy_gpll1]>> => <wire LOCKOUT_CAS of <device PPLL_TILE @[sx_pll_l,sy_ppll2]>>,
        <pin LOCKIN_CAS of <device PPLL_TILE @[sx_pll_l,sy_ppll1]>> => <wire LOCKOUT_CAS of <device GPLL_TILE @[sx_pll_l,sy_gpll1]>>,
//      <pin LOCKIN_CAS of <device GPLL_TILE @[sx_pll_l,sy_gpll0]>> => <wire LOCKOUT_CAS of <device PPLL_TILE @[sx_pll_l,sy_ppll1]>>,
//      <pin LOCKIN_CAS of <device PPLL_TILE @[sx_pll_l,sy_ppll0]>> => <wire LOCKOUT_CAS of <device GPLL_TILE @[sx_pll_l,sy_gpll0]>>,

        <pin PLL_LOCK of <device CCS_TILE @[sx_ccs,sy_ccs]>>        => <wire PLLLOCKEDCAS_PPLLTOCCS_OUT of <device ESD_25HR_TILE @[sx_esd,sy_esd]>>
      );

    int sx_iob_l = 0;
    int sx_iob_r = (NUM_TILE_X-1) * NUM_GRID_X;
//  int sy_iob0 = (0*NUM_TILES_REGION) * NUM_GRID_Y;
    int sy_iob1 = (0*NUM_TILES_REGION) * NUM_GRID_Y;
    int sy_iob2 = (1*NUM_TILES_REGION) * NUM_GRID_Y;
//  int sy_iob3 = (3*NUM_TILES_REGION) * NUM_GRID_Y;

    connect
      (

//      <pin ICONST10UA[0] of <device IOBHR_TILE @[sx_iob_l,sy_iob0]>>  => <wire ICONST_10U[0]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
//      <pin ICONST10UA[1] of <device IOBHR_TILE @[sx_iob_l,sy_iob0]>>  => <wire ICONST_10U[1]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin ICONST10UA[0] of <device IOBHR_TILE @[sx_iob_l,sy_iob1]>>  => <wire ICONST_10U[2]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin ICONST10UA[1] of <device IOBHR_TILE @[sx_iob_l,sy_iob1]>>  => <wire ICONST_10U[3]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin ICONST10UA[0] of <device IOBHR_TILE @[sx_iob_l,sy_iob2]>>  => <wire ICONST_10U[4]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin ICONST10UA[1] of <device IOBHR_TILE @[sx_iob_l,sy_iob2]>>  => <wire ICONST_10U[5]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
//      <pin ICONST10UA[0] of <device IOBHR_TILE @[sx_iob_l,sy_iob3]>>  => <wire ICONST_10U[6]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
//      <pin ICONST10UA[1] of <device IOBHR_TILE @[sx_iob_l,sy_iob3]>>  => <wire ICONST_10U[7]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin ICONST10UA[0] of <device IOBHR_TILE @[sx_iob_r,sy_iob1]>>  => <wire ICONST_10U[8]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin ICONST10UA[1] of <device IOBHR_TILE @[sx_iob_r,sy_iob1]>>  => <wire ICONST_10U[9]  of <device CCS_TILE @[sx_ccs,sy_ccs]>>
//      <pin ICONST10UA[0] of <device IOBHR_TILE @[sx_iob_r,sy_iob2]>>  => <wire ICONST_10U[10] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
//      <pin ICONST10UA[1] of <device IOBHR_TILE @[sx_iob_r,sy_iob2]>>  => <wire ICONST_10U[11] of <device CCS_TILE @[sx_ccs,sy_ccs]>>
      );



}//end of place_idcode_tile
/********************************************************************************
********************************************************************************/
function connect_blank_adc_port
(
    unsigned int rx_adc,
    unsigned int tx_ccs,
    unsigned int tx_adc
)
{
    int sx_ccs = tx_ccs * NUM_GRID_X + 3;
    int sx_adc = tx_adc * NUM_GRID_X + 3;
    int sy_ccs = (rx_adc - 1) * NUM_TILES_REGION * NUM_GRID_Y;
    int sy_adc = rx_adc * NUM_TILES_REGION * NUM_GRID_Y;

//For floating port VAAN/VAAP

    connect
    (
        <pin VAAP[0]   of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire TIELO     of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VAAN[0]   of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire TIELO     of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VAAP[4]   of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire TIELO     of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VAAN[4]   of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire TIELO     of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VAAP[6]   of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire TIELO     of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VAAN[6]   of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire TIELO     of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VAAP[11]  of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire TIELO     of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VAAN[11]  of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire TIELO     of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VAAP[12]  of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire TIELO     of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VAAN[12]  of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire TIELO     of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VAAP[13]  of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire TIELO     of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VAAN[13]  of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire TIELO     of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VAAP[14]  of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire TIELO     of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VAAN[14]  of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire TIELO     of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VAAP[15]  of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire TIELO     of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin VAAN[15]  of <device ADC_TILE @[sx_adc,sy_adc]>>     => <wire TIELO     of <device CCS_TILE @[sx_ccs,sy_ccs]>>

    );

};//end of function connect_blank_adc_port
/********************************************************************************
********************************************************************************/
function place_ccs_tile_50h(unsigned int tx,ty,tx_srb)
{   
    unsigned int sx, sy;

    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;


    string strVar;
    sprintf(strVar,"ntMASK_EN_%d_%d",sx,sy);
    &wire ntRef_ntMASK_EN = wire *strVar;

    sprintf(strVar,"ntPRCFG_EN_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_EN = wire *strVar;

    sprintf(strVar,"ntJRST_%d_%d",sx,sy);
    &wire ntRef_ntJRST = wire *strVar;

    sprintf(strVar,"ntJRTI_%d_%d",sx,sy);
    &wire ntRef_ntJRTI = wire *strVar;

    sprintf(strVar,"ntCLOCKDR_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR = wire *strVar;

    sprintf(strVar,"ntBSMODE_1_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE_1 = wire *strVar;

    sprintf(strVar,"ntBSMODE_2_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE_2 = wire *strVar;

    sprintf(strVar,"ntBSMODE_3_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE_3 = wire *strVar;

    sprintf(strVar,"ntSHIFTDR_%d_%d",sx,sy);
    &wire ntRef_ntSHIFTDR = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntUPDATEDR_ADC_%d_%d",sx,sy);
    &wire ntRef_ntUPDATEDR_ADC = wire *strVar;

    sprintf(strVar,"ntSHIFTDR_ADC_%d_%d",sx,sy);
    &wire ntRef_ntSHIFTDR_ADC = wire *strVar;

    sprintf(strVar,"ntUPDATEDR_%d_%d",sx,sy);
    &wire ntRef_ntUPDATEDR = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFLG_JDRP_%d_%d",sx,sy);
    &wire ntRef_ntFLG_JDRP = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLOCKDR_DRP_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR_DRP = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMEM_INIT_%d_%d",sx,sy);
    &wire ntRef_ntMEM_INIT = wire *strVar;

    sprintf(strVar,"ntAC_MODE_%d_%d",sx,sy);
    &wire ntRef_ntAC_MODE = wire *strVar;

    sprintf(strVar,"ntAC_TEST_%d_%d",sx,sy);
    &wire ntRef_ntAC_TEST = wire *strVar;

    sprintf(strVar,"ntTCK1_ADC_%d_%d",sx,sy);
    &wire ntRef_ntTCK1_ADC = wire *strVar;

    sprintf(strVar,"ntTDI1_ADC_%d_%d",sx,sy);
    &wire ntRef_ntTDI1_ADC = wire *strVar;

    sprintf(strVar,"ntCAPTUREDR_%d_%d",sx,sy);
    &wire ntRef_ntCAPTUREDR = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTCK1_%d_%d",sx,sy);
    &wire ntRef_ntTCK1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTMS1_%d_%d",sx,sy);
    &wire ntRef_ntTMS1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTDI1_%d_%d",sx,sy);
    &wire ntRef_ntTDI1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFLG_USER1_%d_%d",sx,sy);
    &wire ntRef_ntFLG_USER1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLOCKDR1_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFLG_USER2_%d_%d",sx,sy);
    &wire ntRef_ntFLG_USER2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLOCKDR2_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFLG_USER3_%d_%d",sx,sy);
    &wire ntRef_ntFLG_USER3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLOCKDR3_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFLG_USER4_%d_%d",sx,sy);
    &wire ntRef_ntFLG_USER4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLOCKDR4_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_USER_O_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USER_O = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFCS_N_%d_%d",sx,sy);
    &wire ntRef_ntFCS_N = wire *strVar;

    sprintf(strVar,"ntDAISY_O_%d_%d",sx,sy);
    &wire ntRef_ntDAISY_O = wire *strVar;

    sprintf(strVar,"ntFWE_N_%d_%d",sx,sy);
    &wire ntRef_ntFWE_N = wire *strVar;

    sprintf(strVar,"ntFOE_N_%d_%d",sx,sy);
    &wire ntRef_ntFOE_N = wire *strVar;

    sprintf(strVar,"ntADR_%d_%d",sx,sy);
    &wire ntRef_ntADR[12:0] = wire *strVar[12:0];

    sprintf(strVar,"ntADV_N_%d_%d",sx,sy);
    &wire ntRef_ntADV_N = wire *strVar;

    sprintf(strVar,"ntRS_%d_%d",sx,sy);
    &wire ntRef_ntRS[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntDOUT_%d_%d",sx,sy);
    &wire ntRef_ntDOUT[31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntOUT_EN_FCS_N_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_FCS_N = wire *strVar;

    sprintf(strVar,"ntOUT_EN_FWE_N_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_FWE_N = wire *strVar;

    sprintf(strVar,"ntOUT_EN_FOE_N_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_FOE_N = wire *strVar;

    sprintf(strVar,"ntOUT_EN_FOE_N2ADR_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_FOE_N2ADR[12:0] = wire *strVar[12:0];

    sprintf(strVar,"ntOUT_EN_FOE_N2ADV_N_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_FOE_N2ADV_N = wire *strVar;

    sprintf(strVar,"ntOUT_EN_RS_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_RS[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntOUT_EN_D_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_D[31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntOUT_EN_D1_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_D1 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_D7_2_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_D7_2 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_D4_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_D4 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_D15_8_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_D15_8 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_D31_16_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_D31_16 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_DAISY_O_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_DAISY_O = wire *strVar;

    sprintf(strVar,"ntOPENDRAIN_DAISY_O_%d_%d",sx,sy);
    &wire ntRef_ntOPENDRAIN_DAISY_O = wire *strVar;

    sprintf(strVar,"ntGPOR_N_%d_%d",sx,sy);
    &wire ntRef_ntGPOR_N = wire *strVar;

    sprintf(strVar,"ntPOR_ERASE_N_%d_%d",sx,sy);
    &wire ntRef_ntPOR_ERASE_N = wire *strVar;

    sprintf(strVar,"ntPOR_SRAM_N_%d_%d",sx,sy);
    &wire ntRef_ntPOR_SRAM_N = wire *strVar;

    sprintf(strVar,"ntPOR_BLSR_N_%d_%d",sx,sy);
    &wire ntRef_ntPOR_BLSR_N = wire *strVar;

    sprintf(strVar,"ntCRAM_VDDT_N_%d_%d",sx,sy);
    &wire ntRef_ntCRAM_VDDT_N = wire *strVar;

    sprintf(strVar,"ntCLK_CRAM_%d_%d",sx,sy);
    &wire ntRef_ntCLK_CRAM = wire *strVar;

    sprintf(strVar,"ntCMEM_TYPE_%d_%d",sx,sy);
    &wire ntRef_ntCMEM_TYPE[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntERASE_EN_%d_%d",sx,sy);
    &wire ntRef_ntERASE_EN = wire *strVar;

    sprintf(strVar,"ntWL_ON_%d_%d",sx,sy);
    &wire ntRef_ntWL_ON = wire *strVar;

    sprintf(strVar,"ntFRAME_ADDR_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCOLUMN_ADDR_%d_%d",sx,sy);
    &wire ntRef_ntCOLUMN_ADDR[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntPROG_ON_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON = wire *strVar;

    sprintf(strVar,"ntPROG_CAP_%d_%d",sx,sy);
    &wire ntRef_ntPROG_CAP = wire *strVar;

    sprintf(strVar,"ntREGION_SEL_%d_%d",sx,sy);
    &wire ntRef_ntREGION_SEL[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntREGION_RW_EN_%d_%d",sx,sy);
    &wire ntRef_ntREGION_RW_EN[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntCDATA_%d_%d",sx,sy);
    &wire ntRef_ntCDATA[31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntPRECHGE_%d_%d",sx,sy);
    &wire ntRef_ntPRECHGE = wire *strVar;

    sprintf(strVar,"ntREAD_%d_%d",sx,sy);
    &wire ntRef_ntREAD = wire *strVar;

    sprintf(strVar,"ntRDBK_ON_%d_%d",sx,sy);
    &wire ntRef_ntRDBK_ON = wire *strVar;

    sprintf(strVar,"ntRDBK_CAP_%d_%d",sx,sy);
    &wire ntRef_ntRDBK_CAP = wire *strVar;

    sprintf(strVar,"ntCFGMOD2D2_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD2D2 = wire *strVar;

    sprintf(strVar,"ntCFGMOD2D4_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD2D4 = wire *strVar;

    sprintf(strVar,"ntCFGMOD2D5_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD2D5 = wire *strVar;

    sprintf(strVar,"ntCFGMOD2D6_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD2D6 = wire *strVar;

    sprintf(strVar,"ntCFGMOD2D7_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD2D7 = wire *strVar;

    sprintf(strVar,"ntCFGMOD2RDWR_N_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD2RDWR_N = wire *strVar;

    sprintf(strVar,"ntCFGMOD_D1_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_D1 = wire *strVar;

    sprintf(strVar,"ntCFGMOD_P2D3_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_P2D3 = wire *strVar;

    sprintf(strVar,"ntCFGMOD_P2CS_N_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_P2CS_N = wire *strVar;

    sprintf(strVar,"ntCFGMOD_NP2ADR_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_NP2ADR[12:0] = wire *strVar[12:0];

    sprintf(strVar,"ntCFGMOD_NP2ADV_N_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_NP2ADV_N = wire *strVar;

    sprintf(strVar,"ntCFGMOD_NP2DAISY_O_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_NP2DAISY_O = wire *strVar;

    sprintf(strVar,"ntCFGMOD_NP2EMCLK_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_NP2EMCLK = wire *strVar;

    sprintf(strVar,"ntCFGMOD_NP2FOE_N_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_NP2FOE_N = wire *strVar;

    sprintf(strVar,"ntCFGMOD_NP2FWE_N_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_NP2FWE_N = wire *strVar;

    sprintf(strVar,"ntCFGMOD_NP2RS_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_NP2RS[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntCFGMOD_NP2IO_STATUS_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_NP2IO_STATUS = wire *strVar;

    sprintf(strVar,"ntCFGMOD_E_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_E = wire *strVar;

    sprintf(strVar,"ntCFGMOD_E_NP_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_E_NP = wire *strVar;

    sprintf(strVar,"ntCFGMOD16_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD16[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCFGMOD32_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD32[15:0] = wire *strVar[15:0];

    sprintf(strVar,"ntGLOGEN_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN = wire *strVar;

    sprintf(strVar,"ntGOUTEN_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN = wire *strVar;

    sprintf(strVar,"ntGRS_N_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N = wire *strVar;

    sprintf(strVar,"ntGWEN_%d_%d",sx,sy);
    &wire ntRef_ntGWEN = wire *strVar;

    sprintf(strVar,"ntPUP_SEL_N_%d_%d",sx,sy);
    &wire ntRef_ntPUP_SEL_N = wire *strVar;

    sprintf(strVar,"ntVDDT_N_%d_%d",sx,sy);
    &wire ntRef_ntVDDT_N = wire *strVar;

    sprintf(strVar,"ntMCE_%d_%d",sx,sy);
    &wire ntRef_ntMCE = wire *strVar;

    sprintf(strVar,"ntMWR_%d_%d",sx,sy);
    &wire ntRef_ntMWR = wire *strVar;

    sprintf(strVar,"ntCLK_DRM_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DRM = wire *strVar;

    sprintf(strVar,"ntISPAL_DOUT_%d_%d",sx,sy);
    &wire ntRef_ntISPAL_DOUT [31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntRBCRC_ERR_%d_%d",sx,sy);
    &wire ntRef_ntRBCRC_ERR = wire *strVar;

    sprintf(strVar,"ntRBCRC_VALID_%d_%d",sx,sy);
    &wire ntRef_ntRBCRC_VALID = wire *strVar;

    sprintf(strVar,"ntSEU_VALID_%d_%d",sx,sy);
    &wire ntRef_ntSEU_VALID = wire *strVar;

    sprintf(strVar,"ntSEU_INDEX_%d_%d",sx,sy);
    &wire ntRef_ntSEU_INDEX  [11:0] = wire *strVar[11:0];

    sprintf(strVar,"ntSEU_SEC_%d_%d",sx,sy);
    &wire ntRef_ntSEU_SEC = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDRCFG_ERR_%d_%d",sx,sy);
    &wire ntRef_ntDRCFG_ERR = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDRCFG_OVER_%d_%d",sx,sy);
    &wire ntRef_ntDRCFG_OVER = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEU_DED_%d_%d",sx,sy);
    &wire ntRef_ntSEU_DED = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEU_FRAME_NADDR_%d_%d",sx,sy);
    &wire ntRef_ntSEU_FRAME_NADDR[7:0] = wire *strVar[7:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEU_FRAME_ADDR_%d_%d",sx,sy);
    &wire ntRef_ntSEU_FRAME_ADDR[7:0] = wire *strVar[7:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEU_REGION_NADDR_%d_%d",sx,sy);
    &wire ntRef_ntSEU_REGION_NADDR[4:0] = wire *strVar[4:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEU_REGION_ADDR_%d_%d",sx,sy);
    &wire ntRef_ntSEU_REGION_ADDR[4:0] = wire *strVar[4:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEU_COLUMN_NADDR_%d_%d",sx,sy);
    &wire ntRef_ntSEU_COLUMN_NADDR[7:0] = wire *strVar[7:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEU_COLUMN_ADDR_%d_%d",sx,sy);
    &wire ntRef_ntSEU_COLUMN_ADDR[7:0] = wire *strVar[7:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntUTDO_%d_%d",sx,sy);
    &wire ntRef_ntUTDO = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntUID_DOUT_%d_%d",sx,sy);
    &wire ntRef_ntUID_DOUT = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntWAKEUP_OVER_N_%d_%d",sx,sy);
    &wire ntRef_ntWAKEUP_OVER_N = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFUSE_%d_%d",sx,sy);
    &wire ntRef_ntFUSE[31:0] = wire *strVar[31:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPRCFG_OVER_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_OVER = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPRCFG_ERR_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_ERR = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_CFGS_%d_%d",sx,sy);
    &wire ntRef_ntCLK_CFGS = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_MODE_O_%d_%d",sx,sy);
    &wire ntRef_ntTEST_MODE_O = wire *strVar;

    sprintf(strVar,"ntTRIM_VREF_BANKL_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_VREF_BANKL[2:0] = wire *strVar[2:0];

    sprintf(strVar,"ntTRIM_VCM_BANKL_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_VCM_BANKL[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntTRIM_VOD_BANKL_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_VOD_BANKL[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntTRIM_VREF_BANKR_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_VREF_BANKR[2:0] = wire *strVar[2:0];

    sprintf(strVar,"ntTRIM_VCM_BANKR_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_VCM_BANKR[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntTRIM_VOD_BANKR_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_VOD_BANKR[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntTRIM_LDO_CRAM_R0_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_LDO_CRAM_R0[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTRIM_LDO_CRAM_R1_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_LDO_CRAM_R1[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTRIM_LDO_CRAM_R2_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_LDO_CRAM_R2[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTRIM_LDO_CRAM_R3_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_LDO_CRAM_R3[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTRIM_LDO_CRAM_R4_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_LDO_CRAM_R4[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTRIM_LDO_CRAM_R5_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_LDO_CRAM_R5[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTRIM_LDO_CRAM_R6_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_LDO_CRAM_R6[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTRIM_LDO_CRAM_R7_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_LDO_CRAM_R7[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTRIM_LDO_WL_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_LDO_WL[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntTRIM_TEST_SEL2_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_TEST_SEL2[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntTRIM_TEST_LDOBUF2_EN_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_TEST_LDOBUF2_EN = wire *strVar;

    sprintf(strVar,"ntTRIM_TEST_M2_EN_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_TEST_M2_EN = wire *strVar;

    sprintf(strVar,"ntTRIM_TEST_SEL1_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_TEST_SEL1[2:0] = wire *strVar[2:0];

    sprintf(strVar,"ntTRIM_TEST_LDOBUF1_EN_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_TEST_LDOBUF1_EN = wire *strVar;

    sprintf(strVar,"ntTRIM_TEST_M1_EN_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_TEST_M1_EN = wire *strVar;

    sprintf(strVar,"ntSCBV_OUT_%d_%d",sx,sy);
    &wire ntRef_ntSCBV_OUT = wire *strVar;

    sprintf(strVar,"ntTDI_BSCAN_%d_%d",sx,sy);
    &wire ntRef_ntTDI_BSCAN = wire *strVar;

    sprintf(strVar,"ntPOR_N_1P8_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P8 = wire *strVar;
       
    sprintf(strVar,"ntCLK_ADC_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC = wire *strVar;

    sprintf(strVar,"ntCLK_CALI_%d_%d",sx,sy);
    &wire ntRef_ntCLK_CALI = wire *strVar;

    sprintf(strVar,"ntVNEGT1_%d_%d",sx,sy);
    &wire ntRef_ntVNEGT1 = wire *strVar;
                 
    sprintf(strVar,"ntVNEGT2_%d_%d",sx,sy);
    &wire ntRef_ntVNEGT2 = wire *strVar;

    sprintf(strVar,"ntVNEGT2_S1_%d_%d",sx,sy);
    &wire ntRef_ntVNEGT2_S1 = wire *strVar;

    sprintf(strVar,"ntVREF_1P22V_%d_%d",sx,sy);
    &wire ntRef_ntVREF_1P22V = wire *strVar;
          
    sprintf(strVar,"ntVREF_ADC_1P25V_%d_%d",sx,sy);
    &wire ntRef_ntVREF_ADC_1P25V = wire *strVar;
      
    sprintf(strVar,"ntCRAMLDO_VREF_%d_%d",sx,sy);
    &wire ntRef_ntCRAMLDO_VREF = wire *strVar;
        
    sprintf(strVar,"ntWLLDO_VREF_1V_%d_%d",sx,sy);
    &wire ntRef_ntWLLDO_VREF_1V = wire *strVar;
       
    sprintf(strVar,"ntPBAIS_10U_%d_%d",sx,sy);
    &wire ntRef_ntPBAIS_10U[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTRIM_ADC_SENSE_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_ADC_SENSE[11:0] = wire *strVar[11:0];

    sprintf(strVar,"ntTRIM_ADC_MODE_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_ADC_MODE = wire *strVar;

    sprintf(strVar,"ntTRIM_LDO_WL_SEL_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_LDO_WL_SEL[2:0] = wire *strVar[2:0];

    sprintf(strVar,"ntICONST_10U_%d_%d",sx,sy);
    &wire ntRef_ntICONST_10U[21:0] = wire *strVar[21:0];

    sprintf(strVar,"ntREAD_LATCH_%d_%d",sx,sy);
    &wire ntRef_ntREAD_LATCH = wire *strVar;

    sprintf(strVar,"ntMFG_TEST1_ADC_%d_%d",sx,sy);
    &wire ntRef_ntMFG_TEST1_ADC = wire *strVar;

    sprintf(strVar,"ntMFG_TEST2_ADC_%d_%d",sx,sy);
    &wire ntRef_ntMFG_TEST2_ADC = wire *strVar;

    sprintf(strVar,"ntMFG_TEST_NC1_%d_%d",sx,sy);
    &wire ntRef_ntMFG_TEST_NC1 = wire *strVar;

    sprintf(strVar,"ntMFG_TEST_NC2_%d_%d",sx,sy);
    &wire ntRef_ntMFG_TEST_NC2 = wire *strVar;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar,"ntNC1_%d_%d",sx,sy);
    &wire ntRef_ntNC1 = wire *strVar;

    sprintf(strVar,"ntNC2_%d_%d",sx,sy);
    &wire ntRef_ntNC2 = wire *strVar;

    sprintf(strVar,"ntTIELO_%d_%d",sx,sy);
    &wire ntRef_ntTIELO = wire *strVar;

    sprintf(strVar, "CCS_TILE_%d_%d", sx, sy);
    device CCS_TILE *strVar
        port map (
                     MASK_EN      => ntRef_ntMASK_EN,
                     PRCFG_EN     => ntRef_ntPRCFG_EN,
                     JRST         => ntRef_ntJRST,
                     JRTI         => ntRef_ntJRTI,
                     CLOCKDR      => ntRef_ntCLOCKDR,
                     CLK_USER_O   => ntRef_ntCLK_USER_O,
                     BSMODE_1     => ntRef_ntBSMODE_1,
                     BSMODE_2     => ntRef_ntBSMODE_2,
                     BSMODE_3     => ntRef_ntBSMODE_3,

                     SHIFTDR_ADC  => ntRef_ntSHIFTDR_ADC,
                     UPDATEDR_ADC => ntRef_ntUPDATEDR_ADC,
                     TCK1_ADC     => ntRef_ntTCK1_ADC,
                     TDI1_ADC     => ntRef_ntTDI1_ADC,

                     SHIFTDR      => ntRef_ntSHIFTDR,
                     UPDATEDR     => ntRef_ntUPDATEDR,
                     FLG_JDRP     => ntRef_ntFLG_JDRP,
                     CLOCKDR_DRP  => ntRef_ntCLOCKDR_DRP,
                     CAPTUREDR    => ntRef_ntCAPTUREDR,
                     TCK1         => ntRef_ntTCK1,
                     TMS1         => ntRef_ntTMS1,
                     TDI1         => ntRef_ntTDI1,
                     FLG_USER1    => ntRef_ntFLG_USER1,
                     CLOCKDR1     => ntRef_ntCLOCKDR1,
                     FLG_USER2    => ntRef_ntFLG_USER2,
                     CLOCKDR2     => ntRef_ntCLOCKDR2,
                     FLG_USER3    => ntRef_ntFLG_USER3,
                     CLOCKDR3     => ntRef_ntCLOCKDR3,
                     FLG_USER4    => ntRef_ntFLG_USER4,
                     CLOCKDR4     => ntRef_ntCLOCKDR4,
                     FCS_N        => ntRef_ntFCS_N,
                     DAISY_O      => ntRef_ntDAISY_O,
                     FWE_N        => ntRef_ntFWE_N,
                     FOE_N        => ntRef_ntFOE_N,
                     ADR          => ntRef_ntADR,
                     ADV_N        => ntRef_ntADV_N,
                     RS           => ntRef_ntRS,
                     DOUT         => ntRef_ntDOUT,
                     OUT_EN_FCS_N => ntRef_ntOUT_EN_FCS_N,
                     OUT_EN_FWE_N => ntRef_ntOUT_EN_FWE_N,
                     OUT_EN_FOE_N       => ntRef_ntOUT_EN_FOE_N,
                     OUT_EN_FOE_N2ADR   => ntRef_ntOUT_EN_FOE_N2ADR,
                     OUT_EN_FOE_N2ADV_N => ntRef_ntOUT_EN_FOE_N2ADV_N,

                     OUT_EN_RS    => ntRef_ntOUT_EN_RS,
                     OUT_EN_D     => ntRef_ntOUT_EN_D,
                     OUT_EN_DAISY_O     => ntRef_ntOUT_EN_DAISY_O,
                     OPENDRAIN_DAISY_O  => ntRef_ntOPENDRAIN_DAISY_O,
                     GPOR_N         => ntRef_ntGPOR_N,
                     POR_ERASE_N    => ntRef_ntPOR_ERASE_N,
                     POR_SRAM_N     => ntRef_ntPOR_SRAM_N,
                     POR_BLSR_N     => ntRef_ntPOR_BLSR_N,
                     CRAM_VDDT_N    => ntRef_ntCRAM_VDDT_N,
                     CLK_CRAM       => ntRef_ntCLK_CRAM,
                     CMEM_TYPE      => ntRef_ntCMEM_TYPE,
                     ERASE_EN       => ntRef_ntERASE_EN,
                     WL_ON          => ntRef_ntWL_ON,
                     FRAME_ADDR     => ntRef_ntFRAME_ADDR,
                     COLUMN_ADDR    => ntRef_ntCOLUMN_ADDR,
                     PROG_ON        => ntRef_ntPROG_ON,
                     PROG_CAP       => ntRef_ntPROG_CAP,
                     REGION_SEL     => ntRef_ntREGION_SEL,
                     REGION_RW_EN   => ntRef_ntREGION_RW_EN,
                     CDATA          => ntRef_ntCDATA,
                     PRECHGE        => ntRef_ntPRECHGE,
                     READ           => ntRef_ntREAD,
                     RDBK_ON        => ntRef_ntRDBK_ON,
                     RDBK_CAP       => ntRef_ntRDBK_CAP,
                     CFGMOD2D2      => ntRef_ntCFGMOD2D2,
                     CFGMOD2D4      => ntRef_ntCFGMOD2D4,
                     CFGMOD2D5      => ntRef_ntCFGMOD2D5,
                     CFGMOD2D6      => ntRef_ntCFGMOD2D6,
                     CFGMOD2D7      => ntRef_ntCFGMOD2D7,
                     CFGMOD2RDWR_N  => ntRef_ntCFGMOD2RDWR_N,

                     CFGMOD_D1      => ntRef_ntCFGMOD_D1,
                     CFGMOD_P2CS_N  => ntRef_ntCFGMOD_P2CS_N,
                     CFGMOD_P2D3    => ntRef_ntCFGMOD_P2D3,
                     CLK_CFGS       => ntRef_ntCLK_CFGS,

                     CFGMOD_NP2ADR       => ntRef_ntCFGMOD_NP2ADR,
                     CFGMOD_NP2ADV_N     => ntRef_ntCFGMOD_NP2ADV_N,
                     CFGMOD_NP2DAISY_O   => ntRef_ntCFGMOD_NP2DAISY_O,
                     CFGMOD_NP2EMCLK     => ntRef_ntCFGMOD_NP2EMCLK,
                     CFGMOD_NP2FOE_N     => ntRef_ntCFGMOD_NP2FOE_N,
                     CFGMOD_NP2FWE_N     => ntRef_ntCFGMOD_NP2FWE_N,
                     CFGMOD_NP2RS        => ntRef_ntCFGMOD_NP2RS,
                     CFGMOD_NP2IO_STATUS => ntRef_ntCFGMOD_NP2IO_STATUS,

                     CFGMOD_E       => ntRef_ntCFGMOD_E,
                     CFGMOD_E_NP    => ntRef_ntCFGMOD_E_NP,
                     CFGMOD16       => ntRef_ntCFGMOD16,
                     CFGMOD32       => ntRef_ntCFGMOD32,
                     GLOGEN         => ntRef_ntGLOGEN,
                     GOUTEN         => ntRef_ntGOUTEN,
                     GRS_N          => ntRef_ntGRS_N,
                     GWEN           => ntRef_ntGWEN,
                     PUP_SEL_N      => ntRef_ntPUP_SEL_N,
                     VDDT_N         => ntRef_ntVDDT_N,
                     MCE            => ntRef_ntMCE,
                     MWR            => ntRef_ntMWR,
                     CLK_DRM        => ntRef_ntCLK_DRM,
                     ISPAL_DOUT     => ntRef_ntISPAL_DOUT ,
                     RBCRC_ERR      => ntRef_ntRBCRC_ERR  ,
                     RBCRC_VALID    => ntRef_ntRBCRC_VALID  ,
                     SEU_VALID      => ntRef_ntSEU_VALID  ,
                     SEU_INDEX      => ntRef_ntSEU_INDEX  ,
                     SEU_SEC        => ntRef_ntSEU_SEC  ,
                     SEU_DED        => ntRef_ntSEU_DED  ,
                     SEU_REGION_NADDR   => ntRef_ntSEU_REGION_NADDR,
                     SEU_REGION_ADDR    => ntRef_ntSEU_REGION_ADDR,
                     SEU_COLUMN_NADDR   => ntRef_ntSEU_COLUMN_NADDR,
                     SEU_COLUMN_ADDR    => ntRef_ntSEU_COLUMN_ADDR,
                     SEU_FRAME_NADDR    => ntRef_ntSEU_FRAME_NADDR,
                     SEU_FRAME_ADDR     => ntRef_ntSEU_FRAME_ADDR,

                     UTDO           => ntRef_ntUTDO,
                     UID_DOUT       => ntRef_ntUID_DOUT,
                     WAKEUP_OVER_N  => ntRef_ntWAKEUP_OVER_N,
                     FUSE           => ntRef_ntFUSE,
                     DRCFG_ERR      => ntRef_ntDRCFG_ERR,
                     DRCFG_OVER     => ntRef_ntDRCFG_OVER,
                     PRCFG_ERR      => ntRef_ntPRCFG_ERR,
                     PRCFG_OVER     => ntRef_ntPRCFG_OVER,
                     TRIM_LDO_CRAM_R0 => ntRef_ntTRIM_LDO_CRAM_R0,
                     TRIM_LDO_CRAM_R1 => ntRef_ntTRIM_LDO_CRAM_R1,
                     TRIM_LDO_CRAM_R2 => ntRef_ntTRIM_LDO_CRAM_R2,
                     TRIM_LDO_CRAM_R3 => ntRef_ntTRIM_LDO_CRAM_R3,
                     TRIM_LDO_CRAM_R4 => ntRef_ntTRIM_LDO_CRAM_R4,
                     TRIM_LDO_CRAM_R5 => ntRef_ntTRIM_LDO_CRAM_R5,
                     TRIM_LDO_CRAM_R6 => ntRef_ntTRIM_LDO_CRAM_R6,
                     TRIM_LDO_CRAM_R7 => ntRef_ntTRIM_LDO_CRAM_R7,
                     TRIM_LDO_WL      => ntRef_ntTRIM_LDO_WL,
                     TDI_BSCAN               => ntRef_ntTDI_BSCAN,
                     POR_N_1P8               => ntRef_ntPOR_N_1P8,
                     CLK_ADC                 => ntRef_ntCLK_ADC,
                     CLK_CALI                => ntRef_ntCLK_CALI,
                     VNEGT1                  => ntRef_ntVNEGT1,
                     VNEGT2                  => ntRef_ntVNEGT2,
                     VNEGT2_S1               => ntRef_ntVNEGT2_S1,
                     VREF_ADC_1P25V          => ntRef_ntVREF_ADC_1P25V,
                     CRAMLDO_VREF            => ntRef_ntCRAMLDO_VREF,
                     WLLDO_VREF_1V           => ntRef_ntWLLDO_VREF_1V,
                     PBAIS_10U               => ntRef_ntPBAIS_10U,
                     MEM_INIT                => ntRef_ntMEM_INIT,
                     AC_TEST                 => ntRef_ntAC_TEST,
                     AC_MODE                 => ntRef_ntAC_MODE,
                     TRIM_ADC_SENSE          => ntRef_ntTRIM_ADC_SENSE,
                     TRIM_ADC_MODE           => ntRef_ntTRIM_ADC_MODE,
                     TRIM_LDO_WL_SEL         => ntRef_ntTRIM_LDO_WL_SEL,
                     READ_LATCH              => ntRef_ntREAD_LATCH,
                     ICONST_10U              => ntRef_ntICONST_10U,
                     MFG_TEST1_ADC           => ntRef_ntMFG_TEST1_ADC,
                     MFG_TEST2_ADC           => ntRef_ntMFG_TEST2_ADC,
                     MFG_TEST_NC1            => ntRef_ntMFG_TEST_NC1,
                     MFG_TEST_NC2            => ntRef_ntMFG_TEST_NC2,

                     TIEHI                   => ntRef_ntTIEHI,
                     NC1                   => ntRef_ntNC1,
                     NC2                   => ntRef_ntNC2,
                     TIELO                   => ntRef_ntTIELO
                 )
          @([sx,sy]);

        STRUCT inc_spec_ccs incVar;
        string pin_SRB;
        string pin_logic_device;
        string attribute_IO;
        int loc_SRB;
        int sy_srb;
        int sx_srb = tx_srb * NUM_GRID_X;
  
        foreach incVar(inc_ccs_srb_spec)
        {
            pin_SRB = incVar.port_name_SRB;
            pin_logic_device = incVar.port_name_device;
            attribute_IO = incVar.attribute_IO;
            loc_SRB = incVar.loc_SRB;
           
            if(loc_SRB==0)
            {
              sy_srb = sy;
            }
            else
            {
              sy_srb = sy + loc_SRB*NUM_GRID_Y; 
            }
            
            if(attribute_IO =="I")
            { 
             
               connect(<pin *pin_logic_device of <device CCS_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
            }
            else
            {
              connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx_srb,sy_srb]>>
                                                                         : <wire *pin_logic_device of <device CCS_TILE @[sx,sy]>>); 
            }
        }


};//end of function place_ccs_tile_50h

 
 }; // end of package pg2l25h_funcs_place










