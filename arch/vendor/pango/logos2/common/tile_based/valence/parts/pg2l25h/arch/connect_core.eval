use pg2l_defs,pg2l25h_defs,pg2l_funcs_place,pg2l_funcs_connect_logic;

structure arch_nl connect_srb_vertical of PG2L25H
{
    connect_srb_vertical(0, L_SRB_TILES_X_R0, L_CLMS_TILES_X_R0, L_CLMA_TILES_X_R0, 
                            L_SRB_TILES_X_R0, L_CLMS_TILES_X_R0, L_CLMA_TILES_X_R0,
                            {0},              {0},               {0}, 0);

 connect_srb_vertical(0, L_SRB_TILES_X_R0,   L_CLMS_TILES_X_R0,   L_CLMA_TILES_X_R0, 
                         L_SRB_TILES_X_R1_D, L_CLMS_TILES_X_R1_D, L_CLMA_TILES_X_R1_D,
                         L_SRB_TILES_X_R0,   L_CLMS_TILES_X_R0,   L_CLMA_TILES_X_R0, 1);

 connect_srb_vertical(1, L_SRB_TILES_X_R1_D, L_CLMS_TILES_X_R1_D, L_CLMA_TILES_X_R1_D, 
                         L_SRB_TILES_X_R1_U, L_CLMS_TILES_X_R1_U, L_CLMA_TILES_X_R1_U,
                         L_SRB_TILES_X_R0,   L_CLMS_TILES_X_R0,   L_CLMA_TILES_X_R0, 0);

 connect_srb_vertical(1, L_SRB_TILES_X_R1_U, L_CLMS_TILES_X_R1_U, L_CLMA_TILES_X_R1_U, 
                         {0},                {0},                 {0},
                         L_SRB_TILES_X_R1_D, L_CLMS_TILES_X_R1_D, L_CLMA_TILES_X_R1_D, 1);


};//end of structure arch_nl connect_srb_vertical of PG2L25H
/********************************************************************************
********************************************************************************/
library work;
use pg2l_defs,pg2l25h_defs,pg2l_funcs_place,pg2l_funcs_connect_logic;

structure arch_nl connect_srb_horizontal of PG2L25H
{
    unsigned int tx_srbdrv_l, tx_srbdrv_r;  //nearest x site between SRBCCSDRV_TILE;
    tx_srbdrv_l = SRBCCSDRV_TILE_X - 1;
    tx_srbdrv_r = CRAM_CTRL_TILE_X + 1;

    int rx_ccs = LOC_CCS_REGION;
    int W_SRB = 2;
    int E_SRB = NUM_TILE_X - 3;     //Index W/E_SRB defined horizontal edge of the function;

    connect_srb_horizontal(0, L_SRB_TILES_X_R0, L_CLMS_TILES_X_R0, L_CLMA_TILES_X_R0, 
                            rx_ccs, tx_srbdrv_l, tx_srbdrv_r, W_SRB, E_SRB, 0);

    connect_srb_horizontal(0, L_SRB_TILES_X_R0, L_CLMS_TILES_X_R0, L_CLMA_TILES_X_R0, 
                            rx_ccs, tx_srbdrv_l, tx_srbdrv_r, W_SRB, E_SRB, 1);

    connect_srb_horizontal(1, L_SRB_TILES_X_R1_D, L_CLMS_TILES_X_R1_D, L_CLMA_TILES_X_R1_D, 
                            rx_ccs, tx_srbdrv_l, tx_srbdrv_r, W_SRB, E_SRB, 0);

    connect_srb_horizontal(1, L_SRB_TILES_X_R1_U, L_CLMS_TILES_X_R1_U, L_CLMA_TILES_X_R1_U, 
                            rx_ccs, tx_srbdrv_l, tx_srbdrv_r, W_SRB, E_SRB, 1);


};//end of structure arch_nl connect_srb_horizontal of PG2L25H
/********************************************************************************
********************************************************************************/
library work;
use pg2l_defs,pg2l25h_defs,pg2l_funcs_place,pg2l_funcs_connect_logic;

structure arch_nl connect_srb_diagonal of PG2L25H
{
    unsigned int tx_srbdrv_l, tx_srbdrv_r;  //nearest x site between SRBCCSDRV_TILE;
    tx_srbdrv_l = SRBCCSDRV_TILE_X - 1;
    tx_srbdrv_r = CRAM_CTRL_TILE_X + 1;

    int rx_ccs = LOC_CCS_REGION;
    int W_SRB = 2;
    int E_SRB = NUM_TILE_X - 3;     //Index W/E_SRB defined horizontal edge of the function;

    connect_srb_diagonal(0, L_SRB_TILES_X_R0, L_CLMS_TILES_X_R0, L_CLMA_TILES_X_R0, W_SRB, E_SRB, 
                            L_SRB_TILES_X_R0, L_CLMS_TILES_X_R0, L_CLMA_TILES_X_R0,
                            {0},              {0},               {0},
                            rx_ccs,           tx_srbdrv_l,       tx_srbdrv_r,       0 );

    connect_srb_diagonal(0, L_SRB_TILES_X_R0,   L_CLMS_TILES_X_R0,   L_CLMA_TILES_X_R0, W_SRB, E_SRB, 
                            L_SRB_TILES_X_R1_D, L_CLMS_TILES_X_R1_D, L_CLMA_TILES_X_R1_D,
                            L_SRB_TILES_X_R0,   L_CLMS_TILES_X_R0,   L_CLMA_TILES_X_R0,
                            rx_ccs,             tx_srbdrv_l,         tx_srbdrv_r,   1 );

    connect_srb_diagonal(1, L_SRB_TILES_X_R1_D, L_CLMS_TILES_X_R1_D, L_CLMA_TILES_X_R1_D, W_SRB, E_SRB,
                            L_SRB_TILES_X_R1_U, L_CLMS_TILES_X_R1_U, L_CLMA_TILES_X_R1_U,
                            L_SRB_TILES_X_R0,   L_CLMS_TILES_X_R0,   L_CLMA_TILES_X_R0,
                            rx_ccs,             tx_srbdrv_l,         tx_srbdrv_r,   0 );

    connect_srb_diagonal(1, L_SRB_TILES_X_R1_U, L_CLMS_TILES_X_R1_U, L_CLMA_TILES_X_R1_U, W_SRB, E_SRB,
                            {0},                {0},                 {0}, 
                            L_SRB_TILES_X_R1_D, L_CLMS_TILES_X_R1_D, L_CLMA_TILES_X_R1_D,
                            rx_ccs,             tx_srbdrv_l,         tx_srbdrv_r,   1 );


};//end of structure arch_nl connect_srb_diagonal of PG2L25H
/********************************************************************************
********************************************************************************/
library work;
use pg2l_defs, pg2l25h_defs, pg2l_funcs_place, pg2l_funcs_connect_logic;

structure arch_nl connect_clm_cascade of PG2L25H
{
    unsigned int rx, tx;
    unsigned int loc_srb, flag_cas;
    unsigned int l_tx_a[], l_tx_s[];

    foreach rx( {0} )
    {
        foreach loc_srb( {[0:1]} )
        {
            flag_cas = (loc_srb==0) ? 0 : 1;
            foreach tx( L_CLMS_TILES_X_R0 )
            {
                string device_clm = "CLMS_TILE";
                connect_clm_cascade(tx, rx, loc_srb, flag_cas, device_clm);
            }
           
            foreach tx( L_CLMA_TILES_X_R0 )
            {
                string device_clm = "CLMA_TILE";
                connect_clm_cascade(tx, rx, loc_srb, flag_cas, device_clm);
            }
 
        }
    }

    foreach rx( {1} )
    {
        foreach loc_srb( {[0:1]} )
        {
            l_tx_s = (loc_srb==0) ? L_CLMS_TILES_X_R1_D : L_CLMS_TILES_X_R1_U;
            l_tx_a = (loc_srb==0) ? L_CLMA_TILES_X_R1_D : L_CLMA_TILES_X_R1_U;

            foreach tx( l_tx_s )
            {
                flag_cas = ((loc_srb==1)&&(tx==38)) ? 0 : 1;
                string device_clm = "CLMS_TILE";
                connect_clm_cascade(tx, rx, loc_srb, flag_cas, device_clm);
            }

            foreach tx( l_tx_a )
            {
                flag_cas = ((loc_srb==1)&&((tx==36)||(tx==39))) ? 0 : 1;
                string device_clm = "CLMA_TILE";
                connect_clm_cascade(tx, rx, loc_srb, flag_cas, device_clm);
            }

        }
    }
};//end of structure arch_nl connect_clm_cascade of PG2L25H
/********************************************************************************
********************************************************************************/
library work;
use pg2l_defs, pg2l25h_defs, pg2l_funcs_place, pg2l_funcs_connect_logic;

structure arch_nl connect_apm_cascade of PG2L25H
{
    unsigned int rx, tx, ty;
    unsigned int ty_tmp;
    unsigned int rx_d, rx_u;    //function modified for 200h

    foreach rx( L_REGION )
    {
        foreach ty_tmp( L_APM_TILES_Y )
        {
            ty = rx * NUM_TILES_REGION + ty_tmp;
            rx_d = 0;
            rx_u = NUM_REGION - 1;
            foreach tx( L_APM_TILES_X )
            {
                connect_apm_cascade(tx, ty, rx_d, rx_u);
            }
        }
    }

};//end of structure arch_nl connect_apm_cascade of PG2L25H
/********************************************************************************
********************************************************************************/
library work;
use pg2l_defs, pg2l25h_defs, pg2l_funcs_place, pg2l_funcs_connect_logic;

structure arch_nl connect_drm_cascade of PG2L25H
{
    unsigned int rx, tx;
    unsigned int loc_drm, flag_cas;
    unsigned int l_tx[];

    foreach rx( L_REGION )
    {   
        foreach loc_drm( {[0:1]} )
        {
            l_tx = (rx==0) ? L_DRM_TILES_X_R0 :
                   (loc_drm==0) ? L_DRM_TILES_X_R1_D : L_DRM_TILES_X_R1_U;

            foreach tx( l_tx )
            {
                flag_cas = (((rx==0)&&(loc_drm==0))||((rx==1)&&(loc_drm==1)&&(tx==37))) ? 0 : 1;
                connect_drm_cascade(tx, rx, loc_drm, flag_cas);
            }
        }
    }

};//end of structure arch_nl connect_drm_cascade of PG2L25H
/********************************************************************************
********************************************************************************/
library work;
use pg2l_defs, pg2l25h_defs, pg2l_funcs_place, pg2l_funcs_connect_logic;

structure arch_nl connect_CLMS_mask_data of PG2L25H
{
    unsigned int rx, ty_tmp;
    unsigned int loc_srb;
    unsigned int l_tx[], l_ty[];
    
//connect_mask_data_cascade

    foreach rx( L_REGION )
    {
        foreach loc_srb( {[0:1]} )
        {
            l_tx = (rx==0) ? L_CLMS_TILES_X_R0 :
              (loc_srb==0) ? L_CLMS_TILES_X_R1_D : L_CLMS_TILES_X_R1_U;
            l_ty = (loc_srb==0) ? L_TILES_Y_D : L_TILES_Y_U;

            foreach ty_tmp( l_ty )
            {
                int ty = rx * NUM_TILES_REGION + ty_tmp;
                connect_mask_data_cascade(ty, l_tx, CRAM_CTRL_TILE_X, NUM_TILE_X);
            }
        }
    }

//connect_mask_data_output

    foreach rx( L_REGION )
    {
        int tx_clms_l = CLMS_TILE_X_L;
        int tx_clms_r = CLMS_TILE_X_R;
        string device_bl = "CRAM_CTRL_25H_TILE";

        string data_l = (rx==1) ? "MASK_DATA_L_R1" : "MASK_DATA_L_R2";
        string data_r = (rx==1) ? "MASK_DATA_R_R1" : "MASK_DATA_R_R2";

        connect_mask_data_output(rx, CRAM_CTRL_TILE_X, CRAM_CTRL_TILE_Y, tx_clms_l, tx_clms_r, data_l, data_r, device_bl);
    }

};//end of structure arch_nl connect_CLMS_mask_data of PG2L25H

