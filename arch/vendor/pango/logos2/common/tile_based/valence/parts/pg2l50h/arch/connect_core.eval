*************************************************************************
****************************************************************************************/
library work;
use pg2l_defs,pg2l50h_defs,pg2l_funcs_place,pg2l_funcs_connect_logic;

structure arch_nl connect_srb_vertical of PG2L50H
{
  connect_srb_vertical(0, L_SRB_TILES_X_R0, L_CLMS_TILES_X_R0, L_CLMA_TILES_X_R0, 
                          L_SRB_TILES_X_R0, L_CLMS_TILES_X_R0, L_CLMA_TILES_X_R0,
                          {0}, {0},  {0}, 0);

  connect_srb_vertical(0, L_SRB_TILES_X_R0, L_CLMS_TILES_X_R0, L_CLMA_TILES_X_R0,
                          L_SRB_TILES_X_R1, L_CLMS_TILES_X_R1, L_CLMA_TILES_X_R1,
                          L_SRB_TILES_X_R0, L_CLMS_TILES_X_R0, L_CLMA_TILES_X_R0, 1);

  connect_srb_vertical(1, L_SRB_TILES_X_R1, L_CLMS_TILES_X_R1, L_CLMA_TILES_X_R1, 
                          L_SRB_TILES_X_R1, L_CLMS_TILES_X_R1, L_CLMA_TILES_X_R1,
                          L_SRB_TILES_X_R0, L_CLMS_TILES_X_R0, L_CLMA_TILES_X_R0, 0);

  connect_srb_vertical(1, L_SRB_TILES_X_R1,   L_CLMS_TILES_X_R1,   L_CLMA_TILES_X_R1, 
                          L_SRB_TILES_X_R2_D, L_CLMS_TILES_X_R2_D, L_CLMA_TILES_X_R2_D,
                          L_SRB_TILES_X_R1,   L_CLMS_TILES_X_R1,   L_CLMA_TILES_X_R1,   1);

  connect_srb_vertical(2, L_SRB_TILES_X_R2_D, L_CLMS_TILES_X_R2_D, L_CLMA_TILES_X_R2_D, 
                          L_SRB_TILES_X_R2_U, L_CLMS_TILES_X_R2_U, L_CLMA_TILES_X_R2_U,
                          L_SRB_TILES_X_R1,   L_CLMS_TILES_X_R1,   L_CLMA_TILES_X_R1, 0);

  connect_srb_vertical(2, L_SRB_TILES_X_R2_U, L_CLMS_TILES_X_R2_U, L_CLMA_TILES_X_R2_U,
                          {0},                {0},                 {0},
                          L_SRB_TILES_X_R2_D, L_CLMS_TILES_X_R2_D, L_CLMA_TILES_X_R2_D, 1);


};//end of structure arch_nl connect_srb_vertical of PG2L50H
/***************************************************************************************
****************************************************************************************/
library work;
use pg2l_defs,pg2l50h_defs,pg2l_funcs_place,pg2l_funcs_connect_logic;

structure arch_nl connect_srb_horizontal of PG2L50H
{

  int w_srb = 2;
  int e_srb_r0 = NUM_TILE_X - 1;
  int e_srb_r1 = NUM_TILE_X - 1;
  int e_srb_r2 = HSST_TILE_X;
  int tx_srbdrv_l = SRBCCSDRV_TILE_X - 1;
  int tx_srbdrv_r = BLANK_SRB_TILE_X;

  connect_srb_horizontal(0, L_SRB_TILES_X_R0, L_CLMS_TILES_X_R0, L_CLMA_TILES_X_R0, LOC_CCS_REGION, 
                         tx_srbdrv_l, tx_srbdrv_r, w_srb, e_srb_r0, 0);

  connect_srb_horizontal(0, L_SRB_TILES_X_R0, L_CLMS_TILES_X_R0, L_CLMA_TILES_X_R0, LOC_CCS_REGION,
                         tx_srbdrv_l, tx_srbdrv_r, w_srb, e_srb_r0, 1);

  connect_srb_horizontal(1, L_SRB_TILES_X_R1, L_CLMS_TILES_X_R1, L_CLMA_TILES_X_R1, LOC_CCS_REGION,
                         tx_srbdrv_l, tx_srbdrv_r, w_srb, e_srb_r1, 0);

  connect_srb_horizontal(1, L_SRB_TILES_X_R1, L_CLMS_TILES_X_R1, L_CLMA_TILES_X_R1, LOC_CCS_REGION,
                         tx_srbdrv_l, tx_srbdrv_r, w_srb, e_srb_r1, 1);

  connect_srb_horizontal(2, L_SRB_TILES_X_R2_D, L_CLMS_TILES_X_R2_D, L_CLMA_TILES_X_R2_D, LOC_CCS_REGION,
                         tx_srbdrv_l, tx_srbdrv_r, w_srb, e_srb_r2, 0);

  connect_srb_horizontal(2, L_SRB_TILES_X_R2_U, L_CLMS_TILES_X_R2_U, L_CLMA_TILES_X_R2_U, LOC_CCS_REGION,
                         tx_srbdrv_l, tx_srbdrv_r, w_srb, e_srb_r2, 1);



};//end of structure arch_nl connect_srb_vertical of PG2L50H
/***************************************************************************************
****************************************************************************************/
library work;
use pg2l_defs,pg2l50h_defs,pg2l_funcs_place,pg2l_funcs_connect_logic;

structure arch_nl connect_srb_diagonal of PG2L50H
{

    int w_srb = 2;
    int e_srb = NUM_TILE_X - 1;
    int tx_srbdrv_l = SRBCCSDRV_TILE_X - 1;
    int tx_srbdrv_r = BLANK_SRB_TILE_X;

    connect_srb_diagonal(0, L_SRB_TILES_X_R0, L_CLMS_TILES_X_R0,  L_CLMA_TILES_X_R0, w_srb, e_srb,
                            L_SRB_TILES_X_R0, L_CLMS_TILES_X_R0,  L_CLMA_TILES_X_R0,
                            {0},              {0},                {0},
                            LOC_CCS_REGION,   tx_srbdrv_l,        tx_srbdrv_r,      0);

    connect_srb_diagonal(0, L_SRB_TILES_X_R0, L_CLMS_TILES_X_R0,  L_CLMA_TILES_X_R0, w_srb, e_srb,
                            L_SRB_TILES_X_R1, L_CLMS_TILES_X_R1,  L_CLMA_TILES_X_R1,
                            L_SRB_TILES_X_R0, L_CLMS_TILES_X_R0,  L_CLMA_TILES_X_R0,
                            LOC_CCS_REGION,   tx_srbdrv_l,        tx_srbdrv_r,      1);

    connect_srb_diagonal(1, L_SRB_TILES_X_R1, L_CLMS_TILES_X_R1,  L_CLMA_TILES_X_R1, w_srb, e_srb,
                            L_SRB_TILES_X_R1, L_CLMS_TILES_X_R1,  L_CLMA_TILES_X_R1,
                            L_SRB_TILES_X_R0, L_CLMS_TILES_X_R0,  L_CLMA_TILES_X_R0,
                            LOC_CCS_REGION,   tx_srbdrv_l,        tx_srbdrv_r,          0);

    connect_srb_diagonal(1, L_SRB_TILES_X_R1,   L_CLMS_TILES_X_R1,    L_CLMA_TILES_X_R1, w_srb, e_srb,
                            L_SRB_TILES_X_R2_D, L_CLMS_TILES_X_R2_D,  L_CLMA_TILES_X_R2_D,
                            L_SRB_TILES_X_R1,   L_CLMS_TILES_X_R1,    L_CLMA_TILES_X_R1,
                            LOC_CCS_REGION,     tx_srbdrv_l,          tx_srbdrv_r,       1);

    connect_srb_diagonal(2, L_SRB_TILES_X_R2_D, L_CLMS_TILES_X_R2_D,  L_CLMA_TILES_X_R2_D, w_srb, e_srb,
                            L_SRB_TILES_X_R2_U, L_CLMS_TILES_X_R2_U,  L_CLMA_TILES_X_R2_U,
                            L_SRB_TILES_X_R1,   L_CLMS_TILES_X_R1,    L_CLMA_TILES_X_R1,
                            LOC_CCS_REGION,     tx_srbdrv_l,          tx_srbdrv_r,       0);

    connect_srb_diagonal(2, L_SRB_TILES_X_R2_U, L_CLMS_TILES_X_R2_U,  L_CLMA_TILES_X_R2_U, w_srb, e_srb,
                            {0},                {0},                  {0},
                            L_SRB_TILES_X_R2_D, L_CLMS_TILES_X_R2_D,  L_CLMA_TILES_X_R2_D,
                            LOC_CCS_REGION,     tx_srbdrv_l,          tx_srbdrv_r,        1);

};//end of structure arch_nl connect_srb_diagonal of PG2L50H
/***************************************************************************************
****************************************************************************************/
//  library work;
//  use pg2l_defs,pg2l50h_defs,pg2l_funcs_place,pg2l_funcs_connect_logic;

//  structure arch_nl connect_srbccsdrv of PG2L50H
//  {

//      int ty;
//      int tx_srbdrv_l = SRBCCSDRV_TILE_X - 1;
//      int tx_srbdrv_r = BLANK_SRB_TILE_X;

//      foreach ty (L_SRBCCSDRV_TILES_Y)
//      {
//          connect_srbccsdrv(SRBCCSDRV_TILE_X, ty, tx_srbdrv_l, tx_srbdrv_r, "CLMS_TILE", "SRB_TILE", "SRB_TILE", "CLMA_TILE");
//      }

//  };// end of structure arch_nl connect_srbccsdrv of PG2L50H
/***************************************************************************************
****************************************************************************************/
library work;
use pg2l_defs,pg2l50h_defs,pg2l_funcs_place,pg2l_funcs_connect_logic;
//use pg2l50h_funcs_connect_logic;

structure arch_nl connect_CLM_TILES of PG2L50H
{
    unsigned int rx, tx, ty, ty_tmp;
    unsigned int loc_srb;
    unsigned int l_tx[], l_ty[];
    unsigned int flag_cas;

    string device_bl = "CRAM_CTRL_50H_TILE";


//For CLMS_TILE connect_clm_cascade

    foreach tx( L_CLMS_TILES_X_R0 )
    {
        foreach loc_srb( {[0:1]} )
        {
            flag_cas = (loc_srb==0) ? 0 : 1;
            connect_clm_cascade(tx, 0, loc_srb, flag_cas, "CLMS_TILE");
        }
    }

    foreach tx( L_CLMS_TILES_X_R1 )
    {
        foreach loc_srb( {[0:1]} )
        {
            flag_cas = 1;
            connect_clm_cascade(tx, 1, loc_srb, flag_cas, "CLMS_TILE");
        }
    }

    foreach tx( L_CLMS_TILES_X_R2_D )
    {
        loc_srb = 0;
        flag_cas = ((tx==12)||(tx==13)||(tx==14)||(tx==15)||(tx==18)||(tx==20)) ? 0 : 1;

        connect_clm_cascade(tx, 2, loc_srb, flag_cas, "CLMS_TILE");
    }

    foreach tx( L_CLMS_TILES_X_R2_U )
    {
        loc_srb = 1;
        flag_cas = (tx==42) ? 0 : 1;

        connect_clm_cascade(tx, 2, loc_srb, flag_cas, "CLMS_TILE");
    }

//For CLMS_TILE connect_mask_data_cascade

    foreach rx( L_REGION )
    {
            
        foreach loc_srb ( {[0:1]} )
        {
            l_tx = (rx==0)      ? L_CLMS_TILES_X_R0 :
                   (rx==1)      ? L_CLMS_TILES_X_R1 :
                   (loc_srb==0) ? L_CLMS_TILES_X_R2_D : L_CLMS_TILES_X_R2_U;

            l_ty = (loc_srb==0) ? {[0:24]} : {[26:50]};

            foreach ty_tmp( l_ty )
            {
                ty = rx * NUM_TILES_REGION + ty_tmp;

                connect_mask_data_cascade(ty, l_tx, CRAM_CTRL_TILE_X, NUM_TILE_X);
            }
        }
    }

//for CLMS_TILE connect_mask_data_output


    foreach rx( L_REGION )
    {
        int tx_clms_l = (rx==2) ? CRAM_CTRL_TILE_X - 2 : 9;
        int tx_clms_r = CRAM_CTRL_TILE_X + 3;

        string data_l = (rx==0) ? "MASK_DATA_L_R2" : (rx==1) ? "MASK_DATA_L_R1" : "MASK_DATA_L_R0";
        string data_r = (rx==0) ? "MASK_DATA_R_R2" : (rx==1) ? "MASK_DATA_R_R1" : "MASK_DATA_R_R0";


        connect_mask_data_output(rx, CRAM_CTRL_TILE_X, CRAM_CTRL_TILE_Y, tx_clms_l, tx_clms_r,  data_l, data_r, device_bl);
    }

//For CLMA_TILE connect_clm_cascade

    foreach tx( L_CLMA_TILES_X_R0 )
    {
        foreach loc_srb( {[0:1]} )
        {
            flag_cas = (loc_srb==0) ? 0 : 1;
            connect_clm_cascade(tx, 0, loc_srb, flag_cas, "CLMA_TILE");
        }
    }

    foreach tx( L_CLMA_TILES_X_R1 )
    {
        foreach loc_srb( {[0:1]} )
        {
            flag_cas = 1;
            connect_clm_cascade(tx, 1, loc_srb, flag_cas, "CLMA_TILE");
        }
    }

    foreach tx( L_CLMA_TILES_X_R2_D )
    {
        loc_srb = 0;
        flag_cas = ((tx==16)||(tx==17)||(tx==19)||(tx==21)) ? 0 : 1;
        connect_clm_cascade(tx, 2, loc_srb, flag_cas, "CLMA_TILE");
    }

    foreach tx( L_CLMA_TILES_X_R2_U )
    {
        loc_srb = 1;
        flag_cas = ((tx==40)||(tx==43)) ? 0 : 1;
        connect_clm_cascade(tx, 2, loc_srb, flag_cas, "CLMA_TILE");
    }



};//end of structure arch_nl connect_CLM_TILES of PG2L50H
/***************************************************************************************
****************************************************************************************/
library work;
use pg2l_defs,pg2l50h_defs,pg2l_funcs_place,pg2l_funcs_connect_logic;

structure arch_nl connect_APM_TILES of PG2L50H
{
    unsigned int rx, tx, ty, ty_tmp;
    int num_region = NUM_REGION;

    foreach tx( L_APM_TILES_X )
    {
        foreach rx( L_REGION )
        {
            foreach ty_tmp( L_APM_TILES_Y )
            {
                ty = rx * NUM_TILES_REGION + ty_tmp;
                int rx_u = NUM_REGION - 1;
                int rx_d = 0;

                connect_apm_cascade(tx, ty, rx_d, rx_u);
            }
        }
    }
};//end of structure arch_nl connect_APM_TILES of PG2L50H
/***************************************************************************************
****************************************************************************************/
library work;
use pg2l_defs,pg2l50h_defs,pg2l_funcs_place,pg2l_funcs_connect_logic;

structure arch_nl connect_DRM_TILES of PG2L50H
{
    unsigned int rx, tx, ty;
    unsigned int loc_drm;
    unsigned int l_tx[];
    unsigned int flag_cas;

    foreach rx( L_REGION )
    {
        foreach loc_drm( {[0:1]} )
        {
            l_tx = ((rx==2)&&(loc_drm==0)) ? L_DRM_TILES_X_R2_D : L_DRM_TILES_X_R0;    
            foreach tx( l_tx )
            {
                flag_cas = (((rx==2)&&(tx==41))||(rx==0)&&(loc_drm==0)) ? 0 : 1;
                connect_drm_cascade(tx, rx, loc_drm, flag_cas);
            }
        }
    }


};//end of structure arch_nl connect_DRM_TILES of PG2L50H

