use pg2l_floorplan_funcs, pg2l_defs, pg2l25h_defs;

floorplan
structure fp_struct place_logic_resource of device PG2L25H
{
      // Tile index variable
      unsigned int rx,tx, ty;
      int ty_tmp;
      int l_tx[];
      int tx_srb;      
      //clm

      foreach tx ( L_CLMA_TILES_X_R0 )
      {
          foreach ty ( L_CLM_TILES_Y )
          {
              rx = 0;
              ty_tmp = rx * NUM_TILES_REGION + ty;
              place_clm_tile_fp(tx, ty_tmp, 0);
  
          }
      }

      foreach tx ( L_CLMA_TILES_X_R1_U )
      {
          foreach ty ( L_TILES_Y_U )
          {
              rx = 1;
              ty_tmp = rx * NUM_TILES_REGION + ty;
              place_clm_tile_fp(tx, ty_tmp, 0);
  
          }
      }

      foreach tx ( L_CLMA_TILES_X_R1_D )
      {
          foreach ty ( L_TILES_Y_D )
          {
              rx = 1;
              ty_tmp = rx * NUM_TILES_REGION + ty;
              place_clm_tile_fp(tx, ty_tmp, 0);
  
          }
      }

      foreach tx ( L_CLMS_TILES_X_R0 )
      {
          foreach ty ( L_CLM_TILES_Y )
          {
              rx = 0;
              ty_tmp = rx * NUM_TILES_REGION + ty;
              place_clm_tile_fp(tx, ty_tmp, 1);
  
          }
      }

      foreach tx ( L_CLMS_TILES_X_R1_D )
      {
          foreach ty ( L_TILES_Y_D )
          {
              rx = 1;
              ty_tmp = rx * NUM_TILES_REGION + ty;
              place_clm_tile_fp(tx, ty_tmp, 1);
          }
      }

      foreach tx (L_CLMS_TILES_X_R1_U )
      {
          foreach ty ( L_TILES_Y_U )
          {
              rx = 1;
              ty_tmp = rx * NUM_TILES_REGION + ty;
              place_clm_tile_fp(tx, ty_tmp, 1);
          }
      }

    //DRM
    //unsigned int rx,tx,ty;
    //unsigned int l_tx[];
    foreach rx( L_REGION )
    {
      foreach ty ( L_DRM_TILES_Y )
      {
          l_tx = (rx==0) ? L_DRM_TILES_X_R0 : 
                 (ty<MID_TILE_REGION) ? L_DRM_TILES_X_R1_D : L_DRM_TILES_X_R1_U;

          foreach tx ( l_tx )
          {
              int ty_tmp = rx * NUM_TILES_REGION + ty;
              place_drm_tile_fp( tx, ty_tmp);
          }
      } 
    } 
    //apm   
    //unsigned int rx,tx,ty;
    
    foreach rx( L_REGION )
    {
      foreach tx ( L_APM_TILES_X )
      {
          foreach ty ( L_APM_TILES_Y )
          {
              int ty_tmp = rx * NUM_TILES_REGION + ty;
              place_apm_tile_fp( tx, ty_tmp);
          }
      } 
    }
    //IOL
    //unsigned int rx,tx,ty,ty_tmp;
    //int l_tx[];
    
    foreach rx( L_REGION )
    {
      l_tx = (rx==0) ? L_IOL_TILES_X_R0 : L_IOL_TILES_X_R1;
      foreach tx ( l_tx )
      {
          foreach ty ( L_IOL_TILES_Y )
          {
              int ty_tmp = rx * NUM_TILES_REGION + ty;
              place_iol_tile_fp( tx, ty_tmp, 0);
          }
      } 
    }
    
    //IOB
    foreach rx( L_REGION )
    {
      l_tx = (rx==0) ? L_IOB_TILES_X_R0 : L_IOB_TILES_X_R1;
      foreach tx ( l_tx )
      {
         ty = rx * NUM_TILES_REGION;
         place_iob_tile_fp( tx, ty, 0);   
      } 
    }
    
    //USCM
    ty = LOC_USCM_REGION * NUM_TILES_REGION + USCM_TILE_Y;

    place_uscm_tile_fp( USCM_TILE_X, ty);
//    //PREGMUX 
//    ty = LOC_PREGMUXC_REGION * NUM_TILES_REGION + PREGMUXC_TILE_Y;
//    place_pregmuxc_tile_fp( PREGMUXC_TILE_X, ty);      
//     //PLL
//    //unsigned int rx,tx,ty;
//    //unsigned int l_tx[];
  unsigned int flag;  
    foreach rx( L_REGION )
    {
        l_tx = (rx==0) ? L_PLL_TILES_X_R0 : L_PLL_TILES_X_R1;
        foreach tx( l_tx )
        {
            foreach flag( {[0:1]} )
            {
                ty_tmp = (flag==0) ? GPLL_TILE_Y : PPLL_TILE_Y;
                ty = rx * NUM_TILES_REGION + ty_tmp;

                place_pll_tile_fp(tx, ty, flag);
                
            }
        }
    }

    //CCS
    //unsigned int tx,ty;
    ty = LOC_CCS_REGION * NUM_TILES_REGION + CCS_TILE_Y;
    tx_srb = CRAM_CTRL_TILE_X + 1;

    place_ccs_tile_fp(CCS_TILE_X, ty, tx_srb);  
    //IOCK
    //unsigned int rx,tx,ty;
    //unsigned int l_tx[];

    foreach rx( L_REGION )
    {
      foreach ty ( {IOCK_TILE_Y} )
      {
          l_tx = (rx==0) ? L_IOCK_TILES_X_R0 : L_IOCK_TILES_X_R1;
          foreach tx ( l_tx )
          {
             
              int ty_tmp = rx * NUM_TILES_REGION + ty;
              place_iock_tile_fp( tx, ty_tmp);
          }
      } 
    }  
   //HSSTLP
    ty = LOC_HSST_REGION * NUM_TILES_REGION;

    place_hsst_tile_fp(HSST_TILE_X, ty, 0);
  //PCIE
    ty = LOC_PCIE_REGION * NUM_TILES_REGION + PCIE_TILE_Y;

    place_pcie_tile_fp(PCIE_TILE_X, ty); 
 //ADC
    ty = LOC_ADC_REGION * NUM_TILES_REGION + ADC_TILE_Y;
    tx_srb = CRAM_CTRL_TILE_X + 1;

    place_adc_tile_fp(ADC_TILE_X, ty, tx_srb);
}; // end of structure floorplan 
