*******************************************************************************

  Vendor    [PANGO]

  Author    []

  Abstract  [This defines all parts supported by a specific vendor
  
             The architecture definition file is loaded upon start of any program 
             that operates on the architecture. So the part info and the corresponding 
             models are readily available for the program down the flow.

             Based on industrial convention, an FPGA part is fully characterized by

                 family/device/package and speedgrade; speedgrade is specified w.r.t. family

             Therefore, the architecture modeling is hierarchical in nature, i.e., models
             common to all devices under a family shall be specified once.   ]

  Revision History:

********************************************************************************************/
architecture pango
{
    // This is the area that is common to all families. Common variables can be declared
    // here, so they can be seen by all families

    //
    // Specific to the support for this vendor, all files are specified w.r.t. the install path 
    // by default. However, if full path is desired, the install path can be pulled out by Valence
    // built-in system function 'getenv', as
    //
    //   string install_root = getenv("FAB_INSTALL_PATH");
    //
    //   string val_path = *install_root + "/arch/vendor/pango/titan/valence/common/";
    //

    // The path to the library that is common to all architectures
    string vendor_lib_path = "/arch/vendor/pango/library/";
    string bop_sym_path    = "/arch/lib/bms/valence/";
    
    // The path to text formated files
    string pango_path = "/arch/vendor/pango/";

    file ( "verification operator library" )
    {
       ( *vendor_lib_path + "operator/vop.eval -e -format valence" )
    }


    //
    // In the following, Valence model related to chip package and packaging, that are
    // common to all devices for this vendor, are listed. These files are parsed upon 
    // the startup of the fab. However, the model is executed (to build adm model) only 
    // if they are referenced
    //
    string chip_pkg_path = "/arch/vendor/pango/package/";

    // The unified symbol declaration is common to all package pin 
 
    //
    // All chip packages supported by this vendor are listed here. The model shall be
    // loaded on demand
    //
   

    // The unified symbol declaration is common to all package pin 
    file
    {
        ( *chip_pkg_path + "PinSymbol/PinSym_defs.eval -e -format valence" ),
        ( *chip_pkg_path + "PinSymbol/PinSymbols.eval -e  -format valence" )
    }

    
    // bop & bop symbol
    file
    {
        ( *bop_sym_path + "bmsPrim.eval -e -format valence" ),
        ( *bop_sym_path + "Symbol/BopSym_defs.eval -e -format valence" ),
        ( *bop_sym_path + "Symbol/BopSymbols.eval -e  -format valence" )
    }
    
    //parameter manager
    file
    {
        ( *pango_path + "data/paramanager.txt -format param_manager" )
    }

    CHIP_PACKAGE ( FFBG484 )
    {
        file
        {
            ( *chip_pkg_path + "FFBG484/FFBG484.eval -e  -format valence" )
        }
    }
    
    CHIP_PACKAGE ( FFBG676 )
    {
        file
        {
            ( *chip_pkg_path + "FFBG676/FFBG676.eval -e  -format valence" )
        }
    }
    
    CHIP_PACKAGE ( FFBG1152 )
    {
        file
        {
            ( *chip_pkg_path + "FFBG1152/FFBG1152.eval -e  -format valence" )
        }
    }

    CHIP_PACKAGE ( FFBG1152A )
    {
        file
        {
            ( *chip_pkg_path + "FFBG1152A/FFBG1152A.eval -e  -format valence" )
        }
    }

    CHIP_PACKAGE ( FFBG1152B )
    {
        file
        {
            ( *chip_pkg_path + "FFBG1152B/FFBG1152B.eval -e  -format valence" )
        }
    }

    CHIP_PACKAGE ( FFBG1140 )
    {
        file
        {
            ( *chip_pkg_path + "FFBG1140/FFBG1140.eval -e  -format valence" )
        }
    }
        
    CHIP_PACKAGE ( FBG256 )
    {
        file
        {
            ( *chip_pkg_path + "FBG256/FBG256.eval -e  -format valence" )
        }
    }

    CHIP_PACKAGE ( FBG676 )
    {
        file
        {
            ( *chip_pkg_path + "FBG676/FBG676.eval -e  -format valence" )
        }
    }
    
    CHIP_PACKAGE ( FBG900 )
    {
        file
        {
            ( *chip_pkg_path + "FBG900/FBG900.eval -e  -format valence" )
        }
    }
    
    CHIP_PACKAGE ( FFBG900 )
    {
        file
        {
            ( *chip_pkg_path + "FFBG900/FFBG900.eval -e  -format valence" )
        }
    }
    
    CHIP_PACKAGE ( BG256 )
    {
        file
        {
            ( *chip_pkg_path + "BG256/BG256.eval -e  -format valence" )
        }
    }

    CHIP_PACKAGE ( MBG256 )
    {
        file
        {
            ( *chip_pkg_path + "MBG256/MBG256.eval -e  -format valence" )
        }
    }

    CHIP_PACKAGE ( BG324 )
    {
        file
        {
            ( *chip_pkg_path + "BG324/BG324.eval -e  -format valence" )
        }
    }
    
    CHIP_PACKAGE ( MBG324 )
    {
        file
        {
            ( *chip_pkg_path + "MBG324/MBG324.eval -e  -format valence" )
        }
    }
    
    CHIP_PACKAGE ( MBG325 )
    {
        file
        {
            ( *chip_pkg_path + "MBG325/MBG325.eval -e  -format valence" )
        }
    }

    CHIP_PACKAGE ( MBG332 )
    {
        file
        {
            ( *chip_pkg_path + "MBG332/MBG332.eval -e  -format valence" )
        }
    }

    CHIP_PACKAGE ( MBG400 )
    {
        file
        {
            ( *chip_pkg_path + "MBG400/MBG400.eval -e  -format valence" )
        }
    }
    
    CHIP_PACKAGE ( MBG400_7K_TO_4K )
    {
        file
        {
            ( *chip_pkg_path + "MBG400/MBG400_7K_TO_4K.eval -e  -format valence" )
        }
    }
    
    CHIP_PACKAGE ( MBG484 )
    {
        file
        {
            ( *chip_pkg_path + "MBG484/MBG484.eval -e  -format valence" )
        }
    }

    CHIP_PACKAGE ( SBG238 )
    {
        file
        {
            ( *chip_pkg_path + "SBG238/SBG238.eval -e  -format valence" )
        }
    }

    CHIP_PACKAGE ( SBG256 )
    {
        file
        {
            ( *chip_pkg_path + "SBG256/SBG256.eval -e  -format valence" )
        }
    }

    CHIP_PACKAGE ( SSBG256 )
    {
        file
        {
            ( *chip_pkg_path + "SSBG256/SSBG256.eval -e  -format valence" )
        }
    }
    
    CHIP_PACKAGE ( LPG100 )
    {
        file
        {
            ( *chip_pkg_path + "LPG100/LPG100.eval -e  -format valence" )
        }
    }
    
    CHIP_PACKAGE ( LPG144 )
    {
        file
        {
            ( *chip_pkg_path + "LPG144/LPG144.eval -e  -format valence" )
        }
    }
    
    CHIP_PACKAGE ( LPG176 )
    {
        file
        {
            ( *chip_pkg_path + "LPG176/LPG176.eval -e  -format valence" )
        }
    }

    CHIP_PACKAGE ( UWG36 )
    {
        file
        {
            ( *chip_pkg_path + "UWG36/UWG36.eval -e  -format valence" )
        }
    }
    
    CHIP_PACKAGE ( UWG49 )
    {
        file
        {
            ( *chip_pkg_path + "UWG49/UWG49.eval -e  -format valence" )
        }
    }
    
    CHIP_PACKAGE ( UWG81 )
    {
        file
        {
            ( *chip_pkg_path + "UWG81/UWG81.eval -e  -format valence" )
        }
    }
    
    CHIP_PACKAGE ( FBG484 )
    {
        file
        {
            ( *chip_pkg_path + "FBG484/FBG484.eval -e  -format valence" )
        }
    }
    
}; // end of architecture demo

