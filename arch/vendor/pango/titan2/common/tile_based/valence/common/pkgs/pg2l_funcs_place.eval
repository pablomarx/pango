use pg2l_defs;
//use pg2l_IOL_SRB_inc,pg2l_IOLL_SRB_inc,pg2l_IOLR_SRB_inc;
use pg2l_apm_srb_inc,pg2l_uscm_srb_inc,pg2l_hsst_srb_inc,pg2l_hsst_hp_srb_inc,pg2l_pcie_srb_inc,pg2l_pciegen3_srb_inc;
use pg2l_iolhr_srb_inc,pg2l_iolhp_srb_inc,pg2l_drm_srb_inc,pg2l_pregmuxc_srb_inc;
use pg2l_ppll_srb_inc,pg2l_gpll_srb_inc,pg2l_iock_srb_inc;
use pg2l_ppll_330h_srb_inc,pg2l_gpll_330h_srb_inc;
use pg2l_ppll_hp_srb_inc,pg2l_gpll_hp_srb_inc,pg2l_iock_hp_srb_inc;
use pg2l_ccs_srb_inc,pg2l_adc_srb_inc;
use pg2l_iobhp_srb_inc;


package pg2l_funcs_place
{


/********************************************************************************/
/********************************************************************************/
function place_srb_tile(unsigned int tx,ty)
{
    unsigned int sx, sy;

    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    string strVar;

   //DOUBLE
    sprintf(strVar,"ntZDE_%d_%d",sx,sy);
    &wire ntRef_ntZDE[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;    

    sprintf(strVar,"ntZDN_%d_%d",sx,sy);
    &wire ntRef_ntZDN[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;    

    sprintf(strVar,"ntZDW_%d_%d",sx,sy);
    &wire ntRef_ntZDW[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZDS_%d_%d",sx,sy);
    &wire ntRef_ntZDS[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZDSE_%d_%d",sx,sy);
    &wire ntRef_ntZDSE[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;    

    sprintf(strVar,"ntZDNE_%d_%d",sx,sy);
    &wire ntRef_ntZDNE[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;    

    sprintf(strVar,"ntZDNW_%d_%d",sx,sy);
    &wire ntRef_ntZDNW[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZDSW_%d_%d",sx,sy);
    &wire ntRef_ntZDSW[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    //QUAD
    sprintf(strVar,"ntZQE_%d_%d",sx,sy);
    &wire ntRef_ntZQE[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZQN_%d_%d",sx,sy);
    &wire ntRef_ntZQN[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZQW_%d_%d",sx,sy);
    &wire ntRef_ntZQW[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZQS_%d_%d",sx,sy);
    &wire ntRef_ntZQS[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZQNE_%d_%d",sx,sy);
    &wire ntRef_ntZQNE[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZQNW_%d_%d",sx,sy);
    &wire ntRef_ntZQNW[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZQSW_%d_%d",sx,sy);
    &wire ntRef_ntZQSW[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZQSE_%d_%d",sx,sy);
    &wire ntRef_ntZQSE[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

     //SINGLE
    sprintf(strVar,"ntZSEA_%d_%d",sx,sy);
    &wire ntRef_ntZSEA[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSNA_%d_%d",sx,sy);
    &wire ntRef_ntZSNA[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSWA_%d_%d",sx,sy);
    &wire ntRef_ntZSWA[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSSA_%d_%d",sx,sy);
    &wire ntRef_ntZSSA[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSEB_%d_%d",sx,sy);
    &wire ntRef_ntZSEB[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSNB_%d_%d",sx,sy);
    &wire ntRef_ntZSNB[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSWB_%d_%d",sx,sy);
    &wire ntRef_ntZSWB[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSSB_%d_%d",sx,sy);
    &wire ntRef_ntZSSB[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    //TO CLMS&CLMA 
    sprintf(strVar,"ntA_A0_%d_%d",sx,sy);
    &wire ntRef_ntA_A0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_A1_%d_%d",sx,sy);
    &wire ntRef_ntA_A1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_A2_%d_%d",sx,sy);
    &wire ntRef_ntA_A2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_A3_%d_%d",sx,sy);
    &wire ntRef_ntA_A3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_A4_%d_%d",sx,sy);
    &wire ntRef_ntA_A4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_B0_%d_%d",sx,sy);
    &wire ntRef_ntA_B0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_B1_%d_%d",sx,sy);
    &wire ntRef_ntA_B1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntA_B2_%d_%d",sx,sy);
    &wire ntRef_ntA_B2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntA_B3_%d_%d",sx,sy);
    &wire ntRef_ntA_B3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_B4_%d_%d",sx,sy);
    &wire ntRef_ntA_B4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_C0_%d_%d",sx,sy);
    &wire ntRef_ntA_C0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_C1_%d_%d",sx,sy);
    &wire ntRef_ntA_C1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_C2_%d_%d",sx,sy);
    &wire ntRef_ntA_C2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_C3_%d_%d",sx,sy);
    &wire ntRef_ntA_C3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_C4_%d_%d",sx,sy);
    &wire ntRef_ntA_C4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_D0_%d_%d",sx,sy);
    &wire ntRef_ntA_D0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_D1_%d_%d",sx,sy);
    &wire ntRef_ntA_D1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_D2_%d_%d",sx,sy);
    &wire ntRef_ntA_D2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_D3_%d_%d",sx,sy);
    &wire ntRef_ntA_D3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_D4_%d_%d",sx,sy);
    &wire ntRef_ntA_D4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_A0_%d_%d",sx,sy);
    &wire ntRef_ntS_A0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_A1_%d_%d",sx,sy);
    &wire ntRef_ntS_A1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_A2_%d_%d",sx,sy);
    &wire ntRef_ntS_A2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_A3_%d_%d",sx,sy);
    &wire ntRef_ntS_A3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_A4_%d_%d",sx,sy);
    &wire ntRef_ntS_A4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_B0_%d_%d",sx,sy);
    &wire ntRef_ntS_B0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_B1_%d_%d",sx,sy);
    &wire ntRef_ntS_B1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_B2_%d_%d",sx,sy);
    &wire ntRef_ntS_B2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_B3_%d_%d",sx,sy);
    &wire ntRef_ntS_B3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_B4_%d_%d",sx,sy);
    &wire ntRef_ntS_B4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_C0_%d_%d",sx,sy);
    &wire ntRef_ntS_C0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_C1_%d_%d",sx,sy);
    &wire ntRef_ntS_C1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_C2_%d_%d",sx,sy);
    &wire ntRef_ntS_C2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_C3_%d_%d",sx,sy);
    &wire ntRef_ntS_C3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_C4_%d_%d",sx,sy);
    &wire ntRef_ntS_C4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_D0_%d_%d",sx,sy);
    &wire ntRef_ntS_D0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_D1_%d_%d",sx,sy);
    &wire ntRef_ntS_D1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_D2_%d_%d",sx,sy);
    &wire ntRef_ntS_D2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_D3_%d_%d",sx,sy);
    &wire ntRef_ntS_D3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_D4_%d_%d",sx,sy);
    &wire ntRef_ntS_D4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_M0_%d_%d",sx,sy);           
    &wire ntRef_ntA_M0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_M1_%d_%d",sx,sy);           
    &wire ntRef_ntA_M1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_M2_%d_%d",sx,sy);           
    &wire ntRef_ntA_M2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_M3_%d_%d",sx,sy);           
    &wire ntRef_ntA_M3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_M0_%d_%d",sx,sy);           
    &wire ntRef_ntS_M0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_M1_%d_%d",sx,sy);           
    &wire ntRef_ntS_M1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_M2_%d_%d",sx,sy);           
    &wire ntRef_ntS_M2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_M3_%d_%d",sx,sy);           
    &wire ntRef_ntS_M3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntZM_%d_%d",sx,sy);           
    &wire ntRef_ntZM[15:0] = wire *strVar[15:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntZGM_%d_%d",sx,sy);           
    &wire ntRef_ntZGM[1:0] = wire *strVar[1:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_RS_%d_%d",sx,sy);           
    &wire ntRef_ntA_RS = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_CE_%d_%d",sx,sy);           
    &wire ntRef_ntA_CE = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_RS_%d_%d",sx,sy);           
    &wire ntRef_ntS_RS = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_CE_%d_%d",sx,sy);           
    &wire ntRef_ntS_CE = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_CLK_%d_%d",sx,sy);           
    &wire ntRef_ntA_CLK = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_CLK_%d_%d",sx,sy);           
    &wire ntRef_ntS_CLK = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_A5_%d_%d",sx,sy);           
    &wire ntRef_ntA_A5 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_B5_%d_%d",sx,sy);           
    &wire ntRef_ntA_B5 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_C5_%d_%d",sx,sy);           
    &wire ntRef_ntA_C5 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_D5_%d_%d",sx,sy);           
    &wire ntRef_ntA_D5 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_A5_%d_%d",sx,sy);           
    &wire ntRef_ntS_A5 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_B5_%d_%d",sx,sy);           
    &wire ntRef_ntS_B5 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntS_C5_%d_%d",sx,sy);           
    &wire ntRef_ntS_C5 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntS_D5_%d_%d",sx,sy);           
    &wire ntRef_ntS_D5 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntA_AD_%d_%d",sx,sy);           
    &wire ntRef_ntA_AD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_BD_%d_%d",sx,sy);           
    &wire ntRef_ntA_BD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_CD_%d_%d",sx,sy);           
    &wire ntRef_ntA_CD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_DD_%d_%d",sx,sy);           
    &wire ntRef_ntA_DD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_AD_%d_%d",sx,sy);           
    &wire ntRef_ntS_AD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_BD_%d_%d",sx,sy);           
    &wire ntRef_ntS_BD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntS_CD_%d_%d",sx,sy);           
    &wire ntRef_ntS_CD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntS_DD_%d_%d",sx,sy);           
    &wire ntRef_ntS_DD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntS_WE_%d_%d",sx,sy);           
    &wire ntRef_ntS_WE = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);           
    &wire ntRef_ntTIEHI = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    //SW UNUSED
    sprintf(strVar, "SRB_TILE_%d_%d", sx, sy);
       device SRB_TILE *strVar
           port map (
                     A_A0  => ntRef_ntA_A0,
                     A_A1  => ntRef_ntA_A1,
                     A_A2  => ntRef_ntA_A2,
                     A_A3  => ntRef_ntA_A3,
                     A_A4  => ntRef_ntA_A4,
                     A_B0  => ntRef_ntA_B0,
                     A_B1  => ntRef_ntA_B1,
                     A_B2  => ntRef_ntA_B2,
                     A_B3  => ntRef_ntA_B3,
                     A_B4  => ntRef_ntA_B4,
                     A_C0  => ntRef_ntA_C0,
                     A_C1  => ntRef_ntA_C1,
                     A_C2  => ntRef_ntA_C2,
                     A_C3  => ntRef_ntA_C3,
                     A_C4  => ntRef_ntA_C4,
                     A_D0  => ntRef_ntA_D0,
                     A_D1  => ntRef_ntA_D1,
                     A_D2  => ntRef_ntA_D2,
                     A_D3  => ntRef_ntA_D3,
                     A_D4  => ntRef_ntA_D4,
                     S_A0  => ntRef_ntS_A0,
                     S_A1  => ntRef_ntS_A1,
                     S_A2  => ntRef_ntS_A2,
                     S_A3  => ntRef_ntS_A3,
                     S_A4  => ntRef_ntS_A4,
                     S_B0  => ntRef_ntS_B0,
                     S_B1  => ntRef_ntS_B1,
                     S_B2  => ntRef_ntS_B2,
                     S_B3  => ntRef_ntS_B3,
                     S_B4  => ntRef_ntS_B4,
                     S_C0  => ntRef_ntS_C0,
                     S_C1  => ntRef_ntS_C1,
                     S_C2  => ntRef_ntS_C2,
                     S_C3  => ntRef_ntS_C3,
                     S_C4  => ntRef_ntS_C4,
                     S_D0  => ntRef_ntS_D0,
                     S_D1  => ntRef_ntS_D1,
                     S_D2  => ntRef_ntS_D2,
                     S_D3  => ntRef_ntS_D3,
                     S_D4  => ntRef_ntS_D4,
                     A_RS  => ntRef_ntA_RS,
                     A_CE  => ntRef_ntA_CE,
                     S_RS  => ntRef_ntS_RS,
                     S_CE  => ntRef_ntS_CE,
                     A_CLK => ntRef_ntA_CLK,
                     S_CLK => ntRef_ntS_CLK,
                     A_A5  => ntRef_ntA_A5,
                     A_B5  => ntRef_ntA_B5,
                     A_C5  => ntRef_ntA_C5,
                     A_D5  => ntRef_ntA_D5,
                     S_A5  => ntRef_ntS_A5,
                     S_B5  => ntRef_ntS_B5,
                     S_C5  => ntRef_ntS_C5,
                     S_D5  => ntRef_ntS_D5,
                     S_AD  => ntRef_ntS_AD,
                     S_BD  => ntRef_ntS_BD,
                     S_CD  => ntRef_ntS_CD,
                     S_DD  => ntRef_ntS_DD,
                     S_WE  => ntRef_ntS_WE,
                     ZM    => ntRef_ntZM,
                     ZGM   => ntRef_ntZGM,
                     A_M0  => ntRef_ntA_M0,
                     A_M1  => ntRef_ntA_M1,
                     A_M2  => ntRef_ntA_M2,
                     A_M3  => ntRef_ntA_M3,
                     S_M0  => ntRef_ntS_M0,
                     S_M1  => ntRef_ntS_M1,
                     S_M2  => ntRef_ntS_M2,
                     S_M3  => ntRef_ntS_M3,

                     ZSSA   => ntRef_ntZSSA,
                     ZSNA   => ntRef_ntZSNA,
                     ZSEA   => ntRef_ntZSEA,
                     ZSWA   => ntRef_ntZSWA,
                     ZSSB   => ntRef_ntZSSB,
                     ZSNB   => ntRef_ntZSNB,
                     ZSEB   => ntRef_ntZSEB,
                     ZSWB   => ntRef_ntZSWB,

                     ZDS   => ntRef_ntZDS,
                     ZDN   => ntRef_ntZDN,
                     ZDE   => ntRef_ntZDE,
                     ZDW   => ntRef_ntZDW,
                     ZDSE  => ntRef_ntZDSE,
                     ZDNW  => ntRef_ntZDNW,
                     ZDNE  => ntRef_ntZDNE,
                     ZDSW  => ntRef_ntZDSW,

                     ZQS   => ntRef_ntZQS,
                     ZQN   => ntRef_ntZQN,
                     ZQE   => ntRef_ntZQE,
                     ZQW   => ntRef_ntZQW, 
                     ZQSE  => ntRef_ntZQSE,
                     ZQNW  => ntRef_ntZQNW,
                     ZQNE  => ntRef_ntZQNE,
                     ZQSW  => ntRef_ntZQSW,
                     TIEHI => ntRef_ntTIEHI                 
                   )
        @([sx,sy]);
}//end of function place_srb_tile
/********************************************************************************/
/********************************************************************************/
// when flag = 0,place_clma_tile
// when flag = 1,place_clms_tile
function place_clm_tile(unsigned int tx,ty,flag)
{   
    unsigned int sx, sy;

    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    string strVar;
    //LOGIC OUTPUT
   //DOUBLE
    sprintf(strVar,"ntZDE_%d_%d",sx,sy);
    &wire ntRef_ntZDE[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;    

    sprintf(strVar,"ntZDN_%d_%d",sx,sy);
    &wire ntRef_ntZDN[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;    

    sprintf(strVar,"ntZDW_%d_%d",sx,sy);
    &wire ntRef_ntZDW[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZDS_%d_%d",sx,sy);
    &wire ntRef_ntZDS[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZDSE_%d_%d",sx,sy);
    &wire ntRef_ntZDSE[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;    

    sprintf(strVar,"ntZDNE_%d_%d",sx,sy);
    &wire ntRef_ntZDNE[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;    

    sprintf(strVar,"ntZDNW_%d_%d",sx,sy);
    &wire ntRef_ntZDNW[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZDSW_%d_%d",sx,sy);
    &wire ntRef_ntZDSW[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    //QUAD
    sprintf(strVar,"ntZQE_%d_%d",sx,sy);
    &wire ntRef_ntZQE[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZQN_%d_%d",sx,sy);
    &wire ntRef_ntZQN[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZQW_%d_%d",sx,sy);
    &wire ntRef_ntZQW[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZQS_%d_%d",sx,sy);
    &wire ntRef_ntZQS[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZQNE_%d_%d",sx,sy);
    &wire ntRef_ntZQNE[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZQNW_%d_%d",sx,sy);
    &wire ntRef_ntZQNW[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZQSW_%d_%d",sx,sy);
    &wire ntRef_ntZQSW[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZQSE_%d_%d",sx,sy);
    &wire ntRef_ntZQSE[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

     //SINGLE
    sprintf(strVar,"ntZSEA_%d_%d",sx,sy);
    &wire ntRef_ntZSEA[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSNA_%d_%d",sx,sy);
    &wire ntRef_ntZSNA[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSWA_%d_%d",sx,sy);
    &wire ntRef_ntZSWA[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSSA_%d_%d",sx,sy);
    &wire ntRef_ntZSSA[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSEB_%d_%d",sx,sy);
    &wire ntRef_ntZSEB[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSNB_%d_%d",sx,sy);
    &wire ntRef_ntZSNB[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSWB_%d_%d",sx,sy);
    &wire ntRef_ntZSWB[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSSB_%d_%d",sx,sy);
    &wire ntRef_ntZSSB[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZM_%d_%d",sx,sy);           
    &wire ntRef_ntZM[15:0] = wire *strVar[15:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntZGM_%d_%d",sx,sy);           
    &wire ntRef_ntZGM[1:0] = wire *strVar[1:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_CECO_%d_%d",sx,sy);
    &wire ntRef_ntA_CECO = wire *strVar;

    sprintf(strVar,"ntS_CECO_%d_%d",sx,sy);
    &wire ntRef_ntS_CECO = wire *strVar;

    sprintf(strVar,"ntA_COUT_%d_%d",sx,sy);
    &wire ntRef_ntA_COUT = wire *strVar;

    sprintf(strVar,"ntS_COUT_%d_%d",sx,sy);
    &wire ntRef_ntS_COUT = wire *strVar;

    sprintf(strVar,"ntA_RSCO_%d_%d",sx,sy);
    &wire ntRef_ntA_RSCO = wire *strVar;

    sprintf(strVar,"ntS_RSCO_%d_%d",sx,sy);
    &wire ntRef_ntS_RSCO = wire *strVar;

    sprintf(strVar,"ntA_SRCO_%d_%d",sx,sy);
    &wire ntRef_ntA_SRCO = wire *strVar;

    sprintf(strVar,"ntS_SRCO_%d_%d",sx,sy);
    &wire ntRef_ntS_SRCO = wire *strVar;

    sprintf(strVar,"ntTIEH_%d_%d",sx,sy);
    &wire ntRef_ntTIEH = wire *strVar;

    sprintf(strVar,"ntTIEL_%d_%d",sx,sy);
    &wire ntRef_ntTIEL = wire *strVar;

    sprintf(strVar,"ntMASK_DATA_COUT_%d_%d",sx,sy);
    &wire ntRef_ntMASK_DATA_COUT[1:0] = wire *strVar[1:0];

    if(flag ==0)
    {
      sprintf(strVar, "CLMA_TILE_%d_%d", sx, sy);
      device CLMA_TILE *strVar
         port map (
                    ZM    => ntRef_ntZM,
                    ZGM   => ntRef_ntZGM,
                    ZSSA   => ntRef_ntZSSA,
                    ZSNA   => ntRef_ntZSNA,
                    ZSEA   => ntRef_ntZSEA,
                    ZSWA   => ntRef_ntZSWA,
                    ZSSB   => ntRef_ntZSSB,
                    ZSNB   => ntRef_ntZSNB,
                    ZSEB   => ntRef_ntZSEB,
                    ZSWB   => ntRef_ntZSWB,
                    ZDS   => ntRef_ntZDS,
                    ZDN   => ntRef_ntZDN,
                    ZDE   => ntRef_ntZDE,
                    ZDW   => ntRef_ntZDW,
                    ZDSE  => ntRef_ntZDSE,
                    ZDNW  => ntRef_ntZDNW,
                    ZDNE  => ntRef_ntZDNE,
                    ZDSW  => ntRef_ntZDSW,
                    ZQS   => ntRef_ntZQS,
                    ZQN   => ntRef_ntZQN,
                    ZQE   => ntRef_ntZQE,
                    ZQW   => ntRef_ntZQW, 
                    ZQSE  => ntRef_ntZQSE,
                    ZQNW  => ntRef_ntZQNW,
                    ZQNE  => ntRef_ntZQNE,
                    ZQSW  => ntRef_ntZQSW,

                    A_CECO => ntRef_ntA_CECO,
                    A_COUT => ntRef_ntA_COUT,
                    A_RSCO => ntRef_ntA_RSCO,
                    A_SRCO => ntRef_ntA_SRCO,
                    S_CECO => ntRef_ntS_CECO,
                    S_COUT => ntRef_ntS_COUT,
                    S_RSCO => ntRef_ntS_RSCO,
                    S_SRCO => ntRef_ntS_SRCO,
                    TIEH   => ntRef_ntTIEH,
                    TIEL   => ntRef_ntTIEL
                   )
      @([sx,sy]);
    }  
    else
    {
      sprintf(strVar, "CLMS_TILE_%d_%d", sx, sy);
      device CLMS_TILE *strVar
         port map (
                    ZM    => ntRef_ntZM,
                    ZGM   => ntRef_ntZGM,
                    ZSSA   => ntRef_ntZSSA,
                    ZSNA   => ntRef_ntZSNA,
                    ZSEA   => ntRef_ntZSEA,
                    ZSWA   => ntRef_ntZSWA,
                    ZSSB   => ntRef_ntZSSB,
                    ZSNB   => ntRef_ntZSNB,
                    ZSEB   => ntRef_ntZSEB,
                    ZSWB   => ntRef_ntZSWB,
                    ZDS   => ntRef_ntZDS,
                    ZDN   => ntRef_ntZDN,
                    ZDE   => ntRef_ntZDE,
                    ZDW   => ntRef_ntZDW,
                    ZDSE  => ntRef_ntZDSE,
                    ZDNW  => ntRef_ntZDNW,
                    ZDNE  => ntRef_ntZDNE,
                    ZDSW  => ntRef_ntZDSW,
                    ZQS   => ntRef_ntZQS,
                    ZQN   => ntRef_ntZQN,
                    ZQE   => ntRef_ntZQE,
                    ZQW   => ntRef_ntZQW, 
                    ZQSE  => ntRef_ntZQSE,
                    ZQNW  => ntRef_ntZQNW,
                    ZQNE  => ntRef_ntZQNE,
                    ZQSW  => ntRef_ntZQSW,

                    A_CECO => ntRef_ntA_CECO,
                    A_COUT => ntRef_ntA_COUT,
                    A_RSCO => ntRef_ntA_RSCO,
                    A_SRCO => ntRef_ntA_SRCO,
                    S_CECO => ntRef_ntS_CECO,
                    S_COUT => ntRef_ntS_COUT,
                    S_RSCO => ntRef_ntS_RSCO,
                    S_SRCO => ntRef_ntS_SRCO,
                    TIEH   => ntRef_ntTIEH,
                    TIEL   => ntRef_ntTIEL,
                    MASK_DATA_COUT  => ntRef_ntMASK_DATA_COUT
                   )
      @([sx,sy]);
    }      
}// end of function place_clm_tile
/********************************************************************************
********************************************************************************/
function place_apm_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;

    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;

    string strVar;

    sprintf(strVar,"ntXO_%d_%d",sx,sy);
    &wire ntRef_ntXO[29:0] = wire *strVar[29:0]        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntXBO_%d_%d",sx,sy);
    &wire ntRef_ntXBO[24:0] = wire *strVar[24:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPO_%d_%d",sx,sy);
    &wire ntRef_ntPO[47:0] = wire *strVar[47:0]        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntP_0_%d_%d",sx,sy);
    &wire ntRef_ntP_0[47:0] = wire *strVar[47:0]         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntP_1_%d_%d",sx,sy);
    &wire ntRef_ntP_1[47:0] = wire *strVar[47:0]         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPCO_%d_%d",sx,sy);
    &wire ntRef_ntPCO = wire *strVar                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO0_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO0_0 = wire *strVar                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO1_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO1_0 = wire *strVar                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO0_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO0_1 = wire *strVar                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO1_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO1_1 = wire *strVar                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;


    sprintf(strVar,"ntTIELO_0_%d_%d",sx,sy);
    &wire ntRef_ntTIELO_0 = wire *strVar;

    sprintf(strVar,"ntTIELO_1_%d_%d",sx,sy);
    &wire ntRef_ntTIELO_1 = wire *strVar;

    sprintf(strVar,"ntTIELO_2_%d_%d",sx,sy);
    &wire ntRef_ntTIELO_2 = wire *strVar;

    sprintf(strVar,"ntTIELO_3_%d_%d",sx,sy);
    &wire ntRef_ntTIELO_3 = wire *strVar;

    sprintf(strVar, "APM_TILE_%d_%d", sx, sy);

    device APM_TILE *strVar
         port map (
                   XO       =>  ntRef_ntXO,
                   PO       =>  ntRef_ntPO,
                   P_0      =>  ntRef_ntP_0,
                   XBO      =>  ntRef_ntXBO,
                   P_1      =>  ntRef_ntP_1,
                   PCO      =>  ntRef_ntPCO,
                   TEST_SO0_0 =>  ntRef_ntTEST_SO0_0,
                   TEST_SO1_0 =>  ntRef_ntTEST_SO1_0,
                   TEST_SO0_1 =>  ntRef_ntTEST_SO0_1,
                   TEST_SO1_1 =>  ntRef_ntTEST_SO1_1,
                   TIELO_0    =>  ntRef_ntTIELO_0,
                   TIELO_1    =>  ntRef_ntTIELO_1,
                   TIELO_2    =>  ntRef_ntTIELO_2,
                   TIELO_3    =>  ntRef_ntTIELO_3

                 )
        @([sx,sy]);

      STRUCT inc_spec_apm incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_apm_srb_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;

          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }

          if(attribute_IO =="I")
          { 

             connect(<pin *pin_logic_device of <device APM_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-3,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx-3,sy_SRB]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE @ [sx-3,sy_SRB]>>
                                                                        : <wire *pin_logic_device of <device APM_TILE @[sx,sy]>>); 
          }
      }         


}// end of function place_apm_tile

/********************************************************************************/
/********************************************************************************/
function place_drm_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;

    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;

    string strVar;

    //LOGIC OUTPUT
    sprintf(strVar,"ntQA0_%d_%d",sx,sy);
    &wire ntRef_ntQA0[17:0] = wire *strVar[17:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntQB0_%d_%d",sx,sy);
    &wire ntRef_ntQB0[17:0] = wire *strVar[17:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntQA1_%d_%d",sx,sy);
    &wire ntRef_ntQA1[17:0] = wire *strVar[17:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntQB1_%d_%d",sx,sy);
    &wire ntRef_ntQB1[17:0] = wire *strVar[17:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntEMPTY_%d_%d",sx,sy);
    &wire ntRef_ntEMPTY[1:0]  = wire *strVar[1:0]               /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;   

    sprintf(strVar,"ntFULL_%d_%d",sx,sy);
    &wire ntRef_ntFULL[1:0]  = wire *strVar[1:0]               /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;  

    sprintf(strVar,"ntALMOST_EMPTY_%d_%d",sx,sy);
    &wire ntRef_ntALMOST_EMPTY[1:0] = wire *strVar[1:0]               /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;   

    sprintf(strVar,"ntALMOST_FULL_%d_%d",sx,sy);
    &wire ntRef_ntALMOST_FULL[1:0]  = wire *strVar[1:0]               /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;  

    sprintf(strVar,"ntX1CASQO_A_%d_%d",sx,sy);
    &wire ntRef_ntX1CASQO_A = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;   

    sprintf(strVar,"ntX1CASQO_B_%d_%d",sx,sy);
    &wire ntRef_ntX1CASQO_B = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;  

    sprintf(strVar,"ntECC_SBITERR_%d_%d",sx,sy);
    &wire ntRef_ntECC_SBITERR = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;   

    sprintf(strVar,"ntECC_DBITERR_%d_%d",sx,sy);
    &wire ntRef_ntECC_DBITERR = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntECC_PARITY_%d_%d",sx,sy);
    &wire ntRef_ntECC_PARITY[7:0] = wire *strVar[7:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;  

    sprintf(strVar,"ntECC_RDADDR_%d_%d",sx,sy);
    &wire ntRef_ntECC_RDADDR[8:0] = wire *strVar[8:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;  

    sprintf(strVar,"ntTEST_SO_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO = wire *strVar;  

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar, "DRM_TILE_%d_%d", sx, sy);

    device DRM_TILE *strVar
         port map (
                    X1CASQO_A           => ntRef_ntX1CASQO_A,
                    X1CASQO_B           => ntRef_ntX1CASQO_B,
                    QA0                 => ntRef_ntQA0,
                    QB0                 => ntRef_ntQB0,
                    QA1                 => ntRef_ntQA1,
                    QB1                 => ntRef_ntQB1,
                    EMPTY               => ntRef_ntEMPTY,
                    FULL                => ntRef_ntFULL,
                    ALMOST_EMPTY        => ntRef_ntALMOST_EMPTY,
                    ALMOST_FULL         => ntRef_ntALMOST_FULL,
                    ECC_SBITERR         => ntRef_ntECC_SBITERR,
                    ECC_DBITERR         => ntRef_ntECC_DBITERR,
                    ECC_PARITY          => ntRef_ntECC_PARITY,
                    ECC_RDADDR          => ntRef_ntECC_RDADDR,
                    TEST_SO             => ntRef_ntTEST_SO,
                    TIEHI               => ntRef_ntTIEHI
                  )
        @([sx,sy]);

      STRUCT inc_spec_drm incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_drm_srb_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;

          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }

          if(attribute_IO =="I")
          { 

             connect(<pin *pin_logic_device of <device DRM_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-3,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx-3,sy_SRB]>> =>  (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE @ [sx-3,sy_SRB]>>
                                                                        : <wire *pin_logic_device of <device DRM_TILE @[sx,sy]>>); 
          }
      }         

}// end of function place_drm_tile
/********************************************************************************
********************************************************************************/
function place_pll_tile(unsigned int tx,ty,flag)
{   

   unsigned int sx, sy;
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    string strVar;

    sprintf(strVar,"ntCLKOUT_MRMUX_P_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT_MRMUX_P[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT_MRMUX_N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT_MRMUX_N[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT0_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT0N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT0N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT1_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT1N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT1N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT2_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT2 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT2N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT2N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT3_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT3 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT3N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT3N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT4_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT4 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT4N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT4N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT5_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT5 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT6_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT6 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTPHY_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTPHY = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTPHYN_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTPHYN = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKFBOUT_%d_%d",sx,sy);
    &wire ntRef_ntCLKFBOUT = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKFBOUTN_%d_%d",sx,sy);
    &wire ntRef_ntCLKFBOUTN = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPLL_LOCK_%d_%d",sx,sy);
    &wire ntRef_ntPLL_LOCK = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntLOCKOUT_CAS_%d_%d",sx,sy);
    &wire ntRef_ntLOCKOUT_CAS = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPRDATA_%d_%d",sx,sy);
    &wire ntRef_ntPRDATA[15:0] = wire *strVar[15:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPREADY_%d_%d",sx,sy);
    &wire ntRef_ntPREADY = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntLDO_ANA_TEST_MUX_%d_%d",sx,sy);
    &wire ntRef_ntLDO_ANA_TEST_MUX = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntLDO_DIG_TEST_MUX_%d_%d",sx,sy);
    &wire ntRef_ntLDO_DIG_TEST_MUX = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPPLL_VCTRL_TEST_%d_%d",sx,sy);
    &wire ntRef_ntPPLL_VCTRL_TEST = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGPLL_VCTRL_TEST_%d_%d",sx,sy);
    &wire ntRef_ntGPLL_VCTRL_TEST = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPLL_LS_TEST_%d_%d",sx,sy);
    &wire ntRef_ntPLL_LS_TEST = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPFDTOP_CLK_TEST_%d_%d",sx,sy);
    &wire ntRef_ntPFDTOP_CLK_TEST = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_U_P_%d_%d",sx,sy);
    &wire ntRef_ntCLK_U_P[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_U_N_%d_%d",sx,sy);
    &wire ntRef_ntCLK_U_N[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_D_P_%d_%d",sx,sy);
    &wire ntRef_ntCLK_D_P[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_D_N_%d_%d",sx,sy);
    &wire ntRef_ntCLK_D_N[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEL_D_%d_%d",sx,sy);
    &wire ntRef_ntSEL_D[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEL_U_%d_%d",sx,sy);
    &wire ntRef_ntSEL_U[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_DQSI_DEL0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DQSI_DEL0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_DQSIB_DEL0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DQSIB_DEL0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_W0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_W0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_W_DEL0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_W_DEL0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDGTS0_%d_%d",sx,sy);
    &wire ntRef_ntDGTS0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDLL_90CODE_GRAY0_%d_%d",sx,sy);
    &wire ntRef_ntDLL_90CODE_GRAY0[7:0] = wire *strVar[7:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_DRIFT0_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DRIFT0[1:0] = wire *strVar[1:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_DRIFT_STATUS0_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DRIFT_STATUS0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDRIFT_DETECT_ERR0_%d_%d",sx,sy);
    &wire ntRef_ntDRIFT_DETECT_ERR0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIFIFO_RADDR0_%d_%d",sx,sy);
    &wire ntRef_ntIFIFO_RADDR0[2:0] = wire *strVar[2:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIFIFO_WADDR0_%d_%d",sx,sy);
    &wire ntRef_ntIFIFO_WADDR0[2:0] = wire *strVar[2:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDLL_LOCK0_%d_%d",sx,sy);
    &wire ntRef_ntDLL_LOCK0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntREAD_VALID0_%d_%d",sx,sy);
    &wire ntRef_ntREAD_VALID0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_SAMPLE0_%d_%d",sx,sy);
    &wire ntRef_ntDQS_SAMPLE0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM0_%d_%d",sx,sy);
    &wire ntRef_ntTERM0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM_FB0_%d_%d",sx,sy);
    &wire ntRef_ntTERM_FB0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTFB0_%d_%d",sx,sy);
    &wire ntRef_ntTFB0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTO0_%d_%d",sx,sy);
    &wire ntRef_ntTO0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM1_%d_%d",sx,sy);
    &wire ntRef_ntTERM1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM_FB1_%d_%d",sx,sy);
    &wire ntRef_ntTERM_FB1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTFB1_%d_%d",sx,sy);
    &wire ntRef_ntTFB1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTO1_%d_%d",sx,sy);
    &wire ntRef_ntTO1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_DQSI_DEL1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DQSI_DEL1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_DQSIB_DEL1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DQSIB_DEL1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_W1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_W1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_W_DEL1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_W_DEL1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDGTS1_%d_%d",sx,sy);
    &wire ntRef_ntDGTS1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDLL_90CODE_GRAY1_%d_%d",sx,sy);
    &wire ntRef_ntDLL_90CODE_GRAY1[7:0] = wire *strVar[7:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_DRIFT1_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DRIFT1[1:0] = wire *strVar[1:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_DRIFT_STATUS1_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DRIFT_STATUS1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDRIFT_DETECT_ERR1_%d_%d",sx,sy);
    &wire ntRef_ntDRIFT_DETECT_ERR1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIFIFO_RADDR1_%d_%d",sx,sy);
    &wire ntRef_ntIFIFO_RADDR1[2:0] = wire *strVar[2:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIFIFO_WADDR1_%d_%d",sx,sy);
    &wire ntRef_ntIFIFO_WADDR1[2:0] = wire *strVar[2:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDLL_LOCK1_%d_%d",sx,sy);
    &wire ntRef_ntDLL_LOCK1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntREAD_VALID1_%d_%d",sx,sy);
    &wire ntRef_ntREAD_VALID1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_SAMPLE1_%d_%d",sx,sy);
    &wire ntRef_ntDQS_SAMPLE1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM2_%d_%d",sx,sy);
    &wire ntRef_ntTERM2 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM_FB2_%d_%d",sx,sy);
    &wire ntRef_ntTERM_FB2 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTFB2_%d_%d",sx,sy);
    &wire ntRef_ntTFB2 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTO2_%d_%d",sx,sy);
    &wire ntRef_ntTO2 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM3_%d_%d",sx,sy);
    &wire ntRef_ntTERM3 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM_FB3_%d_%d",sx,sy);
    &wire ntRef_ntTERM_FB3 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTFB3_%d_%d",sx,sy);
    &wire ntRef_ntTFB3 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTO3_%d_%d",sx,sy);
    &wire ntRef_ntTO3 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDPS_DONE_%d_%d",sx,sy);
    &wire ntRef_ntDPS_DONE = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPHY_CLK0_2X_B_P_%d_%d",sx,sy);
    &wire ntRef_ntPHY_CLK0_2X_B_P = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPHY_CLK0_2X_B_N_%d_%d",sx,sy);
    &wire ntRef_ntPHY_CLK0_2X_B_N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSYSCLK0_B_P_%d_%d",sx,sy);
    &wire ntRef_ntSYSCLK0_B_P = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSYSCLK0_B_N_%d_%d",sx,sy);
    &wire ntRef_ntSYSCLK0_B_N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPHY_CLK1_2X_B_P_%d_%d",sx,sy);
    &wire ntRef_ntPHY_CLK1_2X_B_P = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPHY_CLK1_2X_B_N_%d_%d",sx,sy);
    &wire ntRef_ntPHY_CLK1_2X_B_N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSYSCLK1_B_P_%d_%d",sx,sy);
    &wire ntRef_ntSYSCLK1_B_P = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSYSCLK1_B_N_%d_%d",sx,sy);
    &wire ntRef_ntSYSCLK1_B_N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTD_D_P_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTD_D_P[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTD_D_N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTD_D_N[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTD_U_P_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTD_U_P[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTD_U_N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTD_U_N[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTU_D_P_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTU_D_P[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTU_D_N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTU_D_N[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTU_U_P_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTU_U_P[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTU_U_N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTU_U_N[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDCTEST_OUT_%d_%d",sx,sy);
    &wire ntRef_ntDCTEST_OUT = wire *strVar               /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCPD_LOCK_%d_%d",sx,sy);
    &wire ntRef_ntCPD_LOCK = wire *strVar               /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCPD_UP_DNB_%d_%d",sx,sy);
    &wire ntRef_ntCPD_UP_DNB = wire *strVar               /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSYSCLK_P_%d_%d",sx,sy);
    &wire ntRef_ntSYSCLK_P = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSYSCLK_N_%d_%d",sx,sy);
    &wire ntRef_ntSYSCLK_N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntVCCREG0_%d_%d",sx,sy);
    &wire ntRef_ntVCCREG0 = wire *strVar;

    sprintf(strVar,"ntVCCREG1_%d_%d",sx,sy);
    &wire ntRef_ntVCCREG1 = wire *strVar;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar,"ntTIELO_%d_%d",sx,sy);
    &wire ntRef_ntTIELO = wire *strVar;

    if(flag==0)
    {
      sprintf(strVar, "GPLL_TILE_%d_%d", sx, sy);
      device GPLL_TILE *strVar
           port map (
                       CLKOUT0            => ntRef_ntCLKOUT0,
                       CLKOUT0N           => ntRef_ntCLKOUT0N,
                       CLKOUT1            => ntRef_ntCLKOUT1,
                       CLKOUT1N           => ntRef_ntCLKOUT1N,
                       CLKOUT2            => ntRef_ntCLKOUT2,
                       CLKOUT2N           => ntRef_ntCLKOUT2N,
                       CLKOUT3            => ntRef_ntCLKOUT3,
                       CLKOUT3N           => ntRef_ntCLKOUT3N,
                       CLKOUT4            => ntRef_ntCLKOUT4,
                       CLKOUT5            => ntRef_ntCLKOUT5,
                       CLKOUT6            => ntRef_ntCLKOUT6,
                       CLKFBOUT           => ntRef_ntCLKFBOUT,
                       CLKFBOUTN          => ntRef_ntCLKFBOUTN,
                       PLL_LOCK           => ntRef_ntPLL_LOCK,
                       LOCKOUT_CAS        => ntRef_ntLOCKOUT_CAS,
                       DPS_DONE           => ntRef_ntDPS_DONE,
                       PRDATA             => ntRef_ntPRDATA,
                       PREADY             => ntRef_ntPREADY,
                       LDO_ANA_TEST_MUX   => ntRef_ntLDO_ANA_TEST_MUX,
                       LDO_DIG_TEST_MUX   => ntRef_ntLDO_DIG_TEST_MUX,
                       GPLL_VCTRL_TEST    => ntRef_ntGPLL_VCTRL_TEST,
                       PLL_LS_TEST        => ntRef_ntPLL_LS_TEST,
                       PFDTOP_CLK_TEST    => ntRef_ntPFDTOP_CLK_TEST,
                       TEST_SO            => ntRef_ntTEST_SO,
                       CLK_U_P            => ntRef_ntCLK_U_P,
                       CLK_U_N            => ntRef_ntCLK_U_N,
                       SEL_D              => ntRef_ntSEL_D,
                       SEL_U              => ntRef_ntSEL_U,
                       CLK_DQSI_DEL0      => ntRef_ntCLK_DQSI_DEL0,
                       CLK_DQSIB_DEL0     => ntRef_ntCLK_DQSIB_DEL0,
                       CLK_W0             => ntRef_ntCLK_W0,
                       CLK_W_DEL0         => ntRef_ntCLK_W_DEL0,
                       DGTS0              => ntRef_ntDGTS0,
                       DLL_90CODE_GRAY0   => ntRef_ntDLL_90CODE_GRAY0,
                       DQS_DRIFT0         => ntRef_ntDQS_DRIFT0,
                       DQS_DRIFT_STATUS0  => ntRef_ntDQS_DRIFT_STATUS0,
                       DRIFT_DETECT_ERR0  => ntRef_ntDRIFT_DETECT_ERR0,
                       IFIFO_RADDR0       => ntRef_ntIFIFO_RADDR0,
                       IFIFO_WADDR0       => ntRef_ntIFIFO_WADDR0,
                       DLL_LOCK0          => ntRef_ntDLL_LOCK0,
                       READ_VALID0        => ntRef_ntREAD_VALID0,
                       DQS_SAMPLE0        => ntRef_ntDQS_SAMPLE0,
                       TERM0              => ntRef_ntTERM0,
                       TERM_FB0           => ntRef_ntTERM_FB0,
                       TFB0               => ntRef_ntTFB0,
                       TO0                => ntRef_ntTO0,
                       TERM1              => ntRef_ntTERM1,
                       TERM_FB1           => ntRef_ntTERM_FB1,
                       TFB1               => ntRef_ntTFB1,
                       TO1                => ntRef_ntTO1,                
                       CLK_DQSI_DEL1      => ntRef_ntCLK_DQSI_DEL1,
                       CLK_DQSIB_DEL1     => ntRef_ntCLK_DQSIB_DEL1,
                       CLK_W1             => ntRef_ntCLK_W1,
                       CLK_W_DEL1         => ntRef_ntCLK_W_DEL1,
                       DGTS1              => ntRef_ntDGTS1,
                       DLL_90CODE_GRAY1   => ntRef_ntDLL_90CODE_GRAY1,
                       DQS_DRIFT1         => ntRef_ntDQS_DRIFT1,
                       DQS_DRIFT_STATUS1  => ntRef_ntDQS_DRIFT_STATUS1,
                       DRIFT_DETECT_ERR1  => ntRef_ntDRIFT_DETECT_ERR1,
                       IFIFO_RADDR1       => ntRef_ntIFIFO_RADDR1,
                       IFIFO_WADDR1       => ntRef_ntIFIFO_WADDR1,
                       DLL_LOCK1          => ntRef_ntDLL_LOCK1,
                       READ_VALID1        => ntRef_ntREAD_VALID1,
                       DQS_SAMPLE1        => ntRef_ntDQS_SAMPLE1,
                       TERM2              => ntRef_ntTERM2,
                       TERM_FB2           => ntRef_ntTERM_FB2,
                       TFB2               => ntRef_ntTFB2,
                       TO2                => ntRef_ntTO2,
                       TERM3              => ntRef_ntTERM3,
                       TERM_FB3           => ntRef_ntTERM_FB3,
                       TFB3               => ntRef_ntTFB3,
                       TO3                => ntRef_ntTO3,
                       PHY_CLK0_2X_B_P    => ntRef_ntPHY_CLK0_2X_B_P,
                       PHY_CLK0_2X_B_N    => ntRef_ntPHY_CLK0_2X_B_N,
                       SYSCLK0_B_P        => ntRef_ntSYSCLK0_B_P,
                       SYSCLK0_B_N        => ntRef_ntSYSCLK0_B_N,
                       PHY_CLK1_2X_B_P    => ntRef_ntPHY_CLK1_2X_B_P,
                       PHY_CLK1_2X_B_N    => ntRef_ntPHY_CLK1_2X_B_N,
                       SYSCLK1_B_P        => ntRef_ntSYSCLK1_B_P,
                       SYSCLK1_B_N        => ntRef_ntSYSCLK1_B_N,
                       VCCREG0            => ntRef_ntVCCREG0,
                       VCCREG1            => ntRef_ntVCCREG1,
                       DCTEST_OUT         => ntRef_ntDCTEST_OUT,
                       CPD_LOCK           => ntRef_ntCPD_LOCK,
                       CPD_UP_DNB         => ntRef_ntCPD_UP_DNB,

                       TIEHI              => ntRef_ntTIEHI,
                       TIELO              => ntRef_ntTIELO  
                    )
          @([sx,sy]);

      STRUCT inc_spec_gpll incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;
      int sx_srb = (tx==1) ? sx+NUM_GRID_X : sx-NUM_GRID_X;

      foreach incVar(inc_gpll_srb_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device GPLL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_SRB]>> => (pin_logic_device=="TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx_srb,sy_SRB]>>
                                                                                                      : <wire *pin_logic_device of <device GPLL_TILE @[sx,sy]>>); 
          }
      } 

    }
    else
    {
      sprintf(strVar, "PPLL_TILE_%d_%d", sx, sy);
      device PPLL_TILE *strVar
           port map (
                       CLKOUT_MRMUX_P     => ntRef_ntCLKOUT_MRMUX_P,
                       CLKOUT_MRMUX_N     => ntRef_ntCLKOUT_MRMUX_N,

                       CLKOUT0            => ntRef_ntCLKOUT0,
                       CLKOUT0N           => ntRef_ntCLKOUT0N,
                       CLKOUT1            => ntRef_ntCLKOUT1,
                       CLKOUT1N           => ntRef_ntCLKOUT1N,
                       CLKOUT2            => ntRef_ntCLKOUT2,
                       CLKOUT2N           => ntRef_ntCLKOUT2N,
                       CLKOUT3            => ntRef_ntCLKOUT3,
                       CLKOUT3N           => ntRef_ntCLKOUT3N,
                       CLKOUT4            => ntRef_ntCLKOUT4,
                       CLKOUT4N           => ntRef_ntCLKOUT4N,
                       CLKOUTPHY          => ntRef_ntCLKOUTPHY,
                       CLKOUTPHYN         => ntRef_ntCLKOUTPHYN,
                       CLKFBOUT           => ntRef_ntCLKFBOUT,
                       CLKFBOUTN          => ntRef_ntCLKFBOUTN,
                       PLL_LOCK           => ntRef_ntPLL_LOCK,
                       LOCKOUT_CAS        => ntRef_ntLOCKOUT_CAS,
                       PRDATA             => ntRef_ntPRDATA,
                       PREADY             => ntRef_ntPREADY,
                       LDO_ANA_TEST_MUX   => ntRef_ntLDO_ANA_TEST_MUX,
                       LDO_DIG_TEST_MUX   => ntRef_ntLDO_DIG_TEST_MUX,
                       PPLL_VCTRL_TEST    => ntRef_ntPPLL_VCTRL_TEST,
                       PLL_LS_TEST        => ntRef_ntPLL_LS_TEST,
                       PFDTOP_CLK_TEST    => ntRef_ntPFDTOP_CLK_TEST,
                       TEST_SO            => ntRef_ntTEST_SO,
                       CLK_U_P            => ntRef_ntCLK_U_P,
                       CLK_U_N            => ntRef_ntCLK_U_N,
                       SEL_D              => ntRef_ntSEL_D,
                       SEL_U              => ntRef_ntSEL_U,
                       CLK_DQSI_DEL0      => ntRef_ntCLK_DQSI_DEL0,
                       CLK_DQSIB_DEL0     => ntRef_ntCLK_DQSIB_DEL0,
                       CLK_W0             => ntRef_ntCLK_W0,
                       CLK_W_DEL0         => ntRef_ntCLK_W_DEL0,
                       DGTS0              => ntRef_ntDGTS0,
                       DLL_90CODE_GRAY0   => ntRef_ntDLL_90CODE_GRAY0,
                       DQS_DRIFT0         => ntRef_ntDQS_DRIFT0,
                       DQS_DRIFT_STATUS0  => ntRef_ntDQS_DRIFT_STATUS0,
                       DRIFT_DETECT_ERR0  => ntRef_ntDRIFT_DETECT_ERR0,
                       IFIFO_RADDR0       => ntRef_ntIFIFO_RADDR0,
                       IFIFO_WADDR0       => ntRef_ntIFIFO_WADDR0,
                       DLL_LOCK0          => ntRef_ntDLL_LOCK0,
                       READ_VALID0        => ntRef_ntREAD_VALID0,
                       DQS_SAMPLE0        => ntRef_ntDQS_SAMPLE0,
                       TERM0              => ntRef_ntTERM0,
                       TERM_FB0           => ntRef_ntTERM_FB0,
                       TFB0               => ntRef_ntTFB0,
                       TO0                => ntRef_ntTO0,
                       TERM1              => ntRef_ntTERM1,
                       TERM_FB1           => ntRef_ntTERM_FB1,
                       TFB1               => ntRef_ntTFB1,
                       TO1                => ntRef_ntTO1,                
                       CLK_DQSI_DEL1      => ntRef_ntCLK_DQSI_DEL1,
                       CLK_DQSIB_DEL1     => ntRef_ntCLK_DQSIB_DEL1,
                       CLK_W1             => ntRef_ntCLK_W1,
                       CLK_W_DEL1         => ntRef_ntCLK_W_DEL1,
                       DGTS1              => ntRef_ntDGTS1,
                       DLL_90CODE_GRAY1   => ntRef_ntDLL_90CODE_GRAY1,
                       DQS_DRIFT1         => ntRef_ntDQS_DRIFT1,
                       DQS_DRIFT_STATUS1  => ntRef_ntDQS_DRIFT_STATUS1,
                       DRIFT_DETECT_ERR1  => ntRef_ntDRIFT_DETECT_ERR1,
                       IFIFO_RADDR1       => ntRef_ntIFIFO_RADDR1,
                       IFIFO_WADDR1       => ntRef_ntIFIFO_WADDR1,
                       DLL_LOCK1          => ntRef_ntDLL_LOCK1,
                       READ_VALID1        => ntRef_ntREAD_VALID1,
                       DQS_SAMPLE1        => ntRef_ntDQS_SAMPLE1,
                       TERM2              => ntRef_ntTERM2,
                       TERM_FB2           => ntRef_ntTERM_FB2,
                       TFB2               => ntRef_ntTFB2,
                       TO2                => ntRef_ntTO2,
                       TERM3              => ntRef_ntTERM3,
                       TERM_FB3           => ntRef_ntTERM_FB3,
                       TFB3               => ntRef_ntTFB3,
                       TO3                => ntRef_ntTO3,
                       PHY_CLK0_2X_B_P    => ntRef_ntPHY_CLK0_2X_B_P,
                       PHY_CLK0_2X_B_N    => ntRef_ntPHY_CLK0_2X_B_N,
                       SYSCLK0_B_P        => ntRef_ntSYSCLK0_B_P,
                       SYSCLK0_B_N        => ntRef_ntSYSCLK0_B_N,
                       PHY_CLK1_2X_B_P    => ntRef_ntPHY_CLK1_2X_B_P,
                       PHY_CLK1_2X_B_N    => ntRef_ntPHY_CLK1_2X_B_N,
                       SYSCLK1_B_P        => ntRef_ntSYSCLK1_B_P,
                       SYSCLK1_B_N        => ntRef_ntSYSCLK1_B_N,
                       SYSCLK_P           => ntRef_ntSYSCLK_P,
                       SYSCLK_N           => ntRef_ntSYSCLK_N,
                       VCCREG0            => ntRef_ntVCCREG0,
                       VCCREG1            => ntRef_ntVCCREG1,
                       DCTEST_OUT         => ntRef_ntDCTEST_OUT,
                       CPD_LOCK           => ntRef_ntCPD_LOCK,
                       CPD_UP_DNB         => ntRef_ntCPD_UP_DNB,

                       TIEHI              => ntRef_ntTIEHI,
                       TIELO              => ntRef_ntTIELO    
                    )
          @([sx,sy]);

      STRUCT inc_spec_ppll incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;
      int sx_srb = (tx==1) ? sx+NUM_GRID_X : sx-NUM_GRID_X;

      foreach incVar(inc_ppll_srb_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device PPLL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_SRB]>> => (pin_logic_device=="TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx_srb,sy_SRB]>>
                                                                                                      : <wire *pin_logic_device of <device PPLL_TILE @[sx,sy]>>); 
          }
      } 

    }

}// end of function place_pll_tile


/********************************************************************************
********************************************************************************/
function place_pll_330h_tile(unsigned int tx,ty,flag)
{   

   unsigned int sx, sy;
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    string strVar;

    sprintf(strVar,"ntCLKOUT_MRMUX_P_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT_MRMUX_P[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT_MRMUX_N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT_MRMUX_N[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT0_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT0N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT0N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT1_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT1N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT1N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT2_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT2 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT2N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT2N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT3_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT3 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT3N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT3N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT4_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT4 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT4N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT4N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT5_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT5 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT6_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT6 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTPHY_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTPHY = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTPHYN_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTPHYN = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKFBOUT_%d_%d",sx,sy);
    &wire ntRef_ntCLKFBOUT = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKFBOUTN_%d_%d",sx,sy);
    &wire ntRef_ntCLKFBOUTN = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPLL_LOCK_%d_%d",sx,sy);
    &wire ntRef_ntPLL_LOCK = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntLOCKOUT_CAS_%d_%d",sx,sy);
    &wire ntRef_ntLOCKOUT_CAS = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPRDATA_%d_%d",sx,sy);
    &wire ntRef_ntPRDATA[15:0] = wire *strVar[15:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPREADY_%d_%d",sx,sy);
    &wire ntRef_ntPREADY = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntLDO_ANA_TEST_MUX_%d_%d",sx,sy);
    &wire ntRef_ntLDO_ANA_TEST_MUX = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntLDO_DIG_TEST_MUX_%d_%d",sx,sy);
    &wire ntRef_ntLDO_DIG_TEST_MUX = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPPLL_VCTRL_TEST_%d_%d",sx,sy);
    &wire ntRef_ntPPLL_VCTRL_TEST = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGPLL_VCTRL_TEST_%d_%d",sx,sy);
    &wire ntRef_ntGPLL_VCTRL_TEST = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPLL_LS_TEST_%d_%d",sx,sy);
    &wire ntRef_ntPLL_LS_TEST = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPFDTOP_CLK_TEST_%d_%d",sx,sy);
    &wire ntRef_ntPFDTOP_CLK_TEST = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_U_P_%d_%d",sx,sy);
    &wire ntRef_ntCLK_U_P[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_U_N_%d_%d",sx,sy);
    &wire ntRef_ntCLK_U_N[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_D_P_%d_%d",sx,sy);
    &wire ntRef_ntCLK_D_P[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_D_N_%d_%d",sx,sy);
    &wire ntRef_ntCLK_D_N[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEL_D_%d_%d",sx,sy);
    &wire ntRef_ntSEL_D[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEL_U_%d_%d",sx,sy);
    &wire ntRef_ntSEL_U[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_DQSI_DEL0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DQSI_DEL0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_DQSIB_DEL0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DQSIB_DEL0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_W0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_W0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_W_DEL0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_W_DEL0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDGTS0_%d_%d",sx,sy);
    &wire ntRef_ntDGTS0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDLL_90CODE_GRAY0_%d_%d",sx,sy);
    &wire ntRef_ntDLL_90CODE_GRAY0[7:0] = wire *strVar[7:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_DRIFT0_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DRIFT0[1:0] = wire *strVar[1:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_DRIFT_STATUS0_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DRIFT_STATUS0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDRIFT_DETECT_ERR0_%d_%d",sx,sy);
    &wire ntRef_ntDRIFT_DETECT_ERR0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIFIFO_RADDR0_%d_%d",sx,sy);
    &wire ntRef_ntIFIFO_RADDR0[2:0] = wire *strVar[2:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIFIFO_WADDR0_%d_%d",sx,sy);
    &wire ntRef_ntIFIFO_WADDR0[2:0] = wire *strVar[2:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDLL_LOCK0_%d_%d",sx,sy);
    &wire ntRef_ntDLL_LOCK0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntREAD_VALID0_%d_%d",sx,sy);
    &wire ntRef_ntREAD_VALID0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_SAMPLE0_%d_%d",sx,sy);
    &wire ntRef_ntDQS_SAMPLE0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM0_%d_%d",sx,sy);
    &wire ntRef_ntTERM0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM_FB0_%d_%d",sx,sy);
    &wire ntRef_ntTERM_FB0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTFB0_%d_%d",sx,sy);
    &wire ntRef_ntTFB0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTO0_%d_%d",sx,sy);
    &wire ntRef_ntTO0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM1_%d_%d",sx,sy);
    &wire ntRef_ntTERM1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM_FB1_%d_%d",sx,sy);
    &wire ntRef_ntTERM_FB1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTFB1_%d_%d",sx,sy);
    &wire ntRef_ntTFB1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTO1_%d_%d",sx,sy);
    &wire ntRef_ntTO1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_DQSI_DEL1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DQSI_DEL1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_DQSIB_DEL1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DQSIB_DEL1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_W1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_W1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_W_DEL1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_W_DEL1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDGTS1_%d_%d",sx,sy);
    &wire ntRef_ntDGTS1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDLL_90CODE_GRAY1_%d_%d",sx,sy);
    &wire ntRef_ntDLL_90CODE_GRAY1[7:0] = wire *strVar[7:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_DRIFT1_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DRIFT1[1:0] = wire *strVar[1:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_DRIFT_STATUS1_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DRIFT_STATUS1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDRIFT_DETECT_ERR1_%d_%d",sx,sy);
    &wire ntRef_ntDRIFT_DETECT_ERR1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIFIFO_RADDR1_%d_%d",sx,sy);
    &wire ntRef_ntIFIFO_RADDR1[2:0] = wire *strVar[2:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIFIFO_WADDR1_%d_%d",sx,sy);
    &wire ntRef_ntIFIFO_WADDR1[2:0] = wire *strVar[2:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDLL_LOCK1_%d_%d",sx,sy);
    &wire ntRef_ntDLL_LOCK1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntREAD_VALID1_%d_%d",sx,sy);
    &wire ntRef_ntREAD_VALID1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_SAMPLE1_%d_%d",sx,sy);
    &wire ntRef_ntDQS_SAMPLE1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM2_%d_%d",sx,sy);
    &wire ntRef_ntTERM2 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM_FB2_%d_%d",sx,sy);
    &wire ntRef_ntTERM_FB2 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTFB2_%d_%d",sx,sy);
    &wire ntRef_ntTFB2 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTO2_%d_%d",sx,sy);
    &wire ntRef_ntTO2 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM3_%d_%d",sx,sy);
    &wire ntRef_ntTERM3 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM_FB3_%d_%d",sx,sy);
    &wire ntRef_ntTERM_FB3 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTFB3_%d_%d",sx,sy);
    &wire ntRef_ntTFB3 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTO3_%d_%d",sx,sy);
    &wire ntRef_ntTO3 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDPS_DONE_%d_%d",sx,sy);
    &wire ntRef_ntDPS_DONE = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPHY_CLK0_2X_B_P_%d_%d",sx,sy);
    &wire ntRef_ntPHY_CLK0_2X_B_P = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPHY_CLK0_2X_B_N_%d_%d",sx,sy);
    &wire ntRef_ntPHY_CLK0_2X_B_N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSYSCLK0_B_P_%d_%d",sx,sy);
    &wire ntRef_ntSYSCLK0_B_P = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSYSCLK0_B_N_%d_%d",sx,sy);
    &wire ntRef_ntSYSCLK0_B_N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPHY_CLK1_2X_B_P_%d_%d",sx,sy);
    &wire ntRef_ntPHY_CLK1_2X_B_P = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPHY_CLK1_2X_B_N_%d_%d",sx,sy);
    &wire ntRef_ntPHY_CLK1_2X_B_N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSYSCLK1_B_P_%d_%d",sx,sy);
    &wire ntRef_ntSYSCLK1_B_P = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSYSCLK1_B_N_%d_%d",sx,sy);
    &wire ntRef_ntSYSCLK1_B_N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTD_D_P_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTD_D_P[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTD_D_N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTD_D_N[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTD_U_P_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTD_U_P[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTD_U_N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTD_U_N[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTU_D_P_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTU_D_P[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTU_D_N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTU_D_N[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTU_U_P_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTU_U_P[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTU_U_N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTU_U_N[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDCTEST_OUT_%d_%d",sx,sy);
    &wire ntRef_ntDCTEST_OUT = wire *strVar               /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCPD_LOCK_%d_%d",sx,sy);
    &wire ntRef_ntCPD_LOCK = wire *strVar               /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCPD_UP_DNB_%d_%d",sx,sy);
    &wire ntRef_ntCPD_UP_DNB = wire *strVar               /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSYSCLK_P_%d_%d",sx,sy);
    &wire ntRef_ntSYSCLK_P = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSYSCLK_N_%d_%d",sx,sy);
    &wire ntRef_ntSYSCLK_N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntVCCREG0_%d_%d",sx,sy);
    &wire ntRef_ntVCCREG0 = wire *strVar;

    sprintf(strVar,"ntVCCREG1_%d_%d",sx,sy);
    &wire ntRef_ntVCCREG1 = wire *strVar;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar,"ntTIELO_%d_%d",sx,sy);
    &wire ntRef_ntTIELO = wire *strVar;

    if(flag==0)
    {
      sprintf(strVar, "GPLL_330H_TILE_%d_%d", sx, sy);
      device GPLL_330H_TILE *strVar
           port map (
                       CLKOUT0            => ntRef_ntCLKOUT0,
                       CLKOUT0N           => ntRef_ntCLKOUT0N,
                       CLKOUT1            => ntRef_ntCLKOUT1,
                       CLKOUT1N           => ntRef_ntCLKOUT1N,
                       CLKOUT2            => ntRef_ntCLKOUT2,
                       CLKOUT2N           => ntRef_ntCLKOUT2N,
                       CLKOUT3            => ntRef_ntCLKOUT3,
                       CLKOUT3N           => ntRef_ntCLKOUT3N,
                       CLKOUT4            => ntRef_ntCLKOUT4,
                       CLKOUT5            => ntRef_ntCLKOUT5,
                       CLKOUT6            => ntRef_ntCLKOUT6,
                       CLKFBOUT           => ntRef_ntCLKFBOUT,
                       CLKFBOUTN          => ntRef_ntCLKFBOUTN,
                       PLL_LOCK           => ntRef_ntPLL_LOCK,
                       LOCKOUT_CAS        => ntRef_ntLOCKOUT_CAS,
                       DPS_DONE           => ntRef_ntDPS_DONE,
                       PRDATA             => ntRef_ntPRDATA,
                       PREADY             => ntRef_ntPREADY,
                       LDO_ANA_TEST_MUX   => ntRef_ntLDO_ANA_TEST_MUX,
                       LDO_DIG_TEST_MUX   => ntRef_ntLDO_DIG_TEST_MUX,
                       GPLL_VCTRL_TEST    => ntRef_ntGPLL_VCTRL_TEST,
                       PLL_LS_TEST        => ntRef_ntPLL_LS_TEST,
                       PFDTOP_CLK_TEST    => ntRef_ntPFDTOP_CLK_TEST,
                       TEST_SO            => ntRef_ntTEST_SO,
                       CLK_U_P            => ntRef_ntCLK_U_P,
                       CLK_U_N            => ntRef_ntCLK_U_N,
                       SEL_D              => ntRef_ntSEL_D,
                       SEL_U              => ntRef_ntSEL_U,
                       CLK_DQSI_DEL0      => ntRef_ntCLK_DQSI_DEL0,
                       CLK_DQSIB_DEL0     => ntRef_ntCLK_DQSIB_DEL0,
                       CLK_W0             => ntRef_ntCLK_W0,
                       CLK_W_DEL0         => ntRef_ntCLK_W_DEL0,
                       DGTS0              => ntRef_ntDGTS0,
                       DLL_90CODE_GRAY0   => ntRef_ntDLL_90CODE_GRAY0,
                       DQS_DRIFT0         => ntRef_ntDQS_DRIFT0,
                       DQS_DRIFT_STATUS0  => ntRef_ntDQS_DRIFT_STATUS0,
                       DRIFT_DETECT_ERR0  => ntRef_ntDRIFT_DETECT_ERR0,
                       IFIFO_RADDR0       => ntRef_ntIFIFO_RADDR0,
                       IFIFO_WADDR0       => ntRef_ntIFIFO_WADDR0,
                       DLL_LOCK0          => ntRef_ntDLL_LOCK0,
                       READ_VALID0        => ntRef_ntREAD_VALID0,
                       DQS_SAMPLE0        => ntRef_ntDQS_SAMPLE0,
                       TERM0              => ntRef_ntTERM0,
                       TERM_FB0           => ntRef_ntTERM_FB0,
                       TFB0               => ntRef_ntTFB0,
                       TO0                => ntRef_ntTO0,
                       TERM1              => ntRef_ntTERM1,
                       TERM_FB1           => ntRef_ntTERM_FB1,
                       TFB1               => ntRef_ntTFB1,
                       TO1                => ntRef_ntTO1,                
                       CLK_DQSI_DEL1      => ntRef_ntCLK_DQSI_DEL1,
                       CLK_DQSIB_DEL1     => ntRef_ntCLK_DQSIB_DEL1,
                       CLK_W1             => ntRef_ntCLK_W1,
                       CLK_W_DEL1         => ntRef_ntCLK_W_DEL1,
                       DGTS1              => ntRef_ntDGTS1,
                       DLL_90CODE_GRAY1   => ntRef_ntDLL_90CODE_GRAY1,
                       DQS_DRIFT1         => ntRef_ntDQS_DRIFT1,
                       DQS_DRIFT_STATUS1  => ntRef_ntDQS_DRIFT_STATUS1,
                       DRIFT_DETECT_ERR1  => ntRef_ntDRIFT_DETECT_ERR1,
                       IFIFO_RADDR1       => ntRef_ntIFIFO_RADDR1,
                       IFIFO_WADDR1       => ntRef_ntIFIFO_WADDR1,
                       DLL_LOCK1          => ntRef_ntDLL_LOCK1,
                       READ_VALID1        => ntRef_ntREAD_VALID1,
                       DQS_SAMPLE1        => ntRef_ntDQS_SAMPLE1,
                       TERM2              => ntRef_ntTERM2,
                       TERM_FB2           => ntRef_ntTERM_FB2,
                       TFB2               => ntRef_ntTFB2,
                       TO2                => ntRef_ntTO2,
                       TERM3              => ntRef_ntTERM3,
                       TERM_FB3           => ntRef_ntTERM_FB3,
                       TFB3               => ntRef_ntTFB3,
                       TO3                => ntRef_ntTO3,
                       PHY_CLK0_2X_B_P    => ntRef_ntPHY_CLK0_2X_B_P,
                       PHY_CLK0_2X_B_N    => ntRef_ntPHY_CLK0_2X_B_N,
                       SYSCLK0_B_P        => ntRef_ntSYSCLK0_B_P,
                       SYSCLK0_B_N        => ntRef_ntSYSCLK0_B_N,
                       PHY_CLK1_2X_B_P    => ntRef_ntPHY_CLK1_2X_B_P,
                       PHY_CLK1_2X_B_N    => ntRef_ntPHY_CLK1_2X_B_N,
                       SYSCLK1_B_P        => ntRef_ntSYSCLK1_B_P,
                       SYSCLK1_B_N        => ntRef_ntSYSCLK1_B_N,
                       VCCREG0            => ntRef_ntVCCREG0,
                       VCCREG1            => ntRef_ntVCCREG1,
                       DCTEST_OUT         => ntRef_ntDCTEST_OUT,
                       CPD_LOCK           => ntRef_ntCPD_LOCK,
                       CPD_UP_DNB         => ntRef_ntCPD_UP_DNB,

                       TIEHI              => ntRef_ntTIEHI,
                       TIELO              => ntRef_ntTIELO  
                    )
          @([sx,sy]);

      STRUCT inc_spec_gpll_330h incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;
      int sx_srb = (tx==1) ? sx+NUM_GRID_X : sx-NUM_GRID_X;

      foreach incVar(inc_gpll_330h_srb_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device GPLL_330H_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_SRB]>> => (pin_logic_device=="TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx_srb,sy_SRB]>>
                                                                                                      : <wire *pin_logic_device of <device GPLL_330H_TILE @[sx,sy]>>); 
          }
      } 

    }
    else
    {
      sprintf(strVar, "PPLL_330H_TILE_%d_%d", sx, sy);
      device PPLL_330H_TILE *strVar
           port map (
                       CLKOUT_MRMUX_P     => ntRef_ntCLKOUT_MRMUX_P,
                       CLKOUT_MRMUX_N     => ntRef_ntCLKOUT_MRMUX_N,

                       CLKOUT0            => ntRef_ntCLKOUT0,
                       CLKOUT0N           => ntRef_ntCLKOUT0N,
                       CLKOUT1            => ntRef_ntCLKOUT1,
                       CLKOUT1N           => ntRef_ntCLKOUT1N,
                       CLKOUT2            => ntRef_ntCLKOUT2,
                       CLKOUT2N           => ntRef_ntCLKOUT2N,
                       CLKOUT3            => ntRef_ntCLKOUT3,
                       CLKOUT3N           => ntRef_ntCLKOUT3N,
                       CLKOUT4            => ntRef_ntCLKOUT4,
                       CLKOUT4N           => ntRef_ntCLKOUT4N,
                       CLKOUTPHY          => ntRef_ntCLKOUTPHY,
                       CLKOUTPHYN         => ntRef_ntCLKOUTPHYN,
                       CLKFBOUT           => ntRef_ntCLKFBOUT,
                       CLKFBOUTN          => ntRef_ntCLKFBOUTN,
                       PLL_LOCK           => ntRef_ntPLL_LOCK,
                       LOCKOUT_CAS        => ntRef_ntLOCKOUT_CAS,
                       PRDATA             => ntRef_ntPRDATA,
                       PREADY             => ntRef_ntPREADY,
                       LDO_ANA_TEST_MUX   => ntRef_ntLDO_ANA_TEST_MUX,
                       LDO_DIG_TEST_MUX   => ntRef_ntLDO_DIG_TEST_MUX,
                       PPLL_VCTRL_TEST    => ntRef_ntPPLL_VCTRL_TEST,
                       PLL_LS_TEST        => ntRef_ntPLL_LS_TEST,
                       PFDTOP_CLK_TEST    => ntRef_ntPFDTOP_CLK_TEST,
                       TEST_SO            => ntRef_ntTEST_SO,
                       CLK_U_P            => ntRef_ntCLK_U_P,
                       CLK_U_N            => ntRef_ntCLK_U_N,
                       SEL_D              => ntRef_ntSEL_D,
                       SEL_U              => ntRef_ntSEL_U,
                       CLK_DQSI_DEL0      => ntRef_ntCLK_DQSI_DEL0,
                       CLK_DQSIB_DEL0     => ntRef_ntCLK_DQSIB_DEL0,
                       CLK_W0             => ntRef_ntCLK_W0,
                       CLK_W_DEL0         => ntRef_ntCLK_W_DEL0,
                       DGTS0              => ntRef_ntDGTS0,
                       DLL_90CODE_GRAY0   => ntRef_ntDLL_90CODE_GRAY0,
                       DQS_DRIFT0         => ntRef_ntDQS_DRIFT0,
                       DQS_DRIFT_STATUS0  => ntRef_ntDQS_DRIFT_STATUS0,
                       DRIFT_DETECT_ERR0  => ntRef_ntDRIFT_DETECT_ERR0,
                       IFIFO_RADDR0       => ntRef_ntIFIFO_RADDR0,
                       IFIFO_WADDR0       => ntRef_ntIFIFO_WADDR0,
                       DLL_LOCK0          => ntRef_ntDLL_LOCK0,
                       READ_VALID0        => ntRef_ntREAD_VALID0,
                       DQS_SAMPLE0        => ntRef_ntDQS_SAMPLE0,
                       TERM0              => ntRef_ntTERM0,
                       TERM_FB0           => ntRef_ntTERM_FB0,
                       TFB0               => ntRef_ntTFB0,
                       TO0                => ntRef_ntTO0,
                       TERM1              => ntRef_ntTERM1,
                       TERM_FB1           => ntRef_ntTERM_FB1,
                       TFB1               => ntRef_ntTFB1,
                       TO1                => ntRef_ntTO1,                
                       CLK_DQSI_DEL1      => ntRef_ntCLK_DQSI_DEL1,
                       CLK_DQSIB_DEL1     => ntRef_ntCLK_DQSIB_DEL1,
                       CLK_W1             => ntRef_ntCLK_W1,
                       CLK_W_DEL1         => ntRef_ntCLK_W_DEL1,
                       DGTS1              => ntRef_ntDGTS1,
                       DLL_90CODE_GRAY1   => ntRef_ntDLL_90CODE_GRAY1,
                       DQS_DRIFT1         => ntRef_ntDQS_DRIFT1,
                       DQS_DRIFT_STATUS1  => ntRef_ntDQS_DRIFT_STATUS1,
                       DRIFT_DETECT_ERR1  => ntRef_ntDRIFT_DETECT_ERR1,
                       IFIFO_RADDR1       => ntRef_ntIFIFO_RADDR1,
                       IFIFO_WADDR1       => ntRef_ntIFIFO_WADDR1,
                       DLL_LOCK1          => ntRef_ntDLL_LOCK1,
                       READ_VALID1        => ntRef_ntREAD_VALID1,
                       DQS_SAMPLE1        => ntRef_ntDQS_SAMPLE1,
                       TERM2              => ntRef_ntTERM2,
                       TERM_FB2           => ntRef_ntTERM_FB2,
                       TFB2               => ntRef_ntTFB2,
                       TO2                => ntRef_ntTO2,
                       TERM3              => ntRef_ntTERM3,
                       TERM_FB3           => ntRef_ntTERM_FB3,
                       TFB3               => ntRef_ntTFB3,
                       TO3                => ntRef_ntTO3,
                       PHY_CLK0_2X_B_P    => ntRef_ntPHY_CLK0_2X_B_P,
                       PHY_CLK0_2X_B_N    => ntRef_ntPHY_CLK0_2X_B_N,
                       SYSCLK0_B_P        => ntRef_ntSYSCLK0_B_P,
                       SYSCLK0_B_N        => ntRef_ntSYSCLK0_B_N,
                       PHY_CLK1_2X_B_P    => ntRef_ntPHY_CLK1_2X_B_P,
                       PHY_CLK1_2X_B_N    => ntRef_ntPHY_CLK1_2X_B_N,
                       SYSCLK1_B_P        => ntRef_ntSYSCLK1_B_P,
                       SYSCLK1_B_N        => ntRef_ntSYSCLK1_B_N,
                       SYSCLK_P           => ntRef_ntSYSCLK_P,
                       SYSCLK_N           => ntRef_ntSYSCLK_N,
                       VCCREG0            => ntRef_ntVCCREG0,
                       VCCREG1            => ntRef_ntVCCREG1,
                       DCTEST_OUT         => ntRef_ntDCTEST_OUT,
                       CPD_LOCK           => ntRef_ntCPD_LOCK,
                       CPD_UP_DNB         => ntRef_ntCPD_UP_DNB,

                       TIEHI              => ntRef_ntTIEHI,
                       TIELO              => ntRef_ntTIELO    
                    )
          @([sx,sy]);

      STRUCT inc_spec_ppll_330h incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;
      int sx_srb = (tx==1) ? sx+NUM_GRID_X : sx-NUM_GRID_X;

      foreach incVar(inc_ppll_330h_srb_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device PPLL_330H_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_SRB]>> => (pin_logic_device=="TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx_srb,sy_SRB]>>
                                                                                                      : <wire *pin_logic_device of <device PPLL_330H_TILE @[sx,sy]>>); 
          }
      } 

    }

}// end of function place_pll_330h_tile




/********************************************************************************
********************************************************************************/
function place_pll_hp_tile(unsigned int tx,ty,flag)
{   

   unsigned int sx, sy;
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    string strVar;

    sprintf(strVar,"ntCLKOUT_MRMUX_P_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT_MRMUX_P[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT_MRMUX_N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT_MRMUX_N[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT0_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT0N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT0N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT1_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT1N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT1N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT2_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT2 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT2N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT2N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT3_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT3 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT3N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT3N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT4_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT4 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT4N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT4N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT5_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT5 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUT6_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT6 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTPHY_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTPHY = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTPHYN_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTPHYN = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKFBOUT_%d_%d",sx,sy);
    &wire ntRef_ntCLKFBOUT = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKFBOUTN_%d_%d",sx,sy);
    &wire ntRef_ntCLKFBOUTN = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPLL_LOCK_%d_%d",sx,sy);
    &wire ntRef_ntPLL_LOCK = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntLOCKOUT_CAS_%d_%d",sx,sy);
    &wire ntRef_ntLOCKOUT_CAS = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPRDATA_%d_%d",sx,sy);
    &wire ntRef_ntPRDATA[15:0] = wire *strVar[15:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPREADY_%d_%d",sx,sy);
    &wire ntRef_ntPREADY = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntLDO_ANA_TEST_MUX_%d_%d",sx,sy);
    &wire ntRef_ntLDO_ANA_TEST_MUX = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntLDO_DIG_TEST_MUX_%d_%d",sx,sy);
    &wire ntRef_ntLDO_DIG_TEST_MUX = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPPLL_VCTRL_TEST_%d_%d",sx,sy);
    &wire ntRef_ntPPLL_VCTRL_TEST = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGPLL_VCTRL_TEST_%d_%d",sx,sy);
    &wire ntRef_ntGPLL_VCTRL_TEST = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPLL_LS_TEST_%d_%d",sx,sy);
    &wire ntRef_ntPLL_LS_TEST = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPFDTOP_CLK_TEST_%d_%d",sx,sy);
    &wire ntRef_ntPFDTOP_CLK_TEST = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_U_P_%d_%d",sx,sy);
    &wire ntRef_ntCLK_U_P[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_U_N_%d_%d",sx,sy);
    &wire ntRef_ntCLK_U_N[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_D_P_%d_%d",sx,sy);
    &wire ntRef_ntCLK_D_P[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_D_N_%d_%d",sx,sy);
    &wire ntRef_ntCLK_D_N[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEL_D_%d_%d",sx,sy);
    &wire ntRef_ntSEL_D[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEL_U_%d_%d",sx,sy);
    &wire ntRef_ntSEL_U[3:0] = wire *strVar[3:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_DQSI_DEL0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DQSI_DEL0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_DQSIB_DEL0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DQSIB_DEL0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_W0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_W0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_W_DEL0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_W_DEL0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDGTS0_%d_%d",sx,sy);
    &wire ntRef_ntDGTS0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDLL_90CODE_GRAY0_%d_%d",sx,sy);
    &wire ntRef_ntDLL_90CODE_GRAY0[7:0] = wire *strVar[7:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_DRIFT0_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DRIFT0[1:0] = wire *strVar[1:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_DRIFT_STATUS0_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DRIFT_STATUS0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDRIFT_DETECT_ERR0_%d_%d",sx,sy);
    &wire ntRef_ntDRIFT_DETECT_ERR0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIFIFO_RADDR0_%d_%d",sx,sy);
    &wire ntRef_ntIFIFO_RADDR0[2:0] = wire *strVar[2:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIFIFO_WADDR0_%d_%d",sx,sy);
    &wire ntRef_ntIFIFO_WADDR0[2:0] = wire *strVar[2:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDLL_LOCK0_%d_%d",sx,sy);
    &wire ntRef_ntDLL_LOCK0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntREAD_VALID0_%d_%d",sx,sy);
    &wire ntRef_ntREAD_VALID0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_SAMPLE0_%d_%d",sx,sy);
    &wire ntRef_ntDQS_SAMPLE0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

//    sprintf(strVar,"ntTERM0_%d_%d",sx,sy);
//    &wire ntRef_ntTERM0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

//    sprintf(strVar,"ntTERM_FB0_%d_%d",sx,sy);
//    &wire ntRef_ntTERM_FB0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

//    sprintf(strVar,"ntTFB0_%d_%d",sx,sy);
//    &wire ntRef_ntTFB0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

//    sprintf(strVar,"ntTO0_%d_%d",sx,sy);
//    &wire ntRef_ntTO0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

//    sprintf(strVar,"ntTERM1_%d_%d",sx,sy);
//    &wire ntRef_ntTERM1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

//    sprintf(strVar,"ntTERM_FB1_%d_%d",sx,sy);
//    &wire ntRef_ntTERM_FB1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

//    sprintf(strVar,"ntTFB1_%d_%d",sx,sy);
//    &wire ntRef_ntTFB1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

//    sprintf(strVar,"ntTO1_%d_%d",sx,sy);
//    &wire ntRef_ntTO1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_DQSI_DEL1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DQSI_DEL1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_DQSIB_DEL1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DQSIB_DEL1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_W1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_W1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_W_DEL1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_W_DEL1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDGTS1_%d_%d",sx,sy);
    &wire ntRef_ntDGTS1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDLL_90CODE_GRAY1_%d_%d",sx,sy);
    &wire ntRef_ntDLL_90CODE_GRAY1[7:0] = wire *strVar[7:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_DRIFT1_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DRIFT1[1:0] = wire *strVar[1:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_DRIFT_STATUS1_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DRIFT_STATUS1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDRIFT_DETECT_ERR1_%d_%d",sx,sy);
    &wire ntRef_ntDRIFT_DETECT_ERR1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIFIFO_RADDR1_%d_%d",sx,sy);
    &wire ntRef_ntIFIFO_RADDR1[2:0] = wire *strVar[2:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIFIFO_WADDR1_%d_%d",sx,sy);
    &wire ntRef_ntIFIFO_WADDR1[2:0] = wire *strVar[2:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDLL_LOCK1_%d_%d",sx,sy);
    &wire ntRef_ntDLL_LOCK1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntREAD_VALID1_%d_%d",sx,sy);
    &wire ntRef_ntREAD_VALID1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_SAMPLE1_%d_%d",sx,sy);
    &wire ntRef_ntDQS_SAMPLE1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

//    sprintf(strVar,"ntTERM2_%d_%d",sx,sy);
//    &wire ntRef_ntTERM2 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

//    sprintf(strVar,"ntTERM_FB2_%d_%d",sx,sy);
//    &wire ntRef_ntTERM_FB2 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

//    sprintf(strVar,"ntTFB2_%d_%d",sx,sy);
//    &wire ntRef_ntTFB2 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

//    sprintf(strVar,"ntTO2_%d_%d",sx,sy);
//    &wire ntRef_ntTO2 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

//    sprintf(strVar,"ntTERM3_%d_%d",sx,sy);
//    &wire ntRef_ntTERM3 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

//    sprintf(strVar,"ntTERM_FB3_%d_%d",sx,sy);
//    &wire ntRef_ntTERM_FB3 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

//    sprintf(strVar,"ntTFB3_%d_%d",sx,sy);
//    &wire ntRef_ntTFB3 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

//    sprintf(strVar,"ntTO3_%d_%d",sx,sy);
//    &wire ntRef_ntTO3 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDPS_DONE_%d_%d",sx,sy);
    &wire ntRef_ntDPS_DONE = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPHY_CLK0_2X_B_P_%d_%d",sx,sy);
    &wire ntRef_ntPHY_CLK0_2X_B_P = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPHY_CLK0_2X_B_N_%d_%d",sx,sy);
    &wire ntRef_ntPHY_CLK0_2X_B_N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSYSCLK0_B_P_%d_%d",sx,sy);
    &wire ntRef_ntSYSCLK0_B_P = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSYSCLK0_B_N_%d_%d",sx,sy);
    &wire ntRef_ntSYSCLK0_B_N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPHY_CLK1_2X_B_P_%d_%d",sx,sy);
    &wire ntRef_ntPHY_CLK1_2X_B_P = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPHY_CLK1_2X_B_N_%d_%d",sx,sy);
    &wire ntRef_ntPHY_CLK1_2X_B_N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSYSCLK1_B_P_%d_%d",sx,sy);
    &wire ntRef_ntSYSCLK1_B_P = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSYSCLK1_B_N_%d_%d",sx,sy);
    &wire ntRef_ntSYSCLK1_B_N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTD_D_P_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTD_D_P[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTD_D_N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTD_D_N[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTD_U_P_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTD_U_P[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTD_U_N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTD_U_N[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTU_D_P_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTU_D_P[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTU_D_N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTU_D_N[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTU_U_P_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTU_U_P[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKOUTU_U_N_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTU_U_N[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDCTEST_OUT_%d_%d",sx,sy);
    &wire ntRef_ntDCTEST_OUT = wire *strVar               /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCPD_LOCK_%d_%d",sx,sy);
    &wire ntRef_ntCPD_LOCK = wire *strVar               /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCPD_UP_DNB_%d_%d",sx,sy);
    &wire ntRef_ntCPD_UP_DNB = wire *strVar               /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSYSCLK_P_%d_%d",sx,sy);
    &wire ntRef_ntSYSCLK_P = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSYSCLK_N_%d_%d",sx,sy);
    &wire ntRef_ntSYSCLK_N = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntVCCREG0_%d_%d",sx,sy);
    &wire ntRef_ntVCCREG0 = wire *strVar;

    sprintf(strVar,"ntVCCREG1_%d_%d",sx,sy);
    &wire ntRef_ntVCCREG1 = wire *strVar;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar,"ntTIELO_%d_%d",sx,sy);
    &wire ntRef_ntTIELO = wire *strVar;

    if(flag==0)
    {
      sprintf(strVar, "GPLL_HP_TILE_%d_%d", sx, sy);
      device GPLL_HP_TILE *strVar
           port map (
                       CLKOUT0            => ntRef_ntCLKOUT0,
                       CLKOUT0N           => ntRef_ntCLKOUT0N,
                       CLKOUT1            => ntRef_ntCLKOUT1,
                       CLKOUT1N           => ntRef_ntCLKOUT1N,
                       CLKOUT2            => ntRef_ntCLKOUT2,
                       CLKOUT2N           => ntRef_ntCLKOUT2N,
                       CLKOUT3            => ntRef_ntCLKOUT3,
                       CLKOUT3N           => ntRef_ntCLKOUT3N,
                       CLKOUT4            => ntRef_ntCLKOUT4,
                       CLKOUT5            => ntRef_ntCLKOUT5,
                       CLKOUT6            => ntRef_ntCLKOUT6,
                       CLKFBOUT           => ntRef_ntCLKFBOUT,
                       CLKFBOUTN          => ntRef_ntCLKFBOUTN,
                       PLL_LOCK           => ntRef_ntPLL_LOCK,
                       LOCKOUT_CAS        => ntRef_ntLOCKOUT_CAS,
                       DPS_DONE           => ntRef_ntDPS_DONE,
                       PRDATA             => ntRef_ntPRDATA,
                       PREADY             => ntRef_ntPREADY,
                       LDO_ANA_TEST_MUX   => ntRef_ntLDO_ANA_TEST_MUX,
                       LDO_DIG_TEST_MUX   => ntRef_ntLDO_DIG_TEST_MUX,
                       GPLL_VCTRL_TEST    => ntRef_ntGPLL_VCTRL_TEST,
                       PLL_LS_TEST        => ntRef_ntPLL_LS_TEST,
                       PFDTOP_CLK_TEST    => ntRef_ntPFDTOP_CLK_TEST,
                       TEST_SO            => ntRef_ntTEST_SO,
                       CLK_U_P            => ntRef_ntCLK_U_P,
                       CLK_U_N            => ntRef_ntCLK_U_N,
                       SEL_D              => ntRef_ntSEL_D,
                       SEL_U              => ntRef_ntSEL_U,
                       CLK_DQSI_DEL0      => ntRef_ntCLK_DQSI_DEL0,
                       CLK_DQSIB_DEL0     => ntRef_ntCLK_DQSIB_DEL0,
                       CLK_W0             => ntRef_ntCLK_W0,
                       CLK_W_DEL0         => ntRef_ntCLK_W_DEL0,
                       DGTS0              => ntRef_ntDGTS0,
                       DLL_90CODE_GRAY0   => ntRef_ntDLL_90CODE_GRAY0,
                       DQS_DRIFT0         => ntRef_ntDQS_DRIFT0,
                       DQS_DRIFT_STATUS0  => ntRef_ntDQS_DRIFT_STATUS0,
                       DRIFT_DETECT_ERR0  => ntRef_ntDRIFT_DETECT_ERR0,
                       IFIFO_RADDR0       => ntRef_ntIFIFO_RADDR0,
                       IFIFO_WADDR0       => ntRef_ntIFIFO_WADDR0,
                       DLL_LOCK0          => ntRef_ntDLL_LOCK0,
                       READ_VALID0        => ntRef_ntREAD_VALID0,
                       DQS_SAMPLE0        => ntRef_ntDQS_SAMPLE0,
//                       TERM0              => ntRef_ntTERM0,
//                       TERM_FB0           => ntRef_ntTERM_FB0,
//                       TFB0               => ntRef_ntTFB0,
//                       TO0                => ntRef_ntTO0,
//                       TERM1              => ntRef_ntTERM1,
//                       TERM_FB1           => ntRef_ntTERM_FB1,
//                       TFB1               => ntRef_ntTFB1,
//                       TO1                => ntRef_ntTO1,                
                       CLK_DQSI_DEL1      => ntRef_ntCLK_DQSI_DEL1,
                       CLK_DQSIB_DEL1     => ntRef_ntCLK_DQSIB_DEL1,
                       CLK_W1             => ntRef_ntCLK_W1,
                       CLK_W_DEL1         => ntRef_ntCLK_W_DEL1,
                       DGTS1              => ntRef_ntDGTS1,
                       DLL_90CODE_GRAY1   => ntRef_ntDLL_90CODE_GRAY1,
                       DQS_DRIFT1         => ntRef_ntDQS_DRIFT1,
                       DQS_DRIFT_STATUS1  => ntRef_ntDQS_DRIFT_STATUS1,
                       DRIFT_DETECT_ERR1  => ntRef_ntDRIFT_DETECT_ERR1,
                       IFIFO_RADDR1       => ntRef_ntIFIFO_RADDR1,
                       IFIFO_WADDR1       => ntRef_ntIFIFO_WADDR1,
                       DLL_LOCK1          => ntRef_ntDLL_LOCK1,
                       READ_VALID1        => ntRef_ntREAD_VALID1,
                       DQS_SAMPLE1        => ntRef_ntDQS_SAMPLE1,
//                       TERM2              => ntRef_ntTERM2,
//                       TERM_FB2           => ntRef_ntTERM_FB2,
//                       TFB2               => ntRef_ntTFB2,
//                       TO2                => ntRef_ntTO2,
//                       TERM3              => ntRef_ntTERM3,
//                       TERM_FB3           => ntRef_ntTERM_FB3,
//                       TFB3               => ntRef_ntTFB3,
//                       TO3                => ntRef_ntTO3,
                       PHY_CLK0_2X_B_P    => ntRef_ntPHY_CLK0_2X_B_P,
                       PHY_CLK0_2X_B_N    => ntRef_ntPHY_CLK0_2X_B_N,
                       SYSCLK0_B_P        => ntRef_ntSYSCLK0_B_P,
                       SYSCLK0_B_N        => ntRef_ntSYSCLK0_B_N,
                       PHY_CLK1_2X_B_P    => ntRef_ntPHY_CLK1_2X_B_P,
                       PHY_CLK1_2X_B_N    => ntRef_ntPHY_CLK1_2X_B_N,
                       SYSCLK1_B_P        => ntRef_ntSYSCLK1_B_P,
                       SYSCLK1_B_N        => ntRef_ntSYSCLK1_B_N,
                       VCCREG0            => ntRef_ntVCCREG0,
                       VCCREG1            => ntRef_ntVCCREG1,
                       DCTEST_OUT         => ntRef_ntDCTEST_OUT,
                       CPD_LOCK           => ntRef_ntCPD_LOCK,
                       CPD_UP_DNB         => ntRef_ntCPD_UP_DNB,

                       TIEHI              => ntRef_ntTIEHI,
                       TIELO              => ntRef_ntTIELO  
                    )
          @([sx,sy]);

      STRUCT inc_spec_gpll_hp incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;
      int sx_srb = (tx==1) ? sx+NUM_GRID_X : sx-NUM_GRID_X;

      foreach incVar(inc_gpll_hp_srb_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device GPLL_HP_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_SRB]>> => (pin_logic_device=="TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx_srb,sy_SRB]>>
                                                                                                      : <wire *pin_logic_device of <device GPLL_HP_TILE @[sx,sy]>>); 
          }
      } 

    }
    else
    {
      sprintf(strVar, "PPLL_HP_TILE_%d_%d", sx, sy);
      device PPLL_HP_TILE *strVar
           port map (
                       CLKOUT_MRMUX_P     => ntRef_ntCLKOUT_MRMUX_P,
                       CLKOUT_MRMUX_N     => ntRef_ntCLKOUT_MRMUX_N,

                       CLKOUT0            => ntRef_ntCLKOUT0,
                       CLKOUT0N           => ntRef_ntCLKOUT0N,
                       CLKOUT1            => ntRef_ntCLKOUT1,
                       CLKOUT1N           => ntRef_ntCLKOUT1N,
                       CLKOUT2            => ntRef_ntCLKOUT2,
                       CLKOUT2N           => ntRef_ntCLKOUT2N,
                       CLKOUT3            => ntRef_ntCLKOUT3,
                       CLKOUT3N           => ntRef_ntCLKOUT3N,
                       CLKOUT4            => ntRef_ntCLKOUT4,
                       CLKOUT4N           => ntRef_ntCLKOUT4N,
                       CLKOUTPHY          => ntRef_ntCLKOUTPHY,
                       CLKOUTPHYN         => ntRef_ntCLKOUTPHYN,
                       CLKFBOUT           => ntRef_ntCLKFBOUT,
                       CLKFBOUTN          => ntRef_ntCLKFBOUTN,
                       PLL_LOCK           => ntRef_ntPLL_LOCK,
                       LOCKOUT_CAS        => ntRef_ntLOCKOUT_CAS,
                       PRDATA             => ntRef_ntPRDATA,
                       PREADY             => ntRef_ntPREADY,
                       LDO_ANA_TEST_MUX   => ntRef_ntLDO_ANA_TEST_MUX,
                       LDO_DIG_TEST_MUX   => ntRef_ntLDO_DIG_TEST_MUX,
                       PPLL_VCTRL_TEST    => ntRef_ntPPLL_VCTRL_TEST,
                       PLL_LS_TEST        => ntRef_ntPLL_LS_TEST,
                       PFDTOP_CLK_TEST    => ntRef_ntPFDTOP_CLK_TEST,
                       TEST_SO            => ntRef_ntTEST_SO,
                       CLK_U_P            => ntRef_ntCLK_U_P,
                       CLK_U_N            => ntRef_ntCLK_U_N,
                       SEL_D              => ntRef_ntSEL_D,
                       SEL_U              => ntRef_ntSEL_U,
                       CLK_DQSI_DEL0      => ntRef_ntCLK_DQSI_DEL0,
                       CLK_DQSIB_DEL0     => ntRef_ntCLK_DQSIB_DEL0,
                       CLK_W0             => ntRef_ntCLK_W0,
                       CLK_W_DEL0         => ntRef_ntCLK_W_DEL0,
                       DGTS0              => ntRef_ntDGTS0,
                       DLL_90CODE_GRAY0   => ntRef_ntDLL_90CODE_GRAY0,
                       DQS_DRIFT0         => ntRef_ntDQS_DRIFT0,
                       DQS_DRIFT_STATUS0  => ntRef_ntDQS_DRIFT_STATUS0,
                       DRIFT_DETECT_ERR0  => ntRef_ntDRIFT_DETECT_ERR0,
                       IFIFO_RADDR0       => ntRef_ntIFIFO_RADDR0,
                       IFIFO_WADDR0       => ntRef_ntIFIFO_WADDR0,
                       DLL_LOCK0          => ntRef_ntDLL_LOCK0,
                       READ_VALID0        => ntRef_ntREAD_VALID0,
                       DQS_SAMPLE0        => ntRef_ntDQS_SAMPLE0,
//                       TERM0              => ntRef_ntTERM0,
//                       TERM_FB0           => ntRef_ntTERM_FB0,
//                       TFB0               => ntRef_ntTFB0,
//                       TO0                => ntRef_ntTO0,
//                       TERM1              => ntRef_ntTERM1,
//                       TERM_FB1           => ntRef_ntTERM_FB1,
//                       TFB1               => ntRef_ntTFB1,
//                       TO1                => ntRef_ntTO1,                
                       CLK_DQSI_DEL1      => ntRef_ntCLK_DQSI_DEL1,
                       CLK_DQSIB_DEL1     => ntRef_ntCLK_DQSIB_DEL1,
                       CLK_W1             => ntRef_ntCLK_W1,
                       CLK_W_DEL1         => ntRef_ntCLK_W_DEL1,
                       DGTS1              => ntRef_ntDGTS1,
                       DLL_90CODE_GRAY1   => ntRef_ntDLL_90CODE_GRAY1,
                       DQS_DRIFT1         => ntRef_ntDQS_DRIFT1,
                       DQS_DRIFT_STATUS1  => ntRef_ntDQS_DRIFT_STATUS1,
                       DRIFT_DETECT_ERR1  => ntRef_ntDRIFT_DETECT_ERR1,
                       IFIFO_RADDR1       => ntRef_ntIFIFO_RADDR1,
                       IFIFO_WADDR1       => ntRef_ntIFIFO_WADDR1,
                       DLL_LOCK1          => ntRef_ntDLL_LOCK1,
                       READ_VALID1        => ntRef_ntREAD_VALID1,
                       DQS_SAMPLE1        => ntRef_ntDQS_SAMPLE1,
//                       TERM2              => ntRef_ntTERM2,
//                       TERM_FB2           => ntRef_ntTERM_FB2,
//                       TFB2               => ntRef_ntTFB2,
//                       TO2                => ntRef_ntTO2,
//                       TERM3              => ntRef_ntTERM3,
//                       TERM_FB3           => ntRef_ntTERM_FB3,
//                       TFB3               => ntRef_ntTFB3,
//                       TO3                => ntRef_ntTO3,
                       PHY_CLK0_2X_B_P    => ntRef_ntPHY_CLK0_2X_B_P,
                       PHY_CLK0_2X_B_N    => ntRef_ntPHY_CLK0_2X_B_N,
                       SYSCLK0_B_P        => ntRef_ntSYSCLK0_B_P,
                       SYSCLK0_B_N        => ntRef_ntSYSCLK0_B_N,
                       PHY_CLK1_2X_B_P    => ntRef_ntPHY_CLK1_2X_B_P,
                       PHY_CLK1_2X_B_N    => ntRef_ntPHY_CLK1_2X_B_N,
                       SYSCLK1_B_P        => ntRef_ntSYSCLK1_B_P,
                       SYSCLK1_B_N        => ntRef_ntSYSCLK1_B_N,
                       SYSCLK_P           => ntRef_ntSYSCLK_P,
                       SYSCLK_N           => ntRef_ntSYSCLK_N,
                       VCCREG0            => ntRef_ntVCCREG0,
                       VCCREG1            => ntRef_ntVCCREG1,
                       DCTEST_OUT         => ntRef_ntDCTEST_OUT,
                       CPD_LOCK           => ntRef_ntCPD_LOCK,
                       CPD_UP_DNB         => ntRef_ntCPD_UP_DNB,

                       TIEHI              => ntRef_ntTIEHI,
                       TIELO              => ntRef_ntTIELO    
                    )
          @([sx,sy]);

      STRUCT inc_spec_ppll_hp incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;
      int sx_srb = (tx==1) ? sx+NUM_GRID_X : sx-NUM_GRID_X;

      foreach incVar(inc_ppll_hp_srb_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device PPLL_HP_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_SRB]>> => (pin_logic_device=="TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx_srb,sy_SRB]>>
                                                                                                      : <wire *pin_logic_device of <device PPLL_HP_TILE @[sx,sy]>>); 
          }
      } 

    }

}// end of function place_pll_hp_tile





/********************************************************************************
********************************************************************************/
function place_uscm_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;

    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;


    string strVar;

    sprintf(strVar,"ntCLK_HCKB0L_%d_%d",sx,sy);
    &wire ntRef_ntCLK_HCKB0L[11:0] = wire *strVar[11:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_HCKB0R_%d_%d",sx,sy);
    &wire ntRef_ntCLK_HCKB0R[11:0] = wire *strVar[11:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_HCKB1L_%d_%d",sx,sy);
    &wire ntRef_ntCLK_HCKB1L[11:0] = wire *strVar[11:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_HCKB1R_%d_%d",sx,sy);
    &wire ntRef_ntCLK_HCKB1R[11:0] = wire *strVar[11:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_USCM_BUF_U_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USCM_BUF_U[31:0] = wire *strVar[31:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_USCM_BUF_D_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USCM_BUF_D[31:0] = wire *strVar[31:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;


    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;


    sprintf(strVar, "USCM_TILE_%d_%d", sx, sy);

    device USCM_TILE *strVar
          port map (
                      CLK_HCKB0L    => ntRef_ntCLK_HCKB0L,
                      CLK_HCKB0R    => ntRef_ntCLK_HCKB0R,
                      CLK_HCKB1L    => ntRef_ntCLK_HCKB1L,
                      CLK_HCKB1R    => ntRef_ntCLK_HCKB1R,

                      CLK_USCM_BUF_U  => ntRef_ntCLK_USCM_BUF_U,
                      CLK_USCM_BUF_D  => ntRef_ntCLK_USCM_BUF_D

                    )
        @([sx,sy]);

    STRUCT inc_spec_uscm incVar;
    string pin_SRB;
    string pin_logic_device;
    string attribute_IO;
    int loc_SRB;
    string dir;
    int ty_srb,sy_srb;
    int sx_srb = tx * NUM_GRID_X;

    foreach incVar(inc_uscm_srb_spec)
    {
        pin_SRB = incVar.port_name_SRB;
        pin_logic_device = incVar.port_name_device;
        attribute_IO = incVar.attribute_IO;
        loc_SRB = incVar.loc_SRB;

        sy_srb = sy + loc_SRB*NUM_GRID_Y;

        if(attribute_IO =="I")
        { 

           connect(<pin *pin_logic_device of <device USCM_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
        }
        else
        {
          connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> => <wire *pin_logic_device of <device USCM_TILE @[sx,sy]>>); 
        }
    }



}// end of function place_uscm_tile
/********************************************************************************
********************************************************************************/
function place_pregmuxc_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;

    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;


    string strVar;

    sprintf(strVar,"ntCLK_HCKB0L_%d_%d",sx,sy);
    &wire ntRef_ntCLK_HCKB0L[11:0] = wire *strVar[11:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_HCKB0R_%d_%d",sx,sy);
    &wire ntRef_ntCLK_HCKB0R[11:0] = wire *strVar[11:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_PREGMUXOUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PREGMUXOUT[31:0] = wire *strVar[31:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_USCM_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USCM_BUF[31:0] = wire *strVar[31:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntPOR_N_1P8_OUT_U0_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P8_OUT_U0 = wire *strVar;

    sprintf(strVar,"ntPRCFG_N_OUT_U0_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_N_OUT_U0 = wire *strVar;

    sprintf(strVar,"ntGRS_N_OUT_U0_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OUT_U0 = wire *strVar;

    sprintf(strVar,"ntGWEN_OUT_U0_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OUT_U0 = wire *strVar;

    sprintf(strVar,"ntPOR_N_OUT_U0_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OUT_U0 = wire *strVar;

    sprintf(strVar,"ntPUP_REL_N_OUT_U0_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OUT_U0 = wire *strVar;

    sprintf(strVar,"ntGLOGEN_OUT_U0_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT_U0 = wire *strVar;

    sprintf(strVar,"ntPOR_N_1P8_OUT_L0_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P8_OUT_L0 = wire *strVar;

    sprintf(strVar,"ntPRCFG_N_OUT_L0_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_N_OUT_L0 = wire *strVar;

    sprintf(strVar,"ntGRS_N_OUT_L0_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OUT_L0 = wire *strVar;

    sprintf(strVar,"ntGWEN_OUT_L0_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OUT_L0 = wire *strVar;

    sprintf(strVar,"ntPOR_N_OUT_L0_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OUT_L0 = wire *strVar;

    sprintf(strVar,"ntPUP_REL_N_OUT_L0_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OUT_L0 = wire *strVar;

    sprintf(strVar,"ntGLOGEN_OUT_L0_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT_L0 = wire *strVar;

    sprintf(strVar,"ntPOR_N_1P8_OUT_R0_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P8_OUT_R0 = wire *strVar;

    sprintf(strVar,"ntPRCFG_N_OUT_R0_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_N_OUT_R0 = wire *strVar;

    sprintf(strVar,"ntGRS_N_OUT_R0_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OUT_R0 = wire *strVar;

    sprintf(strVar,"ntGWEN_OUT_R0_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OUT_R0 = wire *strVar;

    sprintf(strVar,"ntPOR_N_OUT_R0_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OUT_R0 = wire *strVar;

    sprintf(strVar,"ntPUP_REL_N_OUT_R0_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OUT_R0 = wire *strVar;

    sprintf(strVar,"ntGLOGEN_OUT_R0_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT_R0 = wire *strVar;

    sprintf(strVar,"ntTIEH0_%d_%d",sx,sy);
    &wire ntRef_ntTIEH0 = wire *strVar;

    sprintf(strVar,"ntTIEL0_%d_%d",sx,sy);
    &wire ntRef_ntTIEL0 = wire *strVar;

    sprintf(strVar, "PREGMUXC_TILE_%d_%d", sx, sy);

    device PREGMUXC_TILE *strVar
          port map (
                      CLK_HCKB0L            => ntRef_ntCLK_HCKB0L,
                      CLK_HCKB0R            => ntRef_ntCLK_HCKB0R,
                      CLK_PREGMUXOUT        => ntRef_ntCLK_PREGMUXOUT,
                      CLK_USCM_BUF          => ntRef_ntCLK_USCM_BUF,

                      TIEH0           => ntRef_ntTIEH0,
                      TIEL0           => ntRef_ntTIEL0
                    )
        @([sx,sy]);

    STRUCT inc_spec_pregmuxc incVar;
    string pin_SRB;
    string pin_logic_device;
    string attribute_IO;
    int loc_SRB;
    string dir;
    int ty_srb,sy_srb;
    int sx_srb = tx * NUM_GRID_X;

    foreach incVar(inc_pregmuxc_srb_spec)
    {
        pin_SRB = incVar.port_name_SRB;
        pin_logic_device = incVar.port_name_device;
        attribute_IO = incVar.attribute_IO;
        loc_SRB = incVar.loc_SRB;   
        sy_srb = sy + loc_SRB*NUM_GRID_Y;

        if(attribute_IO =="I")
        { 
          
           connect(<pin *pin_logic_device of <device PREGMUXC_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
        }
    }
    

}// end of function place_pregmuxc_tile
/********************************************************************************
********************************************************************************/
function place_ckeb_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;

    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;


    string strVar;

    sprintf(strVar,"ntCLK_CKEB0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_CKEB0[11:0] = wire *strVar[11:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_CKEB1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_CKEB1[11:0] = wire *strVar[11:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntPOR_N_1P8_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P8_OUT_0 = wire *strVar;

    sprintf(strVar,"ntPOR_N_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OUT_0 = wire *strVar;

    sprintf(strVar,"ntPUP_REL_N_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OUT_0 = wire *strVar;

    sprintf(strVar,"ntGLOGEN_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT_0 = wire *strVar;

    sprintf(strVar,"ntPRCFG_N_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_N_OUT_0 = wire *strVar;

    sprintf(strVar,"ntRST_N_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntRST_N_OUT_0 = wire *strVar;

    sprintf(strVar,"ntGRS_N_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OUT_0 = wire *strVar;

    sprintf(strVar,"ntGWEN_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OUT_0 = wire *strVar;

    sprintf(strVar,"ntPOR_N_1P8_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P8_OUT_1 = wire *strVar;

    sprintf(strVar,"ntPOR_N_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OUT_1 = wire *strVar;

    sprintf(strVar,"ntPUP_REL_N_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OUT_1 = wire *strVar;

    sprintf(strVar,"ntGLOGEN_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT_1 = wire *strVar;

    sprintf(strVar,"ntPRCFG_N_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_N_OUT_1 = wire *strVar;

    sprintf(strVar,"ntRST_N_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntRST_N_OUT_1 = wire *strVar;

    sprintf(strVar,"ntGRS_N_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OUT_1 = wire *strVar;

    sprintf(strVar,"ntGWEN_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OUT_1 = wire *strVar;

    sprintf(strVar,"ntGLOGEN_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_NEXT = wire *strVar;

    sprintf(strVar,"ntPOR_N_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_NEXT = wire *strVar;

    sprintf(strVar,"ntGLOGEN_NEXT0_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_NEXT0_OUT = wire *strVar;

    sprintf(strVar,"ntPOR_N_NEXT0_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_NEXT0_OUT = wire *strVar;

    sprintf(strVar,"ntGLOGEN_SRB_0_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_SRB_0 = wire *strVar;

    sprintf(strVar,"ntGLOGEN_SRB_1_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_SRB_1 = wire *strVar;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar, "CKEB_TILE_%d_%d", sx, sy);

    device CKEB_TILE *strVar
          port map (
                      CLK_CKEB0        => ntRef_ntCLK_CKEB0,
                      CLK_CKEB1        => ntRef_ntCLK_CKEB1,

                      POR_N_1P8_OUT_0  => ntRef_ntPOR_N_1P8_OUT_0,
                      PRCFG_N_OUT_0    => ntRef_ntPRCFG_N_OUT_0,
                      RST_N_OUT_0      => ntRef_ntRST_N_OUT_0,
                      GRS_N_OUT_0      => ntRef_ntGRS_N_OUT_0,
                      GWEN_OUT_0       => ntRef_ntGWEN_OUT_0,
                      POR_N_OUT_0      => ntRef_ntPOR_N_OUT_0,
                      PUP_REL_N_OUT_0  => ntRef_ntPUP_REL_N_OUT_0,
                      GLOGEN_OUT_0     => ntRef_ntGLOGEN_OUT_0,
                      POR_N_1P8_OUT_1  => ntRef_ntPOR_N_1P8_OUT_1,
                      PRCFG_N_OUT_1    => ntRef_ntPRCFG_N_OUT_1,
                      RST_N_OUT_1      => ntRef_ntRST_N_OUT_1,
                      GRS_N_OUT_1      => ntRef_ntGRS_N_OUT_1,
                      GWEN_OUT_1       => ntRef_ntGWEN_OUT_1,
                      POR_N_OUT_1      => ntRef_ntPOR_N_OUT_1,
                      PUP_REL_N_OUT_1  => ntRef_ntPUP_REL_N_OUT_1,
                      GLOGEN_OUT_1     => ntRef_ntGLOGEN_OUT_1,
                      GLOGEN_NEXT      => ntRef_ntGLOGEN_NEXT,
                      POR_N_NEXT       => ntRef_ntPOR_N_NEXT,
                      GLOGEN_NEXT0_OUT => ntRef_ntGLOGEN_NEXT0_OUT,
                      POR_N_NEXT0_OUT  => ntRef_ntPOR_N_NEXT0_OUT,
                      GLOGEN_SRB_0     => ntRef_ntGLOGEN_SRB_0,
                      GLOGEN_SRB_1     => ntRef_ntGLOGEN_SRB_1,

                      TIEHI            => ntRef_ntTIEHI         
                    )
        @([sx,sy]);

}// end of function place_ckeb_tile
/********************************************************************************
********************************************************************************/
function place_ckeb2_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;

    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    string strVar;
    sprintf(strVar,"ntCLK_CKEB0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_CKEB0[11:0] = wire *strVar[11:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_CKEB1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_CKEB1[11:0] = wire *strVar[11:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntRST_N_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntRST_N_OUT_0 = wire *strVar;

    sprintf(strVar,"ntGRS_N_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OUT_0 = wire *strVar;

    sprintf(strVar,"ntGWEN_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OUT_0 = wire *strVar;

    sprintf(strVar,"ntPOR_N_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OUT_0 = wire *strVar;

    sprintf(strVar,"ntPOR_N_1P8_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P8_OUT_0 = wire *strVar;

    sprintf(strVar,"ntPUP_REL_N_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OUT_0 = wire *strVar;

    sprintf(strVar,"ntGLOGEN_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT_0 = wire *strVar;

    sprintf(strVar,"ntRST_N_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntRST_N_NEXT = wire *strVar;

    sprintf(strVar,"ntGRS_N_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_NEXT = wire *strVar;

    sprintf(strVar,"ntGWEN_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_NEXT = wire *strVar;

    sprintf(strVar,"ntPOR_N_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_NEXT = wire *strVar;

    sprintf(strVar,"ntPUP_REL_N_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_NEXT = wire *strVar;

    sprintf(strVar,"ntGLOGEN_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_NEXT = wire *strVar;

    sprintf(strVar,"ntPOR_N_1P8_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P8_OUT = wire *strVar;

    sprintf(strVar,"ntPRCFG_N_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_N_OUT = wire *strVar;

    sprintf(strVar,"ntRST_N_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntRST_N_OUT_1 = wire *strVar;

    sprintf(strVar,"ntGRS_N_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OUT_1 = wire *strVar;

    sprintf(strVar,"ntGWEN_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OUT_1 = wire *strVar;

    sprintf(strVar,"ntPOR_N_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OUT_1 = wire *strVar;

    sprintf(strVar,"ntPOR_N_1P8_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P8_OUT_1 = wire *strVar;

    sprintf(strVar,"ntPUP_REL_N_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OUT_1 = wire *strVar;

    sprintf(strVar,"ntGLOGEN_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT_1= wire *strVar;

    sprintf(strVar,"ntCLK_GLOBAL_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_OUT[11:0] = wire *strVar[11:0]        /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_PREGM_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PREGM_OUT[13:0] = wire *strVar[13:0]        /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_REGION_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_REGION_OUT[3:0] = wire *strVar[3:0]        /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar,"ntGLOGEN_NEXT0_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_NEXT0_OUT = wire *strVar;

    sprintf(strVar,"ntPOR_N_NEXT0_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_NEXT0_OUT = wire *strVar;

    sprintf(strVar,"ntGLOGEN_SRB_0_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_SRB_0 = wire *strVar;

    sprintf(strVar,"ntGLOGEN_SRB_1_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_SRB_1 = wire *strVar;


    sprintf(strVar, "CKEB2_TILE_%d_%d", sx, sy);

    device CKEB2_TILE *strVar
          port map (
//                      CLK_CKEB0        => ntRef_ntCLK_CKEB0,
//                      CLK_CKEB1        => ntRef_ntCLK_CKEB1,
//                      RST_N_OUT_0      => ntRef_ntRST_N_OUT_0,
//                      GRS_N_OUT_0      => ntRef_ntGRS_N_OUT_0,
//                      GWEN_OUT_0       => ntRef_ntGWEN_OUT_0,
//                      POR_N_OUT_0      => ntRef_ntPOR_N_OUT_0,
//                      POR_N_1P8_OUT_0  => ntRef_ntPOR_N_1P8_OUT_0,
//                      PUP_REL_N_OUT_0  => ntRef_ntPUP_REL_N_OUT_0,
//                      GLOGEN_OUT_0     => ntRef_ntGLOGEN_OUT_0,
//
//                      POR_N_NEXT       => ntRef_ntPOR_N_NEXT,
//                      GLOGEN_NEXT      => ntRef_ntGLOGEN_NEXT,
//                      RST_N_OUT_1      => ntRef_ntRST_N_OUT_1,
//                      GRS_N_OUT_1      => ntRef_ntGRS_N_OUT_1,
//                      GWEN_OUT_1       => ntRef_ntGWEN_OUT_1,
//                      POR_N_OUT_1      => ntRef_ntPOR_N_OUT_1,
//                      POR_N_1P8_OUT_1  => ntRef_ntPOR_N_1P8_OUT_1,
//                      PUP_REL_N_OUT_1  => ntRef_ntPUP_REL_N_OUT_1,
//                      GLOGEN_OUT_1     => ntRef_ntGLOGEN_OUT_1   ,
                      CLK_GLOBAL_OUT   => ntRef_ntCLK_GLOBAL_OUT,
                      CLK_PREGM_OUT    => ntRef_ntCLK_PREGM_OUT,
                      CLK_REGION_OUT   => ntRef_ntCLK_REGION_OUT,
//                      GLOGEN_NEXT0_OUT => ntRef_ntGLOGEN_NEXT0_OUT,
//                      POR_N_NEXT0_OUT  => ntRef_ntPOR_N_NEXT0_OUT,
//                      GLOGEN_SRB_0     => ntRef_ntGLOGEN_SRB_0,
//                      GLOGEN_SRB_1     => ntRef_ntGLOGEN_SRB_1,

                      TIEHI            => ntRef_ntTIEHI

                    )
        @([sx,sy]);

}// end of function place_ckeb2_tile
/********************************************************************************
********************************************************************************/
function place_iock_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;

    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;


    string strVar;

    sprintf(strVar,"ntCLK_GPLL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GPLL[2:0] = wire *strVar[2:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;           

    sprintf(strVar,"ntCLK_ION_D_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ION_D[3:0] = wire *strVar[3:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_ION_U_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ION_U[3:0] = wire *strVar[3:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_IOP_D_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOP_D[3:0] = wire *strVar[3:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_IOP_U_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOP_U[3:0] = wire *strVar[3:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_PPLL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PPLL[2:0] = wire *strVar[2:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;    

    sprintf(strVar,"ntCLK_PREGMUX_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PREGMUX_OUT[13:0] = wire *strVar[13:0]                   /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_RCKB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_RCKB[3:0] = wire *strVar[3:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_SCKMUX0_OUT_N_%d_%d",sx,sy);
    &wire ntRef_ntCLK_SCKMUX0_OUT_N[9:0] = wire *strVar[9:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_SCKMUX0_OUT_P_%d_%d",sx,sy);
    &wire ntRef_ntCLK_SCKMUX0_OUT_P[9:0] = wire *strVar[9:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_SCKMUX1_OUT_N_%d_%d",sx,sy);
    &wire ntRef_ntCLK_SCKMUX1_OUT_N[9:0] = wire *strVar[9:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_SCKMUX1_OUT_P_%d_%d",sx,sy);
    &wire ntRef_ntCLK_SCKMUX1_OUT_P[9:0] = wire *strVar[9:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_MRCKBOUT_D_P_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MRCKBOUT_D_P[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_MRCKBOUT_D_N_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MRCKBOUT_D_N[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_MRCKBOUT_U_P_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MRCKBOUT_U_P[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_MRCKBOUT_U_N_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MRCKBOUT_U_N[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_MRCKB_BUFD_P_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MRCKB_BUFD_P[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_MRCKB_BUFD_N_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MRCKB_BUFD_N[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_MRCKB_BUFU_P_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MRCKB_BUFU_P[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_MRCKB_BUFU_N_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MRCKB_BUFU_N[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_CPD_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_CPD_OUT[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGMCLK0_BUF_%d_%d",sx,sy);
    &wire ntRef_ntGMCLK0_BUF[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGMCLK1_BUF_%d_%d",sx,sy);
    &wire ntRef_ntGMCLK1_BUF[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGSCLK0_BUF_%d_%d",sx,sy);
    &wire ntRef_ntGSCLK0_BUF[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGSCLK1_BUF_%d_%d",sx,sy);
    &wire ntRef_ntGSCLK1_BUF[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;


    sprintf(strVar,"ntRST_N_OUT_%d_%d",sx,sy);
    &wire ntRef_ntRST_N_OUT = wire *strVar;

    sprintf(strVar,"ntGRS_N_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OUT = wire *strVar;

    sprintf(strVar,"ntGWEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OUT = wire *strVar;

    sprintf(strVar,"ntPOR_N_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OUT = wire *strVar;

    sprintf(strVar,"ntPUP_REL_N_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OUT = wire *strVar;

    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntGLOGEN_SRB_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_SRB = wire *strVar;

    sprintf(strVar,"ntGOUTEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_OUT = wire *strVar;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;



    sprintf(strVar, "IOCK_TILE_%d_%d", sx, sy);

    device IOCK_TILE *strVar
          port map (
                     CLK_GPLL             => ntRef_ntCLK_GPLL,    
                     CLK_PPLL             => ntRef_ntCLK_PPLL,  
                     CLK_ION_D            => ntRef_ntCLK_ION_D,  
                     CLK_ION_U            => ntRef_ntCLK_ION_U,  
                     CLK_IOP_D            => ntRef_ntCLK_IOP_D,  
                     CLK_IOP_U            => ntRef_ntCLK_IOP_U,  

                     CLK_RCKB             => ntRef_ntCLK_RCKB,            
                     CLK_PREGMUX_OUT      => ntRef_ntCLK_PREGMUX_OUT,    
                     CLK_SCKMUX0_OUT_N    => ntRef_ntCLK_SCKMUX0_OUT_N,      
                     CLK_SCKMUX0_OUT_P    => ntRef_ntCLK_SCKMUX0_OUT_P,             
                     CLK_SCKMUX1_OUT_N    => ntRef_ntCLK_SCKMUX1_OUT_N,      
                     CLK_SCKMUX1_OUT_P    => ntRef_ntCLK_SCKMUX1_OUT_P,
                     CLK_MRCKBOUT_D_P     => ntRef_ntCLK_MRCKBOUT_D_P,
                     CLK_MRCKBOUT_D_N     => ntRef_ntCLK_MRCKBOUT_D_N,
                     CLK_MRCKBOUT_U_P     => ntRef_ntCLK_MRCKBOUT_U_P,
                     CLK_MRCKBOUT_U_N     => ntRef_ntCLK_MRCKBOUT_U_N,
                     CLK_MRCKB_BUFD_P     => ntRef_ntCLK_MRCKB_BUFD_P,
                     CLK_MRCKB_BUFD_N     => ntRef_ntCLK_MRCKB_BUFD_N,
                     CLK_MRCKB_BUFU_P     => ntRef_ntCLK_MRCKB_BUFU_P,
                     CLK_MRCKB_BUFU_N     => ntRef_ntCLK_MRCKB_BUFU_N,
                     CLK_CPD_OUT          => ntRef_ntCLK_CPD_OUT,

                     GMCLK0_BUF           => ntRef_ntGMCLK0_BUF,
                     GMCLK1_BUF           => ntRef_ntGMCLK1_BUF,
                     GSCLK0_BUF           => ntRef_ntGSCLK0_BUF,
                     GSCLK1_BUF           => ntRef_ntGSCLK1_BUF,


                     RST_N_OUT            => ntRef_ntRST_N_OUT,
                     GRS_N_OUT            => ntRef_ntGRS_N_OUT,
                     GWEN_OUT             => ntRef_ntGWEN_OUT,
                     POR_N_OUT            => ntRef_ntPOR_N_OUT,
                     PUP_REL_N_OUT        => ntRef_ntPUP_REL_N_OUT,
                     GLOGEN_OUT           => ntRef_ntGLOGEN_OUT,
                     GLOGEN_SRB           => ntRef_ntGLOGEN_SRB,
                     GOUTEN_OUT           => ntRef_ntGOUTEN_OUT,

                     TIEHI                => ntRef_ntTIEHI                
//                     TIEL                 => ntRef_ntTIEL             
                                    )
        @([sx,sy]);

      STRUCT inc_spec_iock incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_srb;
      int sx_srb = (tx==1) ? sx+NUM_GRID_X : sx;

      foreach incVar(inc_iock_srb_spec)
      {
          pin_SRB = incVar.port_name_srb;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          sy_srb = (loc_SRB-25+ty)*NUM_GRID_Y; 
          
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device IOCK_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> =>  <wire *pin_logic_device of <device IOCK_TILE @[sx,sy]>>); 
          }
      }

}// end of function place_iock_tile


/********************************************************************************
********************************************************************************/
function place_iock_hp_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;

    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;


    string strVar;

    sprintf(strVar,"ntCLK_GPLL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GPLL[2:0] = wire *strVar[2:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;           

    sprintf(strVar,"ntCLK_ION_D_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ION_D[3:0] = wire *strVar[3:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_ION_U_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ION_U[3:0] = wire *strVar[3:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_IOP_D_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOP_D[3:0] = wire *strVar[3:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_IOP_U_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOP_U[3:0] = wire *strVar[3:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_PPLL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PPLL[2:0] = wire *strVar[2:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;    

    sprintf(strVar,"ntCLK_PREGMUX_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PREGMUX_OUT[13:0] = wire *strVar[13:0]                   /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_RCKB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_RCKB[3:0] = wire *strVar[3:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_SCKMUX0_OUT_N_%d_%d",sx,sy);
    &wire ntRef_ntCLK_SCKMUX0_OUT_N[9:0] = wire *strVar[9:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_SCKMUX0_OUT_P_%d_%d",sx,sy);
    &wire ntRef_ntCLK_SCKMUX0_OUT_P[9:0] = wire *strVar[9:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_SCKMUX1_OUT_N_%d_%d",sx,sy);
    &wire ntRef_ntCLK_SCKMUX1_OUT_N[9:0] = wire *strVar[9:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_SCKMUX1_OUT_P_%d_%d",sx,sy);
    &wire ntRef_ntCLK_SCKMUX1_OUT_P[9:0] = wire *strVar[9:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_MRCKBOUT_D_P_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MRCKBOUT_D_P[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_MRCKBOUT_D_N_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MRCKBOUT_D_N[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_MRCKBOUT_U_P_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MRCKBOUT_U_P[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_MRCKBOUT_U_N_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MRCKBOUT_U_N[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_MRCKB_BUFD_P_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MRCKB_BUFD_P[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_MRCKB_BUFD_N_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MRCKB_BUFD_N[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_MRCKB_BUFU_P_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MRCKB_BUFU_P[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_MRCKB_BUFU_N_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MRCKB_BUFU_N[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_CPD_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_CPD_OUT[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGMCLK0_BUF_%d_%d",sx,sy);
    &wire ntRef_ntGMCLK0_BUF[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGMCLK1_BUF_%d_%d",sx,sy);
    &wire ntRef_ntGMCLK1_BUF[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGSCLK0_BUF_%d_%d",sx,sy);
    &wire ntRef_ntGSCLK0_BUF[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGSCLK1_BUF_%d_%d",sx,sy);
    &wire ntRef_ntGSCLK1_BUF[1:0] = wire *strVar[1:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;


    sprintf(strVar,"ntRST_N_OUT_%d_%d",sx,sy);
    &wire ntRef_ntRST_N_OUT = wire *strVar;

    sprintf(strVar,"ntGRS_N_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OUT = wire *strVar;

    sprintf(strVar,"ntGWEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OUT = wire *strVar;

    sprintf(strVar,"ntPOR_N_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OUT = wire *strVar;

    sprintf(strVar,"ntPUP_REL_N_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OUT = wire *strVar;

    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntGLOGEN_SRB_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_SRB = wire *strVar;

    sprintf(strVar,"ntGOUTEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_OUT = wire *strVar;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;



    sprintf(strVar, "IOCK_HP_TILE_%d_%d", sx, sy);

    device IOCK_HP_TILE *strVar
          port map (
                     CLK_GPLL             => ntRef_ntCLK_GPLL,    
                     CLK_PPLL             => ntRef_ntCLK_PPLL,  
                     CLK_ION_D            => ntRef_ntCLK_ION_D,  
                     CLK_ION_U            => ntRef_ntCLK_ION_U,  
                     CLK_IOP_D            => ntRef_ntCLK_IOP_D,  
                     CLK_IOP_U            => ntRef_ntCLK_IOP_U,  

                     CLK_RCKB             => ntRef_ntCLK_RCKB,            
                     CLK_PREGMUX_OUT      => ntRef_ntCLK_PREGMUX_OUT,    
                     CLK_SCKMUX0_OUT_N    => ntRef_ntCLK_SCKMUX0_OUT_N,      
                     CLK_SCKMUX0_OUT_P    => ntRef_ntCLK_SCKMUX0_OUT_P,             
                     CLK_SCKMUX1_OUT_N    => ntRef_ntCLK_SCKMUX1_OUT_N,      
                     CLK_SCKMUX1_OUT_P    => ntRef_ntCLK_SCKMUX1_OUT_P,
                     CLK_MRCKBOUT_D_P     => ntRef_ntCLK_MRCKBOUT_D_P,
                     CLK_MRCKBOUT_D_N     => ntRef_ntCLK_MRCKBOUT_D_N,
                     CLK_MRCKBOUT_U_P     => ntRef_ntCLK_MRCKBOUT_U_P,
                     CLK_MRCKBOUT_U_N     => ntRef_ntCLK_MRCKBOUT_U_N,
                     CLK_MRCKB_BUFD_P     => ntRef_ntCLK_MRCKB_BUFD_P,
                     CLK_MRCKB_BUFD_N     => ntRef_ntCLK_MRCKB_BUFD_N,
                     CLK_MRCKB_BUFU_P     => ntRef_ntCLK_MRCKB_BUFU_P,
                     CLK_MRCKB_BUFU_N     => ntRef_ntCLK_MRCKB_BUFU_N,
                     CLK_CPD_OUT          => ntRef_ntCLK_CPD_OUT,

                     GMCLK0_BUF           => ntRef_ntGMCLK0_BUF,
                     GMCLK1_BUF           => ntRef_ntGMCLK1_BUF,
                     GSCLK0_BUF           => ntRef_ntGSCLK0_BUF,
                     GSCLK1_BUF           => ntRef_ntGSCLK1_BUF,


                     RST_N_OUT            => ntRef_ntRST_N_OUT,
                     GRS_N_OUT            => ntRef_ntGRS_N_OUT,
                     GWEN_OUT             => ntRef_ntGWEN_OUT,
                     POR_N_OUT            => ntRef_ntPOR_N_OUT,
                     PUP_REL_N_OUT        => ntRef_ntPUP_REL_N_OUT,
                     GLOGEN_OUT           => ntRef_ntGLOGEN_OUT,
                     GLOGEN_SRB           => ntRef_ntGLOGEN_SRB,
                     GOUTEN_OUT           => ntRef_ntGOUTEN_OUT,

                     TIEHI                => ntRef_ntTIEHI                
//                     TIEL                 => ntRef_ntTIEL             
                                    )
        @([sx,sy]);

      STRUCT inc_spec_iock_hp incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_srb;
      int sx_srb = (tx==1) ? sx+NUM_GRID_X : sx;

      foreach incVar(inc_iock_hp_srb_spec)
      {
          pin_SRB = incVar.port_name_srb;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          sy_srb = (loc_SRB-25+ty)*NUM_GRID_Y; 
          
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device IOCK_HP_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> =>  <wire *pin_logic_device of <device IOCK_HP_TILE @[sx,sy]>>); 
          }
      }

}// end of function place_iock_hp_tile



/********************************************************************************
********************************************************************************/
//flag = 0, place iolhr_tile;
//flag = 1, place iolhp_tile
function place_iol_tile(unsigned int tx,ty,flag)
{   
    unsigned int sx, sy;

    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;

    string strVar;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar,"ntTIELO_%d_%d",sx,sy);
    &wire ntRef_ntTIELO = wire *strVar;

    sprintf(strVar,"ntDO_N_%d_%d",sx,sy);
    &wire ntRef_ntDO_N = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDO_P_%d_%d",sx,sy);
    &wire ntRef_ntDO_P = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDI_TO_CLK_%d_%d",sx,sy);
    &wire ntRef_ntDI_TO_CLK = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDI_TO_CLKB_%d_%d",sx,sy);
    &wire ntRef_ntDI_TO_CLKB = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDI_TO_FABRIC_%d_%d",sx,sy);
    &wire ntRef_ntDI_TO_FABRIC = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntISHIFTOUT0_%d_%d",sx,sy);
    &wire ntRef_ntISHIFTOUT0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntISHIFTOUT1_%d_%d",sx,sy);
    &wire ntRef_ntISHIFTOUT1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntOSHIFTOUT0_%d_%d",sx,sy);
    &wire ntRef_ntOSHIFTOUT0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntOSHIFTOUT1_%d_%d",sx,sy);
    &wire ntRef_ntOSHIFTOUT1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMIPI_SW_DYN_O_%d_%d",sx,sy);
    &wire ntRef_ntMIPI_SW_DYN_O = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntINBUF_DYN_DIS_N_O_%d_%d",sx,sy);
    &wire ntRef_ntINBUF_DYN_DIS_N_O = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntOFB_%d_%d",sx,sy);
    &wire ntRef_ntOFB = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTFB_%d_%d",sx,sy);
    &wire ntRef_ntTFB = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM_%d_%d",sx,sy);
    &wire ntRef_ntTERM = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM_FB_%d_%d",sx,sy);
    &wire ntRef_ntTERM_FB = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDO_CAS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntDO_CAS_OUT = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTO_CAS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTO_CAS_OUT = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM_CAS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTERM_CAS_OUT = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA[7:0] = wire *strVar[7:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    if(flag==0)
    {
      sprintf(strVar, "IOLHR_TILE_%d_%d", sx, sy);
      device IOLHR_TILE *strVar
           port map (
                      DO_P              => ntRef_ntDO_P,
                      DO_N              => ntRef_ntDO_N,
                      DI_TO_CLK         => ntRef_ntDI_TO_CLK,
                      DI_TO_CLKB        => ntRef_ntDI_TO_CLKB,
                      DI_TO_FABRIC      => ntRef_ntDI_TO_FABRIC,
                      ISHIFTOUT0        => ntRef_ntISHIFTOUT0,
                      ISHIFTOUT1        => ntRef_ntISHIFTOUT1,
                      OSHIFTOUT0        => ntRef_ntOSHIFTOUT0,
                      OSHIFTOUT1        => ntRef_ntOSHIFTOUT1,
                      OFB               => ntRef_ntOFB,
                      TFB               => ntRef_ntTFB,
                      TERM              => ntRef_ntTERM,
                      TERM_FB           => ntRef_ntTERM_FB,
                      DO_CAS_OUT        => ntRef_ntDO_CAS_OUT,
                      TO_CAS_OUT        => ntRef_ntTO_CAS_OUT,
                      TERM_CAS_OUT      => ntRef_ntTERM_CAS_OUT,
                      RX_DATA           => ntRef_ntRX_DATA,
                      MIPI_SW_DYN_O     => ntRef_ntMIPI_SW_DYN_O,
                      INBUF_DYN_DIS_N_O => ntRef_ntINBUF_DYN_DIS_N_O,

                      TIEHI           => ntRef_ntTIEHI,
                      TIELO           => ntRef_ntTIELO
                    )
          @([sx,sy]);

      STRUCT inc_spec_iolhr incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      unsigned int sx_SRB;
      sx_SRB = sx-3;
      int cnt;

      foreach incVar(inc_iolhr_srb_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;

          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }

          if(attribute_IO =="I")
          { 

            connect(<pin *pin_logic_device of <device IOLHR_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_SRB,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy_SRB]>> =>  <wire *pin_logic_device of <device IOLHR_TILE @[sx,sy]>>);
          }
      }     
    }     
 

}// end of function place_iol_tile



/********************************************************************************
********************************************************************************/
//flag = 0, place iolhr_tile;
//flag = 1, place iolhp_tile
function place_iol_hp_tile(unsigned int tx,ty,flag)
{   
    unsigned int sx, sy;

    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;

    string strVar;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar,"ntTIELO_%d_%d",sx,sy);
    &wire ntRef_ntTIELO = wire *strVar;

    sprintf(strVar,"ntDO_N_%d_%d",sx,sy);
    &wire ntRef_ntDO_N = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDO_P_%d_%d",sx,sy);
    &wire ntRef_ntDO_P = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDI_TO_CLK_%d_%d",sx,sy);
    &wire ntRef_ntDI_TO_CLK = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDI_TO_CLKB_%d_%d",sx,sy);
    &wire ntRef_ntDI_TO_CLKB = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDI_TO_FABRIC_%d_%d",sx,sy);
    &wire ntRef_ntDI_TO_FABRIC = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntISHIFTOUT0_%d_%d",sx,sy);
    &wire ntRef_ntISHIFTOUT0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntISHIFTOUT1_%d_%d",sx,sy);
    &wire ntRef_ntISHIFTOUT1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntOSHIFTOUT0_%d_%d",sx,sy);
    &wire ntRef_ntOSHIFTOUT0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntOSHIFTOUT1_%d_%d",sx,sy);
    &wire ntRef_ntOSHIFTOUT1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMIPI_SW_DYN_O_%d_%d",sx,sy);
    &wire ntRef_ntMIPI_SW_DYN_O = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntINBUF_DYN_DIS_N_O_%d_%d",sx,sy);
    &wire ntRef_ntINBUF_DYN_DIS_N_O = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntOFB_%d_%d",sx,sy);
    &wire ntRef_ntOFB = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTFB_%d_%d",sx,sy);
    &wire ntRef_ntTFB = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM_%d_%d",sx,sy);
    &wire ntRef_ntTERM = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM_FB_%d_%d",sx,sy);
    &wire ntRef_ntTERM_FB = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDO_CAS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntDO_CAS_OUT = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTO_CAS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTO_CAS_OUT = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM_CAS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTERM_CAS_OUT = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA[7:0] = wire *strVar[7:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTBYTE_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTBYTE_OUT = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERMBYTE_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTERMBYTE_OUT = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;


    if(flag==0)
    {
      sprintf(strVar, "IOLHP_TILE_%d_%d", sx, sy);
      device IOLHP_TILE *strVar
           port map (
                      DO_P              => ntRef_ntDO_P,
                      DO_N              => ntRef_ntDO_N,
                      DI_TO_CLK         => ntRef_ntDI_TO_CLK,
                      DI_TO_CLKB        => ntRef_ntDI_TO_CLKB,
                      DI_TO_FABRIC      => ntRef_ntDI_TO_FABRIC,
                      ISHIFTOUT0        => ntRef_ntISHIFTOUT0,
                      ISHIFTOUT1        => ntRef_ntISHIFTOUT1,
                      OSHIFTOUT0        => ntRef_ntOSHIFTOUT0,
                      OSHIFTOUT1        => ntRef_ntOSHIFTOUT1,
                      OFB               => ntRef_ntOFB,
                      TFB               => ntRef_ntTFB,
                      TERM              => ntRef_ntTERM,
                      TERM_FB           => ntRef_ntTERM_FB,
                      DO_CAS_OUT        => ntRef_ntDO_CAS_OUT,
                      TO_CAS_OUT        => ntRef_ntTO_CAS_OUT,
                      TERM_CAS_OUT      => ntRef_ntTERM_CAS_OUT,
                      RX_DATA           => ntRef_ntRX_DATA,
                      MIPI_SW_DYN_O     => ntRef_ntMIPI_SW_DYN_O,
                      INBUF_DYN_DIS_N_O => ntRef_ntINBUF_DYN_DIS_N_O,

                      TIEHI           => ntRef_ntTIEHI,
                      TIELO           => ntRef_ntTIELO,

                      TERMBYTE_OUT    => ntRef_ntTERMBYTE_OUT,
                      TBYTE_OUT       => ntRef_ntTBYTE_OUT
                    )
          @([sx,sy]);

      STRUCT inc_spec_iolhp incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      unsigned int sx_SRB;
      sx_SRB = sx-3;
      int cnt;

      foreach incVar(inc_iolhp_srb_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;

          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }

          if(attribute_IO =="I")
          { 

            connect(<pin *pin_logic_device of <device IOLHP_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_SRB,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy_SRB]>> =>  <wire *pin_logic_device of <device IOLHP_TILE @[sx,sy]>>);
          }
      }     
    }     
}// end of function place_iol_tile


/********************************************************************************
********************************************************************************/
function place_adc_tile(unsigned int tx,ty,tx_srb)
{   
    unsigned int sx, sy;

    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;

    string strVar;
    sprintf(strVar,"ntADC_VREFP_CP_%d_%d",sx,sy);
    &wire ntRef_ntADC_VREFP_CP = wire *strVar;

    sprintf(strVar,"ntOVER_TEMP_CCS_%d_%d",sx,sy);
    &wire ntRef_ntOVER_TEMP_CCS = wire *strVar;

    sprintf(strVar,"ntOSC_TURN_ON_%d_%d",sx,sy);
    &wire ntRef_ntOSC_TURN_ON = wire *strVar;

    sprintf(strVar,"ntPRDATA_%d_%d",sx,sy);
    &wire ntRef_ntPRDATA[15:0] = wire *strVar[15:0];

    sprintf(strVar,"ntPREADY_%d_%d",sx,sy);
    &wire ntRef_ntPREADY = wire *strVar;

    sprintf(strVar,"ntTDO_%d_%d",sx,sy);
    &wire ntRef_ntTDO = wire *strVar;

    sprintf(strVar,"ntADC_CLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntADC_CLK_OUT = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntLOGIC_DONE_A_%d_%d",sx,sy);
    &wire ntRef_ntLOGIC_DONE_A = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntLOGIC_DONE_B_%d_%d",sx,sy);
    &wire ntRef_ntLOGIC_DONE_B = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPMODIFIED_%d_%d",sx,sy);
    &wire ntRef_ntPMODIFIED = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntOVER_TEMP_%d_%d",sx,sy);
    &wire ntRef_ntOVER_TEMP = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntALARM_%d_%d",sx,sy);
    &wire ntRef_ntALARM[4:0] = wire *strVar[4:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO_0 = wire *strVar;

    sprintf(strVar,"ntTEST_SO_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO_1 = wire *strVar;

    sprintf(strVar,"ntTEST_SO_2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO_2 = wire *strVar;

    sprintf(strVar,"ntTEST_SO_3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO_3 = wire *strVar;

    sprintf(strVar, "ADC_TILE_%d_%d", sx, sy);
    device ADC_TILE *strVar
         port map (
                    ADC_VREFP_CP  =>  ntRef_ntADC_VREFP_CP,
                    OVER_TEMP_CCS =>  ntRef_ntOVER_TEMP_CCS,
                    OSC_TURN_ON  =>  ntRef_ntOSC_TURN_ON,
                    PRDATA        =>  ntRef_ntPRDATA,
                    PREADY        =>  ntRef_ntPREADY,
                    TDO           =>  ntRef_ntTDO,
                    ADC_CLK_OUT   =>  ntRef_ntADC_CLK_OUT,
                    LOGIC_DONE_A  =>  ntRef_ntLOGIC_DONE_A,
                    LOGIC_DONE_B  =>  ntRef_ntLOGIC_DONE_B,
                    PMODIFIED     =>  ntRef_ntPMODIFIED,
                    OVER_TEMP     =>  ntRef_ntOVER_TEMP,
                    ALARM         =>  ntRef_ntALARM,
                    TEST_SO_0     =>  ntRef_ntTEST_SO_0,
                    TEST_SO_1     =>  ntRef_ntTEST_SO_1,
                    TEST_SO_2     =>  ntRef_ntTEST_SO_2,
                    TEST_SO_3     =>  ntRef_ntTEST_SO_3
                  )
        @([sx,sy]);

    STRUCT inc_spec_adc incVar;
    string pin_srb;
    string pin_logic_device;
    string attribute_IO;
    int loc_srb;
    int sy_srb;

    unsigned int sx_srb;
    sx_srb = tx_srb * NUM_GRID_X;
    int cnt;

    foreach incVar(inc_adc_srb_spec)
    {
        pin_srb = incVar.port_name_srb;
        pin_logic_device = incVar.port_name_device;
        attribute_IO = incVar.attribute_IO;
        loc_srb = incVar.loc_srb;

        if(!loc_srb)
        {
          sy_srb = sy;
        }
        else
        {
          sy_srb = sy + loc_srb*NUM_GRID_Y; 
        }

        if(attribute_IO =="I")
        { 

          connect(<pin *pin_logic_device of <device ADC_TILE @[sx,sy]>> => <wire *pin_srb of <device SRB_TILE@[sx_srb,sy_srb]>>);
        }
        else
        {
          connect(<pin *pin_srb of<device SRB_TILE@[sx_srb,sy_srb]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx_srb,sy_srb]>>
                                                                         : <wire *pin_logic_device of <device ADC_TILE @[sx,sy]>>); 
        }
    }     
        
   

}// end of function place_adc_tile
/********************************************************************************
********************************************************************************/
function place_ccs_tile(unsigned int tx,ty,tx_srb)
{   
    unsigned int sx, sy;

    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;


    string strVar;
    sprintf(strVar,"ntMASK_EN_%d_%d",sx,sy);
    &wire ntRef_ntMASK_EN = wire *strVar;

    sprintf(strVar,"ntPRCFG_EN_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_EN = wire *strVar;

    sprintf(strVar,"ntJRST_%d_%d",sx,sy);
    &wire ntRef_ntJRST = wire *strVar;

    sprintf(strVar,"ntJRTI_%d_%d",sx,sy);
    &wire ntRef_ntJRTI = wire *strVar;

    sprintf(strVar,"ntCLOCKDR_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR = wire *strVar;

    sprintf(strVar,"ntBSMODE_1_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE_1 = wire *strVar;

    sprintf(strVar,"ntBSMODE_2_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE_2 = wire *strVar;

    sprintf(strVar,"ntBSMODE_3_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE_3 = wire *strVar;

    sprintf(strVar,"ntSHIFTDR_%d_%d",sx,sy);
    &wire ntRef_ntSHIFTDR = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntUPDATEDR_ADC_%d_%d",sx,sy);
    &wire ntRef_ntUPDATEDR_ADC = wire *strVar;

    sprintf(strVar,"ntSHIFTDR_ADC_%d_%d",sx,sy);
    &wire ntRef_ntSHIFTDR_ADC = wire *strVar;

    sprintf(strVar,"ntUPDATEDR_%d_%d",sx,sy);
    &wire ntRef_ntUPDATEDR = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFLG_JDRP_%d_%d",sx,sy);
    &wire ntRef_ntFLG_JDRP = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLOCKDR_DRP_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR_DRP = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMEM_INIT_%d_%d",sx,sy);
    &wire ntRef_ntMEM_INIT = wire *strVar;

    sprintf(strVar,"ntAC_MODE_%d_%d",sx,sy);
    &wire ntRef_ntAC_MODE = wire *strVar;

    sprintf(strVar,"ntAC_TEST_%d_%d",sx,sy);
    &wire ntRef_ntAC_TEST = wire *strVar;

    sprintf(strVar,"ntTCK1_ADC_%d_%d",sx,sy);
    &wire ntRef_ntTCK1_ADC = wire *strVar;

    sprintf(strVar,"ntTDI1_ADC_%d_%d",sx,sy);
    &wire ntRef_ntTDI1_ADC = wire *strVar;

    sprintf(strVar,"ntCAPTUREDR_%d_%d",sx,sy);
    &wire ntRef_ntCAPTUREDR = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTCK1_%d_%d",sx,sy);
    &wire ntRef_ntTCK1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTMS1_%d_%d",sx,sy);
    &wire ntRef_ntTMS1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTDI1_%d_%d",sx,sy);
    &wire ntRef_ntTDI1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFLG_USER1_%d_%d",sx,sy);
    &wire ntRef_ntFLG_USER1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLOCKDR1_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFLG_USER2_%d_%d",sx,sy);
    &wire ntRef_ntFLG_USER2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLOCKDR2_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFLG_USER3_%d_%d",sx,sy);
    &wire ntRef_ntFLG_USER3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLOCKDR3_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFLG_USER4_%d_%d",sx,sy);
    &wire ntRef_ntFLG_USER4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLOCKDR4_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_USER_O_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USER_O = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFCS_N_%d_%d",sx,sy);
    &wire ntRef_ntFCS_N = wire *strVar;

    sprintf(strVar,"ntDAISY_O_%d_%d",sx,sy);
    &wire ntRef_ntDAISY_O = wire *strVar;

    sprintf(strVar,"ntFWE_N_%d_%d",sx,sy);
    &wire ntRef_ntFWE_N = wire *strVar;

    sprintf(strVar,"ntFOE_N_%d_%d",sx,sy);
    &wire ntRef_ntFOE_N = wire *strVar;

    sprintf(strVar,"ntADR_%d_%d",sx,sy);
    &wire ntRef_ntADR[12:0] = wire *strVar[12:0];

    sprintf(strVar,"ntADV_N_%d_%d",sx,sy);
    &wire ntRef_ntADV_N = wire *strVar;

    sprintf(strVar,"ntRS_%d_%d",sx,sy);
    &wire ntRef_ntRS[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntDOUT_%d_%d",sx,sy);
    &wire ntRef_ntDOUT[31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntOUT_EN_FCS_N_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_FCS_N = wire *strVar;

    sprintf(strVar,"ntOUT_EN_FWE_N_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_FWE_N = wire *strVar;

    sprintf(strVar,"ntOUT_EN_FOE_N_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_FOE_N = wire *strVar;

    sprintf(strVar,"ntOUT_EN_FOE_N2ADR_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_FOE_N2ADR[12:0] = wire *strVar[12:0];

    sprintf(strVar,"ntOUT_EN_FOE_N2ADV_N_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_FOE_N2ADV_N = wire *strVar;

    sprintf(strVar,"ntOUT_EN_RS_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_RS[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntOUT_EN_D_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_D[31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntOUT_EN_D1_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_D1 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_D7_2_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_D7_2 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_D4_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_D4 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_D15_8_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_D15_8 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_D31_16_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_D31_16 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_DAISY_O_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_DAISY_O = wire *strVar;

    sprintf(strVar,"ntOPENDRAIN_DAISY_O_%d_%d",sx,sy);
    &wire ntRef_ntOPENDRAIN_DAISY_O = wire *strVar;

    sprintf(strVar,"ntGPOR_N_%d_%d",sx,sy);
    &wire ntRef_ntGPOR_N = wire *strVar;

    sprintf(strVar,"ntPOR_ERASE_N_%d_%d",sx,sy);
    &wire ntRef_ntPOR_ERASE_N = wire *strVar;

    sprintf(strVar,"ntPOR_SRAM_N_%d_%d",sx,sy);
    &wire ntRef_ntPOR_SRAM_N = wire *strVar;

    sprintf(strVar,"ntPOR_BLSR_N_%d_%d",sx,sy);
    &wire ntRef_ntPOR_BLSR_N = wire *strVar;

    sprintf(strVar,"ntCRAM_VDDT_N_%d_%d",sx,sy);
    &wire ntRef_ntCRAM_VDDT_N = wire *strVar;

    sprintf(strVar,"ntCLK_CRAM_%d_%d",sx,sy);
    &wire ntRef_ntCLK_CRAM = wire *strVar;

    sprintf(strVar,"ntCMEM_TYPE_%d_%d",sx,sy);
    &wire ntRef_ntCMEM_TYPE[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntERASE_EN_%d_%d",sx,sy);
    &wire ntRef_ntERASE_EN = wire *strVar;

    sprintf(strVar,"ntWL_ON_%d_%d",sx,sy);
    &wire ntRef_ntWL_ON = wire *strVar;

    sprintf(strVar,"ntFRAME_ADDR_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCOLUMN_ADDR_%d_%d",sx,sy);
    &wire ntRef_ntCOLUMN_ADDR[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntPROG_ON_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON = wire *strVar;

    sprintf(strVar,"ntPROG_CAP_%d_%d",sx,sy);
    &wire ntRef_ntPROG_CAP = wire *strVar;

    sprintf(strVar,"ntREGION_SEL_%d_%d",sx,sy);
    &wire ntRef_ntREGION_SEL[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntREGION_RW_EN_%d_%d",sx,sy);
    &wire ntRef_ntREGION_RW_EN[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntCDATA_%d_%d",sx,sy);
    &wire ntRef_ntCDATA[31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntPRECHGE_%d_%d",sx,sy);
    &wire ntRef_ntPRECHGE = wire *strVar;

    sprintf(strVar,"ntREAD_%d_%d",sx,sy);
    &wire ntRef_ntREAD = wire *strVar;

    sprintf(strVar,"ntRDBK_ON_%d_%d",sx,sy);
    &wire ntRef_ntRDBK_ON = wire *strVar;

    sprintf(strVar,"ntRDBK_CAP_%d_%d",sx,sy);
    &wire ntRef_ntRDBK_CAP = wire *strVar;

    sprintf(strVar,"ntCFGMOD2D2_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD2D2 = wire *strVar;

    sprintf(strVar,"ntCFGMOD2D4_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD2D4 = wire *strVar;

    sprintf(strVar,"ntCFGMOD2D5_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD2D5 = wire *strVar;

    sprintf(strVar,"ntCFGMOD2D6_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD2D6 = wire *strVar;

    sprintf(strVar,"ntCFGMOD2D7_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD2D7 = wire *strVar;

    sprintf(strVar,"ntCFGMOD2RDWR_N_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD2RDWR_N = wire *strVar;

    sprintf(strVar,"ntCFGMOD_D1_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_D1 = wire *strVar;

    sprintf(strVar,"ntCFGMOD_P2D3_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_P2D3 = wire *strVar;

    sprintf(strVar,"ntCFGMOD_P2CS_N_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_P2CS_N = wire *strVar;

    sprintf(strVar,"ntCFGMOD_NP2ADR_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_NP2ADR[12:0] = wire *strVar[12:0];

    sprintf(strVar,"ntCFGMOD_NP2ADV_N_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_NP2ADV_N = wire *strVar;

    sprintf(strVar,"ntCFGMOD_NP2DAISY_O_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_NP2DAISY_O = wire *strVar;

    sprintf(strVar,"ntCFGMOD_NP2EMCLK_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_NP2EMCLK = wire *strVar;

    sprintf(strVar,"ntCFGMOD_NP2FOE_N_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_NP2FOE_N = wire *strVar;

    sprintf(strVar,"ntCFGMOD_NP2FWE_N_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_NP2FWE_N = wire *strVar;

    sprintf(strVar,"ntCFGMOD_NP2RS_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_NP2RS[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntCFGMOD_NP2IO_STATUS_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_NP2IO_STATUS = wire *strVar;

    sprintf(strVar,"ntCFGMOD_E_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_E = wire *strVar;

    sprintf(strVar,"ntCFGMOD_E_NP_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD_E_NP = wire *strVar;

    sprintf(strVar,"ntCFGMOD16_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD16[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCFGMOD32_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD32[15:0] = wire *strVar[15:0];

    sprintf(strVar,"ntGLOGEN_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN = wire *strVar;

    sprintf(strVar,"ntGOUTEN_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN = wire *strVar;

    sprintf(strVar,"ntGRS_N_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N = wire *strVar;

    sprintf(strVar,"ntGWEN_%d_%d",sx,sy);
    &wire ntRef_ntGWEN = wire *strVar;

    sprintf(strVar,"ntPUP_SEL_N_%d_%d",sx,sy);
    &wire ntRef_ntPUP_SEL_N = wire *strVar;

    sprintf(strVar,"ntVDDT_N_%d_%d",sx,sy);
    &wire ntRef_ntVDDT_N = wire *strVar;

    sprintf(strVar,"ntMCE_%d_%d",sx,sy);
    &wire ntRef_ntMCE = wire *strVar;

    sprintf(strVar,"ntMWR_%d_%d",sx,sy);
    &wire ntRef_ntMWR = wire *strVar;

    sprintf(strVar,"ntCLK_DRM_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DRM = wire *strVar;

    sprintf(strVar,"ntISPAL_DOUT_%d_%d",sx,sy);
    &wire ntRef_ntISPAL_DOUT [31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntRBCRC_ERR_%d_%d",sx,sy);
    &wire ntRef_ntRBCRC_ERR = wire *strVar;

    sprintf(strVar,"ntRBCRC_VALID_%d_%d",sx,sy);
    &wire ntRef_ntRBCRC_VALID = wire *strVar;

    sprintf(strVar,"ntSEU_VALID_%d_%d",sx,sy);
    &wire ntRef_ntSEU_VALID = wire *strVar;

    sprintf(strVar,"ntSEU_INDEX_%d_%d",sx,sy);
    &wire ntRef_ntSEU_INDEX  [11:0] = wire *strVar[11:0];

    sprintf(strVar,"ntSEU_SEC_%d_%d",sx,sy);
    &wire ntRef_ntSEU_SEC = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDRCFG_ERR_%d_%d",sx,sy);
    &wire ntRef_ntDRCFG_ERR = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDRCFG_OVER_%d_%d",sx,sy);
    &wire ntRef_ntDRCFG_OVER = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEU_DED_%d_%d",sx,sy);
    &wire ntRef_ntSEU_DED = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEU_FRAME_NADDR_%d_%d",sx,sy);
    &wire ntRef_ntSEU_FRAME_NADDR[7:0] = wire *strVar[7:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEU_FRAME_ADDR_%d_%d",sx,sy);
    &wire ntRef_ntSEU_FRAME_ADDR[7:0] = wire *strVar[7:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEU_REGION_NADDR_%d_%d",sx,sy);
    &wire ntRef_ntSEU_REGION_NADDR[4:0] = wire *strVar[4:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEU_REGION_ADDR_%d_%d",sx,sy);
    &wire ntRef_ntSEU_REGION_ADDR[4:0] = wire *strVar[4:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEU_COLUMN_NADDR_%d_%d",sx,sy);
    &wire ntRef_ntSEU_COLUMN_NADDR[7:0] = wire *strVar[7:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEU_COLUMN_ADDR_%d_%d",sx,sy);
    &wire ntRef_ntSEU_COLUMN_ADDR[7:0] = wire *strVar[7:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntUTDO_%d_%d",sx,sy);
    &wire ntRef_ntUTDO = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntUID_DOUT_%d_%d",sx,sy);
    &wire ntRef_ntUID_DOUT = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntWAKEUP_OVER_N_%d_%d",sx,sy);
    &wire ntRef_ntWAKEUP_OVER_N = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFUSE_%d_%d",sx,sy);
    &wire ntRef_ntFUSE[31:0] = wire *strVar[31:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPRCFG_OVER_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_OVER = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPRCFG_ERR_%d_%d",sx,sy);
    &wire ntRef_ntPRCFG_ERR = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_CFGS_%d_%d",sx,sy);
    &wire ntRef_ntCLK_CFGS = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_MODE_O_%d_%d",sx,sy);
    &wire ntRef_ntTEST_MODE_O = wire *strVar;

    sprintf(strVar,"ntTRIM_VREF_BANKL_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_VREF_BANKL[2:0] = wire *strVar[2:0];

    sprintf(strVar,"ntTRIM_VCM_BANKL_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_VCM_BANKL[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntTRIM_VOD_BANKL_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_VOD_BANKL[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntTRIM_VREF_BANKR_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_VREF_BANKR[2:0] = wire *strVar[2:0];

    sprintf(strVar,"ntTRIM_VCM_BANKR_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_VCM_BANKR[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntTRIM_VOD_BANKR_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_VOD_BANKR[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntTRIM_LDO_CRAM_R0_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_LDO_CRAM_R0[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTRIM_LDO_CRAM_R1_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_LDO_CRAM_R1[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTRIM_LDO_CRAM_R2_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_LDO_CRAM_R2[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTRIM_LDO_CRAM_R3_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_LDO_CRAM_R3[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTRIM_LDO_CRAM_R4_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_LDO_CRAM_R4[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTRIM_LDO_CRAM_R5_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_LDO_CRAM_R5[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTRIM_LDO_CRAM_R6_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_LDO_CRAM_R6[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTRIM_LDO_CRAM_R7_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_LDO_CRAM_R7[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTRIM_LDO_WL_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_LDO_WL[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntTRIM_TEST_SEL2_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_TEST_SEL2[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntTRIM_TEST_LDOBUF2_EN_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_TEST_LDOBUF2_EN = wire *strVar;

    sprintf(strVar,"ntTRIM_TEST_M2_EN_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_TEST_M2_EN = wire *strVar;

    sprintf(strVar,"ntTRIM_TEST_SEL1_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_TEST_SEL1[2:0] = wire *strVar[2:0];

    sprintf(strVar,"ntTRIM_TEST_LDOBUF1_EN_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_TEST_LDOBUF1_EN = wire *strVar;

    sprintf(strVar,"ntTRIM_TEST_M1_EN_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_TEST_M1_EN = wire *strVar;

    sprintf(strVar,"ntSCBV_OUT_%d_%d",sx,sy);
    &wire ntRef_ntSCBV_OUT = wire *strVar;

    sprintf(strVar,"ntTDI_BSCAN_%d_%d",sx,sy);
    &wire ntRef_ntTDI_BSCAN = wire *strVar;

    sprintf(strVar,"ntPOR_N_1P8_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1P8 = wire *strVar;
       
    sprintf(strVar,"ntCLK_ADC_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC = wire *strVar;

    sprintf(strVar,"ntCLK_CALI_%d_%d",sx,sy);
    &wire ntRef_ntCLK_CALI = wire *strVar;

                 
    sprintf(strVar,"ntVREF_1P22V_%d_%d",sx,sy);
    &wire ntRef_ntVREF_1P22V = wire *strVar;
          
    sprintf(strVar,"ntVREF_ADC_1P25V_%d_%d",sx,sy);
    &wire ntRef_ntVREF_ADC_1P25V = wire *strVar;
      
    sprintf(strVar,"ntCRAMLDO_VREF_%d_%d",sx,sy);
    &wire ntRef_ntCRAMLDO_VREF = wire *strVar;
        
    sprintf(strVar,"ntWLLDO_VREF_1V_%d_%d",sx,sy);
    &wire ntRef_ntWLLDO_VREF_1V = wire *strVar;
       
    sprintf(strVar,"ntPBAIS_10U_%d_%d",sx,sy);
    &wire ntRef_ntPBAIS_10U[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTRIM_ADC_SENSE_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_ADC_SENSE[11:0] = wire *strVar[11:0];

    sprintf(strVar,"ntTRIM_ADC_MODE_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_ADC_MODE = wire *strVar;

    sprintf(strVar,"ntTRIM_LDO_WL_SEL_%d_%d",sx,sy);
    &wire ntRef_ntTRIM_LDO_WL_SEL[2:0] = wire *strVar[2:0];

    sprintf(strVar,"ntICONST_10U_%d_%d",sx,sy);
    &wire ntRef_ntICONST_10U[21:0] = wire *strVar[21:0];

    sprintf(strVar,"ntREAD_LATCH_%d_%d",sx,sy);
    &wire ntRef_ntREAD_LATCH = wire *strVar;

    sprintf(strVar,"ntMFG_TEST1_ADC_%d_%d",sx,sy);
    &wire ntRef_ntMFG_TEST1_ADC = wire *strVar;

    sprintf(strVar,"ntMFG_TEST2_ADC_%d_%d",sx,sy);
    &wire ntRef_ntMFG_TEST2_ADC = wire *strVar;

    sprintf(strVar,"ntMFG_TEST_NC1_%d_%d",sx,sy);
    &wire ntRef_ntMFG_TEST_NC1 = wire *strVar;

    sprintf(strVar,"ntMFG_TEST_NC2_%d_%d",sx,sy);
    &wire ntRef_ntMFG_TEST_NC2 = wire *strVar;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar,"ntNC1_%d_%d",sx,sy);
    &wire ntRef_ntNC1 = wire *strVar;

    sprintf(strVar,"ntNC2_%d_%d",sx,sy);
    &wire ntRef_ntNC2 = wire *strVar;

    sprintf(strVar,"ntTIELO_%d_%d",sx,sy);
    &wire ntRef_ntTIELO = wire *strVar;

    sprintf(strVar, "CCS_330H_TILE_%d_%d", sx, sy);
    device CCS_330H_TILE *strVar
        port map (
                     MASK_EN      => ntRef_ntMASK_EN,
                     PRCFG_EN     => ntRef_ntPRCFG_EN,
                     JRST         => ntRef_ntJRST,
                     JRTI         => ntRef_ntJRTI,
                     CLOCKDR      => ntRef_ntCLOCKDR,
                     CLK_USER_O   => ntRef_ntCLK_USER_O,
                     BSMODE_1     => ntRef_ntBSMODE_1,
                     BSMODE_2     => ntRef_ntBSMODE_2,
                     BSMODE_3     => ntRef_ntBSMODE_3,

                     SHIFTDR_ADC  => ntRef_ntSHIFTDR_ADC,
                     UPDATEDR_ADC => ntRef_ntUPDATEDR_ADC,
                     TCK1_ADC     => ntRef_ntTCK1_ADC,
                     TDI1_ADC     => ntRef_ntTDI1_ADC,

                     SHIFTDR      => ntRef_ntSHIFTDR,
                     UPDATEDR     => ntRef_ntUPDATEDR,
                     FLG_JDRP     => ntRef_ntFLG_JDRP,
                     CLOCKDR_DRP  => ntRef_ntCLOCKDR_DRP,
                     CAPTUREDR    => ntRef_ntCAPTUREDR,
                     TCK1         => ntRef_ntTCK1,
                     TMS1         => ntRef_ntTMS1,
                     TDI1         => ntRef_ntTDI1,
                     FLG_USER1    => ntRef_ntFLG_USER1,
                     CLOCKDR1     => ntRef_ntCLOCKDR1,
                     FLG_USER2    => ntRef_ntFLG_USER2,
                     CLOCKDR2     => ntRef_ntCLOCKDR2,
                     FLG_USER3    => ntRef_ntFLG_USER3,
                     CLOCKDR3     => ntRef_ntCLOCKDR3,
                     FLG_USER4    => ntRef_ntFLG_USER4,
                     CLOCKDR4     => ntRef_ntCLOCKDR4,
                     FCS_N        => ntRef_ntFCS_N,
                     DAISY_O      => ntRef_ntDAISY_O,
                     FWE_N        => ntRef_ntFWE_N,
                     FOE_N        => ntRef_ntFOE_N,
                     ADR          => ntRef_ntADR,
                     ADV_N        => ntRef_ntADV_N,
                     RS           => ntRef_ntRS,
                     DOUT         => ntRef_ntDOUT,
                     OUT_EN_FCS_N => ntRef_ntOUT_EN_FCS_N,
                     OUT_EN_FWE_N => ntRef_ntOUT_EN_FWE_N,
                     OUT_EN_FOE_N       => ntRef_ntOUT_EN_FOE_N,
                     OUT_EN_FOE_N2ADR   => ntRef_ntOUT_EN_FOE_N2ADR,
                     OUT_EN_FOE_N2ADV_N => ntRef_ntOUT_EN_FOE_N2ADV_N,

                     OUT_EN_RS    => ntRef_ntOUT_EN_RS,
                     OUT_EN_D     => ntRef_ntOUT_EN_D,
                     OUT_EN_DAISY_O     => ntRef_ntOUT_EN_DAISY_O,
                     OPENDRAIN_DAISY_O  => ntRef_ntOPENDRAIN_DAISY_O,
                     GPOR_N         => ntRef_ntGPOR_N,
                     POR_ERASE_N    => ntRef_ntPOR_ERASE_N,
                     POR_SRAM_N     => ntRef_ntPOR_SRAM_N,
                     POR_BLSR_N     => ntRef_ntPOR_BLSR_N,
                     CRAM_VDDT_N    => ntRef_ntCRAM_VDDT_N,
                     CLK_CRAM       => ntRef_ntCLK_CRAM,
                     CMEM_TYPE      => ntRef_ntCMEM_TYPE,
                     ERASE_EN       => ntRef_ntERASE_EN,
                     WL_ON          => ntRef_ntWL_ON,
                     FRAME_ADDR     => ntRef_ntFRAME_ADDR,
                     COLUMN_ADDR    => ntRef_ntCOLUMN_ADDR,
                     PROG_ON        => ntRef_ntPROG_ON,
                     PROG_CAP       => ntRef_ntPROG_CAP,
                     REGION_SEL     => ntRef_ntREGION_SEL,
                     REGION_RW_EN   => ntRef_ntREGION_RW_EN,
                     CDATA          => ntRef_ntCDATA,
                     PRECHGE        => ntRef_ntPRECHGE,
                     READ           => ntRef_ntREAD,
                     RDBK_ON        => ntRef_ntRDBK_ON,
                     RDBK_CAP       => ntRef_ntRDBK_CAP,
                     CFGMOD2D2      => ntRef_ntCFGMOD2D2,
                     CFGMOD2D4      => ntRef_ntCFGMOD2D4,
                     CFGMOD2D5      => ntRef_ntCFGMOD2D5,
                     CFGMOD2D6      => ntRef_ntCFGMOD2D6,
                     CFGMOD2D7      => ntRef_ntCFGMOD2D7,
                     CFGMOD2RDWR_N  => ntRef_ntCFGMOD2RDWR_N,

                     CFGMOD_D1      => ntRef_ntCFGMOD_D1,
                     CFGMOD_P2CS_N  => ntRef_ntCFGMOD_P2CS_N,
                     CFGMOD_P2D3    => ntRef_ntCFGMOD_P2D3,
                     CLK_CFGS       => ntRef_ntCLK_CFGS,

                     CFGMOD_NP2ADR       => ntRef_ntCFGMOD_NP2ADR,
                     CFGMOD_NP2ADV_N     => ntRef_ntCFGMOD_NP2ADV_N,
                     CFGMOD_NP2DAISY_O   => ntRef_ntCFGMOD_NP2DAISY_O,
                     CFGMOD_NP2EMCLK     => ntRef_ntCFGMOD_NP2EMCLK,
                     CFGMOD_NP2FOE_N     => ntRef_ntCFGMOD_NP2FOE_N,
                     CFGMOD_NP2FWE_N     => ntRef_ntCFGMOD_NP2FWE_N,
                     CFGMOD_NP2RS        => ntRef_ntCFGMOD_NP2RS,
                     CFGMOD_NP2IO_STATUS => ntRef_ntCFGMOD_NP2IO_STATUS,

                     CFGMOD_E       => ntRef_ntCFGMOD_E,
                     CFGMOD_E_NP    => ntRef_ntCFGMOD_E_NP,
                     CFGMOD16       => ntRef_ntCFGMOD16,
                     CFGMOD32       => ntRef_ntCFGMOD32,
                     GLOGEN         => ntRef_ntGLOGEN,
                     GOUTEN         => ntRef_ntGOUTEN,
                     GRS_N          => ntRef_ntGRS_N,
                     GWEN           => ntRef_ntGWEN,
                     PUP_SEL_N      => ntRef_ntPUP_SEL_N,
                     VDDT_N         => ntRef_ntVDDT_N,
                     MCE            => ntRef_ntMCE,
                     MWR            => ntRef_ntMWR,
                     CLK_DRM        => ntRef_ntCLK_DRM,
                     ISPAL_DOUT     => ntRef_ntISPAL_DOUT ,
                     RBCRC_ERR      => ntRef_ntRBCRC_ERR  ,
                     RBCRC_VALID    => ntRef_ntRBCRC_VALID  ,
                     SEU_VALID      => ntRef_ntSEU_VALID  ,
                     SEU_INDEX      => ntRef_ntSEU_INDEX  ,
                     SEU_SEC        => ntRef_ntSEU_SEC  ,
                     SEU_DED        => ntRef_ntSEU_DED  ,
                     SEU_REGION_NADDR   => ntRef_ntSEU_REGION_NADDR,
                     SEU_REGION_ADDR    => ntRef_ntSEU_REGION_ADDR,
                     SEU_COLUMN_NADDR   => ntRef_ntSEU_COLUMN_NADDR,
                     SEU_COLUMN_ADDR    => ntRef_ntSEU_COLUMN_ADDR,
                     SEU_FRAME_NADDR    => ntRef_ntSEU_FRAME_NADDR,
                     SEU_FRAME_ADDR     => ntRef_ntSEU_FRAME_ADDR,

                     UTDO           => ntRef_ntUTDO,
                     UID_DOUT       => ntRef_ntUID_DOUT,
                     WAKEUP_OVER_N  => ntRef_ntWAKEUP_OVER_N,
                     FUSE           => ntRef_ntFUSE,
                     DRCFG_ERR      => ntRef_ntDRCFG_ERR,
                     DRCFG_OVER     => ntRef_ntDRCFG_OVER,
                     PRCFG_ERR      => ntRef_ntPRCFG_ERR,
                     PRCFG_OVER     => ntRef_ntPRCFG_OVER,
                     TRIM_LDO_CRAM_R0 => ntRef_ntTRIM_LDO_CRAM_R0,
                     TRIM_LDO_CRAM_R1 => ntRef_ntTRIM_LDO_CRAM_R1,
                     TRIM_LDO_CRAM_R2 => ntRef_ntTRIM_LDO_CRAM_R2,
                     TRIM_LDO_CRAM_R3 => ntRef_ntTRIM_LDO_CRAM_R3,
                     TRIM_LDO_CRAM_R4 => ntRef_ntTRIM_LDO_CRAM_R4,
                     TRIM_LDO_CRAM_R5 => ntRef_ntTRIM_LDO_CRAM_R5,
                     TRIM_LDO_CRAM_R6 => ntRef_ntTRIM_LDO_CRAM_R6,
                     TRIM_LDO_CRAM_R7 => ntRef_ntTRIM_LDO_CRAM_R7,
                     TRIM_LDO_WL      => ntRef_ntTRIM_LDO_WL,
                     TDI_BSCAN               => ntRef_ntTDI_BSCAN,
                     POR_N_1P8               => ntRef_ntPOR_N_1P8,
                     CLK_ADC                 => ntRef_ntCLK_ADC,
                     CLK_CALI                => ntRef_ntCLK_CALI,
                     VREF_ADC_1P25V          => ntRef_ntVREF_ADC_1P25V,
                     CRAMLDO_VREF            => ntRef_ntCRAMLDO_VREF,
                     WLLDO_VREF_1V           => ntRef_ntWLLDO_VREF_1V,
                     PBAIS_10U               => ntRef_ntPBAIS_10U,
                     MEM_INIT                => ntRef_ntMEM_INIT,
                     AC_TEST                 => ntRef_ntAC_TEST,
                     AC_MODE                 => ntRef_ntAC_MODE,
                     TRIM_ADC_SENSE          => ntRef_ntTRIM_ADC_SENSE,
                     TRIM_ADC_MODE           => ntRef_ntTRIM_ADC_MODE,
                     TRIM_LDO_WL_SEL         => ntRef_ntTRIM_LDO_WL_SEL,
                     READ_LATCH              => ntRef_ntREAD_LATCH,
                     ICONST_10U              => ntRef_ntICONST_10U,
                     MFG_TEST1_ADC           => ntRef_ntMFG_TEST1_ADC,
                     MFG_TEST2_ADC           => ntRef_ntMFG_TEST2_ADC,
                     MFG_TEST_NC1            => ntRef_ntMFG_TEST_NC1,
                     MFG_TEST_NC2            => ntRef_ntMFG_TEST_NC2,

                     TIEHI                   => ntRef_ntTIEHI,
                     NC1                   => ntRef_ntNC1,
                     NC2                   => ntRef_ntNC2,
                     TIELO                   => ntRef_ntTIELO
                 )
          @([sx,sy]);

        STRUCT inc_spec_ccs incVar;
        string pin_SRB;
        string pin_logic_device;
        string attribute_IO;
        int loc_SRB;
        int sy_srb;
        int sx_srb = tx_srb * NUM_GRID_X;
  
        foreach incVar(inc_ccs_srb_spec)
        {
            pin_SRB = incVar.port_name_SRB;
            pin_logic_device = incVar.port_name_device;
            attribute_IO = incVar.attribute_IO;
            loc_SRB = incVar.loc_SRB;
           
            if(loc_SRB==0)
            {
              sy_srb = sy;
            }
            else
            {
              sy_srb = sy + loc_SRB*NUM_GRID_Y; 
            }
            
            if(attribute_IO =="I")
            { 
             
               connect(<pin *pin_logic_device of <device CCS_330H_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
            }
            else
            {
              connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx_srb,sy_srb]>>
                                                                         : <wire *pin_logic_device of <device CCS_330H_TILE @[sx,sy]>>); 
            }
        }


}
/********************************************************************************
********************************************************************************/
//flag=0,place HSSTLP_TILE
//flag=1, place HSSTHP_TILE
function place_hsst_tile(unsigned int tx,ty,flag)
{   
    unsigned int sx, sy;

    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;

    string strVar;
    sprintf(strVar,"ntCFG_READY_0_%d_%d",sx,sy);
    &wire ntRef_ntCFG_READY_0 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_READY_1_%d_%d",sx,sy);
    &wire ntRef_ntCFG_READY_1 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_READY_2_%d_%d",sx,sy);
    &wire ntRef_ntCFG_READY_2 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_READY_3_%d_%d",sx,sy);
    &wire ntRef_ntCFG_READY_3 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_READY_PLL_0_%d_%d",sx,sy);
    &wire ntRef_ntCFG_READY_PLL_0 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_READY_PLL_1_%d_%d",sx,sy);
    &wire ntRef_ntCFG_READY_PLL_1 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_RDATA_0_%d_%d",sx,sy);
    &wire ntRef_ntCFG_RDATA_0[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_RDATA_1_%d_%d",sx,sy);
    &wire ntRef_ntCFG_RDATA_1[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_RDATA_2_%d_%d",sx,sy);
    &wire ntRef_ntCFG_RDATA_2[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_RDATA_3_%d_%d",sx,sy);
    &wire ntRef_ntCFG_RDATA_3[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_RDATA_PLL_0_%d_%d",sx,sy);
    &wire ntRef_ntCFG_RDATA_PLL_0[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_RDATA_PLL_1_%d_%d",sx,sy);
    &wire ntRef_ntCFG_RDATA_PLL_1[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_INT_0_%d_%d",sx,sy);
    &wire ntRef_ntCFG_INT_0 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_INT_1_%d_%d",sx,sy);
    &wire ntRef_ntCFG_INT_1 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_INT_2_%d_%d",sx,sy);
    &wire ntRef_ntCFG_INT_2 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_INT_3_%d_%d",sx,sy);
    &wire ntRef_ntCFG_INT_3 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_INT_PLL_0_%d_%d",sx,sy);
    &wire ntRef_ntCFG_INT_PLL_0 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_INT_PLL_1_%d_%d",sx,sy);
    &wire ntRef_ntCFG_INT_PLL_1 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPCS_RX_MCB_STATUS_%d_%d",sx,sy);
    &wire ntRef_ntPCS_RX_MCB_STATUS[3:0] = wire *strVar[3:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPCS_LSM_SYNCED_%d_%d",sx,sy);
    &wire ntRef_ntPCS_LSM_SYNCED[3:0] = wire *strVar[3:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRDATA_0_%d_%d",sx,sy);
    &wire ntRef_ntRDATA_0[87:0] = wire *strVar[87:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRDATA_1_%d_%d",sx,sy);
    &wire ntRef_ntRDATA_1[87:0] = wire *strVar[87:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRDATA_2_%d_%d",sx,sy);
    &wire ntRef_ntRDATA_2[87:0] = wire *strVar[87:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRDATA_3_%d_%d",sx,sy);
    &wire ntRef_ntRDATA_3[87:0] = wire *strVar[87:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRCLK2FABRIC_%d_%d",sx,sy);
    &wire ntRef_ntRCLK2FABRIC[3:0] = wire *strVar[3:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRCLK2FABRIC_T_%d_%d",sx,sy);
    &wire ntRef_ntRCLK2FABRIC_T[3:0] = wire *strVar[3:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTCLK2FABRIC_%d_%d",sx,sy);
    &wire ntRef_ntTCLK2FABRIC[3:0] = wire *strVar[3:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTCLK2FABRIC_T_%d_%d",sx,sy);
    &wire ntRef_ntTCLK2FABRIC_T[3:0] = wire *strVar[3:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntREFCK2CORE_0_%d_%d",sx,sy);
    &wire ntRef_ntREFCK2CORE_0 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntREFCK2CORE_T_0_%d_%d",sx,sy);
    &wire ntRef_ntREFCK2CORE_T_0 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPLL_READY_0_%d_%d",sx,sy);
    &wire ntRef_ntPLL_READY_0 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntREFCK2CORE_1_%d_%d",sx,sy);
    &wire ntRef_ntREFCK2CORE_1 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntREFCK2CORE_T_1_%d_%d",sx,sy);
    &wire ntRef_ntREFCK2CORE_T_1 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPLL_READY_1_%d_%d",sx,sy);
    &wire ntRef_ntPLL_READY_1 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_SIGDET_STATUS_0_%d_%d",sx,sy);
    &wire ntRef_ntRX_SIGDET_STATUS_0 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_SATA_COMINIT_0_%d_%d",sx,sy);
    &wire ntRef_ntRX_SATA_COMINIT_0 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_SATA_COMWAKE_0_%d_%d",sx,sy);
    &wire ntRef_ntRX_SATA_COMWAKE_0 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_LS_DATA_0_%d_%d",sx,sy);
    &wire ntRef_ntRX_LS_DATA_0 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_READY_0_%d_%d",sx,sy);
    &wire ntRef_ntRX_READY_0 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_STATUS_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_STATUS_0[19:0] = wire *strVar[19:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTX_RXDET_STATUS_0_%d_%d",sx,sy);
    &wire ntRef_ntTX_RXDET_STATUS_0 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCA_ALIGN_RX_%d_%d",sx,sy);
    &wire ntRef_ntCA_ALIGN_RX[3:0] = wire *strVar[3:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCA_ALIGN_TX_%d_%d",sx,sy);
    &wire ntRef_ntCA_ALIGN_TX[3:0] = wire *strVar[3:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_SIGDET_STATUS_1_%d_%d",sx,sy);
    &wire ntRef_ntRX_SIGDET_STATUS_1 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_SATA_COMINIT_1_%d_%d",sx,sy);
    &wire ntRef_ntRX_SATA_COMINIT_1 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_SATA_COMWAKE_1_%d_%d",sx,sy);
    &wire ntRef_ntRX_SATA_COMWAKE_1 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_LS_DATA_1_%d_%d",sx,sy);
    &wire ntRef_ntRX_LS_DATA_1 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_READY_1_%d_%d",sx,sy);
    &wire ntRef_ntRX_READY_1 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_STATUS_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_STATUS_1[19:0] = wire *strVar[19:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTX_RXDET_STATUS_1_%d_%d",sx,sy);
    &wire ntRef_ntTX_RXDET_STATUS_1 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_SIGDET_STATUS_2_%d_%d",sx,sy);
    &wire ntRef_ntRX_SIGDET_STATUS_2 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_SATA_COMINIT_2_%d_%d",sx,sy);
    &wire ntRef_ntRX_SATA_COMINIT_2 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_SATA_COMWAKE_2_%d_%d",sx,sy);
    &wire ntRef_ntRX_SATA_COMWAKE_2 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_LS_DATA_2_%d_%d",sx,sy);
    &wire ntRef_ntRX_LS_DATA_2 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_READY_2_%d_%d",sx,sy);
    &wire ntRef_ntRX_READY_2 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_STATUS_2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_STATUS_2[19:0] = wire *strVar[19:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTX_RXDET_STATUS_2_%d_%d",sx,sy);
    &wire ntRef_ntTX_RXDET_STATUS_2 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_SIGDET_STATUS_3_%d_%d",sx,sy);
    &wire ntRef_ntRX_SIGDET_STATUS_3 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_SATA_COMINIT_3_%d_%d",sx,sy);
    &wire ntRef_ntRX_SATA_COMINIT_3 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_SATA_COMWAKE_3_%d_%d",sx,sy);
    &wire ntRef_ntRX_SATA_COMWAKE_3 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_LS_DATA_3_%d_%d",sx,sy);
    &wire ntRef_ntRX_LS_DATA_3 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_READY_3_%d_%d",sx,sy);
    &wire ntRef_ntRX_READY_3 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_STATUS_3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_STATUS_3[19:0] = wire *strVar[19:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTX_RXDET_STATUS_3_%d_%d",sx,sy);
    &wire ntRef_ntTX_RXDET_STATUS_3 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO0 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO1 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO2 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO3 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO4_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO4 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO5_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO5 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO6_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO6 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO7_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO7 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO8_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO8 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO9_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO9 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO10_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO10 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO11_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO11 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO12_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO12 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO13_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO13 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO14_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO14 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO15_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO15 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO16_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO16 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO17_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO17 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO18_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO18 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO19_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO19 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO20_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO20 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO21_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO21 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFOR_PMA_TEST_SO_CH0_%d_%d",sx,sy);
    &wire ntRef_ntFOR_PMA_TEST_SO_CH0[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFOR_PMA_TEST_SO_CH1_%d_%d",sx,sy);
    &wire ntRef_ntFOR_PMA_TEST_SO_CH1[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFOR_PMA_TEST_SO_CH2_%d_%d",sx,sy);
    &wire ntRef_ntFOR_PMA_TEST_SO_CH2[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFOR_PMA_TEST_SO_CH3_%d_%d",sx,sy);
    &wire ntRef_ntFOR_PMA_TEST_SO_CH3[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFOR_PMA_TEST_SO_PLL0_%d_%d",sx,sy);
    &wire ntRef_ntFOR_PMA_TEST_SO_PLL0 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFOR_PMA_TEST_SO_PLL1_%d_%d",sx,sy);
    &wire ntRef_ntFOR_PMA_TEST_SO_PLL1 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRESCAL_I_CODE_O_0_%d_%d",sx,sy);
    &wire ntRef_ntRESCAL_I_CODE_O_0[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRESCAL_I_CODE_O_1_%d_%d",sx,sy);
    &wire ntRef_ntRESCAL_I_CODE_O_1[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTDO_BSCAN_%d_%d",sx,sy);
    &wire ntRef_ntTDO_BSCAN = wire *strVar;

    sprintf(strVar,"ntCLOCKDR_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR_OUT = wire *strVar;
    
    if(flag==0)
    {
      sprintf(strVar, "HSSTLP_TILE_%d_%d", sx, sy);
      device HSSTLP_TILE *strVar
           port map (
                       CFG_READY_0           => ntRef_ntCFG_READY_0,
                       CFG_READY_1           => ntRef_ntCFG_READY_1,
                       CFG_READY_2           => ntRef_ntCFG_READY_2,
                       CFG_READY_3           => ntRef_ntCFG_READY_3,
                       CFG_READY_PLL_0       => ntRef_ntCFG_READY_PLL_0,
                       CFG_READY_PLL_1       => ntRef_ntCFG_READY_PLL_1,
                       CFG_RDATA_0           => ntRef_ntCFG_RDATA_0,
                       CFG_RDATA_1           => ntRef_ntCFG_RDATA_1,
                       CFG_RDATA_2           => ntRef_ntCFG_RDATA_2,
                       CFG_RDATA_3           => ntRef_ntCFG_RDATA_3,
                       CFG_RDATA_PLL_0       => ntRef_ntCFG_RDATA_PLL_0,
                       CFG_RDATA_PLL_1       => ntRef_ntCFG_RDATA_PLL_1,
                       CFG_INT_0             => ntRef_ntCFG_INT_0,
                       CFG_INT_1             => ntRef_ntCFG_INT_1,
                       CFG_INT_2             => ntRef_ntCFG_INT_2,
                       CFG_INT_3             => ntRef_ntCFG_INT_3,
                       CFG_INT_PLL_0         => ntRef_ntCFG_INT_PLL_0,
                       CFG_INT_PLL_1         => ntRef_ntCFG_INT_PLL_1,
                       PCS_RX_MCB_STATUS     => ntRef_ntPCS_RX_MCB_STATUS,
                       PCS_LSM_SYNCED        => ntRef_ntPCS_LSM_SYNCED,
                       RDATA_0               => ntRef_ntRDATA_0,
                       RDATA_1               => ntRef_ntRDATA_1,
                       RDATA_2               => ntRef_ntRDATA_2,
                       RDATA_3               => ntRef_ntRDATA_3,
                       RCLK2FABRIC           => ntRef_ntRCLK2FABRIC,
                       TCLK2FABRIC           => ntRef_ntTCLK2FABRIC,
                       RCLK2FABRIC_T         => ntRef_ntRCLK2FABRIC_T,
                       TCLK2FABRIC_T         => ntRef_ntTCLK2FABRIC_T,
                       REFCK2CORE_0          => ntRef_ntREFCK2CORE_0,
                       REFCK2CORE_T_0        => ntRef_ntREFCK2CORE_T_0,
                       PLL_READY_0           => ntRef_ntPLL_READY_0,
                       REFCK2CORE_1          => ntRef_ntREFCK2CORE_1,
                       REFCK2CORE_T_1        => ntRef_ntREFCK2CORE_T_1,
                       PLL_READY_1           => ntRef_ntPLL_READY_1,
                       RX_SIGDET_STATUS_0    => ntRef_ntRX_SIGDET_STATUS_0,
                       RX_SATA_COMINIT_0     => ntRef_ntRX_SATA_COMINIT_0,
                       RX_SATA_COMWAKE_0     => ntRef_ntRX_SATA_COMWAKE_0,
                       RX_LS_DATA_0          => ntRef_ntRX_LS_DATA_0,
                       RX_READY_0            => ntRef_ntRX_READY_0,
                       TEST_STATUS_0         => ntRef_ntTEST_STATUS_0,
                       TX_RXDET_STATUS_0     => ntRef_ntTX_RXDET_STATUS_0,
                       CA_ALIGN_RX           => ntRef_ntCA_ALIGN_RX,
                       CA_ALIGN_TX           => ntRef_ntCA_ALIGN_TX,
                       RX_SIGDET_STATUS_1    => ntRef_ntRX_SIGDET_STATUS_1,
                       RX_SATA_COMINIT_1     => ntRef_ntRX_SATA_COMINIT_1,
                       RX_SATA_COMWAKE_1     => ntRef_ntRX_SATA_COMWAKE_1,
                       RX_LS_DATA_1          => ntRef_ntRX_LS_DATA_1,
                       RX_READY_1            => ntRef_ntRX_READY_1,
                       TEST_STATUS_1         => ntRef_ntTEST_STATUS_1,
                       TX_RXDET_STATUS_1     => ntRef_ntTX_RXDET_STATUS_1,
                       RX_SIGDET_STATUS_2    => ntRef_ntRX_SIGDET_STATUS_2,
                       RX_SATA_COMINIT_2     => ntRef_ntRX_SATA_COMINIT_2,
                       RX_SATA_COMWAKE_2     => ntRef_ntRX_SATA_COMWAKE_2,
                       RX_LS_DATA_2          => ntRef_ntRX_LS_DATA_2,
                       RX_READY_2            => ntRef_ntRX_READY_2,
                       TEST_STATUS_2         => ntRef_ntTEST_STATUS_2,
                       TX_RXDET_STATUS_2     => ntRef_ntTX_RXDET_STATUS_2,
                       RX_SIGDET_STATUS_3    => ntRef_ntRX_SIGDET_STATUS_3,
                       RX_SATA_COMINIT_3     => ntRef_ntRX_SATA_COMINIT_3,
                       RX_SATA_COMWAKE_3     => ntRef_ntRX_SATA_COMWAKE_3,
                       RX_LS_DATA_3          => ntRef_ntRX_LS_DATA_3,
                       RX_READY_3            => ntRef_ntRX_READY_3,
                       TEST_STATUS_3         => ntRef_ntTEST_STATUS_3,
                       TX_RXDET_STATUS_3     => ntRef_ntTX_RXDET_STATUS_3,         
                       TEST_SO0              => ntRef_ntTEST_SO0,
                       TEST_SO1              => ntRef_ntTEST_SO1,
                       TEST_SO2              => ntRef_ntTEST_SO2,
                       TEST_SO3              => ntRef_ntTEST_SO3,
                       TEST_SO4              => ntRef_ntTEST_SO4,
                       TEST_SO5              => ntRef_ntTEST_SO5,
                       TEST_SO6              => ntRef_ntTEST_SO6,
                       TEST_SO7              => ntRef_ntTEST_SO7,
                       TEST_SO8              => ntRef_ntTEST_SO8,
                       TEST_SO9              => ntRef_ntTEST_SO9,
                       TEST_SO10             => ntRef_ntTEST_SO10,
                       TEST_SO11             => ntRef_ntTEST_SO11,
                       TEST_SO12             => ntRef_ntTEST_SO12,
                       TEST_SO13             => ntRef_ntTEST_SO13,
                       TEST_SO14             => ntRef_ntTEST_SO14,
                       TEST_SO15             => ntRef_ntTEST_SO15,
                       TEST_SO16             => ntRef_ntTEST_SO16,
                       TEST_SO17             => ntRef_ntTEST_SO17,
                       TEST_SO18             => ntRef_ntTEST_SO18,
                       TEST_SO19             => ntRef_ntTEST_SO19,
                       TEST_SO20             => ntRef_ntTEST_SO20,
                       TEST_SO21             => ntRef_ntTEST_SO21,
                       FOR_PMA_TEST_SO_CH0   => ntRef_ntFOR_PMA_TEST_SO_CH0 ,
                       FOR_PMA_TEST_SO_CH1   => ntRef_ntFOR_PMA_TEST_SO_CH1 ,
                       FOR_PMA_TEST_SO_CH2   => ntRef_ntFOR_PMA_TEST_SO_CH2 ,
                       FOR_PMA_TEST_SO_CH3   => ntRef_ntFOR_PMA_TEST_SO_CH3 ,
                       FOR_PMA_TEST_SO_PLL0  => ntRef_ntFOR_PMA_TEST_SO_PLL0,
                       FOR_PMA_TEST_SO_PLL1  => ntRef_ntFOR_PMA_TEST_SO_PLL1,
                       RESCAL_I_CODE_O_0     => ntRef_ntRESCAL_I_CODE_O_0,
                       RESCAL_I_CODE_O_1     => ntRef_ntRESCAL_I_CODE_O_1,
                       TDO_BSCAN             => ntRef_ntTDO_BSCAN,
                       CLOCKDR_OUT           => ntRef_ntCLOCKDR_OUT
                      )
            @([sx,sy]);
  
        STRUCT inc_spec_hsst incVar;
        string pin_SRB;
        string pin_logic_device;
        string attribute_IO;
        int loc_SRB;
        int sy_SRB;
  
        unsigned int sx_SRB;
        sx_SRB = sx-3;
        int cnt;
  
        foreach incVar(inc_hsst_srb_spec)
        {
            pin_SRB = incVar.port_name_srb;
            pin_logic_device = incVar.port_name_device;
            attribute_IO = incVar.attribute_IO;
            loc_SRB = incVar.loc_SRB;
            sy_SRB = (loc_SRB>=25) ? sy+(loc_SRB+1)*NUM_GRID_Y : sy+loc_SRB*NUM_GRID_Y; 
  
            if(attribute_IO =="I")
            { 
  
              connect(<pin *pin_logic_device of <device HSSTLP_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_SRB,sy_SRB]>>);
            }
            else
            {
              connect(<pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy_SRB]>> =>  (pin_logic_device=="TIEHI") ? <wire TIEHI of <device SRB_TILE @[sx_SRB,sy_SRB]>>
                                                                                                          : <wire *pin_logic_device of <device HSSTLP_TILE @[sx,sy]>>);
            }
        }         
    }


}// end of function place_hsst_tile

/********************************************************************************
********************************************************************************/
//flag=0,place HSSTLP_TILE
//flag=1, place HSSTHP_TILE
function place_hssthp_tile(unsigned int tx,ty,flag)
{   
    unsigned int sx, sy;

    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;

     string strVar;
     sprintf(strVar,"ntBRIDGE_RCLK_EN_COUT_%d_%d",sx,sy);
      &wire ntRef_ntBRIDGE_RCLK_EN_COUT = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntCA_ALIGN_RX_%d_%d",sx,sy);
      &wire ntRef_ntCA_ALIGN_RX[3:0] = wire *strVar[3:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntCA_ALIGN_TX_%d_%d",sx,sy);
      &wire ntRef_ntCA_ALIGN_TX[3:0] = wire *strVar[3:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntCFG_INT_0_%d_%d",sx,sy);
      &wire ntRef_ntCFG_INT_0 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntCFG_INT_1_%d_%d",sx,sy);
      &wire ntRef_ntCFG_INT_1 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntCFG_INT_2_%d_%d",sx,sy);
      &wire ntRef_ntCFG_INT_2 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntCFG_INT_3_%d_%d",sx,sy);
      &wire ntRef_ntCFG_INT_3 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntCFG_INT_HPLL_%d_%d",sx,sy);
      &wire ntRef_ntCFG_INT_HPLL = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntCFG_RDATA_0_%d_%d",sx,sy);
      &wire ntRef_ntCFG_RDATA_0[7:0] = wire *strVar[7:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntCFG_RDATA_1_%d_%d",sx,sy);
      &wire ntRef_ntCFG_RDATA_1[7:0] = wire *strVar[7:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntCFG_RDATA_2_%d_%d",sx,sy);
      &wire ntRef_ntCFG_RDATA_2[7:0] = wire *strVar[7:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntCFG_RDATA_3_%d_%d",sx,sy);
      &wire ntRef_ntCFG_RDATA_3[7:0] = wire *strVar[7:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntCFG_RDATA_HPLL_%d_%d",sx,sy);
      &wire ntRef_ntCFG_RDATA_HPLL[7:0] = wire *strVar[7:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntCFG_READY_0_%d_%d",sx,sy);
      &wire ntRef_ntCFG_READY_0 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntCFG_READY_1_%d_%d",sx,sy);
      &wire ntRef_ntCFG_READY_1 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntCFG_READY_2_%d_%d",sx,sy);
      &wire ntRef_ntCFG_READY_2 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntCFG_READY_3_%d_%d",sx,sy);
      &wire ntRef_ntCFG_READY_3 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntCFG_READY_HPLL_%d_%d",sx,sy);
      &wire ntRef_ntCFG_READY_HPLL = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntCLOCKDR_OUT_%d_%d",sx,sy);
      &wire ntRef_ntCLOCKDR_OUT = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntFOR_PMA_TEST_SO_CH0_%d_%d",sx,sy);
      &wire ntRef_ntFOR_PMA_TEST_SO_CH0[1:0] = wire *strVar[1:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntFOR_PMA_TEST_SO_CH1_%d_%d",sx,sy);
      &wire ntRef_ntFOR_PMA_TEST_SO_CH1[1:0] = wire *strVar[1:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntFOR_PMA_TEST_SO_CH2_%d_%d",sx,sy);
      &wire ntRef_ntFOR_PMA_TEST_SO_CH2[1:0] = wire *strVar[1:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntFOR_PMA_TEST_SO_CH3_%d_%d",sx,sy);
      &wire ntRef_ntFOR_PMA_TEST_SO_CH3[1:0] = wire *strVar[1:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntFOR_PMA_TEST_SO_HPLL_%d_%d",sx,sy);
      &wire ntRef_ntFOR_PMA_TEST_SO_HPLL = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntGEAR_RCLK_EN_COUT_%d_%d",sx,sy);
      &wire ntRef_ntGEAR_RCLK_EN_COUT = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntGEAR_TCLK_EN_COUT_%d_%d",sx,sy);
      &wire ntRef_ntGEAR_TCLK_EN_COUT = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntHPLL_READY_%d_%d",sx,sy);
      &wire ntRef_ntHPLL_READY = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntLOCALFS_0_%d_%d",sx,sy);
      &wire ntRef_ntLOCALFS_0[5:0] = wire *strVar[5:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntLOCALFS_1_%d_%d",sx,sy);
      &wire ntRef_ntLOCALFS_1[5:0] = wire *strVar[5:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntLOCALFS_2_%d_%d",sx,sy);
      &wire ntRef_ntLOCALFS_2[5:0] = wire *strVar[5:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntLOCALFS_3_%d_%d",sx,sy);
      &wire ntRef_ntLOCALFS_3[5:0] = wire *strVar[5:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntLOCALLF_0_%d_%d",sx,sy);
      &wire ntRef_ntLOCALLF_0[5:0] = wire *strVar[5:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntLOCALLF_1_%d_%d",sx,sy);
      &wire ntRef_ntLOCALLF_1[5:0] = wire *strVar[5:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntLOCALLF_2_%d_%d",sx,sy);
      &wire ntRef_ntLOCALLF_2[5:0] = wire *strVar[5:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntLOCALLF_3_%d_%d",sx,sy);
      &wire ntRef_ntLOCALLF_3[5:0] = wire *strVar[5:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntLPLL_READY_0_%d_%d",sx,sy);
      &wire ntRef_ntLPLL_READY_0 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntLPLL_READY_1_%d_%d",sx,sy);
      &wire ntRef_ntLPLL_READY_1 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntLPLL_READY_2_%d_%d",sx,sy);
      &wire ntRef_ntLPLL_READY_2 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntLPLL_READY_3_%d_%d",sx,sy);
      &wire ntRef_ntLPLL_READY_3 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntPCS_LSM_SYNCED_%d_%d",sx,sy);
      &wire ntRef_ntPCS_LSM_SYNCED[3:0] = wire *strVar[3:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntPCS_RX_MCB_STATUS_%d_%d",sx,sy);
      &wire ntRef_ntPCS_RX_MCB_STATUS[3:0] = wire *strVar[3:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntPCS_TCLK_EN_COUT_%d_%d",sx,sy);
      &wire ntRef_ntPCS_TCLK_EN_COUT = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRCLK2FABRIC_%d_%d",sx,sy);
      &wire ntRef_ntRCLK2FABRIC[3:0] = wire *strVar[3:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRDATA_0_%d_%d",sx,sy);
      &wire ntRef_ntRDATA_0[87:0] = wire *strVar[87:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRDATA_1_%d_%d",sx,sy);
      &wire ntRef_ntRDATA_1[87:0] = wire *strVar[87:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRDATA_2_%d_%d",sx,sy);
      &wire ntRef_ntRDATA_2[87:0] = wire *strVar[87:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRDATA_3_%d_%d",sx,sy);
      &wire ntRef_ntRDATA_3[87:0] = wire *strVar[87:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntREFCK2CORE_0_%d_%d",sx,sy);
      &wire ntRef_ntREFCK2CORE_0 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntREFCK2CORE_1_%d_%d",sx,sy);
      &wire ntRef_ntREFCK2CORE_1 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntREFCLK0_FOR_LOWER_QUAD_%d_%d",sx,sy);
      &wire ntRef_ntREFCLK0_FOR_LOWER_QUAD = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntREFCLK0_FOR_UPPER_QUAD_%d_%d",sx,sy);
      &wire ntRef_ntREFCLK0_FOR_UPPER_QUAD = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntREFCLK1_FOR_LOWER_QUAD_%d_%d",sx,sy);
      &wire ntRef_ntREFCLK1_FOR_LOWER_QUAD = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntREFCLK1_FOR_UPPER_QUAD_%d_%d",sx,sy);
      &wire ntRef_ntREFCLK1_FOR_UPPER_QUAD = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRES_CAL_CODE_FABRIC_%d_%d",sx,sy);
      &wire ntRef_ntRES_CAL_CODE_FABRIC[5:0] = wire *strVar[5:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRFIFO_RD_EN_COUT_%d_%d",sx,sy);
      &wire ntRef_ntRFIFO_RD_EN_COUT = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRX_LS_DATA_0_%d_%d",sx,sy);
      &wire ntRef_ntRX_LS_DATA_0 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRX_LS_DATA_1_%d_%d",sx,sy);
      &wire ntRef_ntRX_LS_DATA_1 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRX_LS_DATA_2_%d_%d",sx,sy);
      &wire ntRef_ntRX_LS_DATA_2 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRX_LS_DATA_3_%d_%d",sx,sy);
      &wire ntRef_ntRX_LS_DATA_3 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRX_READY_0_%d_%d",sx,sy);
      &wire ntRef_ntRX_READY_0 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRX_READY_1_%d_%d",sx,sy);
      &wire ntRef_ntRX_READY_1 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRX_READY_2_%d_%d",sx,sy);
      &wire ntRef_ntRX_READY_2 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRX_READY_3_%d_%d",sx,sy);
      &wire ntRef_ntRX_READY_3 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRX_SATA_COMINIT_0_%d_%d",sx,sy);
      &wire ntRef_ntRX_SATA_COMINIT_0 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRX_SATA_COMINIT_1_%d_%d",sx,sy);
      &wire ntRef_ntRX_SATA_COMINIT_1 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRX_SATA_COMINIT_2_%d_%d",sx,sy);
      &wire ntRef_ntRX_SATA_COMINIT_2 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRX_SATA_COMINIT_3_%d_%d",sx,sy);
      &wire ntRef_ntRX_SATA_COMINIT_3 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRX_SATA_COMWAKE_0_%d_%d",sx,sy);
      &wire ntRef_ntRX_SATA_COMWAKE_0 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRX_SATA_COMWAKE_1_%d_%d",sx,sy);
      &wire ntRef_ntRX_SATA_COMWAKE_1 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRX_SATA_COMWAKE_2_%d_%d",sx,sy);
      &wire ntRef_ntRX_SATA_COMWAKE_2 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRX_SATA_COMWAKE_3_%d_%d",sx,sy);
      &wire ntRef_ntRX_SATA_COMWAKE_3 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRX_SIGDET_STATUS_0_%d_%d",sx,sy);
      &wire ntRef_ntRX_SIGDET_STATUS_0 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRX_SIGDET_STATUS_1_%d_%d",sx,sy);
      &wire ntRef_ntRX_SIGDET_STATUS_1 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRX_SIGDET_STATUS_2_%d_%d",sx,sy);
      &wire ntRef_ntRX_SIGDET_STATUS_2 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRX_SIGDET_STATUS_3_%d_%d",sx,sy);
      &wire ntRef_ntRX_SIGDET_STATUS_3 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRXDVLD_0_%d_%d",sx,sy);
      &wire ntRef_ntRXDVLD_0 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRXDVLD_1_%d_%d",sx,sy);
      &wire ntRef_ntRXDVLD_1 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRXDVLD_2_%d_%d",sx,sy);
      &wire ntRef_ntRXDVLD_2 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRXDVLD_3_%d_%d",sx,sy);
      &wire ntRef_ntRXDVLD_3 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRXDVLDH_0_%d_%d",sx,sy);
      &wire ntRef_ntRXDVLDH_0 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRXDVLDH_1_%d_%d",sx,sy);
      &wire ntRef_ntRXDVLDH_1 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRXDVLDH_2_%d_%d",sx,sy);
      &wire ntRef_ntRXDVLDH_2 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRXDVLDH_3_%d_%d",sx,sy);
      &wire ntRef_ntRXDVLDH_3 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRXSTATUS_0_%d_%d",sx,sy);
      &wire ntRef_ntRXSTATUS_0[5:0] = wire *strVar[5:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRXSTATUS_1_%d_%d",sx,sy);
      &wire ntRef_ntRXSTATUS_1[5:0] = wire *strVar[5:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRXSTATUS_2_%d_%d",sx,sy);
      &wire ntRef_ntRXSTATUS_2[5:0] = wire *strVar[5:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRXSTATUS_3_%d_%d",sx,sy);
      &wire ntRef_ntRXSTATUS_3[5:0] = wire *strVar[5:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTCLK2FABRIC_%d_%d",sx,sy);
      &wire ntRef_ntTCLK2FABRIC[3:0] = wire *strVar[3:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTDO_BSCAN_%d_%d",sx,sy);
      &wire ntRef_ntTDO_BSCAN = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_SO0_%d_%d",sx,sy);
      &wire ntRef_ntTEST_SO0 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_SO1_%d_%d",sx,sy);
      &wire ntRef_ntTEST_SO1 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_SO10_%d_%d",sx,sy);
      &wire ntRef_ntTEST_SO10 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_SO11_%d_%d",sx,sy);
      &wire ntRef_ntTEST_SO11 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_SO12_%d_%d",sx,sy);
      &wire ntRef_ntTEST_SO12 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_SO13_%d_%d",sx,sy);
      &wire ntRef_ntTEST_SO13 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_SO14_%d_%d",sx,sy);
      &wire ntRef_ntTEST_SO14 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_SO15_%d_%d",sx,sy);
      &wire ntRef_ntTEST_SO15 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_SO16_%d_%d",sx,sy);
      &wire ntRef_ntTEST_SO16 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_SO17_%d_%d",sx,sy);
      &wire ntRef_ntTEST_SO17 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_SO18_%d_%d",sx,sy);
      &wire ntRef_ntTEST_SO18 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_SO19_%d_%d",sx,sy);
      &wire ntRef_ntTEST_SO19 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_SO2_%d_%d",sx,sy);
      &wire ntRef_ntTEST_SO2 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_SO20_%d_%d",sx,sy);
      &wire ntRef_ntTEST_SO20 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_SO21_%d_%d",sx,sy);
      &wire ntRef_ntTEST_SO21 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_SO3_%d_%d",sx,sy);
      &wire ntRef_ntTEST_SO3 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_SO4_%d_%d",sx,sy);
      &wire ntRef_ntTEST_SO4 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_SO5_%d_%d",sx,sy);
      &wire ntRef_ntTEST_SO5 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_SO6_%d_%d",sx,sy);
      &wire ntRef_ntTEST_SO6 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_SO7_%d_%d",sx,sy);
      &wire ntRef_ntTEST_SO7 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_SO8_%d_%d",sx,sy);
      &wire ntRef_ntTEST_SO8 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_SO9_%d_%d",sx,sy);
      &wire ntRef_ntTEST_SO9 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_STATUS_0_%d_%d",sx,sy);
      &wire ntRef_ntTEST_STATUS_0[19:0] = wire *strVar[19:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_STATUS_1_%d_%d",sx,sy);
      &wire ntRef_ntTEST_STATUS_1[19:0] = wire *strVar[19:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_STATUS_2_%d_%d",sx,sy);
      &wire ntRef_ntTEST_STATUS_2[19:0] = wire *strVar[19:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTEST_STATUS_3_%d_%d",sx,sy);
      &wire ntRef_ntTEST_STATUS_3[19:0] = wire *strVar[19:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTFIFO_RD_EN_COUT_%d_%d",sx,sy);
      &wire ntRef_ntTFIFO_RD_EN_COUT = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTFIFO_WR_EN_COUT_%d_%d",sx,sy);
      &wire ntRef_ntTFIFO_WR_EN_COUT = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTX_RXDET_STATUS_0_%d_%d",sx,sy);
      &wire ntRef_ntTX_RXDET_STATUS_0 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTX_RXDET_STATUS_1_%d_%d",sx,sy);
      &wire ntRef_ntTX_RXDET_STATUS_1 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTX_RXDET_STATUS_2_%d_%d",sx,sy);
      &wire ntRef_ntTX_RXDET_STATUS_2 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTX_RXDET_STATUS_3_%d_%d",sx,sy);
      &wire ntRef_ntTX_RXDET_STATUS_3 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

     sprintf(strVar,"ntDIV_SYNC_FOR_LOWER_QUAD_%d_%d",sx,sy);
      &wire ntRef_ntDIV_SYNC_FOR_LOWER_QUAD = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntDIV_SYNC_FOR_UPPER_QUAD_%d_%d",sx,sy);
      &wire ntRef_ntDIV_SYNC_FOR_UPPER_QUAD = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntEM_ERROR_CNT_0_%d_%d",sx,sy);
      &wire ntRef_ntEM_ERROR_CNT_0[2:0] = wire *strVar[2:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntEM_ERROR_CNT_1_%d_%d",sx,sy);
      &wire ntRef_ntEM_ERROR_CNT_1[2:0] = wire *strVar[2:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntEM_ERROR_CNT_2_%d_%d",sx,sy);
      &wire ntRef_ntEM_ERROR_CNT_2[2:0] = wire *strVar[2:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntEM_ERROR_CNT_3_%d_%d",sx,sy);
      &wire ntRef_ntEM_ERROR_CNT_3[2:0] = wire *strVar[2:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
//     sprintf(strVar,"ntPAD_TX_SDN0_%d_%d",sx,sy);
//      &wire ntRef_ntPAD_TX_SDN0 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
//     sprintf(strVar,"ntPAD_TX_SDN1_%d_%d",sx,sy);
//      &wire ntRef_ntPAD_TX_SDN1 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
//     sprintf(strVar,"ntPAD_TX_SDN2_%d_%d",sx,sy);
//      &wire ntRef_ntPAD_TX_SDN2 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
//     sprintf(strVar,"ntPAD_TX_SDN3_%d_%d",sx,sy);
//      &wire ntRef_ntPAD_TX_SDN3 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
//     sprintf(strVar,"ntPAD_TX_SDP0_%d_%d",sx,sy);
//      &wire ntRef_ntPAD_TX_SDP0 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
//     sprintf(strVar,"ntPAD_TX_SDP1_%d_%d",sx,sy);
//      &wire ntRef_ntPAD_TX_SDP1 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
//     sprintf(strVar,"ntPAD_TX_SDP2_%d_%d",sx,sy);
//      &wire ntRef_ntPAD_TX_SDP2 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
//     sprintf(strVar,"ntPAD_TX_SDP3_%d_%d",sx,sy);
//      &wire ntRef_ntPAD_TX_SDP3 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntRCLK2FABRIC_T_%d_%d",sx,sy);
      &wire ntRef_ntRCLK2FABRIC_T[3:0] = wire *strVar[3:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTCLK2FABRIC_T_%d_%d",sx,sy);
      &wire ntRef_ntTCLK2FABRIC_T[3:0] = wire *strVar[3:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

     sprintf(strVar,"ntREFCK2CORE_T_0_%d_%d",sx,sy);
      &wire ntRef_ntREFCK2CORE_T_0 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntREFCK2CORE_T_1_%d_%d",sx,sy);
      &wire ntRef_ntREFCK2CORE_T_1 = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntREFCLK_SYNC_FOR_LOWER_QUAD_%d_%d",sx,sy);
      &wire ntRef_ntREFCLK_SYNC_FOR_LOWER_QUAD = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntREFCLK_SYNC_FOR_UPPER_QUAD_%d_%d",sx,sy);
      &wire ntRef_ntREFCLK_SYNC_FOR_UPPER_QUAD = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTX_SYNC_FOR_LOWER_QUAD_%d_%d",sx,sy);
      &wire ntRef_ntTX_SYNC_FOR_LOWER_QUAD = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
     sprintf(strVar,"ntTX_SYNC_FOR_UPPER_QUAD_%d_%d",sx,sy);
      &wire ntRef_ntTX_SYNC_FOR_UPPER_QUAD = wire *strVar /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;



    
    if(flag==1)
    {
      sprintf(strVar, "HSSTHP_TILE_%d_%d", sx, sy);
      device HSSTHP_TILE *strVar
           port map (
                      


     REFCLK0_FOR_LOWER_QUAD       =>  ntRef_ntREFCLK0_FOR_LOWER_QUAD,
     REFCLK0_FOR_UPPER_QUAD       =>  ntRef_ntREFCLK0_FOR_UPPER_QUAD,
     REFCLK1_FOR_LOWER_QUAD       =>  ntRef_ntREFCLK1_FOR_LOWER_QUAD,
     REFCLK1_FOR_UPPER_QUAD       =>  ntRef_ntREFCLK1_FOR_UPPER_QUAD,
     CFG_READY_0       =>  ntRef_ntCFG_READY_0,
     CFG_READY_1       =>  ntRef_ntCFG_READY_1,
     CFG_READY_2       =>  ntRef_ntCFG_READY_2,
     CFG_READY_3       =>  ntRef_ntCFG_READY_3,
     CFG_READY_HPLL       =>  ntRef_ntCFG_READY_HPLL,
     CFG_RDATA_0       =>  ntRef_ntCFG_RDATA_0,
     CFG_RDATA_1       =>  ntRef_ntCFG_RDATA_1,
     CFG_RDATA_2       =>  ntRef_ntCFG_RDATA_2,
     CFG_RDATA_3       =>  ntRef_ntCFG_RDATA_3,
     CFG_RDATA_HPLL       =>  ntRef_ntCFG_RDATA_HPLL,
     CFG_INT_0       =>  ntRef_ntCFG_INT_0,
     CFG_INT_1       =>  ntRef_ntCFG_INT_1,
     CFG_INT_2       =>  ntRef_ntCFG_INT_2,
     CFG_INT_3       =>  ntRef_ntCFG_INT_3,
     CFG_INT_HPLL       =>  ntRef_ntCFG_INT_HPLL,
     PCS_TCLK_EN_COUT       =>  ntRef_ntPCS_TCLK_EN_COUT,
     GEAR_TCLK_EN_COUT       =>  ntRef_ntGEAR_TCLK_EN_COUT,
     TFIFO_WR_EN_COUT       =>  ntRef_ntTFIFO_WR_EN_COUT,
     TFIFO_RD_EN_COUT       =>  ntRef_ntTFIFO_RD_EN_COUT,
     BRIDGE_RCLK_EN_COUT       =>  ntRef_ntBRIDGE_RCLK_EN_COUT,
     GEAR_RCLK_EN_COUT       =>  ntRef_ntGEAR_RCLK_EN_COUT,
     RFIFO_RD_EN_COUT       =>  ntRef_ntRFIFO_RD_EN_COUT,
     PCS_RX_MCB_STATUS       =>  ntRef_ntPCS_RX_MCB_STATUS,
     PCS_LSM_SYNCED       =>  ntRef_ntPCS_LSM_SYNCED,
     RDATA_0       =>  ntRef_ntRDATA_0,
     RDATA_1       =>  ntRef_ntRDATA_1,
     RDATA_2       =>  ntRef_ntRDATA_2,
     RDATA_3       =>  ntRef_ntRDATA_3,
     RXDVLD_0       =>  ntRef_ntRXDVLD_0,
     RXDVLD_1       =>  ntRef_ntRXDVLD_1,
     RXDVLD_2       =>  ntRef_ntRXDVLD_2,
     RXDVLD_3       =>  ntRef_ntRXDVLD_3,
     RXDVLDH_0       =>  ntRef_ntRXDVLDH_0,
     RXDVLDH_1       =>  ntRef_ntRXDVLDH_1,
     RXDVLDH_2       =>  ntRef_ntRXDVLDH_2,
     RXDVLDH_3       =>  ntRef_ntRXDVLDH_3,
     RXSTATUS_0       =>  ntRef_ntRXSTATUS_0,
     RXSTATUS_1       =>  ntRef_ntRXSTATUS_1,
     RXSTATUS_2       =>  ntRef_ntRXSTATUS_2,
     RXSTATUS_3       =>  ntRef_ntRXSTATUS_3,

     RCLK2FABRIC       =>  ntRef_ntRCLK2FABRIC,
     TCLK2FABRIC       =>  ntRef_ntTCLK2FABRIC,
     RES_CAL_CODE_FABRIC       =>  ntRef_ntRES_CAL_CODE_FABRIC,
     REFCK2CORE_0       =>  ntRef_ntREFCK2CORE_0,
     REFCK2CORE_1       =>  ntRef_ntREFCK2CORE_1,
     HPLL_READY       =>  ntRef_ntHPLL_READY,
     TX_RXDET_STATUS_0       =>  ntRef_ntTX_RXDET_STATUS_0,
     RX_SATA_COMINIT_0       =>  ntRef_ntRX_SATA_COMINIT_0,
     RX_SATA_COMWAKE_0       =>  ntRef_ntRX_SATA_COMWAKE_0,
     RX_LS_DATA_0       =>  ntRef_ntRX_LS_DATA_0,
     LPLL_READY_0       =>  ntRef_ntLPLL_READY_0,
     RX_SIGDET_STATUS_0       =>  ntRef_ntRX_SIGDET_STATUS_0,
     RX_READY_0       =>  ntRef_ntRX_READY_0,
     TEST_STATUS_0       =>  ntRef_ntTEST_STATUS_0,
     CA_ALIGN_RX       =>  ntRef_ntCA_ALIGN_RX,
     CA_ALIGN_TX       =>  ntRef_ntCA_ALIGN_TX,
     TX_RXDET_STATUS_1       =>  ntRef_ntTX_RXDET_STATUS_1,
     RX_SATA_COMINIT_1       =>  ntRef_ntRX_SATA_COMINIT_1,
     RX_SATA_COMWAKE_1       =>  ntRef_ntRX_SATA_COMWAKE_1,
     RX_LS_DATA_1       =>  ntRef_ntRX_LS_DATA_1,
     LPLL_READY_1       =>  ntRef_ntLPLL_READY_1,
     RX_SIGDET_STATUS_1       =>  ntRef_ntRX_SIGDET_STATUS_1,
     RX_READY_1       =>  ntRef_ntRX_READY_1,
     TEST_STATUS_1       =>  ntRef_ntTEST_STATUS_1,
     TX_RXDET_STATUS_2       =>  ntRef_ntTX_RXDET_STATUS_2,
     RX_SATA_COMINIT_2       =>  ntRef_ntRX_SATA_COMINIT_2,
     RX_SATA_COMWAKE_2       =>  ntRef_ntRX_SATA_COMWAKE_2,
     RX_LS_DATA_2       =>  ntRef_ntRX_LS_DATA_2,
     LPLL_READY_2       =>  ntRef_ntLPLL_READY_2,
     RX_SIGDET_STATUS_2       =>  ntRef_ntRX_SIGDET_STATUS_2,
     RX_READY_2       =>  ntRef_ntRX_READY_2,
     TEST_STATUS_2       =>  ntRef_ntTEST_STATUS_2,
     TX_RXDET_STATUS_3       =>  ntRef_ntTX_RXDET_STATUS_3,
     RX_SATA_COMINIT_3       =>  ntRef_ntRX_SATA_COMINIT_3,
     RX_SATA_COMWAKE_3       =>  ntRef_ntRX_SATA_COMWAKE_3,
     RX_LS_DATA_3       =>  ntRef_ntRX_LS_DATA_3,
     LPLL_READY_3       =>  ntRef_ntLPLL_READY_3,
     RX_SIGDET_STATUS_3       =>  ntRef_ntRX_SIGDET_STATUS_3,
     RX_READY_3       =>  ntRef_ntRX_READY_3,
     TEST_STATUS_3       =>  ntRef_ntTEST_STATUS_3,
     TDO_BSCAN       =>  ntRef_ntTDO_BSCAN,
     TEST_SO0       =>  ntRef_ntTEST_SO0,
     TEST_SO1       =>  ntRef_ntTEST_SO1,
     TEST_SO2       =>  ntRef_ntTEST_SO2,
     TEST_SO3       =>  ntRef_ntTEST_SO3,
     TEST_SO4       =>  ntRef_ntTEST_SO4,
     TEST_SO5       =>  ntRef_ntTEST_SO5,
     TEST_SO6       =>  ntRef_ntTEST_SO6,
     TEST_SO7       =>  ntRef_ntTEST_SO7,
     TEST_SO8       =>  ntRef_ntTEST_SO8,
     TEST_SO9       =>  ntRef_ntTEST_SO9,
     TEST_SO10       =>  ntRef_ntTEST_SO10,
     TEST_SO11       =>  ntRef_ntTEST_SO11,
     TEST_SO12       =>  ntRef_ntTEST_SO12,
     TEST_SO13       =>  ntRef_ntTEST_SO13,
     TEST_SO14       =>  ntRef_ntTEST_SO14,
     TEST_SO15       =>  ntRef_ntTEST_SO15,
     TEST_SO16       =>  ntRef_ntTEST_SO16,
     TEST_SO17       =>  ntRef_ntTEST_SO17,
     TEST_SO18       =>  ntRef_ntTEST_SO18,
     TEST_SO19       =>  ntRef_ntTEST_SO19,
     TEST_SO20       =>  ntRef_ntTEST_SO20,
     TEST_SO21       =>  ntRef_ntTEST_SO21,
     FOR_PMA_TEST_SO_CH0       =>  ntRef_ntFOR_PMA_TEST_SO_CH0,
     FOR_PMA_TEST_SO_CH1       =>  ntRef_ntFOR_PMA_TEST_SO_CH1,
     FOR_PMA_TEST_SO_CH2       =>  ntRef_ntFOR_PMA_TEST_SO_CH2,
     FOR_PMA_TEST_SO_CH3       =>  ntRef_ntFOR_PMA_TEST_SO_CH3,
     FOR_PMA_TEST_SO_HPLL       =>  ntRef_ntFOR_PMA_TEST_SO_HPLL,
     CLOCKDR_OUT       =>  ntRef_ntCLOCKDR_OUT,


     DIV_SYNC_FOR_LOWER_QUAD     =>    ntRef_ntDIV_SYNC_FOR_LOWER_QUAD,
     DIV_SYNC_FOR_UPPER_QUAD     =>    ntRef_ntDIV_SYNC_FOR_UPPER_QUAD,
     EM_ERROR_CNT_0     =>    ntRef_ntEM_ERROR_CNT_0,
     EM_ERROR_CNT_1     =>    ntRef_ntEM_ERROR_CNT_1,
     EM_ERROR_CNT_2     =>    ntRef_ntEM_ERROR_CNT_2,
     EM_ERROR_CNT_3     =>    ntRef_ntEM_ERROR_CNT_3,
//     PAD_TX_SDN0     =>    ntRef_ntPAD_TX_SDN0,
//     PAD_TX_SDN1     =>    ntRef_ntPAD_TX_SDN1,
//     PAD_TX_SDN2     =>    ntRef_ntPAD_TX_SDN2,
//     PAD_TX_SDN3     =>    ntRef_ntPAD_TX_SDN3,
//     PAD_TX_SDP0     =>    ntRef_ntPAD_TX_SDP0,
//     PAD_TX_SDP1     =>    ntRef_ntPAD_TX_SDP1,
//     PAD_TX_SDP2     =>    ntRef_ntPAD_TX_SDP2,
//     PAD_TX_SDP3     =>    ntRef_ntPAD_TX_SDP3,
     RCLK2FABRIC_T     =>    ntRef_ntRCLK2FABRIC_T,
     REFCK2CORE_T_0     =>    ntRef_ntREFCK2CORE_T_0,
     REFCK2CORE_T_1     =>    ntRef_ntREFCK2CORE_T_1,
     REFCLK_SYNC_FOR_LOWER_QUAD     =>    ntRef_ntREFCLK_SYNC_FOR_LOWER_QUAD,
     REFCLK_SYNC_FOR_UPPER_QUAD     =>    ntRef_ntREFCLK_SYNC_FOR_UPPER_QUAD,
     TCLK2FABRIC_T     =>    ntRef_ntTCLK2FABRIC_T,
     TX_SYNC_FOR_LOWER_QUAD     =>    ntRef_ntTX_SYNC_FOR_LOWER_QUAD,
     TX_SYNC_FOR_UPPER_QUAD     =>    ntRef_ntTX_SYNC_FOR_UPPER_QUAD



                      )
            @([sx,sy]);
  
        STRUCT inc_spec_hsst_hp incVar;
        string pin_SRB;
        string pin_logic_device;
        string attribute_IO;
        int loc_SRB;
        int sy_SRB;
  
        unsigned int sx_SRB;
        sx_SRB = sx-3;
        int cnt;
  
        foreach incVar(inc_hsst_hp_srb_spec)
        {
            pin_SRB = incVar.port_name_srb;
            pin_logic_device = incVar.port_name_device;
            attribute_IO = incVar.attribute_IO;
            loc_SRB = incVar.loc_SRB;
            sy_SRB = (loc_SRB>=25) ? sy+(loc_SRB+1)*NUM_GRID_Y : sy+loc_SRB*NUM_GRID_Y; 
  
            if(attribute_IO =="I")
            { 
  
              connect(<pin *pin_logic_device of <device HSSTHP_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_SRB,sy_SRB]>>);
            }
            else
            {
              connect(<pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy_SRB]>> =>  (pin_logic_device=="TIEHI") ? <wire TIEHI of <device SRB_TILE @[sx_SRB,sy_SRB]>>
                                                                                                          : <wire *pin_logic_device of <device HSSTHP_TILE @[sx,sy]>>);
            }
        }         
    }


}// end of function place_hssthp_tile


/********************************************************************************
********************************************************************************/
function place_pcie_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;

    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;


    string strVar;
    sprintf(strVar,"ntMUXD_AUX_CLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntMUXD_AUX_CLK_OUT = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCORE_RST_N_%d_%d",sx,sy);
    &wire ntRef_ntCORE_RST_N = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTRAINING_RST_N_%d_%d",sx,sy);
    &wire ntRef_ntTRAINING_RST_N = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPHY_RST_N_%d_%d",sx,sy);
    &wire ntRef_ntPHY_RST_N = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSMLH_LINK_UP_%d_%d",sx,sy);
    &wire ntRef_ntSMLH_LINK_UP = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRDLH_LINK_UP_%d_%d",sx,sy);
    &wire ntRef_ntRDLH_LINK_UP = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSMLH_LTSSM_STATE_%d_%d",sx,sy);
    &wire ntRef_ntSMLH_LTSSM_STATE[4:0] = wire *strVar[4:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntAXIS_MASTER_TVALID_%d_%d",sx,sy);
    &wire ntRef_ntAXIS_MASTER_TVALID = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntAXIS_MASTER_TDATA_%d_%d",sx,sy);
    &wire ntRef_ntAXIS_MASTER_TDATA[127:0] = wire *strVar[127:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntAXIS_MASTER_TKEEP_%d_%d",sx,sy);
    &wire ntRef_ntAXIS_MASTER_TKEEP[3:0] = wire *strVar[3:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntAXIS_MASTER_TLAST_%d_%d",sx,sy);
    &wire ntRef_ntAXIS_MASTER_TLAST = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntAXIS_MASTER_TUSER_%d_%d",sx,sy);
    &wire ntRef_ntAXIS_MASTER_TUSER[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRADM_GRANT_TLP_TYPE_%d_%d",sx,sy);
    &wire ntRef_ntRADM_GRANT_TLP_TYPE[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntAXIS_SLAVE0_TREADY_%d_%d",sx,sy);
    &wire ntRef_ntAXIS_SLAVE0_TREADY = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntAXIS_SLAVE1_TREADY_%d_%d",sx,sy);
    &wire ntRef_ntAXIS_SLAVE1_TREADY = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntAXIS_SLAVE2_TREADY_%d_%d",sx,sy);
    &wire ntRef_ntAXIS_SLAVE2_TREADY = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPM_XTLH_BLOCK_TLP_%d_%d",sx,sy);
    &wire ntRef_ntPM_XTLH_BLOCK_TLP = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntLBC_DBI_ACK_%d_%d",sx,sy);
    &wire ntRef_ntLBC_DBI_ACK = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntLBC_DBI_DOUT_%d_%d",sx,sy);
    &wire ntRef_ntLBC_DBI_DOUT[31:0] = wire *strVar[31:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEDO_%d_%d",sx,sy);
    &wire ntRef_ntSEDO = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEDO_EN_%d_%d",sx,sy);
    &wire ntRef_ntSEDO_EN = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_INT_DISABLE_%d_%d",sx,sy);
    &wire ntRef_ntCFG_INT_DISABLE = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntINTA_GRT_MUX_%d_%d",sx,sy);
    &wire ntRef_ntINTA_GRT_MUX = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntINTB_GRT_MUX_%d_%d",sx,sy);
    &wire ntRef_ntINTB_GRT_MUX = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntINTC_GRT_MUX_%d_%d",sx,sy);
    &wire ntRef_ntINTC_GRT_MUX = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntINTD_GRT_MUX_%d_%d",sx,sy);
    &wire ntRef_ntINTD_GRT_MUX = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntVEN_MSI_GRANT_%d_%d",sx,sy);
    &wire ntRef_ntVEN_MSI_GRANT = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_MSI_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_MSI_EN = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_MSIX_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_MSIX_EN = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_MSIX_FUNC_MASK_%d_%d",sx,sy);
    &wire ntRef_ntCFG_MSIX_FUNC_MASK = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRADM_PM_TURNOFF_%d_%d",sx,sy);
    &wire ntRef_ntRADM_PM_TURNOFF = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRADM_MSG_UNLOCK_%d_%d",sx,sy);
    &wire ntRef_ntRADM_MSG_UNLOCK = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPM_STATUS_%d_%d",sx,sy);
    &wire ntRef_ntPM_STATUS = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPM_DSTATE_%d_%d",sx,sy);
    &wire ntRef_ntPM_DSTATE[2:0] = wire *strVar[2:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntAUX_PM_EN_%d_%d",sx,sy);
    &wire ntRef_ntAUX_PM_EN = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPM_PME_EN_%d_%d",sx,sy);
    &wire ntRef_ntPM_PME_EN = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPM_LINKST_IN_L0S_%d_%d",sx,sy);
    &wire ntRef_ntPM_LINKST_IN_L0S = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPM_LINKST_IN_L1_%d_%d",sx,sy);
    &wire ntRef_ntPM_LINKST_IN_L1 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPM_LINKST_IN_L2_%d_%d",sx,sy);
    &wire ntRef_ntPM_LINKST_IN_L2 = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPM_LINKST_L2_EXIT_%d_%d",sx,sy);
    &wire ntRef_ntPM_LINKST_L2_EXIT = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntWAKE_%d_%d",sx,sy);
    &wire ntRef_ntWAKE = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRADM_PM_PME_%d_%d",sx,sy);
    &wire ntRef_ntRADM_PM_PME = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRADM_PM_TO_ACK_%d_%d",sx,sy);
    &wire ntRef_ntRADM_PM_TO_ACK = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPM_MASTER_STATE_%d_%d",sx,sy);
    &wire ntRef_ntPM_MASTER_STATE[4:0] = wire *strVar[4:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPM_SLAVE_STATE_%d_%d",sx,sy);
    &wire ntRef_ntPM_SLAVE_STATE[4:0] = wire *strVar[4:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_SEND_COR_ERR_MUX_%d_%d",sx,sy);
    &wire ntRef_ntCFG_SEND_COR_ERR_MUX = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_SEND_NF_ERR_MUX_%d_%d",sx,sy);
    &wire ntRef_ntCFG_SEND_NF_ERR_MUX = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_SEND_F_ERR_MUX_%d_%d",sx,sy);
    &wire ntRef_ntCFG_SEND_F_ERR_MUX = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_SYS_ERR_RC_%d_%d",sx,sy);
    &wire ntRef_ntCFG_SYS_ERR_RC = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_AER_RC_ERR_MUX_%d_%d",sx,sy);
    &wire ntRef_ntCFG_AER_RC_ERR_MUX = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRADM_CPL_TIMEOUT_%d_%d",sx,sy);
    &wire ntRef_ntRADM_CPL_TIMEOUT = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRADM_TIMEOUT_CPL_TC_%d_%d",sx,sy);
    &wire ntRef_ntRADM_TIMEOUT_CPL_TC[2:0] = wire *strVar[2:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRADM_TIMEOUT_CPL_TAG_%d_%d",sx,sy);
    &wire ntRef_ntRADM_TIMEOUT_CPL_TAG[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRADM_TIMEOUT_CPL_ATTR_%d_%d",sx,sy);
    &wire ntRef_ntRADM_TIMEOUT_CPL_ATTR[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRADM_TIMEOUT_CPL_LEN_%d_%d",sx,sy);
    &wire ntRef_ntRADM_TIMEOUT_CPL_LEN[10:0] = wire *strVar[10:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_MAX_RD_REQ_SIZE_%d_%d",sx,sy);
    &wire ntRef_ntCFG_MAX_RD_REQ_SIZE[2:0] = wire *strVar[2:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_BUS_MASTER_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_BUS_MASTER_EN = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_MAX_PAYLOAD_SIZE_%d_%d",sx,sy);
    &wire ntRef_ntCFG_MAX_PAYLOAD_SIZE[2:0] = wire *strVar[2:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_RCB_%d_%d",sx,sy);
    &wire ntRef_ntCFG_RCB = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_MEM_SPACE_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_MEM_SPACE_EN = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_PM_NO_SOFT_RST_%d_%d",sx,sy);
    &wire ntRef_ntCFG_PM_NO_SOFT_RST = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_CRS_SW_VIS_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_CRS_SW_VIS_EN = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_NO_SNOOP_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_NO_SNOOP_EN = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_RELAX_ORDER_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_RELAX_ORDER_EN = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_TPH_REQ_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_TPH_REQ_EN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_PF_TPH_ST_MODE_%d_%d",sx,sy);
    &wire ntRef_ntCFG_PF_TPH_ST_MODE[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_PBUS_NUM_%d_%d",sx,sy);
    &wire ntRef_ntCFG_PBUS_NUM[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_PBUS_DEV_NUM_%d_%d",sx,sy);
    &wire ntRef_ntCFG_PBUS_DEV_NUM[4:0] = wire *strVar[4:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRBAR_CTRL_UPDATE_%d_%d",sx,sy);
    &wire ntRef_ntRBAR_CTRL_UPDATE = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_ATOMIC_REQ_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_ATOMIC_REQ_EN = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_ATOMIC_EGRESS_BLOCK_%d_%d",sx,sy);
    &wire ntRef_ntCFG_ATOMIC_EGRESS_BLOCK = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRADM_IDLE_%d_%d",sx,sy);
    &wire ntRef_ntRADM_IDLE = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRADM_Q_NOT_EMPTY_%d_%d",sx,sy);
    &wire ntRef_ntRADM_Q_NOT_EMPTY = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRADM_QOVERFLOW_%d_%d",sx,sy);
    &wire ntRef_ntRADM_QOVERFLOW = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_LINK_AUTO_BW_MUX_%d_%d",sx,sy);
    &wire ntRef_ntCFG_LINK_AUTO_BW_MUX = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_BW_MGT_MUX_%d_%d",sx,sy);
    &wire ntRef_ntCFG_BW_MGT_MUX = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_PME_MUX_%d_%d",sx,sy);
    &wire ntRef_ntCFG_PME_MUX = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_HP_MUX_%d_%d",sx,sy);
    &wire ntRef_ntCFG_HP_MUX = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDEBUG_INFO_MUX_%d_%d",sx,sy);
    &wire ntRef_ntDEBUG_INFO_MUX[142:0] = wire *strVar[142:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_IDO_REQ_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_IDO_REQ_EN = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_IDO_CPL_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_IDO_CPL_EN = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntXADM_PH_CDTS_%d_%d",sx,sy);
    &wire ntRef_ntXADM_PH_CDTS[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntXADM_PD_CDTS_%d_%d",sx,sy);
    &wire ntRef_ntXADM_PD_CDTS[11:0] = wire *strVar[11:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntXADM_NPH_CDTS_%d_%d",sx,sy);
    &wire ntRef_ntXADM_NPH_CDTS[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntXADM_NPD_CDTS_%d_%d",sx,sy);
    &wire ntRef_ntXADM_NPD_CDTS[11:0] = wire *strVar[11:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntXADM_CPLH_CDTS_%d_%d",sx,sy);
    &wire ntRef_ntXADM_CPLH_CDTS[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntXADM_CPLD_CDTS_%d_%d",sx,sy);
    &wire ntRef_ntXADM_CPLD_CDTS[11:0] = wire *strVar[11:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMAC_PHY_POWERDOWN_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_POWERDOWN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMAC_PHY_TXDATA_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_TXDATA[127:0] = wire *strVar[127:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMAC_PHY_TXDATAK_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_TXDATAK[15:0] = wire *strVar[15:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMAC_PHY_TXDETECTRX_LOOPBACK_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_TXDETECTRX_LOOPBACK[3:0] = wire *strVar[3:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMAC_PHY_TXELECIDLE_L_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_TXELECIDLE_L[3:0] = wire *strVar[3:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMAC_PHY_TXELECIDLE_H_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_TXELECIDLE_H[3:0] = wire *strVar[3:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMAC_PHY_TXCOMPLIANCE_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_TXCOMPLIANCE[3:0] = wire *strVar[3:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMAC_PHY_RXPOLARITY_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_RXPOLARITY[3:0] = wire *strVar[3:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMAC_PHY_RATE_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_RATE = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMAC_PHY_TXDEEMPH_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_TXDEEMPH[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMAC_PHY_TXMARGIN_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_TXMARGIN[2:0] = wire *strVar[2:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMAC_PHY_TXSWING_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_TXSWING = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_HW_AUTO_SP_DIS_%d_%d",sx,sy);
    &wire ntRef_ntCFG_HW_AUTO_SP_DIS = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntP_DATAQ_ADDRA_%d_%d",sx,sy);
    &wire ntRef_ntP_DATAQ_ADDRA[9:0] = wire *strVar[9:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntP_DATAQ_ADDRB_%d_%d",sx,sy);
    &wire ntRef_ntP_DATAQ_ADDRB[9:0] = wire *strVar[9:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntP_DATAQ_DATAIN_%d_%d",sx,sy);
    &wire ntRef_ntP_DATAQ_DATAIN[65:0] = wire *strVar[65:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntP_DATAQ_ENA_%d_%d",sx,sy);
    &wire ntRef_ntP_DATAQ_ENA = wire *strVar                         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntP_DATAQ_ENB_%d_%d",sx,sy);
    &wire ntRef_ntP_DATAQ_ENB = wire *strVar                         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntP_DATAQ_WEA_%d_%d",sx,sy);
    &wire ntRef_ntP_DATAQ_WEA = wire *strVar                        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntXDLH_RETRYRAM_ADDR_%d_%d",sx,sy);
    &wire ntRef_ntXDLH_RETRYRAM_ADDR[10:0] = wire *strVar[10:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntXDLH_RETRYRAM_DATA_%d_%d",sx,sy);
    &wire ntRef_ntXDLH_RETRYRAM_DATA[67:0] = wire *strVar[67:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntXDLH_RETRYRAM_WE_%d_%d",sx,sy);
    &wire ntRef_ntXDLH_RETRYRAM_WE = wire *strVar                        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntXDLH_RETRYRAM_EN_%d_%d",sx,sy);
    &wire ntRef_ntXDLH_RETRYRAM_EN = wire *strVar                        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntP_HDRQ_ADDRA_%d_%d",sx,sy);
    &wire ntRef_ntP_HDRQ_ADDRA[8:0] = wire *strVar[8:0]                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntP_HDRQ_ADDRB_%d_%d",sx,sy);
    &wire ntRef_ntP_HDRQ_ADDRB[8:0] = wire *strVar[8:0]                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntP_HDRQ_DATAIN_%d_%d",sx,sy);
    &wire ntRef_ntP_HDRQ_DATAIN[137:0] = wire *strVar[137:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntP_HDRQ_ENA_%d_%d",sx,sy);
    &wire ntRef_ntP_HDRQ_ENA = wire *strVar                          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntP_HDRQ_ENB_%d_%d",sx,sy);
    &wire ntRef_ntP_HDRQ_ENB = wire *strVar                         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntP_HDRQ_WEA_%d_%d",sx,sy);
    &wire ntRef_ntP_HDRQ_WEA = wire *strVar                         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCFG_EXT_TAG_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_EXT_TAG_EN = wire *strVar                         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;


    sprintf(strVar, "PCIE_TILE_%d_%d", sx, sy);

    device PCIE_TILE *strVar
          port map (
//                     MUXD_AUX_CLK_OUT                 => ntRef_ntMUXD_AUX_CLK_OUT,
                     CFG_EXT_TAG_EN                   => ntRef_ntCFG_EXT_TAG_EN,
                     CORE_RST_N                       => ntRef_ntCORE_RST_N,
                     TRAINING_RST_N                   => ntRef_ntTRAINING_RST_N,
                     PHY_RST_N                        => ntRef_ntPHY_RST_N,
                     SMLH_LINK_UP                     => ntRef_ntSMLH_LINK_UP,
                     RDLH_LINK_UP                     => ntRef_ntRDLH_LINK_UP,
                     SMLH_LTSSM_STATE                 => ntRef_ntSMLH_LTSSM_STATE,     
                     AXIS_MASTER_TVALID               => ntRef_ntAXIS_MASTER_TVALID,
                     AXIS_MASTER_TDATA                => ntRef_ntAXIS_MASTER_TDATA,
                     AXIS_MASTER_TKEEP                => ntRef_ntAXIS_MASTER_TKEEP,
                     AXIS_MASTER_TLAST                => ntRef_ntAXIS_MASTER_TLAST,
                     AXIS_MASTER_TUSER                => ntRef_ntAXIS_MASTER_TUSER,
                     RADM_GRANT_TLP_TYPE              => ntRef_ntRADM_GRANT_TLP_TYPE,
                     AXIS_SLAVE0_TREADY               => ntRef_ntAXIS_SLAVE0_TREADY,
                     AXIS_SLAVE1_TREADY               => ntRef_ntAXIS_SLAVE1_TREADY,
                     AXIS_SLAVE2_TREADY               => ntRef_ntAXIS_SLAVE2_TREADY,
                     PM_XTLH_BLOCK_TLP                => ntRef_ntPM_XTLH_BLOCK_TLP,      
                     LBC_DBI_ACK                      => ntRef_ntLBC_DBI_ACK,
                     LBC_DBI_DOUT                     => ntRef_ntLBC_DBI_DOUT,
                     SEDO                             => ntRef_ntSEDO,
                     SEDO_EN                          => ntRef_ntSEDO_EN,          
                     CFG_INT_DISABLE                  => ntRef_ntCFG_INT_DISABLE, 
                     INTA_GRT_MUX                     => ntRef_ntINTA_GRT_MUX,
                     INTB_GRT_MUX                     => ntRef_ntINTB_GRT_MUX,
                     INTC_GRT_MUX                     => ntRef_ntINTC_GRT_MUX,
                     INTD_GRT_MUX                     => ntRef_ntINTD_GRT_MUX,
                     VEN_MSI_GRANT                    => ntRef_ntVEN_MSI_GRANT,
                     CFG_MSI_EN                       => ntRef_ntCFG_MSI_EN,
                     CFG_MSIX_EN                      => ntRef_ntCFG_MSIX_EN,      
                     CFG_MSIX_FUNC_MASK               => ntRef_ntCFG_MSIX_FUNC_MASK,     
                     RADM_PM_TURNOFF                  => ntRef_ntRADM_PM_TURNOFF,
                     RADM_MSG_UNLOCK                  => ntRef_ntRADM_MSG_UNLOCK,
                     PM_STATUS                        => ntRef_ntPM_STATUS,
                     PM_DSTATE                        => ntRef_ntPM_DSTATE,
                     AUX_PM_EN                        => ntRef_ntAUX_PM_EN,
                     PM_PME_EN                        => ntRef_ntPM_PME_EN,
                     PM_LINKST_IN_L0S                 => ntRef_ntPM_LINKST_IN_L0S,
                     PM_LINKST_IN_L1                  => ntRef_ntPM_LINKST_IN_L1,
                     PM_LINKST_IN_L2                  => ntRef_ntPM_LINKST_IN_L2,
                     PM_LINKST_L2_EXIT                => ntRef_ntPM_LINKST_L2_EXIT,
                     WAKE                             => ntRef_ntWAKE,
                     RADM_PM_PME                      => ntRef_ntRADM_PM_PME,
                     RADM_PM_TO_ACK                   => ntRef_ntRADM_PM_TO_ACK,
                     PM_MASTER_STATE                  => ntRef_ntPM_MASTER_STATE,
                     PM_SLAVE_STATE                   => ntRef_ntPM_SLAVE_STATE,
                     CFG_SEND_COR_ERR_MUX             => ntRef_ntCFG_SEND_COR_ERR_MUX,
                     CFG_SEND_NF_ERR_MUX              => ntRef_ntCFG_SEND_NF_ERR_MUX, 
                     CFG_SEND_F_ERR_MUX               => ntRef_ntCFG_SEND_F_ERR_MUX,  
                     CFG_SYS_ERR_RC                   => ntRef_ntCFG_SYS_ERR_RC,
                     CFG_AER_RC_ERR_MUX               => ntRef_ntCFG_AER_RC_ERR_MUX,             
                     RADM_CPL_TIMEOUT                 => ntRef_ntRADM_CPL_TIMEOUT,
                     RADM_TIMEOUT_CPL_TC              => ntRef_ntRADM_TIMEOUT_CPL_TC,
                     RADM_TIMEOUT_CPL_TAG             => ntRef_ntRADM_TIMEOUT_CPL_TAG,
                     RADM_TIMEOUT_CPL_ATTR            => ntRef_ntRADM_TIMEOUT_CPL_ATTR,
                     RADM_TIMEOUT_CPL_LEN             => ntRef_ntRADM_TIMEOUT_CPL_LEN,                                        
                     CFG_MAX_RD_REQ_SIZE              => ntRef_ntCFG_MAX_RD_REQ_SIZE,
                     CFG_BUS_MASTER_EN                => ntRef_ntCFG_BUS_MASTER_EN,
                     CFG_MAX_PAYLOAD_SIZE             => ntRef_ntCFG_MAX_PAYLOAD_SIZE,
                     CFG_RCB                          => ntRef_ntCFG_RCB,
                     CFG_MEM_SPACE_EN                 => ntRef_ntCFG_MEM_SPACE_EN,
                     CFG_PM_NO_SOFT_RST               => ntRef_ntCFG_PM_NO_SOFT_RST,
                     CFG_CRS_SW_VIS_EN                => ntRef_ntCFG_CRS_SW_VIS_EN,
                     CFG_NO_SNOOP_EN                  => ntRef_ntCFG_NO_SNOOP_EN,
                     CFG_RELAX_ORDER_EN               => ntRef_ntCFG_RELAX_ORDER_EN,
                     CFG_TPH_REQ_EN                   => ntRef_ntCFG_TPH_REQ_EN,
                     CFG_PF_TPH_ST_MODE               => ntRef_ntCFG_PF_TPH_ST_MODE,
                     CFG_PBUS_NUM                     => ntRef_ntCFG_PBUS_NUM,
                     CFG_PBUS_DEV_NUM                 => ntRef_ntCFG_PBUS_DEV_NUM,
                     RBAR_CTRL_UPDATE                 => ntRef_ntRBAR_CTRL_UPDATE,
                     CFG_ATOMIC_REQ_EN                => ntRef_ntCFG_ATOMIC_REQ_EN,
                     CFG_ATOMIC_EGRESS_BLOCK          => ntRef_ntCFG_ATOMIC_EGRESS_BLOCK,               
                     RADM_IDLE                        => ntRef_ntRADM_IDLE,
                     RADM_Q_NOT_EMPTY                 => ntRef_ntRADM_Q_NOT_EMPTY,
                     RADM_QOVERFLOW                   => ntRef_ntRADM_QOVERFLOW,
                     CFG_LINK_AUTO_BW_MUX             => ntRef_ntCFG_LINK_AUTO_BW_MUX,  
                     CFG_BW_MGT_MUX                   => ntRef_ntCFG_BW_MGT_MUX,        
                     CFG_PME_MUX                      => ntRef_ntCFG_PME_MUX,
//                     CFG_HP_MUX                       => ntRef_ntCFG_HP_MUX,           
                     DEBUG_INFO_MUX                   => ntRef_ntDEBUG_INFO_MUX,
                     CFG_IDO_REQ_EN                   => ntRef_ntCFG_IDO_REQ_EN,
                     CFG_IDO_CPL_EN                   => ntRef_ntCFG_IDO_CPL_EN,
                     XADM_PH_CDTS                     => ntRef_ntXADM_PH_CDTS,
                     XADM_PD_CDTS                     => ntRef_ntXADM_PD_CDTS,
                     XADM_NPH_CDTS                    => ntRef_ntXADM_NPH_CDTS,
                     XADM_NPD_CDTS                    => ntRef_ntXADM_NPD_CDTS,
                     XADM_CPLH_CDTS                   => ntRef_ntXADM_CPLH_CDTS,
                     XADM_CPLD_CDTS                   => ntRef_ntXADM_CPLD_CDTS,
                     MAC_PHY_POWERDOWN                => ntRef_ntMAC_PHY_POWERDOWN,
                     MAC_PHY_TXDATA                   => ntRef_ntMAC_PHY_TXDATA,
                     MAC_PHY_TXDATAK                  => ntRef_ntMAC_PHY_TXDATAK,
                     MAC_PHY_TXDETECTRX_LOOPBACK      => ntRef_ntMAC_PHY_TXDETECTRX_LOOPBACK,
                     MAC_PHY_TXELECIDLE_L             => ntRef_ntMAC_PHY_TXELECIDLE_L,
                     MAC_PHY_TXELECIDLE_H             => ntRef_ntMAC_PHY_TXELECIDLE_H,
                     MAC_PHY_TXCOMPLIANCE             => ntRef_ntMAC_PHY_TXCOMPLIANCE,
                     MAC_PHY_RXPOLARITY               => ntRef_ntMAC_PHY_RXPOLARITY,
                     MAC_PHY_RATE                     => ntRef_ntMAC_PHY_RATE,
                     MAC_PHY_TXDEEMPH                 => ntRef_ntMAC_PHY_TXDEEMPH,
                     MAC_PHY_TXMARGIN                 => ntRef_ntMAC_PHY_TXMARGIN,
                     MAC_PHY_TXSWING                  => ntRef_ntMAC_PHY_TXSWING,
                     CFG_HW_AUTO_SP_DIS               => ntRef_ntCFG_HW_AUTO_SP_DIS, 
                     P_DATAQ_ADDRA                    => ntRef_ntP_DATAQ_ADDRA,
                     P_DATAQ_ADDRB                    => ntRef_ntP_DATAQ_ADDRB,
                     P_DATAQ_DATAIN                   => ntRef_ntP_DATAQ_DATAIN,
                     P_DATAQ_ENA                      => ntRef_ntP_DATAQ_ENA,
                     P_DATAQ_ENB                      => ntRef_ntP_DATAQ_ENB,
                     P_DATAQ_WEA                      => ntRef_ntP_DATAQ_WEA,     
                     XDLH_RETRYRAM_ADDR               => ntRef_ntXDLH_RETRYRAM_ADDR,
                     XDLH_RETRYRAM_DATA               => ntRef_ntXDLH_RETRYRAM_DATA,
                     XDLH_RETRYRAM_WE                 => ntRef_ntXDLH_RETRYRAM_WE,
                     XDLH_RETRYRAM_EN                 => ntRef_ntXDLH_RETRYRAM_EN,
                     P_HDRQ_ADDRA                     => ntRef_ntP_HDRQ_ADDRA,
                     P_HDRQ_ADDRB                     => ntRef_ntP_HDRQ_ADDRB,
                     P_HDRQ_DATAIN                    => ntRef_ntP_HDRQ_DATAIN,
                     P_HDRQ_ENA                       => ntRef_ntP_HDRQ_ENA,
                     P_HDRQ_ENB                       => ntRef_ntP_HDRQ_ENB,
                     P_HDRQ_WEA                       => ntRef_ntP_HDRQ_WEA

                    )
        @([sx,sy]);

      STRUCT inc_spec_pcie incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;
      string srb_lr;
      unsigned int sx_SRB;
      int cnt;

      foreach incVar(inc_pcie_srb_spec)
      {
          pin_SRB = incVar.port_name_srb;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          srb_lr = incVar.srb_lr;
          loc_SRB = incVar.loc_SRB;
          sy_SRB = sy+loc_SRB*NUM_GRID_Y; 
          sx_SRB = (srb_lr=="L") ? sx-3 : sx+2*NUM_GRID_X+3;

          if(attribute_IO =="I")
          { 

            connect(<pin *pin_logic_device of <device PCIE_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_SRB,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy_SRB]>> =>  (pin_logic_device=="TIEHI") ? <wire TIEHI of <device SRB_TILE @[sx_SRB,sy_SRB]>>
                                                                                                        : <wire *pin_logic_device of <device PCIE_TILE @[sx,sy]>>);
          }
      }         


}// end of function place_pcie_tile


/********************************************************************************
********************************************************************************/
function place_pciegen3_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;

    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;


    string strVar;

//    sprintf(strVar,"ntAPP_LTR_LATENCY_%d_%d",sx,sy);
//    &wire ntRef_ntAPP_LTR_LATENCY[31:0] = wire *strVar[31:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntAPP_LTR_MSG_GRANT_%d_%d",sx,sy);
    &wire ntRef_ntAPP_LTR_MSG_GRANT = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntAPP_OBFF_MSG_GRANT_%d_%d",sx,sy);
    &wire ntRef_ntAPP_OBFF_MSG_GRANT = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntAUX_PM_EN_%d_%d",sx,sy);
    &wire ntRef_ntAUX_PM_EN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntAXIS_MASTER0_TDATA_%d_%d",sx,sy);
    &wire ntRef_ntAXIS_MASTER0_TDATA[255:0] = wire *strVar[255:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntAXIS_MASTER0_TKEEP_%d_%d",sx,sy);
    &wire ntRef_ntAXIS_MASTER0_TKEEP[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntAXIS_MASTER0_TLAST_%d_%d",sx,sy);
    &wire ntRef_ntAXIS_MASTER0_TLAST = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntAXIS_MASTER0_TUSER_%d_%d",sx,sy);
    &wire ntRef_ntAXIS_MASTER0_TUSER[12:0] = wire *strVar[12:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntAXIS_MASTER0_TVALID_%d_%d",sx,sy);
    &wire ntRef_ntAXIS_MASTER0_TVALID = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntAXIS_MASTER1_TDATA_%d_%d",sx,sy);
    &wire ntRef_ntAXIS_MASTER1_TDATA[255:0] = wire *strVar[255:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntAXIS_MASTER1_TKEEP_%d_%d",sx,sy);
    &wire ntRef_ntAXIS_MASTER1_TKEEP[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntAXIS_MASTER1_TUSER_%d_%d",sx,sy);
    &wire ntRef_ntAXIS_MASTER1_TUSER[33:0] = wire *strVar[33:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntAXIS_MASTER1_TVALID_%d_%d",sx,sy);
    &wire ntRef_ntAXIS_MASTER1_TVALID = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntAXIS_SLAVE0_TREADY_%d_%d",sx,sy);
    &wire ntRef_ntAXIS_SLAVE0_TREADY = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntAXIS_SLAVE1_TREADY_%d_%d",sx,sy);
    &wire ntRef_ntAXIS_SLAVE1_TREADY = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntAXIS_SLAVE2_TREADY_%d_%d",sx,sy);
    &wire ntRef_ntAXIS_SLAVE2_TREADY = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_2ND_RESET_%d_%d",sx,sy);
    &wire ntRef_ntCFG_2ND_RESET = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
//    sprintf(strVar,"ntCFG_AER_INT_MSG_NUM_%d_%d",sx,sy);
//    &wire ntRef_ntCFG_AER_INT_MSG_NUM[9:0] = wire *strVar[9:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_AER_RC_ERR_INT_%d_%d",sx,sy);
    &wire ntRef_ntCFG_AER_RC_ERR_INT[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_AER_RC_ERR_MSI_%d_%d",sx,sy);
    &wire ntRef_ntCFG_AER_RC_ERR_MSI[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_ARI_FWD_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_ARI_FWD_EN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_ATOMIC_EGRESS_BLOCK_%d_%d",sx,sy);
    &wire ntRef_ntCFG_ATOMIC_EGRESS_BLOCK[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_ATOMIC_REQ_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_ATOMIC_REQ_EN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_BUS_MASTER_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_BUS_MASTER_EN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_BW_MGT_INT_%d_%d",sx,sy);
    &wire ntRef_ntCFG_BW_MGT_INT = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_BW_MGT_MSI_%d_%d",sx,sy);
    &wire ntRef_ntCFG_BW_MGT_MSI = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_COR_ERR_RPT_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_COR_ERR_RPT_EN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_CRS_SW_VIS_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_CRS_SW_VIS_EN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_DISABLE_LTR_CLR_MSG_%d_%d",sx,sy);
    &wire ntRef_ntCFG_DISABLE_LTR_CLR_MSG = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_EXT_TAG_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_EXT_TAG_EN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_F_ERR_RPT_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_F_ERR_RPT_EN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_FLR_PF_ACTIVE_%d_%d",sx,sy);
    &wire ntRef_ntCFG_FLR_PF_ACTIVE[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_FLR_VF_ACTIVE_%d_%d",sx,sy);
    &wire ntRef_ntCFG_FLR_VF_ACTIVE[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_IDO_CPL_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_IDO_CPL_EN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_IDO_REQ_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_IDO_REQ_EN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_INT_DISABLE_%d_%d",sx,sy);
    &wire ntRef_ntCFG_INT_DISABLE[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_LINK_AUTO_BW_INT_%d_%d",sx,sy);
    &wire ntRef_ntCFG_LINK_AUTO_BW_INT = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_LINK_AUTO_BW_MSI_%d_%d",sx,sy);
    &wire ntRef_ntCFG_LINK_AUTO_BW_MSI = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_LINK_EQ_REQ_INT_%d_%d",sx,sy);
    &wire ntRef_ntCFG_LINK_EQ_REQ_INT = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_LTR_M_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_LTR_M_EN = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
//    sprintf(strVar,"ntCFG_LTR_MAX_LATENCY_%d_%d",sx,sy);
//    &wire ntRef_ntCFG_LTR_MAX_LATENCY[63:0] = wire *strVar[63:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_MAX_PAYLOAD_SIZE_%d_%d",sx,sy);
    &wire ntRef_ntCFG_MAX_PAYLOAD_SIZE[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_MAX_RD_REQ_SIZE_%d_%d",sx,sy);
    &wire ntRef_ntCFG_MAX_RD_REQ_SIZE[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_MEM_SPACE_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_MEM_SPACE_EN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_MSI_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_MSI_EN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_MSI_MASK_UPDATE_%d_%d",sx,sy);
    &wire ntRef_ntCFG_MSI_MASK_UPDATE = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_MSIX_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_MSIX_EN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_MSIX_FUNC_MASK_%d_%d",sx,sy);
    &wire ntRef_ntCFG_MSIX_FUNC_MASK[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_MULTI_MSI_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_MULTI_MSI_EN[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_NF_ERR_RPT_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_NF_ERR_RPT_EN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_NO_SNOOP_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_NO_SNOOP_EN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_NUM_VF_%d_%d",sx,sy);
    &wire ntRef_ntCFG_NUM_VF[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_OBFF_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_OBFF_EN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_PBUS_DEV_NUM_%d_%d",sx,sy);
    &wire ntRef_ntCFG_PBUS_DEV_NUM[4:0] = wire *strVar[4:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_PBUS_NUM_%d_%d",sx,sy);
    &wire ntRef_ntCFG_PBUS_NUM[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
//    sprintf(strVar,"ntCFG_PCIE_CAP_INT_MSG_NUM_%d_%d",sx,sy);
//    &wire ntRef_ntCFG_PCIE_CAP_INT_MSG_NUM[9:0] = wire *strVar[9:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_PF_TPH_ST_MODE_%d_%d",sx,sy);
    &wire ntRef_ntCFG_PF_TPH_ST_MODE[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_PME_INT_%d_%d",sx,sy);
    &wire ntRef_ntCFG_PME_INT[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_PME_MSI_%d_%d",sx,sy);
    &wire ntRef_ntCFG_PME_MSI[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_PWR_BUDGET_DATA_SEL_REG_%d_%d",sx,sy);
    &wire ntRef_ntCFG_PWR_BUDGET_DATA_SEL_REG[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_PWR_BUDGET_SEL_%d_%d",sx,sy);
    &wire ntRef_ntCFG_PWR_BUDGET_SEL[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_RCB_%d_%d",sx,sy);
    &wire ntRef_ntCFG_RCB[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_REG_SERREN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_REG_SERREN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_RELAX_ORDER_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_RELAX_ORDER_EN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_SEND_COR_ERR_%d_%d",sx,sy);
    &wire ntRef_ntCFG_SEND_COR_ERR[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_SEND_F_ERR_%d_%d",sx,sy);
    &wire ntRef_ntCFG_SEND_F_ERR[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_SEND_NF_ERR_%d_%d",sx,sy);
    &wire ntRef_ntCFG_SEND_NF_ERR[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_START_VFI_%d_%d",sx,sy);
    &wire ntRef_ntCFG_START_VFI[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_SYS_ERR_RC_%d_%d",sx,sy);
    &wire ntRef_ntCFG_SYS_ERR_RC[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_TC_ENABLE_%d_%d",sx,sy);
    &wire ntRef_ntCFG_TC_ENABLE[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_TPH_REQ_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_TPH_REQ_EN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_VF_BME_%d_%d",sx,sy);
    &wire ntRef_ntCFG_VF_BME[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_VF_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_VF_EN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_VF_MSI_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_VF_MSI_EN[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_VF_MSIX_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_VF_MSIX_EN[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_VF_MSIX_FUNC_MASK_%d_%d",sx,sy);
    &wire ntRef_ntCFG_VF_MSIX_FUNC_MASK[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_VF_MULTI_MSI_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_VF_MULTI_MSI_EN[17:0] = wire *strVar[17:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_VF_TPH_REQ_EN_%d_%d",sx,sy);
    &wire ntRef_ntCFG_VF_TPH_REQ_EN[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCFG_VF_TPH_ST_MODE_%d_%d",sx,sy);
    &wire ntRef_ntCFG_VF_TPH_ST_MODE[17:0] = wire *strVar[17:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntCORE_AVL_NP_CNT_%d_%d",sx,sy);
    &wire ntRef_ntCORE_AVL_NP_CNT[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntDEBUG_INFO_MUX_%d_%d",sx,sy);
    &wire ntRef_ntDEBUG_INFO_MUX[142:0] = wire *strVar[142:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntDPA_SUBSTATE_UPDATE_%d_%d",sx,sy);
    &wire ntRef_ntDPA_SUBSTATE_UPDATE[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntINT_GRT_%d_%d",sx,sy);
    &wire ntRef_ntINT_GRT = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntLBC_DBI_ACK_%d_%d",sx,sy);
    &wire ntRef_ntLBC_DBI_ACK = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntLBC_DBI_DOUT_%d_%d",sx,sy);
    &wire ntRef_ntLBC_DBI_DOUT[31:0] = wire *strVar[31:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntLINK_REQ_RST_%d_%d",sx,sy);
    &wire ntRef_ntLINK_REQ_RST = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_BLOCKALIGNCONTROL_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_BLOCKALIGNCONTROL = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_DIRCHANGE_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_DIRCHANGE[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_FS_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_FS[47:0] = wire *strVar[47:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_GETLOCAL_PSET_COEF_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_GETLOCAL_PSET_COEF[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_INVALID_REQ_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_INVALID_REQ[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_LF_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_LF[47:0] = wire *strVar[47:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_LOCAL_PSET_INDEX_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_LOCAL_PSET_INDEX[31:0] = wire *strVar[31:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_POWERDOWN_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_POWERDOWN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_RATE_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_RATE[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_RXEQEVAL_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_RXEQEVAL[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_RXEQINPROGRESS_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_RXEQINPROGRESS[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_RXPOLARITY_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_RXPOLARITY[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_RXPRESETHINT_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_RXPRESETHINT[23:0] = wire *strVar[23:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_TXCOMPLIANCE_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_TXCOMPLIANCE[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_TXDATA_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_TXDATA[255:0] = wire *strVar[255:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_TXDATAK_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_TXDATAK[31:0] = wire *strVar[31:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_TXDATAVALID_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_TXDATAVALID[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_TXDEEMPH_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_TXDEEMPH[48:0] = wire *strVar[48:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_TXDETECTRX_LOOPBACK_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_TXDETECTRX_LOOPBACK[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_TXELECIDLE_H_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_TXELECIDLE_H[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_TXELECIDLE_L_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_TXELECIDLE_L[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_TXMARGIN_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_TXMARGIN[2:0] = wire *strVar[2:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_TXSTARTBLOCK_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_TXSTARTBLOCK[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_TXSWING_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_TXSWING = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMAC_PHY_TXSYNCHEADER_%d_%d",sx,sy);
    &wire ntRef_ntMAC_PHY_TXSYNCHEADER[15:0] = wire *strVar[15:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMSG_RCVD_%d_%d",sx,sy);
    &wire ntRef_ntMSG_RCVD = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMSG_RCVD_DATA_%d_%d",sx,sy);
    &wire ntRef_ntMSG_RCVD_DATA[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntMSG_RCVD_TYPE_%d_%d",sx,sy);
    &wire ntRef_ntMSG_RCVD_TYPE[4:0] = wire *strVar[4:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntPHY_RST_N_%d_%d",sx,sy);
    &wire ntRef_ntPHY_RST_N = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntPM_DSTATE_%d_%d",sx,sy);
    &wire ntRef_ntPM_DSTATE[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntPM_MASTER_STATE_%d_%d",sx,sy);
    &wire ntRef_ntPM_MASTER_STATE[4:0] = wire *strVar[4:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntPM_PME_EN_%d_%d",sx,sy);
    &wire ntRef_ntPM_PME_EN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntPM_SLAVE_STATE_%d_%d",sx,sy);
    &wire ntRef_ntPM_SLAVE_STATE[4:0] = wire *strVar[4:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntPM_STATUS_%d_%d",sx,sy);
    &wire ntRef_ntPM_STATUS[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntPM_VF_DSTATE_%d_%d",sx,sy);
    &wire ntRef_ntPM_VF_DSTATE[17:0] = wire *strVar[17:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntPM_VF_PME_EN_%d_%d",sx,sy);
    &wire ntRef_ntPM_VF_PME_EN[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntPM_VF_STATUS_%d_%d",sx,sy);
    &wire ntRef_ntPM_VF_STATUS[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntPM_XTLH_BLOCK_TLP_%d_%d",sx,sy);
    &wire ntRef_ntPM_XTLH_BLOCK_TLP = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntPNP_RAM_RD_ADDR_%d_%d",sx,sy);
    &wire ntRef_ntPNP_RAM_RD_ADDR[9:0] = wire *strVar[9:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntPNP_RAM_RD_EN_%d_%d",sx,sy);
    &wire ntRef_ntPNP_RAM_RD_EN = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntPNP_RAM_WR_ADDR_%d_%d",sx,sy);
    &wire ntRef_ntPNP_RAM_WR_ADDR[9:0] = wire *strVar[9:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntPNP_RAM_WR_DATA_%d_%d",sx,sy);
    &wire ntRef_ntPNP_RAM_WR_DATA[134:0] = wire *strVar[134:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntPNP_RAM_WR_EN_%d_%d",sx,sy);
    &wire ntRef_ntPNP_RAM_WR_EN = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntRADM_CPL_TIMEOUT_%d_%d",sx,sy);
    &wire ntRef_ntRADM_CPL_TIMEOUT[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntRADM_Q_NOT_EMPTY_%d_%d",sx,sy);
    &wire ntRef_ntRADM_Q_NOT_EMPTY = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntRADM_QOVERFLOW_%d_%d",sx,sy);
    &wire ntRef_ntRADM_QOVERFLOW = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntRADM_TIMEOUT_CPL_ATTR_%d_%d",sx,sy);
    &wire ntRef_ntRADM_TIMEOUT_CPL_ATTR[3:0] = wire *strVar[3:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntRADM_TIMEOUT_CPL_LEN_%d_%d",sx,sy);
    &wire ntRef_ntRADM_TIMEOUT_CPL_LEN[21:0] = wire *strVar[21:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntRADM_TIMEOUT_CPL_TAG_%d_%d",sx,sy);
    &wire ntRef_ntRADM_TIMEOUT_CPL_TAG[15:0] = wire *strVar[15:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntRADM_TIMEOUT_CPL_TC_%d_%d",sx,sy);
    &wire ntRef_ntRADM_TIMEOUT_CPL_TC[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntRADM_TIMEOUT_FUNC_NUM_%d_%d",sx,sy);
    &wire ntRef_ntRADM_TIMEOUT_FUNC_NUM[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntRADM_TIMEOUT_VFUNC_ACTIVE_%d_%d",sx,sy);
    &wire ntRef_ntRADM_TIMEOUT_VFUNC_ACTIVE[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntRADM_TIMEOUT_VFUNC_NUM_%d_%d",sx,sy);
    &wire ntRef_ntRADM_TIMEOUT_VFUNC_NUM[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntRBAR_CTRL_UPDATE_%d_%d",sx,sy);
    &wire ntRef_ntRBAR_CTRL_UPDATE[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntRDLH_LINK_UP_%d_%d",sx,sy);
    &wire ntRef_ntRDLH_LINK_UP = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntSEDO_%d_%d",sx,sy);
    &wire ntRef_ntSEDO[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntSEDO_EN_%d_%d",sx,sy);
    &wire ntRef_ntSEDO_EN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntSMLH_LINK_UP_%d_%d",sx,sy);
    &wire ntRef_ntSMLH_LINK_UP = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntSMLH_LTSSM_STATE_%d_%d",sx,sy);
    &wire ntRef_ntSMLH_LTSSM_STATE[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntSMLH_REQ_RST_%d_%d",sx,sy);
    &wire ntRef_ntSMLH_REQ_RST = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntTPH_RAM_ADDR_%d_%d",sx,sy);
    &wire ntRef_ntTPH_RAM_ADDR[4:0] = wire *strVar[4:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntTPH_RAM_FUNC_ACTIVE_%d_%d",sx,sy);
    &wire ntRef_ntTPH_RAM_FUNC_ACTIVE = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntTPH_RAM_FUNC_NUM_%d_%d",sx,sy);
    &wire ntRef_ntTPH_RAM_FUNC_NUM[2:0] = wire *strVar[2:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntTPH_RAM_WR_BYTE_EN_%d_%d",sx,sy);
    &wire ntRef_ntTPH_RAM_WR_BYTE_EN[1:0] = wire *strVar[1:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntTPH_RAM_WR_DATA_%d_%d",sx,sy);
    &wire ntRef_ntTPH_RAM_WR_DATA[15:0] = wire *strVar[15:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntTPH_RAM_WR_EN_%d_%d",sx,sy);
    &wire ntRef_ntTPH_RAM_WR_EN = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntTRAINING_RST_N_%d_%d",sx,sy);
    &wire ntRef_ntTRAINING_RST_N = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntUSER_RST_N_%d_%d",sx,sy);
    &wire ntRef_ntUSER_RST_N = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntVEN_MSI_GRANT_%d_%d",sx,sy);
    &wire ntRef_ntVEN_MSI_GRANT = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntWAKE_%d_%d",sx,sy);
    &wire ntRef_ntWAKE = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntXADM_CPLD_CDTS_%d_%d",sx,sy);
    &wire ntRef_ntXADM_CPLD_CDTS[11:0] = wire *strVar[11:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntXADM_CPLH_CDTS_%d_%d",sx,sy);
    &wire ntRef_ntXADM_CPLH_CDTS[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntXADM_NPD_CDTS_%d_%d",sx,sy);
    &wire ntRef_ntXADM_NPD_CDTS[11:0] = wire *strVar[11:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntXADM_NPH_CDTS_%d_%d",sx,sy);
    &wire ntRef_ntXADM_NPH_CDTS[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntXADM_PD_CDTS_%d_%d",sx,sy);
    &wire ntRef_ntXADM_PD_CDTS[11:0] = wire *strVar[11:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntXADM_PH_CDTS_%d_%d",sx,sy);
    &wire ntRef_ntXADM_PH_CDTS[7:0] = wire *strVar[7:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntXDLH_RETRYRAM_ADDR_%d_%d",sx,sy);
    &wire ntRef_ntXDLH_RETRYRAM_ADDR[9:0] = wire *strVar[9:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntXDLH_RETRYRAM_DATA_%d_%d",sx,sy);
    &wire ntRef_ntXDLH_RETRYRAM_DATA[134:0] = wire *strVar[134:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntXDLH_RETRYRAM_EN_%d_%d",sx,sy);
    &wire ntRef_ntXDLH_RETRYRAM_EN = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    sprintf(strVar,"ntXDLH_RETRYRAM_WE_%d_%d",sx,sy);
    &wire ntRef_ntXDLH_RETRYRAM_WE = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;



    sprintf(strVar,"ntCORE_AVL_P_CNT_%d_%d",sx,sy);
    &wire ntRef_ntCORE_AVL_P_CNT[5:0] = wire *strVar[5:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;



    sprintf(strVar, "PCIEGEN3_TILE_%d_%d", sx, sy);

    device PCIEGEN3_TILE *strVar
          port map (

//    APP_LTR_LATENCY       =>  ntRef_ntAPP_LTR_LATENCY,
    APP_LTR_MSG_GRANT       =>  ntRef_ntAPP_LTR_MSG_GRANT,
    APP_OBFF_MSG_GRANT       =>  ntRef_ntAPP_OBFF_MSG_GRANT,
    AUX_PM_EN       =>  ntRef_ntAUX_PM_EN,
    AXIS_MASTER0_TDATA       =>  ntRef_ntAXIS_MASTER0_TDATA,
    AXIS_MASTER0_TKEEP       =>  ntRef_ntAXIS_MASTER0_TKEEP,
    AXIS_MASTER0_TLAST       =>  ntRef_ntAXIS_MASTER0_TLAST,
    AXIS_MASTER0_TUSER       =>  ntRef_ntAXIS_MASTER0_TUSER,
    AXIS_MASTER0_TVALID       =>  ntRef_ntAXIS_MASTER0_TVALID,
    AXIS_MASTER1_TDATA       =>  ntRef_ntAXIS_MASTER1_TDATA,
    AXIS_MASTER1_TKEEP       =>  ntRef_ntAXIS_MASTER1_TKEEP,
    AXIS_MASTER1_TUSER       =>  ntRef_ntAXIS_MASTER1_TUSER,
    AXIS_MASTER1_TVALID       =>  ntRef_ntAXIS_MASTER1_TVALID,
    AXIS_SLAVE0_TREADY       =>  ntRef_ntAXIS_SLAVE0_TREADY,
    AXIS_SLAVE1_TREADY       =>  ntRef_ntAXIS_SLAVE1_TREADY,
    AXIS_SLAVE2_TREADY       =>  ntRef_ntAXIS_SLAVE2_TREADY,
    CFG_2ND_RESET       =>  ntRef_ntCFG_2ND_RESET,
//    CFG_AER_INT_MSG_NUM       =>  ntRef_ntCFG_AER_INT_MSG_NUM,
    CFG_AER_RC_ERR_INT       =>  ntRef_ntCFG_AER_RC_ERR_INT,
    CFG_AER_RC_ERR_MSI       =>  ntRef_ntCFG_AER_RC_ERR_MSI,
    CFG_ARI_FWD_EN       =>  ntRef_ntCFG_ARI_FWD_EN,
    CFG_ATOMIC_EGRESS_BLOCK       =>  ntRef_ntCFG_ATOMIC_EGRESS_BLOCK,
    CFG_ATOMIC_REQ_EN       =>  ntRef_ntCFG_ATOMIC_REQ_EN,
    CFG_BUS_MASTER_EN       =>  ntRef_ntCFG_BUS_MASTER_EN,
    CFG_BW_MGT_INT       =>  ntRef_ntCFG_BW_MGT_INT,
    CFG_BW_MGT_MSI       =>  ntRef_ntCFG_BW_MGT_MSI,
    CFG_COR_ERR_RPT_EN       =>  ntRef_ntCFG_COR_ERR_RPT_EN,
    CFG_CRS_SW_VIS_EN       =>  ntRef_ntCFG_CRS_SW_VIS_EN,
    CFG_DISABLE_LTR_CLR_MSG       =>  ntRef_ntCFG_DISABLE_LTR_CLR_MSG,
    CFG_EXT_TAG_EN       =>  ntRef_ntCFG_EXT_TAG_EN,
    CFG_F_ERR_RPT_EN       =>  ntRef_ntCFG_F_ERR_RPT_EN,
    CFG_FLR_PF_ACTIVE       =>  ntRef_ntCFG_FLR_PF_ACTIVE,
    CFG_FLR_VF_ACTIVE       =>  ntRef_ntCFG_FLR_VF_ACTIVE,
    CFG_IDO_CPL_EN       =>  ntRef_ntCFG_IDO_CPL_EN,
    CFG_IDO_REQ_EN       =>  ntRef_ntCFG_IDO_REQ_EN,
    CFG_INT_DISABLE       =>  ntRef_ntCFG_INT_DISABLE,
    CFG_LINK_AUTO_BW_INT       =>  ntRef_ntCFG_LINK_AUTO_BW_INT,
    CFG_LINK_AUTO_BW_MSI       =>  ntRef_ntCFG_LINK_AUTO_BW_MSI,
    CFG_LINK_EQ_REQ_INT       =>  ntRef_ntCFG_LINK_EQ_REQ_INT,
    CFG_LTR_M_EN       =>  ntRef_ntCFG_LTR_M_EN,
//    CFG_LTR_MAX_LATENCY       =>  ntRef_ntCFG_LTR_MAX_LATENCY,
    CFG_MAX_PAYLOAD_SIZE       =>  ntRef_ntCFG_MAX_PAYLOAD_SIZE,
    CFG_MAX_RD_REQ_SIZE       =>  ntRef_ntCFG_MAX_RD_REQ_SIZE,
    CFG_MEM_SPACE_EN       =>  ntRef_ntCFG_MEM_SPACE_EN,
    CFG_MSI_EN       =>  ntRef_ntCFG_MSI_EN,
    CFG_MSI_MASK_UPDATE       =>  ntRef_ntCFG_MSI_MASK_UPDATE,
    CFG_MSIX_EN       =>  ntRef_ntCFG_MSIX_EN,
    CFG_MSIX_FUNC_MASK       =>  ntRef_ntCFG_MSIX_FUNC_MASK,
    CFG_MULTI_MSI_EN       =>  ntRef_ntCFG_MULTI_MSI_EN,
    CFG_NF_ERR_RPT_EN       =>  ntRef_ntCFG_NF_ERR_RPT_EN,
    CFG_NO_SNOOP_EN       =>  ntRef_ntCFG_NO_SNOOP_EN,
    CFG_NUM_VF       =>  ntRef_ntCFG_NUM_VF,
    CFG_OBFF_EN       =>  ntRef_ntCFG_OBFF_EN,
    CFG_PBUS_DEV_NUM       =>  ntRef_ntCFG_PBUS_DEV_NUM,
    CFG_PBUS_NUM       =>  ntRef_ntCFG_PBUS_NUM,
//    CFG_PCIE_CAP_INT_MSG_NUM       =>  ntRef_ntCFG_PCIE_CAP_INT_MSG_NUM,
    CFG_PF_TPH_ST_MODE       =>  ntRef_ntCFG_PF_TPH_ST_MODE,
    CFG_PME_INT       =>  ntRef_ntCFG_PME_INT,
    CFG_PME_MSI       =>  ntRef_ntCFG_PME_MSI,
    CFG_PWR_BUDGET_DATA_SEL_REG       =>  ntRef_ntCFG_PWR_BUDGET_DATA_SEL_REG,
    CFG_PWR_BUDGET_SEL       =>  ntRef_ntCFG_PWR_BUDGET_SEL,
    CFG_RCB       =>  ntRef_ntCFG_RCB,
    CFG_REG_SERREN       =>  ntRef_ntCFG_REG_SERREN,
    CFG_RELAX_ORDER_EN       =>  ntRef_ntCFG_RELAX_ORDER_EN,
    CFG_SEND_COR_ERR       =>  ntRef_ntCFG_SEND_COR_ERR,
    CFG_SEND_F_ERR       =>  ntRef_ntCFG_SEND_F_ERR,
    CFG_SEND_NF_ERR       =>  ntRef_ntCFG_SEND_NF_ERR,
    CFG_START_VFI       =>  ntRef_ntCFG_START_VFI,
    CFG_SYS_ERR_RC       =>  ntRef_ntCFG_SYS_ERR_RC,
    CFG_TC_ENABLE       =>  ntRef_ntCFG_TC_ENABLE,
    CFG_TPH_REQ_EN       =>  ntRef_ntCFG_TPH_REQ_EN,
    CFG_VF_BME       =>  ntRef_ntCFG_VF_BME,
    CFG_VF_EN       =>  ntRef_ntCFG_VF_EN,
    CFG_VF_MSI_EN       =>  ntRef_ntCFG_VF_MSI_EN,
    CFG_VF_MSIX_EN       =>  ntRef_ntCFG_VF_MSIX_EN,
    CFG_VF_MSIX_FUNC_MASK       =>  ntRef_ntCFG_VF_MSIX_FUNC_MASK,
    CFG_VF_MULTI_MSI_EN       =>  ntRef_ntCFG_VF_MULTI_MSI_EN,
    CFG_VF_TPH_REQ_EN       =>  ntRef_ntCFG_VF_TPH_REQ_EN,
    CFG_VF_TPH_ST_MODE       =>  ntRef_ntCFG_VF_TPH_ST_MODE,
    CORE_AVL_NP_CNT       =>  ntRef_ntCORE_AVL_NP_CNT,
    DEBUG_INFO_MUX       =>  ntRef_ntDEBUG_INFO_MUX,
    DPA_SUBSTATE_UPDATE       =>  ntRef_ntDPA_SUBSTATE_UPDATE,
    INT_GRT       =>  ntRef_ntINT_GRT,
    LBC_DBI_ACK       =>  ntRef_ntLBC_DBI_ACK,
    LBC_DBI_DOUT       =>  ntRef_ntLBC_DBI_DOUT,
    LINK_REQ_RST       =>  ntRef_ntLINK_REQ_RST,
    MAC_PHY_BLOCKALIGNCONTROL       =>  ntRef_ntMAC_PHY_BLOCKALIGNCONTROL,
    MAC_PHY_DIRCHANGE       =>  ntRef_ntMAC_PHY_DIRCHANGE,
    MAC_PHY_FS       =>  ntRef_ntMAC_PHY_FS,
    MAC_PHY_GETLOCAL_PSET_COEF       =>  ntRef_ntMAC_PHY_GETLOCAL_PSET_COEF,
    MAC_PHY_INVALID_REQ       =>  ntRef_ntMAC_PHY_INVALID_REQ,
    MAC_PHY_LF       =>  ntRef_ntMAC_PHY_LF,
    MAC_PHY_LOCAL_PSET_INDEX       =>  ntRef_ntMAC_PHY_LOCAL_PSET_INDEX,
    MAC_PHY_POWERDOWN       =>  ntRef_ntMAC_PHY_POWERDOWN,
    MAC_PHY_RATE       =>  ntRef_ntMAC_PHY_RATE,
    MAC_PHY_RXEQEVAL       =>  ntRef_ntMAC_PHY_RXEQEVAL,
    MAC_PHY_RXEQINPROGRESS       =>  ntRef_ntMAC_PHY_RXEQINPROGRESS,
    MAC_PHY_RXPOLARITY       =>  ntRef_ntMAC_PHY_RXPOLARITY,
    MAC_PHY_RXPRESETHINT       =>  ntRef_ntMAC_PHY_RXPRESETHINT,
    MAC_PHY_TXCOMPLIANCE       =>  ntRef_ntMAC_PHY_TXCOMPLIANCE,
    MAC_PHY_TXDATA       =>  ntRef_ntMAC_PHY_TXDATA,
    MAC_PHY_TXDATAK       =>  ntRef_ntMAC_PHY_TXDATAK,
    MAC_PHY_TXDATAVALID       =>  ntRef_ntMAC_PHY_TXDATAVALID,
    MAC_PHY_TXDEEMPH       =>  ntRef_ntMAC_PHY_TXDEEMPH,
    MAC_PHY_TXDETECTRX_LOOPBACK       =>  ntRef_ntMAC_PHY_TXDETECTRX_LOOPBACK,
    MAC_PHY_TXELECIDLE_H       =>  ntRef_ntMAC_PHY_TXELECIDLE_H,
    MAC_PHY_TXELECIDLE_L       =>  ntRef_ntMAC_PHY_TXELECIDLE_L,
    MAC_PHY_TXMARGIN       =>  ntRef_ntMAC_PHY_TXMARGIN,
    MAC_PHY_TXSTARTBLOCK       =>  ntRef_ntMAC_PHY_TXSTARTBLOCK,
    MAC_PHY_TXSWING       =>  ntRef_ntMAC_PHY_TXSWING,
    MAC_PHY_TXSYNCHEADER       =>  ntRef_ntMAC_PHY_TXSYNCHEADER,
    MSG_RCVD       =>  ntRef_ntMSG_RCVD,
    MSG_RCVD_DATA       =>  ntRef_ntMSG_RCVD_DATA,
    MSG_RCVD_TYPE       =>  ntRef_ntMSG_RCVD_TYPE,
    PHY_RST_N       =>  ntRef_ntPHY_RST_N,
    PM_DSTATE       =>  ntRef_ntPM_DSTATE,
    PM_MASTER_STATE       =>  ntRef_ntPM_MASTER_STATE,
    PM_PME_EN       =>  ntRef_ntPM_PME_EN,
    PM_SLAVE_STATE       =>  ntRef_ntPM_SLAVE_STATE,
    PM_STATUS       =>  ntRef_ntPM_STATUS,
    PM_VF_DSTATE       =>  ntRef_ntPM_VF_DSTATE,
    PM_VF_PME_EN       =>  ntRef_ntPM_VF_PME_EN,
    PM_VF_STATUS       =>  ntRef_ntPM_VF_STATUS,
    PM_XTLH_BLOCK_TLP       =>  ntRef_ntPM_XTLH_BLOCK_TLP,
    PNP_RAM_RD_ADDR       =>  ntRef_ntPNP_RAM_RD_ADDR,
    PNP_RAM_RD_EN       =>  ntRef_ntPNP_RAM_RD_EN,
    PNP_RAM_WR_ADDR       =>  ntRef_ntPNP_RAM_WR_ADDR,
    PNP_RAM_WR_DATA       =>  ntRef_ntPNP_RAM_WR_DATA,
    PNP_RAM_WR_EN       =>  ntRef_ntPNP_RAM_WR_EN,
    RADM_CPL_TIMEOUT       =>  ntRef_ntRADM_CPL_TIMEOUT,
    RADM_Q_NOT_EMPTY       =>  ntRef_ntRADM_Q_NOT_EMPTY,
    RADM_QOVERFLOW       =>  ntRef_ntRADM_QOVERFLOW,
    RADM_TIMEOUT_CPL_ATTR       =>  ntRef_ntRADM_TIMEOUT_CPL_ATTR,
    RADM_TIMEOUT_CPL_LEN       =>  ntRef_ntRADM_TIMEOUT_CPL_LEN,
    RADM_TIMEOUT_CPL_TAG       =>  ntRef_ntRADM_TIMEOUT_CPL_TAG,
    RADM_TIMEOUT_CPL_TC       =>  ntRef_ntRADM_TIMEOUT_CPL_TC,
    RADM_TIMEOUT_FUNC_NUM       =>  ntRef_ntRADM_TIMEOUT_FUNC_NUM,
    RADM_TIMEOUT_VFUNC_ACTIVE       =>  ntRef_ntRADM_TIMEOUT_VFUNC_ACTIVE,
    RADM_TIMEOUT_VFUNC_NUM       =>  ntRef_ntRADM_TIMEOUT_VFUNC_NUM,
    RBAR_CTRL_UPDATE       =>  ntRef_ntRBAR_CTRL_UPDATE,
    RDLH_LINK_UP       =>  ntRef_ntRDLH_LINK_UP,
    SEDO       =>  ntRef_ntSEDO,
    SEDO_EN       =>  ntRef_ntSEDO_EN,
    SMLH_LINK_UP       =>  ntRef_ntSMLH_LINK_UP,
    SMLH_LTSSM_STATE       =>  ntRef_ntSMLH_LTSSM_STATE,
    SMLH_REQ_RST       =>  ntRef_ntSMLH_REQ_RST,
    TPH_RAM_ADDR       =>  ntRef_ntTPH_RAM_ADDR,
    TPH_RAM_FUNC_ACTIVE       =>  ntRef_ntTPH_RAM_FUNC_ACTIVE,
    TPH_RAM_FUNC_NUM       =>  ntRef_ntTPH_RAM_FUNC_NUM,
    TPH_RAM_WR_BYTE_EN       =>  ntRef_ntTPH_RAM_WR_BYTE_EN,
    TPH_RAM_WR_DATA       =>  ntRef_ntTPH_RAM_WR_DATA,
    TPH_RAM_WR_EN       =>  ntRef_ntTPH_RAM_WR_EN,
    TRAINING_RST_N       =>  ntRef_ntTRAINING_RST_N,
    USER_RST_N       =>  ntRef_ntUSER_RST_N,
    VEN_MSI_GRANT       =>  ntRef_ntVEN_MSI_GRANT,
    WAKE       =>  ntRef_ntWAKE,
    XADM_CPLD_CDTS       =>  ntRef_ntXADM_CPLD_CDTS,
    XADM_CPLH_CDTS       =>  ntRef_ntXADM_CPLH_CDTS,
    XADM_NPD_CDTS       =>  ntRef_ntXADM_NPD_CDTS,
    XADM_NPH_CDTS       =>  ntRef_ntXADM_NPH_CDTS,
    XADM_PD_CDTS       =>  ntRef_ntXADM_PD_CDTS,
    XADM_PH_CDTS       =>  ntRef_ntXADM_PH_CDTS,
    XDLH_RETRYRAM_ADDR       =>  ntRef_ntXDLH_RETRYRAM_ADDR,
    XDLH_RETRYRAM_DATA       =>  ntRef_ntXDLH_RETRYRAM_DATA,
    XDLH_RETRYRAM_EN       =>  ntRef_ntXDLH_RETRYRAM_EN,
    XDLH_RETRYRAM_WE       =>  ntRef_ntXDLH_RETRYRAM_WE,
    CORE_AVL_P_CNT     =>   ntRef_ntCORE_AVL_P_CNT


                    )
        @([sx,sy]);

      STRUCT inc_spec_pciegen3 incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;
      string srb_lr;
      unsigned int sx_SRB;
      int cnt;

      foreach incVar(inc_pciegen3_srb_spec)
      {
          pin_SRB = incVar.port_name_srb;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          srb_lr = incVar.srb_lr;
          loc_SRB = incVar.loc_SRB;
          sy_SRB = sy+loc_SRB*NUM_GRID_Y-25*NUM_GRID_Y; 
          sx_SRB = (srb_lr=="L") ? sx-3 : sx+4*NUM_GRID_X+3;

          if(attribute_IO =="I")
          { 

            connect(<pin *pin_logic_device of <device PCIEGEN3_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_SRB,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy_SRB]>> =>  (pin_logic_device=="TIEHI") ? <wire TIEHI of <device SRB_TILE @[sx_SRB,sy_SRB]>>
                                                                                                        : <wire *pin_logic_device of <device PCIEGEN3_TILE @[sx,sy]>>);
          }
      }         


}// end of function place_pciegen3_tile


/********************************************************************************
********************************************************************************/
//flag = 0, place iobhr_tile;
//flag = 1, place iobhp_tile
function place_iob_tile(unsigned int tx,ty,flag)
{   
    unsigned int sx, sy;

    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    string strVar;

    sprintf(strVar,"ntS09_TIE1_%d_%d",sx,sy);
    &wire ntRef_ntS09_TIE1[49:0] = wire *strVar[49:0];

    sprintf(strVar,"ntS09_TIE0_%d_%d",sx,sy);
    &wire ntRef_ntS09_TIE0[49:0] = wire *strVar[49:0];

    sprintf(strVar,"ntTDO_%d_%d",sx,sy);
    &wire ntRef_ntTDO[49:0] = wire *strVar[49:0];

    sprintf(strVar,"ntCCS_DIN_%d_%d",sx,sy);
    &wire ntRef_ntCCS_DIN[49:0] = wire *strVar[49:0];

    sprintf(strVar,"ntTCK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTCK_OUT = wire *strVar;

    sprintf(strVar,"ntDIN_%d_%d",sx,sy);
    &wire ntRef_ntDIN[49:0] = wire *strVar[49:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDIN_N_%d_%d",sx,sy);
    &wire ntRef_ntDIN_N[47:0] = wire *strVar[47:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDIN_MIPI_LP_%d_%d",sx,sy);
    &wire ntRef_ntDIN_MIPI_LP[23:0] = wire *strVar[23:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntADC_IN_%d_%d",sx,sy);
    &wire ntRef_ntADC_IN[49:0] = wire *strVar[49:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIO_STATUS_O_%d_%d",sx,sy);
    &wire ntRef_ntIO_STATUS_O = wire *strVar;

    sprintf(strVar,"ntICONST10U_DDR_%d_%d",sx,sy);
    &wire ntRef_ntICONST10U_DDR[3:0] = wire *strVar[3:0];

    if(flag==0)
    {
      sprintf(strVar, "IOBHR_TILE_%d_%d", sx, sy);
      device IOBHR_TILE *strVar
           port map (
                      CCS_DIN           => ntRef_ntCCS_DIN,
                      TDO               => ntRef_ntTDO,
                      DIN               => ntRef_ntDIN,
                      DIN_N             => ntRef_ntDIN_N,    
                      TCK_OUT           => ntRef_ntTCK_OUT,
                      DIN_MIPI_LP       => ntRef_ntDIN_MIPI_LP,
                      S09_TIE1          => ntRef_ntS09_TIE1,
                      S09_TIE0          => ntRef_ntS09_TIE0,
                      IO_STATUS_O       => ntRef_ntIO_STATUS_O,
                      ADC_IN            => ntRef_ntADC_IN,
                      ICONST10U_DDR     => ntRef_ntICONST10U_DDR
                    )
          @([sx,sy]);


    }


}// end of function place_iob_tile


/********************************************************************************
********************************************************************************/
//flag = 0, place iobhr_tile;
//flag = 1, place iobhp_tile
function place_iob_hp_tile(unsigned int tx,ty,flag)
{   
    unsigned int sx, sy;

    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    string strVar;

    sprintf(strVar,"ntS11_TIHI_%d_%d",sx,sy);
    &wire ntRef_ntS11_TIHI[49:0] = wire *strVar[49:0];

    sprintf(strVar,"ntS11_TILO_%d_%d",sx,sy);
    &wire ntRef_ntS11_TILO[49:0] = wire *strVar[49:0];

    sprintf(strVar,"ntTDO_%d_%d",sx,sy);
    &wire ntRef_ntTDO[49:0] = wire *strVar[49:0];

    sprintf(strVar,"ntCCS_DIN_%d_%d",sx,sy);
    &wire ntRef_ntCCS_DIN[49:0] = wire *strVar[49:0];

    sprintf(strVar,"ntTCK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTCK_OUT = wire *strVar;

    sprintf(strVar,"ntDIN_%d_%d",sx,sy);
    &wire ntRef_ntDIN[49:0] = wire *strVar[49:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDIN_N_%d_%d",sx,sy);
    &wire ntRef_ntDIN_N[49:0] = wire *strVar[49:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDIN_MIPI_LP_%d_%d",sx,sy);
    &wire ntRef_ntDIN_MIPI_LP[23:0] = wire *strVar[23:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

//    sprintf(strVar,"ntADC_IN_%d_%d",sx,sy);
//    &wire ntRef_ntADC_IN[49:0] = wire *strVar[49:0]                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIO_STATUS_O_%d_%d",sx,sy);
    &wire ntRef_ntIO_STATUS_O = wire *strVar;

    sprintf(strVar,"ntICONST10U_DDR_%d_%d",sx,sy);
    &wire ntRef_ntICONST10U_DDR[3:0] = wire *strVar[3:0];

//add by wangjun

    sprintf(strVar,"PCODE_TOSRB_%d_%d",sx,sy);
    &wire ntRef_ntPCODE_TOSRB[4:0] = wire *strVar[4:0];

    sprintf(strVar,"NCODE_TOSRB_%d_%d",sx,sy);
    &wire ntRef_ntNCODE_TOSRB[4:0] = wire *strVar[4:0];

    sprintf(strVar,"CALI_DONE_TOSRB_%d_%d",sx,sy);
    &wire ntRef_ntCALI_DONE_TOSRB = wire *strVar;

    sprintf(strVar,"S18_TPH_%d_%d",sx,sy);
    &wire ntRef_ntS18_TPH[4:0] = wire *strVar[4:0];

    sprintf(strVar,"S18_TNH_%d_%d",sx,sy);
    &wire ntRef_ntS18_TNH[4:0] = wire *strVar[4:0];

    sprintf(strVar,"S18_PH_%d_%d",sx,sy);
    &wire ntRef_ntS18_PH[4:0] = wire *strVar[4:0];

    sprintf(strVar,"S18_NH_%d_%d",sx,sy);
    &wire ntRef_ntS18_NH[4:0] = wire *strVar[4:0];

    sprintf(strVar,"S11_CALI_DONE_%d_%d",sx,sy);
    &wire ntRef_ntS11_CALI_DONE = wire *strVar;

    sprintf(strVar,"CAS_EN_CALO_%d_%d",sx,sy);
    &wire ntRef_ntCAS_EN_CALO = wire *strVar;


//

    if(flag==0)
    {
      sprintf(strVar, "IOBHP_TILE_%d_%d", sx, sy);
      device IOBHP_TILE *strVar
           port map (
                      CCS_DIN           => ntRef_ntCCS_DIN,
                      TDO               => ntRef_ntTDO,
                      DIN               => ntRef_ntDIN,
                      DIN_N             => ntRef_ntDIN_N,    
                      TCK_OUT           => ntRef_ntTCK_OUT,
                      DIN_MIPI_LP       => ntRef_ntDIN_MIPI_LP,
                      S11_TIHI          => ntRef_ntS11_TIHI,
                      S11_TILO          => ntRef_ntS11_TILO,
                      IO_STATUS_O       => ntRef_ntIO_STATUS_O,
//                      ADC_IN            => ntRef_ntADC_IN,
                      ICONST10U_DDR     => ntRef_ntICONST10U_DDR,
                      PCODE_TOSRB       => ntRef_ntPCODE_TOSRB,
                      NCODE_TOSRB       => ntRef_ntNCODE_TOSRB,
                      CALI_DONE_TOSRB   => ntRef_ntCALI_DONE_TOSRB,
                      S18_TPH           => ntRef_ntS18_TPH,
                      S18_TNH           => ntRef_ntS18_TNH,
                      S18_PH           => ntRef_ntS18_PH,
                      S18_NH           => ntRef_ntS18_NH,
                      CAS_EN_CALO      =>  ntRef_ntCAS_EN_CALO,
                      S11_CALI_DONE     => ntRef_ntS11_CALI_DONE

                    )
          @([sx,sy]);


    }


      STRUCT inc_spec_iobhp incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;
      int sx_srb = sx-2*NUM_GRID_X;

      foreach incVar(inc_iobhp_srb_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device IOBHP_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_SRB]>> => (pin_logic_device=="TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx_srb,sy_SRB]>>
                                                                                                      : <wire *pin_logic_device of <device IOBHP_TILE @[sx,sy]>>); 
          }
      } 



}// end of function place_iob_hp_tile


/********************************************************************************
********************************************************************************/
function connect_blank_srb_tile(unsigned int tx,ty)
{ 
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    connect
      (
        <pin NM_DATA[0] of <device SRB_TILE @[sx,sy]>>   => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>,
        <pin NM_DATA[1] of <device SRB_TILE @[sx,sy]>>   => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>,
        <pin NM_DATA[2] of <device SRB_TILE @[sx,sy]>>   => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>,
        <pin NM_DATA[3] of <device SRB_TILE @[sx,sy]>>   => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>,
        <pin NM_DATA[4] of <device SRB_TILE @[sx,sy]>>   => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>,
        <pin NM_DATA[5] of <device SRB_TILE @[sx,sy]>>   => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>,
        <pin NM_DATA[6] of <device SRB_TILE @[sx,sy]>>   => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>,
        <pin NM_DATA[7] of <device SRB_TILE @[sx,sy]>>   => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>,
        <pin NM_DATA[8] of <device SRB_TILE @[sx,sy]>>   => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>,
        <pin NM_DATA[9] of <device SRB_TILE @[sx,sy]>>   => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>,
        <pin NM_DATA[10] of <device SRB_TILE @[sx,sy]>>  => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>,
        <pin NM_DATA[11] of <device SRB_TILE @[sx,sy]>>  => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>,
        <pin NM_DATA[12] of <device SRB_TILE @[sx,sy]>>  => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>,
        <pin NM_DATA[13] of <device SRB_TILE @[sx,sy]>>  => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>,
        <pin NM_DATA[14] of <device SRB_TILE @[sx,sy]>>  => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>,
        <pin NM_DATA[15] of <device SRB_TILE @[sx,sy]>>  => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>,
        <pin NM_DATA[16] of <device SRB_TILE @[sx,sy]>>  => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>,
        <pin NM_DATA[17] of <device SRB_TILE @[sx,sy]>>  => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>,
        <pin NM_DATA[18] of <device SRB_TILE @[sx,sy]>>  => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>,
        <pin NM_DATA[19] of <device SRB_TILE @[sx,sy]>>  => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>,
        <pin NM_DATA[20] of <device SRB_TILE @[sx,sy]>>  => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>,
        <pin NM_DATA[21] of <device SRB_TILE @[sx,sy]>>  => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>,
        <pin NM_DATA[22] of <device SRB_TILE @[sx,sy]>>  => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>,
        <pin NM_DATA[23] of <device SRB_TILE @[sx,sy]>>  => <wire TIEHI of <device  SRB_TILE @[sx,sy]>>
      );

}
/********************************************************************************
********************************************************************************/
function place_cramsl2_tile(unsigned int tx,ty)
{ 
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;

    string strVar;

    sprintf(strVar, "CRAMSL2_TILE_%d_%d", sx, sy);
    device CRAMSL2_TILE *strVar
     @([sx,sy]);
   
}
/********************************************************************************
********************************************************************************/
function place_cramsl3_tile(unsigned int tx,ty)
{ 
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;

    string strVar;

    sprintf(strVar, "CRAMSL3_TILE_%d_%d", sx, sy);
    device CRAMSL3_TILE *strVar
     @([sx,sy]);
   
}

/********************************************************************************
********************************************************************************/
function place_cramsl1_tile(unsigned int tx,ty)
{ 
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;

    string strVar;

    sprintf(strVar, "CRAMSL1_TILE_%d_%d", sx, sy);
    device CRAMSL1_TILE *strVar
     @([sx,sy]);
   
}
/********************************************************************************
********************************************************************************/
function place_cramsl0_tile(unsigned int tx,ty)
{ 
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 3;
    sy = ty * NUM_GRID_Y;

    string strVar;

    sprintf(strVar, "CRAMSL0_TILE_%d_%d", sx, sy);
    device CRAMSL0_TILE *strVar
     @([sx,sy]);
   
}
/********************************************************************************
********************************************************************************/
function place_wrenhan_tile(unsigned int tx,ty)
{ 
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;

    string strVar;

    sprintf(strVar, "CRAM_CTRL_WRENHAN_TILE_%d_%d", sx, sy);
    device CRAM_CTRL_WRENHAN_TILE *strVar
     @([sx,sy]);
   
}
/********************************************************************************
********************************************************************************/
function place_wrenhan1_tile(unsigned int tx,ty)
{ 
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;

    string strVar;

    sprintf(strVar, "CRAM_CTRL_WRENHAN1_TILE_%d_%d", sx, sy);
    device CRAM_CTRL_WRENHAN1_TILE *strVar
     @([sx,sy]);
   
}
/********************************************************************************
********************************************************************************/
function place_srbccsdrv_tile(unsigned int tx,ty)
{ 
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    string strVar;
    sprintf(strVar,"ntZSEB_BUFOUT_%d_%d",sx,sy);
    &wire ntRef_ntZSEB_BUFOUT[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntZDW1_BUFOUT_%d_%d",sx,sy);
    &wire ntRef_ntZDW1_BUFOUT[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntZSEA_BUFOUT_%d_%d",sx,sy);
    &wire ntRef_ntZSEA_BUFOUT[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntZSWB_BUFOUT_%d_%d",sx,sy);
    &wire ntRef_ntZSWB_BUFOUT[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntZDSE_BUFOUT_%d_%d",sx,sy);
    &wire ntRef_ntZDSE_BUFOUT[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntZDE1_BUFOUT_%d_%d",sx,sy);
    &wire ntRef_ntZDE1_BUFOUT[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntZDE0_BUFOUT_%d_%d",sx,sy);
    &wire ntRef_ntZDE0_BUFOUT[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntZDSW_BUFOUT_%d_%d",sx,sy);
    &wire ntRef_ntZDSW_BUFOUT[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntZDNE_BUFOUT_%d_%d",sx,sy);
    &wire ntRef_ntZDNE_BUFOUT[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntZSWA_BUFOUT_%d_%d",sx,sy);
    &wire ntRef_ntZSWA_BUFOUT[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntZDNW_BUFOUT_%d_%d",sx,sy);
    &wire ntRef_ntZDNW_BUFOUT[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntZDW0_BUFOUT_%d_%d",sx,sy);
    &wire ntRef_ntZDW0_BUFOUT[3:0] = wire *strVar[3:0];

    sprintf(strVar, "SRBCCSDRV_TILE_%d_%d", sx, sy);
    device SRBCCSDRV_TILE *strVar
         port map (
                    ZSEB_BUFOUT  => ntRef_ntZSEB_BUFOUT,
                    ZDW1_BUFOUT  => ntRef_ntZDW1_BUFOUT,
                    ZSEA_BUFOUT  => ntRef_ntZSEA_BUFOUT,
                    ZSWB_BUFOUT  => ntRef_ntZSWB_BUFOUT,
                    ZDSE_BUFOUT  => ntRef_ntZDSE_BUFOUT,
                    ZDE1_BUFOUT  => ntRef_ntZDE1_BUFOUT,
                    ZDE0_BUFOUT  => ntRef_ntZDE0_BUFOUT,
                    ZDSW_BUFOUT  => ntRef_ntZDSW_BUFOUT,
                    ZDNE_BUFOUT  => ntRef_ntZDNE_BUFOUT,
                    ZSWA_BUFOUT  => ntRef_ntZSWA_BUFOUT,
                    ZDNW_BUFOUT  => ntRef_ntZDNW_BUFOUT,
                    ZDW0_BUFOUT  => ntRef_ntZDW0_BUFOUT
                  )
     @([sx,sy]);
   
}

/********************************************************************************
********************************************************************************/

}//end of package pg2l_funcs_place


