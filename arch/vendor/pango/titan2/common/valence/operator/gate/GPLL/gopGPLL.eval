*****************************************************************

  Operator  [gopGPLL]

  Author    [liujiao]

  Revision History:

 ********************************************************************************/
gate
operator gopGPLL
{
    parameter
    (
        real CLKIN_FREQ = 50.0,
        bit LOCK_MODE = 1'b0,
        int STATIC_RATIOI = 1 /* 1 ~ 128 */,
        int STATIC_RATIOM = 1 /* 1 ~ 128 */,
        real STATIC_RATIO0 = 1.0 /* 1 ~ 128 */,
        int STATIC_RATIO1 = 1 /* 1 ~ 128 */,
        int STATIC_RATIO2 = 1 /* 1 ~ 128 */,
        int STATIC_RATIO3 = 1 /* 1 ~ 128 */,
        int STATIC_RATIO4 = 1 /* 1 ~ 128 */,
        int STATIC_RATIO5 = 1 /* 1 ~ 128 */,
        int STATIC_RATIO6 = 1 /* 1 ~ 128 */,
        real STATIC_RATIOF = 1.0 /* 1 ~ 128 */,
        int STATIC_DUTY0 = 2,
        int STATIC_DUTY1 = 2,
        int STATIC_DUTY2 = 2,
        int STATIC_DUTY3 = 2,
        int STATIC_DUTY4 = 2,
        int STATIC_DUTY5 = 2,
        int STATIC_DUTY6 = 2,
        int STATIC_DUTYF = 2,
        int STATIC_PHASE = 0 /* 0 ~ 63 */,
        int STATIC_PHASE0 = 0 /* 0 ~ 7 */,
        int STATIC_PHASE1 = 0 /* 0 ~ 7 */,
        int STATIC_PHASE2 = 0 /* 0 ~ 7 */,
        int STATIC_PHASE3 = 0 /* 0 ~ 7 */,
        int STATIC_PHASE4 = 0 /* 0 ~ 7 */,
        int STATIC_PHASE5 = 0 /* 0 ~ 7 */,
        int STATIC_PHASE6 = 0 /* 0 ~ 7 */,
        int STATIC_PHASEF = 0 /* 0 ~ 7 */,
        int STATIC_CPHASE0 = 0 /* 0 ~ 127 */,
        int STATIC_CPHASE1 = 0 /* 0 ~ 127 */,
        int STATIC_CPHASE2 = 0 /* 0 ~ 127 */,
        int STATIC_CPHASE3 = 0 /* 0 ~ 127 */,
        int STATIC_CPHASE4 = 0 /* 0 ~ 127 */,
        int STATIC_CPHASE5 = 0 /* 0 ~ 127 */,
        int STATIC_CPHASE6 = 0 /* 0 ~ 127 */,
        int STATIC_CPHASEF = 0 /* 0 ~ 127 */,
        string CLK_DPS0_EN = "FALSE" ,
        string CLK_DPS1_EN = "FALSE" ,
        string CLK_DPS2_EN = "FALSE" ,
        string CLK_DPS3_EN = "FALSE" ,
        string CLK_DPS4_EN = "FALSE" ,
        string CLK_DPS5_EN = "FALSE" ,
        string CLK_DPS6_EN = "FALSE" ,
        string CLK_DPSF_EN = "FALSE" ,
        string CLK_CAS5_EN = "FALSE" ,
        string CLKOUT0_SYN_EN = "FALSE" ,
        string CLKOUT1_SYN_EN = "FALSE" ,
        string CLKOUT2_SYN_EN = "FALSE" ,
        string CLKOUT3_SYN_EN = "FALSE" ,
        string CLKOUT4_SYN_EN = "FALSE" ,
        string CLKOUT5_SYN_EN = "FALSE" ,
        string CLKOUT6_SYN_EN = "FALSE" ,
        string CLKOUTF_SYN_EN = "FALSE" ,
        string SSC_MODE = "DISABLE" ,
        real SSC_FREQ = 50.0,
        string INTERNAL_FB = "CLKOUTF" ,
        string EXTERNAL_FB = "DISABLE" ,
        string BANDWIDTH = "OPTIMIZED" ,
        int    QPS_PI_EN = 15,
        int    DPS_PI_EN = 15,        
        //hard code
        bit CP_CLKIN_STASEL = 1'b0,
        string CP_DYNSEL_ENABLE = "FALSE",
        string CP_PLL_USE_APB = "FALSE",
        string CP_PLL_PWD_ENABLE = "FALSE",
        string CP_PLL_RST_ENABLE = "FALSE",
        int CP_ODIV0_RATIO = 1,
        string CP_ODIV0_FRACDIV_EN = "FALSE",
        int CP_ODIV0_FRACDIV_RATIO = 0,
        int CP_ODIV0_FRACDIV_PSOFFSET = 0,
        int CP_ODIV0_ADJUST = 0,
        int CP_FDIV_RATIO = 1,
        string CP_FDIV_FRACDIV_EN = "FALSE",
        int CP_FDIV_FRACDIV_RATIO = 0,
        int CP_FDIV_FRACDIV_PSOFFSET = 0,
        int CP_FDIV_ADJUST = 0,

        string CP_ODIV0_MUXSEL_EN = "TRUE",    
        string CP_ODIV1_MUXSEL_EN = "TRUE",    
        string CP_ODIV2_MUXSEL_EN = "TRUE",
        string CP_ODIV3_MUXSEL_EN = "TRUE",    
        string CP_ODIV4_MUXSEL_EN = "TRUE",
        string CP_ODIV5_MUXSEL_EN = "TRUE",    
        string CP_ODIV6_MUXSEL_EN = "TRUE",    
        string CP_FDIV_MUXSEL_EN  = "TRUE"       
        
    );
    port
    (
        output CLKOUT0 /*pragma PAP_ARC_GOP_CTRL_PIN="GCLK|RCLK|IOCLK"*/,
        output CLKOUT0N /*pragma PAP_ARC_GOP_CTRL_PIN="GCLK"*/,
        output CLKOUT1 /*pragma PAP_ARC_GOP_CTRL_PIN="GCLK|RCLK|IOCLK"*/,
        output CLKOUT1N /*pragma PAP_ARC_GOP_CTRL_PIN="GCLK"*/,
        output CLKOUT2 /*pragma PAP_ARC_GOP_CTRL_PIN="GCLK|RCLK|IOCLK"*/,
        output CLKOUT2N /*pragma PAP_ARC_GOP_CTRL_PIN="GCLK"*/,
        output CLKOUT3 /*pragma PAP_ARC_GOP_CTRL_PIN="GCLK|RCLK|IOCLK"*/,
        output CLKOUT3N /*pragma PAP_ARC_GOP_CTRL_PIN="GCLK"*/,
        output CLKOUT4 /*pragma PAP_ARC_GOP_CTRL_PIN="GCLK"*/,
        output CLKOUT5 /*pragma PAP_ARC_GOP_CTRL_PIN="GCLK"*/,
        output CLKOUT6 /*pragma PAP_ARC_GOP_CTRL_PIN="GCLK"*/,
        output CLKOUTF /*pragma PAP_ARC_GOP_CTRL_PIN="GCLK"*/,
        output CLKOUTFN /*pragma PAP_ARC_GOP_CTRL_PIN="GCLK"*/,
        output LOCK,
        output DPS_DONE,
        output APB_RDATA[15:0],
        output APB_READY,
        input CLKIN1 /*pragma PAP_ARC_GOP_CTRL_PIN="GCLK|RCLK"*/,
        input CLKIN2 /*pragma PAP_ARC_GOP_CTRL_PIN="GCLK|RCLK"*/,
        input CLKFB /*pragma PAP_ARC_GOP_CTRL_PIN="GCLK|RCLK"*/,
        input CLKIN_SEL,
        //input PFDEN,
        input DPS_CLK /*pragma PAP_ARC_GOP_CTRL_PIN="GCLK|RCLK|COLCLK"*/,
        input DPS_EN,
        input DPS_DIR,
        input CLKOUT0_SYN,
        input CLKOUT1_SYN,
        input CLKOUT2_SYN,
        input CLKOUT3_SYN,
        input CLKOUT4_SYN,
        input CLKOUT5_SYN,
        input CLKOUT6_SYN,
        input CLKOUTF_SYN,
        input PLL_PWD,
        input RST /*pragma PAP_ARC_GOP_CTRL_PIN="RST"*/,
        input APB_CLK /*pragma PAP_ARC_GOP_CTRL_PIN="GCLK|RCLK|COLCLK"*/,
        input APB_RST_N,
        input APB_ADDR[4:0],
        input APB_SEL,
        input APB_EN,
        input APB_WRITE,
        input APB_WDATA[15:0]
    );
};

/**Implementation Body*******************************************************************

  Author    [liuwenyi]

  Abstract  []

  Revision History:

 *****************************************************************************************/
implementation impl_gpll of gopGPLL
{
    int divider = 1;
    int FEEDBK_SEL = 0; 
    if (INTERNAL_FB == "CLKOUT0" && EXTERNAL_FB == "DISABLE")
    {
        FEEDBK_SEL = 1;
        divider = STATIC_RATIO0 * STATIC_RATIOM;
    }
    else if (INTERNAL_FB == "CLKOUT1" && EXTERNAL_FB == "DISABLE")
    {
        FEEDBK_SEL = 2;
        divider = STATIC_RATIO1 * STATIC_RATIOM;
    }
    else if (INTERNAL_FB == "CLKOUT2" && EXTERNAL_FB == "DISABLE")
    {
        FEEDBK_SEL = 3;
        divider = STATIC_RATIO2 * STATIC_RATIOM;
    }  
    else if (INTERNAL_FB == "CLKOUT3" && EXTERNAL_FB == "DISABLE")
    {
        FEEDBK_SEL = 4;
        divider = STATIC_RATIO3 * STATIC_RATIOM;
    }
    else if (INTERNAL_FB == "CLKOUT4" && EXTERNAL_FB == "DISABLE")
    {
        FEEDBK_SEL = 5;
        divider = STATIC_RATIO4 * STATIC_RATIOM;
    }
    else if (INTERNAL_FB == "CLKOUT5" && EXTERNAL_FB == "DISABLE")
    {
        FEEDBK_SEL = 6;
        divider = STATIC_RATIO5 * STATIC_RATIOM;
    }
    else if (INTERNAL_FB == "CLKOUT6" && EXTERNAL_FB == "DISABLE")
    {
        FEEDBK_SEL = 7;
        divider = STATIC_RATIO6 * STATIC_RATIOM;
    }
    else if (INTERNAL_FB == "CLKOUTF" && EXTERNAL_FB == "DISABLE")
    {
        FEEDBK_SEL = 0;
        divider = STATIC_RATIOF * STATIC_RATIOM;
    }
    else if (INTERNAL_FB == "DISABLE" && EXTERNAL_FB == "CLKOUT0")
    {
        FEEDBK_SEL = 9;
        divider = STATIC_RATIO0 * STATIC_RATIOM;
    } 
    else if (INTERNAL_FB == "DISABLE" && EXTERNAL_FB == "CLKOUT1")
    {
        FEEDBK_SEL = 10;
        divider = STATIC_RATIO1 * STATIC_RATIOM;
    }
    else if (INTERNAL_FB == "DISABLE" && EXTERNAL_FB == "CLKOUT2")
    {
        FEEDBK_SEL = 11;
        divider = STATIC_RATIO2 * STATIC_RATIOM;
    }
    else if (INTERNAL_FB == "DISABLE" && EXTERNAL_FB == "CLKOUT3")
    {
        FEEDBK_SEL = 12;
        divider = STATIC_RATIO3 * STATIC_RATIOM;
    }
    else if (INTERNAL_FB == "DISABLE" && EXTERNAL_FB == "CLKOUT4")
    {
        FEEDBK_SEL = 13;
        divider = STATIC_RATIO4 * STATIC_RATIOM;
    }
    else if (INTERNAL_FB == "DISABLE" && EXTERNAL_FB == "CLKOUT5")
    {
        FEEDBK_SEL = 14;
        divider = STATIC_RATIO5 * STATIC_RATIOM;
    }
    else if (INTERNAL_FB == "DISABLE" && EXTERNAL_FB == "CLKOUT6")
    {
        FEEDBK_SEL = 15;
        divider = STATIC_RATIO6 * STATIC_RATIOM;
    }
    else if (INTERNAL_FB == "DISABLE" && EXTERNAL_FB == "CLKOUTF")
    {
        FEEDBK_SEL = 8;
        divider = STATIC_RATIOF * STATIC_RATIOM;
    }
    
    int PI_CTL_INIT = 0;
    if (STATIC_PHASE % 8 == 0)
    {
        PI_CTL_INIT = 0;
    }
    else if (STATIC_PHASE % 8 == 1)
    {
        PI_CTL_INIT = 64;
    }
    else if (STATIC_PHASE % 8 == 2)
    {
        PI_CTL_INIT = 96;
    }
    else if (STATIC_PHASE % 8 == 3)
    {
        PI_CTL_INIT = 112;
    }
    else if (STATIC_PHASE % 8 == 4)
    {
        PI_CTL_INIT = 120;
    }
    else if (STATIC_PHASE % 8 == 5)
    {
        PI_CTL_INIT = 124;
    }
    else if (STATIC_PHASE % 8 == 6)
    {
        PI_CTL_INIT = 126;
    }
    else if (STATIC_PHASE % 8 == 7)
    {
        PI_CTL_INIT = 127;
    }
    
    int DPS_SEL_INIT = 0;
    if (STATIC_PHASE / 8 == 0)
    {
        DPS_SEL_INIT = 30;
    }
    else if (STATIC_PHASE / 8 == 1)
    {
        DPS_SEL_INIT = 29;
    }
    else if (STATIC_PHASE / 8 == 2)
    {
        DPS_SEL_INIT = 20;
    } 
    else if (STATIC_PHASE / 8 == 3)
    {
        DPS_SEL_INIT = 17;
    } 
    else if (STATIC_PHASE / 8 == 4)
    {
        DPS_SEL_INIT = 0;
    } 
    else if (STATIC_PHASE / 8 == 5)
    {
        DPS_SEL_INIT = 3;
    } 
    else if (STATIC_PHASE / 8 == 6)
    {
        DPS_SEL_INIT = 10;
    } 
    else if (STATIC_PHASE / 8 == 7)
    {
        DPS_SEL_INIT = 15;
    }  
    
    real PFD = CLKIN_FREQ / STATIC_RATIOI;
    int CP_SELFBIAS_SEL = 0;
    int ICP_BASE_SEL = 0;
    int CP_CUR_SEL = 0;
    int LPF_R = 0;
    bit LPF_C = 1'b0;
    
    if (BANDWIDTH == "LOW" || BANDWIDTH == "OPTIMIZED")
    {
        if (PFD >= 10 && PFD <= 40)
        {
            CP_SELFBIAS_SEL = 1;
            LPF_R = 7;
            LPF_C = 1'b0;
            if (divider >= 15 && divider <= 19)
            {
                ICP_BASE_SEL = 0;
                CP_CUR_SEL = 3;
            }
            else if (divider >= 20 && divider <= 24)
            {
                ICP_BASE_SEL = 0;
                CP_CUR_SEL = 4;
            }
            else if (divider >= 25 && divider <= 29)
            {
                ICP_BASE_SEL = 0;
                CP_CUR_SEL = 5;
            }
            else if (divider >= 30 && divider <= 34)
            {
                ICP_BASE_SEL = 0;
                CP_CUR_SEL = 6;
            }
            else if (divider >= 35 && divider <= 39)
            {
                ICP_BASE_SEL = 0;
                CP_CUR_SEL = 7;
            }
            else if (divider >= 40 && divider <= 44)
            {
                ICP_BASE_SEL = 0;
                CP_CUR_SEL = 12;
            }
            else if (divider >= 45 && divider <= 49)
            {
                ICP_BASE_SEL = 0;
                CP_CUR_SEL = 13;
            }
            else if (divider >= 50 && divider <= 54)
            {
                ICP_BASE_SEL = 0;
                CP_CUR_SEL = 14;
            }
            else if (divider >= 55 && divider <= 59)
            {
                ICP_BASE_SEL = 0;
                CP_CUR_SEL = 15;
            }
            else if (divider >= 60 && divider <= 69)
            {
                ICP_BASE_SEL = 1;
                CP_CUR_SEL = 6;
            }
            else if (divider >= 70 && divider <= 49)
            {
                ICP_BASE_SEL = 1;
                CP_CUR_SEL = 7;
            }
            else if (divider >= 80 && divider <= 89)
            {
                ICP_BASE_SEL = 1;
                CP_CUR_SEL = 12;
            }
            else if (divider >= 90 && divider <= 99)
            {
                ICP_BASE_SEL = 1;
                CP_CUR_SEL = 13;
            }
            else if (divider >= 100 && divider <= 109)
            {
                ICP_BASE_SEL = 1;
                CP_CUR_SEL = 14;
            }
            else if (divider >= 110 && divider <= 115)
            {
                ICP_BASE_SEL = 1;
                CP_CUR_SEL = 15;
            }
            else if (divider >= 116 && divider <= 120)
            {
                ICP_BASE_SEL = 2;
                CP_CUR_SEL = 6;
            }
        }
    }
    else if (BANDWIDTH == "HIGH")
    {
        if (PFD >= 40 && PFD <= 450)
        {                      
            CP_SELFBIAS_SEL = 1;
            LPF_R = 2;
            LPF_C = 1'b0;
            if (divider == 2)
            {
                ICP_BASE_SEL = 1;
                CP_CUR_SEL = 2;
            }
            else if (divider == 3)
            {
                ICP_BASE_SEL = 1;
                CP_CUR_SEL = 3;
            }
            else if (divider == 4)
            {
                ICP_BASE_SEL = 1;
                CP_CUR_SEL = 4;
            }
            else if (divider == 5)
            {
                ICP_BASE_SEL = 1;
                CP_CUR_SEL = 5;
            }
            else if (divider == 6)
            {
                ICP_BASE_SEL = 1;
                CP_CUR_SEL = 6;
            }
            else if (divider == 7)
            {
                ICP_BASE_SEL = 1;
                CP_CUR_SEL = 7;
            }
            else if (divider == 8)
            {
                ICP_BASE_SEL = 1;
                CP_CUR_SEL = 12;
            }
            else if (divider == 9)
            {
                ICP_BASE_SEL = 1;
                CP_CUR_SEL = 13;
            }
            else if (divider == 10)
            {
                ICP_BASE_SEL = 1;
                CP_CUR_SEL = 14;
            }
            else if (divider == 11)
            {
                ICP_BASE_SEL = 1;
                CP_CUR_SEL = 15;
            }
            else if (divider >= 12 && divider <= 13)
            {
                ICP_BASE_SEL = 2;
                CP_CUR_SEL = 6;
            }
            else if (divider == 14)
            {
                ICP_BASE_SEL = 2;
                CP_CUR_SEL = 7;
            }
            else if (divider == 15)
            {
                ICP_BASE_SEL = 3;
                CP_CUR_SEL = 5;
            }
            else if (divider >= 16 && divider <= 17)
            {
                ICP_BASE_SEL = 2;
                CP_CUR_SEL = 12;
            }
            else if (divider >= 18 && divider <= 19)
            {
                ICP_BASE_SEL = 2;
                CP_CUR_SEL = 13;
            }
            else if (divider >= 20 && divider <= 21)
            {
                ICP_BASE_SEL = 2;
                CP_CUR_SEL = 14;
            }
            else if (divider >= 22 && divider <= 23)
            {
                ICP_BASE_SEL = 2;
                CP_CUR_SEL = 15;
            }
            else if (divider >= 24 && divider <= 25)
            {
                ICP_BASE_SEL = 3;
                CP_CUR_SEL = 12;
            }
            else if (divider >= 26 && divider <= 28)
            {
                ICP_BASE_SEL = 3;
                CP_CUR_SEL = 13;
            }
            else if (divider >= 29 && divider <= 32)
            {
                ICP_BASE_SEL = 3;
                CP_CUR_SEL = 14;
            }
        }
    }
    
    string CP_SSC_MODE_EN = "FALSE";
    int CP_SSC_CLKGEN_EN = 0;
    int CP_SSC_DIV_DELAY = 0; 
    int CP_SSC_DIV_RATIO = 0;
    string FDIV_FRACDIV_EN = "FALSE";
    int FDIV_FRACDIV_PSOFFSET = 0;
    int FDIV_FRACDIV_RATIO = 0;
    int FDIV_ADJUST = 0;
    int ODIV2_DPSORCAS_SEL = 0;
    
    if (SSC_MODE == "DOWN_LOW" || SSC_MODE == "DOWN_HIGH")
    { 
        CP_SSC_MODE_EN = "TRUE";
        CP_SSC_CLKGEN_EN = 3;
        CP_SSC_DIV_DELAY = 1;
        CP_SSC_DIV_RATIO = 3;
        FDIV_FRACDIV_EN = "TRUE";
        FDIV_FRACDIV_PSOFFSET = 4;
        FDIV_FRACDIV_RATIO = 5;
        FDIV_ADJUST = 2;
        ODIV2_DPSORCAS_SEL = 2;
    }
    else if (SSC_MODE == "CENTER_LOW" || SSC_MODE == "CENTER_HIGH")
    { 
        CP_SSC_MODE_EN = "TRUE";
        CP_SSC_CLKGEN_EN = 3;
        CP_SSC_DIV_DELAY = 5;
        CP_SSC_DIV_RATIO = 7;
        FDIV_FRACDIV_EN = "TRUE";
        FDIV_FRACDIV_PSOFFSET = 4;
        FDIV_FRACDIV_RATIO = 1;
        FDIV_ADJUST = 1;
        ODIV2_DPSORCAS_SEL = 2;
    }
    
    int CP_ODIV5_DPSORCAS_SEL = 0;
    if (CLK_CAS5_EN == "FALSE" && CLK_DPS5_EN == "FALSE")
    { 
        CP_ODIV5_DPSORCAS_SEL = 0;
    }
    else if (CLK_CAS5_EN == "FALSE" && CLK_DPS5_EN == "TRUE")
    { 
        CP_ODIV5_DPSORCAS_SEL = 1;
    } 
    else if (CLK_CAS5_EN == "TRUE" && CLK_DPS5_EN == "FALSE")
    { 
        CP_ODIV5_DPSORCAS_SEL = 2;
    }
    else
    {
        warning("The parameter CLK_CAS5_EN value (%s) and CLK_DPS5_EN value (%s) not supported.", CLK_CAS5_EN, CLK_DPS5_EN);
    }    
                        
    device GPLL gpll_inst
    parameter map
    (
        CP_ODIV0_MUXSEL_EN        =>         CP_ODIV0_MUXSEL_EN,   
        CP_ODIV1_MUXSEL_EN        =>         CP_ODIV1_MUXSEL_EN,   
        CP_ODIV2_MUXSEL_EN        =>         CP_ODIV2_MUXSEL_EN,
        CP_ODIV3_MUXSEL_EN        =>         CP_ODIV3_MUXSEL_EN,   
        CP_ODIV4_MUXSEL_EN        =>         CP_ODIV4_MUXSEL_EN,
        CP_ODIV5_MUXSEL_EN        =>         CP_ODIV5_MUXSEL_EN,   
        CP_ODIV6_MUXSEL_EN        =>         CP_ODIV6_MUXSEL_EN,   
        CP_FDIV_MUXSEL_EN         =>         CP_FDIV_MUXSEL_EN ,
    
        //CP_PFDEN_ENABLE           => PFDEN_EN      ,
        CP_FREQ_LOCKDET_MODE_SEL  => LOCK_MODE,
        CP_IDIV_RATIO             => STATIC_RATIOI ,
        CP_MDIV_RATIO             => STATIC_RATIOM ,
        
        CP_ODIV1_RATIO             =>        STATIC_RATIO1      ,
        CP_ODIV2_RATIO             =>        STATIC_RATIO2      ,
        CP_ODIV3_RATIO             =>        STATIC_RATIO3      ,
        CP_ODIV4_RATIO             =>        STATIC_RATIO4      ,
        CP_ODIV5_RATIO             =>        STATIC_RATIO5      ,
        CP_ODIV6_RATIO             =>        STATIC_RATIO6      ,
        
        CP_ODIV0_DUTY              =>        STATIC_DUTY0       ,
        CP_ODIV1_DUTY              =>        STATIC_DUTY1       ,
        CP_ODIV2_DUTY              =>        STATIC_DUTY2       ,
        CP_ODIV3_DUTY              =>        STATIC_DUTY3       ,
        CP_ODIV4_DUTY              =>        STATIC_DUTY4       ,
        CP_ODIV5_DUTY              =>        STATIC_DUTY5       ,
        CP_ODIV6_DUTY              =>        STATIC_DUTY6       ,      
        CP_FDIV_DUTY               =>        STATIC_DUTYF       ,        
        
        CP_ODIV0_FPHASE             =>        STATIC_PHASE0      ,
        CP_ODIV1_FPHASE             =>        STATIC_PHASE1      ,
        CP_ODIV2_FPHASE             =>        STATIC_PHASE2      ,
        CP_ODIV3_FPHASE             =>        STATIC_PHASE3      ,
        CP_ODIV4_FPHASE             =>        STATIC_PHASE4      ,
        CP_ODIV5_FPHASE             =>        STATIC_PHASE5      ,
        CP_ODIV6_FPHASE             =>        STATIC_PHASE6      ,
        
        CP_FDIV_FPHASE              =>        STATIC_PHASEF      ,
        CP_ODIV0_CPHASE             =>        STATIC_CPHASE0     ,
        CP_ODIV1_CPHASE             =>        STATIC_CPHASE1     ,
        CP_ODIV2_CPHASE             =>        STATIC_CPHASE2     ,
        CP_ODIV3_CPHASE             =>        STATIC_CPHASE3     ,
        CP_ODIV4_CPHASE             =>        STATIC_CPHASE4     ,
        CP_ODIV5_CPHASE             =>        STATIC_CPHASE5     ,
        CP_ODIV6_CPHASE             =>        STATIC_CPHASE6     ,
        CP_FDIV_CPHASE              =>        STATIC_CPHASEF     ,
        
        CP_ODIV0_DPSORCAS_SEL         =>        CLK_DPS0_EN == "TRUE" ? 1 : 0        ,
        CP_ODIV1_DPSORCAS_SEL         =>        CLK_DPS1_EN == "TRUE" ? 1 : 0        ,
        CP_ODIV2_DPSORCAS_SEL         =>        (SSC_MODE == "DISABLE") ? (CLK_DPS2_EN == "TRUE" ? 1 : 0) : ODIV2_DPSORCAS_SEL        ,
        CP_ODIV3_DPSORCAS_SEL         =>        CLK_DPS3_EN == "TRUE" ? 1 : 0        ,
        CP_ODIV4_DPSORCAS_SEL         =>        CLK_DPS4_EN == "TRUE" ? 1 : 0        ,
        //CP_ODIV5_DPSORCAS_SEL         =>        CLK_DPS5_EN == "TRUE" ? 1 : 0        ,
        CP_ODIV6_DPSORCAS_SEL         =>        CLK_DPS6_EN == "TRUE" ? 1 : 0        ,
        CP_FDIV_DPSORCAS_SEL          =>        CLK_DPSF_EN == "TRUE" ? 1 : 0        ,
        //CP_ODIV5_DPSORCAS_SEL         =>        CLK_CAS5_EN == "TRUE" ? 1 : 0        ,
        CP_ODIV5_DPSORCAS_SEL         =>        CP_ODIV5_DPSORCAS_SEL        ,
        CP_CLKOUT0_GATE_EN            =>        CLKOUT0_SYN_EN     ,
        CP_CLKOUT1_GATE_EN            =>        CLKOUT1_SYN_EN     ,
        CP_CLKOUT2_GATE_EN            =>        CLKOUT2_SYN_EN     ,
        CP_CLKOUT3_GATE_EN            =>        CLKOUT3_SYN_EN     ,
        CP_CLKOUT4_GATE_EN            =>        CLKOUT4_SYN_EN     ,
        CP_CLKOUT5_GATE_EN            =>        CLKOUT5_SYN_EN     ,
        CP_CLKOUT6_GATE_EN            =>        CLKOUT6_SYN_EN     ,
        CP_CLKFBOUT_GATE_EN           =>        CLKOUTF_SYN_EN     ,
        
        //SSC_MODE                  =>        SSC_MODE           ,
        //SSC_FREQ                  =>        SSC_FREQ           ,                     
        
        CP_PI_CTL_INIT            =>  PI_CTL_INIT  ,
        CP_DPS_SEL_INIT           =>  DPS_SEL_INIT ,                             
        
        CP_FEEDBK_SEL             =>  FEEDBK_SEL,
        CP_CP_SELFBIAS_SEL        =>  CP_SELFBIAS_SEL,
        CP_ICP_BASE_SEL           =>  ICP_BASE_SEL,
        CP_CP_CUR_SEL             =>  CP_CUR_SEL,
        CP_LPF_R                  =>  LPF_R, 
        CP_LPF_C                  =>  LPF_C,               
        
        CP_CLKIN_STASEL           =>  CP_CLKIN_STASEL  ,
        CP_DYNSEL_ENABLE          =>  CP_DYNSEL_ENABLE ,
        CP_PLL_USE_APB            =>  CP_PLL_USE_APB   ,
        CP_PLL_PWD_ENABLE         =>  CP_PLL_PWD_ENABLE,
        CP_PLL_RST_ENABLE         =>  CP_PLL_RST_ENABLE,
        
        CP_ODIV0_FRACDIV_EN       =>  CP_ODIV0_FRACDIV_EN,
        CP_ODIV0_FRACDIV_RATIO    =>  CP_ODIV0_FRACDIV_RATIO,
        CP_ODIV0_FRACDIV_PSOFFSET =>  CP_ODIV0_FRACDIV_PSOFFSET,
        CP_ODIV0_ADJUST           =>  CP_ODIV0_ADJUST,     
        CP_ODIV0_RATIO            =>  CP_ODIV0_RATIO,
        CP_QPS_PI_EN              =>  QPS_PI_EN,
        CP_DPS_PI_EN              =>  DPS_PI_EN,  
        
        CP_FDIV_RATIO             =>  CP_FDIV_RATIO       ,
        CP_SSC_MODE_EN            =>  CP_SSC_MODE_EN      ,
        CP_SSC_CLKGEN_EN          =>  CP_SSC_CLKGEN_EN    ,
        CP_SSC_DIV_DELAY          =>  CP_SSC_DIV_DELAY    ,
        CP_SSC_DIV_RATIO          =>  CP_SSC_DIV_RATIO    ,
        CP_FDIV_FRACDIV_EN        =>  (SSC_MODE == "DISABLE") ? CP_FDIV_FRACDIV_EN : FDIV_FRACDIV_EN,
        CP_FDIV_FRACDIV_RATIO     =>  (SSC_MODE == "DISABLE") ? CP_FDIV_FRACDIV_RATIO : FDIV_FRACDIV_RATIO,
        CP_FDIV_FRACDIV_PSOFFSET  =>  (SSC_MODE == "DISABLE") ? CP_FDIV_FRACDIV_PSOFFSET : FDIV_FRACDIV_PSOFFSET,
        CP_FDIV_ADJUST            =>  (SSC_MODE == "DISABLE") ? CP_FDIV_ADJUST : FDIV_ADJUST
    )
    port map
    (               
        CLKOUT0                   =>        CLKOUT0        ,  
        CLKOUT0N                  =>        CLKOUT0N       ,  
        CLKOUT1                   =>        CLKOUT1        ,  
        CLKOUT1N                  =>        CLKOUT1N       ,  
        CLKOUT2                   =>        CLKOUT2        ,  
        CLKOUT2N                  =>        CLKOUT2N       ,  
        CLKOUT3                   =>        CLKOUT3        ,  
        CLKOUT3N                  =>        CLKOUT3N       ,  
        CLKOUT4                   =>        CLKOUT4        ,  
        CLKOUT5                   =>        CLKOUT5        ,  
        CLKOUT6                   =>        CLKOUT6        ,  
        CLKFBOUT                  =>        CLKOUTF        ,  
        CLKFBOUTN                 =>        CLKOUTFN       ,  
        PLL_LOCK                  =>        LOCK           ,  
        DPS_DONE                  =>        DPS_DONE       ,  
        PRDATA                    =>        APB_RDATA      ,  
        PREADY                    =>        APB_READY      ,  
        CLK_IN0                   =>        CLKIN1         ,  
        CLK_IN1                   =>        CLKIN2         ,  
        CLK_FB                    =>        CLKFB,  
        DYNSEL_CLKIN              =>        CLKIN_SEL      ,  
        //PFDEN                     =>        PFDEN          ,  
        DPS_CLK                   =>        DPS_CLK        ,  
        DPS_EN                    =>        DPS_EN         ,  
        DPS_DIR                   =>        DPS_DIR        ,  
        CLKOUT0_GATE              =>        CLKOUT0_SYN    ,  
        CLKOUT1_GATE              =>        CLKOUT1_SYN    ,  
        CLKOUT2_GATE              =>        CLKOUT2_SYN    ,  
        CLKOUT3_GATE              =>        CLKOUT3_SYN    ,  
        CLKOUT4_GATE              =>        CLKOUT4_SYN    ,  
        CLKOUT5_GATE              =>        CLKOUT5_SYN    ,  
        CLKOUT6_GATE              =>        CLKOUT6_SYN    ,  
        CLKFBOUT_GATE             =>        CLKOUTF_SYN    ,  
        PLL_PWD                   =>        PLL_PWD        ,  
        PLL_RST                   =>        RST            ,  
        PCLK                      =>        APB_CLK        ,  
        PRESETN                   =>        APB_RST_N      ,  
        PADDR                     =>        APB_ADDR       ,  
        PSEL                      =>        APB_SEL        ,  
        PENABLE                   =>        APB_EN         ,  
        PWRITE                    =>        APB_WRITE      ,  
        PWDATA                    =>        APB_WDATA  
    );

};// end of implementation impl_gpll of gopGPLL
