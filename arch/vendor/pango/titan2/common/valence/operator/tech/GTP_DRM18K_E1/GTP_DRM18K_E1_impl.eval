*************************************************************

Copyright (c) 2014 by PANGO MICROSYSTEMS, INC
ALL RIGHTS RESERVED.

THE SOURCE CODE CONTAINED HEREIN IS PROPRIETARY TO PANGO MICROSYSTEMS, INC.
IT SHALL NOT BE REPRODUCED OR DISCLOSED IN WHOLE OR IN PART OR USED BY
PARTIES WITHOUT WRITTEN AUTHORIZATION FROM THE OWNER.

  Operator  [GTP_DRM18K_E1]

  Author    []

  Abstract  []

  Revision History:

***************************************************************************/

implementation impl of GTP_DRM18K_E1
{
    string drm_mode = (RAM_MODE == "ROM") ? "ROM" : (
                      (RAM_MODE == "SINGLE_PORT") ? "SPR" : (
                      (RAM_MODE == "SIMPLE_DUAL_PORT") ? "SDP" : "TDP"));

    bit CP_SRVAL_A[17:0] = 18'h00000;
    if (DATA_WIDTH_A == 1)
    {
        CP_SRVAL_A[8:0] = {1'b0, RSTA_VAL[0], RSTA_VAL[0],RSTA_VAL[0],RSTA_VAL[0],RSTA_VAL[0],RSTA_VAL[0],RSTA_VAL[0],RSTA_VAL[0]};
        CP_SRVAL_A[17:9] = {1'b0, RSTA_VAL[0], RSTA_VAL[0],RSTA_VAL[0],RSTA_VAL[0],RSTA_VAL[0],RSTA_VAL[0],RSTA_VAL[0],RSTA_VAL[0]};
    }
    else if (DATA_WIDTH_A == 2)
    {
        CP_SRVAL_A[8:0] = {1'b0,RSTA_VAL[1:0],RSTA_VAL[1:0],RSTA_VAL[1:0],RSTA_VAL[1:0]};
        CP_SRVAL_A[17:9] = {1'b0,RSTA_VAL[1:0],RSTA_VAL[1:0],RSTA_VAL[1:0],RSTA_VAL[1:0]};
    }
    else if (DATA_WIDTH_A == 4)
    {
        CP_SRVAL_A[8:0] = {1'b0, RSTA_VAL[3:0], RSTA_VAL[3:0]};
        CP_SRVAL_A[17:9] = {1'b0, RSTA_VAL[3:0], RSTA_VAL[3:0]};
    }
    else if (DATA_WIDTH_A == 8 || DATA_WIDTH_A == 9)
    {
        CP_SRVAL_A = {RSTA_VAL[8:0], RSTA_VAL[8:0]};
    }
    else if (DATA_WIDTH_A == 16 || DATA_WIDTH_A == 18)
    {
        CP_SRVAL_A = RSTA_VAL;
    }
    else if (DATA_WIDTH_A == 32 || DATA_WIDTH_A == 36)
    {
        CP_SRVAL_A = RSTA_VAL[17:0];
    }
    
    bit CP_SRVAL_B[17:0] = 18'h00000;
    if (DATA_WIDTH_B == 1)
    {
        CP_SRVAL_B[8:0] = {1'b0, RSTB_VAL[0], RSTB_VAL[0],RSTB_VAL[0],RSTB_VAL[0],RSTB_VAL[0],RSTB_VAL[0],RSTB_VAL[0],RSTB_VAL[0]};
        CP_SRVAL_B[17:9] = {1'b0, RSTB_VAL[0], RSTB_VAL[0],RSTB_VAL[0],RSTB_VAL[0],RSTB_VAL[0],RSTB_VAL[0],RSTB_VAL[0],RSTB_VAL[0]};
    }
    else if (DATA_WIDTH_B == 2)
    {
        CP_SRVAL_B[8:0] = {1'b0,RSTB_VAL[1:0],RSTB_VAL[1:0],RSTB_VAL[1:0],RSTB_VAL[1:0]};
        CP_SRVAL_B[17:9] = {1'b0,RSTB_VAL[1:0],RSTB_VAL[1:0],RSTB_VAL[1:0],RSTB_VAL[1:0]};
    }
    else if (DATA_WIDTH_B == 4)
    {
        CP_SRVAL_B[8:0] = {1'b0, RSTB_VAL[3:0], RSTB_VAL[3:0]};
        CP_SRVAL_B[17:9] = {1'b0, RSTB_VAL[3:0], RSTB_VAL[3:0]};
    }
    else if (DATA_WIDTH_B == 8 || DATA_WIDTH_B == 9)
    {
        CP_SRVAL_B = {RSTB_VAL[8:0], RSTB_VAL[8:0]};
    }
    else if (DATA_WIDTH_B == 16 || DATA_WIDTH_B == 18)
    {
        CP_SRVAL_B = RSTB_VAL;
    }
    else if (DATA_WIDTH_B == 32 || DATA_WIDTH_B == 36)
    {
        CP_SRVAL_B = RSTB_VAL[17:0];
    }
    
    operator gopDRM18K gopdrm_18k
    parameter map
    (
        CP_DRM_EN       => "TRUE",
        CP_MASK         => RAM_MODE == "ROM" ? 2'b00 : 2'b11,
        CP_RESET_TYPE   => RST_TYPE == "SYNC" ? "SYNC_RESET" : "ASYNC_RESET",        
        CP_GRS_DIS      => GRS_EN == "TRUE" ? "FALSE" : "TRUE",
        CP_DATA_WIDTH_A => DATA_WIDTH_A,
        CP_DATA_WIDTH_B => DATA_WIDTH_B,
        CP_OUTPUT_REG_A => DOA_REG ? "ENABLE" : "DISABLE",
        CP_OUTPUT_REG_B => DOB_REG ? "ENABLE" : "DISABLE",
        CP_CLKA_OR_POL_INV => DOA_REG_CLKINV ? "TRUE" : "FALSE",
        CP_CLKB_OR_POL_INV => DOB_REG_CLKINV ? "TRUE" : "FALSE",
        CP_WRITE_MODE_A => WRITE_MODE_A,
        CP_WRITE_MODE_B => WRITE_MODE_B,
        CP_SRVAL_A      => CP_SRVAL_A,
        CP_SRVAL_B      => CP_SRVAL_B,
        CP_INIT_00 => INIT_00,
        CP_INIT_01 => INIT_01,
        CP_INIT_02 => INIT_02,
        CP_INIT_03 => INIT_03,
        CP_INIT_04 => INIT_04,
        CP_INIT_05 => INIT_05,
        CP_INIT_06 => INIT_06,
        CP_INIT_07 => INIT_07,
        CP_INIT_08 => INIT_08,
        CP_INIT_09 => INIT_09,
        CP_INIT_0A => INIT_0A,
        CP_INIT_0B => INIT_0B,
        CP_INIT_0C => INIT_0C,
        CP_INIT_0D => INIT_0D,
        CP_INIT_0E => INIT_0E,
        CP_INIT_0F => INIT_0F,
        CP_INIT_10 => INIT_10,
        CP_INIT_11 => INIT_11,
        CP_INIT_12 => INIT_12,
        CP_INIT_13 => INIT_13,
        CP_INIT_14 => INIT_14,
        CP_INIT_15 => INIT_15,
        CP_INIT_16 => INIT_16,
        CP_INIT_17 => INIT_17,
        CP_INIT_18 => INIT_18,
        CP_INIT_19 => INIT_19,
        CP_INIT_1A => INIT_1A,
        CP_INIT_1B => INIT_1B,
        CP_INIT_1C => INIT_1C,
        CP_INIT_1D => INIT_1D,
        CP_INIT_1E => INIT_1E,
        CP_INIT_1F => INIT_1F,
        CP_INIT_20 => INIT_20,
        CP_INIT_21 => INIT_21,
        CP_INIT_22 => INIT_22,
        CP_INIT_23 => INIT_23,
        CP_INIT_24 => INIT_24,
        CP_INIT_25 => INIT_25,
        CP_INIT_26 => INIT_26,
        CP_INIT_27 => INIT_27,
        CP_INIT_28 => INIT_28,
        CP_INIT_29 => INIT_29,
        CP_INIT_2A => INIT_2A,
        CP_INIT_2B => INIT_2B,
        CP_INIT_2C => INIT_2C,
        CP_INIT_2D => INIT_2D,
        CP_INIT_2E => INIT_2E,
        CP_INIT_2F => INIT_2F,
        CP_INIT_30 => INIT_30,
        CP_INIT_31 => INIT_31,
        CP_INIT_32 => INIT_32,
        CP_INIT_33 => INIT_33,
        CP_INIT_34 => INIT_34,
        CP_INIT_35 => INIT_35,
        CP_INIT_36 => INIT_36,
        CP_INIT_37 => INIT_37,
        CP_INIT_38 => INIT_38,
        CP_INIT_39 => INIT_39,
        CP_INIT_3A => INIT_3A,
        CP_INIT_3B => INIT_3B,
        CP_INIT_3C => INIT_3C,
        CP_INIT_3D => INIT_3D,
        CP_INIT_3E => INIT_3E,
        CP_INIT_3F => INIT_3F,
        CP_DRM_36K => "FALSE",
        CP_CAS_EN  => "FALSE",
        CP_DRM_EN  => "TRUE"
    )
    port map
    (
        CLKA  => CLKA,
        CEA   => CEA,
        ADA[13:0]   => ADDRA[13:0],
        ADSA  => ADDRA_HOLD,
        DA    => DIA,
        WEA   => WEA,
        OCEA  => ORCEA,
        RSTA  => RSTA,
        BEA   => (DATA_WIDTH_A > 9) ? BWEA[1:0] : 2'by,        

        CLKB  => CLKB,
        CEB   => CEB,
        ADB[13:0]   => ADDRB[13:0],
        ADSB  => ADDRB_HOLD,
        DB    => DIB,
        WEB   => WEB,
        OCEB  => ORCEB,
        RSTB  => RSTB,
        BEB   => (DATA_WIDTH_A > 18) ? BWEA[3:2] : (DATA_WIDTH_B > 9 ? BWEB[1:0] : 2'by),

        QA      => DOA,
        QB      => DOB
    );
};

