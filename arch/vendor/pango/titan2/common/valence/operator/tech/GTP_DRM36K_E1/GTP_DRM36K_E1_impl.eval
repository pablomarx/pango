*************************************************************

Copyright (c) 2014 by PANGO MICROSYSTEMS, INC
ALL RIGHTS RESERVED.

THE SOURCE CODE CONTAINED HEREIN IS PROPRIETARY TO PANGO MICROSYSTEMS, INC.
IT SHALL NOT BE REPRODUCED OR DISCLOSED IN WHOLE OR IN PART OR USED BY
PARTIES WITHOUT WRITTEN AUTHORIZATION FROM THE OWNER.

  Operator  [GTP_DRM36K_E1]

  Author    []

  Abstract  []

  Revision History:

***************************************************************************/

implementation impl of GTP_DRM36K_E1
{
    bit init_tmp[36863:0] = {INIT_7F, INIT_7E, INIT_7D, INIT_7C, INIT_7B, INIT_7A, INIT_79, INIT_78, 
                             INIT_77, INIT_76, INIT_75, INIT_74, INIT_73, INIT_72, INIT_71, INIT_70, 
                             INIT_6F, INIT_6E, INIT_6D, INIT_6C, INIT_6B, INIT_6A, INIT_69, INIT_68, 
                             INIT_67, INIT_66, INIT_65, INIT_64, INIT_63, INIT_62, INIT_61, INIT_60, 
                             INIT_5F, INIT_5E, INIT_5D, INIT_5C, INIT_5B, INIT_5A, INIT_59, INIT_58, 
                             INIT_57, INIT_56, INIT_55, INIT_54, INIT_53, INIT_52, INIT_51, INIT_50, 
                             INIT_4F, INIT_4E, INIT_4D, INIT_4C, INIT_4B, INIT_4A, INIT_49, INIT_48, 
                             INIT_47, INIT_46, INIT_45, INIT_44, INIT_43, INIT_42, INIT_41, INIT_40, 
                             INIT_3F, INIT_3E, INIT_3D, INIT_3C, INIT_3B, INIT_3A, INIT_39, INIT_38, 
                             INIT_37, INIT_36, INIT_35, INIT_34, INIT_33, INIT_32, INIT_31, INIT_30, 
                             INIT_2F, INIT_2E, INIT_2D, INIT_2C, INIT_2B, INIT_2A, INIT_29, INIT_28, 
                             INIT_27, INIT_26, INIT_25, INIT_24, INIT_23, INIT_22, INIT_21, INIT_20, 
                             INIT_1F, INIT_1E, INIT_1D, INIT_1C, INIT_1B, INIT_1A, INIT_19, INIT_18, 
                             INIT_17, INIT_16, INIT_15, INIT_14, INIT_13, INIT_12, INIT_11, INIT_10, 
                             INIT_0F, INIT_0E, INIT_0D, INIT_0C, INIT_0B, INIT_0A, INIT_09, INIT_08, 
                             INIT_07, INIT_06, INIT_05, INIT_04, INIT_03, INIT_02, INIT_01, INIT_00};

    bit CP_INIT[36863:0] = init_tmp;
    if (DATA_WIDTH_A >= 64 || DATA_WIDTH_B >= 64) // SDP
    {
        int i = 0;
        for (i = 0; i < 512; i += 1)
        {
            CP_INIT[36*i+35:36*i] = init_tmp[72*i+35:72*i];
            CP_INIT[18432+36*i+35:18432+36*i] = init_tmp[72*i+71:72*i+36];
        }
    }
    else if (RAM_MODE != "SIMPLE_DUAL_PORT" && (DATA_WIDTH_A >= 32 || DATA_WIDTH_B >= 32)) // DP
    {
        int i = 0;
        for (i = 0; i < 1024; i += 1)
        {
            CP_INIT[18*i+17:18*i] = init_tmp[36*i+17:36*i];
            CP_INIT[18432+18*i+17:18432+18*i] = init_tmp[36*i+35:36*i+18];
        }
    }

    &port refADDRA[15:0] = (DATA_WIDTH_B >= 64 && DATA_WIDTH_A < 64) ? {ADDRA[15], ADDRA[5], ADDRA[14:6], ADDRA[4:0]} : 
                           (RAM_MODE != "SIMPLE_DUAL_PORT" && DATA_WIDTH_B >= 32 && DATA_WIDTH_A < 32) ? {ADDRA[15], ADDRA[4], ADDRA[14:5], ADDRA[3:0]} : ADDRA[15:0];
    &port refADDRB[15:0] = (DATA_WIDTH_A >= 64 && DATA_WIDTH_B < 64) ? {ADDRB[15], ADDRB[5], ADDRB[14:6], ADDRB[4:0]} : 
                           (RAM_MODE != "SIMPLE_DUAL_PORT" && DATA_WIDTH_A >= 32 && DATA_WIDTH_B < 32) ? {ADDRB[15], ADDRB[4], ADDRB[14:5], ADDRB[3:0]} : ADDRB[15:0];

    string drm_mode = (RAM_MODE == "ROM") ? "ROM" : (
                      (RAM_MODE == "SINGLE_PORT") ? "SP" : (
                      (RAM_MODE == "SIMPLE_DUAL_PORT") ? "SDP" : "DP"));

    int CP_DATA_WIDTH_A = DATA_WIDTH_A;
    int CP_DATA_WIDTH_B = DATA_WIDTH_B;
    string CP_DBW_EN = "FALSE";
    string CP_DBR_EN = "FALSE";
    int DATA_WIDTH = DATA_WIDTH_A > DATA_WIDTH_B ? DATA_WIDTH_A : DATA_WIDTH_B;
    
    if (DATA_WIDTH_A > 36 || (drm_mode != "SDP" && DATA_WIDTH_A >= 32))
    {
        CP_DATA_WIDTH_A = DATA_WIDTH_A / 2;
        CP_DBW_EN = "TRUE";
        //CP_DBR_EN = "TRUE";
    }
    
    if (DATA_WIDTH_B > 36 || (drm_mode != "SDP" && DATA_WIDTH_B >= 32))
    {
        CP_DATA_WIDTH_B = DATA_WIDTH_B / 2;
        //CP_DBW_EN = "TRUE";
        CP_DBR_EN = "TRUE";
    }

    string IS_SDP = (RAM_MODE == "SIMPLE_DUAL_PORT") ? "TRUE" :
                    (CP_DATA_WIDTH_A > 18 || CP_DATA_WIDTH_B > 18) ? "TRUE" : "FALSE";
    
    bit CP_SRVAL_A[17:0]  = 18'h00000;
    bit CP_SRVAL_A1[17:0] = 18'h00000;
    bit RST_VAL[71:0] = {RSTB_VAL, RSTA_VAL}; 
    if (DATA_WIDTH_A == 1)
    {
        CP_SRVAL_A[8:0] = {1'b0, RSTA_VAL[0], RSTA_VAL[0],RSTA_VAL[0],RSTA_VAL[0],RSTA_VAL[0],RSTA_VAL[0],RSTA_VAL[0],RSTA_VAL[0]};
        CP_SRVAL_A[17:9] = {1'b0, RSTA_VAL[0], RSTA_VAL[0],RSTA_VAL[0],RSTA_VAL[0],RSTA_VAL[0],RSTA_VAL[0],RSTA_VAL[0],RSTA_VAL[0]};
        CP_SRVAL_A1 = CP_SRVAL_A; 
    }
    else if (DATA_WIDTH_A == 2)
    {
        CP_SRVAL_A[8:0] = {1'b0,RSTA_VAL[1:0],RSTA_VAL[1:0],RSTA_VAL[1:0],RSTA_VAL[1:0]};
        CP_SRVAL_A[17:9] = {1'b0,RSTA_VAL[1:0],RSTA_VAL[1:0],RSTA_VAL[1:0],RSTA_VAL[1:0]};
        CP_SRVAL_A1 = CP_SRVAL_A; 
    }
    else if (DATA_WIDTH_A == 4)
    {
        CP_SRVAL_A[8:0] = {1'b0, RSTA_VAL[3:0], RSTA_VAL[3:0]};
        CP_SRVAL_A[17:9] = {1'b0, RSTA_VAL[3:0], RSTA_VAL[3:0]};
        CP_SRVAL_A1 = CP_SRVAL_A; 
    }
    else if (DATA_WIDTH_A == 8 || DATA_WIDTH_A == 9)
    {
        CP_SRVAL_A = {RSTA_VAL[8:0], RSTA_VAL[8:0]};
        CP_SRVAL_A1 = CP_SRVAL_A; 
    }
    else if (DATA_WIDTH_A == 16 || DATA_WIDTH_A == 18)
    {
        CP_SRVAL_A = RSTA_VAL[17:0];
        CP_SRVAL_A1 = CP_SRVAL_A; 
    }
    else if (DATA_WIDTH_A == 32 || DATA_WIDTH_A == 36)
    {
        if (RAM_MODE == "TRUE_DUAL_PORT")
        {
            CP_SRVAL_A = RSTA_VAL[17:0];
            CP_SRVAL_A1 = RSTA_VAL[35:18];
        }
        else
        {
            CP_SRVAL_A = RSTA_VAL[17:0];
            CP_SRVAL_A1 = RSTA_VAL[35:18]; 
        }
    }
    else if (DATA_WIDTH_A == 64 || DATA_WIDTH_A == 72)
    {
        CP_SRVAL_A = RST_VAL[17:0];
        CP_SRVAL_A1 = RST_VAL[35:18];
    }
    
    bit CP_SRVAL_B[17:0]  = 18'h00000;
    bit CP_SRVAL_B1[17:0] = 18'h00000;
    if (DATA_WIDTH_B == 1)
    {
        CP_SRVAL_B[8:0] = {1'b0, RSTB_VAL[0], RSTB_VAL[0],RSTB_VAL[0],RSTB_VAL[0],RSTB_VAL[0],RSTB_VAL[0],RSTB_VAL[0],RSTB_VAL[0]};
        CP_SRVAL_B[17:9] = {1'b0, RSTB_VAL[0], RSTB_VAL[0],RSTB_VAL[0],RSTB_VAL[0],RSTB_VAL[0],RSTB_VAL[0],RSTB_VAL[0],RSTB_VAL[0]};
        CP_SRVAL_B1 = CP_SRVAL_B;
    }
    else if (DATA_WIDTH_B == 2)
    {
        CP_SRVAL_B[8:0] = {1'b0,RSTB_VAL[1:0],RSTB_VAL[1:0],RSTB_VAL[1:0],RSTB_VAL[1:0]};
        CP_SRVAL_B[17:9] = {1'b0,RSTB_VAL[1:0],RSTB_VAL[1:0],RSTB_VAL[1:0],RSTB_VAL[1:0]};
        CP_SRVAL_B1 = CP_SRVAL_B;
    }
    else if (DATA_WIDTH_B == 4)
    {
        CP_SRVAL_B[8:0] = {1'b0, RSTB_VAL[3:0], RSTB_VAL[3:0]};
        CP_SRVAL_B[17:9] = {1'b0, RSTB_VAL[3:0], RSTB_VAL[3:0]};
        CP_SRVAL_B1 = CP_SRVAL_B;
    }
    else if (DATA_WIDTH_B == 8 || DATA_WIDTH_B == 9)
    {
        CP_SRVAL_B = {RSTB_VAL[8:0], RSTB_VAL[8:0]};
        CP_SRVAL_B1 = CP_SRVAL_B;
    }
    else if (DATA_WIDTH_B == 16 || DATA_WIDTH_B == 18)
    {
        CP_SRVAL_B = RSTB_VAL[17:0];
        CP_SRVAL_B1 = CP_SRVAL_B;
    }
    else if (DATA_WIDTH_B == 32 || DATA_WIDTH_B == 36)
    {
        if (RAM_MODE == "TRUE_DUAL_PORT")
        {
            CP_SRVAL_B = RSTB_VAL[17:0];
            CP_SRVAL_B1 = RSTB_VAL[35:18];
        }
        else
        {
            CP_SRVAL_B = RSTB_VAL[17:0];
            CP_SRVAL_B1 = RSTB_VAL[35:18];
        }
    }
    else if (DATA_WIDTH_B == 64 || DATA_WIDTH_B == 72)
    {
        CP_SRVAL_B = RST_VAL[53:36];
        CP_SRVAL_B1 = RST_VAL[71:54];
    }
    
    int dp32_36_a = (drm_mode != "SDP" && (DATA_WIDTH_A == 32 || DATA_WIDTH_A == 36)) ? 1 : 0;
    int dp32_36_b = (drm_mode != "SDP" && (DATA_WIDTH_B == 32 || DATA_WIDTH_B == 36)) ? 1 : 0;
    int sdp_32_36_a = ((drm_mode == "SDP") && (DATA_WIDTH_A == 32 || DATA_WIDTH_A == 36)) ? 1 : 0;
    int sdp_32_36_b = ((drm_mode == "SDP") && (DATA_WIDTH_B == 32 || DATA_WIDTH_B == 36)) ? 1 : 0;
    wire nt_by_qa0[17:0];
    wire nt_by_qa1[17:0];
    wire nt_by_qb0[17:0];
    wire nt_by_qb1[17:0];
    
    operator gopDRM gopdrm_36k
    parameter map
    (
        CP_DBW_EN     => CP_DBW_EN,
        CP_DBR_EN     => CP_DBR_EN,
        CP_DRM_EN_0   => "TRUE",
        CP_DRM_EN_1   => "TRUE",
        CP_MASK       =>   RAM_MODE == "ROM" ? 2'b00 : 2'b11,
        CP_RESET_TYPE_0 => RST_TYPE == "SYNC" ? "SYNC_RESET" : "ASYNC_RESET",
        CP_RESET_TYPE_1 => RST_TYPE == "SYNC" ? "SYNC_RESET" : "ASYNC_RESET",
        CP_GRS_DIS_0  => GRS_EN == "TRUE" ? "FALSE" : "TRUE",
        CP_GRS_DIS_1  => GRS_EN == "TRUE" ? "FALSE" : "TRUE",
        CP_CSA_POL    => { CSA_MASK[2] ? 1'b0 : 1'b1, CSA_MASK[1] ? 1'b0 : 1'b1, CSA_MASK[0] ? 1'b0 : 1'b1},
        CP_CSB_POL    => { CSB_MASK[2] ? 1'b0 : 1'b1, CSB_MASK[1] ? 1'b0 : 1'b1, CSB_MASK[0] ? 1'b0 : 1'b1},
        CP_DATA_WIDTH_A_0 => CP_DATA_WIDTH_A,
        CP_DATA_WIDTH_A_1 => CP_DATA_WIDTH_A,
        CP_DATA_WIDTH_B_0 => CP_DATA_WIDTH_B,
        CP_DATA_WIDTH_B_1 => CP_DATA_WIDTH_B,
        CP_OUTPUT_REG_A_0 => DOA_REG ? "ENABLE" : "DISABLE",
        CP_OUTPUT_REG_A_1 => DOA_REG ? "ENABLE" : "DISABLE",
        CP_OUTPUT_REG_B_0 => DOB_REG ? "ENABLE" : "DISABLE",
        CP_OUTPUT_REG_B_1 => DOB_REG ? "ENABLE" : "DISABLE",
        CP_CLKA_OR_POL_INV_0 => DOA_REG_CLKINV ? "TRUE" : "FALSE",
        CP_CLKA_OR_POL_INV_1 => DOA_REG_CLKINV ? "TRUE" : "FALSE",
        CP_CLKB_OR_POL_INV_0 => DOB_REG_CLKINV ? "TRUE" : "FALSE",
        CP_CLKB_OR_POL_INV_1 => DOB_REG_CLKINV ? "TRUE" : "FALSE",
        CP_SRVAL_A_0      => CP_SRVAL_A,
        CP_SRVAL_A_1      => CP_SRVAL_A1,
        CP_SRVAL_B_0      => CP_SRVAL_B,
        CP_SRVAL_B_1      => CP_SRVAL_B1,
        CP_WRITE_MODE_A_0 => WRITE_MODE_A,
        CP_WRITE_MODE_A_1 => WRITE_MODE_A,
        CP_WRITE_MODE_B_0 => WRITE_MODE_B,
        CP_WRITE_MODE_B_1 => WRITE_MODE_B,
        CP_INIT_00 => CP_INIT[288*1  -1:288*0  ],
        CP_INIT_01 => CP_INIT[288*2  -1:288*1  ],
        CP_INIT_02 => CP_INIT[288*3  -1:288*2  ],
        CP_INIT_03 => CP_INIT[288*4  -1:288*3  ],
        CP_INIT_04 => CP_INIT[288*5  -1:288*4  ],
        CP_INIT_05 => CP_INIT[288*6  -1:288*5  ],
        CP_INIT_06 => CP_INIT[288*7  -1:288*6  ],
        CP_INIT_07 => CP_INIT[288*8  -1:288*7  ],
        CP_INIT_08 => CP_INIT[288*9  -1:288*8  ],
        CP_INIT_09 => CP_INIT[288*10 -1:288*9  ],
        CP_INIT_0A => CP_INIT[288*11 -1:288*10 ],
        CP_INIT_0B => CP_INIT[288*12 -1:288*11 ],
        CP_INIT_0C => CP_INIT[288*13 -1:288*12 ],
        CP_INIT_0D => CP_INIT[288*14 -1:288*13 ],
        CP_INIT_0E => CP_INIT[288*15 -1:288*14 ],
        CP_INIT_0F => CP_INIT[288*16 -1:288*15 ],
        CP_INIT_10 => CP_INIT[288*17 -1:288*16 ],
        CP_INIT_11 => CP_INIT[288*18 -1:288*17 ],
        CP_INIT_12 => CP_INIT[288*19 -1:288*18 ],
        CP_INIT_13 => CP_INIT[288*20 -1:288*19 ],
        CP_INIT_14 => CP_INIT[288*21 -1:288*20 ],
        CP_INIT_15 => CP_INIT[288*22 -1:288*21 ],
        CP_INIT_16 => CP_INIT[288*23 -1:288*22 ],
        CP_INIT_17 => CP_INIT[288*24 -1:288*23 ],
        CP_INIT_18 => CP_INIT[288*25 -1:288*24 ],
        CP_INIT_19 => CP_INIT[288*26 -1:288*25 ],
        CP_INIT_1A => CP_INIT[288*27 -1:288*26 ],
        CP_INIT_1B => CP_INIT[288*28 -1:288*27 ],
        CP_INIT_1C => CP_INIT[288*29 -1:288*28 ],
        CP_INIT_1D => CP_INIT[288*30 -1:288*29 ],
        CP_INIT_1E => CP_INIT[288*31 -1:288*30 ],
        CP_INIT_1F => CP_INIT[288*32 -1:288*31 ],
        CP_INIT_20 => CP_INIT[288*33 -1:288*32 ],
        CP_INIT_21 => CP_INIT[288*34 -1:288*33 ],
        CP_INIT_22 => CP_INIT[288*35 -1:288*34 ],
        CP_INIT_23 => CP_INIT[288*36 -1:288*35 ],
        CP_INIT_24 => CP_INIT[288*37 -1:288*36 ],
        CP_INIT_25 => CP_INIT[288*38 -1:288*37 ],
        CP_INIT_26 => CP_INIT[288*39 -1:288*38 ],
        CP_INIT_27 => CP_INIT[288*40 -1:288*39 ],
        CP_INIT_28 => CP_INIT[288*41 -1:288*40 ],
        CP_INIT_29 => CP_INIT[288*42 -1:288*41 ],
        CP_INIT_2A => CP_INIT[288*43 -1:288*42 ],
        CP_INIT_2B => CP_INIT[288*44 -1:288*43 ],
        CP_INIT_2C => CP_INIT[288*45 -1:288*44 ],
        CP_INIT_2D => CP_INIT[288*46 -1:288*45 ],
        CP_INIT_2E => CP_INIT[288*47 -1:288*46 ],
        CP_INIT_2F => CP_INIT[288*48 -1:288*47 ],
        CP_INIT_30 => CP_INIT[288*49 -1:288*48 ],
        CP_INIT_31 => CP_INIT[288*50 -1:288*49 ],
        CP_INIT_32 => CP_INIT[288*51 -1:288*50 ],
        CP_INIT_33 => CP_INIT[288*52 -1:288*51 ],
        CP_INIT_34 => CP_INIT[288*53 -1:288*52 ],
        CP_INIT_35 => CP_INIT[288*54 -1:288*53 ],
        CP_INIT_36 => CP_INIT[288*55 -1:288*54 ],
        CP_INIT_37 => CP_INIT[288*56 -1:288*55 ],
        CP_INIT_38 => CP_INIT[288*57 -1:288*56 ],
        CP_INIT_39 => CP_INIT[288*58 -1:288*57 ],
        CP_INIT_3A => CP_INIT[288*59 -1:288*58 ],
        CP_INIT_3B => CP_INIT[288*60 -1:288*59 ],
        CP_INIT_3C => CP_INIT[288*61 -1:288*60 ],
        CP_INIT_3D => CP_INIT[288*62 -1:288*61 ],
        CP_INIT_3E => CP_INIT[288*63 -1:288*62 ],
        CP_INIT_3F => CP_INIT[288*64 -1:288*63 ],
        CP_INIT_40 => CP_INIT[288*65 -1:288*64 ],
        CP_INIT_41 => CP_INIT[288*66 -1:288*65 ],
        CP_INIT_42 => CP_INIT[288*67 -1:288*66 ],
        CP_INIT_43 => CP_INIT[288*68 -1:288*67 ],
        CP_INIT_44 => CP_INIT[288*69 -1:288*68 ],
        CP_INIT_45 => CP_INIT[288*70 -1:288*69 ],
        CP_INIT_46 => CP_INIT[288*71 -1:288*70 ],
        CP_INIT_47 => CP_INIT[288*72 -1:288*71 ],
        CP_INIT_48 => CP_INIT[288*73 -1:288*72 ],
        CP_INIT_49 => CP_INIT[288*74 -1:288*73 ],
        CP_INIT_4A => CP_INIT[288*75 -1:288*74 ],
        CP_INIT_4B => CP_INIT[288*76 -1:288*75 ],
        CP_INIT_4C => CP_INIT[288*77 -1:288*76 ],
        CP_INIT_4D => CP_INIT[288*78 -1:288*77 ],
        CP_INIT_4E => CP_INIT[288*79 -1:288*78 ],
        CP_INIT_4F => CP_INIT[288*80 -1:288*79 ],
        CP_INIT_50 => CP_INIT[288*81 -1:288*80 ],
        CP_INIT_51 => CP_INIT[288*82 -1:288*81 ],
        CP_INIT_52 => CP_INIT[288*83 -1:288*82 ],
        CP_INIT_53 => CP_INIT[288*84 -1:288*83 ],
        CP_INIT_54 => CP_INIT[288*85 -1:288*84 ],
        CP_INIT_55 => CP_INIT[288*86 -1:288*85 ],
        CP_INIT_56 => CP_INIT[288*87 -1:288*86 ],
        CP_INIT_57 => CP_INIT[288*88 -1:288*87 ],
        CP_INIT_58 => CP_INIT[288*89 -1:288*88 ],
        CP_INIT_59 => CP_INIT[288*90 -1:288*89 ],
        CP_INIT_5A => CP_INIT[288*91 -1:288*90 ],
        CP_INIT_5B => CP_INIT[288*92 -1:288*91 ],
        CP_INIT_5C => CP_INIT[288*93 -1:288*92 ],
        CP_INIT_5D => CP_INIT[288*94 -1:288*93 ],
        CP_INIT_5E => CP_INIT[288*95 -1:288*94 ],
        CP_INIT_5F => CP_INIT[288*96 -1:288*95 ],
        CP_INIT_60 => CP_INIT[288*97 -1:288*96 ],
        CP_INIT_61 => CP_INIT[288*98 -1:288*97 ],
        CP_INIT_62 => CP_INIT[288*99 -1:288*98 ],
        CP_INIT_63 => CP_INIT[288*100-1:288*99 ],
        CP_INIT_64 => CP_INIT[288*101-1:288*100],
        CP_INIT_65 => CP_INIT[288*102-1:288*101],
        CP_INIT_66 => CP_INIT[288*103-1:288*102],
        CP_INIT_67 => CP_INIT[288*104-1:288*103],
        CP_INIT_68 => CP_INIT[288*105-1:288*104],
        CP_INIT_69 => CP_INIT[288*106-1:288*105],
        CP_INIT_6A => CP_INIT[288*107-1:288*106],
        CP_INIT_6B => CP_INIT[288*108-1:288*107],
        CP_INIT_6C => CP_INIT[288*109-1:288*108],
        CP_INIT_6D => CP_INIT[288*110-1:288*109],
        CP_INIT_6E => CP_INIT[288*111-1:288*110],
        CP_INIT_6F => CP_INIT[288*112-1:288*111],
        CP_INIT_70 => CP_INIT[288*113-1:288*112],
        CP_INIT_71 => CP_INIT[288*114-1:288*113],
        CP_INIT_72 => CP_INIT[288*115-1:288*114],
        CP_INIT_73 => CP_INIT[288*116-1:288*115],
        CP_INIT_74 => CP_INIT[288*117-1:288*116],
        CP_INIT_75 => CP_INIT[288*118-1:288*117],
        CP_INIT_76 => CP_INIT[288*119-1:288*118],
        CP_INIT_77 => CP_INIT[288*120-1:288*119],
        CP_INIT_78 => CP_INIT[288*121-1:288*120],
        CP_INIT_79 => CP_INIT[288*122-1:288*121],
        CP_INIT_7A => CP_INIT[288*123-1:288*122],
        CP_INIT_7B => CP_INIT[288*124-1:288*123],
        CP_INIT_7C => CP_INIT[288*125-1:288*124],
        CP_INIT_7D => CP_INIT[288*126-1:288*125],
        CP_INIT_7E => CP_INIT[288*127-1:288*126],
        CP_INIT_7F => CP_INIT[288*128-1:288*127],
        CP_DRM_36K => "TRUE",

        CP_ECC_RDEN  => ECC_READ_EN,
        CP_ECC_WREN  => ECC_WRITE_EN
    )
    port map
    (
        CLKA[0]     => CLKA,
        CEA[0]      => CEA,
        CSA         => CSA,
        //ADA0        => refADDRA[14:0],
        ADA0[0]        => (DATA_WIDTH_A > 1) ?  1'by : refADDRA[0],
        ADA0[1]        => (DATA_WIDTH_A > 2) ?  1'by : refADDRA[1],
        ADA0[2]        => (DATA_WIDTH_A > 4) ?  1'by : refADDRA[2],
        ADA0[3]        => (DATA_WIDTH_A > 9) ?  1'by : refADDRA[3],
        ADA0[4]        => (DATA_WIDTH_A > 18) ? (dp32_36_a == 1 ? refADDRA[5] : 1'by) : refADDRA[4],
        ADA0[5]        => (dp32_36_a == 1 || DATA_WIDTH_A >= 64) ? refADDRA[6] : refADDRA[5],
        ADA0[6]        => (dp32_36_a == 1 || DATA_WIDTH_A >= 64) ? refADDRA[7] : refADDRA[6],
        ADA0[7]        => (dp32_36_a == 1 || DATA_WIDTH_A >= 64) ? refADDRA[8] : refADDRA[7],
        ADA0[8]        => (dp32_36_a == 1 || DATA_WIDTH_A >= 64) ? refADDRA[9] : refADDRA[8],
        ADA0[9]        => (dp32_36_a == 1 || DATA_WIDTH_A >= 64) ? refADDRA[10] : refADDRA[9],
        ADA0[10]       => (dp32_36_a == 1 || DATA_WIDTH_A >= 64) ? refADDRA[11] : refADDRA[10],
        ADA0[11]       => (dp32_36_a == 1 || DATA_WIDTH_A >= 64) ? refADDRA[12] : refADDRA[11],
        ADA0[12]       => (dp32_36_a == 1 || DATA_WIDTH_A >= 64) ? refADDRA[13] : refADDRA[12],
        ADA0[13]       => (dp32_36_a == 1 || DATA_WIDTH_A >= 64) ? refADDRA[14] : refADDRA[13],
        ADA0[14]       => (dp32_36_a == 1 || DATA_WIDTH_A >= 64) ? 1'by : refADDRA[14],
        ADA_CAS        => refADDRA[15],

        //ADA1[4]        => dp32_36_a == 1 ? refADDRA[5] : 1'by,
        //ADA1[5]        => (dp32_36_a == 1 || sdp_ab64 == 1) ? refADDRA[6] : 1'by,
        //ADA1[6]        => (dp32_36_a == 1 || sdp_ab64 == 1) ? refADDRA[7] : 1'by,
        //ADA1[7]        => (dp32_36_a == 1 || sdp_ab64 == 1) ? refADDRA[8] : 1'by,
        //ADA1[8]        => (dp32_36_a == 1 || sdp_ab64 == 1) ? refADDRA[9] : 1'by,
        //ADA1[9]        => (dp32_36_a == 1 || sdp_ab64 == 1) ? refADDRA[10] : 1'by,
        //ADA1[10]       => (dp32_36_a == 1 || sdp_ab64 == 1) ? refADDRA[11] : 1'by,
        //ADA1[11]       => (dp32_36_a == 1 || sdp_ab64 == 1) ? refADDRA[12] : 1'by,
        //ADA1[12]       => (dp32_36_a == 1 || sdp_ab64 == 1) ? refADDRA[13] : 1'by,
        //ADA1[13]       => (dp32_36_a == 1 || sdp_ab64 == 1) ? refADDRA[14] : 1'by,
        ADSA[0]        => ADDRA_HOLD,

        //DA0         => DIA[17:0],
        //DA1         => DIA[35:18],
        DA0[0]         => DIA[0],        
        DA0[1]         => (DATA_WIDTH_A > 1) ? DIA[1] : 1'by,
        DA0[2]         => (DATA_WIDTH_A > 2) ? DIA[2] : 1'by,        
        DA0[3]         => (DATA_WIDTH_A > 2) ? DIA[3] : 1'by,
        DA0[4]         => (DATA_WIDTH_A > 4) ? DIA[4] : 1'by,        
        DA0[5]         => (DATA_WIDTH_A > 4) ? DIA[5] : 1'by,
        DA0[6]         => (DATA_WIDTH_A > 4) ? DIA[6] : 1'by,        
        DA0[7]         => (DATA_WIDTH_A > 4) ? DIA[7] : 1'by,
        DA0[8]         => (DATA_WIDTH_A % 9 == 0) ? DIA[8] : 1'by,        
        DA0[9]         => (DATA_WIDTH_A > 9) ? DIA[9] : 1'by,
        DA0[10]        => (DATA_WIDTH_A > 9) ? DIA[10] : 1'by,        
        DA0[11]        => (DATA_WIDTH_A > 9) ? DIA[11] : 1'by,
        DA0[12]        => (DATA_WIDTH_A > 9) ? DIA[12] : 1'by,        
        DA0[13]        => (DATA_WIDTH_A > 9) ? DIA[13] : 1'by,
        DA0[14]        => (DATA_WIDTH_A > 9) ? DIA[14] : 1'by,        
        DA0[15]        => (DATA_WIDTH_A > 9) ? DIA[15] : 1'by,
        DA0[16]        => (DATA_WIDTH_A > 9) ? DIA[16] : 1'by,        
        DA0[17]        => (DATA_WIDTH_A % 9 == 0) ? DIA[17] : 1'by,

        DA1[0]         => (dp32_36_a == 1 || DATA_WIDTH_A > 36) ? DIA[18] : 1'by,
        DA1[1]         => (dp32_36_a == 1 || DATA_WIDTH_A > 36) ? DIA[19] : 1'by,
        DA1[2]         => (dp32_36_a == 1 || DATA_WIDTH_A > 36) ? DIA[20] : 1'by,
        DA1[3]         => (dp32_36_a == 1 || DATA_WIDTH_A > 36) ? DIA[21] : 1'by,
        DA1[4]         => (dp32_36_a == 1 || DATA_WIDTH_A > 36) ? DIA[22] : 1'by,
        DA1[5]         => (dp32_36_a == 1 || DATA_WIDTH_A > 36) ? DIA[23] : 1'by,
        DA1[6]         => (dp32_36_a == 1 || DATA_WIDTH_A > 36) ? DIA[24] : 1'by,
        DA1[7]         => (dp32_36_a == 1 || DATA_WIDTH_A > 36) ? DIA[25] : 1'by,
        DA1[8]         => ((dp32_36_a == 1 || DATA_WIDTH_A > 36) && DATA_WIDTH_A % 9 == 0) ? DIA[26] : 1'by,
        DA1[9]         => (dp32_36_a == 1 || DATA_WIDTH_A > 36) ? DIA[27] : 1'by,
        DA1[10]        => (dp32_36_a == 1 || DATA_WIDTH_A > 36) ? DIA[28] : 1'by,
        DA1[11]        => (dp32_36_a == 1 || DATA_WIDTH_A > 36) ? DIA[29] : 1'by,
        DA1[12]        => (dp32_36_a == 1 || DATA_WIDTH_A > 36) ? DIA[30] : 1'by,
        DA1[13]        => (dp32_36_a == 1 || DATA_WIDTH_A > 36) ? DIA[31] : 1'by,
        DA1[14]        => (dp32_36_a == 1 || DATA_WIDTH_A > 36) ? DIA[32] : 1'by,
        DA1[15]        => (dp32_36_a == 1 || DATA_WIDTH_A > 36) ? DIA[33] : 1'by,
        DA1[16]        => (dp32_36_a == 1 || DATA_WIDTH_A > 36) ? DIA[34] : 1'by,
        DA1[17]        => ((dp32_36_a == 1 || DATA_WIDTH_A > 36) && DATA_WIDTH_A % 9 == 0) ? DIA[35] : 1'by,

        WEA[0]      => WEA,
        CEA[0]      => CEA,
        BEA0        => (DATA_WIDTH_A > 9) ? BWEA[1:0] : 2'by,
        BEA1        => (DATA_WIDTH_A > 18) ? BWEA[3:2] : 2'by,
        OCEA[0]     => ORCEA,
        RSTA[0]     => RSTA,
        CSA         => CSA,   

        CLKB[0]     => CLKB,
        CEB[0]      => CEB,
        CSB         => CSB,
        //ADB0        => refADDRB[14:0],
        ADB0[0]        => (DATA_WIDTH_B > 1) ? 1'by : refADDRB[0],
        ADB0[1]        => (DATA_WIDTH_B > 2) ? 1'by : refADDRB[1],
        ADB0[2]        => (DATA_WIDTH_B > 4) ? 1'by : refADDRB[2],
        ADB0[3]        => (DATA_WIDTH_B > 9) ? 1'by : refADDRB[3],
        ADB0[4]        => (DATA_WIDTH_B > 18) ? (dp32_36_b == 1 ? refADDRB[5] : 1'by) : refADDRB[4],
        ADB0[5]        => (dp32_36_b == 1 || DATA_WIDTH_B >= 64) ? refADDRB[6] : refADDRB[5],
        ADB0[6]        => (dp32_36_b == 1 || DATA_WIDTH_B >= 64) ? refADDRB[7] : refADDRB[6],
        ADB0[7]        => (dp32_36_b == 1 || DATA_WIDTH_B >= 64) ? refADDRB[8] : refADDRB[7],
        ADB0[8]        => (dp32_36_b == 1 || DATA_WIDTH_B >= 64) ? refADDRB[9] : refADDRB[8],
        ADB0[9]        => (dp32_36_b == 1 || DATA_WIDTH_B >= 64) ? refADDRB[10] : refADDRB[9],
        ADB0[10]       => (dp32_36_b == 1 || DATA_WIDTH_B >= 64) ? refADDRB[11] : refADDRB[10],
        ADB0[11]       => (dp32_36_b == 1 || DATA_WIDTH_B >= 64) ? refADDRB[12] : refADDRB[11],
        ADB0[12]       => (dp32_36_b == 1 || DATA_WIDTH_B >= 64) ? refADDRB[13] : refADDRB[12],
        ADB0[13]       => (dp32_36_b == 1 || DATA_WIDTH_B >= 64) ? refADDRB[14] : refADDRB[13],
        ADB0[14]       => (dp32_36_b == 1 || DATA_WIDTH_B >= 64) ? 1'by : refADDRB[14],
        ADB_CAS        => refADDRB[15],

        //ADB1[4]        => dp32_36_b == 1 ? refADDRB[5] : 1'by,
        //ADB1[5]        => (dp32_36_b == 1 || sdp_ab64 == 1) ? refADDRB[6] : 1'by,
        //ADB1[6]        => (dp32_36_b == 1 || sdp_ab64 == 1) ? refADDRB[7] : 1'by,
        //ADB1[7]        => (dp32_36_b == 1 || sdp_ab64 == 1) ? refADDRB[8] : 1'by,
        //ADB1[8]        => (dp32_36_b == 1 || sdp_ab64 == 1) ? refADDRB[9] : 1'by,
        //ADB1[9]        => (dp32_36_b == 1 || sdp_ab64 == 1) ? refADDRB[10] : 1'by,
        //ADB1[10]       => (dp32_36_b == 1 || sdp_ab64 == 1) ? refADDRB[11] : 1'by,
        //ADB1[11]       => (dp32_36_b == 1 || sdp_ab64 == 1) ? refADDRB[12] : 1'by,
        //ADB1[12]       => (dp32_36_b == 1 || sdp_ab64 == 1) ? refADDRB[13] : 1'by,
        //ADB1[13]       => (dp32_36_b == 1 || sdp_ab64 == 1) ? refADDRB[14] : 1'by,
        ADSB[0]        => ADDRB_HOLD,

        //DB0         => DIB[17:0],
        //DB1         => DIB[35:18],
        DB0[0]         => sdp_32_36_a == 1 ? DIA[18] : DIB[0],                            
        DB0[1]         => sdp_32_36_a == 1 ? DIA[19] : ((DATA_WIDTH_B > 1 || DATA_WIDTH_A > 36) ? DIB[1] : 1'by), 
        DB0[2]         => sdp_32_36_a == 1 ? DIA[20] : (DATA_WIDTH_B > 2 || DATA_WIDTH_A > 36) ? DIB[2] : 1'by,                                                                                                 
        DB0[3]         => sdp_32_36_a == 1 ? DIA[21] : (DATA_WIDTH_B > 2 || DATA_WIDTH_A > 36) ? DIB[3] : 1'by,                                                                                                 
        DB0[4]         => sdp_32_36_a == 1 ? DIA[22] : (DATA_WIDTH_B > 4 || DATA_WIDTH_A > 36) ? DIB[4] : 1'by,                                                                                                 
        DB0[5]         => sdp_32_36_a == 1 ? DIA[23] : (DATA_WIDTH_B > 4 || DATA_WIDTH_A > 36) ? DIB[5] : 1'by,                                                                                                 
        DB0[6]         => sdp_32_36_a == 1 ? DIA[24] : (DATA_WIDTH_B > 4 || DATA_WIDTH_A > 36) ? DIB[6] : 1'by,                                                                                                 
        DB0[7]         => sdp_32_36_a == 1 ? DIA[25] : (DATA_WIDTH_B > 4 || DATA_WIDTH_A > 36) ? DIB[7] : 1'by,                                                                                                 
        DB0[8]         => ((drm_mode == "SDP") && DATA_WIDTH_A == 36) ? DIA[26] : (DATA_WIDTH_B % 9 == 0 || DATA_WIDTH_A == 72) ? DIB[8] : 1'by,                                                                                            
        DB0[9]         => sdp_32_36_a == 1 ? DIA[27] : (DATA_WIDTH_B > 9 || DATA_WIDTH_A > 36) ? DIB[9] : 1'by,                                                                                                 
        DB0[10]        => sdp_32_36_a == 1 ? DIA[28] : (DATA_WIDTH_B > 9 || DATA_WIDTH_A > 36) ? DIB[10] : 1'by,                                                                                                
        DB0[11]        => sdp_32_36_a == 1 ? DIA[29] : (DATA_WIDTH_B > 9 || DATA_WIDTH_A > 36) ? DIB[11] : 1'by,                                                                                                
        DB0[12]        => sdp_32_36_a == 1 ? DIA[30] : (DATA_WIDTH_B > 9 || DATA_WIDTH_A > 36) ? DIB[12] : 1'by,                                                                                                
        DB0[13]        => sdp_32_36_a == 1 ? DIA[31] : (DATA_WIDTH_B > 9 || DATA_WIDTH_A > 36) ? DIB[13] : 1'by,                                                                                                
        DB0[14]        => sdp_32_36_a == 1 ? DIA[32] : (DATA_WIDTH_B > 9 || DATA_WIDTH_A > 36) ? DIB[14] : 1'by,                                                                                                
        DB0[15]        => sdp_32_36_a == 1 ? DIA[33] : (DATA_WIDTH_B > 9 || DATA_WIDTH_A > 36) ? DIB[15] : 1'by,                                                                                                
        DB0[16]        => sdp_32_36_a == 1 ? DIA[34] : (DATA_WIDTH_B > 9 || DATA_WIDTH_A > 36) ? DIB[16] : 1'by,                                                                                                
        DB0[17]        => ((drm_mode == "SDP") && DATA_WIDTH_A == 36) ? DIA[35] : (DATA_WIDTH_B % 9 == 0 || DATA_WIDTH_A ==72) ? DIB[17] : 1'by,

        DB1[0]         => (dp32_36_b == 1 || DATA_WIDTH_A > 36) ?  DIB[18] : 1'by,                                                                                               
        DB1[1]         => (dp32_36_b == 1 || DATA_WIDTH_A > 36) ?  DIB[19] : 1'by,                                                                                               
        DB1[2]         => (dp32_36_b == 1 || DATA_WIDTH_A > 36) ?  DIB[20] : 1'by,                                                                                               
        DB1[3]         => (dp32_36_b == 1 || DATA_WIDTH_A > 36) ?  DIB[21] : 1'by,                                                                                               
        DB1[4]         => (dp32_36_b == 1 || DATA_WIDTH_A > 36) ?  DIB[22] : 1'by,                                                                                               
        DB1[5]         => (dp32_36_b == 1 || DATA_WIDTH_A > 36) ?  DIB[23] : 1'by,                                                                                               
        DB1[6]         => (dp32_36_b == 1 || DATA_WIDTH_A > 36) ?  DIB[24] : 1'by,                                                                                               
        DB1[7]         => (dp32_36_b == 1 || DATA_WIDTH_A > 36) ?  DIB[25] : 1'by,                                                                                               
        DB1[8]         => ((dp32_36_b == 1 && DATA_WIDTH_B % 9 == 0) || DATA_WIDTH_A == 72) ? DIB[26] : 1'by,                                                                      
        DB1[9]         => (dp32_36_b == 1 || DATA_WIDTH_A > 36) ?  DIB[27] : 1'by,                                                                                               
        DB1[10]        => (dp32_36_b == 1 || DATA_WIDTH_A > 36) ?  DIB[28] : 1'by,                                                                                               
        DB1[11]        => (dp32_36_b == 1 || DATA_WIDTH_A > 36) ?  DIB[29] : 1'by,                                                                                               
        DB1[12]        => (dp32_36_b == 1 || DATA_WIDTH_A > 36) ?  DIB[30] : 1'by,                                                                                               
        DB1[13]        => (dp32_36_b == 1 || DATA_WIDTH_A > 36) ?  DIB[31] : 1'by,                                                                                               
        DB1[14]        => (dp32_36_b == 1 || DATA_WIDTH_A > 36) ?  DIB[32] : 1'by,                                                                                               
        DB1[15]        => (dp32_36_b == 1 || DATA_WIDTH_A > 36) ?  DIB[33] : 1'by,                                                                                               
        DB1[16]        => (dp32_36_b == 1 || DATA_WIDTH_A > 36) ?  DIB[34] : 1'by,                                                                                               
        DB1[17]        => ((dp32_36_b == 1 && DATA_WIDTH_B % 9 == 0) || DATA_WIDTH_A == 72) ? DIB[35] : 1'by,

        WEB[0]      => WEB,
        CEB[0]      => CEB,
        BEB0        => sdp_32_36_a == 1 ? BWEA[3:2] : 
                       DATA_WIDTH_A >= 64 ? BWEA[5:4] : (DATA_WIDTH >= 16) ? BWEB[1:0] : 2'byy,
        BEB1        => (DATA_WIDTH_A >= 64) ? BWEA[7:6] : dp32_36_b == 1 ? BWEB[3:2] : 2'byy,
        OCEB[0]     => ORCEB,
        RSTB[0]     => RSTB,
        CSB         => CSB,  

        //QA0         => DOA[17:0],
        //QA1         => DOA[35:18],
        //QB0         => DOB[17:0],
        //QB1         => DOB[35:18],                          

        QA0[0]         => sdp_32_36_b == 1 ? DOB[0] : (IS_SDP == "FALSE" || DATA_WIDTH_B >= 64) ?  DOA[0] : nt_by_qa0[0],
        QA0[1]         => sdp_32_36_b == 1 ? DOB[1] : (IS_SDP == "FALSE" && DATA_WIDTH_A > 1 || DATA_WIDTH_B >= 64) ?  DOA[1] : nt_by_qa0[1],
        QA0[2]         => sdp_32_36_b == 1 ? DOB[2] : (IS_SDP == "FALSE" && DATA_WIDTH_A > 2 || DATA_WIDTH_B >= 64) ?  DOA[2] : nt_by_qa0[2],
        QA0[3]         => sdp_32_36_b == 1 ? DOB[3] : (IS_SDP == "FALSE" && DATA_WIDTH_A > 2 || DATA_WIDTH_B >= 64) ?  DOA[3] : nt_by_qa0[3],
        QA0[4]         => sdp_32_36_b == 1 ? DOB[4] : (IS_SDP == "FALSE" && DATA_WIDTH_A > 4 || DATA_WIDTH_B >= 64) ?  DOA[4] : nt_by_qa0[4],
        QA0[5]         => sdp_32_36_b == 1 ? DOB[5] : (IS_SDP == "FALSE" && DATA_WIDTH_A > 4 || DATA_WIDTH_B >= 64) ?  DOA[5] : nt_by_qa0[5],
        QA0[6]         => sdp_32_36_b == 1 ? DOB[6] : (IS_SDP == "FALSE" && DATA_WIDTH_A > 4 || DATA_WIDTH_B >= 64) ?  DOA[6] : nt_by_qa0[6],
        QA0[7]         => sdp_32_36_b == 1 ? DOB[7] : (IS_SDP == "FALSE" && DATA_WIDTH_A > 4 || DATA_WIDTH_B >= 64) ?  DOA[7] : nt_by_qa0[7],
        QA0[8]         => (sdp_32_36_b == 1 && DATA_WIDTH_B == 36) ? DOB[8] :
                          (IS_SDP == "FALSE" && DATA_WIDTH_A % 9 == 0 || DATA_WIDTH_B == 72) ? DOA[8] : nt_by_qa0[8],
        QA0[9]          => sdp_32_36_b == 1 ? DOB[9] :  (IS_SDP == "FALSE" && DATA_WIDTH_A > 9 || DATA_WIDTH_B >= 64) ?  DOA[9]  : nt_by_qa0[9],
        QA0[10]         => sdp_32_36_b == 1 ? DOB[10] : (IS_SDP == "FALSE" && DATA_WIDTH_A > 9 || DATA_WIDTH_B >= 64) ?  DOA[10] : nt_by_qa0[10],
        QA0[11]         => sdp_32_36_b == 1 ? DOB[11] : (IS_SDP == "FALSE" && DATA_WIDTH_A > 9 || DATA_WIDTH_B >= 64) ?  DOA[11] : nt_by_qa0[11],
        QA0[12]         => sdp_32_36_b == 1 ? DOB[12] : (IS_SDP == "FALSE" && DATA_WIDTH_A > 9 || DATA_WIDTH_B >= 64) ?  DOA[12] : nt_by_qa0[12],
        QA0[13]         => sdp_32_36_b == 1 ? DOB[13] : (IS_SDP == "FALSE" && DATA_WIDTH_A > 9 || DATA_WIDTH_B >= 64) ?  DOA[13] : nt_by_qa0[13],
        QA0[14]         => sdp_32_36_b == 1 ? DOB[14] : (IS_SDP == "FALSE" && DATA_WIDTH_A > 9 || DATA_WIDTH_B >= 64) ?  DOA[14] : nt_by_qa0[14],
        QA0[15]         => sdp_32_36_b == 1 ? DOB[15] : (IS_SDP == "FALSE" && DATA_WIDTH_A > 9 || DATA_WIDTH_B >= 64) ?  DOA[15] : nt_by_qa0[15],
        QA0[16]         => sdp_32_36_b == 1 ? DOB[16] : (IS_SDP == "FALSE" && DATA_WIDTH_A > 9 || DATA_WIDTH_B >= 64) ?  DOA[16] : nt_by_qa0[16],
        QA0[17]        => (sdp_32_36_b == 1 && DATA_WIDTH_B == 36) ? DOB[17] :
                          (IS_SDP == "FALSE" && DATA_WIDTH_A % 9 == 0 || DATA_WIDTH_B == 72) ? DOA[17] : nt_by_qa0[17], 
                         
        QA1[0]         => (dp32_36_a == 1 || DATA_WIDTH_B > 36) ? DOA[18] : nt_by_qa1[0],                         
        QA1[1]         => (dp32_36_a == 1 || DATA_WIDTH_B > 36) ? DOA[19] : nt_by_qa1[1],                         
        QA1[2]         => (dp32_36_a == 1 || DATA_WIDTH_B > 36) ? DOA[20] : nt_by_qa1[2],                         
        QA1[3]         => (dp32_36_a == 1 || DATA_WIDTH_B > 36) ? DOA[21] : nt_by_qa1[3],                         
        QA1[4]         => (dp32_36_a == 1 || DATA_WIDTH_B > 36) ? DOA[22] : nt_by_qa1[4],                         
        QA1[5]         => (dp32_36_a == 1 || DATA_WIDTH_B > 36) ? DOA[23] : nt_by_qa1[5],                         
        QA1[6]         => (dp32_36_a == 1 || DATA_WIDTH_B > 36) ? DOA[24] : nt_by_qa1[6],                         
        QA1[7]         => (dp32_36_a == 1 || DATA_WIDTH_B > 36) ? DOA[25] : nt_by_qa1[7],                         
        QA1[8]         => ((dp32_36_a == 1 || DATA_WIDTH_B > 36) && DATA_WIDTH_A % 9 == 0) ? DOA[26] : nt_by_qa1[8],
        QA1[9]         => (dp32_36_a == 1 || DATA_WIDTH_B > 36) ? DOA[27] : nt_by_qa1[9],                         
        QA1[10]        => (dp32_36_a == 1 || DATA_WIDTH_B > 36) ? DOA[28] : nt_by_qa1[10],                         
        QA1[11]        => (dp32_36_a == 1 || DATA_WIDTH_B > 36) ? DOA[29] : nt_by_qa1[11],                         
        QA1[12]        => (dp32_36_a == 1 || DATA_WIDTH_B > 36) ? DOA[30] : nt_by_qa1[12],                         
        QA1[13]        => (dp32_36_a == 1 || DATA_WIDTH_B > 36) ? DOA[31] : nt_by_qa1[13],                         
        QA1[14]        => (dp32_36_a == 1 || DATA_WIDTH_B > 36) ? DOA[32] : nt_by_qa1[14],                         
        QA1[15]        => (dp32_36_a == 1 || DATA_WIDTH_B > 36) ? DOA[33] : nt_by_qa1[15],                         
        QA1[16]        => (dp32_36_a == 1 || DATA_WIDTH_B > 36) ? DOA[34] : nt_by_qa1[16],                         
        QA1[17]        => ((dp32_36_a == 1 || DATA_WIDTH_B > 36) && DATA_WIDTH_A % 9 == 0) ? DOA[35] : nt_by_qa1[17],

        QB0[0]         => sdp_32_36_b == 1 ? DOB[18] : DOB[0],        
        QB0[1]         => sdp_32_36_b == 1 ? DOB[19] : (DATA_WIDTH_B < 2) ?  nt_by_qb0[1] : DOB[1],                           
        QB0[2]         => sdp_32_36_b == 1 ? DOB[20] : (DATA_WIDTH_B < 4) ?  nt_by_qb0[2] : DOB[2],                           
        QB0[3]         => sdp_32_36_b == 1 ? DOB[21] : (DATA_WIDTH_B < 4) ?  nt_by_qb0[3] : DOB[3],                           
        QB0[4]         => sdp_32_36_b == 1 ? DOB[22] : (DATA_WIDTH_B < 8) ?  nt_by_qb0[4] : DOB[4],                           
        QB0[5]         => sdp_32_36_b == 1 ? DOB[23] : (DATA_WIDTH_B < 8) ?  nt_by_qb0[5] : DOB[5],                           
        QB0[6]         => sdp_32_36_b == 1 ? DOB[24] : (DATA_WIDTH_B < 8) ?  nt_by_qb0[6] : DOB[6],                           
        QB0[7]         => sdp_32_36_b == 1 ? DOB[25] : (DATA_WIDTH_B < 8) ?  nt_by_qb0[7] : DOB[7],                           
        QB0[8]         => ((drm_mode == "SDP") && DATA_WIDTH_B == 36) ? DOB[26] : (DATA_WIDTH_B % 9 == 0) ? DOB[8] : nt_by_qb0[8],                      
        QB0[9]         => sdp_32_36_b == 1 ? DOB[27] : (DATA_WIDTH_B < 16) ?  nt_by_qb0[9]  : DOB[9] ,                          
        QB0[10]        => sdp_32_36_b == 1 ? DOB[28] : (DATA_WIDTH_B < 16) ?  nt_by_qb0[10] : DOB[10],                          
        QB0[11]        => sdp_32_36_b == 1 ? DOB[29] : (DATA_WIDTH_B < 16) ?  nt_by_qb0[11] : DOB[11],                          
        QB0[12]        => sdp_32_36_b == 1 ? DOB[30] : (DATA_WIDTH_B < 16) ?  nt_by_qb0[12] : DOB[12],                          
        QB0[13]        => sdp_32_36_b == 1 ? DOB[31] : (DATA_WIDTH_B < 16) ?  nt_by_qb0[13] : DOB[13],                          
        QB0[14]        => sdp_32_36_b == 1 ? DOB[32] : (DATA_WIDTH_B < 16) ?  nt_by_qb0[14] : DOB[14],                          
        QB0[15]        => sdp_32_36_b == 1 ? DOB[33] : (DATA_WIDTH_B < 16) ?  nt_by_qb0[15] : DOB[15],                          
        QB0[16]        => sdp_32_36_b == 1 ? DOB[34] : (DATA_WIDTH_B < 16) ?  nt_by_qb0[16] : DOB[16],                          
        QB0[17]        => ((drm_mode == "SDP") && DATA_WIDTH_B == 36) ? DOB[35] : (DATA_WIDTH_B % 9 == 0) ? DOB[17] : nt_by_qb0[17],

        QB1[0]         => (dp32_36_b == 1 || DATA_WIDTH_B > 36) ? DOB[18] : nt_by_qb1[0],                         
        QB1[1]         => (dp32_36_b == 1 || DATA_WIDTH_B > 36) ? DOB[19] : nt_by_qb1[1],                         
        QB1[2]         => (dp32_36_b == 1 || DATA_WIDTH_B > 36) ? DOB[20] : nt_by_qb1[2],                         
        QB1[3]         => (dp32_36_b == 1 || DATA_WIDTH_B > 36) ? DOB[21] : nt_by_qb1[3],                         
        QB1[4]         => (dp32_36_b == 1 || DATA_WIDTH_B > 36) ? DOB[22] : nt_by_qb1[4],                         
        QB1[5]         => (dp32_36_b == 1 || DATA_WIDTH_B > 36) ? DOB[23] : nt_by_qb1[5],                         
        QB1[6]         => (dp32_36_b == 1 || DATA_WIDTH_B > 36) ? DOB[24] : nt_by_qb1[6],                         
        QB1[7]         => (dp32_36_b == 1 || DATA_WIDTH_B > 36) ? DOB[25] : nt_by_qb1[7],                         
        QB1[8]         => ((dp32_36_b == 1 || DATA_WIDTH_B > 36) && DATA_WIDTH_B % 9 == 0) ? DOB[26] : nt_by_qb1[8],
        QB1[9]         => (dp32_36_b == 1 || DATA_WIDTH_B > 36) ? DOB[27] : nt_by_qb1[9],                         
        QB1[10]        => (dp32_36_b == 1 || DATA_WIDTH_B > 36) ? DOB[28] : nt_by_qb1[10],                         
        QB1[11]        => (dp32_36_b == 1 || DATA_WIDTH_B > 36) ? DOB[29] : nt_by_qb1[11],                         
        QB1[12]        => (dp32_36_b == 1 || DATA_WIDTH_B > 36) ? DOB[30] : nt_by_qb1[12],                         
        QB1[13]        => (dp32_36_b == 1 || DATA_WIDTH_B > 36) ? DOB[31] : nt_by_qb1[13],                         
        QB1[14]        => (dp32_36_b == 1 || DATA_WIDTH_B > 36) ? DOB[32] : nt_by_qb1[14],                         
        QB1[15]        => (dp32_36_b == 1 || DATA_WIDTH_B > 36) ? DOB[33] : nt_by_qb1[15],                         
        QB1[16]        => (dp32_36_b == 1 || DATA_WIDTH_B > 36) ? DOB[34] : nt_by_qb1[16],                         
        QB1[17]        => ((dp32_36_b == 1 || DATA_WIDTH_B > 36) && DATA_WIDTH_B % 9 == 0) ? DOB[35] : nt_by_qb1[17],

        ECC_SBITERR  => ECC_SBITERR,
        ECC_DBITERR  => ECC_DBITERR,
        ECC_RDADDR  => ECC_RDADDR,
        ECC_PARITY  => ECC_PARITY,
        ECC_INJ_SBITERR  => INJECT_SBITERR,
        ECC_INJ_DBITERR  => INJECT_DBITERR,    
        X1CASQO_A   => COUTA,
        X1CASQO_B   => COUTB,
        X1CASQI_A   => CINA,
        X1CASQI_B   => CINB
    );
};

