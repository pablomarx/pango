*****************************************************************

  Device    [devIOL]

  Author    []

  Abstract  []

  Revision History:

********************************************************************************/
gate
device devIOL : device IOLHR
{
    parameter
    (
        config string CP_DYN_CLKDIVPOL = "FALSE",
        config string CP_OVERSAMPLE_EN = "FALSE",
        config string CP_DYN_CLKPOL = "FALSE",
        config string CP_IHSMEM_EN = "FALSE",
        config string CP_OCLKBPOL = "FALSE",
        config string CP_OCLKPOL = "FALSE",
        config string CP_CLK_POL0 = "FALSE",
        config string CP_CLK_POL1 = "FALSE",
        config string CP_CLK_POL2 = "FALSE",
        config string CP_CLK_POL3 = "FALSE",
        config string CP_LSMEM_EN = "FALSE",
        config string CP_OPPOSITE_EN = "FALSE",
        config string CP_CLK_POL4 = "FALSE",
        config string CP_CLK_POL5 = "FALSE",
        config string CP_CLK_POL6 = "FALSE",
        config string CP_IDLY_EN = "FALSE",
        config bit CP_IDLY_SET[7:0] = 8'b00000000,
        config string CP_IDYN_EN = "FALSE",
        config string CP_ZHOLD_EN = "FALSE",
        config bit CP_ZHOLD_SET[3:0] = 4'b0000,
        config string CP_ODLY_EN = "FALSE",
        config bit CP_ODLY_SET[7:0] = 8'b00000000,
        config string CP_ODYN_EN = "FALSE",
        config bit CP_GRS_DIS = 1'b0,
        config string CP_D_POL0 = "FALSE",
        config string CP_D_POL1 = "FALSE",
        config bit CP_D_SEL0 = 1'b0,
        config bit CP_D_SEL1 = 1'b0,
        config bit CP_D_SEL2 = 1'b0,
        config bit CP_D_SEL3 = 1'b0,
        config bit CP_D_SEL4[1:0] = 2'b00,
        config bit CP_D_SEL5[1:0] = 2'b00,
        config bit CP_D_SEL6[1:0] = 2'b00,
        config string CP_TEST_EN0 = "FALSE",
        config string CP_TEST_EN1 = "FALSE",
        config string CP_MIPI_EN = "FALSE",
        config string CP_DDRI_EN = "FALSE",
        config string CP_DES_DDREN = "FALSE",
        config string CP_DES_SDREN = "FALSE",
        config string CP_ISERDES_MODE = "SDR1TO2",
        config string CP_SAMEPIPELINE_EN = "FALSE",
        config string CP_ISAME_EN = "FALSE",
        config string CP_IOPPOSITE_EN = "FALSE",
        config string CP_IDFFEN = "FALSE",
        config string CP_ILTHEN = "FALSE",
        config string CP_MASTER = "MASTER",
        config string CP_NETWORKING_EN = "FALSE",
        config string CP_BITSLIP_EN = "FALSE",
        config string CP_ISR_POL = "FALSE",
        config string CP_ISR_SYNC = "ASYNC",
        config string CP_ISR_EN = "FALSE",
        config bit CP_NUM_ICE = 1'b0,
        config string CP_IFIFO_EN = "FALSE",
        config bit CP_INIT_Q0 = 1'b0,
        config bit CP_INIT_Q1 = 1'b0,
        config bit CP_INIT_Q2 = 1'b0,
        config bit CP_INIT_Q3 = 1'b0,
        config string CP_SRVAL_Q0 = "RESET",
        config string CP_SRVAL_Q1 = "RESET",
        config string CP_SRVAL_Q2 = "RESET",
        config string CP_SRVAL_Q3 = "RESET",
        config string CP_OSR_POL = "FALSE",
        config string CP_O_SYNC = "ASYNC",
        config string CP_SRO_EN = "FALSE",
        config bit CP_INIT_DQ = 1'b0,
        config string CP_SRVAL_DQ0 = "RESET",
        config string CP_SRVAL_DQ1 = "RESET",
        config string CP_SRVAL_DQ2 = "RESET",
        config string CP_SRVAL_DQ3 = "RESET",
        config string CP_PDIFF = "FALSE",
        config string CP_OSERDES_EN = "FALSE",
        config string CP_OSERDES_MODE = "SDR2TO1",
        config string CP_SER_SDREN = "FALSE",
        config string CP_SER_DDREN = "FALSE",
        config string CP_OHSMEM_EN = "FALSE",
        config string CP_ODFFEN = "FALSE",
        config string CP_OLTHEN = "FALSE",
        config string CP_OCASCADE_EN = "FALSE",
        config bit CP_DO_SEL = 1'b0,
        config string CP_UPD0_SHIFTEN = "FALSE",
        config string CP_UPD1_SHIFTEN = "FALSE",
        config bit CP_DQMODE[1:0] = 2'b00,
        config bit CP_INIT_SET[1:0] = 2'b00,
        config string CP_T_SYNC = "ASYNC",
        config string CP_SRT_EN = "FALSE",
        config bit CP_INIT_TQ = 1'b0,
        config string CP_SRVAL_TQ0 = "RESET",
        config string CP_SRVAL_TQ1 = "RESET",
        config string CP_SRVAL_TQ2 = "RESET",
        config string CP_SRVAL_TQ3 = "RESET",
        config string CP_TBYTE_EN = "FALSE",
        config string CP_TRI_EN = "FALSE",
        config bit CP_TQMODE[1:0] = 2'b00
    );
    port
    (

        input IFIFO_WADDR[2:0] = 3'b111,
        input IFIFO_RADDR[2:0] = 3'b111,
        input TX_DATA[7:0] = 8'b1111_1111,
        input TS_CTRL[1:0] = 2'b11,
        input IDLY_DYN_SET[7:0] = 8'b1111_1111,
        input ODLY_DYN_SET[7:0] = 8'b1111_1111,
        input DI = 1'b1,
        input DI_N = 1'b1,
        input DI_MIPI = 1'b1,
        input DI_FROM_SRB = 1'b1,
        input ISHIFTIN0 = 1'b1,
        input ISHIFTIN1 = 1'b1,
        input BITSLIP = 1'b1,
        input ISR_IOLHR = 1'b1,
        input ICE0 = 1'b1,
        input ICE1 = 1'b1,
        input DYN_CLKPOL = 1'b1,
        input DYN_CLKDIVPOL = 1'b1,
        input ICLK = 1'b1,
        input ICLKB = 1'b1,
        input DESCLK = 1'b1,
        input SERCLK = 1'b1,
        input SERCLKB = 1'b1,
        input OCLK = 1'b1,
        input OCLKB = 1'b1,
        input ICLKDIV = 1'b1,
        input OCLKDIV = 1'b1,
        input OCLKDIVB = 1'b1,
        //input GRS_N = 1'b1,
        input OSHIFTIN0 = 1'b1,
        input OSHIFTIN1 = 1'b1,
        input OSR_IOLHR = 1'b1,
        input OCE = 1'b1,
        input UPD0_SHIFT = 1'b1,
        input UPD1_SHIFT = 1'b1,
        input DO_CAS_IN = 1'b1,
        input INBUF_DYN_DIS_N_I = 1'b1,
        input MIPI_SW_DYN_I = 1'b1,
        input TCE = 1'b1,
        input TERM_BYTEIN = 1'b1,
        input T_BYTEIN = 1'b1,
        input TO_CAS_IN = 1'b1,
        input TERM_CAS_IN = 1'b1,
        input IDLY_SEL = 1'b1,
        input ODLY_SEL = 1'b1,
        output RX_DATA[7:0],
        output ISHIFTOUT0,
        output ISHIFTOUT1,
        output DI_TO_CLK,
        output DI_TO_CLKB,
  logic output ZHOLD_TO_DDR,       //   mask out from D_DLY Of ZHOLD, here cannot mask inv out from D_DLY of ZHOLD.
  logic output ZHOLDB_TO_DDR,      //   mask inv out from D_DLY Of ZHOLD, here cannot mask out from D_DLY of ZHOLD.
  logic output IDLY_TO_DDR,        // 
  logic output DI_TO_DDR,          //   mask signal drive to ZHOLD.
        output RSTN_OUT,
        output MIPI_SW_DYN_O,
        output INBUF_DYN_DIS_N_O,
        output DO_P,
        output DO_N,
        output OSHIFTOUT0,
        output OSHIFTOUT1,
        output OFB,
        output DO_CAS_OUT,
        output TERM,
        output TERM_CAS_OUT,
        output TO_CAS_OUT,
 logic  output MIPI_OUT
    );
};
//grid device end

//grid device structure netlist started
structure netlist of devIOL
{
    wire       ntDI_O0;
    wire       ntDI_O1;
    wire       ntDI_O2;
    wire       ntZHOLD_O0;
    wire       ntZHOLD_O1;
    wire       ntM0_REG;
    wire       ntM1_REG;
    wire       ntM2_REG;
    wire       ntM3_REG;
    wire       ntM0;
    wire       ntM1;
    wire       ntM2;

    wire       ntDLY_ZHOLD;
    wire       ntDLY_ODLY;
//    wire       DI_TO_GEAR;

    wire       ntCLK_STG0;
    wire       ntCLKB_STG0;
    wire       ntHSMEM_CLK;
    wire       ntHSMEM_CLKB;
    wire       ntCLK_STG1_0;
    wire       ntCLK_STG1_1;
    wire       ntCLK_STG1_2;
    wire       ntCLK_STG2_0;
    wire       ntCLK_STG2_1;
    wire       ntCLK_STG3;
    wire       ntCLK_FOR_BS;
    wire       ntCLK_STG4;
    wire       ntCLK_STG5;
    wire       ntCLK_STG6_0;
    wire       ntCLK_STG6_1;
    wire       ntCLK_STG6_2;
    wire       ntISR;
    wire       ntOSR;
    wire       ntTO;
    wire       ntQ_SHF0; 
    wire       ntQ_SHF1;
    wire       ntDO_DDR;
    wire       ntDO_SDR;
    wire       ntDO_DD;
    wire       ntBSCLK;
    
    wire       ntDLY_IDLY;
    // for inter connect net
    wire       ntDO_R;
    wire       ntOFB_REG;
    wire       ntTO_DDR;
    wire       ntTERM_DDR;
    
    // for input port net
    wire       ntINBUF_DYN_DIS_N;
    wire       ntMIPI_SW_DYN;
    wire       ntBITSLIP;
    wire       ntISHIFTIN0;
    wire       ntISHIFTIN1;

//    wire       ntGRS_N;
    wire       ntISR_IOLHR;

    wire       ntIDLY_SEL    ;

    wire       ntODLY_SEL;

    wire       ntDESCLK;
    wire       ntICLK;
    wire       ntICLKB;
    wire       ntOCLK;
    wire       ntOCLKB;
    wire       ntICLKDIV;
    wire       ntDYN_CLKPOL;
    wire       ntDYN_CLKDIVPOL;
    wire       ntICE0;
    wire       ntICE1;
    wire       ntDO_CAS_IN;
    wire       ntOSR_IOLHR;
    wire       ntTO_CAS_IN;
    wire       ntTERM_BYTEIN;
    wire       ntOCLKDIV    ; 
    wire       ntOCLKDIVB   ; 
    wire       ntSERCLK     ; 
    wire       ntSERCLKB    ; 
    wire       ntDI;
    wire       ntDI_N;
    wire       ntDI_FROM_SRB;
    wire       ntTERM_CAS_IN;
    wire       ntOCE;

    wire       ntUPD0_SHIFT    ;
    wire       ntUPD1_SHIFT    ;
    wire       ntOSHIFTIN0     ;
    wire       ntOSHIFTIN1     ;
    wire       ntDI_MIPI       ;
    wire       ntTBYTE_IN      ;
    wire       ntTCE           ;
    
    
    // for output port
    wire       ntTFB;
    wire       ntTERM_FB;
    wire       ntRSTN_OUT;

    wire       ntISHIFTOUT0  ;   
    wire       ntISHIFTOUT1  ;
    wire       ntOFB         ;
    wire       ntDO_CAS_OUT  ;
    wire       ntDO_OUT;
    wire       ntDO_P  ;
    wire       ntDO_N  ;
    wire       ntTERM_OUT;
    wire       ntTERM;
    wire       ntOSHIFTOUT0  ;
    wire       ntOSHIFTOUT1  ;
    wire       ntTO_OUT      ;
    
    // connect to Logic port.
    DI_TO_DDR       <= ntM2        ;     // 
    ZHOLD_TO_DDR    <= ntDLY_ZHOLD ;     // 
    ZHOLDB_TO_DDR   <= ntZHOLD_O0  ;     // map to logic port of devIOL
    IDLY_TO_DDR     <= ntM2        ;     //   
    
    // connect to input port
    ntINBUF_DYN_DIS_N  <= INBUF_DYN_DIS_N_I;
    ntMIPI_SW_DYN      <= MIPI_SW_DYN_I;
    ntBITSLIP          <= BITSLIP;
    ntISHIFTIN0        <= ISHIFTIN0;
    ntISHIFTIN1        <= ISHIFTIN1; 
   // ntIFIFO_WADDR      <= IFIFO_WADDR;
   // ntIFIFO_RADDR      <= IFIFO_RADDR;
   // ntTS_CTRL          <= TS_CTRL;
//    ntGRS_N            <= GRS_N; 
    ntISR_IOLHR        <= ISR_IOLHR;
    ntTBYTE_IN         <= T_BYTEIN;
    //ntTX_DATA          <= TX_DATA;
    ntTCE              <= TCE    ;
    ntIDLY_SEL         <= IDLY_SEL;
    //ntIDLY_DYN_SET     <= IDLY_DYN_SET;
    ntODLY_SEL         <= ODLY_SEL;
    //ntODLY_DYN_SET     <= ODLY_DYN_SET;
    ntDESCLK           <= DESCLK;
    ntICLK             <= ICLK;
    ntICLKB            <= ICLKB;
    ntOCLK             <= OCLK;
    ntOCLKB            <= OCLKB;
    ntICLKDIV          <= ICLKDIV;
    ntDYN_CLKPOL       <= DYN_CLKPOL;
    ntDYN_CLKDIVPOL    <= DYN_CLKDIVPOL;
    ntICE0             <= ICE0;
    ntICE1             <= ICE1;
    ntDO_CAS_IN        <= DO_CAS_IN;
    ntOSR_IOLHR        <= OSR_IOLHR;
    ntTO_CAS_IN        <= TO_CAS_IN;
    ntTERM_BYTEIN      <= TERM_BYTEIN;
    ntOCLKDIV          <= OCLKDIV  ; 
    ntOCLKDIVB         <= OCLKDIVB ; 
    ntSERCLK           <= SERCLK   ; 
    ntSERCLKB          <= SERCLKB  ; 
    ntDI               <= DI       ;
    ntDI_N             <= DI_N     ;
    ntDI_FROM_SRB      <= DI_FROM_SRB;
    ntTERM_CAS_IN      <= TERM_CAS_IN;
    ntOCE              <= OCE;
    ntUPD0_SHIFT       <= UPD0_SHIFT ;
    ntUPD1_SHIFT       <= UPD1_SHIFT ;
    ntOSHIFTIN0        <= OSHIFTIN0  ;
    ntOSHIFTIN1        <= OSHIFTIN1  ;
    ntDI_MIPI          <= DI_MIPI    ;
     
  
  // connect to output port
    DI_TO_CLKB        <= ntM0 ;
    DI_TO_CLK         <= ntM1 ;
    TO_CAS_OUT        <= ntTFB;
    TERM_CAS_OUT      <= ntTERM_FB;    
    INBUF_DYN_DIS_N_O <= ntINBUF_DYN_DIS_N;
                                        
                                        
    MIPI_SW_DYN_O     <= ntMIPI_SW_DYN;
    RSTN_OUT          <= ntRSTN_OUT ;
    //RX_DATA           <= ntRX_DATA;
    ISHIFTOUT0        <= ntISHIFTOUT0  ;   
    ISHIFTOUT1        <= ntISHIFTOUT1  ;  
    OFB               <= ntOFB    ;
    DO_CAS_OUT        <= ntDO_CAS_OUT;
    DO_P              <= ntDO_P ;
    DO_N              <= ntDO_N;

    TERM              <= ntTERM;
    OSHIFTOUT0        <= ntOSHIFTOUT0   ;  
    OSHIFTOUT1        <= ntOSHIFTOUT1   ;
  
  
  //assign   DI_TO_FABRIC = ntM1;
  //assign   DI_TO_GEAR   = ntM2;
  //assign   DI_TO_IDLY   = ntM3_REG;

  //MUX2
    device MUX2TO1_P DIMUX0
    parameter map
    (
        CP_SEL => CP_D_SEL0
    ) 
    port map    
    (
        DOUT => ntDI_O0      , 
        DIN1 => ntDI         , 
        DIN0 => ntDI_N       
    );
        
    device MUX2TO1 DIMUX1
    parameter map
    (
        CP_POL   => CP_MIPI_EN,
        DIN1_POL => "FALSE"
    ) 
    port map
    (
        DOUT => ntDI_O1     , 
        DIN1 => ntDI_MIPI   , 
        DIN0 => ntDI_O0        
    );
        
    device MUX2TO1_P DIMUX2
    parameter map
    (
        CP_SEL => CP_D_SEL0
    )    
    port map    
    (
        DOUT => ntDI_O2     , 
        DIN1 => ntDI_N      , 
        DIN0 => ntDI     
    );
        
    device MUX2TO1 ZHOLDMUX0
    parameter map
    (
        CP_POL   => CP_D_POL0,
        DIN1_POL => "FALSE"
    )
    port map 
    (
        DOUT => ntZHOLD_O0   , 
        DIN1 => ntDLY_ZHOLD  ,   // input inv of  ntDLY_ZHOLD
        DIN0 => ntDLY_ZHOLD  
    );
        
    device MUX2TO1 ZHOLDMUX1
    parameter map
    (
        CP_POL   => CP_D_POL1,
        DIN1_POL => "TRUE"
    )
    port map 
    (
        DOUT => ntZHOLD_O1   , 
        DIN1 => ntDLY_ZHOLD , // input inv of  ntDLY_ZHOLD
        DIN0 => ntDLY_ZHOLD  
    );
    
    //MUX4
    device MUX4TO1_N M0_REGMUX
    parameter map
    (
        CP_D_SEL   => CP_D_SEL5,
        CP_POL_SEL => 1'b1
    )    
    port map 
    (
        DOUT => ntM0_REG    , 
        DIN3 => ntDI_O1     , 
        DIN2 => ntDLY_IDLY  , 
        DIN1 => ntDI_O0     , 
        DIN0 => ntZHOLD_O0  
    );
        
    device MUX4TO1 M1_REGMUX
    parameter map
    (
        CP_SEL   => CP_D_SEL5
    )    
    port map 
    (
        DOUT  => ntM1_REG    , 
        DIN3  => ntDI_O1     , 
        DIN2  => ntDLY_IDLY  ,  
        DIN1  => ntDI_O2     , 
        DIN0  => ntZHOLD_O0  
    );
        
    device MUX4TO1 M2_REGMUX
    parameter map
    (
        CP_SEL   => CP_D_SEL4
    )      
    port map 
    (
        DOUT => ntM2_REG    , 
        DIN3 => 1'b0      , 
        DIN2 => ntDLY_IDLY  ,  
        DIN1 => ntDI_O2     , 
        DIN0 => ntZHOLD_O1  
    );
        
    device MUX4TO1 M3_REGMUX
    parameter map
    (
        CP_SEL   => CP_D_SEL6
    )    
    port map 
    (
        DOUT => ntM3_REG    , 
        DIN3 => 1'b0        , 
        DIN2 => ntDO_CAS_OUT,
        DIN1 => ntDI_FROM_SRB , 
        DIN0 => ntDI_O2       
    );

    //MUX3
    device MUX3TO1_N M0MUX
    parameter map
    (
        CP_TEST_EN => CP_TEST_EN1,
        CP_D_SEL   => CP_D_SEL1  ,
        CP_POL_SEL => 1'b1
    ) 
    port map
    (
        DOUT => ntM0      , 
        TFB  => ntTFB       , 
        DIN1 => ntDO_CAS_OUT,
        DIN0 => ntM0_REG    
    );
        
    device MUX3TO1 M1MUX
    parameter map
    (
        CP_TEST_EN => CP_TEST_EN1,
        CP_D_SEL   => CP_D_SEL2
    ) 
    port map
    (
        DOUT => ntM1      , 
        TFB  => ntTFB       , 
        DIN1 => ntDO_CAS_OUT,
        DIN0 => ntM1_REG    
    );
        
    device MUX3TO1 M2MUX
    parameter map
    (
        CP_TEST_EN => CP_TEST_EN0,
        CP_D_SEL   => CP_D_SEL3
    ) 
    port map 
    (
        DOUT => ntM2      , 
        TFB  => ntTFB       , 
        DIN1 => ntDO_CAS_OUT,
        DIN0 => ntM2_REG    
    );
  
    device IOLHR_IL_CLKGEN  XIOLHR_IL_CLKGEN
    parameter map
    (    
        CP_DYN_CLKPOL    => CP_DYN_CLKPOL     ,    
        CP_DYN_CLKDIVPOL => CP_DYN_CLKDIVPOL  ,    
        CP_CLK_POL0      => CP_CLK_POL0       ,    
        CP_CLK_POL1      => CP_CLK_POL1       ,    
        CP_CLK_POL2      => CP_CLK_POL2       ,    
        CP_CLK_POL3      => CP_CLK_POL3       ,    
        CP_OCLKPOL       => CP_OCLKPOL        ,
        CP_OCLKBPOL      => CP_OCLKBPOL       ,    
        CP_LSMEM_EN      => CP_LSMEM_EN       ,    
        CP_IHSMEM_EN     => CP_IHSMEM_EN      ,    
        CP_OVERSAMPLE_EN => CP_OVERSAMPLE_EN   
    )
    port map
    (    
        DESCLK        => ntDESCLK        ,    
        ICLK          => ntICLK          ,    
        ICLKB         => ntICLKB         ,    
        BSCLK         => ntBSCLK         ,    
        OCLK          => ntOCLK          ,    
        OCLKB         => ntOCLKB         ,    
        ICLKDIV       => ntICLKDIV       ,    
        DYN_CLKPOL    => ntDYN_CLKPOL    ,    
        DYN_CLKDIVPOL => ntDYN_CLKDIVPOL ,    
        CLK_STG0      => ntCLK_STG0      ,    
        CLKB_STG0     => ntCLKB_STG0     ,    
        HSMEM_CLK     => ntHSMEM_CLK     ,    
        HSMEM_CLKB    => ntHSMEM_CLKB    ,    
        CLK_STG1_0    => ntCLK_STG1_0    ,    
        CLK_STG1_1    => ntCLK_STG1_1    ,    
        CLK_STG1_2    => ntCLK_STG1_2    ,    
        CLK_STG2_0    => ntCLK_STG2_0    ,    
        CLK_STG2_1    => ntCLK_STG2_1    ,    
        CLK_STG3      => ntCLK_STG3      ,    
        CLK_FOR_BS    => ntCLK_FOR_BS        
    );

    device IREG_IDDR XIREG_IDDR
    parameter map
    (    
        CP_ISR_SYNC            => CP_ISR_SYNC,
        CP_ISR_EN              => CP_ISR_EN,
        CP_GRS_DIS             => CP_GRS_DIS,
        CP_IHSMEM_EN           => CP_IHSMEM_EN,
        CP_DDRI_EN             => CP_DDRI_EN,
        CP_NUM_ICE             => CP_NUM_ICE,
        //iolhr_il_gearctrl
        CP_DES_DDREN           => CP_DES_DDREN,
        CP_DES_SDREN           => CP_DES_SDREN,
        CP_ISERDES_MODE        => CP_ISERDES_MODE,
        CP_LSMEM_EN            => CP_LSMEM_EN,
        CP_SAMEPIPELINE_EN     => CP_SAMEPIPELINE_EN,
        CP_ISAME_EN            => CP_ISAME_EN,
        CP_IOPPOSITE_EN        => CP_IOPPOSITE_EN,
        CP_ILTHEN              => CP_ILTHEN,
        CP_IDFFEN              => CP_IDFFEN,
        CP_OVERSAMPLE_EN       => CP_OVERSAMPLE_EN,
        CP_MASTER              => CP_MASTER,
        CP_NETWORKING_EN       => CP_NETWORKING_EN,
        CP_BITSLIP_EN          => CP_BITSLIP_EN,
        //iolhr_il_gear        
        CP_IFIFO_EN            => CP_IFIFO_EN,
        CP_INIT_Q0             => CP_INIT_Q0,
        CP_INIT_Q1             => CP_INIT_Q1,
        CP_INIT_Q2             => CP_INIT_Q2,
        CP_INIT_Q3             => CP_INIT_Q3,
        CP_SRVAL_Q0            => CP_SRVAL_Q0,
        CP_SRVAL_Q1            => CP_SRVAL_Q1,
        CP_SRVAL_Q2            => CP_SRVAL_Q2,
        CP_SRVAL_Q3            => CP_SRVAL_Q3   
    )
    port map    
    (
//        GLOGEN       => GLOGEN      ,    
//        GRS_N        => ntGRS_N       ,    
        SR           => ntISR         ,    
        ICE0         => ntICE0        ,    
        ICE1         => ntICE1        ,    
        CLK_STG0     => ntCLK_STG0    ,    
        CLKB_STG0    => ntCLKB_STG0   ,    
        HSMEM_CLK    => ntHSMEM_CLK   ,    
        HSMEM_CLKB   => ntHSMEM_CLKB  ,    
        BSCLK        => ntBSCLK       ,    
        CLK_STG1_0   => ntCLK_STG1_0  ,    
        CLK_STG1_1   => ntCLK_STG1_1  ,    
        CLK_STG1_2   => ntCLK_STG1_2  ,    
        CLK_STG2_0   => ntCLK_STG2_0  ,    
        CLK_STG2_1   => ntCLK_STG2_1  ,    
        CLK_STG3     => ntCLK_STG3    ,    
        CLK_FOR_BS   => ntCLK_FOR_BS  ,    
        BITSLIP      => ntBITSLIP     ,    
        ISHIFTIN0    => ntISHIFTIN0   ,    
        ISHIFTIN1    => ntISHIFTIN1   ,    
        IFIFO_WADDR  => IFIFO_WADDR ,    
        IFIFO_RADDR  => IFIFO_RADDR ,    
        RSTN_OUT     => ntRSTN_OUT         ,    
        RX_DATA      => RX_DATA     ,    
        ISHIFTOUT0   => ntISHIFTOUT0  ,    
        ISHIFTOUT1   => ntISHIFTOUT1  ,    
        DI_TO_GEAR   => ntM2      
   );

//    assign  TO_SEL = (CP_TRI_EN == "TRUE") && ntTO;
    
    
    //MUX2
    device MUX2TO1_P DO_RMUX
    parameter map
    (
        CP_SEL => CP_DO_SEL
    )
    port map 
    (
        DOUT => ntDO_R    , 
        DIN1 => ntDO_SDR    , 
        DIN0 => ntDO_DDR    
    );
        
    device MUX2TO1 DO_CASMUX
    parameter map
    (
        CP_POL   => CP_ODLY_EN,
        DIN1_POL => "FALSE"
    )
    port map
    (
        DOUT => ntDO_CAS_OUT , 
        DIN1 => ntDLY_ODLY   , 
        DIN0 => ntOFB    
    );
        
    device MUX2TO1 DO_OUTMUX
    parameter map
    (
        CP_POL => CP_PDIFF,
        DIN1_POL => "TRUE"
    ) 
    port map
    (
        DOUT => ntDO_OUT     , 
        DIN1 => ntDO_CAS_IN , // input inv of  DO_CAS_IN 
        DIN0 => ntDO_CAS_OUT 
    );
        
    device MUX2TO1_P1  DO_PMUX
    parameter map
    (
        CP_TRI_EN => CP_TRI_EN
    )
    port map
    (
        DOUT  => ntDO_P   , 
        TO    => ntTO ,         
        DIN1  => 1'b0   , 
        DIN0  => ntDO_OUT 
    );
        
    device MUX2TO1_P1 DO_NMUX
    parameter map
    (
        CP_TRI_EN => CP_TRI_EN
    )
    port map
    (         
        DOUT  => ntDO_N   , 
        TO    => ntTO     ,
        DIN1  => 1'b1   , 
        DIN0  => ntDO_OUT 
    );
        
    device MUX2TO1 OSRMUX
    parameter map
    (
        CP_POL   => CP_OSR_POL,
        DIN1_POL => "TRUE"
    )
    port map 
    (
        DOUT => ntOSR        , 
        DIN1 => ntOSR_IOLHR ,  // input inv of  OSR_IOLHR 
        DIN0 => ntOSR_IOLHR  
    );
        
    device MUX2TO1 ISRMUX
    parameter map
    (
        CP_POL   => CP_ISR_POL,
        DIN1_POL => "TRUE"
    )
    port map 
    (
        DOUT => ntISR        , 
        DIN1 => ntISR_IOLHR , // input inv of  ISR_IOLHR
        DIN0 => ntISR_IOLHR  
    );

    device MUX2TO1 TFBMUX
    parameter map
    (
        CP_POL   => CP_TBYTE_EN,
        DIN1_POL => "FALSE"
    ) 
    port map 
    (
        DOUT  => ntTFB      , 
        DIN1  => ntTBYTE_IN , 
        DIN0  => ntTO_OUT   
    );
        
    device MUX2TO1 TOMUX
    parameter map
    (
        CP_POL   => CP_PDIFF,
        DIN1_POL => "FALSE"
    ) 
    port map 
    (
        DOUT => ntTO        , 
        DIN1 => ntTO_CAS_IN , 
        DIN0 => ntTFB       
    );
      
    device MUX2TO1 TERMMUX
    parameter map
    (
        CP_POL   => CP_PDIFF,
        DIN1_POL => "FALSE"
    ) 
    port map 
    (
        DOUT => ntTERM     , // Fixed ME
        DIN1 => ntTERM_CAS_IN , 
        DIN0 => ntTERM_FB     
    );
        
    device MUX2TO1 TERM_FBMUX 
    parameter map
    (
        CP_POL   => CP_TBYTE_EN,
        DIN1_POL => "FALSE"
    ) 
    port map 
    (
        DOUT => ntTERM_FB        ,    // Fixed ME
        DIN1 => ntTERM_BYTEIN , 
        DIN0 => ntTERM_OUT     
    );
 
    //MUX4
    device MUX4TO1_P OFBMUX
    parameter map
    (
        CP_DQMODE  => CP_DQMODE  , 
        CP_MIPI_EN => CP_MIPI_EN 
    ) 
    port map 
    (
        MIPI_I => ntMIPI_SW_DYN , 
        DOUT   => ntOFB     , 
        DIN3   => 1'b0          , 
        DIN2   => ntDO_R        , 
        DIN1   => ntDO_SDR        , 
        DIN0   => ntDO_DD         
    );
        
    device MUX4TO1  TO_OUTMUX
    parameter map
    (
        CP_SEL  => CP_TQMODE  
    )     
    port map
    (
        DOUT => ntTO_OUT        ,   
        DIN3 => 1'b0          , 
        DIN2 => ntTO_DDR        , 
        DIN1 => ntQ_SHF0      , 
        DIN0 => TS_CTRL[0]    
    );
      
    device MUX4TO1  TERM_OUTMUX
    parameter map
    (
        CP_SEL  => CP_TQMODE  
    )    
    port map
    (
        DOUT => ntTERM_OUT   , 
        DIN3 => 1'b0       , 
        DIN2 => ntTERM_DDR , 
        DIN1 => ntQ_SHF0   , 
        DIN0 => TS_CTRL[0] 
    );
    

    device IOLHR_OL_CLKGEN XIOLHR_OL_CLKGEN
    parameter map
    (    
        CP_CLK_POL4    => CP_CLK_POL4    ,    
        CP_CLK_POL5    => CP_CLK_POL5    ,    
        CP_CLK_POL6    => CP_CLK_POL6    ,    
        CP_OPPOSITE_EN => CP_OPPOSITE_EN 
    )
    port map    
    (    
        OCLKDIV    => ntOCLKDIV    ,    
        OCLKDIVB   => ntOCLKDIVB   ,    
        SERCLK     => ntSERCLK     ,    
        SERCLKB    => ntSERCLKB    ,    
        OCLK       => ntOCLK       ,    
        OCLKB      => ntOCLKB      ,    
        CLK_STG0   => ntCLK_STG4   ,    
        CLK_STG1   => ntCLK_STG5   ,    
        CLK_STG2_0 => ntCLK_STG6_0 ,    
        CLK_STG2_1 => ntCLK_STG6_1 ,    
        CLK_STG2_2 => ntCLK_STG6_2     
    );

    device OREG_ODDR XOREG_ODDR 
    parameter map
    (    
        CP_SRO_EN        => CP_SRO_EN        ,    
        CP_O_SYNC        => CP_O_SYNC        ,    
        CP_GRS_DIS       => CP_GRS_DIS       ,    
        CP_OHSMEM_EN     => CP_OHSMEM_EN     ,    
        //CP_MEMDQ         => CP_MEMDQ         ,    
        CP_OSERDES_EN    => CP_OSERDES_EN    ,    
        CP_SER_DDREN     => CP_SER_DDREN     ,    
        CP_SER_SDREN     => CP_SER_SDREN     ,    
        CP_OLTHEN        => CP_OLTHEN        ,    
        CP_ODFFEN        => CP_ODFFEN        ,    
      //  CP_OUNREGEN      => CP_OUNREGEN      ,    
        CP_OSERDES_MODE  => CP_OSERDES_MODE  ,    
        CP_UPD0_SHIFTEN  => CP_UPD0_SHIFTEN  ,    
        CP_UPD1_SHIFTEN  => CP_UPD1_SHIFTEN  ,    
        CP_INIT_SET      => CP_INIT_SET      ,    
        CP_INIT_DQ       => CP_INIT_DQ       ,    
        CP_SRVAL_DQ0     => CP_SRVAL_DQ0     ,    
        CP_SRVAL_DQ1     => CP_SRVAL_DQ1     ,    
        CP_SRVAL_DQ2     => CP_SRVAL_DQ2     ,    
        CP_SRVAL_DQ3     => CP_SRVAL_DQ3     ,
        CP_OCASCADE_EN   => CP_OCASCADE_EN   ,
        CP_DQMODE        => CP_DQMODE        ,    
        CP_MIPI_EN       => CP_MIPI_EN       
    ) 
    port map    
    (    
        CLK_STG0    => ntCLK_STG4              ,    
        CLK_STG1    => ntCLK_STG5              ,    
        CLK_STG2_0  => ntCLK_STG6_0            ,    
        CLK_STG2_1  => ntCLK_STG6_1            ,    
        CLK_STG2_2  => ntCLK_STG6_2            ,    
        SR          => ntOSR                   ,
//        GWEN        => GWEN                  ,
//        GLOGEN      => GLOGEN                ,    
//        GRS_N       => ntGRS_N                 ,    
        OCE         => ntOCE                   ,    
        UPD0_SHIFT  => ntUPD0_SHIFT            ,    
        UPD1_SHIFT  => ntUPD1_SHIFT            ,    
        OSHIFTIN0   => ntOSHIFTIN0             ,    
        OSHIFTIN1   => ntOSHIFTIN1             ,    
        TX_DATA     => TX_DATA               ,     
        TO          => ntTO                    ,
        OSHIFTOUT0  => ntOSHIFTOUT0            ,    
        OSHIFTOUT1  => ntOSHIFTOUT1            ,    
        DO_DDR      => ntDO_DDR                ,    
        DO_SDR      => ntDO_SDR                ,    
        DO_DD       => ntDO_DD                     
   );


   device TREG_TDDR XTREG_TDDR
   parameter map
   (    
        CP_SRVAL_TQ0 => CP_SRVAL_TQ0  ,    
        CP_SRVAL_TQ1 => CP_SRVAL_TQ1  ,    
        CP_SRVAL_TQ2 => CP_SRVAL_TQ2  ,    
        CP_SRVAL_TQ3 => CP_SRVAL_TQ3  ,    
        CP_INIT_TQ   => CP_INIT_TQ    ,    
        CP_OLTHEN    => CP_OLTHEN     ,    
        CP_SRT_EN    => CP_SRT_EN     ,
         CP_T_SYNC    => CP_T_SYNC    , 
        CP_GRS_DIS   => CP_GRS_DIS    
    )
    port map     
    (    
        TS_CTRL     =>  TS_CTRL ,    
        CLK_STG2_0  =>  ntCLK_STG6_0   ,    
        CLK_STG2_1  =>  ntCLK_STG6_1   ,    
        CLK_STG2_2  =>  ntCLK_STG6_2   ,    
//        GLOGEN      =>  1'b1         ,    
//        GWEN        =>  1'b1         ,    
//        GRS_N       =>  ntGRS_N        ,    
        SR          =>  ntOSR          ,    
        TCE         =>  ntTCE          ,    
        TO_DDR      =>  ntTO_DDR     ,    
        TERM_DDR    =>  ntTERM_DDR   ,    
        Q_SHF       =>  {ntQ_SHF1,ntQ_SHF0}            
     );
    
    device IOLHR_IDLY XIOLHR_IDLY 
    parameter map
    (    
         CP_IDLY_EN   => CP_IDLY_EN   ,    
         CP_IDYN_EN   => CP_IDYN_EN   ,    
         //CP_LDO_CTRL  =>            ,    
         CP_IDLY_SET  => CP_IDLY_SET 
    )
    port map 
    (    
        DI           => ntM3_REG     ,    
        IDLY_SEL     => ntIDLY_SEL     ,    
        IDLY_DYN_SET => IDLY_DYN_SET ,    
        D_DLY        => ntDLY_IDLY         
    );

    device IOLHR_ODLY XIOLHR_ODLY 
    parameter map
    (    
        CP_ODLY_EN   => CP_ODLY_EN  ,    
        //CP_LDO_CTRL  =>             ,    
        CP_ODYN_EN   => CP_ODYN_EN  ,    
        CP_ODLY_SET  => CP_ODLY_SET 
    )
    port map      
    (    
        DI           => ntOFB        ,    
        ODLY_SEL     => ntODLY_SEL     ,    
        ODLY_DYN_SET => ODLY_DYN_SET ,    
        D_DLY        => ntDLY_ODLY         
    );

    device IOLHR_ZHOLD XIOLHR_ZHOLD
    parameter map
    (    
        CP_ZHOLD_EN  => CP_ZHOLD_EN  ,    
        CP_ZHOLD_SET => CP_ZHOLD_SET 
    ) 
    port map  
    (    
        DI    => ntDI_O2     ,    
        D_DLY => ntDLY_ZHOLD       
    ); 
    
};
