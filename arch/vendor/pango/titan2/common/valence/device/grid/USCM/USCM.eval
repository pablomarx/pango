tarted
grid
device USCM
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config string CP_EDGE = "NEGEDGE",
        config string CP_INIT_SEL = "CLK0",
        config string CP_SEL_INV = "DISABLE",
        config string CP_EN_INV = "DISABLE",
        config string CP_DIS0_INV = "DISABLE",
        config string CP_DIS1_INV = "DISABLE",
        config string CP_MODE = "CLKBUFG",
        config string CP_GLITCH = "ENABLE",
        config string CP_CK0_INV = "DISABLE",
        config string CP_CK1_INV = "DISABLE"
    );
    port
    (
// configuration_body_def_on


    config input SC_EDGE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_EDGE" */,

    config input SC_INIT_SEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_INIT_SEL" */,

    config input SC_SEL_INV = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SEL_INV" */,

    config input SC_EN_INV = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_EN_INV" */,

    config input SC_DIS0_INV = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DIS0_INV" */,

    config input SC_DIS1_INV = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DIS1_INV" */,

    config input SC_MODE[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MODE[1],SC_MODE[0]" */,

    config input SC_GLITCH = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GLITCH" */,

    config input SC_CK0_INV = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CK0_INV" */,

    config input SC_CK1_INV = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CK1_INV" */,

// configuration_body_def_end

        input CLKIN0 = 1'b1,
        input CLKIN1 = 1'b1,
        input EN_CLK = 1'b1,
        input SEL_CLK = 1'b1,
        input DIS_CLK0 = 1'b1,
        input DIS_CLK1 = 1'b1,
        output CLKOUT
    );
};
//grid device end

//grid device structure netlist started
structure netlist of USCM
{
};
//grid device structure netlist end
//grid device configure body started

configuration cfg of USCM
{

//initial config body0 begin
    if(CP_EDGE == "NEGEDGE")
    {
        SC_EDGE  :=  1'b0;
    }
    else if(CP_EDGE == "POSEDGE")
    {
        SC_EDGE  :=  1'b1;
    }
    else
    {
        SC_EDGE  :=  1'bx;
        error("illegal setting for CP_EDGE  :=  %s",CP_EDGE);
    }

//initial config body0 end


//initial config body1 begin
    if(CP_INIT_SEL == "CLK0")
    {
        SC_INIT_SEL  :=  1'b0;
    }
    else if(CP_INIT_SEL == "CLK1")
    {
        SC_INIT_SEL  :=  1'b1;
    }
    else
    {
        SC_INIT_SEL  :=  1'bx;
        error("illegal setting for CP_INIT_SEL  :=  %s",CP_INIT_SEL);
    }

//initial config body1 end


//initial config body2 begin
    if(CP_SEL_INV == "DISABLE")
    {
        SC_SEL_INV  :=  1'b0;
    }
    else if(CP_SEL_INV == "ENABLE")
    {
        SC_SEL_INV  :=  1'b1;
    }
    else
    {
        SC_SEL_INV  :=  1'bx;
        error("illegal setting for CP_SEL_INV  :=  %s",CP_SEL_INV);
    }

//initial config body2 end


//initial config body3 begin
    if(CP_EN_INV == "DISABLE")
    {
        SC_EN_INV  :=  1'b0;
    }
    else if(CP_EN_INV == "ENABLE")
    {
        SC_EN_INV  :=  1'b1;
    }
    else
    {
        SC_EN_INV  :=  1'bx;
        error("illegal setting for CP_EN_INV  :=  %s",CP_EN_INV);
    }

//initial config body3 end


//initial config body4 begin
    if(CP_DIS0_INV == "DISABLE")
    {
        SC_DIS0_INV  :=  1'b0;
    }
    else if(CP_DIS0_INV == "ENABLE")
    {
        SC_DIS0_INV  :=  1'b1;
    }
    else
    {
        SC_DIS0_INV  :=  1'bx;
        error("illegal setting for CP_DIS0_INV  :=  %s",CP_DIS0_INV);
    }

//initial config body4 end


//initial config body5 begin
    if(CP_DIS1_INV == "DISABLE")
    {
        SC_DIS1_INV  :=  1'b0;
    }
    else if(CP_DIS1_INV == "ENABLE")
    {
        SC_DIS1_INV  :=  1'b1;
    }
    else
    {
        SC_DIS1_INV  :=  1'bx;
        error("illegal setting for CP_DIS1_INV  :=  %s",CP_DIS1_INV);
    }

//initial config body5 end


//initial config body6 begin
    if(CP_MODE == "CLKBUFG")
    {
        SC_MODE  :=  2'b00;
    }
    else if(CP_MODE == "CLKBUFGMUX_E1")
    {
        SC_MODE  :=  2'b10;
    }
    else if(CP_MODE == "CLKBUFGMUX_E2")
    {
        SC_MODE  :=  2'b01;
    }
    else if(CP_MODE == "CLKBUFGCE")
    {
        SC_MODE  :=  2'b11;
    }
    else
    {
        SC_MODE  :=  2'bxx;
        error("illegal setting for CP_MODE  :=  %s",CP_MODE);
    }

//initial config body6 end


//initial config body7 begin
    if(CP_GLITCH == "DISABLE")
    {
        SC_GLITCH  :=  1'b1;
    }
    else if(CP_GLITCH == "ENABLE")
    {
        SC_GLITCH  :=  1'b0;
    }
    else
    {
        SC_GLITCH  :=  1'bx;
        error("illegal setting for CP_GLITCH  :=  %s",CP_GLITCH);
    }

//initial config body7 end


//initial config body8 begin
    if(CP_CK0_INV == "DISABLE")
    {
        SC_CK0_INV  :=  1'b0;
    }
    else if(CP_CK0_INV == "ENABLE")
    {
        SC_CK0_INV  :=  1'b1;
    }
    else
    {
        SC_CK0_INV  :=  1'bx;
        error("illegal setting for CP_CK0_INV  :=  %s",CP_CK0_INV);
    }

//initial config body8 end


//initial config body9 begin
    if(CP_CK1_INV == "DISABLE")
    {
        SC_CK1_INV  :=  1'b0;
    }
    else if(CP_CK1_INV == "ENABLE")
    {
        SC_CK1_INV  :=  1'b1;
    }
    else
    {
        SC_CK1_INV  :=  1'bx;
        error("illegal setting for CP_CK1_INV  :=  %s",CP_CK1_INV);
    }

//initial config body9 end

};

//grid device configure body end


timing uscm_tnl of USCM
{
    wire sel_clk, en_clk, dis_clk0, dis_clk1, clkin0, clkin1;
    string enPol[5:0] = {CP_SEL_INV, CP_EN_INV, CP_DIS0_INV, CP_DIS1_INV, CP_CK0_INV, CP_CK1_INV};
    &wire  ntPol[5:0] = {sel_clk, en_clk, dis_clk0, dis_clk1, clkin0, clkin1};
    &port  ptPol[5:0] = {SEL_CLK, EN_CLK, DIS_CLK0, DIS_CLK1, CLKIN0, CLKIN1};
    string nmPol[5:0] = {"SEL_CLK_INV", "EN_CLK_INV", "DIS_CLK0_INV", "DIS_CLK1_INV", "CLKIN0_INV", "CLKIN1_INV"};

    int i;
    for (i = 0; i < 6; i += 1)
    {
        if (enPol[i] == "ENABLE")
        {
            string strVar = nmPol[i];
            operator V_INV *strVar
            port map
            (
                I => ptPol[i],
                Z => ntPol[i]
            );
        }
    }

    if (CP_MODE == "CLKBUFG")
    {
        operator V_USCM CLKBUFG
        parameter map
        (
            USCM_MODE => "BUF_A",
            SIM_DEVICE => "TITAN2"
        )
        port map
        (
            CLK0   => (CP_CK0_INV == "DISABLE") ? CLKIN0 : clkin0,
            CLKOUT =>  CLKOUT
        );
    }
    else if (CP_MODE == "CLKBUFGCE" /* && CP_GLITCH == "ENABLE"*/)
    {
        operator V_USCM CLKBUFGCE
        parameter map
        (
            USCM_MODE => (CP_EDGE == "NEGEDGE") ? "BUFCE_A_0" :
                         (CP_EDGE == "POSEDGE") ? "BUFCE_A_1" : "",
            SIM_DEVICE => "TITAN2"
        )
        port map
        (
            CLK0   => (CP_CK0_INV == "DISABLE") ? CLKIN0 : clkin0,
            SEL    => (CP_EN_INV  == "DISABLE") ? EN_CLK : en_clk,
            CLKOUT =>  CLKOUT
        );
    }
    else if (CP_MODE == "CLKBUFGMUX_E1"  && CP_GLITCH == "ENABLE")
    {
        operator V_CLKBUFGMUX_E1 CLKBUFGMUX
        parameter map
        (
            TRIGGER_MODE => CP_EDGE,
            INIT_SEL => CP_INIT_SEL
        )
        port map
        (
            CLKIN0 => (CP_CK0_INV == "DISABLE") ? CLKIN0 : clkin0,
            CLKIN1 => (CP_CK1_INV == "DISABLE") ? CLKIN1 : clkin1,
            SEL    => (CP_SEL_INV == "DISABLE") ? SEL_CLK : sel_clk,
            EN     => (CP_EN_INV  == "DISABLE") ? EN_CLK  : en_clk,
            CLKOUT => CLKOUT
        );
    }
    else if (CP_MODE == "CLKBUFGMUX_E2" && CP_GLITCH == "ENABLE" )
    {
        operator V_CLKBUFGMUX_E2 CLKBUFGMUX
        parameter map
        (
            TRIGGER_MODE => CP_EDGE,
            INIT_SEL => CP_INIT_SEL
        )
        port map
        (
            CLKIN0      => (CP_CK0_INV == "DISABLE") ? CLKIN0 : clkin0,
            CLKIN1      => (CP_CK1_INV == "DISABLE") ? CLKIN1 : clkin1,
            DETECT_CLK0 => (CP_DIS0_INV == "DISABLE") ? DIS_CLK0 : dis_clk0,
            DETECT_CLK1 => (CP_DIS1_INV == "DISABLE") ? DIS_CLK1 : dis_clk1,
            SEL         => (CP_SEL_INV == "DISABLE") ? SEL_CLK : sel_clk,
            CLKOUT      => CLKOUT
        );
    }
    else if (CP_MODE == "CLKBUFGMUX_E2" && CP_GLITCH == "DISABLE" )
    {
        operator V_USCM CLKBUFGMUX
        parameter map
        (
            USCM_MODE => (CP_EDGE == "NEGEDGE") ? "NEGSW" :
                         (CP_EDGE == "POSEDGE") ? "POSSW" : "NORSW",
            SIM_DEVICE => "TITAN2"
        )
        port map
        (
            CLK0      => (CP_CK0_INV == "DISABLE") ? CLKIN0 : clkin0,
            CLK1      => (CP_CK1_INV == "DISABLE") ? CLKIN1 : clkin1,
            SEL       => (CP_SEL_INV == "DISABLE") ? SEL_CLK : sel_clk,
            CLKOUT    => CLKOUT
        );
    }
};
