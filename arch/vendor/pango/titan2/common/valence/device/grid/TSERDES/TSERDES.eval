tarted
grid
device TSERDES
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config string CP_TSR_EN = "FALSE",
        config string CP_TSR_POL = "FALSE",
        config string CP_T_SYNC = "ASYNC",
        config bit CP_GRS_DIS = 1'b0,
        config string CP_CLK_POL4 = "FALSE",
        config string CP_CLK_POL5 = "FALSE",
        config string CP_CLK_POL6 = "FALSE",
        config string CP_THSMEM_EN = "FALSE",
        config string CP_TSERDES_EN = "FALSE",
        config string CP_SER_DDREN = "FALSE",
        config string CP_SER_SDREN = "FALSE",
        config string CP_TSERDES_MODE = "SDR2TO1",
        config string CP_UPD0_SHIFTEN = "FALSE",
        config string CP_UPD1_SHIFTEN = "FALSE",
        config bit CP_INIT_SET[1:0] = 2'b00,
        config bit CP_INIT_TQ = 1'b0,
        config string CP_SRVAL_TQ0 = "RESET",
        config string CP_SRVAL_TQ1 = "RESET",
        config string CP_SRVAL_TQ2 = "RESET",
        config string CP_SRVAL_TQ3 = "RESET",
        config bit CP_TS_TQMODE = 1'b0,
        config bit CP_TERMMODE = 1'b0,
        config string CP_TDLY_EN = "FALSE",
        config bit CP_TERM_OFFSET[1:0] = 2'b00,
        config string CP_TDYN_EN = "FALSE",
        config bit CP_TDLY_SET[7:0] = 8'b00000000
    );
    port
    (
// configuration_body_def_on


    config input SC_GRS_DIS = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GRS_DIS" */,

    config input SC_TSR_POL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TSR_POL" */,

    config input SC_T_SYNC = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_T_SYNC" */,

    config input SC_TSR_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TSR_EN" */,

    config input SC_INIT_TQ = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_INIT_TQ" */,

    config input SC_SRVAL_TQ[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SRVAL_TQ[3],SC_SRVAL_TQ[2],SC_SRVAL_TQ[1],SC_SRVAL_TQ[0]" */,

    config input SC_TDLY_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TDLY_EN" */,

    config input SC_TDLY_SET[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TDLY_SET[7],SC_TDLY_SET[6],SC_TDLY_SET[5],SC_TDLY_SET[4],SC_TDLY_SET[3],SC_TDLY_SET[2],SC_TDLY_SET[1],SC_TDLY_SET[0]" */,

    config input SC_TDYN_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TDYN_EN" */,

    config input SC_TSERDES_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TSERDES_EN" */,

    config input SC_TSERDES_MODE[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TSERDES_MODE[1],SC_TSERDES_MODE[0]" */,

    config input SC_SER_DDREN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SER_DDREN" */,

    config input SC_SER_SDREN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SER_SDREN" */,

    config input SC_THSMEM_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_THSMEM_EN" */,

    config input SC_CLK_POL4 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLK_POL4" */,

    config input SC_CLK_POL5 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLK_POL5" */,

    config input SC_CLK_POL6 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLK_POL6" */,

    config input SC_UPD0_SHIFTEN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_UPD0_SHIFTEN" */,

    config input SC_UPD1_SHIFTEN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_UPD1_SHIFTEN" */,

    config input SC_TS_TQMODE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TS_TQMODE" */,

    config input SC_TERMMODE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TERMMODE" */,

    config input SC_TERM_OFFSET[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TERM_OFFSET[1],SC_TERM_OFFSET[0]" */,

    config input SC_INIT_SET[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_INIT_SET[1],SC_INIT_SET[0]" */,

// configuration_body_def_end

        input TS_CTRL[7:0] = 8'b1111_1111,
        input TDLY_DYN_SET[7:0] = 8'b1111_1111,
        input TSR = 1'b1,
        input TCE = 1'b1,
        input OCLKDIV = 1'b1,
        input OCLKDIVB = 1'b1,
        input SERCLK = 1'b1,
        input SERCLKB = 1'b1,
        input OCLK = 1'b1,
        input OCLKB = 1'b1,
        input UPD0_SHIFT = 1'b1,
        input UPD1_SHIFT = 1'b1,
        input TDLY_SEL = 1'b1,
        output TO,
        output TERM,
        output TFB,
        output TERM_FB
    );
};
//grid device end

//grid device structure netlist started
structure netlist of TSERDES
{
    wire ntTSR;
    wire ntTCE;
    wire ntOCLKDIV;
    wire ntOCLKDIVB;
    wire ntSERCLK;
    wire ntSERCLKB;
    wire ntOCLK;
    wire ntOCLKB;
    wire ntUPD0_SHIFT;
    wire ntUPD1_SHIFT;
    wire ntTDLY_SEL;
    wire ntTO;
    wire ntTERM;
    wire ntTFB;
    wire ntTERM_FB;

    //internal interconnect
    wire ntCLK_STG0;
    wire ntCLK_STG1;
    wire ntCLK_STG2_0;
    wire ntCLK_STG2_1;
    wire ntTO_SDR;
    wire ntTO_DDR;
    wire ntTERM_SDR;
    wire ntTERM_DDR;
    wire ntTO_DLY;
    wire ntOUTEN[7:0];
    wire ntSR;
    //External connection
    ntTSR               <= TSR;
    ntTCE               <= TCE;
    ntOCLKDIV           <= OCLKDIV;
    ntOCLKDIVB          <= OCLKDIVB;
    ntSERCLK            <= SERCLK;
    ntSERCLKB           <= SERCLKB;
    ntOCLK              <= OCLK;
    ntOCLKB             <= OCLKB;
    ntUPD0_SHIFT        <= UPD0_SHIFT;
    ntUPD1_SHIFT        <= UPD1_SHIFT;
    ntTDLY_SEL          <= TDLY_SEL;
    TO                  <= ntTO;
    TERM                <= ntTERM;
    TFB                 <= ntTFB;
    TERM_FB             <= ntTERM_FB;

    device T_SERDES XT_SERDES
    parameter map
    (
        CP_TSR_EN            => CP_TSR_EN,
        CP_T_SYNC            => CP_T_SYNC,
        CP_GRS_DIS           => CP_GRS_DIS,
        CP_THSMEM_EN         => CP_THSMEM_EN,
        CP_TSERDES_EN        => CP_TSERDES_EN,
        CP_SER_DDREN         => CP_SER_DDREN,
        CP_SER_SDREN         => CP_SER_SDREN,
        CP_TSERDES_MODE      => CP_TSERDES_MODE,
        CP_UPD0_SHIFTEN      => CP_UPD0_SHIFTEN,
        CP_UPD1_SHIFTEN      => CP_UPD1_SHIFTEN,
        CP_INIT_SET          => CP_INIT_SET,
        CP_TERM_OFFSET       => CP_TERM_OFFSET,
        CP_INIT_TQ           => CP_INIT_TQ,
        CP_SRVAL_TQ0         => CP_SRVAL_TQ0,
        CP_SRVAL_TQ1         => CP_SRVAL_TQ1,
        CP_SRVAL_TQ2         => CP_SRVAL_TQ2,
        CP_SRVAL_TQ3         => CP_SRVAL_TQ3
    )
    port map
    (
        TS_CTRL              => TS_CTRL,//netbus
        SR                   => ntSR,
        TCE                  => ntTCE,
        CLK_STG0             => ntCLK_STG0,
        CLK_STG1             => ntCLK_STG1,
        CLK_STG2_0           => ntCLK_STG2_0,
        CLK_STG2_1           => ntCLK_STG2_1,
        UPD0_SHIFT           => ntUPD0_SHIFT,
        UPD1_SHIFT           => ntUPD1_SHIFT,
        TO_SDR               => ntTO_SDR,
        TO_DDR               => ntTO_DDR,
        TERM_SDR             => ntTERM_SDR,
        TERM_DDR             => ntTERM_DDR,
        OUTEN                => ntOUTEN
    );

    device TSERDES_CLKGEN XTSERDES_CLKGEN
    parameter map
    (
        CP_CLK_POL4         => CP_CLK_POL4,
        CP_CLK_POL5         => CP_CLK_POL5,
        CP_CLK_POL6         => CP_CLK_POL6
    )
    port map
    (
        OCLKDIV             => ntOCLKDIV,
        OCLKDIVB            => ntOCLKDIVB,
        SERCLK              => ntSERCLK,
        SERCLKB             => ntSERCLKB,
        OCLK                => ntOCLK,
        OCLKB               => ntOCLKB,
        CLK_STG0            => ntCLK_STG0,
        CLK_STG1            => ntCLK_STG1,
        CLK_STG2_0          => ntCLK_STG2_0,
        CLK_STG2_1          => ntCLK_STG2_1
    );

    device TSERDES_TDLY XTSERDES_TDLY
    parameter map
    (
        CP_TDLY_EN          => CP_TDLY_EN,
        CP_TDYN_EN          => CP_TDYN_EN,
        CP_TDLY_SET         => CP_TDLY_SET
    )
    port map
    (
        TDLY_DYN_SET        => TDLY_DYN_SET,//netbus
        TDLY_SEL            => ntTDLY_SEL,
        DI                  => TFB,
        D_DLY               => ntTO_DLY
    );


    device MUX2TO1_T TSRMUX
    parameter map
    (
        CP_POL              => CP_TSR_POL,
        DIN1_POL            => "TRUE"
    )
    port map
    (
        DOUT                => ntSR,
        DIN0                => ntTSR,
        DIN1                => ntTSR
    );


    device MUX2TO1_T TOMUX
    parameter map
    (
        CP_POL              => CP_TDLY_EN,
        DIN1_POL            => "FALSE"
    )
    port map
    (
        DOUT                => ntTO,
        DIN0                => ntTFB,
        DIN1                => ntTO_DLY
    );


    device MUX2TO1_P_T TFBMUX
    parameter map
    (
        CP_SEL              => CP_TS_TQMODE
    )
    port map
    (
        DOUT                => ntTFB,
        DIN0                => ntTO_SDR,
        DIN1                => ntTO_DDR
    );


    device MUX2TO1_P_T TERM_TFBMUX
    parameter map
    (
        CP_SEL              => CP_TERMMODE
    )
    port map
    (
        DOUT                => ntTERM_FB,
        DIN0                => ntTERM_SDR,
        DIN1                => ntTERM_DDR
    );


    device TERM_MUX U_TERM_MUX
    port map
    (
        OUTEN               => ntOUTEN,
        DOUT                => ntTERM,
        DIN0                => 1'b0,
        DIN1                => ntTERM_FB
    );

};
//grid device structure netlist end
//grid device configure body started

configuration cfg of TSERDES
{

 // assign config body begin
    SC_GRS_DIS  :=  CP_GRS_DIS;
    SC_INIT_TQ  :=  CP_INIT_TQ;
    SC_TDLY_SET[0]  :=  CP_TDLY_SET[0];
    SC_TDLY_SET[1]  :=  CP_TDLY_SET[1];
    SC_TDLY_SET[2]  :=  CP_TDLY_SET[2];
    SC_TDLY_SET[3]  :=  CP_TDLY_SET[3];
    SC_TDLY_SET[4]  :=  CP_TDLY_SET[4];
    SC_TDLY_SET[5]  :=  CP_TDLY_SET[5];
    SC_TDLY_SET[6]  :=  CP_TDLY_SET[6];
    SC_TDLY_SET[7]  :=  CP_TDLY_SET[7];
    SC_TS_TQMODE  :=  CP_TS_TQMODE;
    SC_TERMMODE  :=  CP_TERMMODE;
    SC_TERM_OFFSET[0]  :=  CP_TERM_OFFSET[0];
    SC_TERM_OFFSET[1]  :=  CP_TERM_OFFSET[1];
    SC_INIT_SET[0]  :=  CP_INIT_SET[0];
    SC_INIT_SET[1]  :=  CP_INIT_SET[1];
// assign config body end

//initial config body0 begin
    if (CP_CLK_POL4 == "FALSE")
    {
        SC_CLK_POL4  :=  1'b0;
    }
    else if(CP_CLK_POL4 == "TRUE")
    {
        SC_CLK_POL4  :=  1'b1;
    }
    else
    {
        SC_CLK_POL4  :=  1'bx;
        error("illegal setting for CP_CLK_POL4  :=  %s",CP_CLK_POL4);
    }

//initial config body0 end


//initial config body1 begin
    if (CP_CLK_POL5 == "FALSE")
    {
        SC_CLK_POL5  :=  1'b0;
    }
    else if(CP_CLK_POL5 == "TRUE")
    {
        SC_CLK_POL5  :=  1'b1;
    }
    else
    {
        SC_CLK_POL5  :=  1'bx;
        error("illegal setting for CP_CLK_POL5  :=  %s",CP_CLK_POL5);
    }

//initial config body1 end


//initial config body2 begin
    if (CP_CLK_POL6 == "FALSE")
    {
        SC_CLK_POL6  :=  1'b0;
    }
    else if(CP_CLK_POL6 == "TRUE")
    {
        SC_CLK_POL6  :=  1'b1;
    }
    else
    {
        SC_CLK_POL6  :=  1'bx;
        error("illegal setting for CP_CLK_POL6  :=  %s",CP_CLK_POL6);
    }

//initial config body2 end


//initial config body3 begin
    if (CP_TSR_POL == "FALSE")
    {
        SC_TSR_POL  :=  1'b0;
    }
    else if(CP_TSR_POL == "TRUE")
    {
        SC_TSR_POL  :=  1'b1;
    }
    else
    {
        SC_TSR_POL  :=  1'bx;
        error("illegal setting for CP_TSR_POL  :=  %s",CP_TSR_POL);
    }

//initial config body3 end


//initial config body4 begin
    if (CP_TDLY_EN == "FALSE")
    {
        SC_TDLY_EN  :=  1'b0;
    }
    else if(CP_TDLY_EN == "TRUE")
    {
        SC_TDLY_EN  :=  1'b1;
    }
    else
    {
        SC_TDLY_EN   :=  1'bx;
        error("illegal setting for CP_TDLY_EN  :=  %s",CP_TDLY_EN);
    }

//initial config body4 end


//initial config body5 begin
    if (CP_TDYN_EN == "FALSE")
    {
        SC_TDYN_EN  :=  1'b0;
    }
    else if(CP_TDYN_EN == "TRUE")
    {
        SC_TDYN_EN  :=  1'b1;
    }
    else
    {
        SC_TDYN_EN   :=  1'bx;
        error("illegal setting for CP_TDYN_EN  :=  %s",CP_TDYN_EN);
    }

//initial config body5 end


//initial config body6 begin
    if (CP_TSERDES_EN == "FALSE")
    {
        SC_TSERDES_EN  :=  1'b0;
    }
    else if(CP_TSERDES_EN == "TRUE")
    {
        SC_TSERDES_EN  :=  1'b1;
    }
    else
    {
        SC_TSERDES_EN   :=  1'bx;
        error("illegal setting for CP_TSERDES_EN  :=  %s",CP_TSERDES_EN);
    }

//initial config body6 end


//initial config body7 begin
    if (CP_T_SYNC == "ASYNC")
    {
        SC_T_SYNC  :=  1'b0;
    }
    else if(CP_T_SYNC == "SYNC")
    {
        SC_T_SYNC  :=  1'b1;
    }
    else
    {
        SC_T_SYNC  :=  1'bx;
        error("illegal setting for CP_T_SYNC  :=  %s",SC_T_SYNC);
    }

//initial config body7 end


//initial config body8 begin
    if (CP_TSR_EN == "FALSE")
    {
        SC_TSR_EN  :=  1'b0;
    }
    else if(CP_TSR_EN == "TRUE")
    {
        SC_TSR_EN   :=  1'b1;
    }
    else
    {
        SC_TSR_EN  :=  1'bx;
        error("illegal setting for CP_TSR_EN  :=  %s",CP_TSR_EN);
    }

//initial config body8 end


//initial config body9 begin
    if (CP_SRVAL_TQ0 == "RESET")
    {
        SC_SRVAL_TQ[0]  :=  1'b0;
    }
    else if(CP_SRVAL_TQ0 == "SET")
    {
        SC_SRVAL_TQ[0]  :=  1'b1;
    }
    else
    {
        SC_SRVAL_TQ[0]  :=  1'bx;
        error("illegal setting for CP_SRVAL_TQ0  :=  %s",CP_SRVAL_TQ0);
    }

//initial config body9 end


//initial config body10 begin
    if (CP_SRVAL_TQ1 == "RESET")
    {
        SC_SRVAL_TQ[1]  :=  1'b0;
    }
    else if(CP_SRVAL_TQ1 == "SET")
    {
        SC_SRVAL_TQ[1]  :=  1'b1;
    }
    else
    {
        SC_SRVAL_TQ[1]  :=  1'bx;
        error("illegal setting for CP_SRVAL_TQ1  :=  %s",CP_SRVAL_TQ1);
    }

//initial config body10 end


//initial config body11 begin
    if (CP_SRVAL_TQ2 == "RESET")
    {
        SC_SRVAL_TQ[2]  :=  1'b0;
    }
    else if(CP_SRVAL_TQ2 == "SET")
    {
        SC_SRVAL_TQ[2]  :=  1'b1;
    }
    else
    {
        SC_SRVAL_TQ[2]  :=  1'bx;
        error("illegal setting for CP_SRVAL_TQ2  :=  %s",CP_SRVAL_TQ2);
    }

//initial config body11 end


//initial config body12 begin
    if (CP_SRVAL_TQ3 == "RESET")
    {
        SC_SRVAL_TQ[3]  :=  1'b0;
    }
    else if(CP_SRVAL_TQ3 == "SET")
    {
        SC_SRVAL_TQ[3]  :=  1'b1;
    }
    else
    {
        SC_SRVAL_TQ[3]  :=  1'bx;
        error("illegal setting for CP_SRVAL_TQ3  :=  %s",CP_SRVAL_TQ3);
    }

//initial config body12 end


//initial config body13 begin
    if (CP_SER_SDREN == "FALSE")
    {
        SC_SER_SDREN  :=  1'b0;
    }
    else if(CP_SER_SDREN == "TRUE")
    {
        SC_SER_SDREN  :=  1'b1;
    }
    else
    {
        SC_SER_SDREN  :=  1'bx;
        error("illegal setting for CP_SER_SDREN  :=  %s",CP_SER_SDREN);
    }

//initial config body13 end


//initial config body14 begin
    if (CP_SER_DDREN == "FALSE")
    {
        SC_SER_DDREN  :=  1'b0;
    }
    else if(CP_SER_DDREN == "TRUE")
    {
        SC_SER_DDREN  :=  1'b1;
    }
    else
    {
        SC_SER_DDREN  :=  1'bx;
        error("illegal setting for CP_SER_DDREN  :=  %s",CP_SER_DDREN);
    }

//initial config body14 end


//initial config body15 begin
    if (CP_THSMEM_EN == "FALSE")
    {
        SC_THSMEM_EN  :=  1'b0;
    }
    else if(CP_THSMEM_EN == "TRUE")
    {
        SC_THSMEM_EN  :=  1'b1;
    }
    else
    {
        SC_THSMEM_EN  :=  1'bx;
        error("illegal setting for CP_THSMEM_EN  :=  %s",CP_THSMEM_EN);
    }

//initial config body15 end


//initial config body16 begin
    if (CP_UPD0_SHIFTEN == "FALSE")
    {
        SC_UPD0_SHIFTEN  :=  1'b0;
    }
    else if(CP_UPD0_SHIFTEN == "TRUE")
    {
        SC_UPD0_SHIFTEN  :=  1'b1;
    }
    else
    {
        SC_UPD0_SHIFTEN  :=  1'bx;
        error("illegal setting for CP_UPD0_SHIFTEN  :=  %s",CP_UPD0_SHIFTEN);
    }

//initial config body16 end


//initial config body17 begin
    if (CP_UPD1_SHIFTEN == "FALSE")
    {
        SC_UPD1_SHIFTEN  :=  1'b0;
    }
    else if(CP_UPD1_SHIFTEN == "TRUE")
    {
        SC_UPD1_SHIFTEN  :=  1'b1;
    }
    else
    {
        SC_UPD1_SHIFTEN  :=  1'bx;
        error("illegal setting for CP_UPD1_SHIFTEN  :=  %s",CP_UPD1_SHIFTEN);
    }

//initial config body17 end


//initial config body18 begin
    if (CP_TSERDES_MODE == "SDR2TO1")
    {
        SC_TSERDES_MODE  :=  2'b10;
    }
    else if(CP_TSERDES_MODE == "SDR4TO1")
    {
        SC_TSERDES_MODE  :=  2'b00;
    }
    else if(CP_TSERDES_MODE == "SDR8TO1")
    {
        SC_TSERDES_MODE  :=  2'b01;
    }
    else if(CP_TSERDES_MODE == "DDR4TO1")
    {
        SC_TSERDES_MODE  :=  2'b00;
    }
    else if(CP_TSERDES_MODE == "DDR8TO1")
    {
        SC_TSERDES_MODE  :=  2'b01;
    }
    else
    {
        SC_TSERDES_MODE  :=  2'bxx;
        error("illegal setting for CP_TSERDES_MODE  :=  %s",CP_TSERDES_MODE);
    }

//initial config body18 end

};

//grid device configure body end

timing tserdes_tnl of TSERDES
{
    string OSERDES_MODE = "DISABLE";
    if (CP_SER_SDREN == "TRUE" && CP_THSMEM_EN == "TRUE")
    {
        if (CP_TSERDES_MODE == "DDR4TO1" /*|| CP_TSERDES_MODE == "SDR4TO1" */)
        {
            OSERDES_MODE = "HMSDR4TO1";
        }
        else if (CP_TSERDES_MODE == "DDR8TO1" /*|| CP_TSERDES_MODE == "SDR8TO1" */)
        {
            OSERDES_MODE = "HMSDR8TO1";
        }
    }
    else if (CP_SER_SDREN == "TRUE" &&
       (CP_TSERDES_MODE == "SDR2TO1" || CP_TSERDES_MODE == "SDR3TO1" || CP_TSERDES_MODE == "SDR4TO1" || 
        CP_TSERDES_MODE == "SDR5TO1" || CP_TSERDES_MODE == "SDR6TO1" || CP_TSERDES_MODE == "SDR7TO1" || 
        CP_TSERDES_MODE == "SDR8TO1"))
    {
        OSERDES_MODE = CP_TSERDES_MODE;
    }
    else if (CP_SER_DDREN == "TRUE" &&
       (CP_TSERDES_MODE == "DDR4TO1" || CP_TSERDES_MODE == "DDR6TO1" || CP_TSERDES_MODE == "DDR8TO1" || 
        CP_TSERDES_MODE == "DDR10TO1" || CP_TSERDES_MODE == "DDR14TO1"))
    {
        OSERDES_MODE = CP_TSERDES_MODE;
    }
    operator V_OSERDES_E2 TSERDES
    parameter map
    (
        GRS_EN        =>     (CP_GRS_DIS == 1'b0) ? "TRUE" : "FALSE",
        OSERDES_MODE  =>      OSERDES_MODE,
        UPD0_SHIFT_EN =>      CP_UPD0_SHIFTEN,
        UPD1_SHIFT_EN =>      CP_UPD1_SHIFTEN,
        INIT_SET      =>      CP_INIT_SET,
        GRS_TYPE_TQ   =>     (CP_INIT_TQ == 1'b0) ? "RESET" : "SET",// "RESET",
        LRS_TYPE_TQ0  =>     (CP_T_SYNC == "ASYNC" && CP_SRVAL_TQ0 == "RESET") ? "ASYNC_RESET" :
                             (CP_T_SYNC == "ASYNC" && CP_SRVAL_TQ0 == "SET")   ? "ASYNC_SET"   :
                             (CP_T_SYNC == "SYNC"  && CP_SRVAL_TQ0 == "RSET")  ? "SYNC_RESET"  :
                             (CP_T_SYNC == "SYNC"  && CP_SRVAL_TQ0 == "SET")   ? "SYNC_SET"    : "",
        LRS_TYPE_TQ1  =>     (CP_T_SYNC == "ASYNC" && CP_SRVAL_TQ1 == "RESET") ? "ASYNC_RESET" :
                             (CP_T_SYNC == "ASYNC" && CP_SRVAL_TQ1 == "SET")   ? "ASYNC_SET"   :
                             (CP_T_SYNC == "SYNC"  && CP_SRVAL_TQ1 == "RSET")  ? "SYNC_RESET"  :
                             (CP_T_SYNC == "SYNC"  && CP_SRVAL_TQ1 == "SET")   ? "SYNC_SET"    : "",
        LRS_TYPE_TQ2  =>     (CP_T_SYNC == "ASYNC" && CP_SRVAL_TQ2 == "RESET") ? "ASYNC_RESET" :
                             (CP_T_SYNC == "ASYNC" && CP_SRVAL_TQ2 == "SET")   ? "ASYNC_SET"   :
                             (CP_T_SYNC == "SYNC"  && CP_SRVAL_TQ2 == "RSET")  ? "SYNC_RESET"  :
                             (CP_T_SYNC == "SYNC"  && CP_SRVAL_TQ2 == "SET")   ? "SYNC_SET"    : "",
        LRS_TYPE_TQ3  =>     (CP_T_SYNC == "ASYNC" && CP_SRVAL_TQ3 == "RESET") ? "ASYNC_RESET" :
                             (CP_T_SYNC == "ASYNC" && CP_SRVAL_TQ3 == "SET")   ? "ASYNC_SET"   :
                             (CP_T_SYNC == "SYNC"  && CP_SRVAL_TQ3 == "RSET")  ? "SYNC_RESET"  :
                             (CP_T_SYNC == "SYNC"  && CP_SRVAL_TQ3 == "SET")   ? "SYNC_SET"    : "",
        TSERDES_EN    =>     "TRUE"
    )
    port map
    (
        RST           =>  TSR,
        OCE           =>  TCE,
        OCLKDIV       =>  OCLKDIV,
        //OCLKDIVB      =>  OCLKDIVB,
        SERCLK        =>  SERCLK,
        //SERCLKB       =>  SERCLKB,
        OCLK          =>  OCLK,
        //OCLKB         =>  OCLKB,
        UPD0_SHIFT    =>  UPD0_SHIFT,
        UPD1_SHIFT    =>  UPD1_SHIFT,
        DI            =>  TS_CTRL,
        DO            =>  TO
    );
};
