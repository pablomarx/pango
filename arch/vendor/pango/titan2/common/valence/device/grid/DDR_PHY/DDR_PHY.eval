tarted
grid
device DDR_PHY
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config bit CP_LDO_CTRL[1:0] = 2'b00,
        config bit CP_CAL_INIT[7:0] = 8'b00011111,
        config bit CP_CODE_OFFSET[3:0] = 4'b0000,
        config bit CP_DLLCODESEL[1:0] = 2'b00,
        config bit CP_DLL_CLKSEL[1:0] = 2'b10,
        config string CP_DLL_FORCE = "FALSE",
        config bit CP_DLY_2X = 1'b0,
        config string CP_DQS_MODE = "QUAD_RATE",
        config bit CP_EN_CTRL[4:0] = 5'b00000,
        config bit CP_FAST_LOCK = 1'b0,
        config bit CP_FDIV[1:0] = 2'b10,
        config string CP_FIFOMODE_SEL = "TRUE",
        config string CP_GATE_EN = "FALSE",
        config string CP_IFIFO_GENERIC = "FALSE",
        config bit CP_INT_CLK = 1'b0,
        config string CP_IOCLK_SEL = "FALSE",
        config bit CP_RD_ADDR_INIT[2:0] = 3'b000,
        config bit CP_RST_CTRL[1:0] = 2'b00,
        config bit CP_UPD_DLY[1:0] = 2'b01,
        config string CP_WCLKDEL_SEL = "FALSE",
        config string CP_WL_EXTEND = "FALSE"
    );
    port
    (
// configuration_body_def_on


    config input SC_LDO_CTRL[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LDO_CTRL[1],SC_LDO_CTRL[0]" */,

    config input SC_CAL_INIT[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CAL_INIT[7],SC_CAL_INIT[6],SC_CAL_INIT[5],SC_CAL_INIT[4],SC_CAL_INIT[3],SC_CAL_INIT[2],SC_CAL_INIT[1],SC_CAL_INIT[0]" */,

    config input SC_CODE_OFFSET[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CODE_OFFSET[3],SC_CODE_OFFSET[2],SC_CODE_OFFSET[1],SC_CODE_OFFSET[0]" */,

    config input SC_DLLCODESEL[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DLLCODESEL[1],SC_DLLCODESEL[0]" */,

    config input SC_DLL_CLKSEL[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DLL_CLKSEL[1],SC_DLL_CLKSEL[0]" */,

    config input SC_DLL_FORCE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DLL_FORCE" */,

    config input SC_DLY_2X = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DLY_2X" */,

    config input SC_DQS_MODE[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DQS_MODE[2],SC_DQS_MODE[1],SC_DQS_MODE[0]" */,

    config input SC_EN_CTRL[4:0] = 5'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_EN_CTRL[4],SC_EN_CTRL[3],SC_EN_CTRL[2],SC_EN_CTRL[1],SC_EN_CTRL[0]" */,

    config input SC_FAST_LOCK = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FAST_LOCK" */,

    config input SC_FDIV[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FDIV[1],SC_FDIV[0]" */,

    config input SC_FIFOMODE_SEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FIFOMODE_SEL" */,

    config input SC_GATE_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GATE_EN" */,

    config input SC_IFIFO_GENERIC = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_IFIFO_GENERIC" */,

    config input SC_INT_CLK = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_INT_CLK" */,

    config input SC_IOCLK_SEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_IOCLK_SEL" */,

    config input SC_RD_ADDR_INIT[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RD_ADDR_INIT[2],SC_RD_ADDR_INIT[1],SC_RD_ADDR_INIT[0]" */,

    config input SC_RST_CTRL[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RST_CTRL[1],SC_RST_CTRL[0]" */,

    config input SC_UPD_DLY[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_UPD_DLY[1],SC_UPD_DLY[0]" */,

    config input SC_WCLKDEL_SEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_WCLKDEL_SEL" */,

    config input SC_WL_EXTEND = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_WL_EXTEND" */,

// configuration_body_def_end

        input DQS_EVEN_CODE[7:0] = 8'b1111_1111,
        input DQS_ODD_CODE[7:0] = 8'b1111_1111,
        input DQS_GATE_CTRL[3:0] = 4'b1111,
        input READ_CLK_CTRL[2:0] = 3'b111,
        input WL_P_DLLCODE[7:0] = 8'b1111_1111,
        input WL_STEP[7:0] = 8'b1111_1111,
        input PHY_CLK_B_P = 1'b1,
        input PHY_CLK_B_N = 1'b1,
        input DLL_FREEZE = 1'b1,
        input DLL_RST = 1'b1,
        input CLK_DQSI = 1'b1,
        input CLK_DQSIB = 1'b1,
        input GATEI = 1'b1,
        input LDO_EN = 1'b1,
        input RST_DQS = 1'b1,
        input RST_TRAINING_N = 1'b1,
        input SYSCLK = 1'b1,
        input UPDATE_N = 1'b1,
        output DLL_90CODE_GRAY[7:0],
        output DQS_DRIFT[1:0],
        output IFIFO_RADDR[2:0],
        output IFIFO_WADDR[2:0],
        output CLK_DQSI_DEL,
        output CLK_DQSIB_DEL,
        output CLK_W,
        output CLK_W_DEL,
        output DGTS,
        output DQS_DRIFT_STATUS,
        output DRIFT_DETECT_ERR,
        output DLL_LOCK,
        output READ_VALID,
        output DQS_SAMPLE
    );
};
//grid device end

//grid device structure netlist started
structure netlist of DDR_PHY
{
};
//grid device structure netlist end
//grid device configure body started

configuration cfg of DDR_PHY
{

 // assign config body begin
    SC_DLLCODESEL[0]  :=  CP_DLLCODESEL[0];
    SC_DLLCODESEL[1]  :=  CP_DLLCODESEL[1];
    SC_EN_CTRL[0]   :=  CP_EN_CTRL[0];
    SC_EN_CTRL[1]   :=  CP_EN_CTRL[1];
    SC_EN_CTRL[2]   :=  CP_EN_CTRL[2];
    SC_EN_CTRL[3]   :=  CP_EN_CTRL[3];
    SC_EN_CTRL[4]   :=  CP_EN_CTRL[4];
    SC_RST_CTRL[0]  :=  CP_RST_CTRL[0];
    SC_RST_CTRL[1]  :=  CP_RST_CTRL[1];
    SC_RD_ADDR_INIT[0]  :=  CP_RD_ADDR_INIT[0];
    SC_RD_ADDR_INIT[1]  :=  CP_RD_ADDR_INIT[1];
    SC_RD_ADDR_INIT[2]  :=  CP_RD_ADDR_INIT[2];
    SC_DLY_2X  :=  CP_DLY_2X;
    SC_FAST_LOCK  :=  CP_FAST_LOCK;
    SC_CODE_OFFSET[0]  :=  CP_CODE_OFFSET[0];
    SC_CODE_OFFSET[1]  :=  CP_CODE_OFFSET[1];
    SC_CODE_OFFSET[2]  :=  CP_CODE_OFFSET[2];
    SC_CODE_OFFSET[3]  :=  CP_CODE_OFFSET[3];
    SC_DLL_CLKSEL[0]  :=  CP_DLL_CLKSEL[0];
    SC_DLL_CLKSEL[1]  :=  CP_DLL_CLKSEL[1];
    SC_CAL_INIT[0]  :=  CP_CAL_INIT[0];
    SC_CAL_INIT[1]  :=  CP_CAL_INIT[1];
    SC_CAL_INIT[2]  :=  CP_CAL_INIT[2];
    SC_CAL_INIT[3]  :=  CP_CAL_INIT[3];
    SC_CAL_INIT[4]  :=  CP_CAL_INIT[4];
    SC_CAL_INIT[5]  :=  CP_CAL_INIT[5];
    SC_CAL_INIT[6]  :=  CP_CAL_INIT[6];
    SC_CAL_INIT[7]  :=  CP_CAL_INIT[7];
    SC_INT_CLK  :=  CP_INT_CLK;
    SC_FDIV[0]  :=  CP_FDIV[0];
    SC_FDIV[1]  :=  CP_FDIV[1];
    SC_UPD_DLY[0]  :=  CP_UPD_DLY[0];
    SC_UPD_DLY[1]  :=  CP_UPD_DLY[1];
    SC_LDO_CTRL[0]  :=  CP_LDO_CTRL[0];
    SC_LDO_CTRL[1]  :=  CP_LDO_CTRL[1];
// assign config body end

//initial config body0 begin
    if(CP_DQS_MODE == "FULL_RATE")
    {
        SC_DQS_MODE  :=  3'b000;
    }
    else if(CP_DQS_MODE == "HALF_RATE")
    {
        SC_DQS_MODE  :=  3'b010;
    }
    else if(CP_DQS_MODE == "QUAD_RATE")
    {
        SC_DQS_MODE  :=  3'b111;
    }
    else
    {
        SC_DQS_MODE  :=  3'bxxx;
        error("illegal setting for CP_DQS_MODE := %s",CP_DQS_MODE);
    }

//initial config body0 end


//initial config body1 begin
    if(CP_IOCLK_SEL == "FALSE")
    {
        SC_IOCLK_SEL  :=  1'b0;
    }
    else if(CP_IOCLK_SEL == "TRUE")
    {
        SC_IOCLK_SEL  :=  1'b1;
    }
    else
    {
        SC_IOCLK_SEL  :=  1'bx;
        error("illegal setting for CP_IOCLK_SEL := %s",CP_IOCLK_SEL);
    }

//initial config body1 end


//initial config body2 begin
    if(CP_IFIFO_GENERIC == "FALSE")
    {
        SC_IFIFO_GENERIC  :=  1'b0;
    }
    else if(CP_IFIFO_GENERIC == "TRUE")
    {
        SC_IFIFO_GENERIC  :=  1'b1;
    }
    else
    {
        SC_IFIFO_GENERIC  :=  1'bx;
        error("illegal setting for CP_IFIFO_GENERIC := %s",CP_IFIFO_GENERIC);
    }

//initial config body2 end


//initial config body3 begin
    if(CP_GATE_EN == "FALSE")
    {
        SC_GATE_EN  :=  1'b0;
    }
    else if(CP_GATE_EN == "TRUE")
    {
        SC_GATE_EN  :=  1'b1;
    }
    else
    {
        SC_GATE_EN  :=  1'bx;
        error("illegal setting for CP_GATE_EN := %s",CP_GATE_EN);
    }

//initial config body3 end


//initial config body4 begin
    if(CP_WL_EXTEND == "FALSE")
    {
        SC_WL_EXTEND  :=  1'b0;
    }
    else if(CP_WL_EXTEND == "TRUE")
    {
        SC_WL_EXTEND  :=  1'b1;
    }
    else
    {
        SC_WL_EXTEND  :=  1'bx;
        error("illegal setting for CP_WL_EXTEND := %s",CP_WL_EXTEND);
    }

//initial config body4 end


//initial config body5 begin
    if(CP_FIFOMODE_SEL == "FALSE")
    {
        SC_FIFOMODE_SEL  :=  1'b0;
    }
    else if(CP_FIFOMODE_SEL == "TRUE")
    {
        SC_FIFOMODE_SEL  :=  1'b1;
    }
    else
    {
        SC_FIFOMODE_SEL  :=  1'bx;
        error("illegal setting for CP_FIFOMODE_SEL := %s",CP_FIFOMODE_SEL);
    }

//initial config body5 end


//initial config body6 begin
    if(CP_WCLKDEL_SEL == "FALSE")
    {
        SC_WCLKDEL_SEL  :=  1'b0;
    }
    else if(CP_WCLKDEL_SEL == "TRUE")
    {
        SC_WCLKDEL_SEL  :=  1'b1;
    }
    else
    {
        SC_WCLKDEL_SEL  :=  1'bx;
        error("illegal setting for CP_WCLKDEL_SEL := %s",CP_WCLKDEL_SEL);
    }

//initial config body6 end


//initial config body7 begin
    if(CP_DLL_FORCE == "FALSE")
    {
        SC_DLL_FORCE  :=  1'b0;
    }
    else if(CP_DLL_FORCE == "TRUE")
    {
        SC_DLL_FORCE  :=  1'b1;
    }
    else
    {
        SC_DLL_FORCE  :=  1'bx;
        error("illegal setting for CP_DLL_FORCE := %s",CP_DLL_FORCE);
    }

//initial config body7 end

};

//grid device configure body end


timing ddr_phy_tnl of DDR_PHY
{
    wire ntDLL_45_STEP0;
    wire ntDLL_45_STEP1;
    wire ntDLL_45_STEP2;
    wire ntDLL_45_STEP3;
    wire ntDLL_45_STEP4;
    wire ntDLL_45_STEP5;
    wire ntDLL_45_STEP6;
    wire ntDLL_45_STEP7;

    if (CP_DLL_FORCE == "FALSE") // FIXED ME
    {
        &wire ntDLL_45CODE_GRAY0 = ntDLL_45_STEP0;
        &wire ntDLL_45CODE_GRAY1 = ntDLL_45_STEP1;
        &wire ntDLL_45CODE_GRAY2 = ntDLL_45_STEP2;
        &wire ntDLL_45CODE_GRAY3 = ntDLL_45_STEP3;
        &wire ntDLL_45CODE_GRAY4 = ntDLL_45_STEP4;
        &wire ntDLL_45CODE_GRAY5 = ntDLL_45_STEP5;
        &wire ntDLL_45CODE_GRAY6 = ntDLL_45_STEP6;
        &wire ntDLL_45CODE_GRAY7 = ntDLL_45_STEP7;
        
        int DELAY_STEP_OFFSET = 0;
        if (CP_CODE_OFFSET == 4'b0000)
        {
            DELAY_STEP_OFFSET = 0;
        }
        else if (CP_CODE_OFFSET == 4'b1011)
        {
            DELAY_STEP_OFFSET = 4;
        }
        else if (CP_CODE_OFFSET == 4'b1010)
        {
            DELAY_STEP_OFFSET = 3;
        }
        else if (CP_CODE_OFFSET == 4'b1001)
        {
            DELAY_STEP_OFFSET = 2;
        }
        else if (CP_CODE_OFFSET == 4'b1000)
        {
            DELAY_STEP_OFFSET = 1;
        }
        else if (CP_CODE_OFFSET == 4'b1100)
        {
            DELAY_STEP_OFFSET = -1;
        }
        else if (CP_CODE_OFFSET == 4'b1101)
        {
            DELAY_STEP_OFFSET = -2;
        }
        else if (CP_CODE_OFFSET == 4'b1110)
        {
            DELAY_STEP_OFFSET = -3;
        }
        else if (CP_CODE_OFFSET == 4'b1111)
        {
            DELAY_STEP_OFFSET = -4;
        }

        operator V_DLL_E2 DLL_E2
        parameter map (
            GRS_EN             => (CP_RST_CTRL[1] == 1'b1) ? "TRUE" : "FALSE",
            CAL_INIT           =>  CP_CAL_INIT,
            DELAY_STEP_OFFSET  =>  DELAY_STEP_OFFSET,
            DELAY_SEL          =>  CP_DLY_2X,
            FAST_LOCK          => (CP_FAST_LOCK == 1'b1) ? "TRUE" : "FALSE",
            FDIV               =>  CP_FDIV,
            INT_CLK            =>  CP_INT_CLK,
            UPD_DLY            =>  CP_UPD_DLY
        )
        port map (
            DELAY_STEP          =>   DLL_90CODE_GRAY  , 
            DELAY_STEP1[0]      => ntDLL_45CODE_GRAY0 ,
            DELAY_STEP1[1]      => ntDLL_45CODE_GRAY1 ,
            DELAY_STEP1[2]      => ntDLL_45CODE_GRAY2 ,
            DELAY_STEP1[3]      => ntDLL_45CODE_GRAY3 ,
            DELAY_STEP1[4]      => ntDLL_45CODE_GRAY4 ,
            DELAY_STEP1[5]      => ntDLL_45CODE_GRAY5 ,
            DELAY_STEP1[6]      => ntDLL_45CODE_GRAY6 ,
            DELAY_STEP1[7]      => ntDLL_45CODE_GRAY7 ,
            LOCK                =>   DLL_LOCK         ,
            CLKIN               =>   PHY_CLK_B_N      ,
            SYS_CLK             =>   SYSCLK           ,
            PWD                 =>   DLL_FREEZE       ,
            RST                 =>   DLL_RST          ,
            UPDATE_N            =>   UPDATE_N
        );
    }

    operator V_DDC_E2 DDC_E2 
    parameter map (
        GRS_EN          => (CP_RST_CTRL[1] == 1'b1) ? "TRUE" : "FALSE",
        CLKA_GATE_EN    =>  CP_GATE_EN,
        WCLK_DELAY_SEL  =>  CP_WCLKDEL_SEL,
        DDC_MODE        =>  CP_DQS_MODE,
        R_EXTEND        =>  CP_WL_EXTEND,
        DELAY_SEL       =>  CP_DLY_2X,
        IFIFO_GENERIC   =>  CP_IFIFO_GENERIC,
        RADDR_INIT      =>  CP_RD_ADDR_INIT,
        DATA_RATE       =>  CP_LDO_CTRL
    )
    port map
    (
        WCLK             => CLK_W,
        WCLK_DELAY       => CLK_W_DEL,
        DQSI_DELAY       => CLK_DQSI_DEL,
        DQSIB_DELAY      => CLK_DQSIB_DEL,
        DGTS             => DGTS,
        IFIFO_WADDR      => IFIFO_WADDR,
        IFIFO_RADDR      => IFIFO_RADDR,
        READ_VALID       => READ_VALID,
        DQS_DRIFT        => DQS_DRIFT,
        DRIFT_DETECT_ERR => DRIFT_DETECT_ERR,
        DQS_DRIFT_STATUS => DQS_DRIFT_STATUS,
        DQS_SAMPLE       => DQS_SAMPLE,
        RST              => RST_DQS,
        RST_TRAINING_N   => RST_TRAINING_N,
        CLKA             => PHY_CLK_B_N, 
        CLKB             => SYSCLK,
        DQSI             => CLK_DQSI,
        DQSIB            => CLK_DQSIB,
        DELAY_STEP0      => WL_STEP,
        DELAY_STEP1      => DQS_EVEN_CODE,
        DELAY_STEP2      => DQS_ODD_CODE,
        DELAY_STEP3[0]   => ntDLL_45_STEP0,
        DELAY_STEP3[1]   => ntDLL_45_STEP1,
        DELAY_STEP3[2]   => ntDLL_45_STEP2,
        DELAY_STEP3[3]   => ntDLL_45_STEP3,
        DELAY_STEP3[4]   => ntDLL_45_STEP4,
        DELAY_STEP3[5]   => ntDLL_45_STEP5,
        DELAY_STEP3[6]   => ntDLL_45_STEP6,
        DELAY_STEP3[7]   => ntDLL_45_STEP7,
        DELAY_STEP4      => WL_P_DLLCODE,
        DQS_GATE_CTRL    => DQS_GATE_CTRL,
        GATE_SEL         => READ_CLK_CTRL[2],
        CLK_GATE_CTRL    => READ_CLK_CTRL[1:0],
        CLKA_GATE        => GATEI
    );
};
