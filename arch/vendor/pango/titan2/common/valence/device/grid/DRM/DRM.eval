tarted
grid
device DRM
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config bit CP_CSA_POL[2:0] = 3'b000,
        config bit CP_CSB_POL[2:0] = 3'b000,
        config bit CP_MASK[1:0] = 2'b00,
        config string CP_DRM_36K = "FALSE",
        config string CP_GRS_DIS_0 = "FALSE",
        config string CP_GRS_DIS_1 = "FALSE",
        config int CP_DATA_WIDTH_A_0 = 18,
        config int CP_DATA_WIDTH_B_0 = 18,
        config string CP_WRITE_MODE_A_0 = "NORMAL_WRITE",
        config string CP_WRITE_MODE_B_0 = "NORMAL_WRITE",
        config string CP_OUTPUT_REG_A_0 = "DISABLE",
        config string CP_OUTPUT_REG_B_0 = "DISABLE",
        config string CP_RESET_TYPE_0 = "SYNC_RESET",
        config string CP_CLKA_OR_POL_INV_0 = "FALSE",
        config string CP_CLKB_OR_POL_INV_0 = "FALSE",
        config int CP_DATA_WIDTH_A_1 = 18,
        config int CP_DATA_WIDTH_B_1 = 18,
        config string CP_WRITE_MODE_A_1 = "NORMAL_WRITE",
        config string CP_WRITE_MODE_B_1 = "NORMAL_WRITE",
        config string CP_OUTPUT_REG_A_1 = "DISABLE",
        config string CP_OUTPUT_REG_B_1 = "DISABLE",
        config string CP_RESET_TYPE_1 = "SYNC_RESET",
        config string CP_CLKA_OR_POL_INV_1 = "FALSE",
        config string CP_CLKB_OR_POL_INV_1 = "FALSE",
        config bit CP_INIT_00[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_01[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_02[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_03[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_04[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_05[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_06[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_07[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_08[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_09[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_0A[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_0B[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_0C[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_0D[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_0E[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_0F[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_10[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_11[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_12[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_13[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_14[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_15[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_16[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_17[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_18[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_19[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_1A[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_1B[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_1C[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_1D[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_1E[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_1F[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_20[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_21[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_22[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_23[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_24[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_25[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_26[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_27[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_28[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_29[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_2A[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_2B[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_2C[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_2D[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_2E[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_2F[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_30[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_31[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_32[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_33[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_34[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_35[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_36[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_37[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_38[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_39[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_3A[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_3B[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_3C[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_3D[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_3E[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_3F[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_40[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_41[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_42[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_43[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_44[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_45[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_46[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_47[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_48[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_49[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_4A[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_4B[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_4C[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_4D[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_4E[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_4F[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_50[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_51[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_52[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_53[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_54[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_55[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_56[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_57[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_58[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_59[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_5A[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_5B[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_5C[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_5D[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_5E[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_5F[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_60[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_61[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_62[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_63[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_64[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_65[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_66[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_67[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_68[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_69[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_6A[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_6B[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_6C[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_6D[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_6E[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_6F[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_70[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_71[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_72[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_73[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_74[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_75[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_76[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_77[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_78[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_79[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_7A[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_7B[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_7C[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_7D[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_7E[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_7F[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config string CP_DRM_EN_0 = "FALSE",
        config string CP_PICEA_0 = "FALSE",
        config string CP_PICEB_0 = "FALSE",
        config string CP_PIWEA_0 = "FALSE",
        config string CP_PIWEB_0 = "FALSE",
        config string CP_PIOCEA_0 = "FALSE",
        config string CP_PIOCEB_0 = "FALSE",
        config string CP_PICLKA_0 = "FALSE",
        config string CP_PICLKB_0 = "FALSE",
        config string CP_PIRSTA_0 = "FALSE",
        config string CP_PIRSTB_0 = "FALSE",
        config string CP_PIBELA_0 = "FALSE",
        config string CP_PIBELB_0 = "FALSE",
        config string CP_PIBEHA_0 = "FALSE",
        config string CP_PIBEHB_0 = "FALSE",
        config string CP_BELA_SET_0 = "FALSE",
        config string CP_BELB_SET_0 = "FALSE",
        config string CP_BEHA_SET_0 = "FALSE",
        config string CP_BEHB_SET_0 = "FALSE",
        config string CP_DRM_EN_1 = "FALSE",
        config string CP_PICEA_1 = "FALSE",
        config string CP_PICEB_1 = "FALSE",
        config string CP_PIWEA_1 = "FALSE",
        config string CP_PIWEB_1 = "FALSE",
        config string CP_PIOCEA_1 = "FALSE",
        config string CP_PIOCEB_1 = "FALSE",
        config string CP_PICLKA_1 = "FALSE",
        config string CP_PICLKB_1 = "FALSE",
        config string CP_PIRSTA_1 = "FALSE",
        config string CP_PIRSTB_1 = "FALSE",
        config string CP_PIBELA_1 = "FALSE",
        config string CP_PIBELB_1 = "FALSE",
        config string CP_PIBEHA_1 = "FALSE",
        config string CP_PIBEHB_1 = "FALSE",
        config string CP_BELA_SET_1 = "FALSE",
        config string CP_BELB_SET_1 = "FALSE",
        config string CP_BEHA_SET_1 = "FALSE",
        config string CP_BEHB_SET_1 = "FALSE",
        config string CP_FIFO_EN_0 = "FALSE",
        config bit CP_ALMOST_FULL_OFFSET_0[14:0] = 15'b000000000000000,
        config bit CP_ALMOST_EMPTY_OFFSET_0[14:0] = 15'b000000000000000,
        config string CP_SYNC_FIFO_0 = "FALSE",
        config string CP_FLAGEMPTY_EN_0 = "FALSE",
        config string CP_FLAGFULL_EN_0 = "FALSE",
        config string CP_FIFO_EN_1 = "FALSE",
        config bit CP_ALMOST_FULL_OFFSET_1[13:0] = 14'b00000000000000,
        config bit CP_ALMOST_EMPTY_OFFSET_1[13:0] = 14'b00000000000000,
        config string CP_SYNC_FIFO_1 = "FALSE",
        config string CP_FLAGEMPTY_EN_1 = "FALSE",
        config string CP_FLAGFULL_EN_1 = "FALSE",
        config bit CP_SRVAL_A_0[17:0] = 18'h00000,
        config bit CP_SRVAL_A_1[17:0] = 18'h00000,
        config bit CP_SRVAL_B_0[17:0] = 18'h00000,
        config bit CP_SRVAL_B_1[17:0] = 18'h00000,
        config string CP_CAS_EN = "FALSE",
        config string CP_DBW_EN = "FALSE",
        config string CP_DBR_EN = "FALSE",
        config string CP_ECC_WREN = "FALSE",
        config string CP_ECC_RDEN = "FALSE"
    );
    port
    (
// configuration_body_def_on


    config input SC_AF_OFFSET0[14:0] = 15'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_AF_OFFSET0[14],SC_AF_OFFSET0[13],SC_AF_OFFSET0[12],SC_AF_OFFSET0[11],SC_AF_OFFSET0[10],SC_AF_OFFSET0[9],SC_AF_OFFSET0[8],SC_AF_OFFSET0[7],SC_AF_OFFSET0[6],SC_AF_OFFSET0[5],SC_AF_OFFSET0[4],SC_AF_OFFSET0[3],SC_AF_OFFSET0[2],SC_AF_OFFSET0[1],SC_AF_OFFSET0[0]" */,

    config input SC_AE_OFFSET0[14:0] = 15'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_AE_OFFSET0[14],SC_AE_OFFSET0[13],SC_AE_OFFSET0[12],SC_AE_OFFSET0[11],SC_AE_OFFSET0[10],SC_AE_OFFSET0[9],SC_AE_OFFSET0[8],SC_AE_OFFSET0[7],SC_AE_OFFSET0[6],SC_AE_OFFSET0[5],SC_AE_OFFSET0[4],SC_AE_OFFSET0[3],SC_AE_OFFSET0[2],SC_AE_OFFSET0[1],SC_AE_OFFSET0[0]" */,

    config input SC_AF_OFFSET1[13:0] = 14'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_AF_OFFSET1[13],SC_AF_OFFSET1[12],SC_AF_OFFSET1[11],SC_AF_OFFSET1[10],SC_AF_OFFSET1[9],SC_AF_OFFSET1[8],SC_AF_OFFSET1[7],SC_AF_OFFSET1[6],SC_AF_OFFSET1[5],SC_AF_OFFSET1[4],SC_AF_OFFSET1[3],SC_AF_OFFSET1[2],SC_AF_OFFSET1[1],SC_AF_OFFSET1[0]" */,

    config input SC_AE_OFFSET1[13:0] = 14'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_AE_OFFSET1[13],SC_AE_OFFSET1[12],SC_AE_OFFSET1[11],SC_AE_OFFSET1[10],SC_AE_OFFSET1[9],SC_AE_OFFSET1[8],SC_AE_OFFSET1[7],SC_AE_OFFSET1[6],SC_AE_OFFSET1[5],SC_AE_OFFSET1[4],SC_AE_OFFSET1[3],SC_AE_OFFSET1[2],SC_AE_OFFSET1[1],SC_AE_OFFSET1[0]" */,

    config input SC_FIFO_EN[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FIFO_EN[1],SC_FIFO_EN[0]" */,

    config input SC_SYNC_FIFO[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SYNC_FIFO[1],SC_SYNC_FIFO[0]" */,

    config input SC_FLAGEMPTY_EN[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FLAGEMPTY_EN[1],SC_FLAGEMPTY_EN[0]" */,

    config input SC_FLAGFULL_EN[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FLAGFULL_EN[1],SC_FLAGFULL_EN[0]" */,

    config input SC_CAS_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CAS_EN" */,

    config input SC_DBW_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DBW_EN" */,

    config input SC_DBR_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DBR_EN" */,

    config input SC_ECC_WREN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ECC_WREN" */,

    config input SC_ECC_RDEN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ECC_RDEN" */,

    config input SC_PICSA[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICSA[2],SC_PICSA[1],SC_PICSA[0]" */,

    config input SC_PICSB[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICSB[2],SC_PICSB[1],SC_PICSB[0]" */,

    config input SC_DRM_EN[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DRM_EN[1],SC_DRM_EN[0]" */,

    config input SC_OREA[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_OREA[1],SC_OREA[0]" */,

    config input SC_OREB[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_OREB[1],SC_OREB[0]" */,

    config input SC_CKQA_INV[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CKQA_INV[1],SC_CKQA_INV[0]" */,

    config input SC_CKQB_INV[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CKQB_INV[1],SC_CKQB_INV[0]" */,

    config input SC_PICEA[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICEA[1],SC_PICEA[0]" */,

    config input SC_PICEB[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICEB[1],SC_PICEB[0]" */,

    config input SC_PIWEA[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIWEA[1],SC_PIWEA[0]" */,

    config input SC_PIWEB[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIWEB[1],SC_PIWEB[0]" */,

    config input SC_PIOCEA[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIOCEA[1],SC_PIOCEA[0]" */,

    config input SC_PIOCEB[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIOCEB[1],SC_PIOCEB[0]" */,

    config input SC_PICLKA[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICLKA[1],SC_PICLKA[0]" */,

    config input SC_PICLKB[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICLKB[1],SC_PICLKB[0]" */,

    config input SC_PIRSTA[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIRSTA[1],SC_PIRSTA[0]" */,

    config input SC_PIRSTB[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIRSTB[1],SC_PIRSTB[0]" */,

    config input SC_PIBELA[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIBELA[1],SC_PIBELA[0]" */,

    config input SC_PIBELB[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIBELB[1],SC_PIBELB[0]" */,

    config input SC_PIBEHA[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIBEHA[1],SC_PIBEHA[0]" */,

    config input SC_PIBEHB[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIBEHB[1],SC_PIBEHB[0]" */,

    config input SC_BELA_SET[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_BELA_SET[1],SC_BELA_SET[0]" */,

    config input SC_BELB_SET[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_BELB_SET[1],SC_BELB_SET[0]" */,

    config input SC_BEHA_SET[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_BEHA_SET[1],SC_BEHA_SET[0]" */,

    config input SC_BEHB_SET[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_BEHB_SET[1],SC_BEHB_SET[0]" */,

    config input SC_DBLWA[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DBLWA[1],SC_DBLWA[0]" */,

    config input SC_DBLWB[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DBLWB[1],SC_DBLWB[0]" */,

    config input SC_TWA[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TWA[1],SC_TWA[0]" */,

    config input SC_RBWA[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RBWA[1],SC_RBWA[0]" */,

    config input SC_TWB[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TWB[1],SC_TWB[0]" */,

    config input SC_RBWB[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RBWB[1],SC_RBWB[0]" */,

    config input SC_GRS_DIS[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GRS_DIS[1],SC_GRS_DIS[0]" */,

    config input SC_ASYNC[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ASYNC[1],SC_ASYNC[0]" */,

    config input SC_DWA0[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DWA0[3],SC_DWA0[2],SC_DWA0[1],SC_DWA0[0]" */,

    config input SC_DWB0[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DWB0[3],SC_DWB0[2],SC_DWB0[1],SC_DWB0[0]" */,

    config input SC_DWA1[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DWA1[3],SC_DWA1[2],SC_DWA1[1],SC_DWA1[0]" */,

    config input SC_DWB1[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DWB1[3],SC_DWB1[2],SC_DWB1[1],SC_DWB1[0]" */,

    config input SC_DRM_36K = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DRM_36K" */,

    config input SC_SAE_DEL[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SAE_DEL[3],SC_SAE_DEL[2],SC_SAE_DEL[1],SC_SAE_DEL[0]" */,

    config input SC_SAE_PW[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SAE_PW[3],SC_SAE_PW[2],SC_SAE_PW[1],SC_SAE_PW[0]" */,

    config input SC_WR_PW[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_WR_PW[3],SC_WR_PW[2],SC_WR_PW[1],SC_WR_PW[0]" */,

    config input SC_RD_PW[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RD_PW[3],SC_RD_PW[2],SC_RD_PW[1],SC_RD_PW[0]" */,

    config input SC_MASK[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MASK[1],SC_MASK[0]" */,

    config input SC_SRVAL_A0[17:0] = 18'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SRVAL_A0[17],SC_SRVAL_A0[16],SC_SRVAL_A0[15],SC_SRVAL_A0[14],SC_SRVAL_A0[13],SC_SRVAL_A0[12],SC_SRVAL_A0[11],SC_SRVAL_A0[10],SC_SRVAL_A0[9],SC_SRVAL_A0[8],SC_SRVAL_A0[7],SC_SRVAL_A0[6],SC_SRVAL_A0[5],SC_SRVAL_A0[4],SC_SRVAL_A0[3],SC_SRVAL_A0[2],SC_SRVAL_A0[1],SC_SRVAL_A0[0]" */,

    config input SC_SRVAL_A1[17:0] = 18'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SRVAL_A1[17],SC_SRVAL_A1[16],SC_SRVAL_A1[15],SC_SRVAL_A1[14],SC_SRVAL_A1[13],SC_SRVAL_A1[12],SC_SRVAL_A1[11],SC_SRVAL_A1[10],SC_SRVAL_A1[9],SC_SRVAL_A1[8],SC_SRVAL_A1[7],SC_SRVAL_A1[6],SC_SRVAL_A1[5],SC_SRVAL_A1[4],SC_SRVAL_A1[3],SC_SRVAL_A1[2],SC_SRVAL_A1[1],SC_SRVAL_A1[0]" */,

    config input SC_SRVAL_B0[17:0] = 18'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SRVAL_B0[17],SC_SRVAL_B0[16],SC_SRVAL_B0[15],SC_SRVAL_B0[14],SC_SRVAL_B0[13],SC_SRVAL_B0[12],SC_SRVAL_B0[11],SC_SRVAL_B0[10],SC_SRVAL_B0[9],SC_SRVAL_B0[8],SC_SRVAL_B0[7],SC_SRVAL_B0[6],SC_SRVAL_B0[5],SC_SRVAL_B0[4],SC_SRVAL_B0[3],SC_SRVAL_B0[2],SC_SRVAL_B0[1],SC_SRVAL_B0[0]" */,

    config input SC_SRVAL_B1[17:0] = 18'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SRVAL_B1[17],SC_SRVAL_B1[16],SC_SRVAL_B1[15],SC_SRVAL_B1[14],SC_SRVAL_B1[13],SC_SRVAL_B1[12],SC_SRVAL_B1[11],SC_SRVAL_B1[10],SC_SRVAL_B1[9],SC_SRVAL_B1[8],SC_SRVAL_B1[7],SC_SRVAL_B1[6],SC_SRVAL_B1[5],SC_SRVAL_B1[4],SC_SRVAL_B1[3],SC_SRVAL_B1[2],SC_SRVAL_B1[1],SC_SRVAL_B1[0]" */,

    config input SC_WPCT = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_WPCT" */,

// configuration_body_def_end

        input ADA0[14:0] = 15'b1111_1111_1111_111,
        input ADA1[14:0] = 15'b1111_1111_1111_111,
        input ADSA[1:0] = 2'b11,
        input DA0[17:0] = 18'b1111_1111_1111_1111_11,
        input DA1[17:0] = 18'b1111_1111_1111_1111_11,
        input CEA[1:0] = 2'b11,
        input CLKA[1:0] = 2'b11,
        input WEA[1:0] = 2'b11,
        input OCEA[1:0] = 2'b11,
        input RSTA[1:0] = 2'b11,
        input ADB0[14:0] = 15'b1111_1111_1111_111,
        input ADB1[14:0] = 15'b1111_1111_1111_111,
        input ADSB[1:0] = 2'b11,
        input DB0[17:0] = 18'b1111_1111_1111_1111_11,
        input DB1[17:0] = 18'b1111_1111_1111_1111_11,
        input CEB[1:0] = 2'b11,
        input CLKB[1:0] = 2'b11,
        input WEB[1:0] = 2'b11,
        input OCEB[1:0] = 2'b11,
        input RSTB[1:0] = 2'b11,
        input CSA[2:0] = 3'b111,
        input CSB[2:0] = 3'b111,
        input BEA0[1:0] = 2'b11,
        input BEB0[1:0] = 2'b11,
        input BEA1[1:0] = 2'b11,
        input BEB1[1:0] = 2'b11,
        input MADF[6:0] = 7'b1111_111,
        input ADA_CAS = 1'b1,
        input ADB_CAS = 1'b1,
        input X1CASQI_A = 1'b1,
        input X1CASQI_B = 1'b1,
        input ECC_INJ_SBITERR = 1'b1,
        input ECC_INJ_DBITERR = 1'b1,
        input TEST_MODE_N = 1'b1,
        input TEST_RST_N = 1'b1,
        input TEST_SE_N = 1'b1,
        input TEST_SI = 1'b1,
        output QA0[17:0],
        output QB0[17:0],
        output QA1[17:0],
        output QB1[17:0],
        output EMPTY[1:0],
        output FULL[1:0],
        output ALMOST_EMPTY[1:0],
        output ALMOST_FULL[1:0],
        output ECC_PARITY[7:0],
        output ECC_RDADDR[8:0],
        output X1CASQO_A,
        output X1CASQO_B,
        output ECC_SBITERR,
        output ECC_DBITERR,
        output TEST_SO
    );
};
//grid device end

//grid device structure netlist started
structure netlist of DRM
{
    device DRM_INST DRM0;
    device DRM_INST DRM1;
};
//grid device structure netlist end
//grid device configure body started

configuration cfg of DRM
{

 // assign config body begin
    SC_SAE_DEL  :=  4'b0000;
    SC_SAE_PW   :=  4'b0000;
    SC_WR_PW    :=  4'b0000;
    SC_RD_PW    :=  4'b0000;
    SC_WPCT     :=  1'b1;
    SC_MASK   :=  CP_MASK;
    SC_PICSA  :=  CP_CSA_POL;
    SC_PICSB  :=  CP_CSB_POL;
    SC_AF_OFFSET0  :=  CP_ALMOST_FULL_OFFSET_0;
    SC_AE_OFFSET0  :=  CP_ALMOST_EMPTY_OFFSET_0;
    SC_AF_OFFSET1  :=  CP_ALMOST_FULL_OFFSET_1;
    SC_AE_OFFSET1  :=  CP_ALMOST_EMPTY_OFFSET_1;
    SC_SRVAL_A0  :=  CP_SRVAL_A_0;
    SC_SRVAL_A1  :=  CP_SRVAL_A_1;
    SC_SRVAL_B0  :=  CP_SRVAL_B_0;
    SC_SRVAL_B1  :=  CP_SRVAL_B_1;
// assign config body end

//initial config body0 begin
    if (CP_FIFO_EN_0 == "TRUE")
    {
        SC_FIFO_EN[0]  :=  1'b1;
    }
    else if (CP_FIFO_EN_0 == "FALSE")
    {
        SC_FIFO_EN[0]  :=  1'b0;
    }
    else
    {
        SC_FIFO_EN[0]  :=  1'bx;
        error("FIFO EN(%d) is invalid!",CP_FIFO_EN_0);
    }

//initial config body0 end


//initial config body1 begin
    if (CP_FIFO_EN_1 == "TRUE")
    {
        SC_FIFO_EN[1]  :=  1'b1;
    }
    else if (CP_FIFO_EN_1 == "FALSE")
    {
        SC_FIFO_EN[1]  :=  1'b0;
    }
    else
    {
        SC_FIFO_EN[1]  :=  1'bx;
        error("FIFO EN(%d) is invalid!",CP_FIFO_EN_1);
    }

//initial config body1 end


//initial config body2 begin
    if (CP_FLAGEMPTY_EN_0 == "TRUE")
    {
        SC_FLAGEMPTY_EN[0]  :=  1'b1;
    }
    else if (CP_FLAGEMPTY_EN_0 == "FALSE")
    {
        SC_FLAGEMPTY_EN[0]  :=  1'b0;
    }
    else
    {
        SC_FLAGEMPTY_EN[0]  :=  1'bx;
        error("FLAGEMPTY EN(%d) is invalid!",CP_FLAGEMPTY_EN_0);
    }

//initial config body2 end


//initial config body3 begin
    if (CP_FLAGFULL_EN_0 == "TRUE")
    {
        SC_FLAGFULL_EN[0]  :=  1'b1;
    }
    else if (CP_FLAGFULL_EN_0 == "FALSE")
    {
        SC_FLAGFULL_EN[0]  :=  1'b0;
    }
    else
    {
        SC_FLAGFULL_EN[0]  :=  1'bx;
        error("FLAGFULL EN(%d) is invalid!",CP_FLAGFULL_EN_0);
    }

//initial config body3 end


//initial config body4 begin
    if (CP_FLAGEMPTY_EN_1 == "TRUE")
    {
        SC_FLAGEMPTY_EN[1]  :=  1'b1;
    }
    else if (CP_FLAGEMPTY_EN_1 == "FALSE")
    {
        SC_FLAGEMPTY_EN[1]  :=  1'b0;
    }
    else
    {
        SC_FLAGEMPTY_EN[1]  :=  1'bx;
        error("FLAGEMPTY EN(%d) is invalid!",CP_FLAGEMPTY_EN_1);
    }

//initial config body4 end


//initial config body5 begin
    if (CP_FLAGFULL_EN_1 == "TRUE")
    {
        SC_FLAGFULL_EN[1]  :=  1'b1;
    }
    else if (CP_FLAGFULL_EN_1 == "FALSE")
    {
        SC_FLAGFULL_EN[1]  :=  1'b0;
    }
    else
    {
        SC_FLAGFULL_EN[1]  :=  1'bx;
        error("FLAGFULL EN(%d) is invalid!",CP_FLAGFULL_EN_1);
    }

//initial config body5 end


//initial config body6 begin
    if (CP_SYNC_FIFO_0 == "TRUE")
    {
        SC_SYNC_FIFO[0]  :=  1'b1;
    }
    else if (CP_SYNC_FIFO_0 == "FALSE")
    {
        SC_SYNC_FIFO[0]  :=  1'b0;
    }
    else
    {
        SC_SYNC_FIFO[0]  :=  1'bx;
        error("SYNC FIFO SETTING(%d) is invalid!",CP_SYNC_FIFO_0);
    }

//initial config body6 end


//initial config body7 begin
    if (CP_SYNC_FIFO_1 == "TRUE")
    {
        SC_SYNC_FIFO[1]  :=  1'b1;
    }
    else if (CP_SYNC_FIFO_1 == "FALSE")
    {
        SC_SYNC_FIFO[1]  :=  1'b0;
    }
    else
    {
        SC_SYNC_FIFO[1]  :=  1'bx;
        error("SYNC FIFO SETTING(%d) is invalid!",CP_SYNC_FIFO_1);
    }

//initial config body7 end


//initial config body8 begin
    if (CP_DATA_WIDTH_A_0 == 36 || CP_DATA_WIDTH_A_0 == 32)
    {
        SC_DBLWA[0]  :=  1'b1;
        SC_DWA0  :=  4'b0000;
    }
    else if (CP_DATA_WIDTH_A_0 == 18 || CP_DATA_WIDTH_A_0 == 16)
    {
        SC_DBLWA[0]  :=  1'b0;
        SC_DWA0  :=  4'b0000;
    }
    else if (CP_DATA_WIDTH_A_0 == 9 || CP_DATA_WIDTH_A_0 == 8)
    {
        SC_DBLWA[0]  :=  1'b0;
        SC_DWA0  :=  4'b1000;
    }
    else if (CP_DATA_WIDTH_A_0 == 4)
    {
        SC_DBLWA[0]  :=  1'b0;
        SC_DWA0  :=  4'b1100;
    }
    else if (CP_DATA_WIDTH_A_0 == 2)
    {
        SC_DBLWA[0]  :=  1'b0;
        SC_DWA0  :=  4'b1110;
    }
    else if (CP_DATA_WIDTH_A_0 == 1)
    {
        SC_DBLWA[0]  :=  1'b0;
        SC_DWA0  :=  4'b1111;
    }
    else
    {
        SC_DBLWA[0]  :=  1'b0;
        SC_DWA0  :=  4'b0000;
        error("DATA WIDTH(%d) is invalid!",CP_DATA_WIDTH_A_0);
    }

//initial config body8 end


//initial config body9 begin
    if (CP_DATA_WIDTH_B_0 == 36 || CP_DATA_WIDTH_B_0 == 32)
    {
        SC_DBLWB[0]  :=  1'b1;
        SC_DWB0  :=  4'b0000;
    }
    else if (CP_DATA_WIDTH_B_0 == 18 || CP_DATA_WIDTH_B_0 == 16)
    {
        SC_DBLWB[0]  :=  1'b0;
        SC_DWB0  :=  4'b0000;
    }
    else if (CP_DATA_WIDTH_B_0 == 9 || CP_DATA_WIDTH_B_0 == 8)
    {
        SC_DBLWB[0]  :=  1'b0;
        SC_DWB0  :=  4'b1000;
    }
    else if (CP_DATA_WIDTH_B_0 == 4)
    {
        SC_DBLWB[0]  :=  1'b0;
        SC_DWB0  :=  4'b1100;
    }
    else if (CP_DATA_WIDTH_B_0 == 2)
    {
        SC_DBLWB[0]  :=  1'b0;
        SC_DWB0  :=  4'b1110;
    }
    else if (CP_DATA_WIDTH_B_0 == 1)
    {
        SC_DBLWB[0]  :=  1'b0;
        SC_DWB0  :=  4'b1111;
    }
    else
    {
        error("DATA WIDTH(%d) is invalid!",CP_DATA_WIDTH_B_0);
    }

//initial config body9 end


//initial config body10 begin
    if (CP_WRITE_MODE_A_0 == "NORMAL_WRITE")
    {
        SC_TWA[0]  :=  1'b0;
        SC_RBWA[0]  :=  1'b0;
    }
    else if (CP_WRITE_MODE_A_0 == "TRANSPARENT_WRITE")
    {
        SC_TWA[0]  :=  1'b1;
        SC_RBWA[0]  :=  1'b0;
    }
    else if (CP_WRITE_MODE_A_0 == "READ_BEFORE_WRITE")
    {
        SC_TWA[0]  :=  1'b0;
        SC_RBWA[0]  :=  1'b1;
    }
    else
    {
        SC_TWA[0]  :=  1'b0;
        SC_RBWA[0]  :=  1'b0;
        error("WRITE MODE A(%d) is invalid!",CP_WRITE_MODE_A_0);
    }

//initial config body10 end


//initial config body11 begin
    if (CP_WRITE_MODE_B_0 == "NORMAL_WRITE")
    {
        SC_TWB[0]  :=  1'b0;
        SC_RBWB[0]  :=  1'b0;
    }
    else if (CP_WRITE_MODE_B_0 == "TRANSPARENT_WRITE")
    {
        SC_TWB[0]  :=  1'b1;
        SC_RBWB[0]  :=  1'b0;
    }
    else if (CP_WRITE_MODE_B_0 == "READ_BEFORE_WRITE")
    {
        SC_TWB[0]  :=  1'b0;
        SC_RBWB[0]  :=  1'b1;
    }
    else
    {
        SC_TWB[0]  :=  1'b0;
        SC_RBWB[0]  :=  1'b0;
        error("WRITE MODE B(%d) is invalid!",CP_WRITE_MODE_B_0);
    }

//initial config body11 end


//initial config body12 begin
    if (CP_OUTPUT_REG_A_0 == "ENABLE")
    {
        SC_OREA[0]  :=  1'b1;
    }
    else if (CP_OUTPUT_REG_A_0 == "DISABLE")
    {
        SC_OREA[0]  :=  1'b0;
    }
    else
    {
        SC_OREA[0]  :=  1'bx;
        error("OUTPUT REG(%d) is invalid!",CP_OUTPUT_REG_A_0);
    }

//initial config body12 end


//initial config body13 begin
    if (CP_OUTPUT_REG_B_0 == "ENABLE")
    {
        SC_OREB[0]  :=  1'b1;
    }
    else if (CP_OUTPUT_REG_B_0 == "DISABLE")
    {
        SC_OREB[0]  :=  1'b0;
    }
    else
    {
        SC_OREB[0]  :=  1'bx;
        error("OUTPUT REG(%d) is invalid!",CP_OUTPUT_REG_B_0);
    }

//initial config body13 end


//initial config body14 begin
    if (CP_RESET_TYPE_0 == "ASYNC_RESET")
    {
        SC_ASYNC[0]  :=  1'b1;
    }
    else if (CP_RESET_TYPE_0 == "SYNC_RESET")
    {
        SC_ASYNC[0]  :=  1'b0;
    }
    else
    {
        SC_ASYNC[0]  :=  1'b0;
        error("RESET TYPE(%d) is invalid!",CP_RESET_TYPE_0);
    }

//initial config body14 end


//initial config body15 begin
    if (CP_CLKA_OR_POL_INV_0 == "TRUE")
    {
        SC_CKQA_INV[0]  :=  1'b1;
    }
    else if (CP_CLKA_OR_POL_INV_0 == "FALSE")
    {
        SC_CKQA_INV[0]  :=  1'b0;
    }
    else
    {
        SC_CKQA_INV[0]  :=  1'bx;
        error("CLKA OR POL INV(%d) is invalid!",CP_CLKA_OR_POL_INV_0);
    }

//initial config body15 end


//initial config body16 begin
    if (CP_CLKB_OR_POL_INV_0 == "TRUE")
    {
        SC_CKQB_INV[0]  :=  1'b1;
    }
    else if (CP_CLKB_OR_POL_INV_0 == "FALSE")
    {
        SC_CKQB_INV[0]  :=  1'b0;
    }
    else
    {
        SC_CKQB_INV[0]  :=  1'bx;
        error("CLKB OR POL INV(%d) is invalid!",CP_CLKB_OR_POL_INV_0);
    }

//initial config body16 end


//initial config body17 begin
    if (CP_DRM_EN_0 == "TRUE")
    {
        SC_DRM_EN[0]  :=  1'b1;
    }
    else if (CP_DRM_EN_0 == "FALSE")
    {
        SC_DRM_EN[0]  :=  1'b0;
    }
    else
    {
        SC_DRM_EN[0]  :=  1'bx;
        error("DRM_EN(%d) is invalid!",CP_DRM_EN_0);
    }

//initial config body17 end


//initial config body18 begin
    if (CP_PICEA_0 == "TRUE")
    {
        SC_PICEA[0]  :=  1'b1;
    }
    else if (CP_PICEA_0 == "FALSE")
    {
        SC_PICEA[0]  :=  1'b0;
    }
    else
    {
        SC_PICEA[0]  :=  1'bx;
        error("PICEA(%d) is invalid!",CP_PICEA_0);
    }

//initial config body18 end


//initial config body19 begin
    if (CP_PICEB_0 == "TRUE")
    {
        SC_PICEB[0]  :=  1'b1;
    }
    else if (CP_PICEB_0 == "FALSE")
    {
        SC_PICEB[0]  :=  1'b0;
    }
    else
    {
        SC_PICEB[0]  :=  1'bx;
        error("PICEB(%d) is invalid!",CP_PICEB_0);
    }

//initial config body19 end


//initial config body20 begin
    if (CP_PIWEA_0 == "TRUE")
    {
        SC_PIWEA[0]  :=  1'b1;
    }
    else if (CP_PIWEA_0 == "FALSE")
    {
        SC_PIWEA[0]  :=  1'b0;
    }
    else
    {
        SC_PIWEA[0]  :=  1'bx;
        error("PIWEA(%d) is invalid!",CP_PIWEA_0);
    }

//initial config body20 end


//initial config body21 begin
    if (CP_PIWEB_0 == "TRUE")
    {
        SC_PIWEB[0]  :=  1'b1;
    }
    else if (CP_PIWEB_0 == "FALSE")
    {
        SC_PIWEB[0]  :=  1'b0;
    }
    else
    {
        SC_PIWEB[0]  :=  1'bx;
        error("PIWEB(%d) is invalid!",CP_PIWEB_0);
    }

//initial config body21 end


//initial config body22 begin
    if (CP_PIOCEA_0 == "TRUE")
    {
        SC_PIOCEA[0]  :=  1'b1;
    }
    else if (CP_PIOCEA_0 == "FALSE")
    {
        SC_PIOCEA[0]  :=  1'b0;
    }
    else
    {
        SC_PIOCEA[0]  :=  1'bx;
        error("PIOCEA(%d) is invalid!",CP_PIOCEA_0);
    }

//initial config body22 end


//initial config body23 begin
    if (CP_PIOCEB_0 == "TRUE")
    {
        SC_PIOCEB[0]  :=  1'b1;
    }
    else if (CP_PIOCEB_0 == "FALSE")
    {
        SC_PIOCEB[0]  :=  1'b0;
    }
    else
    {
        SC_PIOCEB[0]  :=  1'bx;
        error("PIOCEB(%d) is invalid!",CP_PIOCEB_0);
    }

//initial config body23 end


//initial config body24 begin
    if (CP_PICLKA_0 == "TRUE")
    {
        SC_PICLKA[0]  :=  1'b1;
    }
    else if (CP_PICLKA_0 == "FALSE")
    {
        SC_PICLKA[0]  :=  1'b0;
    }
    else
    {
        SC_PICLKA[0]  :=  1'bx;
        error("PICLKA(%d) is invalid!",CP_PICLKA_0);
    }

//initial config body24 end


//initial config body25 begin
    if (CP_PICLKB_0 == "TRUE")
    {
        SC_PICLKB[0]  :=  1'b1;
    }
    else if (CP_PICLKB_0 == "FALSE")
    {
        SC_PICLKB[0]  :=  1'b0;
    }
    else
    {
        SC_PICLKB[0]  :=  1'bx;
        error("PICLKB(%d) is invalid!",CP_PICLKB_0);
    }

//initial config body25 end


//initial config body26 begin
    if (CP_PIRSTA_0 == "TRUE")
    {
        SC_PIRSTA[0]  :=  1'b1;
    }
    else if (CP_PIRSTA_0 == "FALSE")
    {
        SC_PIRSTA[0]  :=  1'b0;
    }
    else
    {
        SC_PIRSTA[0]  :=  1'bx;
        error("PIRSTA(%d) is invalid!",CP_PIRSTA_0);
    }

//initial config body26 end


//initial config body27 begin
    if (CP_PIRSTB_0 == "TRUE")
    {
        SC_PIRSTB[0]  :=  1'b1;
    }
    else if (CP_PIRSTB_0 == "FALSE")
    {
        SC_PIRSTB[0]  :=  1'b0;
    }
    else
    {
        SC_PIRSTB[0]  :=  1'bx;
        error("PIRSTB(%d) is invalid!",CP_PIRSTB_0);
    }

//initial config body27 end


//initial config body28 begin
    if (CP_PIBELA_0 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_0<16)
        {
            error("PIBELA(%d) is invalid!",CP_PIBELA_0);
        }
        else
        {
            SC_PIBELA[0]  :=  1'b1;
        }

    }
    else if (CP_PIBELA_0 == "FALSE")
    {
        SC_PIBELA[0]  :=  1'b0;
    }
    else
    {
        SC_PIBELA[0]  :=  1'bx;
        error("PIBELA(%d) is invalid!",CP_PIBELA_0);
    }

//initial config body28 end


//initial config body29 begin
    if (CP_PIBELB_0 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_0<32)
        {
            if(CP_DATA_WIDTH_B_0<16)
            {
                error("PIBELB(%d) is invalid!",CP_PIBELB_0);
            }
            else
            {
                SC_PIBELB[0]  :=  1'b1;
            }

        }
        else
        {
            SC_PIBELB[0]  :=  1'b1;
        }

    }
    else if (CP_PIBELB_0 == "FALSE")
    {
        SC_PIBELB[0]  :=  1'b0;
    }
    else
    {
        SC_PIBELB[0]  :=  1'bx;
        error("PIBELB(%d) is invalid!",CP_PIBELB_0);
    }

//initial config body29 end


//initial config body30 begin
    if (CP_PIBEHA_0 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_0<16)
        {
            error("PIBEHA(%d) is invalid!",CP_PIBEHA_0);
        }
        else
        {
            SC_PIBEHA[0]  :=  1'b1;
        }

    }
    else if (CP_PIBEHA_0 == "FALSE")
    {
        SC_PIBEHA[0]  :=  1'b0;
    }
    else
    {
        SC_PIBEHA[0]  :=  1'bx;
        error("PIBEHA(%d) is invalid!",CP_PIBEHA_0);
    }

//initial config body30 end


//initial config body31 begin
    if (CP_PIBEHB_0 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_0<32)
        {
            if(CP_DATA_WIDTH_B_0<16)
            {
                error("PIBEHB(%d) is invalid!",CP_PIBEHB_0);
            }
            else
            {
                SC_PIBEHB[0]  :=  1'b1;
            }

        }
        else
        {
            SC_PIBEHB[0]  :=  1'b1;
        }

    }
    else if (CP_PIBEHB_0 == "FALSE")
    {
        SC_PIBEHB[0]  :=  1'b0;
    }
    else
    {
        SC_PIBEHB[0]  :=  1'bx;
        error("PIBEHB(%d) is invalid!",CP_PIBEHB_0);
    }

//initial config body31 end


//initial config body32 begin
    if (CP_BEHA_SET_0 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_0<16)
        {
            error("BEHA_SET(%d) is invalid!",CP_BEHA_SET_0);
        }
        else
        {
            SC_BEHA_SET[0]  :=  1'b1;
        }

    }
    else if (CP_BEHA_SET_0 == "FALSE")
    {
        SC_BEHA_SET[0]  :=  1'b0;
    }
    else
    {
        SC_BEHA_SET[0]  :=  1'bx;
        error("BEHA_SET(%d) is invalid!",CP_BEHA_SET_0);
    }

//initial config body32 end


//initial config body33 begin
    if (CP_BEHB_SET_0 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_0<32)
        {
            if(CP_DATA_WIDTH_B_0<16)
            {
                error("BEHB_SET(%d) is invalid!",CP_BEHB_SET_0);
            }
            else
            {
                SC_BEHB_SET[0]  :=  1'b1;
            }

        }
        else
        {
            SC_BEHB_SET[0]  :=  1'b1;
        }

    }
    else if (CP_BEHB_SET_0 == "FALSE")
    {
        SC_BEHB_SET[0]  :=  1'b0;
    }
    else
    {
        SC_BEHB_SET[0]  :=  1'bx;
        error("BEHB_SET(%d) is invalid!",CP_BEHB_SET_0);
    }

//initial config body33 end


//initial config body34 begin
    if (CP_BELA_SET_0 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_0<16)
        {
            error("BELA_SET(%d) is invalid!",CP_BELA_SET_0);
        }
        else
        {
            SC_BELA_SET[0]  :=  1'b1;
        }

    }
    else if (CP_BELA_SET_0 == "FALSE")
    {
        SC_BELA_SET[0]  :=  1'b0;
    }
    else
    {
        SC_BELA_SET[0]  :=  1'bx;
        error("BELA_SET(%d) is invalid!",CP_BELA_SET_0);
    }

//initial config body34 end


//initial config body35 begin
    if (CP_BELB_SET_0 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_0<32)
        {
            if(CP_DATA_WIDTH_B_0<16)
            {
                error("BELB_SET(%d) is invalid!",CP_BELB_SET_0);
            }
            else
            {
                SC_BELB_SET[0]  :=  1'b1;
            }

        }
        else
        {
            SC_BELB_SET[0]  :=  1'b1;
        }

    }
    else if (CP_BELB_SET_0 == "FALSE")
    {
        SC_BELB_SET[0]  :=  1'b0;
    }
    else
    {
        SC_BELB_SET[0]  :=  1'bx;
        error("BELB_SET(%d) is invalid!",CP_BELB_SET_0);
    }

//initial config body35 end


//initial config body36 begin
    if (CP_GRS_DIS_0 == "TRUE")
    {
        SC_GRS_DIS[0]  :=  1'b1;
    }
    else if (CP_GRS_DIS_0 == "FALSE")
    {
        SC_GRS_DIS[0]  :=  1'b0;
    }
    else
    {
        SC_GRS_DIS[0]  :=  1'bx;
        error("GRS_DIS(%d) is invalid!",CP_GRS_DIS_0);
    }

//initial config body36 end


//initial config body37 begin
    if (CP_DATA_WIDTH_A_1 == 36 || CP_DATA_WIDTH_A_1 == 32)
    {
        SC_DBLWA[1]  :=  1'b1;
        SC_DWA1  :=  4'b0000;
    }
    else if (CP_DATA_WIDTH_A_1 == 18 || CP_DATA_WIDTH_A_1 == 16)
    {
        SC_DBLWA[1]  :=  1'b0;
        SC_DWA1  :=  4'b0000;
    }
    else if (CP_DATA_WIDTH_A_1 == 9 || CP_DATA_WIDTH_A_1 == 8)
    {
        SC_DBLWA[1]  :=  1'b0;
        SC_DWA1  :=  4'b1000;
    }
    else if (CP_DATA_WIDTH_A_1 == 4)
    {
        SC_DBLWA[1]  :=  1'b0;
        SC_DWA1  :=  4'b1100;
    }
    else if (CP_DATA_WIDTH_A_1 == 2)
    {
        SC_DBLWA[1]  :=  1'b0;
        SC_DWA1  :=  4'b1110;
    }
    else if (CP_DATA_WIDTH_A_1 == 1)
    {
        SC_DBLWA[1]  :=  1'b0;
        SC_DWA1  :=  4'b1111;
    }
    else
    {
        SC_DBLWA[1]  :=  1'b0;
        SC_DWA1  :=  4'b0000;
        error("DATA WIDTH(%d) is invalid!",CP_DATA_WIDTH_A_1);
    }

//initial config body37 end


//initial config body38 begin
    if (CP_DATA_WIDTH_B_1 == 36 || CP_DATA_WIDTH_B_1 == 32)
    {
        SC_DBLWB[1]  :=  1'b1;
        SC_DWB1  :=  4'b0000;
    }
    else if (CP_DATA_WIDTH_B_1 == 18 || CP_DATA_WIDTH_B_1 == 16)
    {
        SC_DBLWB[1]  :=  1'b0;
        SC_DWB1  :=  4'b0000;
    }
    else if (CP_DATA_WIDTH_B_1 == 9 || CP_DATA_WIDTH_B_1 == 8)
    {
        SC_DBLWB[1]  :=  1'b0;
        SC_DWB1  :=  4'b1000;
    }
    else if (CP_DATA_WIDTH_B_1 == 4)
    {
        SC_DBLWB[1]  :=  1'b0;
        SC_DWB1  :=  4'b1100;
    }
    else if (CP_DATA_WIDTH_B_1 == 2)
    {
        SC_DBLWB[1]  :=  1'b0;
        SC_DWB1  :=  4'b1110;
    }
    else if (CP_DATA_WIDTH_B_1 == 1)
    {
        SC_DBLWB[1]  :=  1'b0;
        SC_DWB1  :=  4'b1111;
    }
    else
    {
        error("DATA WIDTH(%d) is invalid!",CP_DATA_WIDTH_B_1);
    }

//initial config body38 end


//initial config body39 begin
    if (CP_WRITE_MODE_A_1 == "NORMAL_WRITE")
    {
        SC_TWA[1]  :=  1'b0;
        SC_RBWA[1]  :=  1'b0;
    }
    else if (CP_WRITE_MODE_A_1 == "TRANSPARENT_WRITE")
    {
        SC_TWA[1]  :=  1'b1;
        SC_RBWA[1]  :=  1'b0;
    }
    else if (CP_WRITE_MODE_A_1 == "READ_BEFORE_WRITE")
    {
        SC_TWA[1]  :=  1'b0;
        SC_RBWA[1]  :=  1'b1;
    }
    else
    {
        SC_TWA[1]  :=  1'b0;
        SC_RBWA[1]  :=  1'b0;
        error("WRITE MODE A(%d) is invalid!",CP_WRITE_MODE_A_1);
    }

//initial config body39 end


//initial config body40 begin
    if (CP_WRITE_MODE_B_1 == "NORMAL_WRITE")
    {
        SC_TWB[1]  :=  1'b0;
        SC_RBWB[1]  :=  1'b0;
    }
    else if (CP_WRITE_MODE_B_1 == "TRANSPARENT_WRITE")
    {
        SC_TWB[1]  :=  1'b1;
        SC_RBWB[1]  :=  1'b0;
    }
    else if (CP_WRITE_MODE_B_1 == "READ_BEFORE_WRITE")
    {
        SC_TWB[1]  :=  1'b0;
        SC_RBWB[1]  :=  1'b1;
    }
    else
    {
        SC_TWB[1]  :=  1'b0;
        SC_RBWB[1]  :=  1'b0;
        error("WRITE MODE B(%d) is invalid!",CP_WRITE_MODE_B_1);
    }

//initial config body40 end


//initial config body41 begin
    if (CP_OUTPUT_REG_A_1 == "ENABLE")
    {
        SC_OREA[1]  :=  1'b1;
    }
    else if (CP_OUTPUT_REG_A_1 == "DISABLE")
    {
        SC_OREA[1]  :=  1'b0;
    }
    else
    {
        SC_OREA[1]  :=  1'bx;
        error("OUTPUT REG(%d) is invalid!",CP_OUTPUT_REG_A_1);
    }

//initial config body41 end


//initial config body42 begin
    if (CP_OUTPUT_REG_B_1 == "ENABLE")
    {
        SC_OREB[1]  :=  1'b1;
    }
    else if (CP_OUTPUT_REG_B_1 == "DISABLE")
    {
        SC_OREB[1]  :=  1'b0;
    }
    else
    {
        SC_OREB[1]  :=  1'bx;
        error("OUTPUT REG(%d) is invalid!",CP_OUTPUT_REG_B_1);
    }

//initial config body42 end


//initial config body43 begin
    if (CP_RESET_TYPE_1 == "ASYNC_RESET")
    {
        SC_ASYNC[1]  :=  1'b1;
    }
    else if (CP_RESET_TYPE_1 == "SYNC_RESET")
    {
        SC_ASYNC[1]  :=  1'b0;
    }
    else
    {
        SC_ASYNC[1]  :=  1'b0;
        error("RESET TYPE(%d) is invalid!",CP_RESET_TYPE_1);
    }

//initial config body43 end


//initial config body44 begin
    if (CP_CLKA_OR_POL_INV_1 == "TRUE")
    {
        SC_CKQA_INV[1]  :=  1'b1;
    }
    else if (CP_CLKA_OR_POL_INV_1 == "FALSE")
    {
        SC_CKQA_INV[1]  :=  1'b0;
    }
    else
    {
        SC_CKQA_INV[1]  :=  1'bx;
        error("CLKA OR POL INV(%d) is invalid!",CP_CLKA_OR_POL_INV_1);
    }

//initial config body44 end


//initial config body45 begin
    if (CP_CLKB_OR_POL_INV_1 == "TRUE")
    {
        SC_CKQB_INV[1]  :=  1'b1;
    }
    else if (CP_CLKB_OR_POL_INV_1 == "FALSE")
    {
        SC_CKQB_INV[1]  :=  1'b0;
    }
    else
    {
        SC_CKQB_INV[1]  :=  1'bx;
        error("CLKB OR POL INV(%d) is invalid!",CP_CLKB_OR_POL_INV_1);
    }

//initial config body45 end


//initial config body46 begin
    if (CP_DRM_EN_1 == "TRUE")
    {
        SC_DRM_EN[1]  :=  1'b1;
    }
    else if (CP_DRM_EN_1 == "FALSE")
    {
        SC_DRM_EN[1]  :=  1'b0;
    }
    else
    {
        SC_DRM_EN[1]  :=  1'bx;
        error("DRM_EN(%d) is invalid!",CP_DRM_EN_1);
    }

//initial config body46 end


//initial config body47 begin
    if (CP_PICEA_1 == "TRUE")
    {
        SC_PICEA[1]  :=  1'b1;
    }
    else if (CP_PICEA_1 == "FALSE")
    {
        SC_PICEA[1]  :=  1'b0;
    }
    else
    {
        SC_PICEA[1]  :=  1'bx;
        error("PICEA(%d) is invalid!",CP_PICEA_1);
    }

//initial config body47 end


//initial config body48 begin
    if (CP_PICEB_1 == "TRUE")
    {
        SC_PICEB[1]  :=  1'b1;
    }
    else if (CP_PICEB_1 == "FALSE")
    {
        SC_PICEB[1]  :=  1'b0;
    }
    else
    {
        SC_PICEB[1]  :=  1'bx;
        error("PICEB(%d) is invalid!",CP_PICEB_1);
    }

//initial config body48 end


//initial config body49 begin
    if (CP_PIWEA_1 == "TRUE")
    {
        SC_PIWEA[1]  :=  1'b1;
    }
    else if (CP_PIWEA_1 == "FALSE")
    {
        SC_PIWEA[1]  :=  1'b0;
    }
    else
    {
        SC_PIWEA[1]  :=  1'bx;
        error("PIWEA(%d) is invalid!",CP_PIWEA_1);
    }

//initial config body49 end


//initial config body50 begin
    if (CP_PIWEB_1 == "TRUE")
    {
        SC_PIWEB[1]  :=  1'b1;
    }
    else if (CP_PIWEB_1 == "FALSE")
    {
        SC_PIWEB[1]  :=  1'b0;
    }
    else
    {
        SC_PIWEB[1]  :=  1'bx;
        error("PIWEB(%d) is invalid!",CP_PIWEB_1);
    }

//initial config body50 end


//initial config body51 begin
    if (CP_PIOCEA_1 == "TRUE")
    {
        SC_PIOCEA[1]  :=  1'b1;
    }
    else if (CP_PIOCEA_1 == "FALSE")
    {
        SC_PIOCEA[1]  :=  1'b0;
    }
    else
    {
        SC_PIOCEA[1]  :=  1'bx;
        error("PIOCEA(%d) is invalid!",CP_PIOCEA_1);
    }

//initial config body51 end


//initial config body52 begin
    if (CP_PIOCEB_1 == "TRUE")
    {
        SC_PIOCEB[1]  :=  1'b1;
    }
    else if (CP_PIOCEB_1 == "FALSE")
    {
        SC_PIOCEB[1]  :=  1'b0;
    }
    else
    {
        SC_PIOCEB[1]  :=  1'bx;
        error("PIOCEB(%d) is invalid!",CP_PIOCEB_1);
    }

//initial config body52 end


//initial config body53 begin
    if (CP_PICLKA_1 == "TRUE")
    {
        SC_PICLKA[1]  :=  1'b1;
    }
    else if (CP_PICLKA_1 == "FALSE")
    {
        SC_PICLKA[1]  :=  1'b0;
    }
    else
    {
        SC_PICLKA[1]  :=  1'bx;
        error("PICLKA(%d) is invalid!",CP_PICLKA_1);
    }

//initial config body53 end


//initial config body54 begin
    if (CP_PICLKB_1 == "TRUE")
    {
        SC_PICLKB[1]  :=  1'b1;
    }
    else if (CP_PICLKB_1 == "FALSE")
    {
        SC_PICLKB[1]  :=  1'b0;
    }
    else
    {
        SC_PICLKB[1]  :=  1'bx;
        error("PICLKB(%d) is invalid!",CP_PICLKB_1);
    }

//initial config body54 end


//initial config body55 begin
    if (CP_PIRSTA_1 == "TRUE")
    {
        SC_PIRSTA[1]  :=  1'b1;
    }
    else if (CP_PIRSTA_1 == "FALSE")
    {
        SC_PIRSTA[1]  :=  1'b0;
    }
    else
    {
        SC_PIRSTA[1]  :=  1'bx;
        error("PIRSTA(%d) is invalid!",CP_PIRSTA_1);
    }

//initial config body55 end


//initial config body56 begin
    if (CP_PIRSTB_1 == "TRUE")
    {
        SC_PIRSTB[1]  :=  1'b1;
    }
    else if (CP_PIRSTB_1 == "FALSE")
    {
        SC_PIRSTB[1]  :=  1'b0;
    }
    else
    {
        SC_PIRSTB[1]  :=  1'bx;
        error("PIRSTB(%d) is invalid!",CP_PIRSTB_1);
    }

//initial config body56 end


//initial config body57 begin
    if (CP_PIBELA_1 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_1<16)
        {
            error("PIBELA(%d) is invalid!",CP_PIBELA_1);
        }
        else
        {
            SC_PIBELA[1]  :=  1'b1;
        }

    }
    else if (CP_PIBELA_1 == "FALSE")
    {
        SC_PIBELA[1]  :=  1'b0;
    }
    else
    {
        SC_PIBELA[1]  :=  1'bx;
        error("PIBELA(%d) is invalid!",CP_PIBELA_1);
    }

//initial config body57 end


//initial config body58 begin
    if (CP_PIBELB_1 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_1<32)
        {
            if(CP_DATA_WIDTH_B_1<16)
            {
                error("PIBELB(%d) is invalid!",CP_PIBELB_1);
            }
            else
            {
                SC_PIBELB[1]  :=  1'b1;
            }

        }
        else
        {
            SC_PIBELB[1]  :=  1'b1;
        }

    }
    else if (CP_PIBELB_1 == "FALSE")
    {
        SC_PIBELB[1]  :=  1'b0;
    }
    else
    {
        SC_PIBELB[1]  :=  1'bx;
        error("PIBELB(%d) is invalid!",CP_PIBELB_1);
    }

//initial config body58 end


//initial config body59 begin
    if (CP_PIBEHA_1 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_1<16)
        {
            error("PIBEHA(%d) is invalid!",CP_PIBEHA_1);
        }
        else
        {
            SC_PIBEHA[1]  :=  1'b1;
        }

    }
    else if (CP_PIBEHA_1 == "FALSE")
    {
        SC_PIBEHA[1]  :=  1'b0;
    }
    else
    {
        SC_PIBEHA[1]  :=  1'bx;
        error("PIBEHA(%d) is invalid!",CP_PIBEHA_1);
    }

//initial config body59 end


//initial config body60 begin
    if (CP_PIBEHB_1 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_1<32)
        {
            if(CP_DATA_WIDTH_B_1<16)
            {
                error("PIBEHB(%d) is invalid!",CP_PIBEHB_1);
            }
            else
            {
                SC_PIBEHB[1]  :=  1'b1;
            }

        }
        else
        {
            SC_PIBEHB[1]  :=  1'b1;
        }

    }
    else if (CP_PIBEHB_1 == "FALSE")
    {
        SC_PIBEHB[1]  :=  1'b0;
    }
    else
    {
        SC_PIBEHB[1]  :=  1'bx;
        error("PIBEHB(%d) is invalid!",CP_PIBEHB_1);
    }

//initial config body60 end


//initial config body61 begin
    if (CP_BEHA_SET_1 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_1<16)
        {
            error("BEHA_SET(%d) is invalid!",CP_BEHA_SET_1);
        }
        else
        {
            SC_BEHA_SET[1]  :=  1'b1;
        }

    }
    else if (CP_BEHA_SET_1 == "FALSE")
    {
        SC_BEHA_SET[1]  :=  1'b0;
    }
    else
    {
        SC_BEHA_SET[1]  :=  1'bx;
        error("BEHA_SET(%d) is invalid!",CP_BEHA_SET_1);
    }

//initial config body61 end


//initial config body62 begin
    if (CP_BEHB_SET_1 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_1<32)
        {
            if(CP_DATA_WIDTH_B_1<16)
            {
                error("BEHB_SET(%d) is invalid!",CP_BEHB_SET_1);
            }
            else
            {
                SC_BEHB_SET[1]  :=  1'b1;
            }

        }
        else
        {
            SC_BEHB_SET[1]  :=  1'b1;
        }

    }
    else if (CP_BEHB_SET_1 == "FALSE")
    {
        SC_BEHB_SET[1]  :=  1'b0;
    }
    else
    {
        SC_BEHB_SET[1]  :=  1'bx;
        error("BEHB_SET(%d) is invalid!",CP_BEHB_SET_1);
    }

//initial config body62 end


//initial config body63 begin
    if (CP_BELA_SET_1 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_1<16)
        {
            error("BELA_SET(%d) is invalid!",CP_BELA_SET_1);
        }
        else
        {
            SC_BELA_SET[1]  :=  1'b1;
        }

    }
    else if (CP_BELA_SET_1 == "FALSE")
    {
        SC_BELA_SET[1]  :=  1'b0;
    }
    else
    {
        SC_BELA_SET[1]  :=  1'bx;
        error("BELA_SET(%d) is invalid!",CP_BELA_SET_1);
    }

//initial config body63 end


//initial config body64 begin
    if (CP_BELB_SET_1 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_1<32)
        {
            if(CP_DATA_WIDTH_B_1<16)
            {
                error("BELB_SET(%d) is invalid!",CP_BELB_SET_1);
            }
            else
            {
                SC_BELB_SET[1]  :=  1'b1;
            }

        }
        else
        {
            SC_BELB_SET[1]  :=  1'b1;
        }

    }
    else if (CP_BELB_SET_1 == "FALSE")
    {
        SC_BELB_SET[1]  :=  1'b0;
    }
    else
    {
        SC_BELB_SET[1]  :=  1'bx;
        error("BELB_SET(%d) is invalid!",CP_BELB_SET_1);
    }

//initial config body64 end


//initial config body65 begin
    if (CP_GRS_DIS_1 == "TRUE")
    {
        SC_GRS_DIS[1]  :=  1'b1;
    }
    else if (CP_GRS_DIS_1 == "FALSE")
    {
        SC_GRS_DIS[1]  :=  1'b0;
    }
    else
    {
        SC_GRS_DIS[1]  :=  1'bx;
        error("GRS_DIS(%d) is invalid!",CP_GRS_DIS_1);
    }

//initial config body65 end


//initial config body66 begin
    if (CP_DRM_36K == "TRUE")
    {
        SC_DRM_36K  :=  1'b1;
    }
    else if (CP_DRM_36K == "FALSE")
    {
        SC_DRM_36K  :=  1'b0;
    }
    else
    {
        SC_DRM_36K  :=  1'bx;
        error("36K mode EN(%d) is invalid!",CP_DRM_36K);
    }

//initial config body66 end


//initial config body67 begin
    if (CP_CAS_EN == "TRUE")
    {
        SC_CAS_EN  :=  1'b1;
    }
    else if (CP_CAS_EN == "FALSE")
    {
        SC_CAS_EN  :=  1'b0;
    }
    else
    {
        SC_CAS_EN  :=  1'bx;
        error("9K mode EN(%d) is invalid!",CP_CAS_EN);
    }

//initial config body67 end


//initial config body68 begin
    if (CP_DBW_EN == "TRUE")
    {
        SC_DBW_EN  :=  1'b1;
    }
    else if (CP_DBW_EN == "FALSE")
    {
        SC_DBW_EN  :=  1'b0;
    }
    else
    {
        SC_DBW_EN  :=  1'bx;
        error("9K mode EN(%d) is invalid!",CP_DBW_EN);
    }

//initial config body68 end


//initial config body69 begin
    if (CP_DBR_EN == "TRUE")
    {
        SC_DBR_EN  :=  1'b1;
    }
    else if (CP_DBR_EN == "FALSE")
    {
        SC_DBR_EN  :=  1'b0;
    }
    else
    {
        SC_DBR_EN  :=  1'bx;
        error("9K mode EN(%d) is invalid!",CP_DBR_EN);
    }

//initial config body69 end


//initial config body70 begin
    if (CP_ECC_WREN == "TRUE")
    {
        SC_ECC_WREN  :=  1'b1;
    }
    else if (CP_ECC_WREN == "FALSE")
    {
        SC_ECC_WREN   :=  1'b0;
    }
    else
    {
        SC_ECC_WREN  :=  1'bx;
        error("9K mode EN(%d) is invalid!",CP_ECC_WREN);
    }

//initial config body70 end


//initial config body71 begin
    if (CP_ECC_RDEN == "TRUE")
    {
        SC_ECC_RDEN  :=  1'b1;
    }
    else if (CP_ECC_RDEN == "FALSE")
    {
        SC_ECC_RDEN   :=  1'b0;
    }
    else
    {
        SC_ECC_RDEN  :=  1'bx;
        error("9K mode EN(%d) is invalid!",CP_ECC_RDEN);
    }

//initial config body71 end

};

//grid device configure body end


timing drm_tnl of DRM
{
    wire beb1[1:0];
    wire bea1[1:0];
    wire beb0[1:0];
    wire bea0[1:0];
    wire rsta[1:0];
    wire rstb[1:0];
    wire clka[1:0];
    wire clkb[1:0];
    wire ocea[1:0];
    wire oceb[1:0];
    wire cea[1:0];
    wire ceb[1:0];
    wire wea[1:0];
    wire web[1:0];

    string polEn[27:0]    = {CP_PIBEHB_1, CP_PIBELB_1, CP_PIBEHA_1, CP_PIBELA_1,
                             CP_PIBEHB_0, CP_PIBELB_0, CP_PIBEHA_0, CP_PIBELA_0,
                             CP_PICLKA_1, CP_PICLKA_0, CP_PICLKB_1, CP_PICLKB_0,
                             CP_PIRSTA_1, CP_PIRSTA_0, CP_PIRSTB_1, CP_PIRSTB_0,
                             CP_PIOCEA_1, CP_PIOCEA_0, CP_PIOCEB_1, CP_PIOCEB_0,
                             CP_PICEA_1 , CP_PICEA_0 , CP_PICEB_1 , CP_PICEB_0 ,
                             CP_PIWEA_1 , CP_PIWEA_0 , CP_PIWEB_1 , CP_PIWEB_0 };
    string instName[27:0] = {  "BEHB_1" ,   "BELB_1" ,   "BEHA_1" ,   "BELA_1" ,
                               "BEHB_0" ,   "BELB_0" ,   "BEHA_0" ,   "BELA_0" ,
                               "CLKA_1" ,   "CLKA_0" ,   "CLKB_1" ,   "CLKB_0" ,
                               "RSTA_1" ,   "RSTA_0" ,   "RSTB_1" ,   "RSTB_0" ,
                               "OCEA_1" ,   "OCEA_0" ,   "OCEB_1" ,   "OCEB_0" ,
                               "CEA_1"  ,   "CEA_0"  ,   "CEB_1"  ,   "CEB_0"  ,
                               "WEA_1"  ,   "WEA_0"  ,   "WEB_1"  ,   "WEB_0"  };
    &port ptRefsPol[27:0] = {   BEB1[1] ,    BEB1[0] ,    BEA1[1] ,    BEA1[0] ,
                                BEB0[1] ,    BEB0[0] ,    BEA0[1] ,    BEA0[0] ,
                                CLKA[1] ,    CLKA[0] ,    CLKB[1] ,    CLKB[0] ,
                                RSTA[1] ,    RSTA[0] ,    RSTB[1] ,    RSTB[0] ,
                                OCEA[1] ,    OCEA[0] ,    OCEB[1] ,    OCEB[0] ,
                                CEA[1]  ,    CEA[0]  ,    CEB[1]  ,    CEB[0]  ,
                                WEA[1]  ,    WEA[0]  ,    WEB[1]  ,    WEB[0]  };
    &wire ntRefsPol[27:0] = {   beb1[1] ,    beb1[0] ,    bea1[1] ,    bea1[0] ,
                                beb0[1] ,    beb0[0] ,    bea0[1] ,    bea0[0] ,
                                clka[1] ,    clka[0] ,    clkb[1] ,    clkb[0] ,
                                rsta[1] ,    rsta[0] ,    rstb[1] ,    rstb[0] ,
                                ocea[1] ,    ocea[0] ,    oceb[1] ,    oceb[0] ,
                                cea[1]  ,    cea[0]  ,    ceb[1]  ,    ceb[0]  ,
                                wea[1]  ,    wea[0]  ,    web[1]  ,    web[0]} ;

    int i;
    for (i = 0; i < 28; i += 1)
    {
        string strVal;
        if (polEn[i] == "TRUE")
        {
            sprintf(strVal, "%s_INV", instName[i]);
            operator V_INV *strVal
            port map (
                I => ptRefsPol[i],
                Z => ntRefsPol[i]
            );
        }
    }

    wire DIB_fw[35:0];
    wire DOA_fw[35:0];

    if (CP_DRM_36K == "TRUE")
    {
        int DATA_WIDTH_A = CP_DATA_WIDTH_A_0;
        int DATA_WIDTH_B = CP_DATA_WIDTH_B_0;
        if (CP_DBW_EN == "TRUE" )
        {
            DATA_WIDTH_A = CP_DATA_WIDTH_A_0 * 2;
        }
        if (CP_DBR_EN == "TRUE")
        {
            DATA_WIDTH_B = CP_DATA_WIDTH_B_0 * 2;
        }

        if (CP_FIFO_EN_0 == "TRUE" || CP_FIFO_EN_1 == "TRUE")
        {
            bit RST_VAL[71:0] = (DATA_WIDTH_A < 32) ? {CP_SRVAL_B_1, CP_SRVAL_A_1, CP_SRVAL_A_0, CP_SRVAL_B_0} :
                                                      {CP_SRVAL_B_1, CP_SRVAL_A_1, CP_SRVAL_B_0, CP_SRVAL_A_0} ;
            bit REAL_RST_VAL[71:0] = (DATA_WIDTH_A % 9 == 0) ? RST_VAL : {8'b00000000,
                                      RST_VAL[70:63], RST_VAL[61:54], RST_VAL[52:45], RST_VAL[43:36], 
                                      RST_VAL[34:27], RST_VAL[25:18], RST_VAL[16:9], RST_VAL[7:0]};

            &port DI[71:0] = {DB1, DA1, DB0, DA0};
            &port DO[71:0] = (DATA_WIDTH_A < 32) ? {QB1, QA1, QA0, QB0} : {QB1, QA1, QB0, QA0};

            &port REAL_DI[71:0] = (DATA_WIDTH_A % 9 == 0) ? DI : 
                                     {DI[71], DI[62], DI[53], DI[44], DI[35], DI[26], DI[17], DI[8],
                                      DI[70:63], DI[61:54], DI[52:45], DI[43:36], DI[34:27], DI[25:18], DI[16:9], DI[7:0]};

            &port REAL_DO[71:0] = (DATA_WIDTH_A % 9 == 0) ? DO : 
                                     {DO[71], DO[62], DO[53], DO[44], DO[35], DO[26], DO[17], DO[8],
                                      DO[70:63], DO[61:54], DO[52:45], DO[43:36], DO[34:27], DO[25:18], DO[16:9], DO[7:0]};

            operator V_FIFO36K_E1 FIFO36K
            parameter map
            (
                GRS_EN              =>  (CP_GRS_DIS_0 == "TRUE") ? "FALSE" : "TRUE",
                DATA_WIDTH          =>   DATA_WIDTH_A,
                DO_REG              =>  (CP_OUTPUT_REG_A_0 == "ENABLE") ? 1 :0,
                ECC_WRITE_EN        =>   CP_ECC_WREN,
                ECC_READ_EN         =>   CP_ECC_RDEN,
                ALMOST_FULL_OFFSET  =>   CP_ALMOST_FULL_OFFSET_0,
                ALMOST_EMPTY_OFFSET =>   CP_ALMOST_EMPTY_OFFSET_0,
                RST_VAL             =>      REAL_RST_VAL,
                USE_EMPTY           =>  (CP_FLAGEMPTY_EN_0 == "TRUE") ? 1 : 0,
                USE_FULL            =>  (CP_FLAGFULL_EN_0 == "TRUE") ? 1 : 0,
                SYNC_FIFO           =>   CP_SYNC_FIFO_0
            )
            port map
            (
                ALMOST_EMPTY        =>      ALMOST_EMPTY[0],
                ALMOST_FULL         =>      ALMOST_FULL[0],
                EMPTY               =>      EMPTY[0],
                FULL                =>      FULL[0],
                DO                  =>      REAL_DO,
                ECC_SBITERR         =>      ECC_SBITERR,
                ECC_DBITERR         =>      ECC_DBITERR,
                DI                  =>      REAL_DI,
                WCLK                =>  (CP_PICLKA_0 == "TRUE") ? clka[0] : CLKA[0],
                RCLK                =>  (CP_PICLKB_0 == "TRUE") ? clkb[0] : CLKB[0],
                WCE                 =>  (CP_PICEA_0  == "TRUE") ? cea[0]  : CEA[0] ,
                RCE                 =>  (CP_PICEB_0  == "TRUE") ? ceb[0]  : CEB[0] ,
                ORCE                =>  (CP_PIOCEB_0 == "TRUE") ? oceb[0] : OCEB[0],
                RST                 =>  (CP_PIRSTB_0 == "TRUE") ? rstb[0] : RSTB[0],
                INJECT_SBITERR      =>      ECC_INJ_SBITERR,
                INJECT_DBITERR      =>      ECC_INJ_DBITERR
            );
        }
        else
        {
          //string IS_SDP = "FALSE";
          //if (CP_DATA_WIDTH_A_0 > 18 || CP_DATA_WIDTH_B_0 > 18)
          //{
          //    IS_SDP = "TRUE";
          //}

            operator V_DRM36K_E1 DRM36K
            parameter map
            (
                GRS_EN              =>  (CP_GRS_DIS_0 == "TRUE") ? "FALSE" : "TRUE",
                CSA_MASK            => {(CP_CSA_POL[2] == 1'b1) ? 1'b0 : 1'b1,
                                        (CP_CSA_POL[1] == 1'b1) ? 1'b0 : 1'b1,
                                        (CP_CSA_POL[0] == 1'b1) ? 1'b0 : 1'b1},
                CSB_MASK            => {(CP_CSB_POL[2] == 1'b1) ? 1'b0 : 1'b1,
                                        (CP_CSB_POL[1] == 1'b1) ? 1'b0 : 1'b1,
                                        (CP_CSB_POL[0] == 1'b1) ? 1'b0 : 1'b1},
                DATA_WIDTH_A        =>      DATA_WIDTH_A,
                DATA_WIDTH_B        =>      DATA_WIDTH_B,
                WRITE_MODE_A        =>   CP_WRITE_MODE_A_0,
                WRITE_MODE_B        =>   CP_WRITE_MODE_B_0,
                DOA_REG             =>  (CP_OUTPUT_REG_A_0 == "ENABLE") ? 1 : 0,
                DOB_REG             =>  (CP_OUTPUT_REG_B_0 == "ENABLE") ? 1 : 0,
                DOA_REG_CLKINV      =>  (CP_CLKA_OR_POL_INV_0 == "TRUE") ? 1 : 0,
                DOB_REG_CLKINV      =>  (CP_CLKB_OR_POL_INV_0 == "TRUE") ? 1 : 0,
                RSTA_VAL            =>  {CP_SRVAL_A_1, CP_SRVAL_A_0},
                RSTB_VAL            =>  {CP_SRVAL_B_1, CP_SRVAL_B_0},
                RST_TYPE            =>  (CP_RESET_TYPE_0 == "SYNC_RESET") ? "SYNC" :
                                        (CP_RESET_TYPE_0 == "ASYNC_RESET") ? "ASYNC" : "",
                RAM_MODE            =>  //(CP_MASK == 2'b00) ? "ROM" :
                                        (CP_DATA_WIDTH_A_0 > 18 || CP_DATA_WIDTH_B_0 > 18) ? "SIMPLE_DUAL_PORT" : "TRUE_DUAL_PORT",
                RAM_CASCADE         =>  (CP_CAS_EN == "TRUE" ) ? "UPPER" : 
                                        (CP_CAS_EN == "FALSE" && DATA_WIDTH_A == 1 && DATA_WIDTH_B == 1) ? "LOWER"  : "NONE", // "NONE" "LOWER" is same.,
                ECC_READ_EN         =>   CP_ECC_RDEN,
                ECC_WRITE_EN        =>   CP_ECC_WREN,
                INIT_00             =>   CP_INIT_00,
                INIT_01             =>   CP_INIT_01,
                INIT_02             =>   CP_INIT_02,
                INIT_03             =>   CP_INIT_03,
                INIT_04             =>   CP_INIT_04,
                INIT_05             =>   CP_INIT_05,
                INIT_06             =>   CP_INIT_06,
                INIT_07             =>   CP_INIT_07,
                INIT_08             =>   CP_INIT_08,
                INIT_09             =>   CP_INIT_09,
                INIT_0A             =>   CP_INIT_0A,
                INIT_0B             =>   CP_INIT_0B,
                INIT_0C             =>   CP_INIT_0C,
                INIT_0D             =>   CP_INIT_0D,
                INIT_0E             =>   CP_INIT_0E,
                INIT_0F             =>   CP_INIT_0F,
                INIT_10             =>   CP_INIT_10,
                INIT_11             =>   CP_INIT_11,
                INIT_12             =>   CP_INIT_12,
                INIT_13             =>   CP_INIT_13,
                INIT_14             =>   CP_INIT_14,
                INIT_15             =>   CP_INIT_15,
                INIT_16             =>   CP_INIT_16,
                INIT_17             =>   CP_INIT_17,
                INIT_18             =>   CP_INIT_18,
                INIT_19             =>   CP_INIT_19,
                INIT_1A             =>   CP_INIT_1A,
                INIT_1B             =>   CP_INIT_1B,
                INIT_1C             =>   CP_INIT_1C,
                INIT_1D             =>   CP_INIT_1D,
                INIT_1E             =>   CP_INIT_1E,
                INIT_1F             =>   CP_INIT_1F,
                INIT_20             =>   CP_INIT_20,
                INIT_21             =>   CP_INIT_21,
                INIT_22             =>   CP_INIT_22,
                INIT_23             =>   CP_INIT_23,
                INIT_24             =>   CP_INIT_24,
                INIT_25             =>   CP_INIT_25,
                INIT_26             =>   CP_INIT_26,
                INIT_27             =>   CP_INIT_27,
                INIT_28             =>   CP_INIT_28,
                INIT_29             =>   CP_INIT_29,
                INIT_2A             =>   CP_INIT_2A,
                INIT_2B             =>   CP_INIT_2B,
                INIT_2C             =>   CP_INIT_2C,
                INIT_2D             =>   CP_INIT_2D,
                INIT_2E             =>   CP_INIT_2E,
                INIT_2F             =>   CP_INIT_2F,
                INIT_30             =>   CP_INIT_30,
                INIT_31             =>   CP_INIT_31,
                INIT_32             =>   CP_INIT_32,
                INIT_33             =>   CP_INIT_33,
                INIT_34             =>   CP_INIT_34,
                INIT_35             =>   CP_INIT_35,
                INIT_36             =>   CP_INIT_36,
                INIT_37             =>   CP_INIT_37,
                INIT_38             =>   CP_INIT_38,
                INIT_39             =>   CP_INIT_39,
                INIT_3A             =>   CP_INIT_3A,
                INIT_3B             =>   CP_INIT_3B,
                INIT_3C             =>   CP_INIT_3C,
                INIT_3D             =>   CP_INIT_3D,
                INIT_3E             =>   CP_INIT_3E,
                INIT_3F             =>   CP_INIT_3F,
                INIT_40             =>   CP_INIT_40,
                INIT_41             =>   CP_INIT_41,
                INIT_42             =>   CP_INIT_42,
                INIT_43             =>   CP_INIT_43,
                INIT_44             =>   CP_INIT_44,
                INIT_45             =>   CP_INIT_45,
                INIT_46             =>   CP_INIT_46,
                INIT_47             =>   CP_INIT_47,
                INIT_48             =>   CP_INIT_48,
                INIT_49             =>   CP_INIT_49,
                INIT_4A             =>   CP_INIT_4A,
                INIT_4B             =>   CP_INIT_4B,
                INIT_4C             =>   CP_INIT_4C,
                INIT_4D             =>   CP_INIT_4D,
                INIT_4E             =>   CP_INIT_4E,
                INIT_4F             =>   CP_INIT_4F,
                INIT_50             =>   CP_INIT_50,
                INIT_51             =>   CP_INIT_51,
                INIT_52             =>   CP_INIT_52,
                INIT_53             =>   CP_INIT_53,
                INIT_54             =>   CP_INIT_54,
                INIT_55             =>   CP_INIT_55,
                INIT_56             =>   CP_INIT_56,
                INIT_57             =>   CP_INIT_57,
                INIT_58             =>   CP_INIT_58,
                INIT_59             =>   CP_INIT_59,
                INIT_5A             =>   CP_INIT_5A,
                INIT_5B             =>   CP_INIT_5B,
                INIT_5C             =>   CP_INIT_5C,
                INIT_5D             =>   CP_INIT_5D,
                INIT_5E             =>   CP_INIT_5E,
                INIT_5F             =>   CP_INIT_5F,
                INIT_60             =>   CP_INIT_60,
                INIT_61             =>   CP_INIT_61,
                INIT_62             =>   CP_INIT_62,
                INIT_63             =>   CP_INIT_63,
                INIT_64             =>   CP_INIT_64,
                INIT_65             =>   CP_INIT_65,
                INIT_66             =>   CP_INIT_66,
                INIT_67             =>   CP_INIT_67,
                INIT_68             =>   CP_INIT_68,
                INIT_69             =>   CP_INIT_69,
                INIT_6A             =>   CP_INIT_6A,
                INIT_6B             =>   CP_INIT_6B,
                INIT_6C             =>   CP_INIT_6C,
                INIT_6D             =>   CP_INIT_6D,
                INIT_6E             =>   CP_INIT_6E,
                INIT_6F             =>   CP_INIT_6F,
                INIT_70             =>   CP_INIT_70,
                INIT_71             =>   CP_INIT_71,
                INIT_72             =>   CP_INIT_72,
                INIT_73             =>   CP_INIT_73,
                INIT_74             =>   CP_INIT_74,
                INIT_75             =>   CP_INIT_75,
                INIT_76             =>   CP_INIT_76,
                INIT_77             =>   CP_INIT_77,
                INIT_78             =>   CP_INIT_78,
                INIT_79             =>   CP_INIT_79,
                INIT_7A             =>   CP_INIT_7A,
                INIT_7B             =>   CP_INIT_7B,
                INIT_7C             =>   CP_INIT_7C,
                INIT_7D             =>   CP_INIT_7D,
                INIT_7E             =>   CP_INIT_7E,
                INIT_7F             =>   CP_INIT_7F
            )
            port map
            (
                COUTA               =>     X1CASQO_A,
                COUTB               =>     X1CASQO_B,
                DOA                 => (CP_DBR_EN == "TRUE" || CP_DATA_WIDTH_B_0 <= 18) ? {QA1, QA0} : DOA_fw,
                DOB                 => (CP_DBR_EN == "TRUE" || CP_DATA_WIDTH_B_0 <= 18) ? {QB1, QB0} : {QB0, QA0},
                ECC_SBITERR         =>     ECC_SBITERR,
                ECC_DBITERR         =>     ECC_DBITERR,
                ECC_RDADDR          =>     ECC_RDADDR,
                ECC_PARITY          =>     ECC_PARITY,
                CINA                =>     X1CASQI_A,
                CINB                =>     X1CASQI_B,
                DIA                 => (CP_DBW_EN == "TRUE" || CP_DATA_WIDTH_A_0 <= 18) ? {DA1, DA0} : {DB0, DA0},
                DIB                 => (CP_DBW_EN == "TRUE" || CP_DATA_WIDTH_A_0 <= 18) ? {DB1, DB0} :  DIB_fw,
                ADDRA[15]           =>     ADA_CAS,
                ADDRA[14:1]         => (CP_DBW_EN == "TRUE") ? {ADA0[13:0]} : ADA0[14:1],
              //ADDRA[14:1]         => (CP_DBW_EN == "TRUE") ? {ADA1[13:0]} : ADA0[14:1],
                ADDRA[0]            =>     ADA0[0],
                ADDRA_HOLD          =>     ADSA[0],
                ADDRB[15]           =>     ADB_CAS,
                ADDRB[14:1]         => (CP_DBR_EN == "TRUE") ? ADB0[13:0] : ADB0[14:1],
              //ADDRB[14:1]         => (CP_DBR_EN == "TRUE") ? ADB1[13:0] : ADB0[14:1],
                ADDRB[0]            =>     ADB0[0],
                ADDRB_HOLD          =>     ADSB[0],
                CSA                 =>     CSA,
                CSB                 =>     CSB,
                BWEA[7]             => (CP_BEHB_SET_1 == "TRUE") ? 1'b1 : (CP_PIBEHB_1 == "TRUE") ? beb1[1] : BEB1[1],
                BWEA[6]             => (CP_BELB_SET_1 == "TRUE") ? 1'b1 : (CP_PIBELB_1 == "TRUE") ? beb1[0] : BEB1[0],
                BWEA[5]             => (CP_BEHB_SET_0 == "TRUE") ? 1'b1 : (CP_PIBEHB_0 == "TRUE") ? beb0[1] : BEB0[1],
                BWEA[4]             => (CP_BELB_SET_0 == "TRUE") ? 1'b1 : (CP_PIBELB_0 == "TRUE") ? beb0[0] : BEB0[0],
                BWEA[3]             => (CP_DBW_EN == "TRUE" || CP_DATA_WIDTH_A_0 <= 18) ? 
                                      ((CP_BEHA_SET_1 == "TRUE") ? 1'b1 : (CP_PIBEHA_1 == "TRUE") ? bea1[1] : BEA1[1]):
                                      ((CP_BELB_SET_0 == "TRUE") ? 1'b1 : (CP_PIBEHB_0 == "TRUE") ? beb0[1] : BEB0[1]),
                BWEA[2]             => (CP_DBW_EN == "TRUE" || CP_DATA_WIDTH_A_0 <= 18) ? 
                                      ((CP_BELA_SET_1 == "TRUE") ? 1'b1 : (CP_PIBELA_1 == "TRUE") ? bea1[0] : BEA1[0]):
                                      ((CP_BELB_SET_0 == "TRUE") ? 1'b1 : (CP_PIBEHB_0 == "TRUE") ? beb0[0] : BEB0[0]),
                BWEA[1]             => (CP_BEHA_SET_0 == "TRUE") ? 1'b1 : (CP_PIBEHA_0 == "TRUE") ? bea0[1] : BEA0[1],
                BWEA[0]             => (CP_BELA_SET_0 == "TRUE") ? 1'b1 : (CP_PIBELA_0 == "TRUE") ? bea0[0] : BEA0[0],
                BWEB[3]             => (CP_BEHB_SET_1 == "TRUE") ? 1'b1 : (CP_PIBEHB_1 == "TRUE") ? beb1[1] : BEB1[1],
                BWEB[2]             => (CP_BELB_SET_1 == "TRUE") ? 1'b1 : (CP_PIBELB_1 == "TRUE") ? beb1[0] : BEB1[0],
                BWEB[1]             => (CP_BELB_SET_0 == "TRUE") ? 1'b1 : (CP_PIBEHB_0 == "TRUE") ? beb0[1] : BEB0[1],
                BWEB[0]             => (CP_BELB_SET_0 == "TRUE") ? 1'b1 : (CP_PIBEHB_0 == "TRUE") ? beb0[0] : BEB0[0],
                CLKA                => (CP_PICLKA_0 == "TRUE") ? clka[0] : CLKA[0],
                CLKB                => (CP_PICLKB_0 == "TRUE") ? clkb[0] : CLKB[0],
                CEA                 => (CP_PICEA_0  == "TRUE") ? cea[0]  : CEA[0],
                CEB                 => (CP_PICEB_0  == "TRUE") ? ceb[0]  : CEB[0],
                WEA                 => (CP_PIWEA_0  == "TRUE") ? wea[0]  : WEA[0],
                WEB                 => (CP_PIWEB_0  == "TRUE") ? web[0]  : WEB[0],
                ORCEA               => (CP_PIOCEA_0 == "TRUE") ? ocea[0] : OCEA[0],
                ORCEB               => (CP_PIOCEB_0 == "TRUE") ? oceb[0] : OCEB[0],
                RSTA                => (CP_PIRSTA_0 == "TRUE") ? rsta[0] : RSTA[0],
                RSTB                => (CP_PIRSTB_0 == "TRUE") ? rstb[0] : RSTB[0],
                INJECT_SBITERR      =>     ECC_INJ_SBITERR,
                INJECT_DBITERR      =>     ECC_INJ_DBITERR
            );
        }
    }
    else
    {
        if (CP_DRM_EN_0 == "TRUE" && CP_FIFO_EN_0 == "TRUE")
        {
            bit RST_VAL[35:0] = (CP_DATA_WIDTH_A_0 < 32) ? {CP_SRVAL_A_0, CP_SRVAL_B_0} : {CP_SRVAL_B_0, CP_SRVAL_A_0} ;
            bit REAL_RST_VAL[35:0] = (CP_DATA_WIDTH_A_0 % 9 == 0) ? RST_VAL : {4'b0000, RST_VAL[34:27], RST_VAL[25:18], RST_VAL[16:9], RST_VAL[7:0]};

            &port DI[35:0] = {DB0, DA0};
            &port DO[35:0] = (CP_DATA_WIDTH_A_0 < 32) ? {QA0, QB0} : {QB0, QA0};

            &port REAL_DI[35:0] = (CP_DATA_WIDTH_A_0 % 9 == 0) ? DI : {DI[35], DI[26], DI[17], DI[8], DI[34:27], DI[25:18], DI[16:9], DI[7:0]};
            &port REAL_DO[35:0] = (CP_DATA_WIDTH_A_0 % 9 == 0) ? DO : {DO[35], DO[26], DO[17], DO[8], DO[34:27], DO[25:18], DO[16:9], DO[7:0]};

            operator V_FIFO18K_E1 FIFO18K_0
            parameter map
            (
                GRS_EN              =>  (CP_GRS_DIS_0 == "TRUE") ? "FALSE" : "TRUE",
                DATA_WIDTH          =>   CP_DATA_WIDTH_A_0,
                DO_REG              =>  (CP_OUTPUT_REG_B_0 == "ENABLE") ? 1 :0,
                ALMOST_FULL_OFFSET  =>   CP_ALMOST_FULL_OFFSET_0,
                ALMOST_EMPTY_OFFSET =>   CP_ALMOST_EMPTY_OFFSET_0,
                RST_VAL             =>      REAL_RST_VAL,
                USE_EMPTY           =>  (CP_FLAGEMPTY_EN_0 == "TRUE") ? 1 : 0,
                USE_FULL            =>  (CP_FLAGFULL_EN_0 == "TRUE") ? 1 : 0,
                SYNC_FIFO           =>   CP_SYNC_FIFO_0
            )
            port map
            (
                ALMOST_EMPTY        =>      ALMOST_EMPTY[0],
                ALMOST_FULL         =>      ALMOST_FULL[0],
                EMPTY               =>      EMPTY[0],
                FULL                =>      FULL[0],
                DI                  =>      REAL_DI,
                DO                  =>      REAL_DO,
                WCLK                =>  (CP_PICLKA_0 == "TRUE") ? clka[0] : CLKA[0],
                RCLK                =>  (CP_PICLKB_0 == "TRUE") ? clkb[0] : CLKB[0],
                WCE                 =>  (CP_PICEA_0  == "TRUE") ? cea[0]  : CEA[0] ,
                RCE                 =>  (CP_PICEB_0  == "TRUE") ? ceb[0]  : CEB[0] ,
                ORCE                =>  (CP_PIOCEB_0 == "TRUE") ? oceb[0] : OCEB[0],
                RST                 =>  (CP_PIRSTB_0 == "TRUE") ? rstb[0] : RSTB[0]
            );
        }
        else if (CP_DRM_EN_0 == "TRUE")
        {
            operator V_DRM18K_E1 DRM18K_0
            parameter map
            (
                GRS_EN              =>  (CP_GRS_DIS_0 == "TRUE") ? "FALSE" : "TRUE",
                DATA_WIDTH_A        =>   CP_DATA_WIDTH_A_0,
                DATA_WIDTH_B        =>   CP_DATA_WIDTH_B_0,
                DOA_REG             =>  (CP_OUTPUT_REG_A_0 == "ENABLE") ? 1 : 0,
                DOB_REG             =>  (CP_OUTPUT_REG_B_0 == "ENABLE") ? 1 : 0,
                DOA_REG_CLKINV      =>  (CP_CLKA_OR_POL_INV_0 == "TRUE") ? 1 : 0,
                DOB_REG_CLKINV      =>  (CP_CLKB_OR_POL_INV_0 == "TRUE") ? 1 : 0,
                RSTA_VAL            =>   CP_SRVAL_A_0,
                RSTB_VAL            =>   CP_SRVAL_B_0,
                RST_TYPE            =>  (CP_RESET_TYPE_0 == "SYNC_RESET") ? "SYNC" :
                                        (CP_RESET_TYPE_0 == "ASYNC_RESET") ? "ASYNC" : "",
                RAM_MODE            =>  //(CP_MASK[0] == 1'b0) ? "ROM" :
                                        (CP_DATA_WIDTH_A_0 > 18) ? "SIMPLE_DUAL_PORT" :
                                        (CP_DATA_WIDTH_B_0 > 18) ? "SIMPLE_DUAL_PORT" : "TRUE_DUAL_PORT",
                WRITE_MODE_A        =>   CP_WRITE_MODE_A_0,
                WRITE_MODE_B        =>   CP_WRITE_MODE_B_0,
                INIT_00             =>   CP_INIT_00,
                INIT_01             =>   CP_INIT_01,
                INIT_02             =>   CP_INIT_02,
                INIT_03             =>   CP_INIT_03,
                INIT_04             =>   CP_INIT_04,
                INIT_05             =>   CP_INIT_05,
                INIT_06             =>   CP_INIT_06,
                INIT_07             =>   CP_INIT_07,
                INIT_08             =>   CP_INIT_08,
                INIT_09             =>   CP_INIT_09,
                INIT_0A             =>   CP_INIT_0A,
                INIT_0B             =>   CP_INIT_0B,
                INIT_0C             =>   CP_INIT_0C,
                INIT_0D             =>   CP_INIT_0D,
                INIT_0E             =>   CP_INIT_0E,
                INIT_0F             =>   CP_INIT_0F,
                INIT_10             =>   CP_INIT_10,
                INIT_11             =>   CP_INIT_11,
                INIT_12             =>   CP_INIT_12,
                INIT_13             =>   CP_INIT_13,
                INIT_14             =>   CP_INIT_14,
                INIT_15             =>   CP_INIT_15,
                INIT_16             =>   CP_INIT_16,
                INIT_17             =>   CP_INIT_17,
                INIT_18             =>   CP_INIT_18,
                INIT_19             =>   CP_INIT_19,
                INIT_1A             =>   CP_INIT_1A,
                INIT_1B             =>   CP_INIT_1B,
                INIT_1C             =>   CP_INIT_1C,
                INIT_1D             =>   CP_INIT_1D,
                INIT_1E             =>   CP_INIT_1E,
                INIT_1F             =>   CP_INIT_1F,
                INIT_20             =>   CP_INIT_20,
                INIT_21             =>   CP_INIT_21,
                INIT_22             =>   CP_INIT_22,
                INIT_23             =>   CP_INIT_23,
                INIT_24             =>   CP_INIT_24,
                INIT_25             =>   CP_INIT_25,
                INIT_26             =>   CP_INIT_26,
                INIT_27             =>   CP_INIT_27,
                INIT_28             =>   CP_INIT_28,
                INIT_29             =>   CP_INIT_29,
                INIT_2A             =>   CP_INIT_2A,
                INIT_2B             =>   CP_INIT_2B,
                INIT_2C             =>   CP_INIT_2C,
                INIT_2D             =>   CP_INIT_2D,
                INIT_2E             =>   CP_INIT_2E,
                INIT_2F             =>   CP_INIT_2F,
                INIT_30             =>   CP_INIT_30,
                INIT_31             =>   CP_INIT_31,
                INIT_32             =>   CP_INIT_32,
                INIT_33             =>   CP_INIT_33,
                INIT_34             =>   CP_INIT_34,
                INIT_35             =>   CP_INIT_35,
                INIT_36             =>   CP_INIT_36,
                INIT_37             =>   CP_INIT_37,
                INIT_38             =>   CP_INIT_38,
                INIT_39             =>   CP_INIT_39,
                INIT_3A             =>   CP_INIT_3A,
                INIT_3B             =>   CP_INIT_3B,
                INIT_3C             =>   CP_INIT_3C,
                INIT_3D             =>   CP_INIT_3D,
                INIT_3E             =>   CP_INIT_3E,
                INIT_3F             =>   CP_INIT_3F
            )
            port map
            (
                DOA                 =>     QA0,
                DOB                 =>     QB0,
                DIA                 =>     DA0,
                DIB                 =>     DB0,
                ADDRA               =>     ADA0[13:0],
                ADDRB               =>     ADB0[13:0],
                ADDRA_HOLD          =>     ADSA[0],
                ADDRB_HOLD          =>     ADSB[0],
                BWEA[3]             => (CP_BEHB_SET_0 == "TRUE") ? 1'b1 : (CP_PIBEHB_0 == "TRUE") ? beb0[1] : BEB0[1],
                BWEA[2]             => (CP_BELB_SET_0 == "TRUE") ? 1'b1 : (CP_PIBELB_0 == "TRUE") ? beb0[0] : BEB0[0],
                BWEA[1]             => (CP_BEHA_SET_0 == "TRUE") ? 1'b1 : (CP_PIBEHA_0 == "TRUE") ? bea0[1] : BEA0[1],
                BWEA[0]             => (CP_BELA_SET_0 == "TRUE") ? 1'b1 : (CP_PIBELA_0 == "TRUE") ? bea0[0] : BEA0[0],
                BWEB[1]             => (CP_BEHB_SET_0 == "TRUE") ? 1'b1 : (CP_PIBEHB_0 == "TRUE") ? beb0[1] : BEB0[1],
                BWEB[0]             => (CP_BELB_SET_0 == "TRUE") ? 1'b1 : (CP_PIBELB_0 == "TRUE") ? beb0[0] : BEB0[0],
                CLKA                => (CP_PICLKA_0 == "TRUE") ? clka[0] : CLKA[0],
                CLKB                => (CP_PICLKB_0 == "TRUE") ? clkb[0] : CLKB[0],
                CEA                 => (CP_PICEA_0  == "TRUE") ? cea[0]  : CEA[0],
                CEB                 => (CP_PICEB_0  == "TRUE") ? ceb[0]  : CEB[0],
                WEA                 => (CP_PIWEA_0  == "TRUE") ? wea[0]  : WEA[0],
                WEB                 => (CP_PIWEB_0  == "TRUE") ? web[0]  : WEB[0],
                ORCEA               => (CP_PIOCEA_0 == "TRUE") ? ocea[0] : OCEA[0],
                ORCEB               => (CP_PIOCEB_0 == "TRUE") ? oceb[0] : OCEB[0],
                RSTA                => (CP_PIRSTA_0 == "TRUE") ? rsta[0] : RSTA[0],
                RSTB                => (CP_PIRSTB_0 == "TRUE") ? rstb[0] : RSTB[0]
            );
        }

        if (CP_DRM_EN_1 == "TRUE" && CP_FIFO_EN_1 == "TRUE")
        {
            bit RST_VAL[35:0] = (CP_DATA_WIDTH_A_1 < 32) ? {CP_SRVAL_A_0, CP_SRVAL_B_0} : {CP_SRVAL_B_0, CP_SRVAL_A_0} ;
            bit REAL_RST_VAL[35:0] = (CP_DATA_WIDTH_A_1 % 9 == 0) ? RST_VAL : {4'b0000, RST_VAL[34:27], RST_VAL[25:18], RST_VAL[16:9], RST_VAL[7:0]};

            &port DI[35:0] = {DB0, DA0};
            &port DO[35:0] = (CP_DATA_WIDTH_A_1 < 32) ? {QA0, QB0} : {QB0, QA0};

            &port REAL_DI[35:0] = (CP_DATA_WIDTH_A_1 % 9 == 0) ? DI : {DI[35], DI[26], DI[17], DI[8], DI[34:27], DI[25:18], DI[16:9], DI[7:0]};
            &port REAL_DO[35:0] = (CP_DATA_WIDTH_A_1 % 9 == 0) ? DO : {DO[35], DO[26], DO[17], DO[8], DO[34:27], DO[25:18], DO[16:9], DO[7:0]};


            operator V_FIFO18K_E1 FIFO18K_1
            parameter map
            (
                GRS_EN              =>  (CP_GRS_DIS_1 == "TRUE") ? "FALSE" : "TRUE",
                DATA_WIDTH          =>   CP_DATA_WIDTH_A_1,
                DO_REG              =>  (CP_OUTPUT_REG_B_1 == "ENABLE") ? 1 :0,
                ALMOST_FULL_OFFSET  =>   CP_ALMOST_FULL_OFFSET_1,
                ALMOST_EMPTY_OFFSET =>   CP_ALMOST_EMPTY_OFFSET_1,
                RST_VAL             =>      REAL_RST_VAL,
                USE_EMPTY           =>  (CP_FLAGEMPTY_EN_1 == "TRUE") ? 1 : 0,
                USE_FULL            =>  (CP_FLAGFULL_EN_1 == "TRUE") ? 1 : 0,
                SYNC_FIFO           =>   CP_SYNC_FIFO_1
            )
            port map
            (
                ALMOST_EMPTY        =>      ALMOST_EMPTY[1],
                ALMOST_FULL         =>      ALMOST_FULL[1],
                EMPTY               =>      EMPTY[1],
                FULL                =>      FULL[1],
                DI                  =>      REAL_DI,
                DO                  =>      REAL_DO,
                WCLK                =>  (CP_PICLKA_1 == "TRUE") ? clka[1] : CLKA[1],
                RCLK                =>  (CP_PICLKB_1 == "TRUE") ? clkb[1] : CLKB[1],
                WCE                 =>  (CP_PICEA_1  == "TRUE") ? cea[1]  : CEA[1] ,
                RCE                 =>  (CP_PICEB_1  == "TRUE") ? ceb[1]  : CEB[1] ,
                ORCE                =>  (CP_PIOCEB_1 == "TRUE") ? oceb[1] : OCEB[1],
                RST                 =>  (CP_PIRSTB_1 == "TRUE") ? rstb[1] : RSTB[1]
            );
        }
        else if (CP_DRM_EN_1 == "TRUE")
        {
            operator V_DRM18K_E1 DRM18K_1
            parameter map
            (
                GRS_EN              =>  (CP_GRS_DIS_1 == "TRUE") ? "FALSE" : "TRUE",
                DATA_WIDTH_A        =>   CP_DATA_WIDTH_A_1,
                DATA_WIDTH_B        =>   CP_DATA_WIDTH_B_1,
                DOA_REG             =>  (CP_OUTPUT_REG_A_1 == "ENABLE") ? 1 : 0,
                DOB_REG             =>  (CP_OUTPUT_REG_B_1 == "ENABLE") ? 1 : 0,
                DOA_REG_CLKINV      =>  (CP_CLKA_OR_POL_INV_1 == "TRUE") ? 1 : 0,
                DOB_REG_CLKINV      =>  (CP_CLKB_OR_POL_INV_1 == "TRUE") ? 1 : 0,
                RSTA_VAL            =>   CP_SRVAL_A_1,
                RSTB_VAL            =>   CP_SRVAL_B_1,
                RST_TYPE            =>  (CP_RESET_TYPE_1 == "SYNC_RESET") ? "SYNC" :
                                        (CP_RESET_TYPE_1 == "ASYNC_RESET") ? "ASYNC" : "",
                RAM_MODE            =>  //(CP_MASK[1] == 1'b0) ? "ROM" :
                                        (CP_DATA_WIDTH_A_1 > 18) ? "SIMPLE_DUAL_PORT" :
                                        (CP_DATA_WIDTH_B_1 > 18) ? "SIMPLE_DUAL_PORT" : "TRUE_DUAL_PORT",
                WRITE_MODE_A        =>   CP_WRITE_MODE_A_1,
                WRITE_MODE_B        =>   CP_WRITE_MODE_B_1,
                INIT_00             =>   CP_INIT_40,
                INIT_01             =>   CP_INIT_41,
                INIT_02             =>   CP_INIT_42,
                INIT_03             =>   CP_INIT_43,
                INIT_04             =>   CP_INIT_44,
                INIT_05             =>   CP_INIT_45,
                INIT_06             =>   CP_INIT_46,
                INIT_07             =>   CP_INIT_47,
                INIT_08             =>   CP_INIT_48,
                INIT_09             =>   CP_INIT_49,
                INIT_0A             =>   CP_INIT_4A,
                INIT_0B             =>   CP_INIT_4B,
                INIT_0C             =>   CP_INIT_4C,
                INIT_0D             =>   CP_INIT_4D,
                INIT_0E             =>   CP_INIT_4E,
                INIT_0F             =>   CP_INIT_4F,
                INIT_10             =>   CP_INIT_50,
                INIT_11             =>   CP_INIT_51,
                INIT_12             =>   CP_INIT_52,
                INIT_13             =>   CP_INIT_53,
                INIT_14             =>   CP_INIT_54,
                INIT_15             =>   CP_INIT_55,
                INIT_16             =>   CP_INIT_56,
                INIT_17             =>   CP_INIT_57,
                INIT_18             =>   CP_INIT_58,
                INIT_19             =>   CP_INIT_59,
                INIT_1A             =>   CP_INIT_5A,
                INIT_1B             =>   CP_INIT_5B,
                INIT_1C             =>   CP_INIT_5C,
                INIT_1D             =>   CP_INIT_5D,
                INIT_1E             =>   CP_INIT_5E,
                INIT_1F             =>   CP_INIT_5F,
                INIT_20             =>   CP_INIT_60,
                INIT_21             =>   CP_INIT_61,
                INIT_22             =>   CP_INIT_62,
                INIT_23             =>   CP_INIT_63,
                INIT_24             =>   CP_INIT_64,
                INIT_25             =>   CP_INIT_65,
                INIT_26             =>   CP_INIT_66,
                INIT_27             =>   CP_INIT_67,
                INIT_28             =>   CP_INIT_68,
                INIT_29             =>   CP_INIT_69,
                INIT_2A             =>   CP_INIT_6A,
                INIT_2B             =>   CP_INIT_6B,
                INIT_2C             =>   CP_INIT_6C,
                INIT_2D             =>   CP_INIT_6D,
                INIT_2E             =>   CP_INIT_6E,
                INIT_2F             =>   CP_INIT_6F,
                INIT_30             =>   CP_INIT_70,
                INIT_31             =>   CP_INIT_71,
                INIT_32             =>   CP_INIT_72,
                INIT_33             =>   CP_INIT_73,
                INIT_34             =>   CP_INIT_74,
                INIT_35             =>   CP_INIT_75,
                INIT_36             =>   CP_INIT_76,
                INIT_37             =>   CP_INIT_77,
                INIT_38             =>   CP_INIT_78,
                INIT_39             =>   CP_INIT_79,
                INIT_3A             =>   CP_INIT_7A,
                INIT_3B             =>   CP_INIT_7B,
                INIT_3C             =>   CP_INIT_7C,
                INIT_3D             =>   CP_INIT_7D,
                INIT_3E             =>   CP_INIT_7E,
                INIT_3F             =>   CP_INIT_7F
            )
            port map
            (
                DOA                 =>     QA1,
                DOB                 =>     QB1,
                DIA                 =>     DA1,
                DIB                 =>     DB1,
                ADDRA               =>     ADA1[13:0],
                ADDRB               =>     ADB1[13:0],
                ADDRA_HOLD          =>     ADSA[1],
                ADDRB_HOLD          =>     ADSB[1],
                BWEA[3]             => (CP_BEHB_SET_1 == "TRUE") ? 1'b1 : (CP_PIBEHB_1 == "TRUE") ? beb1[1] : BEB1[1],
                BWEA[2]             => (CP_BELB_SET_1 == "TRUE") ? 1'b1 : (CP_PIBELB_1 == "TRUE") ? beb1[0] : BEB1[0],
                BWEA[1]             => (CP_BEHA_SET_1 == "TRUE") ? 1'b1 : (CP_PIBEHA_1 == "TRUE") ? bea1[1] : BEA1[1],
                BWEA[0]             => (CP_BELA_SET_1 == "TRUE") ? 1'b1 : (CP_PIBELA_1 == "TRUE") ? bea1[0] : BEA1[0],
                BWEB[1]             => (CP_BEHB_SET_1 == "TRUE") ? 1'b1 : (CP_PIBEHB_1 == "TRUE") ? beb1[1] : BEB1[1],
                BWEB[0]             => (CP_BELB_SET_1 == "TRUE") ? 1'b1 : (CP_PIBELB_1 == "TRUE") ? beb1[0] : BEB1[0],
                CLKA                => (CP_PICLKA_1 == "TRUE") ? clka[1] : CLKA[1],
                CLKB                => (CP_PICLKB_1 == "TRUE") ? clkb[1] : CLKB[1],
                CEA                 => (CP_PICEA_1  == "TRUE") ? cea[1]  : CEA[1],
                CEB                 => (CP_PICEB_1  == "TRUE") ? ceb[1]  : CEB[1],
                WEA                 => (CP_PIWEA_1  == "TRUE") ? wea[1]  : WEA[1],
                WEB                 => (CP_PIWEB_1  == "TRUE") ? web[1]  : WEB[1],
                ORCEA               => (CP_PIOCEA_1 == "TRUE") ? ocea[1] : OCEA[1],
                ORCEB               => (CP_PIOCEB_1 == "TRUE") ? oceb[1] : OCEB[1],
                RSTA                => (CP_PIRSTA_1 == "TRUE") ? rsta[1] : RSTA[1],
                RSTB                => (CP_PIRSTB_1 == "TRUE") ? rstb[1] : RSTB[1]
            );
        }
    }
};

