tarted
grid
device APM
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config bit CP_SCSEL_0 = 1'b0,
        config bit CP_ASYNC_0 = 1'b0,
        config bit CP_SIMD_0 = 1'b0,
        config bit CP_POSTADD_0 = 1'b0,
        config bit CP_PREADD_0 = 1'b0,
        config bit CP_XOREG_0[1:0] = 2'b00,
        config bit CP_XREG_0[1:0] = 2'b00,
        config bit CP_YREG_0[1:0] = 2'b00,
        config bit CP_HREG_0 = 1'b0,
        config bit CP_ZREG_0 = 1'b0,
        config bit CP_PREREG_0 = 1'b0,
        config bit CP_MREG_0 = 1'b0,
        config bit CP_PREG_0 = 1'b0,
        config bit CP_MODEYREG_0 = 1'b0,
        config bit CP_MODEZREG_0 = 1'b0,
        config bit CP_INCTRLREG_0 = 1'b0,
        config bit CP_XSEL_0 = 1'b0,
        config bit CP_XBSEL_0[1:0] = 2'b00,
        config bit CP_PINIT0_0[47:0] = 48'h000000000000,
        config bit CP_PINIT1_0[47:0] = 48'h000000000000,
        config bit CP_ROUNDMODE_0 = 1'b0,
        config bit CP_PCISEL_0 = 1'b0,
        config bit CP_POREG_0 = 1'b0,
        config bit CP_ACCLOW_0 = 1'b0,
        config bit CP_XSE_0[13:0] = 14'b00000000000000,
        config bit CP_HSE_0[10:0] = 11'b00000000000,
        config bit CP_YSE_0[7:0] = 8'b00000000,
        config bit CP_ZSE_0[22:0] = 23'h000000,
        config bit CP_YCONST_0[17:0] = 18'h00000,
        config bit CP_MODEYCONST_0[2:0] = 3'b000,
        config bit CP_MODEZCONST_0[3:0] = 4'b0000,
        config bit CP_INCTRLCONST_0[4:0] = 5'b00000,
        config bit CP_YDYNSEL_0 = 1'b0,
        config bit CP_MODEYDYNSEL_0[2:0] = 3'b000,
        config bit CP_MODEZDYNSEL_0[3:0] = 4'b0000,
        config bit CP_INCTRLDYNSEL_0[4:0] = 5'b00000,
        config bit CP_GRS_DIS_0 = 1'b0,
        config bit CP_OR2CASECADE_EN_0 = 1'b0,
        config bit CP_OR2CORE_EN_0[1:0] = 2'b00,
        config bit CP_IRX_SHFEN_0 = 1'b0,
        config bit CP_IRZ_SHFEN_0 = 1'b0,
        config bit CP_MULT_EN_0[1:0] = 2'b00,
        config bit CP_APM_EN_0 = 1'b0,
        config bit CP_SCSEL_1 = 1'b0,
        config bit CP_ASYNC_1 = 1'b0,
        config bit CP_SIMD_1 = 1'b0,
        config bit CP_POSTADD_1 = 1'b0,
        config bit CP_PREADD_1 = 1'b0,
        config bit CP_XOREG_1[1:0] = 2'b00,
        config bit CP_XREG_1[1:0] = 2'b00,
        config bit CP_YREG_1[1:0] = 2'b00,
        config bit CP_HREG_1 = 1'b0,
        config bit CP_ZREG_1 = 1'b0,
        config bit CP_PREREG_1 = 1'b0,
        config bit CP_MREG_1 = 1'b0,
        config bit CP_PREG_1 = 1'b0,
        config bit CP_MODEYREG_1 = 1'b0,
        config bit CP_MODEZREG_1 = 1'b0,
        config bit CP_INCTRLREG_1 = 1'b0,
        config bit CP_XSEL_1 = 1'b0,
        config bit CP_XBSEL_1[1:0] = 2'b00,
        config bit CP_PINIT0_1[47:0] = 48'h000000000000,
        config bit CP_PINIT1_1[47:0] = 48'h000000000000,
        config bit CP_ROUNDMODE_1 = 1'b0,
        config bit CP_PCISEL_1 = 1'b0,
        config bit CP_POREG_1 = 1'b0,
        config bit CP_ACCLOW_1 = 1'b0,
        config bit CP_XSE_1[13:0] = 14'b00000000000000,
        config bit CP_HSE_1[10:0] = 11'b00000000000,
        config bit CP_YSE_1[7:0] = 8'b00000000,
        config bit CP_ZSE_1[22:0] = 23'h000000,
        config bit CP_YCONST_1[17:0] = 18'h00000,
        config bit CP_MODEYCONST_1[2:0] = 3'b000,
        config bit CP_MODEZCONST_1[3:0] = 4'b0000,
        config bit CP_INCTRLCONST_1[4:0] = 5'b00000,
        config bit CP_YDYNSEL_1 = 1'b0,
        config bit CP_MODEYDYNSEL_1[2:0] = 3'b000,
        config bit CP_MODEZDYNSEL_1[3:0] = 4'b0000,
        config bit CP_INCTRLDYNSEL_1[4:0] = 5'b00000,
        config bit CP_GRS_DIS_1 = 1'b0,
        config bit CP_OR2CASECADE_EN_1 = 1'b0,
        config bit CP_OR2CORE_EN_1[1:0] = 2'b00,
        config bit CP_IRX_SHFEN_1 = 1'b0,
        config bit CP_IRZ_SHFEN_1 = 1'b0,
        config bit CP_MULT_EN_1[1:0] = 2'b00,
        config bit CP_APM_EN_1 = 1'b0
    );
    port
    (
// configuration_body_def_on


    config input SC_SCSEL_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SCSEL_0" */,

    config input SC_ASYNC_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ASYNC_0" */,

    config input SC_SIMD_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SIMD_0" */,

    config input SC_POSTADD_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_POSTADD_0" */,

    config input SC_PREADD_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PREADD_0" */,

    config input SC_XOREG_0[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_XOREG_0[1],SC_XOREG_0[0]" */,

    config input SC_XREG_0[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_XREG_0[1],SC_XREG_0[0]" */,

    config input SC_YREG_0[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_YREG_0[1],SC_YREG_0[0]" */,

    config input SC_HREG_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_HREG_0" */,

    config input SC_ZREG_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ZREG_0" */,

    config input SC_PREREG_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PREREG_0" */,

    config input SC_MREG_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MREG_0" */,

    config input SC_PREG_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PREG_0" */,

    config input SC_MODEYREG_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MODEYREG_0" */,

    config input SC_MODEZREG_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MODEZREG_0" */,

    config input SC_INCTRLREG_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_INCTRLREG_0" */,

    config input SC_XSEL_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_XSEL_0" */,

    config input SC_XBSEL_0[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_XBSEL_0[1],SC_XBSEL_0[0]" */,

    config input SC_PINIT0_0[47:0] = 48'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PINIT0_0[47],SC_PINIT0_0[46],SC_PINIT0_0[45],SC_PINIT0_0[44],SC_PINIT0_0[43],SC_PINIT0_0[42],SC_PINIT0_0[41],SC_PINIT0_0[40],SC_PINIT0_0[39],SC_PINIT0_0[38],SC_PINIT0_0[37],SC_PINIT0_0[36],SC_PINIT0_0[35],SC_PINIT0_0[34],SC_PINIT0_0[33],SC_PINIT0_0[32],SC_PINIT0_0[31],SC_PINIT0_0[30],SC_PINIT0_0[29],SC_PINIT0_0[28],SC_PINIT0_0[27],SC_PINIT0_0[26],SC_PINIT0_0[25],SC_PINIT0_0[24],SC_PINIT0_0[23],SC_PINIT0_0[22],SC_PINIT0_0[21],SC_PINIT0_0[20],SC_PINIT0_0[19],SC_PINIT0_0[18],SC_PINIT0_0[17],SC_PINIT0_0[16],SC_PINIT0_0[15],SC_PINIT0_0[14],SC_PINIT0_0[13],SC_PINIT0_0[12],SC_PINIT0_0[11],SC_PINIT0_0[10],SC_PINIT0_0[9],SC_PINIT0_0[8],SC_PINIT0_0[7],SC_PINIT0_0[6],SC_PINIT0_0[5],SC_PINIT0_0[4],SC_PINIT0_0[3],SC_PINIT0_0[2],SC_PINIT0_0[1],SC_PINIT0_0[0]" */,

    config input SC_PINIT1_0[47:0] = 48'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PINIT1_0[47],SC_PINIT1_0[46],SC_PINIT1_0[45],SC_PINIT1_0[44],SC_PINIT1_0[43],SC_PINIT1_0[42],SC_PINIT1_0[41],SC_PINIT1_0[40],SC_PINIT1_0[39],SC_PINIT1_0[38],SC_PINIT1_0[37],SC_PINIT1_0[36],SC_PINIT1_0[35],SC_PINIT1_0[34],SC_PINIT1_0[33],SC_PINIT1_0[32],SC_PINIT1_0[31],SC_PINIT1_0[30],SC_PINIT1_0[29],SC_PINIT1_0[28],SC_PINIT1_0[27],SC_PINIT1_0[26],SC_PINIT1_0[25],SC_PINIT1_0[24],SC_PINIT1_0[23],SC_PINIT1_0[22],SC_PINIT1_0[21],SC_PINIT1_0[20],SC_PINIT1_0[19],SC_PINIT1_0[18],SC_PINIT1_0[17],SC_PINIT1_0[16],SC_PINIT1_0[15],SC_PINIT1_0[14],SC_PINIT1_0[13],SC_PINIT1_0[12],SC_PINIT1_0[11],SC_PINIT1_0[10],SC_PINIT1_0[9],SC_PINIT1_0[8],SC_PINIT1_0[7],SC_PINIT1_0[6],SC_PINIT1_0[5],SC_PINIT1_0[4],SC_PINIT1_0[3],SC_PINIT1_0[2],SC_PINIT1_0[1],SC_PINIT1_0[0]" */,

    config input SC_ROUNDMODE_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ROUNDMODE_0" */,

    config input SC_PCISEL_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PCISEL_0" */,

    config input SC_POREG_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_POREG_0" */,

    config input SC_ACCLOW_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ACCLOW_0" */,

    config input SC_XSE_0[13:0] = 14'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_XSE_0[13],SC_XSE_0[12],SC_XSE_0[11],SC_XSE_0[10],SC_XSE_0[9],SC_XSE_0[8],SC_XSE_0[7],SC_XSE_0[6],SC_XSE_0[5],SC_XSE_0[4],SC_XSE_0[3],SC_XSE_0[2],SC_XSE_0[1],SC_XSE_0[0]" */,

    config input SC_HSE_0[10:0] = 11'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_HSE_0[10],SC_HSE_0[9],SC_HSE_0[8],SC_HSE_0[7],SC_HSE_0[6],SC_HSE_0[5],SC_HSE_0[4],SC_HSE_0[3],SC_HSE_0[2],SC_HSE_0[1],SC_HSE_0[0]" */,

    config input SC_YSE_0[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_YSE_0[7],SC_YSE_0[6],SC_YSE_0[5],SC_YSE_0[4],SC_YSE_0[3],SC_YSE_0[2],SC_YSE_0[1],SC_YSE_0[0]" */,

    config input SC_ZSE_0[22:0] = 23'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ZSE_0[22],SC_ZSE_0[21],SC_ZSE_0[20],SC_ZSE_0[19],SC_ZSE_0[18],SC_ZSE_0[17],SC_ZSE_0[16],SC_ZSE_0[15],SC_ZSE_0[14],SC_ZSE_0[13],SC_ZSE_0[12],SC_ZSE_0[11],SC_ZSE_0[10],SC_ZSE_0[9],SC_ZSE_0[8],SC_ZSE_0[7],SC_ZSE_0[6],SC_ZSE_0[5],SC_ZSE_0[4],SC_ZSE_0[3],SC_ZSE_0[2],SC_ZSE_0[1],SC_ZSE_0[0]" */,

    config input SC_YCONST_0[17:0] = 18'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_YCONST_0[17],SC_YCONST_0[16],SC_YCONST_0[15],SC_YCONST_0[14],SC_YCONST_0[13],SC_YCONST_0[12],SC_YCONST_0[11],SC_YCONST_0[10],SC_YCONST_0[9],SC_YCONST_0[8],SC_YCONST_0[7],SC_YCONST_0[6],SC_YCONST_0[5],SC_YCONST_0[4],SC_YCONST_0[3],SC_YCONST_0[2],SC_YCONST_0[1],SC_YCONST_0[0]" */,

    config input SC_MODEYCONST_0[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MODEYCONST_0[2],SC_MODEYCONST_0[1],SC_MODEYCONST_0[0]" */,

    config input SC_MODEZCONST_0[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MODEZCONST_0[3],SC_MODEZCONST_0[2],SC_MODEZCONST_0[1],SC_MODEZCONST_0[0]" */,

    config input SC_INCTRLCONST_0[4:0] = 5'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_INCTRLCONST_0[4],SC_INCTRLCONST_0[3],SC_INCTRLCONST_0[2],SC_INCTRLCONST_0[1],SC_INCTRLCONST_0[0]" */,

    config input SC_YDYNSEL_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_YDYNSEL_0" */,

    config input SC_MODEYDYNSEL_0[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MODEYDYNSEL_0[2],SC_MODEYDYNSEL_0[1],SC_MODEYDYNSEL_0[0]" */,

    config input SC_MODEZDYNSEL_0[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MODEZDYNSEL_0[3],SC_MODEZDYNSEL_0[2],SC_MODEZDYNSEL_0[1],SC_MODEZDYNSEL_0[0]" */,

    config input SC_INCTRLDYNSEL_0[4:0] = 5'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_INCTRLDYNSEL_0[4],SC_INCTRLDYNSEL_0[3],SC_INCTRLDYNSEL_0[2],SC_INCTRLDYNSEL_0[1],SC_INCTRLDYNSEL_0[0]" */,

    config input SC_GRS_DIS_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GRS_DIS_0" */,

    config input SC_OR2CASECADE_EN_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_OR2CASECADE_EN_0" */,

    config input SC_OR2CORE_EN_0[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_OR2CORE_EN_0[1],SC_OR2CORE_EN_0[0]" */,

    config input SC_IRX_SHFEN_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_IRX_SHFEN_0" */,

    config input SC_IRZ_SHFEN_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_IRZ_SHFEN_0" */,

    config input SC_MULT_EN_0[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MULT_EN_0[1],SC_MULT_EN_0[0]" */,

    config input SC_APM_EN_0 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_APM_EN_0" */,

    config input SC_SCSEL_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SCSEL_1" */,

    config input SC_ASYNC_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ASYNC_1" */,

    config input SC_SIMD_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SIMD_1" */,

    config input SC_POSTADD_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_POSTADD_1" */,

    config input SC_PREADD_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PREADD_1" */,

    config input SC_XOREG_1[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_XOREG_1[1],SC_XOREG_1[0]" */,

    config input SC_XREG_1[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_XREG_1[1],SC_XREG_1[0]" */,

    config input SC_YREG_1[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_YREG_1[1],SC_YREG_1[0]" */,

    config input SC_HREG_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_HREG_1" */,

    config input SC_ZREG_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ZREG_1" */,

    config input SC_PREREG_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PREREG_1" */,

    config input SC_MREG_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MREG_1" */,

    config input SC_PREG_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PREG_1" */,

    config input SC_MODEYREG_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MODEYREG_1" */,

    config input SC_MODEZREG_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MODEZREG_1" */,

    config input SC_INCTRLREG_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_INCTRLREG_1" */,

    config input SC_XSEL_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_XSEL_1" */,

    config input SC_XBSEL_1[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_XBSEL_1[1],SC_XBSEL_1[0]" */,

    config input SC_PINIT0_1[47:0] = 48'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PINIT0_1[47],SC_PINIT0_1[46],SC_PINIT0_1[45],SC_PINIT0_1[44],SC_PINIT0_1[43],SC_PINIT0_1[42],SC_PINIT0_1[41],SC_PINIT0_1[40],SC_PINIT0_1[39],SC_PINIT0_1[38],SC_PINIT0_1[37],SC_PINIT0_1[36],SC_PINIT0_1[35],SC_PINIT0_1[34],SC_PINIT0_1[33],SC_PINIT0_1[32],SC_PINIT0_1[31],SC_PINIT0_1[30],SC_PINIT0_1[29],SC_PINIT0_1[28],SC_PINIT0_1[27],SC_PINIT0_1[26],SC_PINIT0_1[25],SC_PINIT0_1[24],SC_PINIT0_1[23],SC_PINIT0_1[22],SC_PINIT0_1[21],SC_PINIT0_1[20],SC_PINIT0_1[19],SC_PINIT0_1[18],SC_PINIT0_1[17],SC_PINIT0_1[16],SC_PINIT0_1[15],SC_PINIT0_1[14],SC_PINIT0_1[13],SC_PINIT0_1[12],SC_PINIT0_1[11],SC_PINIT0_1[10],SC_PINIT0_1[9],SC_PINIT0_1[8],SC_PINIT0_1[7],SC_PINIT0_1[6],SC_PINIT0_1[5],SC_PINIT0_1[4],SC_PINIT0_1[3],SC_PINIT0_1[2],SC_PINIT0_1[1],SC_PINIT0_1[0]" */,

    config input SC_PINIT1_1[47:0] = 48'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PINIT1_1[47],SC_PINIT1_1[46],SC_PINIT1_1[45],SC_PINIT1_1[44],SC_PINIT1_1[43],SC_PINIT1_1[42],SC_PINIT1_1[41],SC_PINIT1_1[40],SC_PINIT1_1[39],SC_PINIT1_1[38],SC_PINIT1_1[37],SC_PINIT1_1[36],SC_PINIT1_1[35],SC_PINIT1_1[34],SC_PINIT1_1[33],SC_PINIT1_1[32],SC_PINIT1_1[31],SC_PINIT1_1[30],SC_PINIT1_1[29],SC_PINIT1_1[28],SC_PINIT1_1[27],SC_PINIT1_1[26],SC_PINIT1_1[25],SC_PINIT1_1[24],SC_PINIT1_1[23],SC_PINIT1_1[22],SC_PINIT1_1[21],SC_PINIT1_1[20],SC_PINIT1_1[19],SC_PINIT1_1[18],SC_PINIT1_1[17],SC_PINIT1_1[16],SC_PINIT1_1[15],SC_PINIT1_1[14],SC_PINIT1_1[13],SC_PINIT1_1[12],SC_PINIT1_1[11],SC_PINIT1_1[10],SC_PINIT1_1[9],SC_PINIT1_1[8],SC_PINIT1_1[7],SC_PINIT1_1[6],SC_PINIT1_1[5],SC_PINIT1_1[4],SC_PINIT1_1[3],SC_PINIT1_1[2],SC_PINIT1_1[1],SC_PINIT1_1[0]" */,

    config input SC_ROUNDMODE_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ROUNDMODE_1" */,

    config input SC_PCISEL_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PCISEL_1" */,

    config input SC_POREG_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_POREG_1" */,

    config input SC_ACCLOW_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ACCLOW_1" */,

    config input SC_XSE_1[13:0] = 14'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_XSE_1[13],SC_XSE_1[12],SC_XSE_1[11],SC_XSE_1[10],SC_XSE_1[9],SC_XSE_1[8],SC_XSE_1[7],SC_XSE_1[6],SC_XSE_1[5],SC_XSE_1[4],SC_XSE_1[3],SC_XSE_1[2],SC_XSE_1[1],SC_XSE_1[0]" */,

    config input SC_HSE_1[10:0] = 11'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_HSE_1[10],SC_HSE_1[9],SC_HSE_1[8],SC_HSE_1[7],SC_HSE_1[6],SC_HSE_1[5],SC_HSE_1[4],SC_HSE_1[3],SC_HSE_1[2],SC_HSE_1[1],SC_HSE_1[0]" */,

    config input SC_YSE_1[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_YSE_1[7],SC_YSE_1[6],SC_YSE_1[5],SC_YSE_1[4],SC_YSE_1[3],SC_YSE_1[2],SC_YSE_1[1],SC_YSE_1[0]" */,

    config input SC_ZSE_1[22:0] = 23'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ZSE_1[22],SC_ZSE_1[21],SC_ZSE_1[20],SC_ZSE_1[19],SC_ZSE_1[18],SC_ZSE_1[17],SC_ZSE_1[16],SC_ZSE_1[15],SC_ZSE_1[14],SC_ZSE_1[13],SC_ZSE_1[12],SC_ZSE_1[11],SC_ZSE_1[10],SC_ZSE_1[9],SC_ZSE_1[8],SC_ZSE_1[7],SC_ZSE_1[6],SC_ZSE_1[5],SC_ZSE_1[4],SC_ZSE_1[3],SC_ZSE_1[2],SC_ZSE_1[1],SC_ZSE_1[0]" */,

    config input SC_YCONST_1[17:0] = 18'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_YCONST_1[17],SC_YCONST_1[16],SC_YCONST_1[15],SC_YCONST_1[14],SC_YCONST_1[13],SC_YCONST_1[12],SC_YCONST_1[11],SC_YCONST_1[10],SC_YCONST_1[9],SC_YCONST_1[8],SC_YCONST_1[7],SC_YCONST_1[6],SC_YCONST_1[5],SC_YCONST_1[4],SC_YCONST_1[3],SC_YCONST_1[2],SC_YCONST_1[1],SC_YCONST_1[0]" */,

    config input SC_MODEYCONST_1[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MODEYCONST_1[2],SC_MODEYCONST_1[1],SC_MODEYCONST_1[0]" */,

    config input SC_MODEZCONST_1[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MODEZCONST_1[3],SC_MODEZCONST_1[2],SC_MODEZCONST_1[1],SC_MODEZCONST_1[0]" */,

    config input SC_INCTRLCONST_1[4:0] = 5'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_INCTRLCONST_1[4],SC_INCTRLCONST_1[3],SC_INCTRLCONST_1[2],SC_INCTRLCONST_1[1],SC_INCTRLCONST_1[0]" */,

    config input SC_YDYNSEL_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_YDYNSEL_1" */,

    config input SC_MODEYDYNSEL_1[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MODEYDYNSEL_1[2],SC_MODEYDYNSEL_1[1],SC_MODEYDYNSEL_1[0]" */,

    config input SC_MODEZDYNSEL_1[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MODEZDYNSEL_1[3],SC_MODEZDYNSEL_1[2],SC_MODEZDYNSEL_1[1],SC_MODEZDYNSEL_1[0]" */,

    config input SC_INCTRLDYNSEL_1[4:0] = 5'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_INCTRLDYNSEL_1[4],SC_INCTRLDYNSEL_1[3],SC_INCTRLDYNSEL_1[2],SC_INCTRLDYNSEL_1[1],SC_INCTRLDYNSEL_1[0]" */,

    config input SC_GRS_DIS_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GRS_DIS_1" */,

    config input SC_OR2CASECADE_EN_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_OR2CASECADE_EN_1" */,

    config input SC_OR2CORE_EN_1[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_OR2CORE_EN_1[1],SC_OR2CORE_EN_1[0]" */,

    config input SC_IRX_SHFEN_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_IRX_SHFEN_1" */,

    config input SC_IRZ_SHFEN_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_IRZ_SHFEN_1" */,

    config input SC_MULT_EN_1[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MULT_EN_1[1],SC_MULT_EN_1[0]" */,

    config input SC_APM_EN_1 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_APM_EN_1" */,

// configuration_body_def_end

        input XI[29:0] = 30'b1111_1111_1111_1111_1111_1111_1111_11,
        input XBI[24:0] = 25'b1111_1111_1111_1111_1111_1111_1,
        input PI[47:0] = 48'b1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111,
        input X_0[29:0] = 30'b1111_1111_1111_1111_1111_1111_1111_11,
        input H_0[24:0] = 25'b1111_1111_1111_1111_1111_1111_1,
        input Y_0[17:0] = 18'b1111_1111_1111_1111_11,
        input Z_0[47:0] = 48'b1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111,
        input MODEY_0[2:0] = 3'b111,
        input MODEZ_0[3:0] = 4'b1111,
        input INCTRL_0[4:0] = 5'b1111_1,
        input X_1[29:0] = 30'b1111_1111_1111_1111_1111_1111_1111_11,
        input H_1[24:0] = 25'b1111_1111_1111_1111_1111_1111_1,
        input Y_1[17:0] = 18'b1111_1111_1111_1111_11,
        input Z_1[47:0] = 48'b1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111,
        input MODEY_1[2:0] = 3'b111,
        input MODEZ_1[3:0] = 4'b1111,
        input INCTRL_1[4:0] = 5'b1111_1,
        input PCI = 1'b1,
        input TEST_RST1_N = 1'b1,
        input TEST_SE1_N = 1'b1,
        input TEST_MODE_N = 1'b1,
        input CLK_0 = 1'b1,
        input RST_X_0 = 1'b1,
        input CE_X1_0 = 1'b1,
        input CE_X2_0 = 1'b1,
        input CE_X3_0 = 1'b1,
        input RST_H_0 = 1'b1,
        input CE_H_0 = 1'b1,
        input RST_Y_0 = 1'b1,
        input CE_Y1_0 = 1'b1,
        input CE_Y2_0 = 1'b1,
        input RST_Z_0 = 1'b1,
        input CE_Z_0 = 1'b1,
        input RST_PRE_0 = 1'b1,
        input CE_PRE_0 = 1'b1,
        input RST_M_0 = 1'b1,
        input CE_M_0 = 1'b1,
        input RST_P_0 = 1'b1,
        input CE_P_0 = 1'b1,
        input RST_MODEY_0 = 1'b1,
        input CE_MODEY_0 = 1'b1,
        input RST_MODEZ_0 = 1'b1,
        input CE_MODEZ_0 = 1'b1,
        input RST_INCTRL_0 = 1'b1,
        input CE_INCTRL_0 = 1'b1,
        input TEST_CLK_0 = 1'b1,
        input TEST_SE0_N_0 = 1'b1,
        input TEST_RST0_N_0 = 1'b1,
        input TEST_SI0_0 = 1'b1,
        input TEST_SI1_0 = 1'b1,
        input CLK_1 = 1'b1,
        input RST_X_1 = 1'b1,
        input CE_X1_1 = 1'b1,
        input CE_X2_1 = 1'b1,
        input CE_X3_1 = 1'b1,
        input RST_H_1 = 1'b1,
        input CE_H_1 = 1'b1,
        input RST_Y_1 = 1'b1,
        input CE_Y1_1 = 1'b1,
        input CE_Y2_1 = 1'b1,
        input RST_Z_1 = 1'b1,
        input CE_Z_1 = 1'b1,
        input RST_PRE_1 = 1'b1,
        input CE_PRE_1 = 1'b1,
        input RST_M_1 = 1'b1,
        input CE_M_1 = 1'b1,
        input RST_P_1 = 1'b1,
        input CE_P_1 = 1'b1,
        input RST_MODEY_1 = 1'b1,
        input CE_MODEY_1 = 1'b1,
        input RST_MODEZ_1 = 1'b1,
        input CE_MODEZ_1 = 1'b1,
        input RST_INCTRL_1 = 1'b1,
        input CE_INCTRL_1 = 1'b1,
        input TEST_CLK_1 = 1'b1,
        input TEST_SE0_N_1 = 1'b1,
        input TEST_RST0_N_1 = 1'b1,
        input TEST_SI0_1 = 1'b1,
        input TEST_SI1_1 = 1'b1,
        output PO[47:0],
        output XO[29:0],
        output XBO[24:0],
        output P_0[47:0],
        output P_1[47:0],
        output PCO,
        output TEST_SO0_0,
        output TEST_SO1_0,
        output TEST_SO0_1,
        output TEST_SO1_1
    );
};
//grid device end

//grid device structure netlist started
structure netlist of APM
{
    //************************************ XAPM_CORE_U ************************************************
    wire ntCLK_0;
    wire ntRST_X_0;
    wire ntCE_X1_0;
    wire ntCE_X2_0;
    wire ntCE_X3_0;
    wire ntRST_H_0;
    wire ntCE_H_0;
    wire ntRST_Y_0;
    wire ntCE_Y1_0;
    wire ntCE_Y2_0;
    wire ntRST_Z_0;
    wire ntCE_Z_0;
    wire ntRST_PRE_0;
    wire ntCE_PRE_0;
    wire ntRST_M_0;
    wire ntCE_M_0;
    wire ntRST_P_0;
    wire ntCE_P_0;
    wire ntRST_MODEY_0;
    wire ntCE_MODEY_0;
    wire ntRST_MODEZ_0;
    wire ntCE_MODEZ_0;
    wire ntRST_INCTRL_0;
    wire ntCE_INCTRL_0;
    wire ntTEST_CLK_0;
    wire ntTEST_SE0_N_0;
    wire ntTEST_RST0_N_0;
    wire ntTEST_SI0_0;
    wire ntTEST_SI1_0;
    wire ntTEST_SO0_0;
    wire ntTEST_SO1_0;
    //**************************** XAPM_CORE_D ************************************************
    wire ntCLK_1;
    wire ntRST_X_1;
    wire ntCE_X1_1;
    wire ntCE_X2_1;
    wire ntCE_X3_1;
    wire ntRST_H_1;
    wire ntCE_H_1;
    wire ntRST_Y_1;
    wire ntCE_Y1_1;
    wire ntCE_Y2_1;
    wire ntRST_Z_1;
    wire ntCE_Z_1;
    wire ntRST_PRE_1;
    wire ntCE_PRE_1;
    wire ntRST_M_1;
    wire ntCE_M_1;
    wire ntRST_P_1;
    wire ntCE_P_1;
    wire ntRST_MODEY_1;
    wire ntCE_MODEY_1;
    wire ntRST_MODEZ_1;
    wire ntCE_MODEZ_1;
    wire ntRST_INCTRL_1;
    wire ntCE_INCTRL_1;
    wire ntTEST_CLK_1;
    wire ntTEST_SE0_N_1;
    wire ntTEST_RST0_N_1;
    wire ntTEST_SI0_1;
    wire ntTEST_SI1_1;
    wire ntTEST_SO0_1;
    wire ntTEST_SO1_1;   
    //**************************** common ************************************************        
    
    wire ntXBIO[24:0];
    wire ntPIO[47:0];
    wire ntXIO[29:0];
    wire ntPCIO;
    wire ntPCI;
    wire ntPCO;
    wire ntTEST_MODE_N;
    wire ntTEST_SE1_N;
    wire ntTEST_RST1_N;
    //****************************assign XAPM_CORE_U************************************************
    ntCLK_0              <= CLK_0;
    ntRST_X_0            <= RST_X_0;
    ntCE_X1_0            <= CE_X1_0;
    ntCE_X2_0            <= CE_X2_0;
    ntCE_X3_0            <= CE_X3_0;
    ntRST_H_0            <= RST_H_0;
    ntCE_H_0             <= CE_H_0;
    ntRST_Y_0            <= RST_Y_0;
    ntCE_Y1_0            <= CE_Y1_0;
    ntCE_Y2_0            <= CE_Y2_0;
    ntRST_Z_0            <= RST_Z_0;
    ntCE_Z_0             <= CE_Z_0;
    ntRST_PRE_0          <= RST_PRE_0;
    ntCE_PRE_0           <= CE_PRE_0;
    ntRST_M_0            <= RST_M_0;
    ntCE_M_0             <= CE_M_0;
    ntRST_P_0            <= RST_P_0;
    ntCE_P_0             <= CE_P_0;
    ntRST_MODEY_0        <= RST_MODEY_0;
    ntCE_MODEY_0         <= CE_MODEY_0;
    ntRST_MODEZ_0        <= RST_MODEZ_0;
    ntCE_MODEZ_0         <= CE_MODEZ_0;
    ntRST_INCTRL_0       <= RST_INCTRL_0;
    ntCE_INCTRL_0        <= CE_INCTRL_0;
    ntTEST_CLK_0         <= TEST_CLK_0;
    ntTEST_SE0_N_0       <= TEST_SE0_N_0;
    ntTEST_RST0_N_0      <= TEST_RST0_N_0;
    ntTEST_SI0_0         <= TEST_SI0_0;
    ntTEST_SI1_0         <= TEST_SI1_0;
    ntTEST_SO0_0         <= TEST_SO0_0;
    ntTEST_SO1_0         <= TEST_SO1_0;
    ntPCI                <= PCI;
    //****************************assign XAPM_CORE_D************************************************
    ntCLK_1              <= CLK_1;
    ntRST_X_1            <= RST_X_1;
    ntCE_X1_1            <= CE_X1_1;
    ntCE_X2_1            <= CE_X2_1;
    ntCE_X3_1            <= CE_X3_1;
    ntRST_H_1            <= RST_H_1;
    ntCE_H_1             <= CE_H_1;
    ntRST_Y_1            <= RST_Y_1;
    ntCE_Y1_1            <= CE_Y1_1;
    ntCE_Y2_1            <= CE_Y2_1;
    ntRST_Z_1            <= RST_Z_1;
    ntCE_Z_1             <= CE_Z_1;
    ntRST_PRE_1          <= RST_PRE_1;
    ntCE_PRE_1           <= CE_PRE_1;
    ntRST_M_1            <= RST_M_1;
    ntCE_M_1             <= CE_M_1;
    ntRST_P_1            <= RST_P_1;
    ntCE_P_1             <= CE_P_1;
    ntRST_MODEY_1        <= RST_MODEY_1;
    ntCE_MODEY_1         <= CE_MODEY_1;
    ntRST_MODEZ_1        <= RST_MODEZ_1;
    ntCE_MODEZ_1         <= CE_MODEZ_1;
    ntRST_INCTRL_1       <= RST_INCTRL_1;
    ntCE_INCTRL_1        <= CE_INCTRL_1;
    ntTEST_CLK_1         <= TEST_CLK_1;
    ntTEST_SE0_N_1       <= TEST_SE0_N_1;
    ntTEST_RST0_N_1      <= TEST_RST0_N_1;
    ntTEST_SI0_1         <= TEST_SI0_1;
    ntTEST_SI1_1         <= TEST_SI1_1;
    ntTEST_SO0_1         <= TEST_SO0_1;
    ntTEST_SO1_1         <= TEST_SO1_1;
    PCO                  <= ntPCO;
    //**************************** common ************************************************
    ntTEST_MODE_N       <= TEST_MODE_N;
    ntTEST_SE1_N        <= TEST_SE1_N;
    ntTEST_RST1_N       <= TEST_RST1_N;
        
    device APM_CORE XAPM_CORE_U
    parameter map
    (
        CP_SCSEL                 => CP_SCSEL_0,
        CP_ASYNC                 => CP_ASYNC_0,
        CP_SIMD                  => CP_SIMD_0,
        CP_POSTADD               => CP_POSTADD_0,
        CP_PREADD                => CP_PREADD_0,
        CP_XOREG                 => CP_XOREG_0,
        CP_XREG                  => CP_XREG_0,
        CP_YREG                  => CP_YREG_0,
        CP_HREG                  => CP_HREG_0,
        CP_ZREG                  => CP_ZREG_0,
        CP_PREREG                => CP_PREREG_0,
        CP_MREG                  => CP_MREG_0,
        CP_PREG                  => CP_PREG_0,
        CP_MODEYREG              => CP_MODEYREG_0,
        CP_MODEZREG              => CP_MODEZREG_0,
        CP_INCTRLREG             => CP_INCTRLREG_0,
        CP_XSEL                  => CP_XSEL_0,
        CP_XBSEL                 => CP_XBSEL_0,
        CP_PINIT0                => CP_PINIT0_0,
        CP_PINIT1                => CP_PINIT1_0,
        CP_ROUNDMODE             => CP_ROUNDMODE_0,
        CP_PCISEL                => CP_PCISEL_0,
        CP_POREG                 => CP_POREG_0,
        CP_ACCLOW                => CP_ACCLOW_0,
        CP_XSE                   => CP_XSE_0,
        CP_HSE                   => CP_HSE_0,
        CP_YSE                   => CP_YSE_0,
        CP_ZSE                   => CP_ZSE_0,
        CP_YCONST                => CP_YCONST_0,
        CP_MODEYCONST            => CP_MODEYCONST_0,
        CP_MODEZCONST            => CP_MODEZCONST_0,
        CP_INCTRLCONST           => CP_INCTRLCONST_0,
        CP_YDYNSEL               => CP_YDYNSEL_0,
        CP_MODEYDYNSEL           => CP_MODEYDYNSEL_0,
        CP_MODEZDYNSEL           => CP_MODEZDYNSEL_0,
        CP_INCTRLDYNSEL          => CP_INCTRLDYNSEL_0,
        CP_GRS_DIS               => CP_GRS_DIS_0,
        CP_OR2CASECADE_EN        => CP_OR2CASECADE_EN_0,
        CP_OR2CORE_EN            => CP_OR2CORE_EN_0,
        CP_IRX_SHFEN             => CP_IRX_SHFEN_0,
        CP_IRZ_SHFEN             => CP_IRZ_SHFEN_0,
        CP_MULT_EN               => CP_MULT_EN_0,
        CP_APM_EN                => CP_APM_EN_0
    )
    port map
    (
        X               => X_0,     
        H               => H_0,
        Y               => Y_0,
        Z               => Z_0,      
        MODEY           => MODEY_0,
        MODEZ           => MODEZ_0,
        INCTRL          => INCTRL_0,
        P               => P_0,      
        TEST_MODE_N     => ntTEST_MODE_N,
        TEST_SE1_N      => ntTEST_SE1_N,
        TEST_RST1_N     => ntTEST_RST1_N,
        CLK             => ntCLK_0,
        RST_X           => ntRST_X_0,
        CE_X1           => ntCE_X1_0,
        CE_X2           => ntCE_X2_0,
        CE_X3           => ntCE_X3_0,
        RST_H           => ntRST_H_0,
        CE_H            => ntCE_H_0,
        RST_Y           => ntRST_Y_0,
        CE_Y1           => ntCE_Y1_0,
        CE_Y2           => ntCE_Y2_0,
        RST_Z           => ntRST_Z_0,
        CE_Z            => ntCE_Z_0,
        RST_PRE         => ntRST_PRE_0,
        CE_PRE          => ntCE_PRE_0,
        RST_M           => ntRST_M_0,
        CE_M            => ntCE_M_0,
        RST_P           => ntRST_P_0,
        CE_P            => ntCE_P_0,
        RST_MODEY       => ntRST_MODEY_0,
        CE_MODEY        => ntCE_MODEY_0,
        RST_MODEZ       => ntRST_MODEZ_0,
        CE_MODEZ        => ntCE_MODEZ_0,
        RST_INCTRL      => ntRST_INCTRL_0,
        CE_INCTRL       => ntCE_INCTRL_0,
        TEST_CLK        => ntTEST_CLK_0,
        TEST_SE0_N      => ntTEST_SE0_N_0,
        TEST_RST0_N     => ntTEST_RST0_N_0,
        TEST_SI0        => ntTEST_SI0_0,
        TEST_SI1        => ntTEST_SI1_0,
        TEST_SO0        => ntTEST_SO0_0,
        TEST_SO1        => ntTEST_SO1_0,
        
        //chain port
        XBI                    => XBI,
        PO                     => PO,
        XO                     => XO,
        PCO                    => ntPCO,
        
        //Logic Port Map
        XBO                    => ntXBIO,
        PI                     => ntPIO,
        XI                     => ntXIO,
        PCI                    => ntPCIO
    );

    device APM_CORE XAPM_CORE_D
    parameter map
    (
        CP_SCSEL                => CP_SCSEL_1,
        CP_ASYNC                => CP_ASYNC_1,
        CP_SIMD                 => CP_SIMD_1,
        CP_POSTADD              => CP_POSTADD_1,
        CP_PREADD               => CP_PREADD_1,
        CP_XOREG                => CP_XOREG_1,
        CP_XREG                 => CP_XREG_1,
        CP_YREG                 => CP_YREG_1,
        CP_HREG                 => CP_HREG_1,
        CP_ZREG                 => CP_ZREG_1,
        CP_PREREG               => CP_PREREG_1,
        CP_MREG                 => CP_MREG_1,
        CP_PREG                 => CP_PREG_1,
        CP_MODEYREG             => CP_MODEYREG_1,
        CP_MODEZREG             => CP_MODEZREG_1,
        CP_INCTRLREG            => CP_INCTRLREG_1,
        CP_XSEL                 => CP_XSEL_1,
        CP_XBSEL                => CP_XBSEL_1,
        CP_PINIT0               => CP_PINIT0_1,
        CP_PINIT1               => CP_PINIT1_1,
        CP_ROUNDMODE            => CP_ROUNDMODE_1,
        CP_PCISEL               => CP_PCISEL_1,
        CP_POREG                => CP_POREG_1,
        CP_ACCLOW               => CP_ACCLOW_1,
        CP_XSE                  => CP_XSE_1,
        CP_HSE                  => CP_HSE_1,
        CP_YSE                  => CP_YSE_1,
        CP_ZSE                  => CP_ZSE_1,
        CP_YCONST               => CP_YCONST_1,
        CP_MODEYCONST           => CP_MODEYCONST_1,
        CP_MODEZCONST           => CP_MODEZCONST_1,
        CP_INCTRLCONST          => CP_INCTRLCONST_1,
        CP_YDYNSEL              => CP_YDYNSEL_1,
        CP_MODEYDYNSEL          => CP_MODEYDYNSEL_1,
        CP_MODEZDYNSEL          => CP_MODEZDYNSEL_1,
        CP_INCTRLDYNSEL         => CP_INCTRLDYNSEL_1,
        CP_GRS_DIS              => CP_GRS_DIS_1,
        CP_OR2CASECADE_EN       => CP_OR2CASECADE_EN_1,
        CP_OR2CORE_EN           => CP_OR2CORE_EN_1,
        CP_IRX_SHFEN            => CP_IRX_SHFEN_1,
        CP_IRZ_SHFEN            => CP_IRZ_SHFEN_1,
        CP_MULT_EN              => CP_MULT_EN_1,
        CP_APM_EN               => CP_APM_EN_1
    )
    port map
    (
        X                      => X_1,        
        H                      => H_1,
        Y                      => Y_1,
        Z                      => Z_1,
        P                      => P_1,        
        MODEY                  => MODEY_1,
        MODEZ                  => MODEZ_1,
        INCTRL                 => INCTRL_1,
        CLK                    => ntCLK_1,
        RST_X                  => ntRST_X_1,
        CE_X1                  => ntCE_X1_1,
        CE_X2                  => ntCE_X2_1,
        CE_X3                  => ntCE_X3_1,
        RST_H                  => ntRST_H_1,
        CE_H                   => ntCE_H_1,
        RST_Y                  => ntRST_Y_1,
        CE_Y1                  => ntCE_Y1_1,
        CE_Y2                  => ntCE_Y2_1,
        RST_Z                  => ntRST_Z_1,
        CE_Z                   => ntCE_Z_1,
        RST_PRE                => ntRST_PRE_1,
        CE_PRE                 => ntCE_PRE_1,
        RST_M                  => ntRST_M_1,
        CE_M                   => ntCE_M_1,
        RST_P                  => ntRST_P_1,
        CE_P                   => ntCE_P_1,
        RST_MODEY              => ntRST_MODEY_1,
        CE_MODEY               => ntCE_MODEY_1,
        RST_MODEZ              => ntRST_MODEZ_1,
        CE_MODEZ               => ntCE_MODEZ_1,
        RST_INCTRL             => ntRST_INCTRL_1,
        CE_INCTRL              => ntCE_INCTRL_1,
        TEST_CLK               => ntTEST_CLK_1,
        TEST_SE0_N             => ntTEST_SE0_N_1,
        TEST_RST0_N            => ntTEST_RST0_N_1,
        TEST_SI0               => ntTEST_SI0_1,
        TEST_SI1               => ntTEST_SI1_1,      
        TEST_SO0               => ntTEST_SO0_1,
        TEST_SO1               => ntTEST_SO1_1,
        
        //chain port
        XBO             => XBO,
        PI              => PI,
        XI              => XI,
        PCI             => ntPCI,     
        
        //Logic Port Map
        XBI             => ntXBIO,
        PO              => ntPIO,
        XO              => ntXIO,
        PCO             => ntPCIO
    );
};
//grid device structure netlist end
//grid device configure body started

configuration cfg of APM
{

 // assign config body begin
    SC_SCSEL_0  :=  CP_SCSEL_0;
    SC_ASYNC_0  :=  CP_ASYNC_0;
    SC_SIMD_0  :=  CP_SIMD_0;
    SC_POSTADD_0  :=  CP_POSTADD_0;
    SC_PREADD_0  :=  CP_PREADD_0;
    SC_XOREG_0  :=  CP_XOREG_0;
    SC_XREG_0  :=  CP_XREG_0;
    SC_YREG_0  :=  CP_YREG_0;
    SC_HREG_0  :=  CP_HREG_0;
    SC_ZREG_0  :=  CP_ZREG_0;
    SC_PREREG_0  :=  CP_PREREG_0;
    SC_MREG_0  :=  CP_MREG_0;
    SC_PREG_0  :=  CP_PREG_0;
    SC_MODEYREG_0  :=  CP_MODEYREG_0;
    SC_MODEZREG_0  :=  CP_MODEZREG_0;
    SC_INCTRLREG_0  :=  CP_INCTRLREG_0;
    SC_XSEL_0  :=  CP_XSEL_0;
    SC_XBSEL_0  :=  CP_XBSEL_0;
    SC_PINIT0_0  :=  CP_PINIT0_0;
    SC_PINIT1_0  :=  CP_PINIT1_0;
    SC_ROUNDMODE_0  :=  CP_ROUNDMODE_0;
    SC_PCISEL_0  :=  CP_PCISEL_0;
    SC_POREG_0  :=  CP_POREG_0;
    SC_ACCLOW_0  :=  CP_ACCLOW_0;
    SC_XSE_0  :=  CP_XSE_0;
    SC_HSE_0  :=  CP_HSE_0;
    SC_YSE_0  :=  CP_YSE_0;
    SC_ZSE_0  :=  CP_ZSE_0;
    SC_YCONST_0  :=  CP_YCONST_0;
    SC_MODEYCONST_0  :=  CP_MODEYCONST_0;
    SC_MODEZCONST_0  :=  CP_MODEZCONST_0;
    SC_INCTRLCONST_0  :=  CP_INCTRLCONST_0;
    SC_YDYNSEL_0  :=  CP_YDYNSEL_0;
    SC_MODEYDYNSEL_0  :=  CP_MODEYDYNSEL_0;
    SC_MODEZDYNSEL_0  :=  CP_MODEZDYNSEL_0;
    SC_INCTRLDYNSEL_0  :=  CP_INCTRLDYNSEL_0;
    SC_GRS_DIS_0  :=  CP_GRS_DIS_0;
    SC_OR2CASECADE_EN_0  :=  CP_OR2CASECADE_EN_0;
    SC_OR2CORE_EN_0  :=  CP_OR2CORE_EN_0;
    SC_IRX_SHFEN_0  :=  CP_IRX_SHFEN_0;
    SC_IRZ_SHFEN_0  :=  CP_IRZ_SHFEN_0;
    SC_MULT_EN_0  :=  CP_MULT_EN_0;
    SC_APM_EN_0  :=  CP_APM_EN_0;
    SC_SCSEL_1  :=  CP_SCSEL_1;
    SC_ASYNC_1  :=  CP_ASYNC_1;
    SC_SIMD_1  :=  CP_SIMD_1;
    SC_POSTADD_1  :=  CP_POSTADD_1;
    SC_PREADD_1  :=  CP_PREADD_1;
    SC_XOREG_1  :=  CP_XOREG_1;
    SC_XREG_1  :=  CP_XREG_1;
    SC_YREG_1  :=  CP_YREG_1;
    SC_HREG_1  :=  CP_HREG_1;
    SC_ZREG_1  :=  CP_ZREG_1;
    SC_PREREG_1  :=  CP_PREREG_1;
    SC_MREG_1  :=  CP_MREG_1;
    SC_PREG_1  :=  CP_PREG_1;
    SC_MODEYREG_1  :=  CP_MODEYREG_1;
    SC_MODEZREG_1  :=  CP_MODEZREG_1;
    SC_INCTRLREG_1  :=  CP_INCTRLREG_1;
    SC_XSEL_1  :=  CP_XSEL_1;
    SC_XBSEL_1  :=  CP_XBSEL_1;
    SC_PINIT0_1  :=  CP_PINIT0_1;
    SC_PINIT1_1  :=  CP_PINIT1_1;
    SC_ROUNDMODE_1  :=  CP_ROUNDMODE_1;
    SC_PCISEL_1  :=  CP_PCISEL_1;
    SC_POREG_1  :=  CP_POREG_1;
    SC_ACCLOW_1  :=  CP_ACCLOW_1;
    SC_XSE_1  :=  CP_XSE_1;
    SC_HSE_1  :=  CP_HSE_1;
    SC_YSE_1  :=  CP_YSE_1;
    SC_ZSE_1  :=  CP_ZSE_1;
    SC_YCONST_1  :=  CP_YCONST_1;
    SC_MODEYCONST_1  :=  CP_MODEYCONST_1;
    SC_MODEZCONST_1  :=  CP_MODEZCONST_1;
    SC_INCTRLCONST_1  :=  CP_INCTRLCONST_1;
    SC_YDYNSEL_1  :=  CP_YDYNSEL_1;
    SC_MODEYDYNSEL_1  :=  CP_MODEYDYNSEL_1;
    SC_MODEZDYNSEL_1  :=  CP_MODEZDYNSEL_1;
    SC_INCTRLDYNSEL_1  :=  CP_INCTRLDYNSEL_1;
    SC_GRS_DIS_1  :=  CP_GRS_DIS_1;
    SC_OR2CASECADE_EN_1  :=  CP_OR2CASECADE_EN_1;
    SC_OR2CORE_EN_1  :=  CP_OR2CORE_EN_1;
    SC_IRX_SHFEN_1  :=  CP_IRX_SHFEN_1;
    SC_IRZ_SHFEN_1  :=  CP_IRZ_SHFEN_1;
    SC_MULT_EN_1  :=  CP_MULT_EN_1;
    SC_APM_EN_1  :=  CP_APM_EN_1;
// assign config body end
};

//grid device configure body end


//timing amp_tnl of APM
//{
//    wire  ntCXBO[24:0];
//    wire  ntCIN;
//    wire  ntCPI[47:0];
//    wire  ntCXI[29:0];
//
//    if (CP_APM_EN_0 == 1'b1 && CP_MULT_EN_0 == 2'b11)
//    {
//        operator V_APM_E2 APM_0
//        parameter map
//        (
//            GRS_EN        =>  (CP_GRS_DIS_0   == 1'b0 ) ?   "TRUE" : "FALSE",
//            ASYNC_RST     =>  (CP_ASYNC_0     == 1'b0 ) ?   0 : 1,
//            X_REG         =>  (CP_XREG_0      == 2'b00) ?   0 :
//                              (CP_XREG_0      == 2'b01) ?   1 :
//                              (CP_XREG_0      == 2'b10) ?   2 :
//                            /*(CP_XREG_0      == 2'b11) ?*/ 3 ,
//            XB_REG        =>  (CP_HREG_0      == 1'b0 ) ?   0 : 1,
//            Y_REG         =>  (CP_YREG_0      == 2'b00) ?   0 :
//                              (CP_YREG_0      == 2'b01) ?   1 :
//                              (CP_YREG_0      == 2'b10) ?   2 :
//                            /*(CP_YREG_0      == 2'b11) ?*/ 3 ,
//            Z_REG         =>  (CP_ZREG_0      == 1'b0 ) ?   0 : 1,
//            P_REG         =>  (CP_PREG_0      == 1'b0 ) ?   0 : 1,
//            CXO_REG       =>  (CP_XOREG_0     == 2'b00) ?   0 :
//                              (CP_XOREG_0     == 2'b01) ?   1 :
//                              (CP_XOREG_0     == 2'b10) ?   2 :
//                            /*(CP_XOREG_0     == 2'b11) ?*/ 3 ,
//            CPO_REG       =>  (CP_POREG_0     == 1'b0 ) ?   0 : 1,
//            MULT_REG      =>  (CP_MREG_0      == 1'b0 ) ?   0 : 1,
//            PREADD_REG    =>  (CP_PREREG_0    == 1'b0 ) ?   0 : 1,
//            MODEIN_REG    =>  (CP_INCTRLREG_0 == 1'b0 ) ?   0 : 1,
//            MODEY_REG     =>  (CP_MODEYREG_0  == 1'b0 ) ?   0 : 1,
//            MODEZ_REG     =>  (CP_MODEZREG_0  == 1'b0 ) ?   0 : 1,
//            X_SEL         =>  (CP_XSEL_0      == 1'b0 ) ?   0 : 1,
//            XB_SEL        =>  (CP_XBSEL_0     == 2'b00) ?   0 :
//                              (CP_XBSEL_0     == 2'b01) ?   1 :
//                              (CP_XBSEL_0     == 2'b10) ?   2 :
//                            /*(CP_XBSEL_0     == 2'b11) ?*/ 3 ,
//            CIN_SEL       =>  (CP_PCISEL_0    == 1'b0 ) ?   0 : 1,
//            ROUNDMODE_SEL =>  (CP_ROUNDMODE_0 == 1'b0 ) ?   0 : 1,
//            USE_SIMD      =>  (CP_SIMD_0      == 1'b0 ) ?   0 : 1,
//            USE_ACCLOW    =>  (CP_ACCLOW_0    == 1'b0 ) ?   0 : 1,
//            USE_PREADD    =>  (CP_PREADD_0    == 1'b0 ) ?   0 : 1,
//            USE_POSTADD   =>  (CP_POSTADD_0   == 1'b0 ) ?   0 : 1,
//            P_INIT0       =>   CP_PINIT0_0,
//            P_INIT1       =>   CP_PINIT1_0
//        )
//        port map
//        (
//            COUT      =>  ntCIN,
//            CPO       =>  ntCPI,
//            CXO       =>  ntCXI,
//            CXBO      =>    XBO,
//            CIN       =>    PCI,
//            CPI       =>    PI,
//            CXI       =>    XI,
//            CXBI      =>  ntCXBO,
//            P         =>     P_0,
//            X[29]     =>     X_0[29],
//            X[28]     => (CP_XSE_0[13] == 1'b1) ? X_0[29] : X_0[28],
//            X[27]     => (CP_XSE_0[12] == 1'b1) ? X_0[29] : X_0[27],
//            X[26]     => (CP_XSE_0[11] == 1'b1) ? X_0[29] : X_0[26],
//            X[25]     => (CP_XSE_0[10] == 1'b1) ? X_0[29] : X_0[25],
//            X[24]     => (CP_XSE_0[9]  == 1'b1) ? X_0[29] : X_0[24],
//            X[23]     => (CP_XSE_0[8]  == 1'b1) ? X_0[29] : X_0[23],
//            X[22]     => (CP_XSE_0[7]  == 1'b1) ? X_0[29] : X_0[22],
//            X[21]     => (CP_XSE_0[6]  == 1'b1) ? X_0[29] : X_0[21],
//            X[20]     => (CP_XSE_0[5]  == 1'b1) ? X_0[29] : X_0[20],
//            X[19]     => (CP_XSE_0[4]  == 1'b1) ? X_0[29] : X_0[19],
//            X[18]     => (CP_XSE_0[3]  == 1'b1) ? X_0[29] : X_0[18],
//            X[17]     => (CP_XSE_0[2]  == 1'b1) ? X_0[29] : X_0[17],
//            X[16]     => (CP_XSE_0[1]  == 1'b1) ? X_0[29] : X_0[16],
//            X[15]     => (CP_XSE_0[0]  == 1'b1) ? X_0[29] : X_0[15],
//            X[14:0]   =>     X_0[14:0],
//            XB[23]    =>     H_0[23],
//            XB[22]    => (CP_HSE_0[10] == 1'b1) ? H_0[23] : H_0[22],
//            XB[21]    => (CP_HSE_0[9]  == 1'b1) ? H_0[23] : H_0[21],
//            XB[20]    => (CP_HSE_0[8]  == 1'b1) ? H_0[23] : H_0[20],
//            XB[19]    => (CP_HSE_0[7]  == 1'b1) ? H_0[23] : H_0[19],
//            XB[18]    => (CP_HSE_0[6]  == 1'b1) ? H_0[23] : H_0[18],
//            XB[17]    => (CP_HSE_0[5]  == 1'b1) ? H_0[23] : H_0[17],
//            XB[16]    => (CP_HSE_0[4]  == 1'b1) ? H_0[23] : H_0[16],
//            XB[15]    => (CP_HSE_0[3]  == 1'b1) ? H_0[23] : H_0[15],
//            XB[14]    => (CP_HSE_0[2]  == 1'b1) ? H_0[23] : H_0[14],
//            XB[13]    => (CP_HSE_0[1]  == 1'b1) ? H_0[23] : H_0[13],
//            XB[12]    => (CP_HSE_0[0]  == 1'b1) ? H_0[23] : H_0[12],
//            XB[11:0]  =>     H_0[11:0],
//            Y[17]     =>     Y_0[17],
//            Y[16]     => (CP_YSE_0[7] == 1'b1) ? Y_0[17] : Y_0[16],
//            Y[15]     => (CP_YSE_0[6] == 1'b1) ? Y_0[17] : Y_0[15],
//            Y[14]     => (CP_YSE_0[5] == 1'b1) ? Y_0[17] : Y_0[14],
//            Y[13]     => (CP_YSE_0[4] == 1'b1) ? Y_0[17] : Y_0[13],
//            Y[12]     => (CP_YSE_0[3] == 1'b1) ? Y_0[17] : Y_0[12],
//            Y[11]     => (CP_YSE_0[2] == 1'b1) ? Y_0[17] : Y_0[11],
//            Y[10]     => (CP_YSE_0[1] == 1'b1) ? Y_0[17] : Y_0[10],
//            Y[9]      => (CP_YSE_0[0] == 1'b1) ? Y_0[17] : Y_0[9],
//            Y[8:0]    =>     Y_0[8:0],
//            Z[47]     =>     Z_0[47],
//            Z[46]     => (CP_ZSE_0[22] == 1'b1) ? Z_0[47] : Z_0[46],
//            Z[45]     => (CP_ZSE_0[21] == 1'b1) ? Z_0[47] : Z_0[45],
//            Z[44]     => (CP_ZSE_0[20] == 1'b1) ? Z_0[47] : Z_0[44],
//            Z[43]     => (CP_ZSE_0[19] == 1'b1) ? Z_0[47] : Z_0[43],
//            Z[42]     => (CP_ZSE_0[18] == 1'b1) ? Z_0[47] : Z_0[42],
//            Z[41]     => (CP_ZSE_0[17] == 1'b1) ? Z_0[47] : Z_0[41],
//            Z[40]     => (CP_ZSE_0[16] == 1'b1) ? Z_0[47] : Z_0[40],
//            Z[39]     => (CP_ZSE_0[15] == 1'b1) ? Z_0[47] : Z_0[39],
//            Z[38]     => (CP_ZSE_0[14] == 1'b1) ? Z_0[47] : Z_0[38],
//            Z[37]     => (CP_ZSE_0[13] == 1'b1) ? Z_0[47] : Z_0[37],
//            Z[36]     => (CP_ZSE_0[12] == 1'b1) ? Z_0[47] : Z_0[36],
//            Z[35]     => (CP_ZSE_0[11] == 1'b1) ? Z_0[47] : Z_0[35],
//            Z[34]     => (CP_ZSE_0[10] == 1'b1) ? Z_0[47] : Z_0[34],
//            Z[33]     => (CP_ZSE_0[9]  == 1'b1) ? Z_0[47] : Z_0[33],
//            Z[32]     => (CP_ZSE_0[8]  == 1'b1) ? Z_0[47] : Z_0[32],
//            Z[31]     => (CP_ZSE_0[7]  == 1'b1) ? Z_0[47] : Z_0[31],
//            Z[30]     => (CP_ZSE_0[6]  == 1'b1) ? Z_0[47] : Z_0[30],
//            Z[29]     => (CP_ZSE_0[5]  == 1'b1) ? Z_0[47] : Z_0[29],
//            Z[28]     => (CP_ZSE_0[4]  == 1'b1) ? Z_0[47] : Z_0[28],
//            Z[27]     => (CP_ZSE_0[3]  == 1'b1) ? Z_0[47] : Z_0[27],
//            Z[26]     => (CP_ZSE_0[2]  == 1'b1) ? Z_0[47] : Z_0[26],
//            Z[25]     => (CP_ZSE_0[1]  == 1'b1) ? Z_0[47] : Z_0[25],
//            Z[24]     => (CP_ZSE_0[0]  == 1'b1) ? Z_0[47] : Z_0[24],
//            Z[23:0]   =>     Z_0[23:0],
//            MODEIN    =>     INCTRL_0,
//            MODEY     =>     MODEY_0,
//            MODEZ     =>     MODEZ_0,
//            CLK       =>     CLK_0,
//            CEX1      =>     CE_X1_0,
//            CEX2      =>     CE_X2_0,
//            CEX3      =>     CE_X3_0,
//            CEXB      =>     CE_H_0,
//            CEY1      =>     CE_Y1_0,
//            CEY2      =>     CE_Y2_0,
//            CEZ       =>     CE_Z_0,
//            CEM       =>     CE_M_0,
//            CEP       =>     CE_P_0,
//            CEPRE     =>     CE_PRE_0,
//            CEMODEIN  =>     CE_INCTRL_0,
//            CEMODEY   =>     CE_MODEY_0,
//            CEMODEZ   =>     CE_MODEZ_0,
//            RSTX      =>     RST_X_0,
//            RSTXB     =>     RST_H_0,
//            RSTY      =>     RST_Y_0,
//            RSTZ      =>     RST_Z_0,
//            RSTM      =>     RST_M_0,
//            RSTP      =>     RST_P_0,
//            RSTPRE    =>     RST_PRE_0,
//            RSTMODEIN =>     RST_INCTRL_0,
//            RSTMODEY  =>     RST_MODEY_0,
//            RSTMODEZ  =>     RST_MODEZ_0
//        );
//    }
//    if (CP_APM_EN_1 == 1'b1 && CP_MULT_EN_1 == 2'b11)
//    {
//        operator V_APM_E2 APM_1
//        parameter map
//        (
//            GRS_EN        =>  (CP_GRS_DIS_1   == 1'b0 ) ?   "TRUE" : "FALSE",
//            ASYNC_RST     =>  (CP_ASYNC_1     == 1'b0 ) ?   0 : 1,
//            X_REG         =>  (CP_XREG_1      == 2'b00) ?   0 :
//                              (CP_XREG_1      == 2'b01) ?   1 :
//                              (CP_XREG_1      == 2'b10) ?   2 :
//                            /*(CP_XREG_1      == 2'b11) ?*/ 3 ,
//            XB_REG        =>  (CP_HREG_1      == 1'b0 ) ?   0 : 1,
//            Y_REG         =>  (CP_YREG_1      == 2'b00) ?   0 :
//                              (CP_YREG_1      == 2'b01) ?   1 :
//                              (CP_YREG_1      == 2'b10) ?   2 :
//                            /*(CP_YREG_1      == 2'b11) ?*/ 3 ,
//            Z_REG         =>  (CP_ZREG_1      == 1'b0 ) ?   0 : 1,
//            P_REG         =>  (CP_PREG_1      == 1'b0 ) ?   0 : 1,
//            CXO_REG       =>  (CP_XOREG_1     == 2'b00) ?   0 :
//                              (CP_XOREG_1     == 2'b01) ?   1 :
//                              (CP_XOREG_1     == 2'b10) ?   2 :
//                            /*(CP_XOREG_1     == 2'b11) ?*/ 3 ,
//            CPO_REG       =>  (CP_POREG_1     == 1'b0 ) ?   0 : 1,
//            MULT_REG      =>  (CP_MREG_1      == 1'b0 ) ?   0 : 1,
//            PREADD_REG    =>  (CP_PREREG_1    == 1'b0 ) ?   0 : 1,
//            MODEIN_REG    =>  (CP_INCTRLREG_1 == 1'b0 ) ?   0 : 1,
//            MODEY_REG     =>  (CP_MODEYREG_1  == 1'b0 ) ?   0 : 1,
//            MODEZ_REG     =>  (CP_MODEZREG_1  == 1'b0 ) ?   0 : 1,
//            X_SEL         =>  (CP_XSEL_1      == 1'b0 ) ?   0 : 1,
//            XB_SEL        =>  (CP_XBSEL_1     == 2'b00) ?   0 :
//                              (CP_XBSEL_1     == 2'b01) ?   1 :
//                              (CP_XBSEL_1     == 2'b10) ?   2 :
//                            /*(CP_XBSEL_1     == 2'b11) ?*/ 3 ,
//            CIN_SEL       =>  (CP_PCISEL_1    == 1'b0 ) ?   0 : 1,
//            ROUNDMODE_SEL =>  (CP_ROUNDMODE_1 == 1'b0 ) ?   0 : 1,
//            USE_SIMD      =>  (CP_SIMD_1      == 1'b0 ) ?   0 : 1,
//            USE_ACCLOW    =>  (CP_ACCLOW_1    == 1'b0 ) ?   0 : 1,
//            USE_PREADD    =>  (CP_PREADD_1    == 1'b0 ) ?   0 : 1,
//            USE_POSTADD   =>  (CP_POSTADD_1   == 1'b0 ) ?   0 : 1,
//            P_INIT0       =>   CP_PINIT0_1,
//            P_INIT1       =>   CP_PINIT1_1
//        )
//        port map
//        (
//            COUT      =>     PCO,
//            CPO       =>     PO,
//            CXO       =>     XO,
//            CXBO      =>   ntCXBO,
//            CIN       =>   ntCIN,
//            CPI       =>   ntCPI,
//            CXI       =>   ntCXI,
//            CXBI      =>     XBI,
//            P         =>     P_1,
//            X[29]     =>     X_1[29],
//            X[28]     => (CP_XSE_1[13] == 1'b1) ? X_1[29] : X_1[28],
//            X[27]     => (CP_XSE_1[12] == 1'b1) ? X_1[29] : X_1[27],
//            X[26]     => (CP_XSE_1[11] == 1'b1) ? X_1[29] : X_1[26],
//            X[25]     => (CP_XSE_1[10] == 1'b1) ? X_1[29] : X_1[25],
//            X[24]     => (CP_XSE_1[9]  == 1'b1) ? X_1[29] : X_1[24],
//            X[23]     => (CP_XSE_1[8]  == 1'b1) ? X_1[29] : X_1[23],
//            X[22]     => (CP_XSE_1[7]  == 1'b1) ? X_1[29] : X_1[22],
//            X[21]     => (CP_XSE_1[6]  == 1'b1) ? X_1[29] : X_1[21],
//            X[20]     => (CP_XSE_1[5]  == 1'b1) ? X_1[29] : X_1[20],
//            X[19]     => (CP_XSE_1[4]  == 1'b1) ? X_1[29] : X_1[19],
//            X[18]     => (CP_XSE_1[3]  == 1'b1) ? X_1[29] : X_1[18],
//            X[17]     => (CP_XSE_1[2]  == 1'b1) ? X_1[29] : X_1[17],
//            X[16]     => (CP_XSE_1[1]  == 1'b1) ? X_1[29] : X_1[16],
//            X[15]     => (CP_XSE_1[0]  == 1'b1) ? X_1[29] : X_1[15],
//            X[14:0]   =>     X_1[14:0],
//            XB[23]    =>     H_1[23],
//            XB[22]    => (CP_HSE_1[10] == 1'b1) ? H_1[23] : H_1[22],
//            XB[21]    => (CP_HSE_1[9]  == 1'b1) ? H_1[23] : H_1[21],
//            XB[20]    => (CP_HSE_1[8]  == 1'b1) ? H_1[23] : H_1[20],
//            XB[19]    => (CP_HSE_1[7]  == 1'b1) ? H_1[23] : H_1[19],
//            XB[18]    => (CP_HSE_1[6]  == 1'b1) ? H_1[23] : H_1[18],
//            XB[17]    => (CP_HSE_1[5]  == 1'b1) ? H_1[23] : H_1[17],
//            XB[16]    => (CP_HSE_1[4]  == 1'b1) ? H_1[23] : H_1[16],
//            XB[15]    => (CP_HSE_1[3]  == 1'b1) ? H_1[23] : H_1[15],
//            XB[14]    => (CP_HSE_1[2]  == 1'b1) ? H_1[23] : H_1[14],
//            XB[13]    => (CP_HSE_1[1]  == 1'b1) ? H_1[23] : H_1[13],
//            XB[12]    => (CP_HSE_1[0]  == 1'b1) ? H_1[23] : H_1[12],
//            XB[11:0]  =>     H_1[11:0],
//            Y[17]     =>     Y_1[17],
//            Y[16]     => (CP_YSE_1[7] == 1'b1) ? Y_1[17] : Y_1[16],
//            Y[15]     => (CP_YSE_1[6] == 1'b1) ? Y_1[17] : Y_1[15],
//            Y[14]     => (CP_YSE_1[5] == 1'b1) ? Y_1[17] : Y_1[14],
//            Y[13]     => (CP_YSE_1[4] == 1'b1) ? Y_1[17] : Y_1[13],
//            Y[12]     => (CP_YSE_1[3] == 1'b1) ? Y_1[17] : Y_1[12],
//            Y[11]     => (CP_YSE_1[2] == 1'b1) ? Y_1[17] : Y_1[11],
//            Y[10]     => (CP_YSE_1[1] == 1'b1) ? Y_1[17] : Y_1[10],
//            Y[9]      => (CP_YSE_1[0] == 1'b1) ? Y_1[17] : Y_1[9],
//            Y[8:0]    =>     Y_1[8:0],
//            Z[47]     =>     Z_1[47],
//            Z[46]     => (CP_ZSE_1[22] == 1'b1) ? Z_1[47] : Z_1[46],
//            Z[45]     => (CP_ZSE_1[21] == 1'b1) ? Z_1[47] : Z_1[45],
//            Z[44]     => (CP_ZSE_1[20] == 1'b1) ? Z_1[47] : Z_1[44],
//            Z[43]     => (CP_ZSE_1[19] == 1'b1) ? Z_1[47] : Z_1[43],
//            Z[42]     => (CP_ZSE_1[18] == 1'b1) ? Z_1[47] : Z_1[42],
//            Z[41]     => (CP_ZSE_1[17] == 1'b1) ? Z_1[47] : Z_1[41],
//            Z[40]     => (CP_ZSE_1[16] == 1'b1) ? Z_1[47] : Z_1[40],
//            Z[39]     => (CP_ZSE_1[15] == 1'b1) ? Z_1[47] : Z_1[39],
//            Z[38]     => (CP_ZSE_1[14] == 1'b1) ? Z_1[47] : Z_1[38],
//            Z[37]     => (CP_ZSE_1[13] == 1'b1) ? Z_1[47] : Z_1[37],
//            Z[36]     => (CP_ZSE_1[12] == 1'b1) ? Z_1[47] : Z_1[36],
//            Z[35]     => (CP_ZSE_1[11] == 1'b1) ? Z_1[47] : Z_1[35],
//            Z[34]     => (CP_ZSE_1[10] == 1'b1) ? Z_1[47] : Z_1[34],
//            Z[33]     => (CP_ZSE_1[9]  == 1'b1) ? Z_1[47] : Z_1[33],
//            Z[32]     => (CP_ZSE_1[8]  == 1'b1) ? Z_1[47] : Z_1[32],
//            Z[31]     => (CP_ZSE_1[7]  == 1'b1) ? Z_1[47] : Z_1[31],
//            Z[30]     => (CP_ZSE_1[6]  == 1'b1) ? Z_1[47] : Z_1[30],
//            Z[29]     => (CP_ZSE_1[5]  == 1'b1) ? Z_1[47] : Z_1[29],
//            Z[28]     => (CP_ZSE_1[4]  == 1'b1) ? Z_1[47] : Z_1[28],
//            Z[27]     => (CP_ZSE_1[3]  == 1'b1) ? Z_1[47] : Z_1[27],
//            Z[26]     => (CP_ZSE_1[2]  == 1'b1) ? Z_1[47] : Z_1[26],
//            Z[25]     => (CP_ZSE_1[1]  == 1'b1) ? Z_1[47] : Z_1[25],
//            Z[24]     => (CP_ZSE_1[0]  == 1'b1) ? Z_1[47] : Z_1[24],
//            Z[23:0]   =>     Z_1[23:0],
//            MODEIN    =>    INCTRL_1,
//            MODEY     =>    MODEY_1,
//            MODEZ     =>    MODEZ_1,
//            CLK       =>    CLK_1,
//            CEX1      =>    CE_X1_1,
//            CEX2      =>    CE_X2_1,
//            CEX3      =>    CE_X3_1,
//            CEXB      =>    CE_H_1,
//            CEY1      =>    CE_Y1_1,
//            CEY2      =>    CE_Y2_1,
//            CEZ       =>    CE_Z_1,
//            CEM       =>    CE_M_1,
//            CEP       =>    CE_P_1,
//            CEPRE     =>    CE_PRE_1,
//            CEMODEIN  =>    CE_INCTRL_1,
//            CEMODEY   =>    CE_MODEY_1,
//            CEMODEZ   =>    CE_MODEZ_1,
//            RSTX      =>    RST_X_1,
//            RSTXB     =>    RST_H_1,
//            RSTY      =>    RST_Y_1,
//            RSTZ      =>    RST_Z_1,
//            RSTM      =>    RST_M_1,
//            RSTP      =>    RST_P_1,
//            RSTPRE    =>    RST_PRE_1,
//            RSTMODEIN =>    RST_INCTRL_1,
//            RSTMODEY  =>    RST_MODEY_1,
//            RSTMODEZ  =>    RST_MODEZ_1
//        );
//    }
//};
