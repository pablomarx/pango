tarted
grid
device PPLL
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config bit CP_CLKIN_STASEL = 1'b0,
        config string CP_DYNSEL_ENABLE = "FALSE",
        config int CP_FEEDBK_SEL = 0,
        config int CP_CLKINORFB_DLYSEL = 0,
        config int CP_CLKINORFB_DLYSET = 0,
        config int CP_IDIV_RATIO = 1,
        config int CP_MDIV_RATIO = 1,
        config int CP_ODIV0_RATIO = 1,
        config int CP_ODIV1_RATIO = 1,
        config int CP_ODIV2_RATIO = 1,
        config int CP_ODIV3_RATIO = 1,
        config int CP_ODIV4_RATIO = 1,
        config int CP_ODIVPHY_RATIO = 1,
        config int CP_FDIV_RATIO = 1,
        config int CP_ODIV0_DUTY = 2,
        config int CP_ODIV1_DUTY = 2,
        config int CP_ODIV2_DUTY = 2,
        config int CP_ODIV3_DUTY = 2,
        config int CP_ODIV4_DUTY = 2,
        config int CP_ODIVPHY_DUTY = 2,
        config int CP_FDIV_DUTY = 2,
        config int CP_ODIV0_FPHASE = 0,
        config int CP_ODIV1_FPHASE = 0,
        config int CP_ODIV2_FPHASE = 0,
        config int CP_ODIV3_FPHASE = 0,
        config int CP_ODIV4_FPHASE = 0,
        config int CP_ODIVPHY_FPHASE = 0,
        config int CP_FDIV_FPHASE = 0,
        config int CP_ODIV0_CPHASE = 0,
        config int CP_ODIV1_CPHASE = 0,
        config int CP_ODIV2_CPHASE = 0,
        config int CP_ODIV3_CPHASE = 0,
        config int CP_ODIV4_CPHASE = 0,
        config int CP_ODIVPHY_CPHASE = 0,
        config int CP_FDIV_CPHASE = 0,
        config string CP_ODIV0_MUXSEL_EN = "TRUE",
        config string CP_ODIV1_MUXSEL_EN = "TRUE",
        config string CP_ODIV2_MUXSEL_EN = "TRUE",
        config string CP_ODIV3_MUXSEL_EN = "TRUE",
        config string CP_ODIV4_MUXSEL_EN = "TRUE",
        config string CP_ODIVPHY_MUXSEL_EN = "TRUE",
        config string CP_FDIV_MUXSEL_EN = "TRUE",
        config string CP_CLKOUT0_GATE_EN = "FALSE",
        config string CP_CLKOUT1_GATE_EN = "FALSE",
        config string CP_CLKOUT2_GATE_EN = "FALSE",
        config string CP_CLKOUT3_GATE_EN = "FALSE",
        config string CP_CLKOUT4_GATE_EN = "FALSE",
        config string CP_CLKOUTPHY_GATE_EN = "FALSE",
        config string CP_CLKFBOUT_GATE_EN = "FALSE",
        config string CP_PLL_USE_APB = "FALSE",
        config string CP_PFDEN_ENABLE = "FALSE",
        config int CP_PFD_DEADZONE = 0,
        config string CP_FREQDETECT_EN = "TRUE",
        config bit CP_FREQDETECT_BYPASSR_EXT = 1'b0,
        config string CP_FREQDETECT_BYPASSREXT_EN = "FALSE",
        config bit CP_FREQ_LOCKDET_RSTNCTRL = 1'b1,
        config int CP_FREQ_LOCKDET_SET = 0,
        config bit CP_FREQ_LOCKDET_MODE_SEL = 1'b0,
        config string CP_LOCK_FILTER_PD = "TRUE",
        config int CP_PFDTOP_LSTEST_SEL = 0,
        config bit CP_PFDTOP_CLKTEST_SEL = 1'b0,
        config string CP_PFDTOP_CLKTEST_EN = "FALSE",
        config string CP_GLOGEN_ENABLE = "TRUE",
        config string CP_PLL_PWD_ENABLE = "FALSE",
        config string CP_PLL_RST_ENABLE = "FALSE",
        config string CP_LDO_R_BYPASS_ENABLE = "FALSE",
        config int CP_DLDO_VREF_ADJ = 0,
        config int CP_DLDO_VREF_SEL = 10,
        config bit CP_DLDO_LOAD_CTRL = 1'b0,
        config int CP_DLDO_TEST = 0,
        config string CP_DLDO_TEST_EN = "FALSE",
        config int CP_ALDO_VREF_ADJ = 0,
        config int CP_ALDO_VREF_SEL = 10,
        config bit CP_ALDO_LOAD_CTRL = 1'b0,
        config int CP_ALDO_LPF_ADJ = 0,
        config int CP_ALDO_TEST = 0,
        config string CP_ALDO_TEST_EN = "FALSE",
        config int CP_CP_SELFBIAS_SEL = 0,
        config int CP_ICP_BASE_SEL = 0,
        config int CP_CP_CUR_SEL = 0,
        config int CP_LPF_R = 0,
        config bit CP_LPF_C = 1'b0,
        config int CP_VCTRL_INIT = 0,
        config string CP_PPLL_VCTRL_TEST_EN = "FALSE",
        config int CP_PPLL_DCTEST_SEL = 0
    );
    port
    (
// configuration_body_def_on


    config input SC_CLKIN_STASEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKIN_STASEL" */,

    config input SC_DYNSEL_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DYNSEL_ENABLE" */,

    config input SC_FEEDBK_SEL[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FEEDBK_SEL[3],SC_FEEDBK_SEL[2],SC_FEEDBK_SEL[1],SC_FEEDBK_SEL[0]" */,

    config input SC_CLKINORFB_DLYSEL[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKINORFB_DLYSEL[1],SC_CLKINORFB_DLYSEL[0]" */,

    config input SC_CLKINORFB_DLYSET[5:0] = 6'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKINORFB_DLYSET[5],SC_CLKINORFB_DLYSET[4],SC_CLKINORFB_DLYSET[3],SC_CLKINORFB_DLYSET[2],SC_CLKINORFB_DLYSET[1],SC_CLKINORFB_DLYSET[0]" */,

    config input SC_IDIV_RATIO[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_IDIV_RATIO[7],SC_IDIV_RATIO[6],SC_IDIV_RATIO[5],SC_IDIV_RATIO[4],SC_IDIV_RATIO[3],SC_IDIV_RATIO[2],SC_IDIV_RATIO[1],SC_IDIV_RATIO[0]" */,

    config input SC_MDIV_RATIO[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MDIV_RATIO[7],SC_MDIV_RATIO[6],SC_MDIV_RATIO[5],SC_MDIV_RATIO[4],SC_MDIV_RATIO[3],SC_MDIV_RATIO[2],SC_MDIV_RATIO[1],SC_MDIV_RATIO[0]" */,

    config input SC_ODIV0_RATIO[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV0_RATIO[7],SC_ODIV0_RATIO[6],SC_ODIV0_RATIO[5],SC_ODIV0_RATIO[4],SC_ODIV0_RATIO[3],SC_ODIV0_RATIO[2],SC_ODIV0_RATIO[1],SC_ODIV0_RATIO[0]" */,

    config input SC_ODIV1_RATIO[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV1_RATIO[7],SC_ODIV1_RATIO[6],SC_ODIV1_RATIO[5],SC_ODIV1_RATIO[4],SC_ODIV1_RATIO[3],SC_ODIV1_RATIO[2],SC_ODIV1_RATIO[1],SC_ODIV1_RATIO[0]" */,

    config input SC_ODIV2_RATIO[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV2_RATIO[7],SC_ODIV2_RATIO[6],SC_ODIV2_RATIO[5],SC_ODIV2_RATIO[4],SC_ODIV2_RATIO[3],SC_ODIV2_RATIO[2],SC_ODIV2_RATIO[1],SC_ODIV2_RATIO[0]" */,

    config input SC_ODIV3_RATIO[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV3_RATIO[7],SC_ODIV3_RATIO[6],SC_ODIV3_RATIO[5],SC_ODIV3_RATIO[4],SC_ODIV3_RATIO[3],SC_ODIV3_RATIO[2],SC_ODIV3_RATIO[1],SC_ODIV3_RATIO[0]" */,

    config input SC_ODIV4_RATIO[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV4_RATIO[7],SC_ODIV4_RATIO[6],SC_ODIV4_RATIO[5],SC_ODIV4_RATIO[4],SC_ODIV4_RATIO[3],SC_ODIV4_RATIO[2],SC_ODIV4_RATIO[1],SC_ODIV4_RATIO[0]" */,

    config input SC_ODIVPHY_RATIO[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIVPHY_RATIO[7],SC_ODIVPHY_RATIO[6],SC_ODIVPHY_RATIO[5],SC_ODIVPHY_RATIO[4],SC_ODIVPHY_RATIO[3],SC_ODIVPHY_RATIO[2],SC_ODIVPHY_RATIO[1],SC_ODIVPHY_RATIO[0]" */,

    config input SC_FDIV_RATIO[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FDIV_RATIO[7],SC_FDIV_RATIO[6],SC_FDIV_RATIO[5],SC_FDIV_RATIO[4],SC_FDIV_RATIO[3],SC_FDIV_RATIO[2],SC_FDIV_RATIO[1],SC_FDIV_RATIO[0]" */,

    config input SC_ODIV0_DUTY[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV0_DUTY[7],SC_ODIV0_DUTY[6],SC_ODIV0_DUTY[5],SC_ODIV0_DUTY[4],SC_ODIV0_DUTY[3],SC_ODIV0_DUTY[2],SC_ODIV0_DUTY[1],SC_ODIV0_DUTY[0]" */,

    config input SC_ODIV1_DUTY[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV1_DUTY[7],SC_ODIV1_DUTY[6],SC_ODIV1_DUTY[5],SC_ODIV1_DUTY[4],SC_ODIV1_DUTY[3],SC_ODIV1_DUTY[2],SC_ODIV1_DUTY[1],SC_ODIV1_DUTY[0]" */,

    config input SC_ODIV2_DUTY[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV2_DUTY[7],SC_ODIV2_DUTY[6],SC_ODIV2_DUTY[5],SC_ODIV2_DUTY[4],SC_ODIV2_DUTY[3],SC_ODIV2_DUTY[2],SC_ODIV2_DUTY[1],SC_ODIV2_DUTY[0]" */,

    config input SC_ODIV3_DUTY[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV3_DUTY[7],SC_ODIV3_DUTY[6],SC_ODIV3_DUTY[5],SC_ODIV3_DUTY[4],SC_ODIV3_DUTY[3],SC_ODIV3_DUTY[2],SC_ODIV3_DUTY[1],SC_ODIV3_DUTY[0]" */,

    config input SC_ODIV4_DUTY[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV4_DUTY[7],SC_ODIV4_DUTY[6],SC_ODIV4_DUTY[5],SC_ODIV4_DUTY[4],SC_ODIV4_DUTY[3],SC_ODIV4_DUTY[2],SC_ODIV4_DUTY[1],SC_ODIV4_DUTY[0]" */,

    config input SC_ODIVPHY_DUTY[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIVPHY_DUTY[7],SC_ODIVPHY_DUTY[6],SC_ODIVPHY_DUTY[5],SC_ODIVPHY_DUTY[4],SC_ODIVPHY_DUTY[3],SC_ODIVPHY_DUTY[2],SC_ODIVPHY_DUTY[1],SC_ODIVPHY_DUTY[0]" */,

    config input SC_FDIV_DUTY[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FDIV_DUTY[7],SC_FDIV_DUTY[6],SC_FDIV_DUTY[5],SC_FDIV_DUTY[4],SC_FDIV_DUTY[3],SC_FDIV_DUTY[2],SC_FDIV_DUTY[1],SC_FDIV_DUTY[0]" */,

    config input SC_ODIV0_FPHASE[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV0_FPHASE[2],SC_ODIV0_FPHASE[1],SC_ODIV0_FPHASE[0]" */,

    config input SC_ODIV1_FPHASE[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV1_FPHASE[2],SC_ODIV1_FPHASE[1],SC_ODIV1_FPHASE[0]" */,

    config input SC_ODIV2_FPHASE[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV2_FPHASE[2],SC_ODIV2_FPHASE[1],SC_ODIV2_FPHASE[0]" */,

    config input SC_ODIV3_FPHASE[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV3_FPHASE[2],SC_ODIV3_FPHASE[1],SC_ODIV3_FPHASE[0]" */,

    config input SC_ODIV4_FPHASE[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV4_FPHASE[2],SC_ODIV4_FPHASE[1],SC_ODIV4_FPHASE[0]" */,

    config input SC_ODIVPHY_FPHASE[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIVPHY_FPHASE[2],SC_ODIVPHY_FPHASE[1],SC_ODIVPHY_FPHASE[0]" */,

    config input SC_FDIV_FPHASE[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FDIV_FPHASE[2],SC_FDIV_FPHASE[1],SC_FDIV_FPHASE[0]" */,

    config input SC_ODIV0_CPHASE[6:0] = 7'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV0_CPHASE[6],SC_ODIV0_CPHASE[5],SC_ODIV0_CPHASE[4],SC_ODIV0_CPHASE[3],SC_ODIV0_CPHASE[2],SC_ODIV0_CPHASE[1],SC_ODIV0_CPHASE[0]" */,

    config input SC_ODIV1_CPHASE[6:0] = 7'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV1_CPHASE[6],SC_ODIV1_CPHASE[5],SC_ODIV1_CPHASE[4],SC_ODIV1_CPHASE[3],SC_ODIV1_CPHASE[2],SC_ODIV1_CPHASE[1],SC_ODIV1_CPHASE[0]" */,

    config input SC_ODIV2_CPHASE[6:0] = 7'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV2_CPHASE[6],SC_ODIV2_CPHASE[5],SC_ODIV2_CPHASE[4],SC_ODIV2_CPHASE[3],SC_ODIV2_CPHASE[2],SC_ODIV2_CPHASE[1],SC_ODIV2_CPHASE[0]" */,

    config input SC_ODIV3_CPHASE[6:0] = 7'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV3_CPHASE[6],SC_ODIV3_CPHASE[5],SC_ODIV3_CPHASE[4],SC_ODIV3_CPHASE[3],SC_ODIV3_CPHASE[2],SC_ODIV3_CPHASE[1],SC_ODIV3_CPHASE[0]" */,

    config input SC_ODIV4_CPHASE[6:0] = 7'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV4_CPHASE[6],SC_ODIV4_CPHASE[5],SC_ODIV4_CPHASE[4],SC_ODIV4_CPHASE[3],SC_ODIV4_CPHASE[2],SC_ODIV4_CPHASE[1],SC_ODIV4_CPHASE[0]" */,

    config input SC_ODIVPHY_CPHASE[6:0] = 7'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIVPHY_CPHASE[6],SC_ODIVPHY_CPHASE[5],SC_ODIVPHY_CPHASE[4],SC_ODIVPHY_CPHASE[3],SC_ODIVPHY_CPHASE[2],SC_ODIVPHY_CPHASE[1],SC_ODIVPHY_CPHASE[0]" */,

    config input SC_FDIV_CPHASE[6:0] = 7'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FDIV_CPHASE[6],SC_FDIV_CPHASE[5],SC_FDIV_CPHASE[4],SC_FDIV_CPHASE[3],SC_FDIV_CPHASE[2],SC_FDIV_CPHASE[1],SC_FDIV_CPHASE[0]" */,

    config input SC_ODIV0_MUXSEL_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV0_MUXSEL_EN" */,

    config input SC_ODIV1_MUXSEL_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV1_MUXSEL_EN" */,

    config input SC_ODIV2_MUXSEL_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV2_MUXSEL_EN" */,

    config input SC_ODIV3_MUXSEL_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV3_MUXSEL_EN" */,

    config input SC_ODIV4_MUXSEL_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV4_MUXSEL_EN" */,

    config input SC_ODIVPHY_MUXSEL_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIVPHY_MUXSEL_EN" */,

    config input SC_FDIV_MUXSEL_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FDIV_MUXSEL_EN" */,

    config input SC_CLKOUT0_GATE_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOUT0_GATE_EN" */,

    config input SC_CLKOUT1_GATE_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOUT1_GATE_EN" */,

    config input SC_CLKOUT2_GATE_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOUT2_GATE_EN" */,

    config input SC_CLKOUT3_GATE_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOUT3_GATE_EN" */,

    config input SC_CLKOUT4_GATE_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOUT4_GATE_EN" */,

    config input SC_CLKOUTPHY_GATE_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOUTPHY_GATE_EN" */,

    config input SC_CLKFBOUT_GATE_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKFBOUT_GATE_EN" */,

    config input SC_PLL_USE_APB = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PLL_USE_APB" */,

    config input SC_PFDEN_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PFDEN_ENABLE" */,

    config input SC_PFD_DEADZONE[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PFD_DEADZONE[1],SC_PFD_DEADZONE[0]" */,

    config input SC_FREQDETECT_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FREQDETECT_EN" */,

    config input SC_FREQDETECT_BYPASSR_EXT = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FREQDETECT_BYPASSR_EXT" */,

    config input SC_FREQDETECT_BYPASSREXT_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FREQDETECT_BYPASSREXT_EN" */,

    config input SC_FREQ_LOCKDET_RSTNCTRL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FREQ_LOCKDET_RSTNCTRL" */,

    config input SC_FREQ_LOCKDET_SET[4:0] = 5'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FREQ_LOCKDET_SET[4],SC_FREQ_LOCKDET_SET[3],SC_FREQ_LOCKDET_SET[2],SC_FREQ_LOCKDET_SET[1],SC_FREQ_LOCKDET_SET[0]" */,

    config input SC_LOCK_FILTER_PD = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LOCK_FILTER_PD" */,

    config input SC_FREQ_LOCKDET_MODE_SEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FREQ_LOCKDET_MODE_SEL" */,

    config input SC_PFDTOP_LSTEST_SEL[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PFDTOP_LSTEST_SEL[2],SC_PFDTOP_LSTEST_SEL[1],SC_PFDTOP_LSTEST_SEL[0]" */,

    config input SC_PFDTOP_CLKTEST_SEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PFDTOP_CLKTEST_SEL" */,

    config input SC_PFDTOP_CLKTEST_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PFDTOP_CLKTEST_EN" */,

    config input SC_GLOGEN_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GLOGEN_ENABLE" */,

    config input SC_PLL_PWD_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PLL_PWD_ENABLE" */,

    config input SC_PLL_RST_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PLL_RST_ENABLE" */,

    config input SC_LDO_R_BYPASS_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LDO_R_BYPASS_ENABLE" */,

    config input SC_DLDO_VREF_ADJ[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DLDO_VREF_ADJ[2],SC_DLDO_VREF_ADJ[1],SC_DLDO_VREF_ADJ[0]" */,

    config input SC_DLDO_VREF_SEL[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DLDO_VREF_SEL[3],SC_DLDO_VREF_SEL[2],SC_DLDO_VREF_SEL[1],SC_DLDO_VREF_SEL[0]" */,

    config input SC_DLDO_LOAD_CTRL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DLDO_LOAD_CTRL" */,

    config input SC_DLDO_TEST[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DLDO_TEST[1],SC_DLDO_TEST[0]" */,

    config input SC_DLDO_TEST_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DLDO_TEST_EN" */,

    config input SC_ALDO_VREF_ADJ[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ALDO_VREF_ADJ[2],SC_ALDO_VREF_ADJ[1],SC_ALDO_VREF_ADJ[0]" */,

    config input SC_ALDO_VREF_SEL[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ALDO_VREF_SEL[3],SC_ALDO_VREF_SEL[2],SC_ALDO_VREF_SEL[1],SC_ALDO_VREF_SEL[0]" */,

    config input SC_ALDO_LOAD_CTRL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ALDO_LOAD_CTRL" */,

    config input SC_ALDO_LPF_ADJ[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ALDO_LPF_ADJ[1],SC_ALDO_LPF_ADJ[0]" */,

    config input SC_ALDO_TEST[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ALDO_TEST[1],SC_ALDO_TEST[0]" */,

    config input SC_ALDO_TEST_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ALDO_TEST_EN" */,

    config input SC_CP_SELFBIAS_SEL[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CP_SELFBIAS_SEL[1],SC_CP_SELFBIAS_SEL[0]" */,

    config input SC_ICP_BASE_SEL[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ICP_BASE_SEL[1],SC_ICP_BASE_SEL[0]" */,

    config input SC_CP_CUR_SEL[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CP_CUR_SEL[3],SC_CP_CUR_SEL[2],SC_CP_CUR_SEL[1],SC_CP_CUR_SEL[0]" */,

    config input SC_LPF_R[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LPF_R[2],SC_LPF_R[1],SC_LPF_R[0]" */,

    config input SC_LPF_C = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LPF_C" */,

    config input SC_VCTRL_INIT[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_VCTRL_INIT[1],SC_VCTRL_INIT[0]" */,

    config input SC_PPLL_VCTRL_TEST_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PPLL_VCTRL_TEST_EN" */,

    config input SC_PPLL_DCTEST_SEL[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PPLL_DCTEST_SEL[1],SC_PPLL_DCTEST_SEL[0]" */,

// configuration_body_def_end

        input PADDR[4:0] = 5'b1111_1,
        input PWDATA[15:0] = 16'b1111_1111_1111_1111,
        input CLK_IN0 = 1'b1,
        input CLK_IN1 = 1'b1,
        input DYNSEL_CLKIN = 1'b1,
        input CLK_FB = 1'b1,
        input PLL_PWD = 1'b1,
        input PLL_RST = 1'b1,
        input PFDEN = 1'b1,
        input LOCKIN_CAS = 1'b1,
        input CLKOUT0_GATE = 1'b1,
        input CLKOUT1_GATE = 1'b1,
        input CLKOUT2_GATE = 1'b1,
        input CLKOUT3_GATE = 1'b1,
        input CLKOUT4_GATE = 1'b1,
        input CLKOUTPHY_GATE = 1'b1,
        input CLKFBOUT_GATE = 1'b1,
        input PCLK = 1'b1,
        input PRESETN = 1'b1,
        input PSEL = 1'b1,
        input PENABLE = 1'b1,
        input PWRITE = 1'b1,
        input TEST_MODE_N = 1'b1,
        input TEST_CLK = 1'b1,
        input TEST_SE_N = 1'b1,
        input TEST_RSTN = 1'b1,
        input TEST_SI = 1'b1,
        output PRDATA[15:0],
        output CLKOUT0,
        output CLKOUT0N,
        output CLKOUT1,
        output CLKOUT1N,
        output CLKOUT2,
        output CLKOUT2N,
        output CLKOUT3,
        output CLKOUT3N,
        output CLKOUT4,
        output CLKOUT4N,
        output CLKOUTPHY,
        output CLKOUTPHYN,
        output CLKFBOUT,
        output CLKFBOUTN,
        output PLL_LOCK,
        output LOCKOUT_CAS,
        output PLL_LS_TEST,
        output PFDTOP_CLK_TEST,
        output PREADY,
        output TEST_SO
    );
};
//grid device end

//grid device structure netlist started
structure netlist of PPLL
{
};
//grid device structure netlist end

//grid device configure body started

configuration cfg of PPLL
{

 // assign config body begin
    SC_CLKIN_STASEL  :=  CP_CLKIN_STASEL;
    SC_FEEDBK_SEL          :=  CP_FEEDBK_SEL;
    SC_CLKINORFB_DLYSEL    :=  CP_CLKINORFB_DLYSEL;
    SC_CLKINORFB_DLYSET    :=  CP_CLKINORFB_DLYSET;
    SC_IDIV_RATIO          :=  CP_IDIV_RATIO;
    SC_MDIV_RATIO          :=  CP_MDIV_RATIO;
    SC_ODIV0_RATIO         :=  CP_ODIV0_RATIO;
    SC_ODIV1_RATIO         :=  CP_ODIV1_RATIO;
    SC_ODIV2_RATIO         :=  CP_ODIV2_RATIO;
    SC_ODIV3_RATIO         :=  CP_ODIV3_RATIO;
    SC_ODIV4_RATIO         :=  CP_ODIV4_RATIO;
    SC_ODIVPHY_RATIO       :=  CP_ODIVPHY_RATIO;
    SC_FDIV_RATIO          :=  CP_FDIV_RATIO;
    SC_ODIV0_DUTY          :=  CP_ODIV0_DUTY;
    SC_ODIV1_DUTY          :=  CP_ODIV1_DUTY;
    SC_ODIV2_DUTY          :=  CP_ODIV2_DUTY;
    SC_ODIV3_DUTY          :=  CP_ODIV3_DUTY;
    SC_ODIV4_DUTY          :=  CP_ODIV4_DUTY;
    SC_ODIVPHY_DUTY        :=  CP_ODIVPHY_DUTY;
    SC_FDIV_DUTY           :=  CP_FDIV_DUTY;
    SC_ODIV0_FPHASE        :=  CP_ODIV0_FPHASE;
    SC_ODIV1_FPHASE        :=  CP_ODIV1_FPHASE;
    SC_ODIV2_FPHASE        :=  CP_ODIV2_FPHASE;
    SC_ODIV3_FPHASE        :=  CP_ODIV3_FPHASE;
    SC_ODIV4_FPHASE        :=  CP_ODIV4_FPHASE;
    SC_ODIVPHY_FPHASE      :=  CP_ODIVPHY_FPHASE;
    SC_FDIV_FPHASE         :=  CP_FDIV_FPHASE;
    SC_ODIV0_CPHASE        :=  CP_ODIV0_CPHASE;
    SC_ODIV1_CPHASE        :=  CP_ODIV1_CPHASE;
    SC_ODIV2_CPHASE        :=  CP_ODIV2_CPHASE;
    SC_ODIV3_CPHASE        :=  CP_ODIV3_CPHASE;
    SC_ODIV4_CPHASE        :=  CP_ODIV4_CPHASE;
    SC_ODIVPHY_CPHASE      :=  CP_ODIVPHY_CPHASE;
    SC_FDIV_CPHASE         :=  CP_FDIV_CPHASE;
    SC_PFD_DEADZONE  :=  CP_PFD_DEADZONE;
    SC_FREQDETECT_BYPASSR_EXT  :=  CP_FREQDETECT_BYPASSR_EXT;
    SC_FREQ_LOCKDET_RSTNCTRL  :=  CP_FREQ_LOCKDET_RSTNCTRL;
    SC_FREQ_LOCKDET_SET       :=  CP_FREQ_LOCKDET_SET;
    SC_FREQ_LOCKDET_MODE_SEL  :=  CP_FREQ_LOCKDET_MODE_SEL;
    SC_PFDTOP_LSTEST_SEL      :=  CP_PFDTOP_LSTEST_SEL;
    SC_PFDTOP_CLKTEST_SEL     :=  CP_PFDTOP_CLKTEST_SEL;
    SC_DLDO_VREF_ADJ   :=  CP_DLDO_VREF_ADJ;
    SC_DLDO_VREF_SEL   :=  CP_DLDO_VREF_SEL;
    SC_DLDO_LOAD_CTRL  :=  CP_DLDO_LOAD_CTRL;
    SC_DLDO_TEST       :=  CP_DLDO_TEST;
    SC_ALDO_VREF_ADJ   :=  CP_ALDO_VREF_ADJ;
    SC_ALDO_VREF_SEL   :=  CP_ALDO_VREF_SEL;
    SC_ALDO_LOAD_CTRL  :=  CP_ALDO_LOAD_CTRL;
    SC_ALDO_LPF_ADJ    :=  CP_ALDO_LPF_ADJ;
    SC_ALDO_TEST       :=  CP_ALDO_TEST;
    SC_CP_SELFBIAS_SEL  :=  CP_CP_SELFBIAS_SEL;
    SC_ICP_BASE_SEL     :=  CP_ICP_BASE_SEL;
    SC_CP_CUR_SEL       :=  CP_CP_CUR_SEL;
    SC_LPF_R            :=  CP_LPF_R;
    SC_LPF_C            :=  CP_LPF_C;
    SC_VCTRL_INIT       :=  CP_VCTRL_INIT;
    SC_PPLL_DCTEST_SEL  :=  CP_PPLL_DCTEST_SEL;
// assign config body end

//initial config body0 begin
    if(CP_DYNSEL_ENABLE == "FALSE")
    {
        SC_DYNSEL_ENABLE  :=  1'b0;
    }
    else if(CP_DYNSEL_ENABLE == "TRUE")
    {
        SC_DYNSEL_ENABLE  :=  1'b1;
    }
    else
    {
        SC_DYNSEL_ENABLE  :=  1'bx;
        error("illegal setting for CP_DYNSEL_ENABLE  :=  %s",CP_DYNSEL_ENABLE);
    }

//initial config body0 end


//initial config body1 begin
    if(CP_ODIV0_MUXSEL_EN == "FALSE")
    {
        SC_ODIV0_MUXSEL_EN  :=  1'b0;
    }
    else if(CP_ODIV0_MUXSEL_EN == "TRUE")
    {
        SC_ODIV0_MUXSEL_EN  :=  1'b1;
    }
    else
    {
        SC_ODIV0_MUXSEL_EN  :=  1'bx;
        error("illegal setting for CP_ODIV0_MUXSEL_EN  :=  %s",CP_ODIV0_MUXSEL_EN);
    }

//initial config body1 end


//initial config body2 begin
    if(CP_ODIV1_MUXSEL_EN == "FALSE")
    {
        SC_ODIV1_MUXSEL_EN  :=  1'b0;
    }
    else if(CP_ODIV1_MUXSEL_EN == "TRUE")
    {
        SC_ODIV1_MUXSEL_EN  :=  1'b1;
    }
    else
    {
        SC_ODIV1_MUXSEL_EN  :=  1'bx;
        error("illegal setting for CP_ODIV1_MUXSEL_EN  :=  %s",CP_ODIV1_MUXSEL_EN);
    }

//initial config body2 end


//initial config body3 begin
    if(CP_ODIV2_MUXSEL_EN == "FALSE")
    {
        SC_ODIV2_MUXSEL_EN  :=  1'b0;
    }
    else if(CP_ODIV2_MUXSEL_EN == "TRUE")
    {
        SC_ODIV2_MUXSEL_EN  :=  1'b1;
    }
    else
    {
        SC_ODIV2_MUXSEL_EN  :=  1'bx;
        error("illegal setting for CP_ODIV2_MUXSEL_EN  :=  %s",CP_ODIV2_MUXSEL_EN);
    }

//initial config body3 end


//initial config body4 begin
    if(CP_ODIV3_MUXSEL_EN == "FALSE")
    {
        SC_ODIV3_MUXSEL_EN  :=  1'b0;
    }
    else if(CP_ODIV3_MUXSEL_EN == "TRUE")
    {
        SC_ODIV3_MUXSEL_EN  :=  1'b1;
    }
    else
    {
        SC_ODIV3_MUXSEL_EN  :=  1'bx;
        error("illegal setting for CP_ODIV3_MUXSEL_EN  :=  %s",CP_ODIV3_MUXSEL_EN);
    }

//initial config body4 end


//initial config body5 begin
    if(CP_ODIV4_MUXSEL_EN == "FALSE")
    {
        SC_ODIV4_MUXSEL_EN  :=  1'b0;
    }
    else if(CP_ODIV4_MUXSEL_EN == "TRUE")
    {
        SC_ODIV4_MUXSEL_EN  :=  1'b1;
    }
    else
    {
        SC_ODIV4_MUXSEL_EN  :=  1'bx;
        error("illegal setting for CP_ODIV4_MUXSEL_EN  :=  %s",CP_ODIV4_MUXSEL_EN);
    }

//initial config body5 end


//initial config body6 begin
    if(CP_ODIVPHY_MUXSEL_EN == "FALSE")
    {
        SC_ODIVPHY_MUXSEL_EN  :=  1'b0;
    }
    else if(CP_ODIVPHY_MUXSEL_EN == "TRUE")
    {
        SC_ODIVPHY_MUXSEL_EN  :=  1'b1;
    }
    else
    {
        SC_ODIVPHY_MUXSEL_EN  :=  1'bx;
        error("illegal setting for CP_ODIVPHY_MUXSEL_EN  :=  %s",CP_ODIVPHY_MUXSEL_EN);
    }

//initial config body6 end


//initial config body7 begin
    if(CP_FDIV_MUXSEL_EN == "FALSE")
    {
        SC_FDIV_MUXSEL_EN  :=  1'b0;
    }
    else if(CP_FDIV_MUXSEL_EN == "TRUE")
    {
        SC_FDIV_MUXSEL_EN  :=  1'b1;
    }
    else
    {
        SC_FDIV_MUXSEL_EN  :=  1'bx;
        error("illegal setting for CP_FDIV_MUXSEL_EN  :=  %s",CP_FDIV_MUXSEL_EN);
    }

//initial config body7 end


//initial config body8 begin
    if(CP_CLKOUT0_GATE_EN == "FALSE")
    {
        SC_CLKOUT0_GATE_EN  :=  1'b0;
    }
    else if(CP_CLKOUT0_GATE_EN == "TRUE")
    {
        SC_CLKOUT0_GATE_EN  :=  1'b1;
    }
    else
    {
        SC_CLKOUT0_GATE_EN  :=  1'bx;
        error("illegal setting for CP_CLKOUT0_GATE_EN  :=  %s",CP_CLKOUT0_GATE_EN);
    }

//initial config body8 end


//initial config body9 begin
    if(CP_CLKOUT1_GATE_EN == "FALSE")
    {
        SC_CLKOUT1_GATE_EN  :=  1'b0;
    }
    else if(CP_CLKOUT1_GATE_EN == "TRUE")
    {
        SC_CLKOUT1_GATE_EN  :=  1'b1;
    }
    else
    {
        SC_CLKOUT1_GATE_EN  :=  1'bx;
        error("illegal setting for CP_CLKOUT1_GATE_EN  :=  %s",CP_CLKOUT1_GATE_EN);
    }

//initial config body9 end


//initial config body10 begin
    if(CP_CLKOUT2_GATE_EN == "FALSE")
    {
        SC_CLKOUT2_GATE_EN  :=  1'b0;
    }
    else if(CP_CLKOUT2_GATE_EN == "TRUE")
    {
        SC_CLKOUT2_GATE_EN  :=  1'b1;
    }
    else
    {
        SC_CLKOUT2_GATE_EN  :=  1'bx;
        error("illegal setting for CP_CLKOUT2_GATE_EN  :=  %s",CP_CLKOUT2_GATE_EN);
    }

//initial config body10 end


//initial config body11 begin
    if(CP_CLKOUT3_GATE_EN == "FALSE")
    {
        SC_CLKOUT3_GATE_EN  :=  1'b0;
    }
    else if(CP_CLKOUT3_GATE_EN == "TRUE")
    {
        SC_CLKOUT3_GATE_EN  :=  1'b1;
    }
    else
    {
        SC_CLKOUT3_GATE_EN  :=  1'bx;
        error("illegal setting for CP_CLKOUT3_GATE_EN  :=  %s",CP_CLKOUT3_GATE_EN);
    }

//initial config body11 end


//initial config body12 begin
    if(CP_CLKOUT4_GATE_EN == "FALSE")
    {
        SC_CLKOUT4_GATE_EN  :=  1'b0;
    }
    else if(CP_CLKOUT4_GATE_EN == "TRUE")
    {
        SC_CLKOUT4_GATE_EN  :=  1'b1;
    }
    else
    {
        SC_CLKOUT4_GATE_EN  :=  1'bx;
        error("illegal setting for CP_CLKOUT4_GATE_EN  :=  %s",CP_CLKOUT4_GATE_EN);
    }

//initial config body12 end


//initial config body13 begin
    if(CP_CLKOUTPHY_GATE_EN == "FALSE")
    {
        SC_CLKOUTPHY_GATE_EN  :=  1'b0;
    }
    else if(CP_CLKOUTPHY_GATE_EN == "TRUE")
    {
        SC_CLKOUTPHY_GATE_EN  :=  1'b1;
    }
    else
    {
        SC_CLKOUTPHY_GATE_EN  :=  1'bx;
        error("illegal setting for CP_CLKOUTPHY_GATE_EN  :=  %s",CP_CLKOUTPHY_GATE_EN);
    }

//initial config body13 end


//initial config body14 begin
    if(CP_CLKFBOUT_GATE_EN == "FALSE")
    {
        SC_CLKFBOUT_GATE_EN  :=  1'b0;
    }
    else if(CP_CLKFBOUT_GATE_EN == "TRUE")
    {
        SC_CLKFBOUT_GATE_EN  :=  1'b1;
    }
    else
    {
        SC_CLKFBOUT_GATE_EN  :=  1'bx;
        error("illegal setting for CP_CLKFBOUT_GATE_EN  :=  %s",CP_CLKFBOUT_GATE_EN);
    }

//initial config body14 end


//initial config body15 begin
    if(CP_PLL_USE_APB == "FALSE")
    {
        SC_PLL_USE_APB  :=  1'b0;
    }
    else if(CP_PLL_USE_APB == "TRUE")
    {
        SC_PLL_USE_APB  :=  1'b1;
    }
    else
    {
        SC_PLL_USE_APB  :=  1'bx;
        error("illegal setting for CP_PLL_USE_APB  :=  %s",CP_PLL_USE_APB);
    }

//initial config body15 end


//initial config body16 begin
    if(CP_PFDEN_ENABLE == "FALSE")
    {
        SC_PFDEN_ENABLE  :=  1'b0;
    }
    else if(CP_PFDEN_ENABLE == "TRUE")
    {
        SC_PFDEN_ENABLE  :=  1'b1;
    }
    else
    {
        SC_PFDEN_ENABLE  :=  1'bx;
        error("illegal setting for CP_PFDEN_ENABLE  :=  %s",CP_PFDEN_ENABLE);
    }

//initial config body16 end


//initial config body17 begin
    if(CP_FREQDETECT_EN == "FALSE")
    {
        SC_FREQDETECT_EN  :=  1'b0;
    }
    else if(CP_FREQDETECT_EN == "TRUE")
    {
        SC_FREQDETECT_EN  :=  1'b1;
    }
    else
    {
        SC_FREQDETECT_EN  :=  1'bx;
        error("illegal setting for CP_FREQDETECT_EN  :=  %s",CP_FREQDETECT_EN);
    }

//initial config body17 end


//initial config body18 begin
    if(CP_FREQDETECT_BYPASSREXT_EN == "FALSE")
    {
        SC_FREQDETECT_BYPASSREXT_EN  :=  1'b0;
    }
    else if(CP_FREQDETECT_BYPASSREXT_EN == "TRUE")
    {
        SC_FREQDETECT_BYPASSREXT_EN  :=  1'b1;
    }
    else
    {
        SC_FREQDETECT_BYPASSREXT_EN  :=  1'bx;
        error("illegal setting for CP_FREQDETECT_BYPASSREXT_EN  :=  %s",CP_FREQDETECT_BYPASSREXT_EN);
    }

//initial config body18 end


//initial config body19 begin
    if(CP_LOCK_FILTER_PD == "FALSE")
    {
        SC_LOCK_FILTER_PD  :=  1'b0;
    }
    else if(CP_LOCK_FILTER_PD == "TRUE")
    {
        SC_LOCK_FILTER_PD  :=  1'b1;
    }
    else
    {
        SC_LOCK_FILTER_PD  :=  1'bx;
        error("illegal setting for CP_LOCK_FILTER_PD  :=  %s",CP_LOCK_FILTER_PD);
    }

//initial config body19 end


//initial config body20 begin
    if(CP_PFDTOP_CLKTEST_EN == "FALSE")
    {
        SC_PFDTOP_CLKTEST_EN  :=  1'b0;
    }
    else if(CP_PFDTOP_CLKTEST_EN == "TRUE")
    {
        SC_PFDTOP_CLKTEST_EN  :=  1'b1;
    }
    else
    {
        SC_PFDTOP_CLKTEST_EN  :=  1'bx;
        error("illegal setting for CP_PFDTOP_CLKTEST_EN  :=  %s",CP_PFDTOP_CLKTEST_EN);
    }

//initial config body20 end


//initial config body21 begin
    if(CP_GLOGEN_ENABLE == "FALSE")
    {
        SC_GLOGEN_ENABLE  :=  1'b0;
    }
    else if(CP_GLOGEN_ENABLE == "TRUE")
    {
        SC_GLOGEN_ENABLE  :=  1'b1;
    }
    else
    {
        SC_GLOGEN_ENABLE  :=  1'bx;
        error("illegal setting for CP_GLOGEN_ENABLE  :=  %s",CP_GLOGEN_ENABLE);
    }

//initial config body21 end


//initial config body22 begin
    if(CP_PLL_PWD_ENABLE == "FALSE")
    {
        SC_PLL_PWD_ENABLE  :=  1'b0;
    }
    else if(CP_PLL_PWD_ENABLE == "TRUE")
    {
        SC_PLL_PWD_ENABLE  :=  1'b1;
    }
    else
    {
        SC_PLL_PWD_ENABLE  :=  1'bx;
        error("illegal setting for CP_PLL_PWD_ENABLE  :=  %s",CP_PLL_PWD_ENABLE);
    }

//initial config body22 end


//initial config body23 begin
    if(CP_PLL_RST_ENABLE == "FALSE")
    {
        SC_PLL_RST_ENABLE  :=  1'b0;
    }
    else if(CP_PLL_RST_ENABLE == "TRUE")
    {
        SC_PLL_RST_ENABLE  :=  1'b1;
    }
    else
    {
        SC_PLL_RST_ENABLE  :=  1'bx;
        error("illegal setting for CP_PLL_RST_ENABLE  :=  %s",CP_PLL_RST_ENABLE);
    }

//initial config body23 end


//initial config body24 begin
    if(CP_LDO_R_BYPASS_ENABLE == "FALSE")
    {
        SC_LDO_R_BYPASS_ENABLE  :=  1'b0;
    }
    else if(CP_LDO_R_BYPASS_ENABLE == "TRUE")
    {
        SC_LDO_R_BYPASS_ENABLE  :=  1'b1;
    }
    else
    {
        SC_LDO_R_BYPASS_ENABLE  :=  1'bx;
        error("illegal setting for CP_LDO_R_BYPASS_ENABLE  :=  %s",CP_LDO_R_BYPASS_ENABLE);
    }

//initial config body24 end


//initial config body25 begin
    if(CP_DLDO_TEST_EN == "FALSE")
    {
        SC_DLDO_TEST_EN  :=  1'b0;
    }
    else if(CP_DLDO_TEST_EN == "TRUE")
    {
        SC_DLDO_TEST_EN  :=  1'b1;
    }
    else
    {
        SC_DLDO_TEST_EN  :=  1'bx;
        error("illegal setting for CP_DLDO_TEST_EN  :=  %s",CP_DLDO_TEST_EN);
    }

//initial config body25 end


//initial config body26 begin
    if(CP_ALDO_TEST_EN == "FALSE")
    {
        SC_ALDO_TEST_EN  :=  1'b0;
    }
    else if(CP_ALDO_TEST_EN == "TRUE")
    {
        SC_ALDO_TEST_EN  :=  1'b1;
    }
    else
    {
        SC_ALDO_TEST_EN  :=  1'bx;
        error("illegal setting for CP_ALDO_TEST_EN  :=  %s",CP_ALDO_TEST_EN);
    }

//initial config body26 end


//initial config body27 begin
    if(CP_PPLL_VCTRL_TEST_EN == "FALSE")
    {
        SC_PPLL_VCTRL_TEST_EN  :=  1'b0;
    }
    else if(CP_PPLL_VCTRL_TEST_EN == "TRUE")
    {
        SC_PPLL_VCTRL_TEST_EN  :=  1'b1;
    }
    else
    {
        SC_PPLL_VCTRL_TEST_EN  :=  1'bx;
        error("illegal setting for CP_PPLL_VCTRL_TEST_EN  :=  %s",CP_PPLL_VCTRL_TEST_EN);
    }

//initial config body27 end

};

//grid device configure body end


timing ppll_tnl of PPLL
{
    operator V_PPLL PPLL
    parameter map
    (
      //CLKIN_FREQ       =>   ,
      //PFDEN_EN         =>   CP_PFDEN_ENABLE,
      //LOCK_MODE        =>    ,
        STATIC_RATIOI    =>   CP_IDIV_RATIO ,
        STATIC_RATIOM    =>   CP_MDIV_RATIO ,
        STATIC_RATIO0    =>   CP_ODIV0_RATIO,
        STATIC_RATIO1    =>   CP_ODIV1_RATIO,
        STATIC_RATIO2    =>   CP_ODIV2_RATIO,
        STATIC_RATIO3    =>   CP_ODIV3_RATIO,
        STATIC_RATIO4    =>   CP_ODIV4_RATIO,
        STATIC_RATIOPHY  =>   CP_ODIVPHY_RATIO,
        STATIC_RATIOF    =>   CP_FDIV_RATIO,
        STATIC_DUTY0     =>   CP_ODIV0_DUTY,
        STATIC_DUTY1     =>   CP_ODIV1_DUTY,
        STATIC_DUTY2     =>   CP_ODIV2_DUTY,
        STATIC_DUTY3     =>   CP_ODIV3_DUTY,
        STATIC_DUTY4     =>   CP_ODIV4_DUTY,
        STATIC_DUTYPHY   =>   CP_ODIVPHY_DUTY,
        STATIC_DUTYF     =>   CP_FDIV_DUTY,
        STATIC_PHASE0    =>   CP_ODIV0_FPHASE,
        STATIC_PHASE1    =>   CP_ODIV1_FPHASE,
        STATIC_PHASE2    =>   CP_ODIV2_FPHASE,
        STATIC_PHASE3    =>   CP_ODIV3_FPHASE,
        STATIC_PHASE4    =>   CP_ODIV4_FPHASE,
        STATIC_PHASEPHY  =>   CP_ODIVPHY_FPHASE,
        STATIC_PHASEF    =>   CP_FDIV_FPHASE,
        STATIC_CPHASE0   =>   CP_ODIV0_CPHASE,
        STATIC_CPHASE1   =>   CP_ODIV1_CPHASE,
        STATIC_CPHASE2   =>   CP_ODIV2_CPHASE,
        STATIC_CPHASE3   =>   CP_ODIV3_CPHASE,
        STATIC_CPHASE4   =>   CP_ODIV4_CPHASE,
        STATIC_CPHASEPHY =>   CP_ODIVPHY_CPHASE, 
        STATIC_CPHASEF   =>   CP_FDIV_CPHASE,
        CLKOUT0_SYN_EN   =>   CP_CLKOUT0_GATE_EN,
        CLKOUT1_SYN_EN   =>   CP_CLKOUT1_GATE_EN,
        CLKOUT2_SYN_EN   =>   CP_CLKOUT2_GATE_EN,
        CLKOUT3_SYN_EN   =>   CP_CLKOUT3_GATE_EN,
        CLKOUT4_SYN_EN   =>   CP_CLKOUT4_GATE_EN,
        CLKOUTPHY_SYN_EN =>   CP_CLKOUTPHY_GATE_EN,
        CLKOUTF_SYN_EN   =>   CP_CLKFBOUT_GATE_EN,
        INTERNAL_FB    =>   (CP_FEEDBK_SEL == 1)  ? "CLKOUT0" :
                            (CP_FEEDBK_SEL == 2)  ? "CLKOUT1" :
                            (CP_FEEDBK_SEL == 3)  ? "CLKOUT2" :
                            (CP_FEEDBK_SEL == 4)  ? "CLKOUT3" :
                            (CP_FEEDBK_SEL == 5)  ? "CLKOUT4" :
                            (CP_FEEDBK_SEL == 0)  ? "CLKOUTF" : "DISABLE", 
        EXTERNAL_FB    =>   (CP_FEEDBK_SEL == 9)  ? "CLKOUT0" :
                            (CP_FEEDBK_SEL == 10) ? "CLKOUT1" :
                            (CP_FEEDBK_SEL == 11) ? "CLKOUT2" :
                            (CP_FEEDBK_SEL == 12) ? "CLKOUT3" :
                            (CP_FEEDBK_SEL == 13) ? "CLKOUT4" :
                            (CP_FEEDBK_SEL == 8)  ? "CLKOUTF" : "DISABLE"
                            //,
      //BANDWIDTH        =>       // "OPTIMIZED" /* pragma PAP_ARC_ALTERNATIVE_PMT_VALUE = "OPTIMIZED | LOW | HIGH" */
    )
    port map
    (
        CLKOUT0        =>  CLKOUT0,
        CLKOUT0N       =>  CLKOUT0N,
        CLKOUT1        =>  CLKOUT1,
        CLKOUT1N       =>  CLKOUT1N,
        CLKOUT2        =>  CLKOUT2,
        CLKOUT2N       =>  CLKOUT2N,
        CLKOUT3        =>  CLKOUT3,
        CLKOUT3N       =>  CLKOUT3N,
        CLKOUT4        =>  CLKOUT4,
        //CLKOUT4N       =>  CLKOUT4N,
        CLKOUTPHY      =>  CLKOUTPHY,
        CLKOUTPHYN     =>  CLKOUTPHYN,
        CLKOUTF        =>  CLKFBOUT,
        CLKOUTFN       =>  CLKFBOUTN,
        LOCK           =>  PLL_LOCK,
        APB_RDATA      =>  PRDATA,
        APB_READY      =>  PREADY,
        CLKIN1         =>  CLK_IN0,
        CLKIN2         =>  CLK_IN1,
        CLKFB          =>  CLK_FB,
        CLKIN_SEL      => (CP_DYNSEL_ENABLE == "TRUE") ? DYNSEL_CLKIN : 
                          (CP_CLKIN_STASEL == 1'b0) ? 1'b0 : 1'b1,
      //PFDEN          =>  PFDEN,
        CLKOUT0_SYN    =>  CLKOUT0_GATE,
        CLKOUT1_SYN    =>  CLKOUT1_GATE,
        CLKOUT2_SYN    =>  CLKOUT2_GATE,
        CLKOUT3_SYN    =>  CLKOUT3_GATE,
        CLKOUT4_SYN    =>  CLKOUT4_GATE,
        CLKOUTPHY_SYN  =>  CLKOUTPHY_GATE,
        CLKOUTF_SYN    =>  CLKFBOUT_GATE,
        PLL_PWD        =>  PLL_PWD,
        RST            =>  PLL_RST,
        APB_CLK        =>  PCLK,
        APB_RST_N      =>  PRESETN,
        APB_ADDR       =>  PADDR,
        APB_SEL        =>  PSEL,
        APB_EN         =>  PENABLE,
        APB_WRITE      =>  PWRITE,
        APB_WDATA      =>  PWDATA
    );
};
