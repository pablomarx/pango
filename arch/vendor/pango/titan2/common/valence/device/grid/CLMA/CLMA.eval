tarted
grid
device CLMA
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config bit CP_INITA[63:0] = 64'hFFFFFFFFFFFFFFFF,
        config bit CP_INITB[63:0] = 64'hFFFFFFFFFFFFFFFF,
        config bit CP_INITC[63:0] = 64'hFFFFFFFFFFFFFFFF,
        config bit CP_INITD[63:0] = 64'hFFFFFFFFFFFFFFFF,
        config string CP_MODEA = "LUT6",
        config string CP_MODEB = "LUT6",
        config string CP_MODEC = "LUT6",
        config string CP_MODED = "LUT6",
        config string CP_FF0_RS = "SET",
        config string CP_FF1_RS = "SET",
        config string CP_FF2_RS = "SET",
        config string CP_FF3_RS = "SET",
        config string CP_FFAPP0_RS = "SET",
        config string CP_FFAPP1_RS = "SET",
        config string CP_FFAPP2_RS = "SET",
        config string CP_FFAPP3_RS = "SET",
        config bit CP_FF0_INIT = 1'b1,
        config bit CP_FF1_INIT = 1'b1,
        config bit CP_FF2_INIT = 1'b1,
        config bit CP_FF3_INIT = 1'b1,
        config bit CP_FFAPP0_INIT = 1'b1,
        config bit CP_FFAPP1_INIT = 1'b1,
        config bit CP_FFAPP2_INIT = 1'b1,
        config bit CP_FFAPP3_INIT = 1'b1,
        config string CP_GRS_EN = "TRUE",
        config string CP_RS_MODE = "SYNC",
        config string CP_LRS_POL = "FALSE",
        config string CP_LRS_EN = "FALSE",
        config string CP_LCE_POL = "FALSE",
        config string CP_LCE_EN = "FALSE",
        config string CP_CLK_POL = "FALSE",
        config string CP_RSMUX_SEL = "LOCAL",
        config string CP_CEMUX_SEL = "LOCAL",
        config string CP_Q0MUX_SEL = "YX",
        config string CP_Q1MUX_SEL = "YX",
        config string CP_Q2MUX_SEL = "YX",
        config string CP_Q3MUX_SEL = "YX",
        config string CP_FFAPP0MUX_SEL = "YX",
        config string CP_FFAPP1MUX_SEL = "YX",
        config string CP_FFAPP2MUX_SEL = "YX",
        config string CP_FFAPP3MUX_SEL = "YX",
        config string CP_CR0PREMUX_SEL = "YX",
        config string CP_CR1PREMUX_SEL = "YX",
        config string CP_CR2PREMUX_SEL = "YX",
        config string CP_CR3PREMUX_SEL = "YX",
        config string CP_CR0POSTMUX_SEL = "CX",
        config string CP_CR1POSTMUX_SEL = "CX",
        config string CP_CR2POSTMUX_SEL = "CX",
        config string CP_CR3POSTMUX_SEL = "CX",
        config string CP_LATCH_EN = "FALSE"
    );
    port
    (
// configuration_body_def_on


    config input SC_Q_0[63:0] = 64'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_Q_0[63],SC_Q_0[62],SC_Q_0[61],SC_Q_0[60],SC_Q_0[59],SC_Q_0[58],SC_Q_0[57],SC_Q_0[56],SC_Q_0[55],SC_Q_0[54],SC_Q_0[53],SC_Q_0[52],SC_Q_0[51],SC_Q_0[50],SC_Q_0[49],SC_Q_0[48],SC_Q_0[47],SC_Q_0[46],SC_Q_0[45],SC_Q_0[44],SC_Q_0[43],SC_Q_0[42],SC_Q_0[41],SC_Q_0[40],SC_Q_0[39],SC_Q_0[38],SC_Q_0[37],SC_Q_0[36],SC_Q_0[35],SC_Q_0[34],SC_Q_0[33],SC_Q_0[32],SC_Q_0[31],SC_Q_0[30],SC_Q_0[29],SC_Q_0[28],SC_Q_0[27],SC_Q_0[26],SC_Q_0[25],SC_Q_0[24],SC_Q_0[23],SC_Q_0[22],SC_Q_0[21],SC_Q_0[20],SC_Q_0[19],SC_Q_0[18],SC_Q_0[17],SC_Q_0[16],SC_Q_0[15],SC_Q_0[14],SC_Q_0[13],SC_Q_0[12],SC_Q_0[11],SC_Q_0[10],SC_Q_0[9],SC_Q_0[8],SC_Q_0[7],SC_Q_0[6],SC_Q_0[5],SC_Q_0[4],SC_Q_0[3],SC_Q_0[2],SC_Q_0[1],SC_Q_0[0]" */,

    config input SC_Q_1[63:0] = 64'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_Q_1[63],SC_Q_1[62],SC_Q_1[61],SC_Q_1[60],SC_Q_1[59],SC_Q_1[58],SC_Q_1[57],SC_Q_1[56],SC_Q_1[55],SC_Q_1[54],SC_Q_1[53],SC_Q_1[52],SC_Q_1[51],SC_Q_1[50],SC_Q_1[49],SC_Q_1[48],SC_Q_1[47],SC_Q_1[46],SC_Q_1[45],SC_Q_1[44],SC_Q_1[43],SC_Q_1[42],SC_Q_1[41],SC_Q_1[40],SC_Q_1[39],SC_Q_1[38],SC_Q_1[37],SC_Q_1[36],SC_Q_1[35],SC_Q_1[34],SC_Q_1[33],SC_Q_1[32],SC_Q_1[31],SC_Q_1[30],SC_Q_1[29],SC_Q_1[28],SC_Q_1[27],SC_Q_1[26],SC_Q_1[25],SC_Q_1[24],SC_Q_1[23],SC_Q_1[22],SC_Q_1[21],SC_Q_1[20],SC_Q_1[19],SC_Q_1[18],SC_Q_1[17],SC_Q_1[16],SC_Q_1[15],SC_Q_1[14],SC_Q_1[13],SC_Q_1[12],SC_Q_1[11],SC_Q_1[10],SC_Q_1[9],SC_Q_1[8],SC_Q_1[7],SC_Q_1[6],SC_Q_1[5],SC_Q_1[4],SC_Q_1[3],SC_Q_1[2],SC_Q_1[1],SC_Q_1[0]" */,

    config input SC_Q_2[63:0] = 64'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_Q_2[63],SC_Q_2[62],SC_Q_2[61],SC_Q_2[60],SC_Q_2[59],SC_Q_2[58],SC_Q_2[57],SC_Q_2[56],SC_Q_2[55],SC_Q_2[54],SC_Q_2[53],SC_Q_2[52],SC_Q_2[51],SC_Q_2[50],SC_Q_2[49],SC_Q_2[48],SC_Q_2[47],SC_Q_2[46],SC_Q_2[45],SC_Q_2[44],SC_Q_2[43],SC_Q_2[42],SC_Q_2[41],SC_Q_2[40],SC_Q_2[39],SC_Q_2[38],SC_Q_2[37],SC_Q_2[36],SC_Q_2[35],SC_Q_2[34],SC_Q_2[33],SC_Q_2[32],SC_Q_2[31],SC_Q_2[30],SC_Q_2[29],SC_Q_2[28],SC_Q_2[27],SC_Q_2[26],SC_Q_2[25],SC_Q_2[24],SC_Q_2[23],SC_Q_2[22],SC_Q_2[21],SC_Q_2[20],SC_Q_2[19],SC_Q_2[18],SC_Q_2[17],SC_Q_2[16],SC_Q_2[15],SC_Q_2[14],SC_Q_2[13],SC_Q_2[12],SC_Q_2[11],SC_Q_2[10],SC_Q_2[9],SC_Q_2[8],SC_Q_2[7],SC_Q_2[6],SC_Q_2[5],SC_Q_2[4],SC_Q_2[3],SC_Q_2[2],SC_Q_2[1],SC_Q_2[0]" */,

    config input SC_Q_3[63:0] = 64'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_Q_3[63],SC_Q_3[62],SC_Q_3[61],SC_Q_3[60],SC_Q_3[59],SC_Q_3[58],SC_Q_3[57],SC_Q_3[56],SC_Q_3[55],SC_Q_3[54],SC_Q_3[53],SC_Q_3[52],SC_Q_3[51],SC_Q_3[50],SC_Q_3[49],SC_Q_3[48],SC_Q_3[47],SC_Q_3[46],SC_Q_3[45],SC_Q_3[44],SC_Q_3[43],SC_Q_3[42],SC_Q_3[41],SC_Q_3[40],SC_Q_3[39],SC_Q_3[38],SC_Q_3[37],SC_Q_3[36],SC_Q_3[35],SC_Q_3[34],SC_Q_3[33],SC_Q_3[32],SC_Q_3[31],SC_Q_3[30],SC_Q_3[29],SC_Q_3[28],SC_Q_3[27],SC_Q_3[26],SC_Q_3[25],SC_Q_3[24],SC_Q_3[23],SC_Q_3[22],SC_Q_3[21],SC_Q_3[20],SC_Q_3[19],SC_Q_3[18],SC_Q_3[17],SC_Q_3[16],SC_Q_3[15],SC_Q_3[14],SC_Q_3[13],SC_Q_3[12],SC_Q_3[11],SC_Q_3[10],SC_Q_3[9],SC_Q_3[8],SC_Q_3[7],SC_Q_3[6],SC_Q_3[5],SC_Q_3[4],SC_Q_3[3],SC_Q_3[2],SC_Q_3[1],SC_Q_3[0]" */,

    config input SC_APPFF_INIT[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_APPFF_INIT[3],SC_APPFF_INIT[2],SC_APPFF_INIT[1],SC_APPFF_INIT[0]" */,

    config input SC_APPFF_RSS[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_APPFF_RSS[3],SC_APPFF_RSS[2],SC_APPFF_RSS[1],SC_APPFF_RSS[0]" */,

    config input SC_APPFF_SEL0[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_APPFF_SEL0[3],SC_APPFF_SEL0[2],SC_APPFF_SEL0[1],SC_APPFF_SEL0[0]" */,

    config input SC_APPFF_SEL1[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_APPFF_SEL1[3],SC_APPFF_SEL1[2],SC_APPFF_SEL1[1],SC_APPFF_SEL1[0]" */,

    config input SC_ASYNC = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ASYNC" */,

    config input SC_CARRY[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CARRY[3],SC_CARRY[2],SC_CARRY[1],SC_CARRY[0]" */,

    config input SC_CECHAIN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CECHAIN" */,

    config input SC_CRPOSTMUX_SEL[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CRPOSTMUX_SEL[3],SC_CRPOSTMUX_SEL[2],SC_CRPOSTMUX_SEL[1],SC_CRPOSTMUX_SEL[0]" */,

    config input SC_CRPREMUX_SEL0[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CRPREMUX_SEL0[3],SC_CRPREMUX_SEL0[2],SC_CRPREMUX_SEL0[1],SC_CRPREMUX_SEL0[0]" */,

    config input SC_CRPREMUX_SEL1[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CRPREMUX_SEL1[3],SC_CRPREMUX_SEL1[2],SC_CRPREMUX_SEL1[1],SC_CRPREMUX_SEL1[0]" */,

    config input SC_GRS_DIS = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GRS_DIS" */,

    config input SC_I5CIN[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_I5CIN[3],SC_I5CIN[2],SC_I5CIN[1],SC_I5CIN[0]" */,

    config input SC_LATCH = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LATCH" */,

    config input SC_LCE_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LCE_EN" */,

    config input SC_LRS_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LRS_EN" */,

    config input SC_MAINFF_INIT[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MAINFF_INIT[3],SC_MAINFF_INIT[2],SC_MAINFF_INIT[1],SC_MAINFF_INIT[0]" */,

    config input SC_MAINFF_RSS[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MAINFF_RSS[3],SC_MAINFF_RSS[2],SC_MAINFF_RSS[1],SC_MAINFF_RSS[0]" */,

    config input SC_MAINFF_SEL0[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MAINFF_SEL0[3],SC_MAINFF_SEL0[2],SC_MAINFF_SEL0[1],SC_MAINFF_SEL0[0]" */,

    config input SC_MAINFF_SEL1[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MAINFF_SEL1[3],SC_MAINFF_SEL1[2],SC_MAINFF_SEL1[1],SC_MAINFF_SEL1[0]" */,

    config input SC_PICE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICE" */,

    config input SC_PICLK = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICLK" */,

    config input SC_PIRS = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIRS" */,

    config input SC_RSCHAIN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RSCHAIN" */,

// configuration_body_def_end

        input A0 = 1'b1,
        input A1 = 1'b1,
        input A2 = 1'b1,
        input A3 = 1'b1,
        input A4 = 1'b1,
        input A5 = 1'b1,
        input B0 = 1'b1,
        input B1 = 1'b1,
        input B2 = 1'b1,
        input B3 = 1'b1,
        input B4 = 1'b1,
        input B5 = 1'b1,
        input C0 = 1'b1,
        input C1 = 1'b1,
        input C2 = 1'b1,
        input C3 = 1'b1,
        input C4 = 1'b1,
        input C5 = 1'b1,
        input D0 = 1'b1,
        input D1 = 1'b1,
        input D2 = 1'b1,
        input D3 = 1'b1,
        input D4 = 1'b1,
        input D5 = 1'b1,
        input M0 = 1'b1,
        input M1 = 1'b1,
        input M2 = 1'b1,
        input M3 = 1'b1,
        input RS = 1'b1,
        input CE = 1'b1,
        input CLK = 1'b1,
        input RSCI = 1'b1,
        input CECI = 1'b1,
        input CIN = 1'b1,
        input SRCI = 1'b1,
        output Y0,
        output Y1,
        output Y2,
        output Y3,
        output Q0,
        output Q1,
        output Q2,
        output Q3,
        output CR0,
        output CR1,
        output CR2,
        output CR3,
        output COUT,
        output RSCO,
        output CECO,
        output SRCO,
        output CLKO
    );
};
//grid device end

//grid device structure netlist started
structure netlist of CLMA
{

//******************************** A *************************************************
    wire  ntA5      ;
    wire  ntA4      ;
    wire  ntA3      ;
    wire  ntA2      ;
    wire  ntA1      ;
    wire  ntA0      ;
    wire  ntM0      ;
    wire  ntQ0      ;
    wire  ntCYA     ;
    wire  ntL5A     ;
    wire  ntL6A     ;
    wire  ntQD0     ;
    wire  ntQC0     ;
    wire  ntQD0_APP ;
    wire  ntQP0     ;
    wire  ntCR0   ;

//******************************** B *************************************************
    wire  ntB5      ;
    wire  ntB4      ;
    wire  ntB3      ;
    wire  ntB2      ;
    wire  ntB1      ;
    wire  ntB0      ;
    wire  ntM1      ;
    wire  ntQ1      ;
    wire  ntCYB     ;
    wire  ntL5B     ;
    wire  ntL6B     ;
    wire  ntQD1     ;
    wire  ntQC1     ;
    wire  ntQD1_APP ;
    wire  ntQP1     ;
    wire  ntCR1   ;

//******************************** C *************************************************
    wire  ntC5      ;
    wire  ntC4      ;
    wire  ntC3      ;
    wire  ntC2      ;
    wire  ntC1      ;
    wire  ntC0      ;
    wire  ntM2      ;
    wire  ntQ2      ;
    wire  ntCYC     ;
    wire  ntL5C     ;
    wire  ntL6C     ;
    wire  ntQD2     ;
    wire  ntQC2     ;
    wire  ntQD2_APP ;
    wire  ntQP2     ;
    wire  ntCR2   ;

//******************************** D *************************************************
    wire  ntD5      ;
    wire  ntD4      ;
    wire  ntD3      ;
    wire  ntD2      ;
    wire  ntD1      ;
    wire  ntD0      ;
    wire  ntM3      ;
    wire  ntQ3      ;
    wire  ntCYD     ;
    wire  ntL5D     ;
    wire  ntL6D     ;
    wire  ntQD3     ;
    wire  ntQC3     ;
    wire  ntQD3_APP ;
    wire  ntQP3     ;
    wire  ntCR3   ;

//********************************************** common **************************************************
    wire  ntRS      ;
    wire  ntCE      ;
    wire  ntCLK     ;
    wire  ntRSCI    ;
    wire  ntCECI    ;
    wire  ntCIN     ;
    wire  ntSRCI    ;
    wire  ntCECO    ;
    wire  ntRSCO    ;

    wire ntL7AB;
    wire ntL7CD;
    wire ntL8;


    wire ntWE_R;
    wire ntCLKR;
    wire ntCE_P;
    wire ntRS_P;

//****************************************** A ************************************************
    //assign
    ntA5        <= A5      ;
    ntA4        <= A4      ;
    ntA3        <= A3      ;
    ntA2        <= A2      ;
    ntA1        <= A1      ;
    ntA0        <= A0      ;
    ntM0        <= M0      ;
    Y0          <= ntL6A   ;
    CR0         <= ntCR0 ;
    Q0          <= ntQ0    ;

//****************************************** B ************************************************
    ntB5        <= B5      ;
    ntB4        <= B4      ;
    ntB3        <= B3      ;
    ntB2        <= B2      ;
    ntB1        <= B1      ;
    ntB0        <= B0      ;
    ntM1        <= M1      ;
    Y1          <= ntL6B   ;
    CR1         <= ntCR1 ;
    Q1          <= ntQ1    ;

//****************************************** C ************************************************
    ntC5        <= C5      ;
    ntC4        <= C4      ;
    ntC3        <= C3      ;
    ntC2        <= C2      ;
    ntC1        <= C1      ;
    ntC0        <= C0      ;
    ntM2        <= M2      ;
    Y2          <= ntL6C   ;
    CR2         <= ntCR2 ;
    Q2          <= ntQ2    ;

//****************************************** D ************************************************
    ntD5        <= D5      ;
    ntD4        <= D4      ;
    ntD3        <= D3      ;
    ntD2        <= D2      ;
    ntD1        <= D1      ;
    ntD0        <= D0      ;
    ntM3        <= M3      ;
    Y3          <= ntL6D   ;
    CR3         <= ntCR3 ;
    Q3          <= ntQ3    ;


//********************************************** common **************************************************
    ntRS        <= RS      ;
    ntCE        <= CE      ;
    ntCLK       <= CLK     ;
    CLKO        <= ntCLKR  ;

    ntRSCI      <= RSCI    ;
    RSCO        <= ntRSCO  ;

    ntCECI      <= CECI    ;
    CECO        <= ntCECO  ;

    ntCIN       <= CIN     ;
    COUT        <= ntCYD   ;

    ntSRCI      <= SRCI    ;
    SRCO        <= ntCR3;

    device LUT6 FYA
       parameter map
       (
             CP_INIT         => CP_INITA       ,
             CP_MODE         => CP_MODEA
       )
       port map
       (
             A0      => ntA0                                 ,
             A1      => ntA1                                 ,
             A2      => ntA2                                 ,
             A3      => ntA3                                 ,
             A4      => ntA4                                 ,
             A5      => ntA5                                 ,
             CIN     => ntCIN                                ,
             COUT    => ntCYA                                ,
             L5      => ntL5A                                ,
             L6      => ntL6A

       );


    device LUT6 FYB
       parameter map
       (
             CP_INIT         => CP_INITB       ,
             CP_MODE         => CP_MODEB
       )
       port map
       (
             A0      => ntB0                                 ,
             A1      => ntB1                                 ,
             A2      => ntB2                                 ,
             A3      => ntB3                                 ,
             A4      => ntB4                                 ,
             A5      => ntB5                                 ,
             CIN     => ntCYA                                ,
             COUT    => ntCYB                                ,
             L5      => ntL5B                                ,
             L6      => ntL6B

       );

       device LUT6 FYC
       parameter map
       (
             CP_INIT         => CP_INITC       ,
             CP_MODE         => CP_MODEC
       )
       port map
       (
             A0      => ntC0                                 ,
             A1      => ntC1                                 ,
             A2      => ntC2                                 ,
             A3      => ntC3                                 ,
             A4      => ntC4                                 ,
             A5      => ntC5                                 ,
             CIN     => ntCYB                                ,
             COUT    => ntCYC                                ,
             L5      => ntL5C                                ,
             L6      => ntL6C

       );


       device LUT6 FYD
       parameter map
       (
             CP_INIT         => CP_INITD       ,
             CP_MODE         => CP_MODED
       )
       port map
       (
             A0      => ntD0                                 ,
             A1      => ntD1                                 ,
             A2      => ntD2                                 ,
             A3      => ntD3                                 ,
             A4      => ntD4                                 ,
             A5      => ntD5                                 ,
             CIN     => ntCYC                                ,
             COUT    => ntCYD                                ,
             L5      => ntL5D                                ,
             L6      => ntL6D

       );


//***************************************************************common: L7AB L8  L7CD************************************
//Wide MUX Function
      device MUX2 L7ABMUX
      port map
      (
          DOUT  =>  ntL7AB  ,
          SEL   =>  ntM0    ,
          DI1   =>  ntL6B   ,
          DI0   =>  ntL6A
      );
      device MUX2 L7CDMUX
      port map
      (
          DOUT  =>  ntL7CD   ,
          SEL   =>  ntM1     ,
          DI1   =>  ntL6D    ,
          DI0   =>  ntL6C
      );
      device MUX2 L8MUX
      port map
      (
          DOUT  =>   ntL8    ,
          SEL   =>   ntM2    ,
          DI1   =>   ntL7CD  ,
          DI0   =>   ntL7AB
      );

//***************************************************************common: CLK CE  RS ************************************
//Ctrl Polarity Mux
      device CLK_POLMUX CLKPOLMUX
      parameter map
      (
           CP_CLK_POL   =>   CP_CLK_POL
      )
      port map
      (    Y            =>   ntCLKR,
           DIN1         =>   ntCLK,
           DIN0         =>   ntCLK
      );
      device LCE_POLMUX LCEPOLMUX
      parameter map
      (
          CP_LCE_EN    =>    CP_LCE_EN,
          CP_LCE_POL   =>    CP_LCE_POL
      )
      port map
      (
          Y           =>     ntCE_P,
          DIN2        =>     1'b1,
          DIN1        =>     ntCE,
          DIN0        =>     ntCE
      );
      device LRS_POLMUX LRSPOLMUX
      parameter map
      (
          CP_LRS_EN    =>    CP_LRS_EN,
          CP_LRS_POL   =>    CP_LRS_POL
      )
      port map
      (
          Y            =>    ntRS_P,
          DIN2         =>    1'b0,
          DIN1         =>    ntRS,
          DIN0         =>    ntRS
      );

//***************************************************************common: CECI  RSCI ************************************
//Chain selector Mux
      device  MUX2_P  CEMUX
      parameter map
      (
          SEL      =>     CP_CEMUX_SEL
      )
      port map
      (
          DOUT     =>     ntCECO,
          DI0      =>     ntCECI,
          DI1      =>     ntCE_P
      );
      device  MUX2_P  RSMUX
      parameter map
      (
          SEL      =>     CP_RSMUX_SEL
      )
      port map
      (
          DOUT     =>     ntRSCO,
          DI0      =>     ntRSCI,
          DI1      =>     ntRS_P
      );


//*************************************************************D**********************************************************
//
    device CRPREMUX CR3PREMUX
    parameter map
    (
        CP_CRPREMUX_SEL     =>    CP_CR3PREMUX_SEL
    )
    port map
    (
        YX                  =>    ntL5D,
        CYX                 =>    ntCYD,
        MX                  =>    ntM3,
        MF                  =>    1'b1,
        Q                   =>    ntQC3
    );

//connect FFAPP
    device FFAPPMUX FFAPP3MUX
    parameter map
    (
         CP_FFAPPMUX_SEL     =>    CP_FFAPP3MUX_SEL
    )
    port map
    (
         YX                  =>    ntL5D,
         CYX                 =>    ntCYD,
         MX                  =>    ntM3,
         SRQ                 =>    ntQ3,
         Q                   =>    ntQD3_APP
    );



//FFAPP
    device APPFF FFAPP3
    parameter map
    (
        CP_RS_MODE           =>    CP_RS_MODE,
        CP_GRS_EN            =>    CP_GRS_EN,
        CP_FFAPP_RS          =>    CP_FFAPP3_RS,
        CP_FFAPP_INIT        =>    CP_FFAPP3_INIT
    )
    port map
    (
        Q                    =>    ntQP3,
        D                    =>    ntQD3_APP,
        CE                   =>    ntCECO,
        CLK                  =>    ntCLKR,
        RS                   =>    ntRSCO

    );

//
   device CRPOSTMUX CR3POSTMUX
   parameter map
   (
       CP_CRPOSTMUX_SEL     =>    CP_CR3POSTMUX_SEL
   )
   port map
   (
       QPX                  =>    ntQP3,
       CX                   =>    ntQC3,
       Q                    =>    ntCR3
   );

//direct connect Y or FF
//QMUX_SEL
     device QMUX  Q3MUX
     parameter map
     (
          CP_QMUX_SEL     =>    CP_Q3MUX_SEL
     )
     port map
     (
          Q        =>     ntQD3,
          YX       =>     ntL6D,
          MF       =>     1'b1,
          SRQ      =>     ntCR2,
          MX       =>     ntM3
     );

//FF
   device MAINFF FF3
    parameter map
    (
        CP_RS_MODE           =>    CP_RS_MODE,
        CP_GRS_EN            =>    CP_GRS_EN,
        CP_FF_RS             =>    CP_FF3_RS,
        CP_FF_INIT           =>    CP_FF3_INIT,
        CP_LATCH_EN          =>    CP_LATCH_EN
    )
    port map
    (
        Q                    =>    ntQ3,
        D                    =>    ntQD3,
        CE                   =>    ntCECO,
        CLK                  =>    ntCLKR,
        RS                   =>    ntRSCO

    );

//*************************************************************C**********************************************************
//
    device CRPREMUX CR2PREMUX
    parameter map
    (
         CP_CRPREMUX_SEL     =>    CP_CR2PREMUX_SEL
    )
    port map
    (
         YX                  =>    ntL5C,
         CYX                 =>    ntCYC,
         MX                  =>    ntM2,
         MF                  =>    ntL7CD,
         Q                   =>    ntQC2
    );

//connect FFAPP
    device FFAPPMUX FFAPP2MUX
    parameter map
    (
         CP_FFAPPMUX_SEL     =>    CP_FFAPP2MUX_SEL
    )
    port map
    (
         YX                  =>    ntL5C,
         CYX                 =>    ntCYC,
         MX                  =>    ntM2,
         SRQ                 =>    ntQ2,
         Q                   =>    ntQD2_APP
    );

    //FFAPP
    device APPFF FFAPP2
    parameter map
    (
        CP_RS_MODE           =>    CP_RS_MODE,
        CP_GRS_EN            =>    CP_GRS_EN,
        CP_FFAPP_RS          =>    CP_FFAPP2_RS,
        CP_FFAPP_INIT        =>    CP_FFAPP2_INIT
    )
    port map
    (
        Q                    =>    ntQP2,
        D                    =>    ntQD2_APP,
        CE                   =>    ntCECO,
        CLK                  =>    ntCLKR,
        RS                   =>    ntRSCO
    );

//
   device CRPOSTMUX CR2POSTMUX
   parameter map
   (
       CP_CRPOSTMUX_SEL     =>    CP_CR2POSTMUX_SEL
   )
   port map
   (
       QPX                  =>    ntQP2,
       CX                   =>    ntQC2,
       Q                    =>    ntCR2
   );


   device QMUX  Q2MUX
   parameter map
   (
       CP_QMUX_SEL     =>    CP_Q2MUX_SEL
   )
   port map
   (
       Q        =>     ntQD2,
       YX       =>     ntL6C,
       MF       =>     ntL7CD,
       SRQ      =>     ntCR1,
       MX       =>     ntM2
   );

//FF
   device MAINFF FF2
    parameter map
    (
        CP_RS_MODE           =>    CP_RS_MODE,
        CP_GRS_EN            =>    CP_GRS_EN,
        CP_FF_RS             =>    CP_FF2_RS,
        CP_FF_INIT           =>    CP_FF2_INIT,
        CP_LATCH_EN          =>    CP_LATCH_EN
    )
    port map
    (
        Q                    =>    ntQ2,
        D                    =>    ntQD2,
        CE                   =>    ntCECO,
        CLK                  =>    ntCLKR,
        RS                   =>    ntRSCO
    );



//*************************************************************B**********************************************************

    device CRPREMUX CR1PREMUX
    parameter map
    (
        CP_CRPREMUX_SEL     =>    CP_CR1PREMUX_SEL
    )
    port map
    (
        YX                  =>    ntL5B,
        CYX                 =>    ntCYB,
        MX                  =>    ntM1,
        MF                  =>    ntL8,
        Q                   =>    ntQC1
    );

    device FFAPPMUX FFAPP1MUX
    parameter map
    (
         CP_FFAPPMUX_SEL     =>    CP_FFAPP1MUX_SEL
    )
    port map
    (
         YX                  =>    ntL5B,
         CYX                 =>    ntCYB,
         MX                  =>    ntM1,
         SRQ                 =>    ntQ1,
         Q                   =>    ntQD1_APP
    );


//FFAPP
    device APPFF FFAPP1
    parameter map
    (
        CP_RS_MODE           =>    CP_RS_MODE,
        CP_GRS_EN            =>    CP_GRS_EN,
        CP_FFAPP_RS          =>    CP_FFAPP1_RS,
        CP_FFAPP_INIT        =>    CP_FFAPP1_INIT
    )
    port map
    (
        Q                    =>    ntQP1,
        D                    =>    ntQD1_APP,
        CE                   =>    ntCECO,
        CLK                  =>    ntCLKR,
        RS                   =>    ntRSCO

    );


   device CRPOSTMUX CR1POSTMUX
   parameter map
   (
       CP_CRPOSTMUX_SEL     =>    CP_CR1POSTMUX_SEL
   )
   port map
   (
       QPX                  =>    ntQP1,
       CX                   =>    ntQC1,
       Q                    =>    ntCR1
   );


   device QMUX  Q1MUX
   parameter map
   (
       CP_QMUX_SEL     =>    CP_Q1MUX_SEL
   )
   port map
   (
       Q       =>      ntQD1,
       YX      =>      ntL6B,
       MF      =>      ntL8,
       SRQ     =>      ntCR0,
       MX      =>      ntM1
   );

 //FF
   device MAINFF FF1
    parameter map
    (
        CP_RS_MODE           =>    CP_RS_MODE,
        CP_GRS_EN            =>    CP_GRS_EN,
        CP_FF_RS             =>    CP_FF1_RS,
        CP_FF_INIT           =>    CP_FF1_INIT,
        CP_LATCH_EN          =>    CP_LATCH_EN
    )
    port map
    (
        Q                    =>    ntQ1,
        D                    =>    ntQD1,
        CE                   =>    ntCECO,
        CLK                  =>    ntCLKR,
        RS                   =>    ntRSCO

    );

//*************************************************************A**********************************************************

  //CRPREMUX_SEL
    device CRPREMUX CR0PREMUX
    parameter map
    (
        CP_CRPREMUX_SEL     =>    CP_CR0PREMUX_SEL
    )
    port map
    (
        YX                  =>    ntL5A,
        CYX                 =>    ntCYA,
        MX                  =>    ntM0,
        MF                  =>    ntL7AB,
        Q                   =>    ntQC0
    );


//FFAPPMUX_SEL
    device FFAPPMUX FFAPP0MUX
    parameter map
    (
         CP_FFAPPMUX_SEL     =>    CP_FFAPP0MUX_SEL
    )
    port map
    (
         YX                  =>    ntL5A,
         CYX                 =>    ntCYA,
         MX                  =>    ntM0,
         SRQ                 =>    ntQ0,
         Q                   =>    ntQD0_APP
    );


    //FF_APP
    device APPFF FFAPP0
    parameter map
    (
        CP_RS_MODE           =>    CP_RS_MODE,
        CP_GRS_EN            =>    CP_GRS_EN,
        CP_FFAPP_RS          =>    CP_FFAPP0_RS,
        CP_FFAPP_INIT        =>    CP_FFAPP0_INIT
    )
    port map
    (
        Q                    =>    ntQP0,
        D                    =>    ntQD0_APP,
        CE                   =>    ntCECO,
        CLK                  =>    ntCLKR,
        RS                   =>    ntRSCO

    );

   //CRPOSTMUX_SEl
   device CRPOSTMUX CR0POSTMUX
   parameter map
   (
       CP_CRPOSTMUX_SEL     =>    CP_CR0POSTMUX_SEL
   )
   port map
   (
       QPX                  =>    ntQP0,
       CX                   =>    ntQC0,
       Q                    =>    ntCR0
   );


    device QMUX  Q0MUX
     parameter map
     (
         CP_QMUX_SEL  =>   CP_Q0MUX_SEL
     )
     port map
     (
         Q        =>     ntQD0,
         YX       =>     ntL6A,
         MF       =>     ntL7AB,
         SRQ      =>     ntSRCI,
         MX       =>     ntM0
     );


     //FF
    device MAINFF FF0
    parameter map
    (
        CP_RS_MODE           =>    CP_RS_MODE,
        CP_GRS_EN            =>    CP_GRS_EN,
        CP_FF_RS             =>    CP_FF0_RS,
        CP_FF_INIT           =>    CP_FF0_INIT,
        CP_LATCH_EN          =>    CP_LATCH_EN
    )
    port map
    (
        Q                    =>    ntQ0,
        D                    =>    ntQD0,
        CE                   =>    ntCECO,
        CLK                  =>    ntCLKR,
        RS                   =>    ntRSCO

    );

}; // end of structure netlist of CLMA
//grid device structure netlist end
//grid device configure body started

configuration cfg of CLMA
{

 // assign config body begin
    SC_Q_0[0]    :=    (CP_INITA[0] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[1]    :=    (CP_INITA[1] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[2]    :=    (CP_INITA[2] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[3]    :=    (CP_INITA[3] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[4]    :=    (CP_INITA[4] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[5]    :=    (CP_INITA[5] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[6]    :=    (CP_INITA[6] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[7]    :=    (CP_INITA[7] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[8]    :=    (CP_INITA[8] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[9]    :=    (CP_INITA[9] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[10]   :=    (CP_INITA[10] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[11]   :=    (CP_INITA[11] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[12]   :=    (CP_INITA[12] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[13]   :=    (CP_INITA[13] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[14]   :=    (CP_INITA[14] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[15]   :=    (CP_INITA[15] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[16]   :=    (CP_INITA[16] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[17]   :=    (CP_INITA[17] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[18]   :=    (CP_INITA[18] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[19]   :=    (CP_INITA[19] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[20]   :=    (CP_INITA[20] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[21]   :=    (CP_INITA[21] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[22]   :=    (CP_INITA[22] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[23]   :=    (CP_INITA[23] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[24]   :=    (CP_INITA[24] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[25]   :=    (CP_INITA[25] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[26]   :=    (CP_INITA[26] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[27]   :=    (CP_INITA[27] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[28]   :=    (CP_INITA[28] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[29]   :=    (CP_INITA[29] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[30]   :=    (CP_INITA[30] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[31]   :=    (CP_INITA[31] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[32]   :=    (CP_INITA[32] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[33]   :=    (CP_INITA[33] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[34]   :=    (CP_INITA[34] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[35]   :=    (CP_INITA[35] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[36]   :=    (CP_INITA[36] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[37]   :=    (CP_INITA[37] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[38]   :=    (CP_INITA[38] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[39]   :=    (CP_INITA[39] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[40]   :=    (CP_INITA[40] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[41]   :=    (CP_INITA[41] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[42]   :=    (CP_INITA[42] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[43]   :=    (CP_INITA[43] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[44]   :=    (CP_INITA[44] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[45]   :=    (CP_INITA[45] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[46]   :=    (CP_INITA[46] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[47]   :=    (CP_INITA[47] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[48]   :=    (CP_INITA[48] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[49]   :=    (CP_INITA[49] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[50]   :=    (CP_INITA[50] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[51]   :=    (CP_INITA[51] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[52]   :=    (CP_INITA[52] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[53]   :=    (CP_INITA[53] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[54]   :=    (CP_INITA[54] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[55]   :=    (CP_INITA[55] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[56]   :=    (CP_INITA[56] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[57]   :=    (CP_INITA[57] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[58]   :=    (CP_INITA[58] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[59]   :=    (CP_INITA[59] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[60]   :=    (CP_INITA[60] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[61]   :=    (CP_INITA[61] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[62]   :=    (CP_INITA[62] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[63]   :=    (CP_INITA[63] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[0]    :=    (CP_INITB[0] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[1]    :=    (CP_INITB[1] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[2]    :=    (CP_INITB[2] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[3]    :=    (CP_INITB[3] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[4]    :=    (CP_INITB[4] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[5]    :=    (CP_INITB[5] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[6]    :=    (CP_INITB[6] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[7]    :=    (CP_INITB[7] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[8]    :=    (CP_INITB[8] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[9]    :=    (CP_INITB[9] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[10]   :=    (CP_INITB[10] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[11]   :=    (CP_INITB[11] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[12]   :=    (CP_INITB[12] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[13]   :=    (CP_INITB[13] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[14]   :=    (CP_INITB[14] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[15]   :=    (CP_INITB[15] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[16]   :=    (CP_INITB[16] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[17]   :=    (CP_INITB[17] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[18]   :=    (CP_INITB[18] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[19]   :=    (CP_INITB[19] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[20]   :=    (CP_INITB[20] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[21]   :=    (CP_INITB[21] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[22]   :=    (CP_INITB[22] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[23]   :=    (CP_INITB[23] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[24]   :=    (CP_INITB[24] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[25]   :=    (CP_INITB[25] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[26]   :=    (CP_INITB[26] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[27]   :=    (CP_INITB[27] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[28]   :=    (CP_INITB[28] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[29]   :=    (CP_INITB[29] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[30]   :=    (CP_INITB[30] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[31]   :=    (CP_INITB[31] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[32]   :=    (CP_INITB[32] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[33]   :=    (CP_INITB[33] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[34]   :=    (CP_INITB[34] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[35]   :=    (CP_INITB[35] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[36]   :=    (CP_INITB[36] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[37]   :=    (CP_INITB[37] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[38]   :=    (CP_INITB[38] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[39]   :=    (CP_INITB[39] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[40]   :=    (CP_INITB[40] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[41]   :=    (CP_INITB[41] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[42]   :=    (CP_INITB[42] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[43]   :=    (CP_INITB[43] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[44]   :=    (CP_INITB[44] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[45]   :=    (CP_INITB[45] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[46]   :=    (CP_INITB[46] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[47]   :=    (CP_INITB[47] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[48]   :=    (CP_INITB[48] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[49]   :=    (CP_INITB[49] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[50]   :=    (CP_INITB[50] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[51]   :=    (CP_INITB[51] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[52]   :=    (CP_INITB[52] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[53]   :=    (CP_INITB[53] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[54]   :=    (CP_INITB[54] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[55]   :=    (CP_INITB[55] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[56]   :=    (CP_INITB[56] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[57]   :=    (CP_INITB[57] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[58]   :=    (CP_INITB[58] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[59]   :=    (CP_INITB[59] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[60]   :=    (CP_INITB[60] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[61]   :=    (CP_INITB[61] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[62]   :=    (CP_INITB[62] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[63]   :=    (CP_INITB[63] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[0]    :=    (CP_INITC[0] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[1]    :=    (CP_INITC[1] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[2]    :=    (CP_INITC[2] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[3]    :=    (CP_INITC[3] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[4]    :=    (CP_INITC[4] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[5]    :=    (CP_INITC[5] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[6]    :=    (CP_INITC[6] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[7]    :=    (CP_INITC[7] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[8]    :=    (CP_INITC[8] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[9]    :=    (CP_INITC[9] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[10]   :=    (CP_INITC[10] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[11]   :=    (CP_INITC[11] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[12]   :=    (CP_INITC[12] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[13]   :=    (CP_INITC[13] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[14]   :=    (CP_INITC[14] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[15]   :=    (CP_INITC[15] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[16]   :=    (CP_INITC[16] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[17]   :=    (CP_INITC[17] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[18]   :=    (CP_INITC[18] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[19]   :=    (CP_INITC[19] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[20]   :=    (CP_INITC[20] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[21]   :=    (CP_INITC[21] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[22]   :=    (CP_INITC[22] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[23]   :=    (CP_INITC[23] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[24]   :=    (CP_INITC[24] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[25]   :=    (CP_INITC[25] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[26]   :=    (CP_INITC[26] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[27]   :=    (CP_INITC[27] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[28]   :=    (CP_INITC[28] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[29]   :=    (CP_INITC[29] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[30]   :=    (CP_INITC[30] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[31]   :=    (CP_INITC[31] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[32]   :=    (CP_INITC[32] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[33]   :=    (CP_INITC[33] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[34]   :=    (CP_INITC[34] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[35]   :=    (CP_INITC[35] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[36]   :=    (CP_INITC[36] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[37]   :=    (CP_INITC[37] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[38]   :=    (CP_INITC[38] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[39]   :=    (CP_INITC[39] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[40]   :=    (CP_INITC[40] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[41]   :=    (CP_INITC[41] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[42]   :=    (CP_INITC[42] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[43]   :=    (CP_INITC[43] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[44]   :=    (CP_INITC[44] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[45]   :=    (CP_INITC[45] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[46]   :=    (CP_INITC[46] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[47]   :=    (CP_INITC[47] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[48]   :=    (CP_INITC[48] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[49]   :=    (CP_INITC[49] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[50]   :=    (CP_INITC[50] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[51]   :=    (CP_INITC[51] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[52]   :=    (CP_INITC[52] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[53]   :=    (CP_INITC[53] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[54]   :=    (CP_INITC[54] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[55]   :=    (CP_INITC[55] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[56]   :=    (CP_INITC[56] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[57]   :=    (CP_INITC[57] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[58]   :=    (CP_INITC[58] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[59]   :=    (CP_INITC[59] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[60]   :=    (CP_INITC[60] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[61]   :=    (CP_INITC[61] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[62]   :=    (CP_INITC[62] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[63]   :=    (CP_INITC[63] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[0]    :=    (CP_INITD[0] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[1]    :=    (CP_INITD[1] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[2]    :=    (CP_INITD[2] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[3]    :=    (CP_INITD[3] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[4]    :=    (CP_INITD[4] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[5]    :=    (CP_INITD[5] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[6]    :=    (CP_INITD[6] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[7]    :=    (CP_INITD[7] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[8]    :=    (CP_INITD[8] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[9]    :=    (CP_INITD[9] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[10]   :=    (CP_INITD[10] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[11]   :=    (CP_INITD[11] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[12]   :=    (CP_INITD[12] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[13]   :=    (CP_INITD[13] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[14]   :=    (CP_INITD[14] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[15]   :=    (CP_INITD[15] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[16]   :=    (CP_INITD[16] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[17]   :=    (CP_INITD[17] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[18]   :=    (CP_INITD[18] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[19]   :=    (CP_INITD[19] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[20]   :=    (CP_INITD[20] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[21]   :=    (CP_INITD[21] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[22]   :=    (CP_INITD[22] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[23]   :=    (CP_INITD[23] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[24]   :=    (CP_INITD[24] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[25]   :=    (CP_INITD[25] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[26]   :=    (CP_INITD[26] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[27]   :=    (CP_INITD[27] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[28]   :=    (CP_INITD[28] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[29]   :=    (CP_INITD[29] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[30]   :=    (CP_INITD[30] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[31]   :=    (CP_INITD[31] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[32]   :=    (CP_INITD[32] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[33]   :=    (CP_INITD[33] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[34]   :=    (CP_INITD[34] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[35]   :=    (CP_INITD[35] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[36]   :=    (CP_INITD[36] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[37]   :=    (CP_INITD[37] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[38]   :=    (CP_INITD[38] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[39]   :=    (CP_INITD[39] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[40]   :=    (CP_INITD[40] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[41]   :=    (CP_INITD[41] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[42]   :=    (CP_INITD[42] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[43]   :=    (CP_INITD[43] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[44]   :=    (CP_INITD[44] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[45]   :=    (CP_INITD[45] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[46]   :=    (CP_INITD[46] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[47]   :=    (CP_INITD[47] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[48]   :=    (CP_INITD[48] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[49]   :=    (CP_INITD[49] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[50]   :=    (CP_INITD[50] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[51]   :=    (CP_INITD[51] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[52]   :=    (CP_INITD[52] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[53]   :=    (CP_INITD[53] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[54]   :=    (CP_INITD[54] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[55]   :=    (CP_INITD[55] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[56]   :=    (CP_INITD[56] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[57]   :=    (CP_INITD[57] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[58]   :=    (CP_INITD[58] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[59]   :=    (CP_INITD[59] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[60]   :=    (CP_INITD[60] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[61]   :=    (CP_INITD[61] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[62]   :=    (CP_INITD[62] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[63]   :=    (CP_INITD[63] == 1'b1? 1'b0 : 1'b1);
// assign config body end

//initial config body0 begin
    if (CP_MODEA == "LUT6" ||  CP_MODEA == "ROM" ||  CP_MODEA == "WAND"  ||  CP_MODEA == "COMP" || CP_MODEA == "MUX4"|| CP_MODEA == "RAM" )
    {
        SC_I5CIN[0]  :=  1'b0;
        SC_CARRY[0]  :=  1'b0;
    }
    else if(CP_MODEA == "PRIENC" ||  CP_MODEA == "XOR"  )
    {
        SC_I5CIN[0]  :=  1'b0;
        SC_CARRY[0]  :=  1'b1;
    }
    else if( CP_MODEA == "ARITH" )
    {
        SC_I5CIN[0]  :=  1'b1;
        SC_CARRY[0]  :=  1'b0;
    }
    else if( CP_MODEA == "ARITH1" )
    {
        SC_I5CIN[0]  :=  1'b1;
        SC_CARRY[0]  :=  1'b1;
    }
    else
    {
        SC_I5CIN[0]  :=  1'b0;
        SC_CARRY[0]  :=  1'b0;
        error("MODE(%s) is not support!",CP_MODEA);
    }

//initial config body0 end


//initial config body1 begin
    if (CP_MODEB == "LUT6" ||  CP_MODEB == "ROM" ||  CP_MODEB == "WAND"  ||  CP_MODEB == "COMP" || CP_MODEB == "MUX4" || CP_MODEB == "RAM" )
    {
        SC_I5CIN[1]  :=  1'b0;
        SC_CARRY[1]  :=  1'b0;
    }
    else if(CP_MODEB == "PRIENC" ||  CP_MODEB == "XOR" )
    {
        SC_I5CIN[1]  :=  1'b0;
        SC_CARRY[1]  :=  1'b1;
    }
    else if(CP_MODEB == "ARITH" )
    {
        SC_I5CIN[1]  :=  1'b1;
        SC_CARRY[1]  :=  1'b0;
    }
    else if( CP_MODEB == "ARITH1" )
    {
        SC_I5CIN[1]  :=  1'b1;
        SC_CARRY[1]  :=  1'b1;
    }
    else
    {
        SC_I5CIN[1]  :=  1'b0;
        SC_CARRY[1]  :=  1'b0;
        error("MODE(%s) is not support!",CP_MODEB);
    }

//initial config body1 end


//initial config body2 begin
    if (CP_MODEC == "LUT6" ||  CP_MODEC == "ROM" ||  CP_MODEC == "WAND" ||  CP_MODEC == "COMP" || CP_MODEC == "MUX4" || CP_MODEC == "RAM" )
    {
        SC_I5CIN[2]  :=  1'b0;
        SC_CARRY[2]  :=  1'b0;
    }
    else if(CP_MODEC == "PRIENC" || CP_MODEC == "XOR" )
    {
        SC_I5CIN[2]  :=  1'b0;
        SC_CARRY[2]  :=  1'b1;
    }
    else if(CP_MODEC == "ARITH" )
    {
        SC_I5CIN[2]  :=  1'b1;
        SC_CARRY[2]  :=  1'b0;
    }
    else if( CP_MODEC == "ARITH1" )
    {
        SC_I5CIN[2]  :=  1'b1;
        SC_CARRY[2]  :=  1'b1;
    }
    else
    {
        SC_I5CIN[2]  :=  1'b0;
        SC_CARRY[2]  :=  1'b0;
        error("MODE(%s) is not support!",CP_MODEC);
    }

//initial config body2 end


//initial config body3 begin
    if (CP_MODED == "LUT6" ||  CP_MODED == "ROM" ||  CP_MODED == "WAND" ||  CP_MODED == "COMP" || CP_MODED == "MUX4" || CP_MODED == "RAM" )
    {
        SC_I5CIN[3]  :=  1'b0;
        SC_CARRY[3]  :=  1'b0;
    }
    else if(CP_MODED == "PRIENC" ||  CP_MODED == "XOR" )
    {
        SC_I5CIN[3]  :=  1'b0;
        SC_CARRY[3]  :=  1'b1;
    }
    else if(CP_MODED == "ARITH" )
    {
        SC_I5CIN[3]  :=  1'b1;
        SC_CARRY[3]  :=  1'b0;
    }
    else if( CP_MODED == "ARITH1" )
    {
        SC_I5CIN[3]  :=  1'b1;
        SC_CARRY[3]  :=  1'b1;
    }
    else
    {
        SC_I5CIN[3]  :=  1'b0;
        SC_CARRY[3]  :=  1'b0;
        error("MODE(%s) is not support!",CP_MODED);
    }

//initial config body3 end


//initial config body4 begin
    if (CP_FF0_RS == "SET")
    {
        SC_MAINFF_RSS[0]  :=  1'b0;
    }
    else if(CP_FF0_RS == "RESET")
    {
        SC_MAINFF_RSS[0]  :=  1'b1;
    }
    else
    {
        SC_MAINFF_RSS[0]  :=  1'b0;
        error("FFO RS(%s) is not support!",CP_FF0_RS);
    }

//initial config body4 end


//initial config body5 begin
    if (CP_FF1_RS == "SET")
    {
        SC_MAINFF_RSS[1]  :=  1'b0;
    }
    else if(CP_FF1_RS == "RESET")
    {
        SC_MAINFF_RSS[1]  :=  1'b1;
    }
    else
    {
        SC_MAINFF_RSS[1]  :=  1'b0;
        error("FF1 RS(%s) is not support!",CP_FF1_RS);
    }

//initial config body5 end


//initial config body6 begin
    if (CP_FF2_RS == "SET")
    {
        SC_MAINFF_RSS[2]  :=  1'b0;
    }
    else if(CP_FF2_RS == "RESET")
    {
        SC_MAINFF_RSS[2]  :=  1'b1;
    }
    else
    {
        SC_MAINFF_RSS[2]  :=  1'b0;
        error("FF2 RS(%s) is not support!",CP_FF2_RS);
    }

//initial config body6 end


//initial config body7 begin
    if (CP_FF3_RS == "SET")
    {
        SC_MAINFF_RSS[3]  :=  1'b0;
    }
    else if(CP_FF3_RS == "RESET")
    {
        SC_MAINFF_RSS[3]  :=  1'b1;
    }
    else
    {
        SC_MAINFF_RSS[3]  :=  1'b0;
        error("FF3 RS(%s) is not support!",CP_FF3_RS);
    }

//initial config body7 end


//initial config body8 begin
    if (CP_FFAPP0_RS == "SET")
    {
        SC_APPFF_RSS[0]  :=  1'b0;
    }
    else if(CP_FFAPP0_RS == "RESET")
    {
        SC_APPFF_RSS[0]  :=  1'b1;
    }
    else
    {
        SC_APPFF_RSS[0]  :=  1'b0;
        error("APPFFO RS(%s) is not support!",CP_FFAPP0_RS);
    }

//initial config body8 end


//initial config body9 begin
    if (CP_FFAPP1_RS == "SET")
    {
        SC_APPFF_RSS[1]  :=  1'b0;
    }
    else if(CP_FFAPP1_RS == "RESET")
    {
        SC_APPFF_RSS[1]  :=  1'b1;
    }
    else
    {
        SC_APPFF_RSS[1]  :=  1'b0;
        error("APPFF1 RS(%s) is not support!",CP_FFAPP1_RS);
    }

//initial config body9 end


//initial config body10 begin
    if (CP_FFAPP2_RS == "SET")
    {
        SC_APPFF_RSS[2]  :=  1'b0;
    }
    else if(CP_FFAPP2_RS == "RESET")
    {
        SC_APPFF_RSS[2]  :=  1'b1;
    }
    else
    {
        SC_APPFF_RSS[2]  :=  1'b0;
        error("APPFF2 RS(%s) is not support!",CP_FFAPP2_RS);
    }

//initial config body10 end


//initial config body11 begin
    if (CP_FFAPP3_RS == "SET")
    {
        SC_APPFF_RSS[3]  :=  1'b0;
    }
    else if(CP_FFAPP3_RS == "RESET")
    {
        SC_APPFF_RSS[3]  :=  1'b1;
    }
    else
    {
        SC_APPFF_RSS[3]  :=  1'b0;
        error("APPFF3 RS(%s) is not support!",CP_FFAPP3_RS);
    }

//initial config body11 end


//initial config body12 begin
    if (CP_FF0_INIT == 1'b1)
    {
        SC_MAINFF_INIT[0]  :=  1'b0;
    }
    else if(CP_FF0_INIT == 1'b0)
    {
        SC_MAINFF_INIT[0]  :=  1'b1;
    }
    else
    {
        SC_MAINFF_INIT[0]  :=  1'b0;
        error("FFO INIT(%s) is not support!",CP_FF0_INIT);
    }

//initial config body12 end


//initial config body13 begin
    if (CP_FF1_INIT == 1'b1)
    {
        SC_MAINFF_INIT[1]  :=  1'b0;
    }
    else if(CP_FF1_INIT == 1'b0)
    {
        SC_MAINFF_INIT[1]  :=  1'b1;
    }
    else
    {
        SC_MAINFF_INIT[1]  :=  1'b0;
        error("FF1 INIT(%s) is not support!",CP_FF1_INIT);
    }

//initial config body13 end


//initial config body14 begin
    if (CP_FF2_INIT == 1'b1)
    {
        SC_MAINFF_INIT[2]  :=  1'b0;
    }
    else if(CP_FF2_INIT == 1'b0)
    {
        SC_MAINFF_INIT[2]  :=  1'b1;
    }
    else
    {
        SC_MAINFF_INIT[2]  :=  1'b0;
        error("FF2 INIT(%s) is not support!",CP_FF2_INIT);
    }

//initial config body14 end


//initial config body15 begin
    if (CP_FF3_INIT == 1'b1)
    {
        SC_MAINFF_INIT[3]  :=  1'b0;
    }
    else if(CP_FF3_INIT == 1'b0)
    {
        SC_MAINFF_INIT[3]  :=  1'b1;
    }
    else
    {
        SC_MAINFF_INIT[3]  :=  1'b0;
        error("FF3 INIT(%s) is not support!",CP_FF3_INIT);
    }

//initial config body15 end


//initial config body16 begin
    if (CP_FFAPP0_INIT == 1'b1)
    {
        SC_APPFF_INIT[0]  :=  1'b0;
    }
    else if(CP_FFAPP0_INIT == 1'b0)
    {
        SC_APPFF_INIT[0]  :=  1'b1;
    }
    else
    {
        SC_APPFF_INIT[0]  :=  1'b0;
        error("APPFFO INIT(%s) is not support!",CP_FFAPP0_INIT);
    }

//initial config body16 end


//initial config body17 begin
    if (CP_FFAPP1_INIT == 1'b1)
    {
        SC_APPFF_INIT[1]  :=  1'b0;
    }
    else if(CP_FFAPP1_INIT == 1'b0)
    {
        SC_APPFF_INIT[1]  :=  1'b1;
    }
    else
    {
        SC_APPFF_INIT[1]  :=  1'b0;
        error("APPFF1 INIT(%s) is not support!",CP_FFAPP1_INIT);
    }

//initial config body17 end


//initial config body18 begin
    if (CP_FFAPP2_INIT == 1'b1)
    {
        SC_APPFF_INIT[2]  :=  1'b0;
    }
    else if(CP_FFAPP2_INIT == 1'b0)
    {
        SC_APPFF_INIT[2]  :=  1'b1;
    }
    else
    {
        SC_APPFF_INIT[2]  :=  1'b0;
        error("APPFF2 INIT(%s) is not support!",CP_FFAPP2_INIT);
    }

//initial config body18 end


//initial config body19 begin
    if (CP_FFAPP3_INIT == 1'b1)
    {
        SC_APPFF_INIT[3]  :=  1'b0;
    }
    else if(CP_FFAPP3_INIT == 1'b0)
    {
        SC_APPFF_INIT[3]  :=  1'b1;
    }
    else
    {
        SC_APPFF_INIT[3]  :=  1'b0;
        error("APPFF3 INIT(%s) is not support!",CP_FFAPP3_INIT);
    }

//initial config body19 end


//initial config body20 begin
    if (CP_RS_MODE == "SYNC")
    {
        SC_ASYNC  :=  1'b0;
    }
    else if(CP_RS_MODE == "ASYNC")
    {
        SC_ASYNC  :=  1'b1;
    }
    else
    {
        SC_ASYNC  :=  1'b0;
        error("RS MODE(%s) is not support!",CP_RS_MODE);
    }

//initial config body20 end


//initial config body21 begin
    if (CP_GRS_EN == "TRUE")
    {
        SC_GRS_DIS  :=  1'b0;
    }
    else if(CP_GRS_EN == "FALSE")
    {
        SC_GRS_DIS  :=  1'b1;
    }
    else
    {
        SC_GRS_DIS  :=  1'b0;
        error("GRS EN(%s) is not support!",CP_GRS_EN);
    }

//initial config body21 end


//initial config body22 begin
    if (CP_LRS_POL == "TRUE")
    {
        SC_PIRS  :=  1'b1;
    }
    else if(CP_LRS_POL == "FALSE")
    {
        SC_PIRS  :=  1'b0;
    }
    else
    {
        SC_PIRS  :=  1'b0;
        error("LRS POL(%s) is not support!",CP_LRS_POL);
    }

//initial config body22 end


//initial config body23 begin
    if (CP_LCE_POL == "TRUE")
    {
        SC_PICE  :=  1'b1;
    }
    else if(CP_LCE_POL == "FALSE")
    {
        SC_PICE  :=  1'b0;
    }
    else
    {
        SC_PICE  :=  1'b0;
        error("LCE POL(%s) is not support!",CP_LCE_POL);
    }

//initial config body23 end


//initial config body24 begin
    if (CP_CLK_POL == "TRUE")
    {
        SC_PICLK  :=  1'b1;
    }
    else if(CP_CLK_POL == "FALSE")
    {
        SC_PICLK  :=  1'b0;
    }
    else
    {
        SC_PICLK  :=  1'b0;
        error("CLK POL(%s) is not support!",CP_CLK_POL);
    }

//initial config body24 end


//initial config body25 begin
    if (CP_RSMUX_SEL == "LOCAL")
    {
        SC_RSCHAIN  :=  1'b0;
    }
    else if(CP_RSMUX_SEL == "CHAIN")
    {
        SC_RSCHAIN  :=  1'b1;
    }
    else
    {
        SC_RSCHAIN  :=  1'b0;
        error("RSMUX SEL(%s) is not support!",CP_RSMUX_SEL);
    }

//initial config body25 end


//initial config body26 begin
    if (CP_CEMUX_SEL == "LOCAL")
    {
        SC_CECHAIN  :=  1'b0;
    }
    else if(CP_CEMUX_SEL == "CHAIN")
    {
        SC_CECHAIN  :=  1'b1;
    }
    else
    {
        SC_CECHAIN  :=  1'b0;
        error("CEMUX SEL(%s) is not support!",CP_CEMUX_SEL);
    }

//initial config body26 end


//initial config body27 begin
    if (CP_LRS_EN == "TRUE")
    {
        SC_LRS_EN  :=  1'b1;
    }
    else if(CP_LRS_EN == "FALSE")
    {
        SC_LRS_EN  :=  1'b0;
    }
    else
    {
        SC_LRS_EN  :=  1'b1;
        error("LRS EN(%s) is not support!",CP_LRS_EN);
    }

//initial config body27 end


//initial config body28 begin
    if (CP_LCE_EN == "TRUE")
    {
        SC_LCE_EN  :=  1'b1;
    }
    else if(CP_LCE_EN == "FALSE")
    {
        SC_LCE_EN  :=  1'b0;
    }
    else
    {
        SC_LCE_EN  :=  1'b1;
        error("LCE EN(%s) is not support!",CP_LCE_EN);
    }

//initial config body28 end


//initial config body29 begin
    if (CP_LATCH_EN == "TRUE")
    {
        SC_LATCH  :=  1'b1;
        SC_ASYNC  :=  1'b1;
    }
    else if(CP_LATCH_EN == "FALSE")
    {
        SC_LATCH  :=  1'b0;
    }
    else
    {
        SC_LATCH  :=  1'b0;
        error("LATCH EN(%s) is not support!",CP_LATCH_EN);
    }

//initial config body29 end


//initial config body30 begin
    if (CP_Q0MUX_SEL == "YX")
    {
        SC_MAINFF_SEL0[0]  :=  1'b0;
        SC_MAINFF_SEL1[0]  :=  1'b0;
    }
    else if(CP_Q0MUX_SEL == "MF")
    {
        SC_MAINFF_SEL0[0]  :=  1'b1;
        SC_MAINFF_SEL1[0]  :=  1'b0;
    }
    else if(CP_Q0MUX_SEL == "MX")
    {
        SC_MAINFF_SEL0[0]  :=  1'b0;
        SC_MAINFF_SEL1[0]  :=  1'b1;
    }
    else if(CP_Q0MUX_SEL == "SRQ")
    {
        SC_MAINFF_SEL0[0]  :=  1'b1;
        SC_MAINFF_SEL1[0]  :=  1'b1;
    }
    else
    {
        SC_MAINFF_SEL0[0]  :=  1'b0;
        SC_MAINFF_SEL1[0]  :=  1'b0;
        error("Q0MUX SEL(%s) is not support!",CP_Q0MUX_SEL);
    }

//initial config body30 end


//initial config body31 begin
    if (CP_Q1MUX_SEL == "YX")
    {
        SC_MAINFF_SEL0[1]  :=  1'b0;
        SC_MAINFF_SEL1[1]  :=  1'b0;
    }
    else if(CP_Q1MUX_SEL == "MF")
    {
        SC_MAINFF_SEL0[1]  :=  1'b1;
        SC_MAINFF_SEL1[1]  :=  1'b0;
    }
    else if(CP_Q1MUX_SEL == "MX")
    {
        SC_MAINFF_SEL0[1]  :=  1'b0;
        SC_MAINFF_SEL1[1]  :=  1'b1;
    }
    else if(CP_Q1MUX_SEL == "SRQ")
    {
        SC_MAINFF_SEL0[1]  :=  1'b1;
        SC_MAINFF_SEL1[1]  :=  1'b1;
    }
    else
    {
        SC_MAINFF_SEL0[1]  :=  1'b0;
        SC_MAINFF_SEL1[1]  :=  1'b0;
        error("Q1MUX SEL(%s) is not support!",CP_Q1MUX_SEL);
    }

//initial config body31 end


//initial config body32 begin
    if (CP_Q2MUX_SEL == "YX")
    {
        SC_MAINFF_SEL0[2]  :=  1'b0;
        SC_MAINFF_SEL1[2]  :=  1'b0;
    }
    else if(CP_Q2MUX_SEL == "MF")
    {
        SC_MAINFF_SEL0[2]  :=  1'b1;
        SC_MAINFF_SEL1[2]  :=  1'b0;
    }
    else if(CP_Q2MUX_SEL == "MX")
    {
        SC_MAINFF_SEL0[2]  :=  1'b0;
        SC_MAINFF_SEL1[2]  :=  1'b1;
    }
    else if(CP_Q2MUX_SEL == "SRQ")
    {
        SC_MAINFF_SEL0[2]  :=  1'b1;
        SC_MAINFF_SEL1[2]  :=  1'b1;
    }
    else
    {
        SC_MAINFF_SEL0[2]  :=  1'b0;
        SC_MAINFF_SEL1[2]  :=  1'b0;
        error("Q2MUX SEL(%s) is not support!",CP_Q2MUX_SEL);
    }

//initial config body32 end


//initial config body33 begin
    if (CP_Q3MUX_SEL == "YX")
    {
        SC_MAINFF_SEL0[3]  :=  1'b0;
        SC_MAINFF_SEL1[3]  :=  1'b0;
    }
    else if(CP_Q3MUX_SEL == "MF")
    {
        SC_MAINFF_SEL0[3]  :=  1'b1;
        SC_MAINFF_SEL1[3]  :=  1'b0;
    }
    else if(CP_Q3MUX_SEL == "MX")
    {
        SC_MAINFF_SEL0[3]  :=  1'b0;
        SC_MAINFF_SEL1[3]  :=  1'b1;
    }
    else if(CP_Q3MUX_SEL == "SRQ")
    {
        SC_MAINFF_SEL0[3]  :=  1'b1;
        SC_MAINFF_SEL1[3]  :=  1'b1;
    }
    else
    {
        SC_MAINFF_SEL0[3]  :=  1'b0;
        SC_MAINFF_SEL1[3]  :=  1'b0;
        error("Q3MUX SEL(%s) is not support!",CP_Q3MUX_SEL);
    }

//initial config body33 end


//initial config body34 begin
    if (CP_FFAPP0MUX_SEL == "YX")
    {
        SC_APPFF_SEL0[0]  :=  1'b0;
        SC_APPFF_SEL1[0]  :=  1'b0;
    }
    else if(CP_FFAPP0MUX_SEL == "CYX")
    {
        SC_APPFF_SEL0[0]  :=  1'b1;
        SC_APPFF_SEL1[0]  :=  1'b0;
    }
    else if(CP_FFAPP0MUX_SEL == "MX")
    {
        SC_APPFF_SEL0[0]  :=  1'b0;
        SC_APPFF_SEL1[0]  :=  1'b1;
    }
    else if(CP_FFAPP0MUX_SEL == "SRQ")
    {
        SC_APPFF_SEL0[0]  :=  1'b1;
        SC_APPFF_SEL1[0]  :=  1'b1;
    }
    else
    {
        SC_APPFF_SEL0[0]  :=  1'b0;
        SC_APPFF_SEL1[0]  :=  1'b0;
        error("FFAPP0MUX SEL(%s) is not support!",CP_FFAPP0MUX_SEL);
    }

//initial config body34 end


//initial config body35 begin
    if (CP_FFAPP1MUX_SEL == "YX")
    {
        SC_APPFF_SEL0[1]  :=  1'b0;
        SC_APPFF_SEL1[1]  :=  1'b0;
    }
    else if(CP_FFAPP1MUX_SEL == "CYX")
    {
        SC_APPFF_SEL0[1]  :=  1'b1;
        SC_APPFF_SEL1[1]  :=  1'b0;
    }
    else if(CP_FFAPP1MUX_SEL == "MX")
    {
        SC_APPFF_SEL0[1]  :=  1'b0;
        SC_APPFF_SEL1[1]  :=  1'b1;
    }
    else if(CP_FFAPP1MUX_SEL == "SRQ")
    {
        SC_APPFF_SEL0[1]  :=  1'b1;
        SC_APPFF_SEL1[1]  :=  1'b1;
    }
    else
    {
        SC_APPFF_SEL0[1]  :=  1'b0;
        SC_APPFF_SEL1[1]  :=  1'b0;
        error("FFAPP1MUX SEL(%s) is not support!",CP_FFAPP1MUX_SEL);
    }

//initial config body35 end


//initial config body36 begin
    if (CP_FFAPP2MUX_SEL == "YX")
    {
        SC_APPFF_SEL0[2]  :=  1'b0;
        SC_APPFF_SEL1[2]  :=  1'b0;
    }
    else if(CP_FFAPP2MUX_SEL == "CYX")
    {
        SC_APPFF_SEL0[2]  :=  1'b1;
        SC_APPFF_SEL1[2]  :=  1'b0;
    }
    else if(CP_FFAPP2MUX_SEL == "MX")
    {
        SC_APPFF_SEL0[2]  :=  1'b0;
        SC_APPFF_SEL1[2]  :=  1'b1;
    }
    else if(CP_FFAPP2MUX_SEL == "SRQ")
    {
        SC_APPFF_SEL0[2]  :=  1'b1;
        SC_APPFF_SEL1[2]  :=  1'b1;
    }
    else
    {
        SC_APPFF_SEL0[2]  :=  1'b0;
        SC_APPFF_SEL1[2]  :=  1'b0;
        error("FFAPP2MUX SEL(%s) is not support!",CP_FFAPP2MUX_SEL);
    }

//initial config body36 end


//initial config body37 begin
    if (CP_FFAPP3MUX_SEL == "YX")
    {
        SC_APPFF_SEL0[3]  :=  1'b0;
        SC_APPFF_SEL1[3]  :=  1'b0;
    }
    else if(CP_FFAPP3MUX_SEL == "CYX")
    {
        SC_APPFF_SEL0[3]  :=  1'b1;
        SC_APPFF_SEL1[3]  :=  1'b0;
    }
    else if(CP_FFAPP3MUX_SEL == "MX")
    {
        SC_APPFF_SEL0[3]  :=  1'b0;
        SC_APPFF_SEL1[3]  :=  1'b1;
    }
    else if(CP_FFAPP3MUX_SEL == "SRQ")
    {
        SC_APPFF_SEL0[3]  :=  1'b1;
        SC_APPFF_SEL1[3]  :=  1'b1;
    }
    else
    {
        SC_APPFF_SEL0[3]  :=  1'b0;
        SC_APPFF_SEL1[3]  :=  1'b0;
        error("FFAPP3MUX SEL(%s) is not support!",CP_FFAPP3MUX_SEL);
    }

//initial config body37 end


//initial config body38 begin
    if (CP_CR0PREMUX_SEL == "YX")
    {
        SC_CRPREMUX_SEL0[0]  :=  1'b0;
        SC_CRPREMUX_SEL1[0]  :=  1'b0;
    }
    else if(CP_CR0PREMUX_SEL == "CYX")
    {
        SC_CRPREMUX_SEL0[0]  :=  1'b1;
        SC_CRPREMUX_SEL1[0]  :=  1'b0;
    }
    else if(CP_CR0PREMUX_SEL == "MX")
    {
        SC_CRPREMUX_SEL0[0]  :=  1'b0;
        SC_CRPREMUX_SEL1[0]  :=  1'b1;
    }
    else if(CP_CR0PREMUX_SEL == "MF")
    {
        SC_CRPREMUX_SEL0[0]  :=  1'b1;
        SC_CRPREMUX_SEL1[0]  :=  1'b1;
    }
    else
    {
        SC_CRPREMUX_SEL0[0]  :=  1'b0;
        SC_CRPREMUX_SEL1[0]  :=  1'b0;
        error("CR0PREMUX SEL(%s) is not support!",CP_CR0PREMUX_SEL);
    }

//initial config body38 end


//initial config body39 begin
    if (CP_CR1PREMUX_SEL == "YX")
    {
        SC_CRPREMUX_SEL0[1]  :=  1'b0;
        SC_CRPREMUX_SEL1[1]  :=  1'b0;
    }
    else if(CP_CR1PREMUX_SEL == "CYX")
    {
        SC_CRPREMUX_SEL0[1]  :=  1'b1;
        SC_CRPREMUX_SEL1[1]  :=  1'b0;
    }
    else if(CP_CR1PREMUX_SEL == "MX")
    {
        SC_CRPREMUX_SEL0[1]  :=  1'b0;
        SC_CRPREMUX_SEL1[1]  :=  1'b1;
    }
    else if(CP_CR1PREMUX_SEL == "MF")
    {
        SC_CRPREMUX_SEL0[1]  :=  1'b1;
        SC_CRPREMUX_SEL1[1]  :=  1'b1;
    }
    else
    {
        SC_CRPREMUX_SEL0[1]  :=  1'b0;
        SC_CRPREMUX_SEL1[1]  :=  1'b0;
        error("CR1PREMUX SEL(%s) is not support!",CP_CR1PREMUX_SEL);
    }

//initial config body39 end


//initial config body40 begin
    if (CP_CR2PREMUX_SEL == "YX")
    {
        SC_CRPREMUX_SEL0[2]  :=  1'b0;
        SC_CRPREMUX_SEL1[2]  :=  1'b0;
    }
    else if(CP_CR2PREMUX_SEL == "CYX")
    {
        SC_CRPREMUX_SEL0[2]  :=  1'b1;
        SC_CRPREMUX_SEL1[2]  :=  1'b0;
    }
    else if(CP_CR2PREMUX_SEL == "MX")
    {
        SC_CRPREMUX_SEL0[2]  :=  1'b0;
        SC_CRPREMUX_SEL1[2]  :=  1'b1;
    }
    else if(CP_CR2PREMUX_SEL == "MF")
    {
        SC_CRPREMUX_SEL0[2]  :=  1'b1;
        SC_CRPREMUX_SEL1[2]  :=  1'b1;
    }
    else
    {
        SC_CRPREMUX_SEL0[2]  :=  1'b0;
        SC_CRPREMUX_SEL1[2]  :=  1'b0;
        error("CR2PREMUX SEL(%s) is not support!",CP_CR2PREMUX_SEL);
    }

//initial config body40 end


//initial config body41 begin
    if (CP_CR3PREMUX_SEL == "YX")
    {
        SC_CRPREMUX_SEL0[3]  :=  1'b0;
        SC_CRPREMUX_SEL1[3]  :=  1'b0;
    }
    else if(CP_CR3PREMUX_SEL == "CYX")
    {
        SC_CRPREMUX_SEL0[3]  :=  1'b1;
        SC_CRPREMUX_SEL1[3]  :=  1'b0;
    }
    else if(CP_CR3PREMUX_SEL == "MX")
    {
        SC_CRPREMUX_SEL0[3]  :=  1'b0;
        SC_CRPREMUX_SEL1[3]  :=  1'b1;
    }
    else if(CP_CR3PREMUX_SEL == "MF")
    {
        SC_CRPREMUX_SEL0[3]  :=  1'b1;
        SC_CRPREMUX_SEL1[3]  :=  1'b1;
    }
    else
    {
        SC_CRPREMUX_SEL0[3]  :=  1'b0;
        SC_CRPREMUX_SEL1[3]  :=  1'b0;
        error("CR3PREMUX SEL(%s) is not support!",CP_CR3PREMUX_SEL);
    }

//initial config body41 end


//initial config body42 begin
    if (CP_CR0POSTMUX_SEL == "CX")
    {
        SC_CRPOSTMUX_SEL[0]  :=  1'b0;
    }
    else if(CP_CR0POSTMUX_SEL == "QPX")
    {
        SC_CRPOSTMUX_SEL[0]  :=  1'b1;
    }
    else
    {
        SC_CRPOSTMUX_SEL[0]  :=  1'b0;
        error("CR0POSTMUX SEL(%s) is not support!",CP_CR0POSTMUX_SEL);
    }

//initial config body42 end


//initial config body43 begin
    if (CP_CR1POSTMUX_SEL == "CX")
    {
        SC_CRPOSTMUX_SEL[1]  :=  1'b0;
    }
    else if(CP_CR1POSTMUX_SEL == "QPX")
    {
        SC_CRPOSTMUX_SEL[1]  :=  1'b1;
    }
    else
    {
        SC_CRPOSTMUX_SEL[1]  :=  1'b0;
        error("CR1POSTMUX SEL(%s) is not support!",CP_CR1POSTMUX_SEL);
    }

//initial config body43 end


//initial config body44 begin
    if (CP_CR2POSTMUX_SEL == "CX")
    {
        SC_CRPOSTMUX_SEL[2]  :=  1'b0;
    }
    else if(CP_CR2POSTMUX_SEL == "QPX")
    {
        SC_CRPOSTMUX_SEL[2]  :=  1'b1;
    }
    else
    {
        SC_CRPOSTMUX_SEL[2]  :=  1'b0;
        error("CR2POSTMUX SEL(%s) is not support!",CP_CR2POSTMUX_SEL);
    }

//initial config body44 end


//initial config body45 begin
    if (CP_CR3POSTMUX_SEL == "CX")
    {
        SC_CRPOSTMUX_SEL[3]  :=  1'b0;
    }
    else if(CP_CR3POSTMUX_SEL == "QPX")
    {
        SC_CRPOSTMUX_SEL[3]  :=  1'b1;
    }
    else
    {
        SC_CRPOSTMUX_SEL[3]  :=  1'b0;
        error("CR3POSTMUX SEL(%s) is not support!",CP_CR3POSTMUX_SEL);
    }

//initial config body45 end

};

//grid device configure body end

