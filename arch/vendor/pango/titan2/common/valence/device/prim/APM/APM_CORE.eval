*****************************************************************

  Device    [APM_CORE]

  Author    []

  Abstract  [The Prim Device Of APM]

  Revision History:

********************************************************************************/

prim
device APM_CORE
{
    parameter
    (
        config bit CP_SCSEL = 1'b0,
        config bit CP_ASYNC = 1'b0,
        config bit CP_SIMD = 1'b0,
        config bit CP_POSTADD = 1'b0,
        config bit CP_PREADD = 1'b0,
        config bit CP_XOREG[1:0] = 2'b0,
        config bit CP_XREG[1:0] = 2'b0,
        config bit CP_YREG[1:0] = 2'b0,
        config bit CP_HREG = 1'b0,
        config bit CP_ZREG = 1'b0,
        config bit CP_PREREG = 1'b0,
        config bit CP_MREG = 1'b0,
        config bit CP_PREG = 1'b0,
        config bit CP_MODEYREG = 1'b0,
        config bit CP_MODEZREG = 1'b0,
        config bit CP_INCTRLREG = 1'b0,
        config bit CP_XSEL = 1'b0,
        config bit CP_XBSEL[1:0] = 2'b0,
        config bit CP_PINIT0[47:0] = 48'b0,
        config bit CP_PINIT1[47:0] = 48'b0,
        config bit CP_ROUNDMODE = 1'b0,
        config bit CP_PCISEL = 1'b0,
        config bit CP_POREG = 1'b0,
        config bit CP_ACCLOW = 1'b0,
        config bit CP_XSE[13:0] = 14'b0,
        config bit CP_HSE[10:0] = 11'b0,
        config bit CP_YSE[7:0] = 8'b0,
        config bit CP_ZSE[22:0] = 23'b0,
        config bit CP_YCONST[17:0] = 18'b0,
        config bit CP_MODEYCONST[2:0] = 3'b0,
        config bit CP_MODEZCONST[3:0] = 4'b0,
        config bit CP_INCTRLCONST[4:0] = 5'b0,
        config bit CP_YDYNSEL = 1'b0,
        config bit CP_MODEYDYNSEL[2:0] = 3'b0,
        config bit CP_MODEZDYNSEL[3:0] = 4'b0,
        config bit CP_INCTRLDYNSEL[4:0] = 5'b0,
        config bit CP_GRS_DIS = 1'b0,
        config bit CP_OR2CASECADE_EN = 1'b0,
        config bit CP_OR2CORE_EN[1:0] = 2'b0,
        config bit CP_IRX_SHFEN = 1'b0,
        config bit CP_IRZ_SHFEN = 1'b0,
        config bit CP_MULT_EN[1:0] = 2'b0,
        config bit CP_APM_EN = 1'b0
    );
    port
    (
        input X[29:0],
        input XBI[24:0],
        output XBO[24:0],
        input H[24:0],
        input Y[17:0],
        input Z[47:0],
        output P[47:0],
        output PO[47:0],
        input PI[47:0],
        output XO[29:0],
        input XI[29:0],
        input MODEY[2:0],
        input MODEZ[3:0],
        input INCTRL[4:0],
        output PCO,
        input PCI,
        input TEST_MODE_N,
        input TEST_SE1_N,
        input TEST_RST1_N,
        input CLK,
        input RST_X,
        input CE_X1,
        input CE_X2,
        input CE_X3,
        input RST_H,
        input CE_H,
        input RST_Y,
        input CE_Y1,
        input CE_Y2,
        input RST_Z,
        input CE_Z,
        input RST_PRE,
        input CE_PRE,
        input RST_M,
        input CE_M,
        input RST_P,
        input CE_P,
        input RST_MODEY,
        input CE_MODEY,
        input RST_MODEZ,
        input CE_MODEZ,
        input RST_INCTRL,
        input CE_INCTRL,        
        input TEST_CLK,
        input TEST_SE0_N,
        input TEST_RST0_N,
        input TEST_SI0,
        input TEST_SI1,
        output TEST_SO0,
        output TEST_SO1
    );

}

timing amp_core_tnl of APM_CORE
{
    if (CP_APM_EN == 1'b1 && CP_MULT_EN == 2'b11)
    {
        operator V_APM_E2 APM
        parameter map
        (
            GRS_EN        =>  (CP_GRS_DIS   == 1'b0 ) ?   "TRUE" : "FALSE",
            ASYNC_RST     =>  (CP_ASYNC     == 1'b0 ) ?   0 : 1,
            X_REG         =>  (CP_XREG      == 2'b00) ?   0 :
                              (CP_XREG      == 2'b01) ?   1 :
                              (CP_XREG      == 2'b10) ?   2 :
                            /*(CP_XREG      == 2'b11) ?*/ 3 ,
            XB_REG        =>  (CP_HREG      == 1'b0 ) ?   0 : 1,
            Y_REG         =>  (CP_YREG      == 2'b00) ?   0 :
                              (CP_YREG      == 2'b01) ?   1 :
                              (CP_YREG      == 2'b10) ?   2 :
                            /*(CP_YREG      == 2'b11) ?*/ 3 ,
            Z_REG         =>  (CP_ZREG      == 1'b0 ) ?   0 : 1,
            P_REG         =>  (CP_PREG      == 1'b0 ) ?   0 : 1,
            CXO_REG       =>  (CP_XOREG     == 2'b00) ?   0 :
                              (CP_XOREG     == 2'b01) ?   1 :
                              (CP_XOREG     == 2'b10) ?   2 :
                            /*(CP_XOREG     == 2'b11) ?*/ 3 ,
            CPO_REG       =>  (CP_POREG     == 1'b0 ) ?   0 : 1,
            MULT_REG      =>  (CP_MREG      == 1'b0 ) ?   0 : 1,
            PREADD_REG    =>  (CP_PREREG    == 1'b0 ) ?   0 : 1,
            MODEIN_REG    =>  (CP_INCTRLREG == 1'b0 ) ?   0 : 1,
            MODEY_REG     =>  (CP_MODEYREG  == 1'b0 ) ?   0 : 1,
            MODEZ_REG     =>  (CP_MODEZREG  == 1'b0 ) ?   0 : 1,
            X_SEL         =>  (CP_XSEL      == 1'b0 ) ?   0 : 1,
            XB_SEL        =>  (CP_XBSEL     == 2'b00) ?   0 :
                              (CP_XBSEL     == 2'b01) ?   1 :
                              (CP_XBSEL     == 2'b10) ?   2 :
                            /*(CP_XBSEL     == 2'b11) ?*/ 3 ,
            CIN_SEL       =>  (CP_PCISEL    == 1'b0 ) ?   0 : 1,
            ROUNDMODE_SEL =>  (CP_ROUNDMODE == 1'b0 ) ?   0 : 1,
            USE_SIMD      =>  (CP_SIMD      == 1'b0 ) ?   0 : 1,
            USE_ACCLOW    =>  (CP_ACCLOW    == 1'b0 ) ?   0 : 1,
            USE_PREADD    =>  (CP_PREADD    == 1'b0 ) ?   0 : 1,
            USE_POSTADD   =>  (CP_POSTADD   == 1'b0 ) ?   0 : 1,
            P_INIT0       =>   CP_PINIT0,
            P_INIT1       =>   CP_PINIT1
        )
        port map
        (
            COUT      =>     PCO,
            CPO       =>     PO,
            CXO       =>     XO,
            CXBO      =>     XBO,
            P         =>     P,
            CIN       =>     PCI,
            CPI       =>     PI,
            CXI       =>     XI,
            CXBI      =>     XBI,
            X[29]     =>     X[29],
            X[28]     => (CP_XSE[13] == 1'b1) ? X[29] : X[28],
            X[27]     => (CP_XSE[12] == 1'b1) ? X[29] : X[27],
            X[26]     => (CP_XSE[11] == 1'b1) ? X[29] : X[26],
            X[25]     => (CP_XSE[10] == 1'b1) ? X[29] : X[25],
            X[24]     => (CP_XSE[9]  == 1'b1) ? X[29] : X[24],
            X[23]     => (CP_XSE[8]  == 1'b1) ? X[29] : X[23],
            X[22]     => (CP_XSE[7]  == 1'b1) ? X[29] : X[22],
            X[21]     => (CP_XSE[6]  == 1'b1) ? X[29] : X[21],
            X[20]     => (CP_XSE[5]  == 1'b1) ? X[29] : X[20],
            X[19]     => (CP_XSE[4]  == 1'b1) ? X[29] : X[19],
            X[18]     => (CP_XSE[3]  == 1'b1) ? X[29] : X[18],
            X[17]     => (CP_XSE[2]  == 1'b1) ? X[29] : X[17],
            X[16]     => (CP_XSE[1]  == 1'b1) ? X[29] : X[16],
            X[15]     => (CP_XSE[0]  == 1'b1) ? X[29] : X[15],
            X[14:0]   =>     X[14:0],
            XB[24]    =>     H[24],
            XB[23]    => (CP_HSE[10] == 1'b1) ? H[24] : H[23],
            XB[22]    => (CP_HSE[9]  == 1'b1) ? H[24] : H[22],
            XB[21]    => (CP_HSE[8]  == 1'b1) ? H[24] : H[21],
            XB[20]    => (CP_HSE[7]  == 1'b1) ? H[24] : H[20],
            XB[19]    => (CP_HSE[6]  == 1'b1) ? H[24] : H[19],
            XB[18]    => (CP_HSE[5]  == 1'b1) ? H[24] : H[18],
            XB[17]    => (CP_HSE[4]  == 1'b1) ? H[24] : H[17],
            XB[16]    => (CP_HSE[3]  == 1'b1) ? H[24] : H[16],
            XB[15]    => (CP_HSE[2]  == 1'b1) ? H[24] : H[15],
            XB[14]    => (CP_HSE[1]  == 1'b1) ? H[24] : H[14],
            XB[13]    => (CP_HSE[1]  == 1'b1) ? H[24] : H[13],
            XB[12:0]  =>     H[12:0],
            Y[17]     => (CP_YDYNSEL == 1'b0) ? ((CP_YCONST[17] == 1'b1) ? 1'b1 : 1'b0) : Y[17],
            Y[16]     => (CP_YDYNSEL == 1'b0) ? ((CP_YCONST[16] == 1'b1) ? 1'b1 : 1'b0) : (CP_YSE[7] == 1'b1) ? Y[17] : Y[16],
            Y[15]     => (CP_YDYNSEL == 1'b0) ? ((CP_YCONST[15] == 1'b1) ? 1'b1 : 1'b0) : (CP_YSE[6] == 1'b1) ? Y[17] : Y[15],
            Y[14]     => (CP_YDYNSEL == 1'b0) ? ((CP_YCONST[14] == 1'b1) ? 1'b1 : 1'b0) : (CP_YSE[5] == 1'b1) ? Y[17] : Y[14],
            Y[13]     => (CP_YDYNSEL == 1'b0) ? ((CP_YCONST[13] == 1'b1) ? 1'b1 : 1'b0) : (CP_YSE[4] == 1'b1) ? Y[17] : Y[13],
            Y[12]     => (CP_YDYNSEL == 1'b0) ? ((CP_YCONST[12] == 1'b1) ? 1'b1 : 1'b0) : (CP_YSE[3] == 1'b1) ? Y[17] : Y[12],
            Y[11]     => (CP_YDYNSEL == 1'b0) ? ((CP_YCONST[11] == 1'b1) ? 1'b1 : 1'b0) : (CP_YSE[2] == 1'b1) ? Y[17] : Y[11],
            Y[10]     => (CP_YDYNSEL == 1'b0) ? ((CP_YCONST[10] == 1'b1) ? 1'b1 : 1'b0) : (CP_YSE[1] == 1'b1) ? Y[17] : Y[10],
            Y[9]      => (CP_YDYNSEL == 1'b0) ? ((CP_YCONST[9] == 1'b1) ? 1'b1 : 1'b0) : (CP_YSE[0] == 1'b1) ? Y[17] : Y[9],
            Y[8]      => (CP_YDYNSEL == 1'b0) ? ((CP_YCONST[8] == 1'b1) ? 1'b1 : 1'b0) : Y[8],
            Y[7]      => (CP_YDYNSEL == 1'b0) ? ((CP_YCONST[7] == 1'b1) ? 1'b1 : 1'b0) : Y[7],
            Y[6]      => (CP_YDYNSEL == 1'b0) ? ((CP_YCONST[6] == 1'b1) ? 1'b1 : 1'b0) : Y[6],
            Y[5]      => (CP_YDYNSEL == 1'b0) ? ((CP_YCONST[5] == 1'b1) ? 1'b1 : 1'b0) : Y[5],
            Y[4]      => (CP_YDYNSEL == 1'b0) ? ((CP_YCONST[4] == 1'b1) ? 1'b1 : 1'b0) : Y[4],
            Y[3]      => (CP_YDYNSEL == 1'b0) ? ((CP_YCONST[3] == 1'b1) ? 1'b1 : 1'b0) : Y[3],
            Y[2]      => (CP_YDYNSEL == 1'b0) ? ((CP_YCONST[2] == 1'b1) ? 1'b1 : 1'b0) : Y[2],
            Y[1]      => (CP_YDYNSEL == 1'b0) ? ((CP_YCONST[1] == 1'b1) ? 1'b1 : 1'b0) : Y[1],
            Y[0]      => (CP_YDYNSEL == 1'b0) ? ((CP_YCONST[0] == 1'b1) ? 1'b1 : 1'b0) : Y[0],
          //Y[8:0]    => (CP_YDYNSEL == 1'b0) ? CP_YCONST[8:0] : Y[8:0],
            Z[47]     =>     Z[47],
            Z[46]     => (CP_ZSE[22] == 1'b1) ? Z[47] : Z[46],
            Z[45]     => (CP_ZSE[21] == 1'b1) ? Z[47] : Z[45],
            Z[44]     => (CP_ZSE[20] == 1'b1) ? Z[47] : Z[44],
            Z[43]     => (CP_ZSE[19] == 1'b1) ? Z[47] : Z[43],
            Z[42]     => (CP_ZSE[18] == 1'b1) ? Z[47] : Z[42],
            Z[41]     => (CP_ZSE[17] == 1'b1) ? Z[47] : Z[41],
            Z[40]     => (CP_ZSE[16] == 1'b1) ? Z[47] : Z[40],
            Z[39]     => (CP_ZSE[15] == 1'b1) ? Z[47] : Z[39],
            Z[38]     => (CP_ZSE[14] == 1'b1) ? Z[47] : Z[38],
            Z[37]     => (CP_ZSE[13] == 1'b1) ? Z[47] : Z[37],
            Z[36]     => (CP_ZSE[12] == 1'b1) ? Z[47] : Z[36],
            Z[35]     => (CP_ZSE[11] == 1'b1) ? Z[47] : Z[35],
            Z[34]     => (CP_ZSE[10] == 1'b1) ? Z[47] : Z[34],
            Z[33]     => (CP_ZSE[9]  == 1'b1) ? Z[47] : Z[33],
            Z[32]     => (CP_ZSE[8]  == 1'b1) ? Z[47] : Z[32],
            Z[31]     => (CP_ZSE[7]  == 1'b1) ? Z[47] : Z[31],
            Z[30]     => (CP_ZSE[6]  == 1'b1) ? Z[47] : Z[30],
            Z[29]     => (CP_ZSE[5]  == 1'b1) ? Z[47] : Z[29],
            Z[28]     => (CP_ZSE[4]  == 1'b1) ? Z[47] : Z[28],
            Z[27]     => (CP_ZSE[3]  == 1'b1) ? Z[47] : Z[27],
            Z[26]     => (CP_ZSE[2]  == 1'b1) ? Z[47] : Z[26],
            Z[25]     => (CP_ZSE[1]  == 1'b1) ? Z[47] : Z[25],
            Z[24]     => (CP_ZSE[0]  == 1'b1) ? Z[47] : Z[24],
            Z[23:0]   =>     Z[23:0],
            MODEIN[4] => (CP_INCTRLDYNSEL[4] == 1'b1) ? INCTRL[4] : (CP_INCTRLCONST[4] == 1'b1) ? 1'b1 : 1'b0,
            MODEIN[3] => (CP_INCTRLDYNSEL[3] == 1'b1) ? INCTRL[3] : (CP_INCTRLCONST[3] == 1'b1) ? 1'b1 : 1'b0,
            MODEIN[2] => (CP_INCTRLDYNSEL[2] == 1'b1) ? INCTRL[2] : (CP_INCTRLCONST[2] == 1'b1) ? 1'b1 : 1'b0,
            MODEIN[1] => (CP_INCTRLDYNSEL[1] == 1'b1) ? INCTRL[1] : (CP_INCTRLCONST[1] == 1'b1) ? 1'b1 : 1'b0,
            MODEIN[0] => (CP_INCTRLDYNSEL[0] == 1'b1) ? INCTRL[0] : (CP_INCTRLCONST[0] == 1'b1) ? 1'b1 : 1'b0,
            MODEY[2]  => (CP_MODEYDYNSEL[2] == 1'b1) ? MODEY[2] : (CP_MODEYCONST[2] == 1'b1) ? 1'b1 : 1'b0,
            MODEY[1]  => (CP_MODEYDYNSEL[1] == 1'b1) ? MODEY[1] : (CP_MODEYCONST[1] == 1'b1) ? 1'b1 : 1'b0,
            MODEY[0]  => (CP_MODEYDYNSEL[0] == 1'b1) ? MODEY[0] : (CP_MODEYCONST[0] == 1'b1) ? 1'b1 : 1'b0,
            MODEZ[3]  => (CP_MODEZDYNSEL[3] == 1'b1) ? MODEZ[3] : (CP_MODEZCONST[3] == 1'b1) ? 1'b1 : 1'b0,
            MODEZ[2]  => (CP_MODEZDYNSEL[2] == 1'b1) ? MODEZ[2] : (CP_MODEZCONST[2] == 1'b1) ? 1'b1 : 1'b0,
            MODEZ[1]  => (CP_MODEZDYNSEL[1] == 1'b1) ? MODEZ[1] : (CP_MODEZCONST[1] == 1'b1) ? 1'b1 : 1'b0,
            MODEZ[0]  => (CP_MODEZDYNSEL[0] == 1'b1) ? MODEZ[0] : (CP_MODEZCONST[0] == 1'b1) ? 1'b1 : 1'b0,
            CLK       =>     CLK,
            CEX1      =>     CE_X1,
            CEX2      =>     CE_X2,
            CEX3      =>     CE_X3,
            CEXB      =>     CE_H,
            CEY1      =>     CE_Y1,
            CEY2      =>     CE_Y2,
            CEZ       =>     CE_Z,
            CEM       =>     CE_M,
            CEP       =>     CE_P,
            CEPRE     =>     CE_PRE,
            CEMODEIN  =>     CE_INCTRL,
            CEMODEY   =>     CE_MODEY,
            CEMODEZ   =>     CE_MODEZ,
            RSTX      =>     RST_X,
            RSTXB     =>     RST_H,
            RSTY      =>     RST_Y,
            RSTZ      =>     RST_Z,
            RSTM      =>     RST_M,
            RSTP      =>     RST_P,
            RSTPRE    =>     RST_PRE,
            RSTMODEIN =>     RST_INCTRL,
            RSTMODEY  =>     RST_MODEY,
            RSTMODEZ  =>     RST_MODEZ
        );
    }
};
