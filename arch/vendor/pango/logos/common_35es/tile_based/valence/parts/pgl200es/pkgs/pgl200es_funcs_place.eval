use pgl_defs,pgl200es_defs,pgl_RCKB_SRB_inc,pgl_SOC_SRB_inc;
use pgl_IOB_SRB_inc,pgl_IOB_HALF_SRB_inc ;
use pgl_CLMA_SRB_inc,pgl_CLMS_SRB_inc,pgl_DRM_SRB_inc,pgl_APM_SRB_inc,pgl_IOL_SRB_inc,pgl_PLL_B_SRB_inc,pgl_PLL_T_SRB_inc;
use pgl_CCS_SRB_inc,pgl_HSST_SRB_inc,pgl_DQSL_SRB_inc;
use pgl_IOCKGATEDLL_SRB_inc,pgl_IOCKGATEDLL_HALF_SRB_inc;
use pgl_USCM_SRB_inc;
use pgl_IBM_SRB_inc,pgl_TIEHI_SRB_inc,pgl_CGRA_SRB_inc;

package pgl200es_funcs_place
{

/********************************************************************************/
/********************************************************************************/
function place_srb_tile(unsigned int tx,ty)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;

   //DOUBLE
    sprintf(strVar,"ntZDE_%d_%d",sx,sy);
    &wire ntRef_ntZDE[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;    

    sprintf(strVar,"ntLH1_%d_%d",sx,sy);
    &wire ntRef_ntLH1 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntLV1_%d_%d",sx,sy);
    &wire ntRef_ntLV1 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
    
    sprintf(strVar,"ntZDN_%d_%d",sx,sy);
    &wire ntRef_ntZDN[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;    
 
    sprintf(strVar,"ntZDW_%d_%d",sx,sy);
    &wire ntRef_ntZDW[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZDS_%d_%d",sx,sy);
    &wire ntRef_ntZDS[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    //QUAD
    sprintf(strVar,"ntZQE_%d_%d",sx,sy);
    &wire ntRef_ntZQE[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
    
    sprintf(strVar,"ntZQN_%d_%d",sx,sy);
    &wire ntRef_ntZQN[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
 
    sprintf(strVar,"ntZQW_%d_%d",sx,sy);
    &wire ntRef_ntZQW[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZQS_%d_%d",sx,sy);
    &wire ntRef_ntZQS[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
    
     //SINGLE
    sprintf(strVar,"ntZSE_%d_%d",sx,sy);
    &wire ntRef_ntZSE[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
    
    sprintf(strVar,"ntZSN_%d_%d",sx,sy);
    &wire ntRef_ntZSN[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
 
    sprintf(strVar,"ntZSW_%d_%d",sx,sy);
    &wire ntRef_ntZSW[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSS_%d_%d",sx,sy);
    &wire ntRef_ntZSS[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    //DIAGONAL
    sprintf(strVar,"ntZSNE_%d_%d",sx,sy);
    &wire ntRef_ntZSNE[5:0] = wire *strVar[5:0]        /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
    
    sprintf(strVar,"ntZSSW_%d_%d",sx,sy);
    &wire ntRef_ntZSSW[5:0] = wire *strVar[5:0]        /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/; 
 
    sprintf(strVar,"ntZSNW_%d_%d",sx,sy);
    &wire ntRef_ntZSNW[5:0] = wire *strVar[5:0]        /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSSE_%d_%d",sx,sy);
    &wire ntRef_ntZSSE[5:0] = wire *strVar[5:0]        /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    //TO CLMS&CLMA 
    sprintf(strVar,"ntA_A0_%d_%d",sx,sy);
    &wire ntRef_ntA_A0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_A1_%d_%d",sx,sy);
    &wire ntRef_ntA_A1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntA_A2_%d_%d",sx,sy);
    &wire ntRef_ntA_A2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_A3_%d_%d",sx,sy);
    &wire ntRef_ntA_A3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_A4_%d_%d",sx,sy);
    &wire ntRef_ntA_A4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_B0_%d_%d",sx,sy);
    &wire ntRef_ntA_B0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_B1_%d_%d",sx,sy);
    &wire ntRef_ntA_B1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntA_B2_%d_%d",sx,sy);
    &wire ntRef_ntA_B2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntA_B3_%d_%d",sx,sy);
    &wire ntRef_ntA_B3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_B4_%d_%d",sx,sy);
    &wire ntRef_ntA_B4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_C0_%d_%d",sx,sy);
    &wire ntRef_ntA_C0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_C1_%d_%d",sx,sy);
    &wire ntRef_ntA_C1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntA_C2_%d_%d",sx,sy);
    &wire ntRef_ntA_C2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_C3_%d_%d",sx,sy);
    &wire ntRef_ntA_C3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_C4_%d_%d",sx,sy);
    &wire ntRef_ntA_C4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_D0_%d_%d",sx,sy);
    &wire ntRef_ntA_D0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_D1_%d_%d",sx,sy);
    &wire ntRef_ntA_D1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntA_D2_%d_%d",sx,sy);
    &wire ntRef_ntA_D2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_D3_%d_%d",sx,sy);
    &wire ntRef_ntA_D3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_D4_%d_%d",sx,sy);
    &wire ntRef_ntA_D4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_A0_%d_%d",sx,sy);
    &wire ntRef_ntS_A0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_A1_%d_%d",sx,sy);
    &wire ntRef_ntS_A1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntS_A2_%d_%d",sx,sy);
    &wire ntRef_ntS_A2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_A3_%d_%d",sx,sy);
    &wire ntRef_ntS_A3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_A4_%d_%d",sx,sy);
    &wire ntRef_ntS_A4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_B0_%d_%d",sx,sy);
    &wire ntRef_ntS_B0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_B1_%d_%d",sx,sy);
    &wire ntRef_ntS_B1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntS_B2_%d_%d",sx,sy);
    &wire ntRef_ntS_B2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_B3_%d_%d",sx,sy);
    &wire ntRef_ntS_B3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_B4_%d_%d",sx,sy);
    &wire ntRef_ntS_B4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_C0_%d_%d",sx,sy);
    &wire ntRef_ntS_C0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_C1_%d_%d",sx,sy);
    &wire ntRef_ntS_C1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntS_C2_%d_%d",sx,sy);
    &wire ntRef_ntS_C2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_C3_%d_%d",sx,sy);
    &wire ntRef_ntS_C3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_C4_%d_%d",sx,sy);
    &wire ntRef_ntS_C4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_D0_%d_%d",sx,sy);
    &wire ntRef_ntS_D0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_D1_%d_%d",sx,sy);
    &wire ntRef_ntS_D1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntS_D2_%d_%d",sx,sy);
    &wire ntRef_ntS_D2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_D3_%d_%d",sx,sy);
    &wire ntRef_ntS_D3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_D4_%d_%d",sx,sy);
    &wire ntRef_ntS_D4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_M0_%d_%d",sx,sy);           
    &wire ntRef_ntA_M0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_M1_%d_%d",sx,sy);           
    &wire ntRef_ntA_M1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_M2_%d_%d",sx,sy);           
    &wire ntRef_ntA_M2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntA_M3_%d_%d",sx,sy);           
    &wire ntRef_ntA_M3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_M0_%d_%d",sx,sy);           
    &wire ntRef_ntS_M0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_M1_%d_%d",sx,sy);           
    &wire ntRef_ntS_M1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_M2_%d_%d",sx,sy);           
    &wire ntRef_ntS_M2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntS_M3_%d_%d",sx,sy);           
    &wire ntRef_ntS_M3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_RS_%d_%d",sx,sy);           
    &wire ntRef_ntA_RS = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_CE_%d_%d",sx,sy);           
    &wire ntRef_ntA_CE = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_RS_%d_%d",sx,sy);           
    &wire ntRef_ntS_RS = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_CE_%d_%d",sx,sy);           
    &wire ntRef_ntS_CE = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_CLK_%d_%d",sx,sy);           
    &wire ntRef_ntA_CLK = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_CLK_%d_%d",sx,sy);           
    &wire ntRef_ntS_CLK = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_AD_%d_%d",sx,sy);           
    &wire ntRef_ntA_AD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_BD_%d_%d",sx,sy);           
    &wire ntRef_ntA_BD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_CD_%d_%d",sx,sy);           
    &wire ntRef_ntA_CD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_DD_%d_%d",sx,sy);           
    &wire ntRef_ntA_DD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_AD_%d_%d",sx,sy);           
    &wire ntRef_ntS_AD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_BD_%d_%d",sx,sy);           
    &wire ntRef_ntS_BD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntS_CD_%d_%d",sx,sy);           
    &wire ntRef_ntS_CD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntS_DD_%d_%d",sx,sy);           
    &wire ntRef_ntS_DD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);           
    &wire ntRef_ntTIEHI = wire *strVar; 

    //SW UNUSED
    
 
    sprintf(strVar, "SRB_TILE_%d_%d", sx, sy);
       device SRB_TILE *strVar
           port map (
                     A_A0  => ntRef_ntA_A0,
                     A_A1  => ntRef_ntA_A1,
                     A_A2  => ntRef_ntA_A2,
                     A_A3  => ntRef_ntA_A3,
                     A_A4  => ntRef_ntA_A4,
                     A_B0  => ntRef_ntA_B0,
                     A_B1  => ntRef_ntA_B1,
                     A_B2  => ntRef_ntA_B2,
                     A_B3  => ntRef_ntA_B3,
                     A_B4  => ntRef_ntA_B4,
                     A_C0  => ntRef_ntA_C0,
                     A_C1  => ntRef_ntA_C1,
                     A_C2  => ntRef_ntA_C2,
                     A_C3  => ntRef_ntA_C3,
                     A_C4  => ntRef_ntA_C4,
                     A_D0  => ntRef_ntA_D0,
                     A_D1  => ntRef_ntA_D1,
                     A_D2  => ntRef_ntA_D2,
                     A_D3  => ntRef_ntA_D3,
                     A_D4  => ntRef_ntA_D4,
                     S_A0  => ntRef_ntS_A0,
                     S_A1  => ntRef_ntS_A1,
                     S_A2  => ntRef_ntS_A2,
                     S_A3  => ntRef_ntS_A3,
                     S_A4  => ntRef_ntS_A4,
                     S_B0  => ntRef_ntS_B0,
                     S_B1  => ntRef_ntS_B1,
                     S_B2  => ntRef_ntS_B2,
                     S_B3  => ntRef_ntS_B3,
                     S_B4  => ntRef_ntS_B4,
                     S_C0  => ntRef_ntS_C0,
                     S_C1  => ntRef_ntS_C1,
                     S_C2  => ntRef_ntS_C2,
                     S_C3  => ntRef_ntS_C3,
                     S_C4  => ntRef_ntS_C4,
                     S_D0  => ntRef_ntS_D0,
                     S_D1  => ntRef_ntS_D1,
                     S_D2  => ntRef_ntS_D2,
                     S_D3  => ntRef_ntS_D3,
                     S_D4  => ntRef_ntS_D4,
                     A_M0  => ntRef_ntA_M0,
                     A_M1  => ntRef_ntA_M1,
                     A_M2  => ntRef_ntA_M2,
                     A_M3  => ntRef_ntA_M3,
                     S_M0  => ntRef_ntS_M0,
                     S_M1  => ntRef_ntS_M1,
                     S_M2  => ntRef_ntS_M2,
                     S_M3  => ntRef_ntS_M3,
                     A_RS  => ntRef_ntA_RS,
                     A_CE  => ntRef_ntA_CE,
                     S_RS  => ntRef_ntS_RS,
                     S_CE  => ntRef_ntS_CE,
                     A_CLK => ntRef_ntA_CLK,
                     S_CLK => ntRef_ntS_CLK,
                     A_AD  => ntRef_ntA_AD,
                     A_BD  => ntRef_ntA_BD,
                     A_CD  => ntRef_ntA_CD,
                     A_DD  => ntRef_ntA_DD,
                     S_AD  => ntRef_ntS_AD,
                     S_BD  => ntRef_ntS_BD,
                     S_CD  => ntRef_ntS_CD,
                     S_DD  => ntRef_ntS_DD,

                     ZSS   => ntRef_ntZSS,
                     ZSN   => ntRef_ntZSN,
                     ZSE   => ntRef_ntZSE,
                     ZSW   => ntRef_ntZSW,
                     ZSNW  => ntRef_ntZSNW,
                     ZSNE  => ntRef_ntZSNE,
                     ZSSW  => ntRef_ntZSSW,
                     ZSSE  => ntRef_ntZSSE,
                     ZDS   => ntRef_ntZDS,
                     ZDN   => ntRef_ntZDN,
                     ZDE   => ntRef_ntZDE,
                     ZDW   => ntRef_ntZDW,
                     ZQS   => ntRef_ntZQS,
                     ZQN   => ntRef_ntZQN,
                     ZQE   => ntRef_ntZQE,
                     ZQW   => ntRef_ntZQW,
                     LH1   => ntRef_ntLH1,
                     LV1   => ntRef_ntLV1,
                     TIEHI => ntRef_ntTIEHI                    
                   )
        @([sx,sy]);
}//end of function place_srb_tile
/********************************************************************************/
/********************************************************************************/
function place_clm_tile(unsigned int tx,ty,clm_flag)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X ;
    sy = ty * NUM_GRID_Y;
    
    string strVar;
    //LOGIC OUTPUT
    sprintf(strVar,"ntL7OUT_%d_%d",sx+2,sy);
    &wire ntRef_ntL7OUT = wire*strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntA_CECO_%d_%d",sx+2,sy);
    &wire ntRef_ntA_CECO = wire*strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
   
    sprintf(strVar,"ntA_COUT_%d_%d",sx+2,sy);
    &wire ntRef_ntA_COUT = wire*strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntA_RSCO_%d_%d",sx+2,sy);
    &wire ntRef_ntA_RSCO = wire*strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntA_SRCO_%d_%d",sx+2,sy);
    &wire ntRef_ntA_SRCO = wire*strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntS_CECO_%d_%d",sx+2,sy);
    &wire ntRef_ntS_CECO = wire*strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
   
    sprintf(strVar,"ntS_COUT_%d_%d",sx+2,sy);
    &wire ntRef_ntS_COUT = wire*strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntS_RSCO_%d_%d",sx+2,sy);
    &wire ntRef_ntS_RSCO = wire*strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntS_SRCO_%d_%d",sx+2,sy);
    &wire ntRef_ntS_SRCO = wire*strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_Y_%d_%d",sx+2,sy);
    &wire ntRef_ntA_Y[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_Q_%d_%d",sx+2,sy);
    &wire ntRef_ntA_Q[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntA_Y6AB_%d_%d",sx+2,sy);
    &wire ntRef_ntA_Y6AB = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 
 
    sprintf(strVar,"ntA_Y6CD_%d_%d",sx+2,sy);
    &wire ntRef_ntA_Y6CD = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_Y_%d_%d",sx+2,sy);
    &wire ntRef_ntS_Y[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_Q_%d_%d",sx+2,sy);
    &wire ntRef_ntS_Q[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntS_Y6AB_%d_%d",sx+2,sy);
    &wire ntRef_ntS_Y6AB = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;   
 
    sprintf(strVar,"ntS_Y6CD_%d_%d",sx+2,sy);
    &wire ntRef_ntS_Y6CD = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;  

    sprintf(strVar,"ntTIEHI_%d_%d",sx+2,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    if(clm_flag == 1)
    {
      sprintf(strVar, "CLMA_TILE_%d_%d", sx+2, sy);
      device CLMA_TILE *strVar
           port map (
                     A_Y    =>  ntRef_ntA_Y,
                     A_Q    =>  ntRef_ntA_Q,
                     A_Y6AB =>  ntRef_ntA_Y6AB,
                     A_Y6CD =>  ntRef_ntA_Y6CD,
                     S_Y    =>  ntRef_ntS_Y,
                     S_Q    =>  ntRef_ntS_Q,
                     S_Y6AB =>  ntRef_ntS_Y6AB,
                     S_Y6CD =>  ntRef_ntS_Y6CD,
                     L7OUT  => ntRef_ntL7OUT,
                     A_CECO => ntRef_ntA_CECO,
                     A_COUT => ntRef_ntA_COUT,
                     A_RSCO => ntRef_ntA_RSCO,
                     A_SRCO => ntRef_ntA_SRCO,
                     S_CECO => ntRef_ntS_CECO,
                     S_COUT => ntRef_ntS_COUT,
                     S_RSCO => ntRef_ntS_RSCO,
                     S_SRCO => ntRef_ntS_SRCO,
                     TIEHI  => ntRef_ntTIEHI                    
                    )
        @([sx+2,sy]);
     
      STRUCT inc_spec_CLMA incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_CLMA_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device CLMA_TILE @[sx+2,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx,sy_SRB]>> => <wire *pin_logic_device of <device CLMA_TILE @[sx+2,sy]>>); 
          }
      }
    }
    else
    {
      sprintf(strVar, "CLMS_TILE_%d_%d", sx+2, sy);
      device CLMS_TILE *strVar
           port map (
                     A_Y    =>  ntRef_ntA_Y,
                     A_Q    =>  ntRef_ntA_Q,
                     A_Y6AB =>  ntRef_ntA_Y6AB,
                     A_Y6CD =>  ntRef_ntA_Y6CD,
                     S_Y    =>  ntRef_ntS_Y,
                     S_Q    =>  ntRef_ntS_Q,
                     S_Y6AB =>  ntRef_ntS_Y6AB,
                     S_Y6CD =>  ntRef_ntS_Y6CD,
                     L7OUT  => ntRef_ntL7OUT,
                     A_CECO => ntRef_ntA_CECO,
                     A_COUT => ntRef_ntA_COUT,
                     A_RSCO => ntRef_ntA_RSCO,
                     A_SRCO => ntRef_ntA_SRCO,
                     S_CECO => ntRef_ntS_CECO,
                     S_COUT => ntRef_ntS_COUT,
                     S_RSCO => ntRef_ntS_RSCO,
                     S_SRCO => ntRef_ntS_SRCO,
                     TIEHI  => ntRef_ntTIEHI
                     )
        @([sx+2,sy]);  
      STRUCT inc_spec_CLMS incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_CLMS_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device CLMS_TILE @[sx+2,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx,sy_SRB]>> => <wire *pin_logic_device of <device CLMS_TILE @[sx+2,sy]>>); 
          }
     }         
   }
        
}// end of function place_clm_tile
/********************************************************************************
********************************************************************************/
function place_drm_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
  
    string strVar;
   
    //LOGIC OUTPUT
    sprintf(strVar,"ntALMOST_EMPTY_%d_%d",sx,sy);
    &wire ntRef_ntALMOST_EMPTY = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
   
    sprintf(strVar,"ntALMOST_FULL_%d_%d",sx,sy);
    &wire ntRef_ntALMOST_FULL = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntEMPTY_%d_%d",sx,sy);
    &wire ntRef_ntEMPTY = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
  
    sprintf(strVar,"ntFULL_%d_%d",sx,sy);
    &wire ntRef_ntFULL = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntQA0_%d_%d",sx,sy);
    &wire ntRef_ntQA0[17:0] = wire *strVar[17:0]        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntQA1_%d_%d",sx,sy);
    &wire ntRef_ntQA1[17:0] = wire *strVar[17:0]        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntQB0_%d_%d",sx,sy);
    &wire ntRef_ntQB0[17:0] = wire *strVar[17:0]        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntQB1_%d_%d",sx,sy);
    &wire ntRef_ntQB1[17:0] = wire *strVar[17:0]        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar, "DRM_TILE_%d_%d", sx, sy);
    
    device DRM_TILE *strVar
         port map (
                    ALMOST_EMPTY   => ntRef_ntALMOST_EMPTY,
                    ALMOST_FULL    => ntRef_ntALMOST_FULL,
                    EMPTY          => ntRef_ntEMPTY,
                    FULL           => ntRef_ntFULL,
                    QA0            => ntRef_ntQA0,
                    QB0            => ntRef_ntQB0,
                    QA1            => ntRef_ntQA1,
                    QB1            => ntRef_ntQB1
                  )
        @([sx,sy]);
  
      STRUCT inc_spec_DRM incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_DRM_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device DRM_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-2,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx-2,sy_SRB]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE @ [sx-2,sy_SRB]>>
                                                                        : <wire *pin_logic_device of <device DRM_TILE @[sx,sy]>>); 
          }
      }         
        
}// end of function place_drm_tile
/********************************************************************************
********************************************************************************/

function place_apm_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    string strVar;

    sprintf(strVar,"ntXO_%d_%d",sx,sy);
    &wire ntRef_ntXO[17:0] = wire *strVar[17:0]        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntXBO_%d_%d",sx,sy);
    &wire ntRef_ntXBO[17:0] = wire *strVar[17:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPO_%d_%d",sx,sy);
    &wire ntRef_ntPO[47:0] = wire *strVar[47:0]        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntP_%d_%d",sx,sy);
    &wire ntRef_ntP[47:0] = wire *strVar[47:0]         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPCO_%d_%d",sx,sy);
    &wire ntRef_ntPCO = wire *strVar                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO = wire *strVar                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTIELO_0_%d_%d",sx,sy);
    &wire ntRef_ntTIELO_0 = wire *strVar;

    sprintf(strVar,"ntTIELO_1_%d_%d",sx,sy);
    &wire ntRef_ntTIELO_1 = wire *strVar;

    sprintf(strVar,"ntTIELO_2_%d_%d",sx,sy);
    &wire ntRef_ntTIELO_2 = wire *strVar;

    sprintf(strVar,"ntTIELO_3_%d_%d",sx,sy);
    &wire ntRef_ntTIELO_3 = wire *strVar;

    sprintf(strVar, "APM_TILE_%d_%d", sx, sy);
    
    device APM_TILE *strVar
         port map (
                   XO      =>  ntRef_ntXO,
                   PO      =>  ntRef_ntPO,
                   XBO     =>  ntRef_ntXBO,
                   P       =>  ntRef_ntP,
                   PCO     =>  ntRef_ntPCO,
                   TEST_SO =>  ntRef_ntTEST_SO,
                   TIELO_0 =>  ntRef_ntTIELO_0,
                   TIELO_1 =>  ntRef_ntTIELO_1,
                   TIELO_2 =>  ntRef_ntTIELO_2,
                   TIELO_3 =>  ntRef_ntTIELO_3
                 )
        @([sx,sy]);

      STRUCT inc_spec_APM incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_APM_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device APM_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-2,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx-2,sy_SRB]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE @ [sx-2,sy_SRB]>>
                                                                        : <wire *pin_logic_device of <device APM_TILE @[sx,sy]>>); 
          }
      }         

        
}// end of function place_apm_tile
/********************************************************************************
********************************************************************************/
function place_iob_tile(unsigned int tx,ty)
{  
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;


    string strVar;
    sprintf(strVar,"ntS11_CCS_DIN_%d_%d",sx,sy);
    &wire ntRef_ntS11_CCS_DIN[39:0] = wire *strVar[39:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDIN_%d_%d",sx,sy);
    &wire ntRef_ntDIN[39:0] = wire *strVar[39:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSO_%d_%d",sx,sy);
    &wire ntRef_ntSO[39:0] = wire *strVar[39:0];

    sprintf(strVar,"ntCLK_XTAL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_XTAL = wire *strVar;

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntREGION_INC_%d_%d",sx,sy);
    &wire ntRef_ntREGION_INC = wire *strVar;

    sprintf(strVar,"ntNL_%d_%d",sx,sy);
    &wire ntRef_ntNL[4:0] = wire *strVar[4:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPL_%d_%d",sx,sy);
    &wire ntRef_ntPL[4:0] = wire *strVar[4:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTNL_%d_%d",sx,sy);
    &wire ntRef_ntTNL[4:0] = wire *strVar[4:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTPL_%d_%d",sx,sy);
    &wire ntRef_ntTPL[4:0] = wire *strVar[4:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntCAL_ACT_N_%d_%d",sx,sy);
    &wire ntRef_ntCAL_ACT_N = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDIFFI_OUT_%d_%d",sx,sy);
    &wire ntRef_ntDIFFI_OUT[39:0] = wire *strVar[39:0];

    sprintf(strVar,"ntS11_TIHI_D_%d_%d",sx,sy);
    &wire ntRef_ntS11_TIHI_D[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntS11_TIHI_S_%d_%d",sx,sy);
    &wire ntRef_ntS11_TIHI_S[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntS11_TILO_D_%d_%d",sx,sy);
    &wire ntRef_ntS11_TILO_D[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntS11_TILO_S_%d_%d",sx,sy);
    &wire ntRef_ntS11_TILO_S[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntS11_TILO_%d_%d",sx,sy);
    &wire ntRef_ntS11_TILO = wire *strVar;

    sprintf(strVar,"ntS11_PDG1_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_PDG1_O = wire *strVar;

    sprintf(strVar,"ntS11_PDG2_N_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_PDG2_N_O = wire *strVar;

    sprintf(strVar,"ntS11_PDG3_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_PDG3_O = wire *strVar;

    sprintf(strVar,"ntDQS_O_%d_%d",sx,sy);
    &wire ntRef_ntDQS_O[2:0] = wire *strVar[2:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGATE_FROM_LOOP_%d_%d",sx,sy);
    &wire ntRef_ntGATE_FROM_LOOP[1:0] = wire *strVar[1:0]      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntVREF_%d_%d",sx,sy);
    &wire ntRef_ntVREF = wire *strVar;

    sprintf(strVar,"ntIVREF_T_%d_%d",sx,sy);
    &wire ntRef_ntIVREF_T[9:0] = wire *strVar[9:0];

    sprintf(strVar,"ntS11_PAD_STATE_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_PAD_STATE_O = wire *strVar;


    sprintf(strVar, "IOB_TILE_%d_%d", sx, sy);
    device IOB_TILE *strVar
         port map (
                    DIN        => ntRef_ntDIN,
                    SO          => ntRef_ntSO,
                    S11_CCS_DIN => ntRef_ntS11_CCS_DIN,
                    CLK_XTAL    => ntRef_ntCLK_XTAL,
                    COL_INC_OUT => ntRef_ntCOL_INC_OUT,
                    CS_OUT      => ntRef_ntCS_OUT,
                    REGION_INC  => ntRef_ntREGION_INC,
                    NL           => ntRef_ntNL,
                    PL           => ntRef_ntPL,
                    TNL          => ntRef_ntTNL,
                    TPL          => ntRef_ntTPL,
                    CAL_ACT_N    => ntRef_ntCAL_ACT_N,
                    DIFFI_OUT    => ntRef_ntDIFFI_OUT,
                    S11_TIHI_D   => ntRef_ntS11_TIHI_D,
                    S11_TIHI_S   => ntRef_ntS11_TIHI_S,
                    S11_TILO_D   => ntRef_ntS11_TILO_D,
                    S11_TILO_S   => ntRef_ntS11_TILO_S,
                    S11_TILO     => ntRef_ntS11_TILO,
                    DQS_O        => ntRef_ntDQS_O,
                    VREF         => ntRef_ntVREF,
                    IVREF_T      => ntRef_ntIVREF_T,
                    S11_PAD_STATE_O => ntRef_ntS11_PAD_STATE_O,
                    GATE_FROM_LOOP  => ntRef_ntGATE_FROM_LOOP
                   )
        @([sx,sy]);


      STRUCT inc_spec_IOB incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB,ty_srb,sx_srb;

      foreach incVar(inc_IOB_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          ty_srb = ty + loc_SRB;

          sx_srb = (tx==0) ? sx+NUM_GRID_X : sx-NUM_GRID_X;

          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device IOB_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_SRB]>> =>  <wire *pin_logic_device of <device IOB_TILE @[sx,sy]>>); 
          }
      }         

}//end of function place_iob_tile
/********************************************************************************
********************************************************************************/
function place_iob_half_tile(unsigned int tx,ty)
{  
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;


    string strVar;
    sprintf(strVar,"ntCAL_ACT_N_%d_%d",sx,sy);
    &wire ntRef_ntCAL_ACT_N = wire *strVar;

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntCOL_SEL_CCS_%d_%d",sx,sy);
    &wire ntRef_ntCOL_SEL_CCS = wire *strVar;

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntDIFFI_OUT_%d_%d",sx,sy);
    &wire ntRef_ntDIFFI_OUT[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntDIN_%d_%d",sx,sy);
    &wire ntRef_ntDIN[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntDQS_O_%d_%d",sx,sy);
    &wire ntRef_ntDQS_O[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntGATE_FROM_LOOP_%d_%d",sx,sy);
    &wire ntRef_ntGATE_FROM_LOOP = wire *strVar;

    sprintf(strVar,"ntIVREF_T_%d_%d",sx,sy);
    &wire ntRef_ntIVREF_T[9:0] = wire *strVar[9:0];

    sprintf(strVar,"ntNL_%d_%d",sx,sy);
    &wire ntRef_ntNL[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntPL_%d_%d",sx,sy);
    &wire ntRef_ntPL[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntREGION_INC_%d_%d",sx,sy);
    &wire ntRef_ntREGION_INC = wire *strVar;

    sprintf(strVar,"ntS11_CCS_DIN_%d_%d",sx,sy);
    &wire ntRef_ntS11_CCS_DIN[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntS11_TIHI_D_%d_%d",sx,sy);
    &wire ntRef_ntS11_TIHI_D[9:0] = wire *strVar[9:0];

    sprintf(strVar,"ntS11_TIHI_S_%d_%d",sx,sy);
    &wire ntRef_ntS11_TIHI_S[9:0] = wire *strVar[9:0];

    sprintf(strVar,"ntS11_TILO_%d_%d",sx,sy);
    &wire ntRef_ntS11_TILO = wire *strVar;

    sprintf(strVar,"ntS11_TILO_D_%d_%d",sx,sy);
    &wire ntRef_ntS11_TILO_D[9:0] = wire *strVar[9:0];

    sprintf(strVar,"ntS11_TILO_S_%d_%d",sx,sy);
    &wire ntRef_ntS11_TILO_S[9:0] = wire *strVar[9:0];

    sprintf(strVar,"ntSO_%d_%d",sx,sy);
    &wire ntRef_ntSO[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntTNL_%d_%d",sx,sy);
    &wire ntRef_ntTNL[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTPL_%d_%d",sx,sy);
    &wire ntRef_ntTPL[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntVREF_%d_%d",sx,sy);
    &wire ntRef_ntVREF = wire *strVar;

    sprintf(strVar,"ntS11_PAD_STATE_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_PAD_STATE_O = wire *strVar;


    sprintf(strVar, "IOB_TILE_HALF_%d_%d", sx, sy);
    device IOB_TILE_HALF *strVar
         port map (
                   CAL_ACT_N      => ntRef_ntCAL_ACT_N,     
                   COL_INC_OUT    => ntRef_ntCOL_INC_OUT,   
                   COL_SEL_CCS    => ntRef_ntCOL_SEL_CCS,   
                   CS_OUT         => ntRef_ntCS_OUT,        
                   DIFFI_OUT      => ntRef_ntDIFFI_OUT,     
                   DIN            => ntRef_ntDIN,           
                   DQS_O          => ntRef_ntDQS_O,         
                   GATE_FROM_LOOP => ntRef_ntGATE_FROM_LOOP,
                   IVREF_T        => ntRef_ntIVREF_T,       
                   NL             => ntRef_ntNL,            
                   PL             => ntRef_ntPL,            
                   REGION_INC     => ntRef_ntREGION_INC,    
                   S11_CCS_DIN    => ntRef_ntS11_CCS_DIN,   
                   S11_TIHI_D     => ntRef_ntS11_TIHI_D,    
                   S11_TIHI_S     => ntRef_ntS11_TIHI_S,    
                   S11_TILO       => ntRef_ntS11_TILO,      
                   S11_TILO_D     => ntRef_ntS11_TILO_D,    
                   S11_TILO_S     => ntRef_ntS11_TILO_S,    
                   SO             => ntRef_ntSO,            
                   TNL            => ntRef_ntTNL,           
                   TPL            => ntRef_ntTPL,           
                   VREF           => ntRef_ntVREF
                   )
        @([sx,sy]);


      STRUCT inc_spec_IOB_HALF incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB,ty_srb,sx_srb;

      foreach incVar(inc_IOB_HALF_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          sy_SRB = sy + loc_SRB*NUM_GRID_Y; 

          sx_srb = (loc_SRB == 14) ? sx+NUM_GRID_X : sx + 11 * NUM_GRID_X;

          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device IOB_TILE_HALF @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_SRB]>> =>  <wire *pin_logic_device of <device IOB_TILE_HALF @[sx,sy]>>); 
          }
      }         

}//end of function place_iob_half_tile
/********************************************************************************
********************************************************************************/
function place_pll_tile(unsigned int tx,ty,flag)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;
    sprintf(strVar,"ntLOCK_%d_%d",sx,sy);
    &wire ntRef_ntLOCK = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntLOCK_LOCAL_%d_%d",sx,sy);
    &wire ntRef_ntLOCK_LOCAL = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFBDLY_OB_%d_%d",sx,sy);
    &wire ntRef_ntFBDLY_OB = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKSWITCH_FLAG_%d_%d",sx,sy);
    &wire ntRef_ntCLKSWITCH_FLAG = wire *strVar;

    sprintf(strVar,"ntCLK_OUT0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUT1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUT2_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT2 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUT3_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT3 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUT4_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT4 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUT4_CAS_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT4_CAS = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUT_ADC_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT_ADC = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUT_EXT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT_EXT = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUT0_WL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT0_WL = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUT_5MUX1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT_5MUX1 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar,"ntVCP_%d_%d",sx,sy);
    &wire ntRef_ntVCP = wire *strVar;

    sprintf(strVar,"ntCLK_GLOBAL_R_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_R[7:0] = wire *strVar[7:0]    /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_GLOBAL_L_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_L[7:0] = wire *strVar[7:0]    /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_PREGM_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PREGM_OUT[7:0] = wire *strVar[7:0]    /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;



    sprintf(strVar, "PLL_TILE_%d_%d", sx, sy);
    
    device PLL_TILE *strVar
         port map (
                    LOCK          => ntRef_ntLOCK, 
                    LOCK_LOCAL    => ntRef_ntLOCK_LOCAL,
                    CLKSWITCH_FLAG=> ntRef_ntCLKSWITCH_FLAG,
                    FBDLY_OB      => ntRef_ntFBDLY_OB,
                    CLK_OUT0      => ntRef_ntCLK_OUT0,
                    CLK_OUT0_WL   => ntRef_ntCLK_OUT0_WL,
                    CLK_OUT1      => ntRef_ntCLK_OUT1,
                    CLK_OUT2      => ntRef_ntCLK_OUT2,
                    CLK_OUT3      => ntRef_ntCLK_OUT3,
                    CLK_OUT4      => ntRef_ntCLK_OUT4,
                    CLK_OUT4_CAS  => ntRef_ntCLK_OUT4_CAS,
                    CLK_OUT_ADC   => ntRef_ntCLK_OUT_ADC,
                    CLK_OUT_EXT   => ntRef_ntCLK_OUT_EXT,
                    CLK_OUT_5MUX1 => ntRef_ntCLK_OUT_5MUX1,
                    VCP           => ntRef_ntVCP,
                    TIEHI         => ntRef_ntTIEHI,
                    CLK_GLOBAL_L  => ntRef_ntCLK_GLOBAL_L,
                    CLK_GLOBAL_R  => ntRef_ntCLK_GLOBAL_R,
                    CLK_PREGM_OUT => ntRef_ntCLK_PREGM_OUT
                  )
        @([sx,sy]);
     
    if(flag==0)
    {
      STRUCT inc_spec_PLL_B incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_PLL_B_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device PLL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-2,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx-2,sy_SRB]>> => (incVar.port_name_device=="TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx-2,sy_SRB]>>
                                                                         : <wire *pin_logic_device of <device PLL_TILE @[sx,sy]>>); 
          }
      } 
    } 
    else       
    {
      STRUCT inc_spec_PLL_T incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_PLL_T_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device PLL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-2,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx-2,sy_SRB]>> => (incVar.port_name_device=="TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx-2,sy_SRB]>>
                                                                         : <wire *pin_logic_device of <device PLL_TILE @[sx,sy]>>); 
          }
      } 
    }      
}// end of function place_pll_tile

/********************************************************************************
********************************************************************************/
function place_uscm_tile(unsigned int tx,ty, tx_srb, ty_srb)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntCLK_USCM_T_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USCM_T[14:0] = wire *strVar[14:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_USCM_B_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USCM_B[14:0] = wire *strVar[14:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OSC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OSC_OUT[1:0] = wire *strVar[1:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntDCI_INIT_OUT_%d_%d",sx,sy);
    &wire ntRef_ntDCI_INIT_OUT = wire *strVar;


    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    
    sprintf(strVar, "USCM_TILE_%d_%d", sx, sy);
    
    device USCM_TILE *strVar
          port map (
                      CLK_USCM_T    => ntRef_ntCLK_USCM_T,
                      CLK_USCM_B    => ntRef_ntCLK_USCM_B,
                      TIEHI         => ntRef_ntTIEHI,
                      DCI_INIT_OUT  => ntRef_ntDCI_INIT_OUT,
                      CLK_OSC_OUT   => ntRef_ntCLK_OSC_OUT            
                    )
        @([sx,sy]);

      STRUCT inc_spec_USCM incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_srb;
      int sx_srb = tx_srb * NUM_GRID_X;
      int sy_srb0 = ty_srb * NUM_GRID_Y;

      foreach incVar(inc_USCM_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_srb = sy_srb0;
          }
          else
          {
            sy_srb = sy_srb0 + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device USCM_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> => (incVar.port_name_device=="TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx_srb,sy_srb]>>
                                                                         : <wire *pin_logic_device of <device USCM_TILE @[sx,sy]>>); 
          }
      }         
 
        
}// end of function place_uscm_tile
/********************************************************************************
********************************************************************************/
function place_iol_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntRX_DATA_A_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_A[7:0] = wire *strVar[7:0]   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_DATA_B_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_B[7:0] = wire *strVar[7:0]   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIODLY_OV_A_%d_%d",sx,sy);
    &wire ntRef_ntIODLY_OV_A = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_DATA_DD_A_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_DD_A = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_DATA_IFF_A_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_IFF_A = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIODLY_OV_B_%d_%d",sx,sy);
    &wire ntRef_ntIODLY_OV_B = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_DATA_DD_B_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_DD_B = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_DATA_IFF_B_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_IFF_B = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDO_A_%d_%d",sx,sy);
    &wire ntRef_ntDO_A = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDO_B_%d_%d",sx,sy);
    &wire ntRef_ntDO_B = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTO_A_%d_%d",sx,sy);
    &wire ntRef_ntTO_A = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTO_B_%d_%d",sx,sy);
    &wire ntRef_ntTO_B = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntINCK_A_%d_%d",sx,sy);
    &wire ntRef_ntINCK_A = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntINCK_B_%d_%d",sx,sy);
    &wire ntRef_ntINCK_B = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntTERM_A_%d_%d",sx,sy);
    &wire ntRef_ntTERM_A = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM_B_%d_%d",sx,sy);
    &wire ntRef_ntTERM_B = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMIPI_SW_DYN_O_A_%d_%d",sx,sy);
    &wire ntRef_ntMIPI_SW_DYN_O_A = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntMIPI_SW_DYN_O_B_%d_%d",sx,sy);
    &wire ntRef_ntMIPI_SW_DYN_O_B = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTIELO_%d_%d",sx,sy);
    &wire ntRef_ntTIELO = wire *strVar;

    sprintf(strVar, "IOL_TILE_%d_%d", sx, sy);
    
    device IOL_TILE *strVar
         port map (
                   IODLY_OV_A    =>  ntRef_ntIODLY_OV_A ,
                   RX_DATA_A     =>  ntRef_ntRX_DATA_A,
                   RX_DATA_DD_A  =>  ntRef_ntRX_DATA_DD_A,
                   IODLY_OV_B    =>  ntRef_ntIODLY_OV_B ,
                   RX_DATA_B       =>  ntRef_ntRX_DATA_B,
                   RX_DATA_DD_B    =>  ntRef_ntRX_DATA_DD_B,
                   DO_A            =>  ntRef_ntDO_A,
                   DO_B            =>  ntRef_ntDO_B,
                   TO_A            =>  ntRef_ntTO_A,
                   TO_B            =>  ntRef_ntTO_B,
                   INCK_A          =>  ntRef_ntINCK_A,
                   INCK_B          =>  ntRef_ntINCK_B,
                   TERM_A          =>  ntRef_ntTERM_A,
                   TERM_B          =>  ntRef_ntTERM_B,
                   MIPI_SW_DYN_O_A => ntRef_ntMIPI_SW_DYN_O_A,
                   MIPI_SW_DYN_O_B => ntRef_ntMIPI_SW_DYN_O_B,
                   TIELO           => ntRef_ntTIELO

                  )
        @([sx,sy]);

      STRUCT inc_spec_IOL incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;
   
      unsigned int sx_SRB;
      sx_SRB = sx-2;
      int cnt;

      foreach incVar(inc_IOL_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
            connect(<pin *pin_logic_device of <device IOL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_SRB,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy_SRB]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE @ [sx_SRB,sy_SRB]>>
                                                                                                               : <wire *pin_logic_device of <device IOL_TILE @[sx,sy]>>);
          }
      }               
}// end of function place_iol_tile
/********************************************************************************
********************************************************************************/
function place_cramsl2_tile(unsigned int tx,ty,flag_use)
{ 
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;

    string strVar;

    sprintf(strVar,"ntIBM_0_OUT_%d_%d",sx,sy);
    &wire ntRef_ntIBM_0_OUT[19:0] = wire *strVar[19:0]; 

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar, "CRAMSL2_TILE_%d_%d", sx, sy);
    device CRAMSL2_TILE *strVar
         port map (
                   IBM_0_OUT    => ntRef_ntIBM_0_OUT,
                   TIEHI  => ntRef_ntTIEHI

                  )
        @([sx,sy]);

    STRUCT inc_spec_IBM_SRB incVar;
    string pin_SRB;
    string pin_logic_device;
    string attribute_IO;

    int sx_srb = tx * NUM_GRID_X;

    foreach incVar(inc_IBM_SRB_spec)
    {
        pin_SRB = incVar.port_name_SRB;
        pin_logic_device = incVar.port_name_device;
        attribute_IO = incVar.attribute_IO;
       
        connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy]>> =>  <wire *pin_logic_device of <device CRAMSL2_TILE @[sx,sy]>>);
    }   

    if(flag_use==0)
    {
        connect
        (
            <pin IN[0] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
            <pin IN[1] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
            <pin IN[2] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
            <pin IN[3] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
            <pin IN[4] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
            <pin IN[5] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
            <pin IN[6] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
            <pin IN[7] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
            <pin IN[8] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
            <pin IN[9] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
            <pin IN[10] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
            <pin IN[11] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
            <pin IN[12] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
            <pin IN[13] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
            <pin IN[14] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
            <pin IN[15] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
            <pin IN[16] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
            <pin IN[17] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
            <pin IN[18] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
            <pin IN[19] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>
        );
    }
}
/********************************************************************************
********************************************************************************/
function place_cramsl2noibm_tile(unsigned int tx,ty,flag_lr)
{ 
    unsigned int sx, sy;
    
    sx = (flag_lr==0) ? tx * NUM_GRID_X + 2 : tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    string strVar;

    sprintf(strVar, "CRAMSL2NOIBM_TILE_%d_%d", sx, sy);
    device CRAMSL2NOIBM_TILE *strVar
        @([sx,sy]);

}
/********************************************************************************
********************************************************************************/
function place_dqsl_tile(unsigned int tx,ty)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;

    sprintf(strVar,"ntWL_OV_%d_%d",sx,sy);
    &wire ntRef_ntWL_OV = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRDEL_OV_%d_%d",sx,sy);
    &wire ntRef_ntRDEL_OV = wire *strVar               /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDGTS_%d_%d",sx,sy);
    &wire ntRef_ntDGTS = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_DQSI_DEL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DQSI_DEL = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_W_DEL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_W_DEL = wire *strVar             /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_W_%d_%d",sx,sy);
    &wire ntRef_ntCLK_W = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntIFIFO_WADDR_%d_%d",sx,sy);
    &wire ntRef_ntIFIFO_WADDR[2:0] = wire *strVar[2:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIFIFO_RADDR_%d_%d",sx,sy);
    &wire ntRef_ntIFIFO_RADDR[2:0] = wire *strVar[2:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
   
    sprintf(strVar,"ntREAD_VALID_%d_%d",sx,sy);
    &wire ntRef_ntREAD_VALID = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGATE_TO_LOOP_%d_%d",sx,sy);
    &wire ntRef_ntGATE_TO_LOOP = wire *strVar;

    sprintf(strVar,"ntDQS_TILO_%d_%d",sx,sy);
    &wire ntRef_ntDQS_TILO = wire *strVar;

    sprintf(strVar,"ntDQS_TIHI_%d_%d",sx,sy);
    &wire ntRef_ntDQS_TIHI = wire *strVar;

    sprintf(strVar,"ntDLL_CODE0_BUF_%d_%d",sx,sy);
    &wire ntRef_ntDLL_CODE0_BUF[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntDLL_CODE1_BUF_%d_%d",sx,sy);
    &wire ntRef_ntDLL_CODE1_BUF[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntDLL_CODE2_BUF_%d_%d",sx,sy);
    &wire ntRef_ntDLL_CODE2_BUF[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCLK_IOL_T_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOL_T_OUT[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_IOL_B_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOL_B_OUT[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_R_%d_%d",sx,sy);
    &wire ntRef_ntCLK_R = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntDQS_DRIFT_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DRIFT[1:0] = wire *strVar[1:0]           /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDRIFT_DETECT_ERR_%d_%d",sx,sy);
    &wire ntRef_ntDRIFT_DETECT_ERR = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_DRIFT_STATUS_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DRIFT_STATUS = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

      sprintf(strVar,"DQSL_TILE_%d_%d",sx,sy);
      device DQSL_TILE *strVar
        port map
          (
              WL_OV        => ntRef_ntWL_OV,
              RDEL_OV      => ntRef_ntRDEL_OV,
              DGTS         => ntRef_ntDGTS,
              READ_VALID   => ntRef_ntREAD_VALID,
              CLK_DQSI_DEL => ntRef_ntCLK_DQSI_DEL,
              CLK_W_DEL    => ntRef_ntCLK_W_DEL,
              CLK_W        => ntRef_ntCLK_W,
              IFIFO_WADDR  => ntRef_ntIFIFO_WADDR,
              IFIFO_RADDR  => ntRef_ntIFIFO_RADDR,
              DQS_TILO     => ntRef_ntDQS_TILO,
              DQS_TIHI     => ntRef_ntDQS_TIHI,
              GATE_TO_LOOP => ntRef_ntGATE_TO_LOOP,
              CLK_IOL_T_OUT=> ntRef_ntCLK_IOL_T_OUT,
              CLK_IOL_B_OUT=> ntRef_ntCLK_IOL_B_OUT,
              DLL_CODE0_BUF=> ntRef_ntDLL_CODE0_BUF,
              DLL_CODE1_BUF=> ntRef_ntDLL_CODE1_BUF,
              DLL_CODE2_BUF=> ntRef_ntDLL_CODE2_BUF,
              CLK_R        => ntRef_ntCLK_R,
              DQS_DRIFT            => ntRef_ntDQS_DRIFT,
              DRIFT_DETECT_ERR    => ntRef_ntDRIFT_DETECT_ERR,
              DQS_DRIFT_STATUS    => ntRef_ntDQS_DRIFT_STATUS
           )
          @([sx,sy]);

      STRUCT inc_spec_DQSL incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      string direct_SRB;

      foreach incVar(inc_DQSL_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
                   
          if(attribute_IO =="I")
          {       
            connect(<pin *pin_logic_device of <device DQSL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-2,sy]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx-2,sy]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE @ [sx-2,sy]>>
                                                                                                         : <wire *pin_logic_device of <device DQSL_TILE @[sx,sy]>>); 
          }
      }  

}
/********************************************************************************************************
*********************************************************************************************************/
function place_blsr_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_BLSR_Y;
    
    string strVar;

    sprintf(strVar,"ntPOR_N_OL_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OL = wire *strVar;

    sprintf(strVar,"ntPROG_ON_O_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON_O = wire *strVar;

    sprintf(strVar,"ntPROG_ON_R_O_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON_R_O = wire *strVar;

    sprintf(strVar,"ntNONDRM_REG_INC_O_%d_%d",sx,sy);
    &wire ntRef_ntNONDRM_REG_INC_O = wire *strVar;

    sprintf(strVar,"ntPRECHG_O_%d_%d",sx,sy);
    &wire ntRef_ntPRECHG_O = wire *strVar;

    sprintf(strVar,"ntERASE_R_O_%d_%d",sx,sy);
    &wire ntRef_ntERASE_R_O = wire *strVar;

    sprintf(strVar,"ntCOL_R_N_O_%d_%d",sx,sy);
    &wire ntRef_ntCOL_R_N_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntWL_ON_O_%d_%d",sx,sy);
    &wire ntRef_ntWL_ON_O = wire *strVar;

    sprintf(strVar,"ntCOL_IN_O_%d_%d",sx,sy);
    &wire ntRef_ntCOL_IN_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntPOR_N_OR_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OR = wire *strVar;

    sprintf(strVar,"ntDSROUTTO_CONFIG_%d_%d",sx,sy);
    &wire ntRef_ntDSROUTTO_CONFIG[31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntBLSR_SEL_O_%d_%d",sx,sy);
    &wire ntRef_ntBLSR_SEL_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCLKOUT_M_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT_M = wire *strVar;

    sprintf(strVar,"ntCOL_L_N_O_%d_%d",sx,sy);
    &wire ntRef_ntCOL_L_N_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntNONDRM_END_O_%d_%d",sx,sy);
    &wire ntRef_ntNONDRM_END_O = wire *strVar;

    sprintf(strVar,"ntWLSR_REF_%d_%d",sx,sy);
    &wire ntRef_ntWLSR_REF[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntPD_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPD_OUT = wire *strVar;

    sprintf(strVar,"ntREGION_RW_EN_O_%d_%d",sx,sy);
    &wire ntRef_ntREGION_RW_EN_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntDATA_%d_%d",sx,sy);
    &wire ntRef_ntDATA[2175:0] = wire *strVar[2175:0];

    sprintf(strVar,"ntCOL_INC_O_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_O = wire *strVar;

    sprintf(strVar,"ntDATA_TO_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntDATA_TO_NEXT[31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntTYPE_O_%d_%d",sx,sy);
    &wire ntRef_ntTYPE_O = wire *strVar;

    sprintf(strVar,"ntREAD_O_%d_%d",sx,sy);
    &wire ntRef_ntREAD_O = wire *strVar;

    sprintf(strVar,"ntRSTN_O_%d_%d",sx,sy);
    &wire ntRef_ntRSTN_O = wire *strVar;

    sprintf(strVar,"ntPOR_ERASE_N_O_%d_%d",sx,sy);
    &wire ntRef_ntPOR_ERASE_N_O = wire *strVar;

    sprintf(strVar,"ntFRAME_ADDR_O_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntPUB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPUB_OUT = wire *strVar;

    sprintf(strVar,"ntDATAN_%d_%d",sx,sy);
    &wire ntRef_ntDATAN[2175:0] = wire *strVar[2175:0];

    sprintf(strVar,"ntERASE_EN_O_%d_%d",sx,sy);
    &wire ntRef_ntERASE_EN_O = wire *strVar;

    sprintf(strVar,"ntCOL_L_O_%d_%d",sx,sy);
    &wire ntRef_ntCOL_L_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntMCLKB_O_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_O = wire *strVar;

    sprintf(strVar,"ntMCLKB_OL_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OL = wire *strVar;

    sprintf(strVar,"ntMCLKB_OR_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OR = wire *strVar;

    sprintf(strVar,"ntMCE_O_%d_%d",sx,sy);
    &wire ntRef_ntMCE_O = wire *strVar;

    sprintf(strVar,"ntMCE_OL_%d_%d",sx,sy);
    &wire ntRef_ntMCE_OL = wire *strVar;

    sprintf(strVar,"ntMCE_OR_%d_%d",sx,sy);
    &wire ntRef_ntMCE_OR = wire *strVar;

    sprintf(strVar,"ntMWR_O_%d_%d",sx,sy);
    &wire ntRef_ntMWR_O = wire *strVar;

    sprintf(strVar,"ntMWR_OL_%d_%d",sx,sy);
    &wire ntRef_ntMWR_OL = wire *strVar;

    sprintf(strVar,"ntMWR_OR_%d_%d",sx,sy);
    &wire ntRef_ntMWR_OR = wire *strVar;

    sprintf(strVar,"ntPROG_CAP_O_%d_%d",sx,sy);
    &wire ntRef_ntPROG_CAP_O = wire *strVar;

    sprintf(strVar,"ntRDBK_CAP_O_%d_%d",sx,sy);
    &wire ntRef_ntRDBK_CAP_O = wire *strVar;

    sprintf(strVar,"ntCOL_R_O_%d_%d",sx,sy);
    &wire ntRef_ntCOL_R_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntWLSR_SEL_O_%d_%d",sx,sy);
    &wire ntRef_ntWLSR_SEL_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntPRECHG_R_O_%d_%d",sx,sy);
    &wire ntRef_ntPRECHG_R_O = wire *strVar;

    sprintf(strVar,"ntNONDRM_END_LOCAL_%d_%d",sx,sy);
    &wire ntRef_ntNONDRM_END_LOCAL = wire *strVar;

    sprintf(strVar,"ntTIEL1_%d_%d",sx,sy);
    &wire ntRef_ntTIEL1 = wire *strVar;

    sprintf(strVar,"ntTIEL2_%d_%d",sx,sy);
    &wire ntRef_ntTIEL2 = wire *strVar;

    sprintf(strVar,"ntCLK_ADC_L_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC_L = wire *strVar;

    sprintf(strVar,"ntCLK_ADC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_ADC_R_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC_R = wire *strVar;

    sprintf(strVar,"ntCLK_USER_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USER_OUT = wire *strVar;

    sprintf(strVar,"ntDCI_INIT_%d_%d",sx,sy);
    &wire ntRef_ntDCI_INIT = wire *strVar;

    sprintf(strVar,"ntCLK_REL_OUT_M_%d_%d",sx,sy);
    &wire ntRef_ntCLK_REL_OUT_M = wire *strVar;

    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntGRS_N_OUT_M_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OUT_M = wire *strVar;

    sprintf(strVar,"ntGWEN_OUT_M_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OUT_M = wire *strVar;

    sprintf(strVar,"ntPOR_N_OUT_M_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OUT_M = wire *strVar;

    sprintf(strVar,"ntPUP_REL_N_OUT_M_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OUT_M = wire *strVar;

    sprintf(strVar,"ntTIE_LO_1V1_%d_%d",sx,sy);
    &wire ntRef_ntTIE_LO_1V1 = wire *strVar;

    sprintf(strVar,"ntBUS_BSCAN_OUTL_%d_%d",sx,sy);
    &wire ntRef_ntBUS_BSCAN_OUTL[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntBUS_BSCAN_OUTM_%d_%d",sx,sy);
    &wire ntRef_ntBUS_BSCAN_OUTM[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntBUS_BSCAN_OUTR_%d_%d",sx,sy);
    &wire ntRef_ntBUS_BSCAN_OUTR[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntBUS_GSEB_OUTL_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUTL[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntBUS_GSEB_OUTR_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUTR[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntBUS_WLSR_OUTL_%d_%d",sx,sy);
    &wire ntRef_ntBUS_WLSR_OUTL[12:0] = wire *strVar[12:0];

    sprintf(strVar,"ntBUS_WLSR_OUTR_%d_%d",sx,sy);
    &wire ntRef_ntBUS_WLSR_OUTR[12:0] = wire *strVar[12:0];

    sprintf(strVar,"ntDATA_L_1_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_1_NEXT[2175:0] = wire *strVar[2175:0];

    sprintf(strVar,"ntDATAN_L_1_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_1_NEXT[2175:0] = wire *strVar[2175:0];

    sprintf(strVar,"ntDATA_R_1_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_1_NEXT[2175:0] = wire *strVar[2175:0];

    sprintf(strVar,"ntDATAN_R_1_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_1_NEXT[2175:0] = wire *strVar[2175:0];

    sprintf(strVar,"ntDATA_L_2_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_2_NEXT[2175:0] = wire *strVar[2175:0];

    sprintf(strVar,"ntDATAN_L_2_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_2_NEXT[2175:0] = wire *strVar[2175:0];

    sprintf(strVar,"ntDATA_R_2_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntDATA_R_2_NEXT[2175:0] = wire *strVar[2175:0];

    sprintf(strVar,"ntDATAN_R_2_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_R_2_NEXT[2175:0] = wire *strVar[2175:0];

    sprintf(strVar, "BLSR_PGL200ES_TILE_%d_%d", sx, sy);
    
    device BLSR_PGL200ES_TILE *strVar
         port map (
      POR_N_OL         => ntRef_ntPOR_N_OL,        
      PROG_ON_O        => ntRef_ntPROG_ON_O,       
      PROG_ON_R_O      => ntRef_ntPROG_ON_R_O,     
      NONDRM_REG_INC_O => ntRef_ntNONDRM_REG_INC_O,
      PRECHG_O         => ntRef_ntPRECHG_O,        
      ERASE_R_O        => ntRef_ntERASE_R_O,       
      COL_R_N_O        => ntRef_ntCOL_R_N_O,       
      WL_ON_O          => ntRef_ntWL_ON_O,         
      COL_IN_O         => ntRef_ntCOL_IN_O,        
      POR_N_OR         => ntRef_ntPOR_N_OR,        
      DSROUTTO_CONFIG  => ntRef_ntDSROUTTO_CONFIG, 
      BLSR_SEL_O       => ntRef_ntBLSR_SEL_O,      
      CLKOUT_M         => ntRef_ntCLKOUT_M,        
      COL_L_N_O        => ntRef_ntCOL_L_N_O,       
      NONDRM_END_O     => ntRef_ntNONDRM_END_O,    
      WLSR_REF         => ntRef_ntWLSR_REF,        
      PD_OUT           => ntRef_ntPD_OUT,          
      REGION_RW_EN_O   => ntRef_ntREGION_RW_EN_O,  
      DATA             => ntRef_ntDATA,            
      COL_INC_O        => ntRef_ntCOL_INC_O,       
      DATA_TO_NEXT     => ntRef_ntDATA_TO_NEXT,    
      TYPE_O           => ntRef_ntTYPE_O,          
      READ_O           => ntRef_ntREAD_O,          
      RSTN_O           => ntRef_ntRSTN_O,          
      POR_ERASE_N_O    => ntRef_ntPOR_ERASE_N_O,   
      FRAME_ADDR_O     => ntRef_ntFRAME_ADDR_O,    
      PUB_OUT          => ntRef_ntPUB_OUT,         
      DATAN            => ntRef_ntDATAN,           
      ERASE_EN_O       => ntRef_ntERASE_EN_O,      
      COL_L_O          => ntRef_ntCOL_L_O,         
      MCLKB_O          => ntRef_ntMCLKB_O,         
      MCLKB_OL         => ntRef_ntMCLKB_OL,        
      MCLKB_OR         => ntRef_ntMCLKB_OR,        
      MCE_O            => ntRef_ntMCE_O,           
      MCE_OL           => ntRef_ntMCE_OL,          
      MCE_OR           => ntRef_ntMCE_OR,          
      MWR_O            => ntRef_ntMWR_O,           
      MWR_OL           => ntRef_ntMWR_OL,          
      MWR_OR           => ntRef_ntMWR_OR,          
      PROG_CAP_O       => ntRef_ntPROG_CAP_O,      
      RDBK_CAP_O       => ntRef_ntRDBK_CAP_O,      
      COL_R_O          => ntRef_ntCOL_R_O,         
      WLSR_SEL_O       => ntRef_ntWLSR_SEL_O,      
      PRECHG_R_O       => ntRef_ntPRECHG_R_O,      
      NONDRM_END_LOCAL => ntRef_ntNONDRM_END_LOCAL,
      TIEL1            => ntRef_ntTIEL1,           
      TIEL2            => ntRef_ntTIEL2,           
      CLK_ADC_L        => ntRef_ntCLK_ADC_L,       
      CLK_ADC_OUT      => ntRef_ntCLK_ADC_OUT,     
      CLK_ADC_R        => ntRef_ntCLK_ADC_R,       
      CLK_USER_OUT     => ntRef_ntCLK_USER_OUT,    
      DCI_INIT         => ntRef_ntDCI_INIT,        
      CLK_REL_OUT_M    => ntRef_ntCLK_REL_OUT_M,   
      GLOGEN_OUT       => ntRef_ntGLOGEN_OUT,      
      GRS_N_OUT_M      => ntRef_ntGRS_N_OUT_M,     
      GWEN_OUT_M       => ntRef_ntGWEN_OUT_M,      
      POR_N_OUT_M      => ntRef_ntPOR_N_OUT_M,     
      PUP_REL_N_OUT_M  => ntRef_ntPUP_REL_N_OUT_M, 
      TIE_LO_1V1       => ntRef_ntTIE_LO_1V1,      
      BUS_BSCAN_OUTL   => ntRef_ntBUS_BSCAN_OUTL,  
      BUS_BSCAN_OUTM   => ntRef_ntBUS_BSCAN_OUTM,  
      BUS_BSCAN_OUTR   => ntRef_ntBUS_BSCAN_OUTR,  
      BUS_GSEB_OUTL    => ntRef_ntBUS_GSEB_OUTL,   
      BUS_GSEB_OUTR    => ntRef_ntBUS_GSEB_OUTR,   
      BUS_WLSR_OUTL    => ntRef_ntBUS_WLSR_OUTL,   
      BUS_WLSR_OUTR    => ntRef_ntBUS_WLSR_OUTR,   
      DATA_L_1_NEXT    => ntRef_ntDATA_L_1_NEXT,   
      DATAN_L_1_NEXT   => ntRef_ntDATAN_L_1_NEXT,  
      DATA_R_1_NEXT    => ntRef_ntDATA_R_1_NEXT,   
      DATAN_R_1_NEXT   => ntRef_ntDATAN_R_1_NEXT,  
      DATA_L_2_NEXT    => ntRef_ntDATA_L_2_NEXT,   
      DATAN_L_2_NEXT   => ntRef_ntDATAN_L_2_NEXT,  
      DATA_R_2_NEXT    => ntRef_ntDATA_R_2_NEXT,   
      DATAN_R_2_NEXT   => ntRef_ntDATAN_R_2_NEXT
                  )
        @([sx,sy]);
        
}// end of function place_blsr_tile
/********************************************************************************************************
*********************************************************************************************************/
function place_blsr_rd_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_BLSR_Y;
    
    string strVar;

    sprintf(strVar,"ntPOR_N_OL_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OL = wire *strVar;

    sprintf(strVar,"ntPROG_ON_O_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON_O = wire *strVar;

    sprintf(strVar,"ntPROG_ON_R_O_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON_R_O = wire *strVar;

    sprintf(strVar,"ntNONDRM_REG_INC_O_%d_%d",sx,sy);
    &wire ntRef_ntNONDRM_REG_INC_O = wire *strVar;

    sprintf(strVar,"ntPRECHG_O_%d_%d",sx,sy);
    &wire ntRef_ntPRECHG_O = wire *strVar;

    sprintf(strVar,"ntERASE_R_O_%d_%d",sx,sy);
    &wire ntRef_ntERASE_R_O = wire *strVar;

    sprintf(strVar,"ntCOL_R_N_O_%d_%d",sx,sy);
    &wire ntRef_ntCOL_R_N_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntWL_ON_O_%d_%d",sx,sy);
    &wire ntRef_ntWL_ON_O = wire *strVar;

    sprintf(strVar,"ntCOL_IN_O_%d_%d",sx,sy);
    &wire ntRef_ntCOL_IN_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntPOR_N_OR_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OR = wire *strVar;

    sprintf(strVar,"ntDSROUTTO_CONFIG_%d_%d",sx,sy);
    &wire ntRef_ntDSROUTTO_CONFIG[31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntBLSR_SEL_O_%d_%d",sx,sy);
    &wire ntRef_ntBLSR_SEL_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCLKOUT_M_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT_M = wire *strVar;

    sprintf(strVar,"ntCOL_L_N_O_%d_%d",sx,sy);
    &wire ntRef_ntCOL_L_N_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntNONDRM_END_O_%d_%d",sx,sy);
    &wire ntRef_ntNONDRM_END_O = wire *strVar;

    sprintf(strVar,"ntWLSR_REF_%d_%d",sx,sy);
    &wire ntRef_ntWLSR_REF[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntPD_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPD_OUT = wire *strVar;

    sprintf(strVar,"ntREGION_RW_EN_O_%d_%d",sx,sy);
    &wire ntRef_ntREGION_RW_EN_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntDATA_%d_%d",sx,sy);
    &wire ntRef_ntDATA[2175:0] = wire *strVar[2175:0];

    sprintf(strVar,"ntCOL_INC_O_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_O = wire *strVar;

    sprintf(strVar,"ntDATA_TO_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntDATA_TO_NEXT[31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntTYPE_O_%d_%d",sx,sy);
    &wire ntRef_ntTYPE_O = wire *strVar;

    sprintf(strVar,"ntREAD_O_%d_%d",sx,sy);
    &wire ntRef_ntREAD_O = wire *strVar;

    sprintf(strVar,"ntRSTN_O_%d_%d",sx,sy);
    &wire ntRef_ntRSTN_O = wire *strVar;

    sprintf(strVar,"ntPOR_ERASE_N_O_%d_%d",sx,sy);
    &wire ntRef_ntPOR_ERASE_N_O = wire *strVar;

    sprintf(strVar,"ntFRAME_ADDR_O_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntPUB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPUB_OUT = wire *strVar;

    sprintf(strVar,"ntDATAN_%d_%d",sx,sy);
    &wire ntRef_ntDATAN[2175:0] = wire *strVar[2175:0];

    sprintf(strVar,"ntERASE_EN_O_%d_%d",sx,sy);
    &wire ntRef_ntERASE_EN_O = wire *strVar;

    sprintf(strVar,"ntCOL_L_O_%d_%d",sx,sy);
    &wire ntRef_ntCOL_L_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntMCLKB_O_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_O = wire *strVar;

    sprintf(strVar,"ntMCLKB_OL_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OL = wire *strVar;

    sprintf(strVar,"ntMCLKB_OR_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OR = wire *strVar;

    sprintf(strVar,"ntMCE_O_%d_%d",sx,sy);
    &wire ntRef_ntMCE_O = wire *strVar;

    sprintf(strVar,"ntMCE_OL_%d_%d",sx,sy);
    &wire ntRef_ntMCE_OL = wire *strVar;

    sprintf(strVar,"ntMCE_OR_%d_%d",sx,sy);
    &wire ntRef_ntMCE_OR = wire *strVar;

    sprintf(strVar,"ntMWR_O_%d_%d",sx,sy);
    &wire ntRef_ntMWR_O = wire *strVar;

    sprintf(strVar,"ntMWR_OL_%d_%d",sx,sy);
    &wire ntRef_ntMWR_OL = wire *strVar;

    sprintf(strVar,"ntMWR_OR_%d_%d",sx,sy);
    &wire ntRef_ntMWR_OR = wire *strVar;

    sprintf(strVar,"ntPROG_CAP_O_%d_%d",sx,sy);
    &wire ntRef_ntPROG_CAP_O = wire *strVar;

    sprintf(strVar,"ntRDBK_CAP_O_%d_%d",sx,sy);
    &wire ntRef_ntRDBK_CAP_O = wire *strVar;

    sprintf(strVar,"ntCOL_R_O_%d_%d",sx,sy);
    &wire ntRef_ntCOL_R_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntWLSR_SEL_O_%d_%d",sx,sy);
    &wire ntRef_ntWLSR_SEL_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntPRECHG_R_O_%d_%d",sx,sy);
    &wire ntRef_ntPRECHG_R_O = wire *strVar;

    sprintf(strVar,"ntNONDRM_END_LOCAL_%d_%d",sx,sy);
    &wire ntRef_ntNONDRM_END_LOCAL = wire *strVar;

    sprintf(strVar,"ntTIEL1_%d_%d",sx,sy);
    &wire ntRef_ntTIEL1 = wire *strVar;

    sprintf(strVar,"ntTIEL2_%d_%d",sx,sy);
    &wire ntRef_ntTIEL2 = wire *strVar;

    sprintf(strVar,"ntCLK_ADC_L_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC_L = wire *strVar;

    sprintf(strVar,"ntCLK_ADC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_ADC_R_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC_R = wire *strVar;

    sprintf(strVar,"ntCLK_USER_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USER_OUT = wire *strVar;

    sprintf(strVar,"ntDCI_INIT_%d_%d",sx,sy);
    &wire ntRef_ntDCI_INIT = wire *strVar;

    sprintf(strVar,"ntCLK_REL_OUT_M_%d_%d",sx,sy);
    &wire ntRef_ntCLK_REL_OUT_M = wire *strVar;

    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntGRS_N_OUT_M_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OUT_M = wire *strVar;

    sprintf(strVar,"ntGWEN_OUT_M_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OUT_M = wire *strVar;

    sprintf(strVar,"ntPOR_N_OUT_M_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OUT_M = wire *strVar;

    sprintf(strVar,"ntPUP_REL_N_OUT_M_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OUT_M = wire *strVar;

    sprintf(strVar,"ntTIE_LO_1V1_%d_%d",sx,sy);
    &wire ntRef_ntTIE_LO_1V1 = wire *strVar;

    sprintf(strVar,"ntBUS_BSCAN_OUTL_%d_%d",sx,sy);
    &wire ntRef_ntBUS_BSCAN_OUTL[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntBUS_BSCAN_OUTM_%d_%d",sx,sy);
    &wire ntRef_ntBUS_BSCAN_OUTM[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntBUS_BSCAN_OUTR_%d_%d",sx,sy);
    &wire ntRef_ntBUS_BSCAN_OUTR[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntBUS_GSEB_OUTL_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUTL[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntBUS_GSEB_OUTR_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUTR[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntBUS_WLSR_OUTL_%d_%d",sx,sy);
    &wire ntRef_ntBUS_WLSR_OUTL[12:0] = wire *strVar[12:0];

    sprintf(strVar,"ntBUS_WLSR_OUTR_%d_%d",sx,sy);
    &wire ntRef_ntBUS_WLSR_OUTR[12:0] = wire *strVar[12:0];

    sprintf(strVar,"ntDATA_L_1_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_1_NEXT[2175:0] = wire *strVar[2175:0];

    sprintf(strVar,"ntDATAN_L_1_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_1_NEXT[2175:0] = wire *strVar[2175:0];

    sprintf(strVar,"ntDATA_L_2_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntDATA_L_2_NEXT[2175:0] = wire *strVar[2175:0];

    sprintf(strVar,"ntDATAN_L_2_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntDATAN_L_2_NEXT[2175:0] = wire *strVar[2175:0];

    sprintf(strVar, "BLSR_PGL200ES_RD_TILE_%d_%d", sx, sy);
    
    device BLSR_PGL200ES_RD_TILE *strVar
         port map (
      POR_N_OL         => ntRef_ntPOR_N_OL,        
      PROG_ON_O        => ntRef_ntPROG_ON_O,       
      PROG_ON_R_O      => ntRef_ntPROG_ON_R_O,     
      NONDRM_REG_INC_O => ntRef_ntNONDRM_REG_INC_O,
      PRECHG_O         => ntRef_ntPRECHG_O,        
      ERASE_R_O        => ntRef_ntERASE_R_O,       
      COL_R_N_O        => ntRef_ntCOL_R_N_O,       
      WL_ON_O          => ntRef_ntWL_ON_O,         
      COL_IN_O         => ntRef_ntCOL_IN_O,        
      POR_N_OR         => ntRef_ntPOR_N_OR,        
      DSROUTTO_CONFIG  => ntRef_ntDSROUTTO_CONFIG, 
      BLSR_SEL_O       => ntRef_ntBLSR_SEL_O,      
      CLKOUT_M         => ntRef_ntCLKOUT_M,        
      COL_L_N_O        => ntRef_ntCOL_L_N_O,       
      NONDRM_END_O     => ntRef_ntNONDRM_END_O,    
      WLSR_REF         => ntRef_ntWLSR_REF,        
      PD_OUT           => ntRef_ntPD_OUT,          
      REGION_RW_EN_O   => ntRef_ntREGION_RW_EN_O,  
      DATA             => ntRef_ntDATA,            
      COL_INC_O        => ntRef_ntCOL_INC_O,       
      DATA_TO_NEXT     => ntRef_ntDATA_TO_NEXT,    
      TYPE_O           => ntRef_ntTYPE_O,          
      READ_O           => ntRef_ntREAD_O,          
      RSTN_O           => ntRef_ntRSTN_O,          
      POR_ERASE_N_O    => ntRef_ntPOR_ERASE_N_O,   
      FRAME_ADDR_O     => ntRef_ntFRAME_ADDR_O,    
      PUB_OUT          => ntRef_ntPUB_OUT,         
      DATAN            => ntRef_ntDATAN,           
      ERASE_EN_O       => ntRef_ntERASE_EN_O,      
      COL_L_O          => ntRef_ntCOL_L_O,         
      MCLKB_O          => ntRef_ntMCLKB_O,         
      MCLKB_OL         => ntRef_ntMCLKB_OL,        
      MCLKB_OR         => ntRef_ntMCLKB_OR,        
      MCE_O            => ntRef_ntMCE_O,           
      MCE_OL           => ntRef_ntMCE_OL,          
      MCE_OR           => ntRef_ntMCE_OR,          
      MWR_O            => ntRef_ntMWR_O,           
      MWR_OL           => ntRef_ntMWR_OL,          
      MWR_OR           => ntRef_ntMWR_OR,          
      PROG_CAP_O       => ntRef_ntPROG_CAP_O,      
      RDBK_CAP_O       => ntRef_ntRDBK_CAP_O,      
      COL_R_O          => ntRef_ntCOL_R_O,         
      WLSR_SEL_O       => ntRef_ntWLSR_SEL_O,      
      PRECHG_R_O       => ntRef_ntPRECHG_R_O,      
      NONDRM_END_LOCAL => ntRef_ntNONDRM_END_LOCAL,
      TIEL1            => ntRef_ntTIEL1,           
      TIEL2            => ntRef_ntTIEL2,           
      CLK_ADC_L        => ntRef_ntCLK_ADC_L,       
      CLK_ADC_OUT      => ntRef_ntCLK_ADC_OUT,     
      CLK_ADC_R        => ntRef_ntCLK_ADC_R,       
      CLK_USER_OUT     => ntRef_ntCLK_USER_OUT,    
      DCI_INIT         => ntRef_ntDCI_INIT,        
      CLK_REL_OUT_M    => ntRef_ntCLK_REL_OUT_M,   
      GLOGEN_OUT       => ntRef_ntGLOGEN_OUT,      
      GRS_N_OUT_M      => ntRef_ntGRS_N_OUT_M,     
      GWEN_OUT_M       => ntRef_ntGWEN_OUT_M,      
      POR_N_OUT_M      => ntRef_ntPOR_N_OUT_M,     
      PUP_REL_N_OUT_M  => ntRef_ntPUP_REL_N_OUT_M, 
      TIE_LO_1V1       => ntRef_ntTIE_LO_1V1,      
      BUS_BSCAN_OUTL   => ntRef_ntBUS_BSCAN_OUTL,  
      BUS_BSCAN_OUTM   => ntRef_ntBUS_BSCAN_OUTM,  
      BUS_BSCAN_OUTR   => ntRef_ntBUS_BSCAN_OUTR,  
      BUS_GSEB_OUTL    => ntRef_ntBUS_GSEB_OUTL,   
      BUS_GSEB_OUTR    => ntRef_ntBUS_GSEB_OUTR,   
      BUS_WLSR_OUTL    => ntRef_ntBUS_WLSR_OUTL,   
      BUS_WLSR_OUTR    => ntRef_ntBUS_WLSR_OUTR,   
      DATA_L_1_NEXT    => ntRef_ntDATA_L_1_NEXT,   
      DATAN_L_1_NEXT   => ntRef_ntDATAN_L_1_NEXT,  
      DATA_L_2_NEXT    => ntRef_ntDATA_L_2_NEXT,   
      DATAN_L_2_NEXT   => ntRef_ntDATAN_L_2_NEXT
                  )
        @([sx,sy]);
        
}// end of function place_blsr_rd_tile
/********************************************************************************
********************************************************************************/

function place_wlsr_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;
    
    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);    
    &wire ntRef_ntCOL_INC_OUT = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);       
    &wire ntRef_ntCLK_OUTT[7:0] = wire *strVar[7:0]    /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);        
    &wire ntRef_ntCLK_OUTB[7:0] = wire *strVar[7:0]    /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    //GLOBAL SIGNAL
    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[27:0] = wire *strVar[27:0];

    sprintf(strVar,"ntCOL_SEL_CCS_%d_%d",sx,sy);
    &wire ntRef_ntCOL_SEL_CCS = wire *strVar;

    sprintf(strVar,"ntBUS_GSEB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUT[5:0] = wire *strVar[5:0];

    sprintf(strVar, "WLSR_TILE_%d_%d", sx, sy);
    
    device WLSR_TILE *strVar
         port map (
                    CLK_OUTT    => ntRef_ntCLK_OUTT,
                    CLK_OUTB    => ntRef_ntCLK_OUTB,

                    BUS_GSEB_OUT     => ntRef_ntBUS_GSEB_OUT,
                    GLOGEN_OUT       => ntRef_ntGLOGEN_OUT,
                    CS_OUT           => ntRef_ntCS_OUT,
                    COL_INC_OUT      => ntRef_ntCOL_INC_OUT,
                    ADDR             => ntRef_ntADDR,
                    COL_SEL_CCS      => ntRef_ntCOL_SEL_CCS
                  )
        @([sx,sy]);
        
}// end of function place_wlsr_tile
/********************************************************************************
********************************************************************************/
function place_wlsr2_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[7:0] = wire *strVar[7:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[7:0] = wire *strVar[7:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_USCM_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USCM_BUF[29:0] = wire *strVar[29:0]   /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLKG_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLKG_OUT = wire *strVar             /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;


    //GLOBAL SIGNAL
    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);    
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[27:0] = wire *strVar[27:0];

    sprintf(strVar,"ntCOL_SEL_CCS_%d_%d",sx,sy);    
    &wire ntRef_ntCOL_SEL_CCS = wire *strVar;   

    sprintf(strVar,"ntTIE_LO_1V1_%d_%d",sx,sy);    
    &wire ntRef_ntTIE_LO_1V1 = wire *strVar; 

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);    
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar,"ntCAL_DONE_OUT_%d_%d",sx,sy);    
    &wire ntRef_ntCAL_DONE_OUT = wire *strVar;

    sprintf(strVar,"ntBUS_GSEB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUT[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntBUS1_CLK_L_%d_%d",sx,sy);
    &wire ntRef_ntBUS1_CLK_L[8:0] = wire *strVar[8:0]       /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntBUS1_CLK_R_%d_%d",sx,sy);
    &wire ntRef_ntBUS1_CLK_R[8:0] = wire *strVar[8:0]       /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar, "WLSR2_TILE_%d_%d", sx, sy);
    
    device WLSR2_TILE *strVar
         port map (
                    CLK_OUTT         => ntRef_ntCLK_OUTT,
                    CLK_OUTB         => ntRef_ntCLK_OUTB,
                    CLK_USCM_BUF     => ntRef_ntCLK_USCM_BUF,
                    CLKG_OUT         => ntRef_ntCLKG_OUT,

                    BUS_GSEB_OUT     => ntRef_ntBUS_GSEB_OUT,
                    BUS1_CLK_L       => ntRef_ntBUS1_CLK_L,
                    BUS1_CLK_R       => ntRef_ntBUS1_CLK_R,

                    GLOGEN_OUT       => ntRef_ntGLOGEN_OUT,
                    CS_OUT           => ntRef_ntCS_OUT,
                    COL_INC_OUT      => ntRef_ntCOL_INC_OUT,
                    ADDR             => ntRef_ntADDR,
                    COL_SEL_CCS      => ntRef_ntCOL_SEL_CCS,
                    TIE_LO_1V1       => ntRef_ntTIE_LO_1V1,
                    TIEHI            => ntRef_ntTIEHI
//                    CAL_DONE_OUT     => ntRef_ntCAL_DONE_OUT
                  )
        @([sx,sy]);
        
}//end of function place_wlsr2_tile
/********************************************************************************
********************************************************************************/
function place_wlsr1_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;


    sprintf(strVar,"ntBUS1_CLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS1_CLK_OUT[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntBUS2_CLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS2_CLK_OUT[9:0] = wire *strVar[9:0];

    sprintf(strVar,"ntBUS_BSCAN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_BSCAN_OUT[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntBUS_GSEB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUT[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[27:0] = wire *strVar[27:0];

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntTIE_LO_1V1_%d_%d",sx,sy);
    &wire ntRef_ntTIE_LO_1V1 = wire *strVar;

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar,"ntCOL_SEL_CCS_%d_%d",sx,sy);
    &wire ntRef_ntCOL_SEL_CCS = wire *strVar;

    sprintf(strVar,"ntCLK_GLOBAL_R_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_R[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntCLK_GLOBAL_L_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_L[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntCAL_DONE_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCAL_DONE_OUT = wire *strVar;

    sprintf(strVar,"ntCLKG_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLKG_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_HRX_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_HRX_OUT[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntCLK_HREF_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_HREF_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_ADC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC_OUT = wire *strVar;



    sprintf(strVar, "WLSR1_TILE_%d_%d", sx, sy);
    
    device WLSR1_TILE *strVar
         port map ( 
                      BUS1_CLK_OUT  => ntRef_ntBUS1_CLK_OUT, 
                      BUS2_CLK_OUT  => ntRef_ntBUS2_CLK_OUT, 
                      BUS_BSCAN_OUT => ntRef_ntBUS_BSCAN_OUT,
                      BUS_GSEB_OUT  => ntRef_ntBUS_GSEB_OUT, 
                      CLK_OUTB      => ntRef_ntCLK_OUTB,     
                      CLK_OUTT      => ntRef_ntCLK_OUTT,     
                      GLOGEN_OUT    => ntRef_ntGLOGEN_OUT,   
                      ADDR          => ntRef_ntADDR,         
                      COL_INC_OUT   => ntRef_ntCOL_INC_OUT,  
                      TIE_LO_1V1    => ntRef_ntTIE_LO_1V1,   
                      CS_OUT        => ntRef_ntCS_OUT,       
                      TIEHI         => ntRef_ntTIEHI,        
                      COL_SEL_CCS   => ntRef_ntCOL_SEL_CCS,  
                      CLK_GLOBAL_R  => ntRef_ntCLK_GLOBAL_R, 
                      CLK_GLOBAL_L  => ntRef_ntCLK_GLOBAL_L, 
                      CAL_DONE_OUT  => ntRef_ntCAL_DONE_OUT, 
                      CLKG_OUT      => ntRef_ntCLKG_OUT,     
                      CLK_HRX_OUT   => ntRef_ntCLK_HRX_OUT,  
                      CLK_HREF_OUT  => ntRef_ntCLK_HREF_OUT, 
                      CLK_ADC_OUT   => ntRef_ntCLK_ADC_OUT
                  )
        @([sx,sy]);
        
}//end of function place_wlsr1_tile
/********************************************************************************
********************************************************************************/
function place_wlsr1b_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntBUS1_CLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS1_CLK_OUT[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntBUS2_CLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS2_CLK_OUT[9:0] = wire *strVar[9:0];

    sprintf(strVar,"ntBUS_BSCAN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_BSCAN_OUT[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntBUS_GSEB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUT[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[27:0] = wire *strVar[27:0];

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntTIE_LO_1V1_%d_%d",sx,sy);
    &wire ntRef_ntTIE_LO_1V1 = wire *strVar;

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar,"ntCOL_SEL_CCS_%d_%d",sx,sy);
    &wire ntRef_ntCOL_SEL_CCS = wire *strVar;

    sprintf(strVar,"ntCLK_GLOBALOUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBALOUT[15:0] = wire *strVar[15:0];

    sprintf(strVar,"ntBUS_WLSR_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_WLSR_OUT[12:0] = wire *strVar[12:0];

    sprintf(strVar,"ntMCE_O_%d_%d",sx,sy);
    &wire ntRef_ntMCE_O = wire *strVar;

    sprintf(strVar,"ntMWR_O_%d_%d",sx,sy);
    &wire ntRef_ntMWR_O = wire *strVar;

    sprintf(strVar,"ntMCLKB_O_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_O = wire *strVar;

    sprintf(strVar,"ntCOL_INC_O_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_O = wire *strVar;

    sprintf(strVar,"ntREGION_INC_O_%d_%d",sx,sy);
    &wire ntRef_ntREGION_INC_O = wire *strVar;

    sprintf(strVar,"ntREGION_END_O_%d_%d",sx,sy);
    &wire ntRef_ntREGION_END_O = wire *strVar;

    sprintf(strVar,"ntCLK_GLOBAL_R_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_R[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntCLK_GLOBAL_L_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_L[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntCAL_DONE_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCAL_DONE_OUT = wire *strVar;

    sprintf(strVar,"ntCLKG_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLKG_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_HRX_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_HRX_OUT[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntCLK_HREF_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_HREF_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_ADC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC_OUT = wire *strVar;

    sprintf(strVar, "WLSR1B_TILE_%d_%d", sx, sy);
    
    device WLSR1B_TILE *strVar
         port map ( 
                     BUS1_CLK_OUT  => ntRef_ntBUS1_CLK_OUT, 
                     BUS2_CLK_OUT  => ntRef_ntBUS2_CLK_OUT, 
                     BUS_BSCAN_OUT => ntRef_ntBUS_BSCAN_OUT,
                     BUS_GSEB_OUT  => ntRef_ntBUS_GSEB_OUT, 
                     CLK_OUTB      => ntRef_ntCLK_OUTB,     
                     CLK_OUTT      => ntRef_ntCLK_OUTT,     
                     GLOGEN_OUT    => ntRef_ntGLOGEN_OUT,   
                     ADDR          => ntRef_ntADDR,         
                     COL_INC_OUT   => ntRef_ntCOL_INC_OUT,  
                     TIE_LO_1V1    => ntRef_ntTIE_LO_1V1,   
                     CS_OUT        => ntRef_ntCS_OUT,       
                     TIEHI         => ntRef_ntTIEHI,        
                     COL_SEL_CCS   => ntRef_ntCOL_SEL_CCS,  
                     CLK_GLOBALOUT => ntRef_ntCLK_GLOBALOUT,
                     BUS_WLSR_OUT  => ntRef_ntBUS_WLSR_OUT, 
                     MCE_O         => ntRef_ntMCE_O,        
                     MWR_O         => ntRef_ntMWR_O,        
                     MCLKB_O       => ntRef_ntMCLKB_O,      
                     COL_INC_O     => ntRef_ntCOL_INC_O,    
                     REGION_INC_O  => ntRef_ntREGION_INC_O, 
                     REGION_END_O  => ntRef_ntREGION_END_O, 
                     CLK_GLOBAL_R  => ntRef_ntCLK_GLOBAL_R, 
                     CLK_GLOBAL_L  => ntRef_ntCLK_GLOBAL_L, 
                     CAL_DONE_OUT  => ntRef_ntCAL_DONE_OUT, 
                     CLKG_OUT      => ntRef_ntCLKG_OUT,     
                     CLK_HRX_OUT   => ntRef_ntCLK_HRX_OUT,  
                     CLK_HREF_OUT  => ntRef_ntCLK_HREF_OUT, 
                     CLK_ADC_OUT   => ntRef_ntCLK_ADC_OUT
                  )
        @([sx,sy]);
        
}//end of function place_wlsr1b_tile
/********************************************************************************
********************************************************************************/
function place_wlsra_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntBUS_GSEB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUT[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntTIE_LO_1V1_%d_%d",sx,sy);
    &wire ntRef_ntTIE_LO_1V1 = wire *strVar;

    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[23:0] = wire *strVar[23:0];

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntCOL_SEL_CCS_%d_%d",sx,sy);
    &wire ntRef_ntCOL_SEL_CCS = wire *strVar;

    sprintf(strVar,"ntREGION_INC_%d_%d",sx,sy);    
    &wire ntRef_ntREGION_INC = wire *strVar;

    sprintf(strVar, "WLSRA_TILE_%d_%d", sx, sy);
    
    device WLSRA_TILE *strVar
         port map (
                   BUS_GSEB_OUT => ntRef_ntBUS_GSEB_OUT,
                   TIE_LO_1V1   => ntRef_ntTIE_LO_1V1,  
                   CLK_OUTT     => ntRef_ntCLK_OUTT,    
                   GLOGEN_OUT   => ntRef_ntGLOGEN_OUT,  
                   CLK_OUTB     => ntRef_ntCLK_OUTB,    
                   CS_OUT       => ntRef_ntCS_OUT,      
                   ADDR         => ntRef_ntADDR,        
                   COL_INC_OUT  => ntRef_ntCOL_INC_OUT, 
                   REGION_INC   => ntRef_ntREGION_INC,
                   COL_SEL_CCS  => ntRef_ntCOL_SEL_CCS      
                   )
        @([sx,sy]);
        
}// end of function place_wlsra_tile

/********************************************************************************
********************************************************************************/
function place_wlsrd_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[7:0] = wire *strVar[7:0]    /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[7:0] = wire *strVar[7:0]    /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    //GLOBAL SIGNAL
    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);    
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[22:0] = wire *strVar[22:0];

    sprintf(strVar,"ntADDR_D_%d_%d",sx,sy);
    &wire ntRef_ntADDR_D = wire *strVar;

    sprintf(strVar,"ntREGION_INC_%d_%d",sx,sy);    
    &wire ntRef_ntREGION_INC = wire *strVar;

    sprintf(strVar,"ntCSDRM_MEM_O_%d_%d",sx,sy);    
    &wire ntRef_ntCSDRM_MEM_O = wire *strVar;

    sprintf(strVar,"ntMCE2DRM_%d_%d",sx,sy);
    &wire ntRef_ntMCE2DRM = wire *strVar;

    sprintf(strVar,"ntMCLKB2DRM_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB2DRM = wire *strVar;

    sprintf(strVar,"ntMWR2DRM_%d_%d",sx,sy);
    &wire ntRef_ntMWR2DRM = wire *strVar;

    sprintf(strVar,"ntBUS_GSEB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUT[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntCOL_SEL_CCS1_%d_%d",sx,sy);
    &wire ntRef_ntCOL_SEL_CCS1 = wire *strVar;

    sprintf(strVar,"ntCOL_SEL_CCS2_%d_%d",sx,sy);
    &wire ntRef_ntCOL_SEL_CCS2 = wire *strVar;

    sprintf(strVar, "WLSRD_TILE_%d_%d", sx, sy);
    
    device WLSRD_TILE *strVar
         port map (
                    CLK_OUTT    => ntRef_ntCLK_OUTT,
                    CLK_OUTB    => ntRef_ntCLK_OUTB,

                    BUS_GSEB_OUT     => ntRef_ntBUS_GSEB_OUT,
                    GLOGEN_OUT       => ntRef_ntGLOGEN_OUT,
                    CS_OUT           => ntRef_ntCS_OUT,
                    COL_INC_OUT      => ntRef_ntCOL_INC_OUT,
                    COL_SEL_CCS1     => ntRef_ntCOL_SEL_CCS1,
                    COL_SEL_CCS2     => ntRef_ntCOL_SEL_CCS2,

                    MCE2DRM          => ntRef_ntMCE2DRM,
                    MCLKB2DRM        => ntRef_ntMCLKB2DRM,
                    MWR2DRM          => ntRef_ntMWR2DRM,

//                    REGION_INC       => ntRef_ntREGION_INC,
                    ADDR             => ntRef_ntADDR,
                    ADDR_D           => ntRef_ntADDR_D,
                    CSDRM_MEM_O      => ntRef_ntCSDRM_MEM_O
                  )
        @([sx,sy]);
        
}// end of function place_wlsrd_tile
/********************************************************************************
********************************************************************************/
function place_rlybufs5_tile(unsigned int tx,ty)
{
    int sx,sy;
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;
    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntTIEH_%d_%d",sx,sy);
    &wire ntRef_ntTIEH = wire *strVar;

    sprintf(strVar,"RLYBUFS5_TILE_%d_%d",sx,sy);
    device RLYBUFS5_TILE *strVar
    port map
      (
          CLK_OUTT    => ntRef_ntCLK_OUTT,
          CLK_OUTB    => ntRef_ntCLK_OUTB,
          TIEH       => ntRef_ntTIEH
      )
      @ ([sx,sy]);    

      STRUCT inc_spec_TIEHI_SRB incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      string direct_SRB;

      foreach incVar(inc_TIEHI_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;

          connect(<pin *pin_SRB of<device SRB_TILE@[sx-2,sy]>> =>  <wire *pin_logic_device of <device SRB_TILE @[sx-2,sy]>>);
       }

}
/********************************************************************************
********************************************************************************/
function place_rlybufs_tile(unsigned int tx,ty)
{
    int sx,sy;
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;
    sprintf(strVar,"ntCLK_PREGMUX_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PREGMUX_OUT[15:0] = wire *strVar[15:0];

    sprintf(strVar,"ntCLK_USCM_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USCM_OUT[29:0] = wire *strVar[29:0];

    sprintf(strVar,"ntCLK_ADC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_USER_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USER_OUT = wire *strVar;

    sprintf(strVar,"ntMCLKB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OUT = wire *strVar;

    sprintf(strVar,"ntDCI_INIT_OUT_%d_%d",sx,sy);
    &wire ntRef_ntDCI_INIT_OUT = wire *strVar;

    sprintf(strVar,"RLYBUFS_TILE_%d_%d",sx,sy);
    device RLYBUFS_TILE *strVar
    port map
      (
          CLK_PREGMUX_OUT    => ntRef_ntCLK_PREGMUX_OUT,
          CLK_USCM_OUT       => ntRef_ntCLK_USCM_OUT
      )
      @ ([sx,sy]);   
 
}//end of function place_rlybufs_tile
/********************************************************************************
********************************************************************************/
function place_iockgatedll_tile(unsigned int tx,ty,s_hmemc,n_hmemc,flag)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntCLK_PIO_P_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_P_OUT_0 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_PIO_N_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_N_OUT_0 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_PIO_P_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_P_OUT_1 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_PIO_N_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_N_OUT_1 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntIOCKDLY_COUT_P_1_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_P_1 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIOCKDLY_COUT_N_1_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_N_1 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIOCKDLY_COUT_P_0_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_P_0 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIOCKDLY_COUT_N_0_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_N_0 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDLL_TIHI_%d_%d",sx,sy);    
    &wire ntRef_ntDLL_TIHI = wire *strVar; 

    sprintf(strVar,"ntTIEH_%d_%d",sx,sy);    
    &wire ntRef_ntTIEH = wire *strVar; 

    sprintf(strVar,"ntCTRL_CODE_%d_%d",sx,sy);
    &wire ntRef_ntCTRL_CODE[7:0] = wire *strVar[7:0]   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCTRL_CODE_T_%d_%d",sx,sy);
    &wire ntRef_ntCTRL_CODE_T[7:0] = wire *strVar[7:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDIV_OSCCLK_T_%d_%d",sx,sy);
    &wire ntRef_ntDIV_OSCCLK_T = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntDIV_CLKIN_T_%d_%d",sx,sy);
    &wire ntRef_ntDIV_CLKIN_T = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntLOCK_%d_%d",sx,sy);
    &wire ntRef_ntLOCK = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_IOCK_B_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOCK_B[1:0] = wire *strVar[1:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_IOL_C_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOL_C[1:0] = wire *strVar[1:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_IOCK_T_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOCK_T[1:0] = wire *strVar[1:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLKG_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLKG_OUT = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_ADC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC_OUT = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntCOL_SEL_CCS_%d_%d",sx,sy);
    &wire ntRef_ntCOL_SEL_CCS = wire *strVar;

    sprintf(strVar,"ntGOUTEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_OUT = wire *strVar;

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntREGION_INC_%d_%d",sx,sy);
    &wire ntRef_ntREGION_INC = wire *strVar;

    sprintf(strVar,"ntCLK_XTAL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_XTAL = wire *strVar;

    sprintf(strVar,"ntS11_PAD_STATE_OUT_%d_%d",sx,sy);
    &wire ntRef_ntS11_PAD_STATE_OUT = wire *strVar;

    sprintf(strVar,"ntRCLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntRCLK_OUT[3:0] = wire *strVar[3:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCAL_DONE_OUT_%d_%d",sx,sy);    
    &wire ntRef_ntCAL_DONE_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_A_IOL_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_A_IOL_OUT[1:0] = wire *strVar[1:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_PLL_EXT_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PLL_EXT_OUT = wire *strVar  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLKOUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTT[7:0] = wire *strVar[7:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLKOUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTB[7:0] = wire *strVar[7:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[23:0] = wire *strVar[23:0];

    sprintf(strVar,"ntBUS2_CLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS2_CLK_OUT[9:0] = wire *strVar[9:0]                  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntBUS_BSCAN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_BSCAN_OUT[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntBUS_GSEB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUT[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntCLK_PIO0_P_TBUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO0_P_TBUF = wire *strVar  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLOCK_DR_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_OUT = wire *strVar;

    sprintf(strVar,"ntGLOGEN_FB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_FB_OUT = wire *strVar;

    sprintf(strVar,"ntDLL_TILO_%d_%d",sx,sy);
    &wire ntRef_ntDLL_TILO = wire *strVar;

    sprintf(strVar,"ntTIEHI_IBM_0_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI_IBM_0 = wire *strVar;

    sprintf(strVar,"ntTIEHI_IBM_1_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI_IBM_1 = wire *strVar;

    sprintf(strVar,"ntSIG_IBM_0_OUT_%d_%d",sx,sy);
    &wire ntRef_ntSIG_IBM_0_OUT[6:0] = wire *strVar[6:0];

    sprintf(strVar,"ntSIG_IBM_1_OUT_%d_%d",sx,sy);
    &wire ntRef_ntSIG_IBM_1_OUT[17:0] = wire *strVar[17:0];

    sprintf(strVar, "IOCKGATEDLL_TILE_%d_%d", sx, sy);
    device IOCKGATEDLL_TILE *strVar
         port map(
                    BUS2_CLK_OUT     => ntRef_ntBUS2_CLK_OUT,
                    DLL_TIHI         => ntRef_ntDLL_TIHI,
                    TIEH             => ntRef_ntTIEH,
                    ADDR             => ntRef_ntADDR,

                    CTRL_CODE      => ntRef_ntCTRL_CODE,
                    CTRL_CODE_T    => ntRef_ntCTRL_CODE_T,
                    DIV_OSCCLK_T   => ntRef_ntDIV_OSCCLK_T,
                    DIV_CLKIN_T    => ntRef_ntDIV_CLKIN_T,
                    LOCK           => ntRef_ntLOCK,
                    CLK_IOCK_B      => ntRef_ntCLK_IOCK_B,
                    CLK_IOCK_T      => ntRef_ntCLK_IOCK_T,

                    CLK_PIO0_P_TBUF  => ntRef_ntCLK_PIO0_P_TBUF,
                    CLK_PIO_P_OUT_0  => ntRef_ntCLK_PIO_P_OUT_0,
                    CLK_PIO_N_OUT_0  => ntRef_ntCLK_PIO_N_OUT_0,
                    CLK_PIO_P_OUT_1  => ntRef_ntCLK_PIO_P_OUT_1,
                    CLK_PIO_N_OUT_1  => ntRef_ntCLK_PIO_N_OUT_1,
                    IOCKDLY_COUT_P_0 => ntRef_ntIOCKDLY_COUT_P_0,
                    IOCKDLY_COUT_N_0 => ntRef_ntIOCKDLY_COUT_N_0,
                    IOCKDLY_COUT_P_1 => ntRef_ntIOCKDLY_COUT_P_1,
                    IOCKDLY_COUT_N_1 => ntRef_ntIOCKDLY_COUT_N_1,

                    RCLK_OUT        => ntRef_ntRCLK_OUT,
                    CLK_PLL_EXT_OUT => ntRef_ntCLK_PLL_EXT_OUT,
                    CLKOUTT         => ntRef_ntCLKOUTT,
                    CLKOUTB         => ntRef_ntCLKOUTB,

                    BUS_BSCAN_OUT    => ntRef_ntBUS_BSCAN_OUT,
                    BUS_GSEB_OUT     => ntRef_ntBUS_GSEB_OUT,

                    CLK_ADC_OUT      => ntRef_ntCLK_ADC_OUT,
                    CLOCK_DR_OUT     => ntRef_ntCLOCK_DR_OUT,
                    GLOGEN_FB_OUT    => ntRef_ntGLOGEN_FB_OUT,
                    S11_PAD_STATE_OUT=> ntRef_ntS11_PAD_STATE_OUT,
                    GLOGEN_OUT       => ntRef_ntGLOGEN_OUT,
                    COL_INC_OUT      => ntRef_ntCOL_INC_OUT,
                    COL_SEL_CCS      => ntRef_ntCOL_SEL_CCS,
                    CS_OUT           => ntRef_ntCS_OUT,
                    CAL_DONE_OUT     => ntRef_ntCAL_DONE_OUT,
                    TIEHI_IBM_0     => ntRef_ntTIEHI_IBM_0,
                    TIEHI_IBM_1     => ntRef_ntTIEHI_IBM_1,
                    REGION_INC     => ntRef_ntREGION_INC,
                    SIG_IBM_0_OUT     => ntRef_ntSIG_IBM_0_OUT,
                    SIG_IBM_1_OUT     => ntRef_ntSIG_IBM_1_OUT,
                    DLL_TILO         => ntRef_ntDLL_TILO
                  )
        @([sx,sy]);

    if(flag==1)
    {
      STRUCT inc_spec_IOCKGATEDLL incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB,ty_srb;
      int sx_srb,sy_srb;

      foreach incVar(inc_IOCKGATEDLL_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;

          ty_srb = (loc_SRB==0) ? ty : ty+2;
          sy_srb = ty_srb * NUM_GRID_Y;
          
          sx_srb = sx-2;

          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device IOCKGATEDLL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect
            (
              <pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE @ [sx_srb,sy_srb]>>
                                                                                                         : <wire *pin_logic_device of <device IOCKGATEDLL_TILE @[sx,sy]>>
            ); 
          }
      }

    }
    if(flag==0)
    {
        STRUCT inc_spec_IOCKGATEDLL_HALF incVar;
        string pin_SRB;
        string pin_logic_device;
        string attribute_IO;
        int loc_SRB,ty_srb;
        int sx_srb,sy_srb;

        foreach incVar(inc_IOCKGATEDLL_HALF_SRB_spec)
        {
            pin_SRB = incVar.port_name_SRB;
            pin_logic_device = incVar.port_name_device;
            attribute_IO = incVar.attribute_IO;
            loc_SRB = incVar.loc_SRB;

            ty_srb = ty - loc_SRB;
            sy_srb = ty_srb * NUM_GRID_Y;
            
            sx_srb = (!(loc_SRB!=0&&attribute_IO=="O")) ? sx-2 : sx ;

            if(attribute_IO =="I")
            { 
                connect(<pin *pin_logic_device of <device IOCKGATEDLL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
            }
            else
            {
                if(loc_SRB==0) 
                {
                    connect
                    (
                        <pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE @ [sx_srb,sy_srb]>>
                                                                                                                 : <wire *pin_logic_device of <device IOCKGATEDLL_TILE @[sx,sy]>>
                    ); 
                }
                else
                {
                    connect
                    (
                        <pin *pin_SRB of<device CRAMSL2_TILE@[sx_srb,sy_srb]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device CRAMSL2_TILE @ [sx_srb,sy_srb]>>
                                                                                                                 : <wire *pin_logic_device of <device IOCKGATEDLL_TILE @[sx,sy]>>
                    );                    
                }
            }
        }
    }

 
       connect(
                 <pin SIG_IBM_0[4] of <device IOCKGATEDLL_TILE @[sx,sy]>> => <wire TIEHI_IBM_0 of <device IOCKGATEDLL_TILE @[sx,sy]>>,
                 <pin SIG_IBM_1[10] of <device IOCKGATEDLL_TILE @[sx,sy]>> => <wire TIEHI_IBM_1 of <device IOCKGATEDLL_TILE @[sx,sy]>>,
                 <pin SIG_IBM_1[11] of <device IOCKGATEDLL_TILE @[sx,sy]>> => <wire TIEHI_IBM_1 of <device IOCKGATEDLL_TILE @[sx,sy]>>,
                 <pin SIG_IBM_1[16] of <device IOCKGATEDLL_TILE @[sx,sy]>> => <wire TIEHI_IBM_1 of <device IOCKGATEDLL_TILE @[sx,sy]>>
               ); 
        
}// end of function place_iockgatedll_tile
/********************************************************************************
********************************************************************************/
function place_iockgatedll2_tile(unsigned int tx,ty,delta_x)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntS11_PAD_STATE_OUT_%d_%d",sx,sy);
    &wire ntRef_ntS11_PAD_STATE_OUT = wire *strVar;

    sprintf(strVar,"ntTIE_LO_1V1_%d_%d",sx,sy);
    &wire ntRef_ntTIE_LO_1V1 = wire *strVar;

    sprintf(strVar,"ntCLK_ADC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_PLL_EXT_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PLL_EXT_OUT = wire *strVar;

    sprintf(strVar,"ntIOCKDLY_COUT_N_1_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_N_1 = wire *strVar;

    sprintf(strVar,"ntLOCK_%d_%d",sx,sy);
    &wire ntRef_ntLOCK = wire *strVar;

    sprintf(strVar,"ntCLK_PIO0_P_TBUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO0_P_TBUF = wire *strVar;

    sprintf(strVar,"ntGLOGEN_FB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_FB_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_IOCK_B_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOCK_B[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntCLKOUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTT[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntDIV_CLKIN_T_%d_%d",sx,sy);
    &wire ntRef_ntDIV_CLKIN_T = wire *strVar;

    sprintf(strVar,"ntCLK_IOCK_T_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOCK_T[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntDLL_TIHI_%d_%d",sx,sy);
    &wire ntRef_ntDLL_TIHI = wire *strVar;

    sprintf(strVar,"ntIOCKDLY_COUT_P_0_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_P_0 = wire *strVar;

    sprintf(strVar,"ntIOCKDLY_COUT_P_1_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_P_1 = wire *strVar;

    sprintf(strVar,"ntTIEL_%d_%d",sx,sy);
    &wire ntRef_ntTIEL = wire *strVar;

    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[23:0] = wire *strVar[23:0];

    sprintf(strVar,"ntCLOCK_DR_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_OUT = wire *strVar;

    sprintf(strVar,"ntTIEH_%d_%d",sx,sy);
    &wire ntRef_ntTIEH = wire *strVar;

    sprintf(strVar,"ntCLKOUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTB[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntDLL_TILO_%d_%d",sx,sy);
    &wire ntRef_ntDLL_TILO = wire *strVar;

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntDIV_OSCCLK_T_%d_%d",sx,sy);
    &wire ntRef_ntDIV_OSCCLK_T = wire *strVar;

    sprintf(strVar,"ntIOCKDLY_COUT_N_0_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_N_0 = wire *strVar;

    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntCAL_DONE_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCAL_DONE_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_IODIV_HMEMC_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IODIV_HMEMC[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntRCLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntRCLK_OUT[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntCTRL_CODE_%d_%d",sx,sy);
    &wire ntRef_ntCTRL_CODE[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCTRL_CODE_T_%d_%d",sx,sy);
    &wire ntRef_ntCTRL_CODE_T[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntBUS2_CLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS2_CLK_OUT[9:0] = wire *strVar[9:0];

    sprintf(strVar,"ntBUS_BSCAN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_BSCAN_OUT[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntBUS_GSEB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUT[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntCLK_PIO_P_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_P_OUT_0 = wire *strVar;

    sprintf(strVar,"ntCLK_PIO_N_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_N_OUT_0 = wire *strVar;

    sprintf(strVar,"ntCLK_PIO_P_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_P_OUT_1 = wire *strVar;

    sprintf(strVar,"ntCLK_PIO_N_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_N_OUT_1 = wire *strVar;

    sprintf(strVar,"ntSIG_IBM_1_OUT_%d_%d",sx,sy);
    &wire ntRef_ntSIG_IBM_1_OUT[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntSIG_IBM_0_OUT_%d_%d",sx,sy);
    &wire ntRef_ntSIG_IBM_0_OUT[6:0] = wire *strVar[6:0];

    sprintf(strVar,"ntTIEHI_IBM_0_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI_IBM_0 = wire *strVar;

    sprintf(strVar,"ntTIEHI_IBM_1_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI_IBM_1 = wire *strVar;

    sprintf(strVar,"ntREGION_INC_%d_%d",sx,sy);
    &wire ntRef_ntREGION_INC = wire *strVar;

    sprintf(strVar,"ntCOL_SEL_CCS_%d_%d",sx,sy);
    &wire ntRef_ntCOL_SEL_CCS = wire *strVar;

    sprintf(strVar, "IOCKGATEDLL2_TILE_%d_%d", sx, sy);
    device IOCKGATEDLL2_TILE *strVar
         port map(
                      S11_PAD_STATE_OUT => ntRef_ntS11_PAD_STATE_OUT,
                      TIE_LO_1V1        => ntRef_ntTIE_LO_1V1,       
                      CLK_ADC_OUT       => ntRef_ntCLK_ADC_OUT,      
                      CLK_PLL_EXT_OUT   => ntRef_ntCLK_PLL_EXT_OUT,  
                      IOCKDLY_COUT_N_1  => ntRef_ntIOCKDLY_COUT_N_1, 
                      LOCK              => ntRef_ntLOCK,             
                      CLK_PIO0_P_TBUF   => ntRef_ntCLK_PIO0_P_TBUF,  
                      GLOGEN_FB_OUT     => ntRef_ntGLOGEN_FB_OUT,    
                      CLK_IOCK_B        => ntRef_ntCLK_IOCK_B,       
                      CLKOUTT           => ntRef_ntCLKOUTT,          
                      DIV_CLKIN_T       => ntRef_ntDIV_CLKIN_T,      
                      CLK_IOCK_T        => ntRef_ntCLK_IOCK_T,       
                      DLL_TIHI          => ntRef_ntDLL_TIHI,         
                      IOCKDLY_COUT_P_0  => ntRef_ntIOCKDLY_COUT_P_0, 
                      IOCKDLY_COUT_P_1  => ntRef_ntIOCKDLY_COUT_P_1, 
                      TIEL              => ntRef_ntTIEL,             
                      ADDR              => ntRef_ntADDR,             
                      CLOCK_DR_OUT      => ntRef_ntCLOCK_DR_OUT,     
                      TIEH              => ntRef_ntTIEH,             
                      CLKOUTB           => ntRef_ntCLKOUTB,          
                      DLL_TILO          => ntRef_ntDLL_TILO,         
                      COL_INC_OUT       => ntRef_ntCOL_INC_OUT,      
                      DIV_OSCCLK_T      => ntRef_ntDIV_OSCCLK_T,     
                      IOCKDLY_COUT_N_0  => ntRef_ntIOCKDLY_COUT_N_0, 
                      GLOGEN_OUT        => ntRef_ntGLOGEN_OUT,       
                      CAL_DONE_OUT      => ntRef_ntCAL_DONE_OUT,     
                      CLK_IODIV_HMEMC   => ntRef_ntCLK_IODIV_HMEMC,  
                      RCLK_OUT          => ntRef_ntRCLK_OUT,         
                      CS_OUT            => ntRef_ntCS_OUT,           
                      CTRL_CODE         => ntRef_ntCTRL_CODE,        
                      CTRL_CODE_T       => ntRef_ntCTRL_CODE_T,      
                      BUS2_CLK_OUT      => ntRef_ntBUS2_CLK_OUT,     
                      BUS_BSCAN_OUT     => ntRef_ntBUS_BSCAN_OUT,    
                      BUS_GSEB_OUT      => ntRef_ntBUS_GSEB_OUT,     
                      CLK_PIO_P_OUT_0   => ntRef_ntCLK_PIO_P_OUT_0,  
                      CLK_PIO_N_OUT_0   => ntRef_ntCLK_PIO_N_OUT_0,  
                      CLK_PIO_P_OUT_1   => ntRef_ntCLK_PIO_P_OUT_1,  
                      CLK_PIO_N_OUT_1   => ntRef_ntCLK_PIO_N_OUT_1,  
                      SIG_IBM_1_OUT     => ntRef_ntSIG_IBM_1_OUT,    
                      SIG_IBM_0_OUT     => ntRef_ntSIG_IBM_0_OUT,    
                      TIEHI_IBM_0       => ntRef_ntTIEHI_IBM_0,      
                      TIEHI_IBM_1       => ntRef_ntTIEHI_IBM_1,      
                      REGION_INC       => ntRef_ntREGION_INC,      
                      COL_SEL_CCS       => ntRef_ntCOL_SEL_CCS
                  )
        @([sx,sy]);

      STRUCT inc_spec_IOCKGATEDLL_HALF incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB,ty_srb;
      int sx_srb,sy_srb;

      foreach incVar(inc_IOCKGATEDLL_HALF_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;

          ty_srb = (loc_SRB==0) ? ty : ty+2;
          sy_srb = ty_srb * NUM_GRID_Y;
          
          sx_srb = (loc_SRB==0) ? sx-2 : (delta_x + 1)* NUM_GRID_X;

          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device IOCKGATEDLL2_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect
            (
              <pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE @ [sx_srb,sy_srb]>>
                                                                                                         : <wire *pin_logic_device of <device IOCKGATEDLL2_TILE @[sx,sy]>>
            ); 
          }
      }

 
       connect(
                 <pin SIG_IBM_0[4] of <device IOCKGATEDLL2_TILE @[sx,sy]>> => <wire TIEHI_IBM_0 of <device IOCKGATEDLL2_TILE @[sx,sy]>>,
                 <pin SIG_IBM_1[10] of <device IOCKGATEDLL2_TILE @[sx,sy]>> => <wire TIEHI_IBM_1 of <device IOCKGATEDLL2_TILE @[sx,sy]>>,
                 <pin SIG_IBM_1[11] of <device IOCKGATEDLL2_TILE @[sx,sy]>> => <wire TIEHI_IBM_1 of <device IOCKGATEDLL2_TILE @[sx,sy]>>,
                 <pin SIG_IBM_1[16] of <device IOCKGATEDLL2_TILE @[sx,sy]>> => <wire TIEHI_IBM_1 of <device IOCKGATEDLL2_TILE @[sx,sy]>>
               ); 
        
}// end of function place_iockgatedll2_tile
/*******************************************************************
********************************************************************/
function place_ccs_tile_pgl35es
(
  unsigned int tx,
  unsigned int ty
)
{
  int sx = tx*NUM_GRID_X + 2;
  int sy = ty*NUM_GRID_X;

    string strVar;

    sprintf(strVar,"ntINIT_COMPLETE_%d_%d",sx,sy);
    &wire ntRef_ntINIT_COMPLETE = wire *strVar;

    sprintf(strVar,"ntCLOCKDR_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR = wire *strVar;

    sprintf(strVar,"ntTDI_CCS_%d_%d",sx,sy);
    &wire ntRef_ntTDI_CCS = wire *strVar;

    sprintf(strVar,"ntBUS_BSCAN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_BSCAN_OUT[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntTCK1_%d_%d",sx,sy);
    &wire ntRef_ntTCK1 = wire *strVar;

    sprintf(strVar,"ntTMS1_%d_%d",sx,sy);
    &wire ntRef_ntTMS1 = wire *strVar;

    sprintf(strVar,"ntTDI1_%d_%d",sx,sy);
    &wire ntRef_ntTDI1 = wire *strVar;

    sprintf(strVar,"ntJRTI1_%d_%d",sx,sy);
    &wire ntRef_ntJRTI1 = wire *strVar;

    sprintf(strVar,"ntFLG_USER1_%d_%d",sx,sy);
    &wire ntRef_ntFLG_USER1 = wire *strVar;

    sprintf(strVar,"ntJRST_USER1_%d_%d",sx,sy);
    &wire ntRef_ntJRST_USER1 = wire *strVar;

    sprintf(strVar,"ntCLOCKDR_USER1_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR_USER1 = wire *strVar;

    sprintf(strVar,"ntCAPTUREDR_USER1_%d_%d",sx,sy);
    &wire ntRef_ntCAPTUREDR_USER1 = wire *strVar;

    sprintf(strVar,"ntSHIFTDR_USER1_%d_%d",sx,sy);
    &wire ntRef_ntSHIFTDR_USER1 = wire *strVar;

    sprintf(strVar,"ntUPDATEDR_USER1_%d_%d",sx,sy);
    &wire ntRef_ntUPDATEDR_USER1 = wire *strVar;

    sprintf(strVar,"ntTCK2_%d_%d",sx,sy);
    &wire ntRef_ntTCK2 = wire *strVar;

    sprintf(strVar,"ntTMS2_%d_%d",sx,sy);
    &wire ntRef_ntTMS2 = wire *strVar;

    sprintf(strVar,"ntTDI2_%d_%d",sx,sy);
    &wire ntRef_ntTDI2 = wire *strVar;

    sprintf(strVar,"ntJRTI2_%d_%d",sx,sy);
    &wire ntRef_ntJRTI2 = wire *strVar;

    sprintf(strVar,"ntFLG_USER2_%d_%d",sx,sy);
    &wire ntRef_ntFLG_USER2 = wire *strVar;

    sprintf(strVar,"ntJRST_USER2_%d_%d",sx,sy);
    &wire ntRef_ntJRST_USER2 = wire *strVar;

    sprintf(strVar,"ntCLOCKDR_USER2_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR_USER2 = wire *strVar;

    sprintf(strVar,"ntCAPTUREDR_USER2_%d_%d",sx,sy);
    &wire ntRef_ntCAPTUREDR_USER2 = wire *strVar;

    sprintf(strVar,"ntSHIFTDR_USER2_%d_%d",sx,sy);
    &wire ntRef_ntSHIFTDR_USER2 = wire *strVar;

    sprintf(strVar,"ntUPDATEDR_USER2_%d_%d",sx,sy);
    &wire ntRef_ntUPDATEDR_USER2 = wire *strVar;

    sprintf(strVar,"ntTCK3_%d_%d",sx,sy);
    &wire ntRef_ntTCK3 = wire *strVar;

    sprintf(strVar,"ntTMS3_%d_%d",sx,sy);
    &wire ntRef_ntTMS3 = wire *strVar;

    sprintf(strVar,"ntTDI3_%d_%d",sx,sy);
    &wire ntRef_ntTDI3 = wire *strVar;

    sprintf(strVar,"ntJRTI3_%d_%d",sx,sy);
    &wire ntRef_ntJRTI3 = wire *strVar;

    sprintf(strVar,"ntFLG_USER3_%d_%d",sx,sy);
    &wire ntRef_ntFLG_USER3 = wire *strVar;

    sprintf(strVar,"ntJRST_USER3_%d_%d",sx,sy);
    &wire ntRef_ntJRST_USER3 = wire *strVar;

    sprintf(strVar,"ntCLOCKDR_USER3_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR_USER3 = wire *strVar;

    sprintf(strVar,"ntCAPTUREDR_USER3_%d_%d",sx,sy);
    &wire ntRef_ntCAPTUREDR_USER3 = wire *strVar;

    sprintf(strVar,"ntSHIFTDR_USER3_%d_%d",sx,sy);
    &wire ntRef_ntSHIFTDR_USER3 = wire *strVar;

    sprintf(strVar,"ntUPDATEDR_USER3_%d_%d",sx,sy);
    &wire ntRef_ntUPDATEDR_USER3 = wire *strVar;

    sprintf(strVar,"ntTCK4_%d_%d",sx,sy);
    &wire ntRef_ntTCK4 = wire *strVar;

    sprintf(strVar,"ntTMS4_%d_%d",sx,sy);
    &wire ntRef_ntTMS4 = wire *strVar;

    sprintf(strVar,"ntTDI4_%d_%d",sx,sy);
    &wire ntRef_ntTDI4 = wire *strVar;

    sprintf(strVar,"ntJRTI4_%d_%d",sx,sy);
    &wire ntRef_ntJRTI4 = wire *strVar;

    sprintf(strVar,"ntFLG_USER4_%d_%d",sx,sy);
    &wire ntRef_ntFLG_USER4 = wire *strVar;

    sprintf(strVar,"ntJRST_USER4_%d_%d",sx,sy);
    &wire ntRef_ntJRST_USER4 = wire *strVar;

    sprintf(strVar,"ntCLOCKDR_USER4_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR_USER4 = wire *strVar;

    sprintf(strVar,"ntCAPTUREDR_USER4_%d_%d",sx,sy);
    &wire ntRef_ntCAPTUREDR_USER4 = wire *strVar;

    sprintf(strVar,"ntSHIFTDR_USER4_%d_%d",sx,sy);
    &wire ntRef_ntSHIFTDR_USER4 = wire *strVar;

    sprintf(strVar,"ntUPDATEDR_USER4_%d_%d",sx,sy);
    &wire ntRef_ntUPDATEDR_USER4 = wire *strVar;

    sprintf(strVar,"ntFCLK_%d_%d",sx,sy);
    &wire ntRef_ntFCLK = wire *strVar;

    sprintf(strVar,"ntFCS_N_%d_%d",sx,sy);
    &wire ntRef_ntFCS_N = wire *strVar;

    sprintf(strVar,"ntFCS2_N_%d_%d",sx,sy);
    &wire ntRef_ntFCS2_N = wire *strVar;

    sprintf(strVar,"ntDAISY_O_%d_%d",sx,sy);
    &wire ntRef_ntDAISY_O = wire *strVar;

    sprintf(strVar,"ntFCE_N_%d_%d",sx,sy);
    &wire ntRef_ntFCE_N = wire *strVar;

    sprintf(strVar,"ntFWE_N_%d_%d",sx,sy);
    &wire ntRef_ntFWE_N = wire *strVar;

    sprintf(strVar,"ntFOE_N_%d_%d",sx,sy);
    &wire ntRef_ntFOE_N = wire *strVar;

    sprintf(strVar,"ntADR_%d_%d",sx,sy);
    &wire ntRef_ntADR[15:0] = wire *strVar[15:0];

    sprintf(strVar,"ntADV_N_%d_%d",sx,sy);
    &wire ntRef_ntADV_N = wire *strVar;

    sprintf(strVar,"ntDOUT_%d_%d",sx,sy);
    &wire ntRef_ntDOUT[31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntBUSY_%d_%d",sx,sy);
    &wire ntRef_ntBUSY = wire *strVar;

    sprintf(strVar,"ntOUT_EN_CCLK_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_CCLK = wire *strVar;

    sprintf(strVar,"ntOUT_EN_FCS_N_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_FCS_N = wire *strVar;

    sprintf(strVar,"ntOUT_EN_FCS2_N_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_FCS2_N = wire *strVar;

    sprintf(strVar,"ntOUT_EN_FCE_N_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_FCE_N = wire *strVar;

    sprintf(strVar,"ntOUT_EN_D0_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_D0 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_D1_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_D1 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_D7_2_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_D7_2 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_D4_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_D4 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_D15_8_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_D15_8 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_D31_16_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_D31_16 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_DAISY_O_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_DAISY_O = wire *strVar;

    sprintf(strVar,"ntGLOGEN_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN = wire *strVar;

    sprintf(strVar,"ntGRS_N_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N = wire *strVar;

    sprintf(strVar,"ntGWEN_%d_%d",sx,sy);
    &wire ntRef_ntGWEN = wire *strVar;

    sprintf(strVar,"ntPUP_SEL_N_%d_%d",sx,sy);
    &wire ntRef_ntPUP_SEL_N = wire *strVar;

    sprintf(strVar,"ntIPAL_BUSY_%d_%d",sx,sy);
    &wire ntRef_ntIPAL_BUSY = wire *strVar;

    sprintf(strVar,"ntIPAL_DOUT_%d_%d",sx,sy);
    &wire ntRef_ntIPAL_DOUT[31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntRBCRC_ERR_%d_%d",sx,sy);
    &wire ntRef_ntRBCRC_ERR = wire *strVar;

    sprintf(strVar,"ntRBCRC_VALID_%d_%d",sx,sy);
    &wire ntRef_ntRBCRC_VALID = wire *strVar;

    sprintf(strVar,"ntSEU_VALID_%d_%d",sx,sy);
    &wire ntRef_ntSEU_VALID = wire *strVar;

    sprintf(strVar,"ntSEU_INDEX_%d_%d",sx,sy);
    &wire ntRef_ntSEU_INDEX[11:0] = wire *strVar[11:0];

    sprintf(strVar,"ntSEU_SEC_%d_%d",sx,sy);
    &wire ntRef_ntSEU_SEC = wire *strVar;

    sprintf(strVar,"ntSEU_DED_%d_%d",sx,sy);
    &wire ntRef_ntSEU_DED = wire *strVar;

    sprintf(strVar,"ntUID_DOUT_%d_%d",sx,sy);
    &wire ntRef_ntUID_DOUT = wire *strVar;

    sprintf(strVar,"ntUSER_I_DOUT_%d_%d",sx,sy);
    &wire ntRef_ntUSER_I_DOUT[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntFUSE_%d_%d",sx,sy);
    &wire ntRef_ntFUSE[31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntWAKEUP_OVER_N_%d_%d",sx,sy);
    &wire ntRef_ntWAKEUP_OVER_N = wire *strVar;

    sprintf(strVar,"ntNGB_%d_%d",sx,sy);
    &wire ntRef_ntNGB = wire *strVar;

    sprintf(strVar,"ntIPOLY10U_%d_%d",sx,sy);
    &wire ntRef_ntIPOLY10U[41:0] = wire *strVar[41:0];

    sprintf(strVar,"ntICONST10U_%d_%d",sx,sy);
    &wire ntRef_ntICONST10U[28:0] = wire *strVar[28:0];

    sprintf(strVar,"ntPOR_N_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N = wire *strVar;

    sprintf(strVar,"ntRELCK_%d_%d",sx,sy);
    &wire ntRef_ntRELCK = wire *strVar;

    sprintf(strVar,"ntCLK_ADC_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC = wire *strVar;

    sprintf(strVar,"ntMCLKB_O_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_O = wire *strVar;

    sprintf(strVar,"ntMCE_O_%d_%d",sx,sy);
    &wire ntRef_ntMCE_O = wire *strVar;

    sprintf(strVar,"ntMWR_O_%d_%d",sx,sy);
    &wire ntRef_ntMWR_O = wire *strVar;

    sprintf(strVar,"ntDATA_O_%d_%d",sx,sy);
    &wire ntRef_ntDATA_O[31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntBLSRCLK_O_%d_%d",sx,sy);
    &wire ntRef_ntBLSRCLK_O = wire *strVar;

    sprintf(strVar,"ntERASE_EN_O_%d_%d",sx,sy);
    &wire ntRef_ntERASE_EN_O = wire *strVar;

    sprintf(strVar,"ntPOR_N_O_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_O = wire *strVar;

    sprintf(strVar,"ntPRECHG_O_%d_%d",sx,sy);
    &wire ntRef_ntPRECHG_O = wire *strVar;

    sprintf(strVar,"ntPROG_CAP_O_%d_%d",sx,sy);
    &wire ntRef_ntPROG_CAP_O = wire *strVar;

    sprintf(strVar,"ntPROG_ON_O_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON_O = wire *strVar;

    sprintf(strVar,"ntRDBK_CAP_O_%d_%d",sx,sy);
    &wire ntRef_ntRDBK_CAP_O = wire *strVar;

    sprintf(strVar,"ntREAD_O_%d_%d",sx,sy);
    &wire ntRef_ntREAD_O = wire *strVar;

    sprintf(strVar,"ntREGION_RW_EN_O_%d_%d",sx,sy);
    &wire ntRef_ntREGION_RW_EN_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntRST_BLSR_O_%d_%d",sx,sy);
    &wire ntRef_ntRST_BLSR_O = wire *strVar;

    sprintf(strVar,"ntWLSHFT_SEL_O_%d_%d",sx,sy);
    &wire ntRef_ntWLSHFT_SEL_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntBLSHFT_SEL_O_%d_%d",sx,sy);
    &wire ntRef_ntBLSHFT_SEL_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntPD_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPD_OUT = wire *strVar;

    sprintf(strVar,"ntPUB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPUB_OUT = wire *strVar;

    sprintf(strVar,"ntWL_ON_O_%d_%d",sx,sy);
    &wire ntRef_ntWL_ON_O = wire *strVar;

    sprintf(strVar,"ntTYPE_O_%d_%d",sx,sy);
    &wire ntRef_ntTYPE_O = wire *strVar;

    sprintf(strVar,"ntFRAME_ADDR_O_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCOL_IN_O_%d_%d",sx,sy);
    &wire ntRef_ntCOL_IN_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCLK_BLSHFT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_BLSHFT = wire *strVar;

    sprintf(strVar,"ntCLK_MSPI_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MSPI = wire *strVar;

    sprintf(strVar,"ntCLK_USER_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USER = wire *strVar;

    sprintf(strVar,"ntTIELO_%d_%d",sx,sy);
    &wire ntRef_ntTIELO = wire *strVar;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar, "CCS_TILE_%d_%d", sx, sy);
    device CCS_TILE *strVar
          port map (
                      INIT_COMPLETE   => ntRef_ntINIT_COMPLETE,  
                      CLOCKDR         => ntRef_ntCLOCKDR,        
                      TDI_CCS         => ntRef_ntTDI_CCS,        
                      BUS_BSCAN_OUT   => ntRef_ntBUS_BSCAN_OUT,  
                      TCK1            => ntRef_ntTCK1,           
                      TMS1            => ntRef_ntTMS1,           
                      TDI1            => ntRef_ntTDI1,           
                      JRTI1           => ntRef_ntJRTI1,          
                      FLG_USER1       => ntRef_ntFLG_USER1,      
                      JRST_USER1      => ntRef_ntJRST_USER1,     
                      CLOCKDR_USER1   => ntRef_ntCLOCKDR_USER1,  
                      CAPTUREDR_USER1 => ntRef_ntCAPTUREDR_USER1,
                      SHIFTDR_USER1   => ntRef_ntSHIFTDR_USER1,  
                      UPDATEDR_USER1  => ntRef_ntUPDATEDR_USER1, 
                      TCK2            => ntRef_ntTCK2,           
                      TMS2            => ntRef_ntTMS2,           
                      TDI2            => ntRef_ntTDI2,           
                      JRTI2           => ntRef_ntJRTI2,          
                      FLG_USER2       => ntRef_ntFLG_USER2,      
                      JRST_USER2      => ntRef_ntJRST_USER2,     
                      CLOCKDR_USER2   => ntRef_ntCLOCKDR_USER2,  
                      CAPTUREDR_USER2 => ntRef_ntCAPTUREDR_USER2,
                      SHIFTDR_USER2   => ntRef_ntSHIFTDR_USER2,  
                      UPDATEDR_USER2  => ntRef_ntUPDATEDR_USER2, 
                      TCK3            => ntRef_ntTCK3,           
                      TMS3            => ntRef_ntTMS3,           
                      TDI3            => ntRef_ntTDI3,           
                      JRTI3           => ntRef_ntJRTI3,          
                      FLG_USER3       => ntRef_ntFLG_USER3,      
                      JRST_USER3      => ntRef_ntJRST_USER3,     
                      CLOCKDR_USER3   => ntRef_ntCLOCKDR_USER3,  
                      CAPTUREDR_USER3 => ntRef_ntCAPTUREDR_USER3,
                      SHIFTDR_USER3   => ntRef_ntSHIFTDR_USER3,  
                      UPDATEDR_USER3  => ntRef_ntUPDATEDR_USER3, 
                      TCK4            => ntRef_ntTCK4,           
                      TMS4            => ntRef_ntTMS4,           
                      TDI4            => ntRef_ntTDI4,           
                      JRTI4           => ntRef_ntJRTI4,          
                      FLG_USER4       => ntRef_ntFLG_USER4,      
                      JRST_USER4      => ntRef_ntJRST_USER4,     
                      CLOCKDR_USER4   => ntRef_ntCLOCKDR_USER4,  
                      CAPTUREDR_USER4 => ntRef_ntCAPTUREDR_USER4,
                      SHIFTDR_USER4   => ntRef_ntSHIFTDR_USER4,  
                      UPDATEDR_USER4  => ntRef_ntUPDATEDR_USER4, 
                      FCLK            => ntRef_ntFCLK,           
                      FCS_N           => ntRef_ntFCS_N,          
                      FCS2_N          => ntRef_ntFCS2_N,         
                      DAISY_O         => ntRef_ntDAISY_O,        
                      FCE_N           => ntRef_ntFCE_N,          
                      FWE_N           => ntRef_ntFWE_N,          
                      FOE_N           => ntRef_ntFOE_N,          
                      ADR             => ntRef_ntADR,            
                      ADV_N           => ntRef_ntADV_N,          
                      DOUT            => ntRef_ntDOUT,           
                      BUSY            => ntRef_ntBUSY,           
                      OUT_EN_CCLK     => ntRef_ntOUT_EN_CCLK,    
                      OUT_EN_FCS_N    => ntRef_ntOUT_EN_FCS_N,   
                      OUT_EN_FCS2_N   => ntRef_ntOUT_EN_FCS2_N,  
                      OUT_EN_FCE_N    => ntRef_ntOUT_EN_FCE_N,   
                      OUT_EN_D0       => ntRef_ntOUT_EN_D0,      
                      OUT_EN_D1       => ntRef_ntOUT_EN_D1,      
                      OUT_EN_D7_2     => ntRef_ntOUT_EN_D7_2,    
                      OUT_EN_D4       => ntRef_ntOUT_EN_D4,      
                      OUT_EN_D15_8    => ntRef_ntOUT_EN_D15_8,   
                      OUT_EN_D31_16   => ntRef_ntOUT_EN_D31_16,  
                      OUT_EN_DAISY_O  => ntRef_ntOUT_EN_DAISY_O, 
                      GLOGEN          => ntRef_ntGLOGEN,         
                      GRS_N           => ntRef_ntGRS_N,          
                      GWEN            => ntRef_ntGWEN,           
                      PUP_SEL_N       => ntRef_ntPUP_SEL_N,      
                      IPAL_BUSY       => ntRef_ntIPAL_BUSY,      
                      IPAL_DOUT       => ntRef_ntIPAL_DOUT,      
                      RBCRC_ERR       => ntRef_ntRBCRC_ERR,      
                      RBCRC_VALID     => ntRef_ntRBCRC_VALID,    
                      SEU_VALID       => ntRef_ntSEU_VALID,      
                      SEU_INDEX       => ntRef_ntSEU_INDEX,      
                      SEU_SEC         => ntRef_ntSEU_SEC,        
                      SEU_DED         => ntRef_ntSEU_DED,        
                      UID_DOUT        => ntRef_ntUID_DOUT,       
                      USER_I_DOUT     => ntRef_ntUSER_I_DOUT,    
                      FUSE            => ntRef_ntFUSE,           
                      WAKEUP_OVER_N   => ntRef_ntWAKEUP_OVER_N,  
                      NGB             => ntRef_ntNGB,            
                      IPOLY10U        => ntRef_ntIPOLY10U,       
                      ICONST10U       => ntRef_ntICONST10U,      
                      POR_N           => ntRef_ntPOR_N,          
                      RELCK           => ntRef_ntRELCK,          
                      CLK_ADC         => ntRef_ntCLK_ADC,        
                      MCLKB_O         => ntRef_ntMCLKB_O,        
                      MCE_O           => ntRef_ntMCE_O,          
                      MWR_O           => ntRef_ntMWR_O,          
                      DATA_O          => ntRef_ntDATA_O,         
                      BLSRCLK_O       => ntRef_ntBLSRCLK_O,      
                      ERASE_EN_O      => ntRef_ntERASE_EN_O,     
                      POR_N_O         => ntRef_ntPOR_N_O,        
                      PRECHG_O        => ntRef_ntPRECHG_O,       
                      PROG_CAP_O      => ntRef_ntPROG_CAP_O,     
                      PROG_ON_O       => ntRef_ntPROG_ON_O,      
                      RDBK_CAP_O      => ntRef_ntRDBK_CAP_O,     
                      READ_O          => ntRef_ntREAD_O,         
                      REGION_RW_EN_O  => ntRef_ntREGION_RW_EN_O, 
                      RST_BLSR_O      => ntRef_ntRST_BLSR_O,     
                      WLSHFT_SEL_O    => ntRef_ntWLSHFT_SEL_O,   
                      BLSHFT_SEL_O    => ntRef_ntBLSHFT_SEL_O,   
                      PD_OUT          => ntRef_ntPD_OUT,         
                      PUB_OUT         => ntRef_ntPUB_OUT,        
                      WL_ON_O         => ntRef_ntWL_ON_O,        
                      TYPE_O          => ntRef_ntTYPE_O,         
                      FRAME_ADDR_O    => ntRef_ntFRAME_ADDR_O,   
                      COL_IN_O        => ntRef_ntCOL_IN_O,       
                      CLK_BLSHFT      => ntRef_ntCLK_BLSHFT,     
                      CLK_MSPI        => ntRef_ntCLK_MSPI,       
                      CLK_USER        => ntRef_ntCLK_USER,       
                      TIELO           => ntRef_ntTIELO,          
                      TIEHI           => ntRef_ntTIEHI          
                    )
        @([sx,sy]);

        STRUCT inc_spec_CCS incVar;
        string pin_SRB;
        string pin_logic_device;
        string attribute_IO;
        int loc_SRB;
        int sy_SRB;
  
        foreach incVar(inc_CCS_SRB_spec)
        {
            pin_SRB = incVar.port_name_SRB;
            pin_logic_device = incVar.port_name_device;
            attribute_IO = incVar.attribute_IO;
            loc_SRB = incVar.loc_SRB;
            
            int sx_SRB = sx - 2;
           
            if(loc_SRB==0)
            {
              sy_SRB = sy;
            }
            else
            {
              sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
            }
            
            if(attribute_IO =="I")
            { 
             
               connect(<pin *pin_logic_device of <device CCS_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_SRB,sy_SRB]>>);
            }
            else
            {
              connect(<pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy_SRB]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx_SRB,sy_SRB]>>
                                                                         : <wire *pin_logic_device of <device CCS_TILE @[sx,sy]>>); 
            }
        }
} // end of place_ccs_tile_pgl35es
/****************************************************************************************************
*****************************************************************************************************/
function place_idcode_tile(unsigned int tx, ty)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;
    sprintf(strVar,"ntIDCODE_%d_%d",sx,sy);
    &wire ntRef_ntIDCODE[31:0] = wire *strVar[31:0];

    sprintf(strVar,"IDCODE_PGL200ES_TILE_%d_%d",sx,sy);
    device IDCODE_PGL200ES_TILE *strVar
        port map (
                   IDCODE => ntRef_ntIDCODE
                 )
        @ [sx,sy];       
} // end of place_idcode_tile
/****************************************************************************************************
*****************************************************************************************************/
function place_dio_tile(unsigned int tx, ty)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    string strVar;

    sprintf(strVar, "DIO_PGL35IP_TILE_%d_%d", sx, sy);
    device DIO_PGL35IP_TILE *strVar
        //port map(
        //        )
    @([sx,sy]);

    &wire ntRef_ntVDD11   = <wire ntVDD11>  ;
    &wire ntRef_ntVSS     = <wire ntVSS>    ;
    
    &wire ntRef_ntRST_N   = <wire ntRST_N>  ;
    &wire ntRef_ntCS_N    = <wire ntCS_N>   ;
    &wire ntRef_ntCFG_CLK = <wire ntCFG_CLK>;
    &wire ntRef_ntRWSEL   = <wire ntRWSEL>  ;
    &wire ntRef_ntTCK     = <wire ntTCK>    ;
    &wire ntRef_ntTDI     = <wire ntTDI>    ;
    &wire ntRef_ntTMS     = <wire ntTMS>    ;

    &wire ntRef_ntDIN_0  = <wire ntDIN_0> ;
    &wire ntRef_ntDIN_1  = <wire ntDIN_1> ;
    &wire ntRef_ntDIN_2  = <wire ntDIN_2> ;
    &wire ntRef_ntDIN_3  = <wire ntDIN_3> ;
    &wire ntRef_ntDIN_4  = <wire ntDIN_4> ;
    &wire ntRef_ntDIN_5  = <wire ntDIN_5> ;
    &wire ntRef_ntDIN_6  = <wire ntDIN_6> ;
    &wire ntRef_ntDIN_7  = <wire ntDIN_7> ;
    &wire ntRef_ntDIN_8  = <wire ntDIN_8> ;
    &wire ntRef_ntDIN_9  = <wire ntDIN_9> ;
    &wire ntRef_ntDIN_10 = <wire ntDIN_10>;
    &wire ntRef_ntDIN_11 = <wire ntDIN_11>;
    &wire ntRef_ntDIN_12 = <wire ntDIN_12>;
    &wire ntRef_ntDIN_13 = <wire ntDIN_13>;
    &wire ntRef_ntDIN_14 = <wire ntDIN_14>;
    &wire ntRef_ntDIN_15 = <wire ntDIN_15>;
    &wire ntRef_ntDIN_16 = <wire ntDIN_16>;
    &wire ntRef_ntDIN_17 = <wire ntDIN_17>;
    &wire ntRef_ntDIN_18 = <wire ntDIN_18>;
    &wire ntRef_ntDIN_19 = <wire ntDIN_19>;
    &wire ntRef_ntDIN_20 = <wire ntDIN_20>;
    &wire ntRef_ntDIN_21 = <wire ntDIN_21>;
    &wire ntRef_ntDIN_22 = <wire ntDIN_22>;
    &wire ntRef_ntDIN_23 = <wire ntDIN_23>;
    &wire ntRef_ntDIN_24 = <wire ntDIN_24>;
    &wire ntRef_ntDIN_25 = <wire ntDIN_25>;
    &wire ntRef_ntDIN_26 = <wire ntDIN_26>;
    &wire ntRef_ntDIN_27 = <wire ntDIN_27>;
    &wire ntRef_ntDIN_28 = <wire ntDIN_28>;
    &wire ntRef_ntDIN_29 = <wire ntDIN_29>;
    &wire ntRef_ntDIN_30 = <wire ntDIN_30>;
    &wire ntRef_ntDIN_31 = <wire ntDIN_31>;


    &wire ntRef_ntBUS_CLK = <wire ntBUS_CLK>;
    &wire ntRef_ntBUS_RST = <wire ntBUS_RST>;

    sprintf(strVar, "ntSRB59_DATA_IN");
    &wire ntRef_ntSRB59_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB58_DATA_IN");
    &wire ntRef_ntSRB58_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB57_DATA_IN");
    &wire ntRef_ntSRB57_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB56_DATA_IN");
    &wire ntRef_ntSRB56_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB55_DATA_IN");
    &wire ntRef_ntSRB55_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB54_DATA_IN");
    &wire ntRef_ntSRB54_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB53_DATA_IN");
    &wire ntRef_ntSRB53_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB52_DATA_IN");
    &wire ntRef_ntSRB52_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB51_DATA_IN");
    &wire ntRef_ntSRB51_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB50_DATA_IN");
    &wire ntRef_ntSRB50_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB49_DATA_IN");
    &wire ntRef_ntSRB49_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB48_DATA_IN");
    &wire ntRef_ntSRB48_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB47_DATA_IN");
    &wire ntRef_ntSRB47_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB46_DATA_IN");
    &wire ntRef_ntSRB46_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB45_DATA_IN");
    &wire ntRef_ntSRB45_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB44_DATA_IN");
    &wire ntRef_ntSRB44_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB43_DATA_IN");
    &wire ntRef_ntSRB43_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB42_DATA_IN");
    &wire ntRef_ntSRB42_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB41_DATA_IN");
    &wire ntRef_ntSRB41_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB40_DATA_IN");
    &wire ntRef_ntSRB40_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB39_DATA_IN");
    &wire ntRef_ntSRB39_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB38_DATA_IN");
    &wire ntRef_ntSRB38_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB37_DATA_IN");
    &wire ntRef_ntSRB37_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB36_DATA_IN");
    &wire ntRef_ntSRB36_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB35_DATA_IN");
    &wire ntRef_ntSRB35_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB34_DATA_IN");
    &wire ntRef_ntSRB34_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB33_DATA_IN");
    &wire ntRef_ntSRB33_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB32_DATA_IN");
    &wire ntRef_ntSRB32_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB31_DATA_IN");
    &wire ntRef_ntSRB31_DATA_IN[19:0] = <wire *strVar>;

    sprintf(strVar, "ntSRB30_DATA_IN");
    &wire ntRef_ntSRB30_DATA_IN[19:0] = <wire *strVar>;

    connect
      (
        <pin VDD11   of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntVDD11  ,
        <pin VSS     of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntVSS    ,
        
        <pin RST_N   of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntRST_N  ,
        <pin CS_N    of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntCS_N   ,
        <pin CFG_CLK of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntCFG_CLK,
        <pin RWSEL   of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntRWSEL  ,
        <pin TCK     of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntTCK    ,
        <pin TDI     of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntTDI    ,
        <pin TMS     of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntTMS    ,
        
        <pin DIN[0]  of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_0  ,
        <pin DIN[1]  of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_1  ,
        <pin DIN[2]  of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_2  ,
        <pin DIN[3]  of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_3  ,
        <pin DIN[4]  of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_4  ,
        <pin DIN[5]  of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_5  ,
        <pin DIN[6]  of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_6  ,
        <pin DIN[7]  of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_7  ,
        <pin DIN[8]  of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_8  ,
        <pin DIN[9]  of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_9  ,
        <pin DIN[10] of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_10 ,
        <pin DIN[11] of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_11 ,
        <pin DIN[12] of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_12 ,
        <pin DIN[13] of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_13 ,
        <pin DIN[14] of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_14 ,
        <pin DIN[15] of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_15 ,
        <pin DIN[16] of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_16 ,
        <pin DIN[17] of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_17 ,
        <pin DIN[18] of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_18 ,
        <pin DIN[19] of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_19 ,
        <pin DIN[20] of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_20 ,
        <pin DIN[21] of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_21 ,
        <pin DIN[22] of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_22 ,
        <pin DIN[23] of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_23 ,
        <pin DIN[24] of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_24 ,
        <pin DIN[25] of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_25 ,
        <pin DIN[26] of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_26 ,
        <pin DIN[27] of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_27 ,
        <pin DIN[28] of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_28 ,
        <pin DIN[29] of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_29 ,
        <pin DIN[30] of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_30 ,
        <pin DIN[31] of <device DIO_PGL35IP_TILE @[sx,sy]>> => ntRef_ntDIN_31 ,
        
        <pin SRB30_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB30_DATA_IN,
        <pin SRB31_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB31_DATA_IN,
        <pin SRB32_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB32_DATA_IN,
        <pin SRB33_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB33_DATA_IN,
        <pin SRB34_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB34_DATA_IN,
        <pin SRB35_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB35_DATA_IN,
        <pin SRB36_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB36_DATA_IN,
        <pin SRB37_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB37_DATA_IN,
        <pin SRB38_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB38_DATA_IN,
        <pin SRB39_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB39_DATA_IN,
        <pin SRB40_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB40_DATA_IN,
        <pin SRB41_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB41_DATA_IN,
        <pin SRB42_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB42_DATA_IN,
        <pin SRB43_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB43_DATA_IN,
        <pin SRB44_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB44_DATA_IN,
        <pin SRB45_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB45_DATA_IN,
        <pin SRB46_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB46_DATA_IN,
        <pin SRB47_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB47_DATA_IN,
        <pin SRB48_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB48_DATA_IN,
        <pin SRB49_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB49_DATA_IN,
        <pin SRB50_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB50_DATA_IN,
        <pin SRB51_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB51_DATA_IN,
        <pin SRB52_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB52_DATA_IN,
        <pin SRB53_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB53_DATA_IN,
        <pin SRB54_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB54_DATA_IN,
        <pin SRB55_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB55_DATA_IN,
        <pin SRB56_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB56_DATA_IN,
        <pin SRB57_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB57_DATA_IN,
        <pin SRB58_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB58_DATA_IN,
        <pin SRB59_DATA_IN of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntSRB59_DATA_IN,
        
        <pin BUS_CLK of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntBUS_CLK,
        <pin BUS_RST of <device DIO_PGL35IP_TILE @[sx,sy]>> =>  ntRef_ntBUS_RST 
      );
} // end of place_dio_tile
/****************************************************************************************************
*****************************************************************************************************/
function place_hsst_tile(unsigned int tx, ty,tx_delta)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    string strVar;
    sprintf(strVar,"ntCFG_READY_%d_%d",sx,sy);
    &wire ntRef_ntCFG_READY = wire *strVar;

    sprintf(strVar,"ntCFG_RDATA_%d_%d",sx,sy);
    &wire ntRef_ntCFG_RDATA[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCFG_INT_%d_%d",sx,sy);
    &wire ntRef_ntCFG_INT = wire *strVar;

    sprintf(strVar,"ntPCS_RX_MCB_STATUS_%d_%d",sx,sy);
    &wire ntRef_ntPCS_RX_MCB_STATUS[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntPCS_LSM_SYNCED_%d_%d",sx,sy);
    &wire ntRef_ntPCS_LSM_SYNCED[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntRDATA_0_%d_%d",sx,sy);
    &wire ntRef_ntRDATA_0[46:0] = wire *strVar[46:0];

    sprintf(strVar,"ntRDATA_1_%d_%d",sx,sy);
    &wire ntRef_ntRDATA_1[46:0] = wire *strVar[46:0];

    sprintf(strVar,"ntRDATA_2_%d_%d",sx,sy);
    &wire ntRef_ntRDATA_2[46:0] = wire *strVar[46:0];

    sprintf(strVar,"ntRDATA_3_%d_%d",sx,sy);
    &wire ntRef_ntRDATA_3[46:0] = wire *strVar[46:0];

    sprintf(strVar,"ntRCLK2FABRIC_%d_%d",sx,sy);
    &wire ntRef_ntRCLK2FABRIC[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntTCLK2FABRIC_%d_%d",sx,sy);
    &wire ntRef_ntTCLK2FABRIC[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntRCLK2FABRIC_T_%d_%d",sx,sy);
    &wire ntRef_ntRCLK2FABRIC_T[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntTCLK2FABRIC_T_%d_%d",sx,sy);
    &wire ntRef_ntTCLK2FABRIC_T[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntRESCAL_I_CODE_O_%d_%d",sx,sy);
    &wire ntRef_ntRESCAL_I_CODE_O[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntREFCK2CORE_0_%d_%d",sx,sy);
    &wire ntRef_ntREFCK2CORE_0 = wire *strVar;

    sprintf(strVar,"ntREFCK2CORE_T_0_%d_%d",sx,sy);
    &wire ntRef_ntREFCK2CORE_T_0 = wire *strVar;

    sprintf(strVar,"ntPLL_READY_0_%d_%d",sx,sy);
    &wire ntRef_ntPLL_READY_0 = wire *strVar;

    sprintf(strVar,"ntREFCK2CORE_1_%d_%d",sx,sy);
    &wire ntRef_ntREFCK2CORE_1 = wire *strVar;

    sprintf(strVar,"ntREFCK2CORE_T_1_%d_%d",sx,sy);
    &wire ntRef_ntREFCK2CORE_T_1 = wire *strVar;

    sprintf(strVar,"ntPLL_READY_1_%d_%d",sx,sy);
    &wire ntRef_ntPLL_READY_1 = wire *strVar;

    sprintf(strVar,"ntRX_SIGDET_STATUS_0_%d_%d",sx,sy);
    &wire ntRef_ntRX_SIGDET_STATUS_0 = wire *strVar;

    sprintf(strVar,"ntRX_SATA_COMINIT_0_%d_%d",sx,sy);
    &wire ntRef_ntRX_SATA_COMINIT_0 = wire *strVar;

    sprintf(strVar,"ntRX_SATA_COMWAKE_0_%d_%d",sx,sy);
    &wire ntRef_ntRX_SATA_COMWAKE_0 = wire *strVar;

    sprintf(strVar,"ntRX_LS_DATA_0_%d_%d",sx,sy);
    &wire ntRef_ntRX_LS_DATA_0 = wire *strVar;

    sprintf(strVar,"ntRX_READY_0_%d_%d",sx,sy);
    &wire ntRef_ntRX_READY_0 = wire *strVar;

    sprintf(strVar,"ntTEST_STATUS_0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_STATUS_0[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntTX_RXDET_STATUS_0_%d_%d",sx,sy);
    &wire ntRef_ntTX_RXDET_STATUS_0 = wire *strVar;

    sprintf(strVar,"ntCA_ALIGN_RX_%d_%d",sx,sy);
    &wire ntRef_ntCA_ALIGN_RX[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntCA_ALIGN_TX_%d_%d",sx,sy);
    &wire ntRef_ntCA_ALIGN_TX[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntRX_SIGDET_STATUS_1_%d_%d",sx,sy);
    &wire ntRef_ntRX_SIGDET_STATUS_1 = wire *strVar;

    sprintf(strVar,"ntRX_SATA_COMINIT_1_%d_%d",sx,sy);
    &wire ntRef_ntRX_SATA_COMINIT_1 = wire *strVar;

    sprintf(strVar,"ntRX_SATA_COMWAKE_1_%d_%d",sx,sy);
    &wire ntRef_ntRX_SATA_COMWAKE_1 = wire *strVar;

    sprintf(strVar,"ntRX_LS_DATA_1_%d_%d",sx,sy);
    &wire ntRef_ntRX_LS_DATA_1 = wire *strVar;

    sprintf(strVar,"ntRX_READY_1_%d_%d",sx,sy);
    &wire ntRef_ntRX_READY_1 = wire *strVar;

    sprintf(strVar,"ntTEST_STATUS_1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_STATUS_1[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntTX_RXDET_STATUS_1_%d_%d",sx,sy);
    &wire ntRef_ntTX_RXDET_STATUS_1 = wire *strVar;

    sprintf(strVar,"ntRX_SIGDET_STATUS_2_%d_%d",sx,sy);
    &wire ntRef_ntRX_SIGDET_STATUS_2 = wire *strVar;

    sprintf(strVar,"ntRX_SATA_COMINIT_2_%d_%d",sx,sy);
    &wire ntRef_ntRX_SATA_COMINIT_2 = wire *strVar;

    sprintf(strVar,"ntRX_SATA_COMWAKE_2_%d_%d",sx,sy);
    &wire ntRef_ntRX_SATA_COMWAKE_2 = wire *strVar;

    sprintf(strVar,"ntRX_LS_DATA_2_%d_%d",sx,sy);
    &wire ntRef_ntRX_LS_DATA_2 = wire *strVar;

    sprintf(strVar,"ntRX_READY_2_%d_%d",sx,sy);
    &wire ntRef_ntRX_READY_2 = wire *strVar;

    sprintf(strVar,"ntTEST_STATUS_2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_STATUS_2[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntTX_RXDET_STATUS_2_%d_%d",sx,sy);
    &wire ntRef_ntTX_RXDET_STATUS_2 = wire *strVar;

    sprintf(strVar,"ntRX_SIGDET_STATUS_3_%d_%d",sx,sy);
    &wire ntRef_ntRX_SIGDET_STATUS_3 = wire *strVar;

    sprintf(strVar,"ntRX_SATA_COMINIT_3_%d_%d",sx,sy);
    &wire ntRef_ntRX_SATA_COMINIT_3 = wire *strVar;

    sprintf(strVar,"ntRX_SATA_COMWAKE_3_%d_%d",sx,sy);
    &wire ntRef_ntRX_SATA_COMWAKE_3 = wire *strVar;

    sprintf(strVar,"ntRX_LS_DATA_3_%d_%d",sx,sy);
    &wire ntRef_ntRX_LS_DATA_3 = wire *strVar;

    sprintf(strVar,"ntRX_READY_3_%d_%d",sx,sy);
    &wire ntRef_ntRX_READY_3 = wire *strVar;

    sprintf(strVar,"ntTEST_STATUS_3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_STATUS_3[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntTX_RXDET_STATUS_3_%d_%d",sx,sy);
    &wire ntRef_ntTX_RXDET_STATUS_3 = wire *strVar;

    sprintf(strVar,"ntTEST_SO0_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO0 = wire *strVar;

    sprintf(strVar,"ntTEST_SO1_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO1 = wire *strVar;

    sprintf(strVar,"ntTEST_SO2_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO2 = wire *strVar;

    sprintf(strVar,"ntTEST_SO3_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO3 = wire *strVar;

    sprintf(strVar,"ntTEST_SO4_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO4 = wire *strVar;

    sprintf(strVar,"ntTEST_SO5_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO5 = wire *strVar;

    sprintf(strVar,"ntTEST_SO6_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO6 = wire *strVar;

    sprintf(strVar,"ntTEST_SO7_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO7 = wire *strVar;

    sprintf(strVar,"ntTDO_BSCAN_%d_%d",sx,sy);
    &wire ntRef_ntTDO_BSCAN = wire *strVar;    

    sprintf(strVar,"ntCLOCKDR_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR_OUT = wire *strVar;

    sprintf(strVar,"ntNC_I0_%d_%d",sx,sy);
    &wire ntRef_ntNC_I0[2:0] = wire *strVar[2:0];

    sprintf(strVar,"ntNC_I1_%d_%d",sx,sy);
    &wire ntRef_ntNC_I1[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I2_%d_%d",sx,sy);
    &wire ntRef_ntNC_I2[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I3_%d_%d",sx,sy);
    &wire ntRef_ntNC_I3[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I4_%d_%d",sx,sy);
    &wire ntRef_ntNC_I4[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I5_%d_%d",sx,sy);
    &wire ntRef_ntNC_I5[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I6_%d_%d",sx,sy);
    &wire ntRef_ntNC_I6[15:0] = wire *strVar[15:0];

    sprintf(strVar,"ntNC_I8_%d_%d",sx,sy);
    &wire ntRef_ntNC_I8[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I12_%d_%d",sx,sy);
    &wire ntRef_ntNC_I12[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I13_%d_%d",sx,sy);
    &wire ntRef_ntNC_I13[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I14_%d_%d",sx,sy);
    &wire ntRef_ntNC_I14[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I15_%d_%d",sx,sy);
    &wire ntRef_ntNC_I15[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I16_%d_%d",sx,sy);
    &wire ntRef_ntNC_I16[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I20_%d_%d",sx,sy);
    &wire ntRef_ntNC_I20[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I23_%d_%d",sx,sy);
    &wire ntRef_ntNC_I23[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I24_%d_%d",sx,sy);
    &wire ntRef_ntNC_I24[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I25_%d_%d",sx,sy);
    &wire ntRef_ntNC_I25[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I30_%d_%d",sx,sy);
    &wire ntRef_ntNC_I30[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I31_%d_%d",sx,sy);
    &wire ntRef_ntNC_I31[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I32_%d_%d",sx,sy);
    &wire ntRef_ntNC_I32[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I33_%d_%d",sx,sy);
    &wire ntRef_ntNC_I33[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I38_%d_%d",sx,sy);
    &wire ntRef_ntNC_I38[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I39_%d_%d",sx,sy);
    &wire ntRef_ntNC_I39[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I40_%d_%d",sx,sy);
    &wire ntRef_ntNC_I40[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I41_%d_%d",sx,sy);
    &wire ntRef_ntNC_I41[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I42_%d_%d",sx,sy);
    &wire ntRef_ntNC_I42[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I43_%d_%d",sx,sy);
    &wire ntRef_ntNC_I43[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntNC_I44_%d_%d",sx,sy);
    &wire ntRef_ntNC_I44[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntIBM_OUT_%d_%d",sx,sy);
    &wire ntRef_ntIBM_OUT[16:0] = wire *strVar[16:0];

    sprintf(strVar, "HSST_TILE_%d_%d", sx, sy);
    device HSST_TILE *strVar
        port map(
      CFG_READY          => ntRef_ntCFG_READY,         
      CFG_RDATA          => ntRef_ntCFG_RDATA,         
      CFG_INT            => ntRef_ntCFG_INT,           
      PCS_RX_MCB_STATUS  => ntRef_ntPCS_RX_MCB_STATUS, 
      PCS_LSM_SYNCED     => ntRef_ntPCS_LSM_SYNCED,    
      RDATA_0            => ntRef_ntRDATA_0,           
      RDATA_1            => ntRef_ntRDATA_1,           
      RDATA_2            => ntRef_ntRDATA_2,           
      RDATA_3            => ntRef_ntRDATA_3,           
      RCLK2FABRIC        => ntRef_ntRCLK2FABRIC,       
      TCLK2FABRIC        => ntRef_ntTCLK2FABRIC,       
      RESCAL_I_CODE_O    => ntRef_ntRESCAL_I_CODE_O,   
      REFCK2CORE_0       => ntRef_ntREFCK2CORE_0,      
      PLL_READY_0        => ntRef_ntPLL_READY_0,       
      REFCK2CORE_1       => ntRef_ntREFCK2CORE_1,      
      PLL_READY_1        => ntRef_ntPLL_READY_1,       
      RX_SIGDET_STATUS_0 => ntRef_ntRX_SIGDET_STATUS_0,
      RX_SATA_COMINIT_0  => ntRef_ntRX_SATA_COMINIT_0, 
      RX_SATA_COMWAKE_0  => ntRef_ntRX_SATA_COMWAKE_0, 
      RX_LS_DATA_0       => ntRef_ntRX_LS_DATA_0,      
      RX_READY_0         => ntRef_ntRX_READY_0,        
      TEST_STATUS_0      => ntRef_ntTEST_STATUS_0,     
      TX_RXDET_STATUS_0  => ntRef_ntTX_RXDET_STATUS_0, 
      CA_ALIGN_RX        => ntRef_ntCA_ALIGN_RX,       
      CA_ALIGN_TX        => ntRef_ntCA_ALIGN_TX,       
      RX_SIGDET_STATUS_1 => ntRef_ntRX_SIGDET_STATUS_1,
      RX_SATA_COMINIT_1  => ntRef_ntRX_SATA_COMINIT_1, 
      RX_SATA_COMWAKE_1  => ntRef_ntRX_SATA_COMWAKE_1, 
      RX_LS_DATA_1       => ntRef_ntRX_LS_DATA_1,      
      RX_READY_1         => ntRef_ntRX_READY_1,        
      TEST_STATUS_1      => ntRef_ntTEST_STATUS_1,     
      TX_RXDET_STATUS_1  => ntRef_ntTX_RXDET_STATUS_1, 
      RX_SIGDET_STATUS_2 => ntRef_ntRX_SIGDET_STATUS_2,
      RX_SATA_COMINIT_2  => ntRef_ntRX_SATA_COMINIT_2, 
      RX_SATA_COMWAKE_2  => ntRef_ntRX_SATA_COMWAKE_2, 
      RX_LS_DATA_2       => ntRef_ntRX_LS_DATA_2,      
      RX_READY_2         => ntRef_ntRX_READY_2,        
      TEST_STATUS_2      => ntRef_ntTEST_STATUS_2,     
      TX_RXDET_STATUS_2  => ntRef_ntTX_RXDET_STATUS_2, 
      RX_SIGDET_STATUS_3 => ntRef_ntRX_SIGDET_STATUS_3,
      RX_SATA_COMINIT_3  => ntRef_ntRX_SATA_COMINIT_3, 
      RX_SATA_COMWAKE_3  => ntRef_ntRX_SATA_COMWAKE_3, 
      RX_LS_DATA_3       => ntRef_ntRX_LS_DATA_3,      
      RX_READY_3         => ntRef_ntRX_READY_3,        
      TEST_STATUS_3      => ntRef_ntTEST_STATUS_3,     
      TX_RXDET_STATUS_3  => ntRef_ntTX_RXDET_STATUS_3, 
      TEST_SO0           => ntRef_ntTEST_SO0,          
      TEST_SO1           => ntRef_ntTEST_SO1,          
      TEST_SO2           => ntRef_ntTEST_SO2,          
      TEST_SO3           => ntRef_ntTEST_SO3,          
      TEST_SO4           => ntRef_ntTEST_SO4,          
      TEST_SO5           => ntRef_ntTEST_SO5,          
      TEST_SO6           => ntRef_ntTEST_SO6,          
      TEST_SO7           => ntRef_ntTEST_SO7,          
      TDO_BSCAN          => ntRef_ntTDO_BSCAN,         
      RCLK2FABRIC_T      => ntRef_ntRCLK2FABRIC_T,     
      TCLK2FABRIC_T      => ntRef_ntTCLK2FABRIC_T,     
      REFCK2CORE_T_0     => ntRef_ntREFCK2CORE_T_0,    
      REFCK2CORE_T_1     => ntRef_ntREFCK2CORE_T_1,    
      CLOCKDR_OUT        => ntRef_ntCLOCKDR_OUT,       
      NC_I0              => ntRef_ntNC_I0,             
      NC_I1              => ntRef_ntNC_I1,             
      NC_I2              => ntRef_ntNC_I2,             
      NC_I3              => ntRef_ntNC_I3,             
      NC_I4              => ntRef_ntNC_I4,             
      NC_I5              => ntRef_ntNC_I5,             
      NC_I6              => ntRef_ntNC_I6,             
      NC_I8              => ntRef_ntNC_I8,             
      NC_I12             => ntRef_ntNC_I12,            
      NC_I13             => ntRef_ntNC_I13,            
      NC_I14             => ntRef_ntNC_I14,            
      NC_I15             => ntRef_ntNC_I15,            
      NC_I16             => ntRef_ntNC_I16,            
      NC_I20             => ntRef_ntNC_I20,            
      NC_I23             => ntRef_ntNC_I23,            
      NC_I24             => ntRef_ntNC_I24,            
      NC_I25             => ntRef_ntNC_I25,            
      NC_I30             => ntRef_ntNC_I30,            
      NC_I31             => ntRef_ntNC_I31,            
      NC_I32             => ntRef_ntNC_I32,            
      NC_I33             => ntRef_ntNC_I33,            
      NC_I38             => ntRef_ntNC_I38,            
      NC_I39             => ntRef_ntNC_I39,            
      NC_I40             => ntRef_ntNC_I40,            
      NC_I41             => ntRef_ntNC_I41,            
      NC_I42             => ntRef_ntNC_I42,            
      NC_I43             => ntRef_ntNC_I43,            
      NC_I44             => ntRef_ntNC_I44,       
      IBM_OUT             => ntRef_ntIBM_OUT        

                )
    @([sx,sy]);

    STRUCT inc_spec_HSST incVar;
    string pin_SRB;
    string pin_logic_device;
    string attribute_IO;
    int loc_SRB;
    int sy_SRB;

    foreach incVar(inc_HSST_SRB_spec)
    {
        pin_SRB = incVar.port_name_SRB;
        pin_logic_device = incVar.port_name_device;
        attribute_IO = incVar.attribute_IO;
        loc_SRB = incVar.loc_SRB;
        
        int sx_SRB = sx + tx_delta*NUM_GRID_X ;
       
        sy_SRB = (loc_SRB<30) ? sy + loc_SRB*NUM_GRID_Y : sy + loc_SRB*NUM_GRID_Y + NUM_GRID_Y ; 
        
        if(attribute_IO =="I")
        { 
         
           connect(<pin *pin_logic_device of <device HSST_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_SRB,sy_SRB]>>);
        }
        else
        {
          connect(<pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy_SRB]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx_SRB,sy_SRB]>>
                                                                     : <wire *pin_logic_device of <device HSST_TILE @[sx,sy]>>); 
        }
    }

} // end of place_hsst_tile
/********************************************************************************
********************************************************************************/
function place_buf_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;
    sprintf(strVar,"ntCLOCK_DR_OUT_T_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_OUT_T = wire *strVar;

    sprintf(strVar,"ntCLOCK_DR_OUT_B_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_OUT_B = wire *strVar;

    sprintf(strVar,"ntCLOCK_DR_OUT_L_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_OUT_L = wire *strVar;

    sprintf(strVar,"ntCLOCK_DR_OUT_R_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_OUT_R = wire *strVar;

    sprintf(strVar,"ntSO_L_%d_%d",sx,sy);
    &wire ntRef_ntSO_L = wire *strVar;

    sprintf(strVar,"ntSO_R_%d_%d",sx,sy);
    &wire ntRef_ntSO_R = wire *strVar;

    sprintf(strVar,"ntSO_T_L_%d_%d",sx,sy);
    &wire ntRef_ntSO_T_L = wire *strVar;

    sprintf(strVar,"ntSO_T_R_%d_%d",sx,sy);
    &wire ntRef_ntSO_T_R = wire *strVar;

    sprintf(strVar,"ntSO_B_%d_%d",sx,sy);
    &wire ntRef_ntSO_B = wire *strVar;

    sprintf(strVar,"ntGLOGEN_FB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_FB_OUT = wire *strVar;

    sprintf(strVar,"ntS11_PAD_STATE_OUT_T_%d_%d",sx,sy);
    &wire ntRef_ntS11_PAD_STATE_OUT_T = wire *strVar;

    sprintf(strVar,"ntS11_PAD_STATE_OUT_L_%d_%d",sx,sy);
    &wire ntRef_ntS11_PAD_STATE_OUT_L = wire *strVar;

    sprintf(strVar,"ntS11_PAD_STATE_OUT_R_%d_%d",sx,sy);
    &wire ntRef_ntS11_PAD_STATE_OUT_R = wire *strVar;

    sprintf(strVar, "BUF_PGL200ES_TILE_%d_%d", sx, sy);
    device BUF_PGL200ES_TILE *strVar
       port map (
                   GLOGEN_FB_OUT   => ntRef_ntGLOGEN_FB_OUT,
                   S11_PAD_STATE_OUT_T   => ntRef_ntS11_PAD_STATE_OUT_T,
                   S11_PAD_STATE_OUT_L   => ntRef_ntS11_PAD_STATE_OUT_L,
                   S11_PAD_STATE_OUT_R   => ntRef_ntS11_PAD_STATE_OUT_R,
                   CLOCK_DR_OUT_T  => ntRef_ntCLOCK_DR_OUT_T,
                   CLOCK_DR_OUT_B  => ntRef_ntCLOCK_DR_OUT_B,
                   CLOCK_DR_OUT_R  => ntRef_ntCLOCK_DR_OUT_R,
                   SO_B            => ntRef_ntSO_B,
                   SO_T_R            => ntRef_ntSO_T_R,
                   SO_T_L            => ntRef_ntSO_T_L,
                   SO_R            => ntRef_ntSO_R
                )
      @([sx,sy]);  
} // end of place_buf_tile
/********************************************************************************
********************************************************************************/
function place_esd_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    string strVar;

    sprintf(strVar, "ESD_PGL200ES_TILE_%d_%d", sx, sy);
    device ESD_PGL200ES_TILE *strVar
//        port map (
//                    S11_PAD_STATE_OUT => ntRef_ntS11_PAD_STATE_OUT,
//                    CLOCK_DR_OUT_T => ntRef_ntCLOCK_DR_OUT_T,
//                    CLOCK_DR_OUT_B => ntRef_ntCLOCK_DR_OUT_B
//                 )
    @([sx,sy]);  
}  // end of place_esd_tile

/****************************************************************************************************
*****************************************************************************************************/
function place_rckb_soc_tile(unsigned int tx, ty)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
   
    int num = ty; 
    int num1 = ty; 

    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
      num1 = num1 - 1;
    }

    string strVar;
    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[25:0] = wire *strVar[25:0];

    sprintf(strVar,"ntCLK_IOCK_B_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOCK_B[1:0] = wire *strVar[1:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_IOCK_T_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOCK_T[1:0] = wire *strVar[1:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLOCK_DR_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_OUT = wire *strVar;

    sprintf(strVar,"ntCLKG_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLKG_OUT = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_ADC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC_OUT = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntGLOGEN_FB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_FB_OUT = wire *strVar;

    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntREGION_INC_%d_%d",sx,sy);
    &wire ntRef_ntREGION_INC = wire *strVar;

    sprintf(strVar,"ntGOUTEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_OUT = wire *strVar;

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntS11_PAD_STATE_OUT_%d_%d",sx,sy);
    &wire ntRef_ntS11_PAD_STATE_OUT = wire *strVar;

    sprintf(strVar,"ntRCLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntRCLK_OUT[3:0] = wire *strVar[3:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCAL_DONE_OUT_%d_%d",sx,sy);    
    &wire ntRef_ntCAL_DONE_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_PLL_EXT_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PLL_EXT_OUT = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntTIE_LO_1V1_%d_%d",sx,sy);
    &wire ntRef_ntTIE_LO_1V1 = wire *strVar;

    sprintf(strVar,"ntTIEL_%d_%d",sx,sy);
    &wire ntRef_ntTIEL = wire *strVar;

    sprintf(strVar,"ntTIEH_%d_%d",sx,sy);
    &wire ntRef_ntTIEH = wire *strVar;

    sprintf(strVar,"ntBUS2_CLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS2_CLK_OUT[5:0] = wire *strVar[5:0]            /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_IODIV_HMEMC_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IODIV_HMEMC[1:0] = wire *strVar[1:0]           /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntBUS_BSCAN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_BSCAN_OUT[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntBUS_GSEB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUT[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntCLKOUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTT[7:0] = wire *strVar[7:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLKOUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTB[7:0] = wire *strVar[7:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/; 

    sprintf(strVar,"ntNONDRM_REG_INC_%d_%d",sx,sy);
    &wire ntRef_ntNONDRM_REG_INC = wire *strVar;

    sprintf(strVar,"ntIBM_0_OUT_%d_%d",sx,sy);           
    &wire ntRef_ntIBM_0_OUT[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntIBM_1_OUT_%d_%d",sx,sy);           
    &wire ntRef_ntIBM_1_OUT[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntSRB%d_DATA_IN",num);           
    &wire ntRef_ntIBM_1_IN[19:0] = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_IN",num1);           
    &wire ntRef_ntIBM_0_IN[19:0] = <wire *strVar>;


    sprintf(strVar, "RCKB_TILE_%d_%d", sx, sy);
    device RCKB_TILE *strVar
         port map (
                    ADDR           => ntRef_ntADDR,

                    CLK_IOCK_B      => ntRef_ntCLK_IOCK_B,
                    CLK_IOCK_T      => ntRef_ntCLK_IOCK_T,

                    RCLK_OUT        => ntRef_ntRCLK_OUT,
                    CLK_PLL_EXT_OUT => ntRef_ntCLK_PLL_EXT_OUT,
                    BUS2_CLK_OUT    => ntRef_ntBUS2_CLK_OUT,
                    BUS_BSCAN_OUT   => ntRef_ntBUS_BSCAN_OUT,
                    BUS_GSEB_OUT    => ntRef_ntBUS_GSEB_OUT,
                    CLK_IODIV_HMEMC  => ntRef_ntCLK_IODIV_HMEMC,
                    CLKOUTT         => ntRef_ntCLKOUTT,
                    CLKOUTB         => ntRef_ntCLKOUTB,

                    COL_INC_OUT      => ntRef_ntCOL_INC_OUT,
                    NONDRM_REG_INC   => ntRef_ntNONDRM_REG_INC,
                    S11_PAD_STATE_OUT=> ntRef_ntS11_PAD_STATE_OUT,
                    CLK_ADC_OUT      => ntRef_ntCLK_ADC_OUT,
                    CLOCK_DR_OUT     => ntRef_ntCLOCK_DR_OUT,
                    GLOGEN_FB_OUT    => ntRef_ntGLOGEN_FB_OUT,
                    GLOGEN_OUT       => ntRef_ntGLOGEN_OUT,
                    CS_OUT           => ntRef_ntCS_OUT,
                    CAL_DONE_OUT     => ntRef_ntCAL_DONE_OUT,

                    TIE_LO_1V1       => ntRef_ntTIE_LO_1V1,
                    TIEL             => ntRef_ntTIEL,
                    TIEH             => ntRef_ntTIEH,

                    IBM_0_IN     => ntRef_ntIBM_0_IN,
                    IBM_0_OUT     => ntRef_ntIBM_0_OUT,
                    IBM_1_IN     => ntRef_ntIBM_1_IN,
                    IBM_1_OUT     => ntRef_ntIBM_1_OUT
                  )
        @([sx,sy]);

//      STRUCT inc_spec_RCKB incVar;
//      string pin_SRB;
//      string pin_logic_device;
//      string attribute_IO;
//      int loc_SRB,ty_srb;
//      int sx_srb,sy_srb;
//
//      foreach incVar(inc_RCKB_SRB_spec)
//      {
//          pin_SRB = incVar.port_name_SRB;
//          pin_logic_device = incVar.port_name_device;
//          attribute_IO = incVar.attribute_IO;
//          loc_SRB = incVar.loc_SRB;
//
//          ty_srb = (loc_SRB==0) ? ty : ty+2;
//          sy_srb = ty_srb * NUM_GRID_Y;          
//          sx_srb = sx - 2;
//
//          if(attribute_IO =="I")
//          { 
//            
//             connect(<pin *pin_logic_device of <device RCKB_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
//          }
//          else
//          {
//            connect
//            (
//              <pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> =>  <wire *pin_logic_device of <device RCKB_TILE @[sx,sy]>>
//            ); 
//          }
//      }

    int rx = (ty<NUM_TILES_REGION) ? 0 : (ty<2*NUM_TILES_REGION) ? 1 : 2;

    &wire ntRef_ntBUS_CLK = <wire ntBUS_CLK>;
    &wire ntRef_ntBUS_RST = <wire ntBUS_RST>;

    connect
      (
        <pin CLK_GLO of <device RCKB_TILE @[sx,sy]>> =>  (rx==1) ? ntRef_ntBUS_CLK :
                                                                   <wire TIEH of <device RCKB_TILE @[sx,sy]>>,
        <pin SIG_GLO of <device RCKB_TILE @[sx,sy]>> =>  (rx==1) ? ntRef_ntBUS_RST :
                                                                   <wire TIEH of <device RCKB_TILE @[sx,sy]>>
      );

   
} // end of place_rckb_soc_tile
/********************************************************************************/
/********************************************************************************/
function place_srb_soc_tile(unsigned int tx,ty)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    int num = ty;
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
      num = num - 1;
    }

    string strVar;

   //DOUBLE
    sprintf(strVar,"ntZDE_%d_%d",sx,sy);
    &wire ntRef_ntZDE[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;    
    
    sprintf(strVar,"ntZDN_%d_%d",sx,sy);
    &wire ntRef_ntZDN[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;    
 
    sprintf(strVar,"ntZDW_%d_%d",sx,sy);
    &wire ntRef_ntZDW[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZDS_%d_%d",sx,sy);
    &wire ntRef_ntZDS[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    //QUAD
    sprintf(strVar,"ntZQE_%d_%d",sx,sy);
    &wire ntRef_ntZQE[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
    
    sprintf(strVar,"ntZQN_%d_%d",sx,sy);
    &wire ntRef_ntZQN[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
 
    sprintf(strVar,"ntZQW_%d_%d",sx,sy);
    &wire ntRef_ntZQW[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZQS_%d_%d",sx,sy);
    &wire ntRef_ntZQS[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
    
     //SINGLE
    sprintf(strVar,"ntZSE_%d_%d",sx,sy);
    &wire ntRef_ntZSE[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
    
    sprintf(strVar,"ntZSN_%d_%d",sx,sy);
    &wire ntRef_ntZSN[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
 
    sprintf(strVar,"ntZSW_%d_%d",sx,sy);
    &wire ntRef_ntZSW[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSS_%d_%d",sx,sy);
    &wire ntRef_ntZSS[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    //DIAGONAL
    sprintf(strVar,"ntZSNE_%d_%d",sx,sy);
    &wire ntRef_ntZSNE[5:0] = wire *strVar[5:0]        /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
    
    sprintf(strVar,"ntZSSW_%d_%d",sx,sy);
    &wire ntRef_ntZSSW[5:0] = wire *strVar[5:0]        /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/; 
 
    sprintf(strVar,"ntZSNW_%d_%d",sx,sy);
    &wire ntRef_ntZSNW[5:0] = wire *strVar[5:0]        /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSSE_%d_%d",sx,sy);
    &wire ntRef_ntZSSE[5:0] = wire *strVar[5:0]        /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    //TO CLMS&CLMA 
    sprintf(strVar,"ntSRB%d_DATA_OUT[47]",num);
    &wire ntRef_ntA_A0 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[46]",num);
    &wire ntRef_ntA_A1 = <wire *strVar>;
 
    sprintf(strVar,"ntSRB%d_DATA_OUT[45]",num);
    &wire ntRef_ntA_A2 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[44]",num);
    &wire ntRef_ntA_A3 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[43]",num);
    &wire ntRef_ntA_A4 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[42]",num);           
    &wire ntRef_ntA_AD = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[41]",num);
    &wire ntRef_ntA_B0 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[40]",num);
    &wire ntRef_ntA_B1 = <wire *strVar>; 

    sprintf(strVar,"ntSRB%d_DATA_OUT[39]",num);
    &wire ntRef_ntA_B2 = <wire *strVar>; 

    sprintf(strVar,"ntSRB%d_DATA_OUT[38]",num);
    &wire ntRef_ntA_B3 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[37]",num);
    &wire ntRef_ntA_B4 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[36]",num);           
    &wire ntRef_ntA_BD = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[35]",num);
    &wire ntRef_ntA_C0 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[34]",num);
    &wire ntRef_ntA_C1 = <wire *strVar>;
 
    sprintf(strVar,"ntSRB%d_DATA_OUT[33]",num);
    &wire ntRef_ntA_C2 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[32]",num);
    &wire ntRef_ntA_C3 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[31]",num);
    &wire ntRef_ntA_C4 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[30]",num);           
    &wire ntRef_ntA_CD = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[29]",num);
    &wire ntRef_ntA_D0 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[28]",num);
    &wire ntRef_ntA_D1 = <wire *strVar>;
 
    sprintf(strVar,"ntSRB%d_DATA_OUT[27]",num);
    &wire ntRef_ntA_D2 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[26]",num);
    &wire ntRef_ntA_D3 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[25]",num);
    &wire ntRef_ntA_D4 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[24]",num);           
    &wire ntRef_ntA_DD = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[23]",num);
    &wire ntRef_ntS_A0 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[22]",num);
    &wire ntRef_ntS_A1 = <wire *strVar>;
 
    sprintf(strVar,"ntSRB%d_DATA_OUT[21]",num);
    &wire ntRef_ntS_A2 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[20]",num);
    &wire ntRef_ntS_A3 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[19]",num);
    &wire ntRef_ntS_A4 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[18]",num);           
    &wire ntRef_ntS_AD = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[17]",num);
    &wire ntRef_ntS_B0 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[16]",num);
    &wire ntRef_ntS_B1 = <wire *strVar>;
 
    sprintf(strVar,"ntSRB%d_DATA_OUT[15]",num);
    &wire ntRef_ntS_B2 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[14]",num);
    &wire ntRef_ntS_B3 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[13]",num);
    &wire ntRef_ntS_B4 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[12]",num);           
    &wire ntRef_ntS_BD = <wire *strVar>; 

    sprintf(strVar,"ntSRB%d_DATA_OUT[11]",num);
    &wire ntRef_ntS_C0 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[10]",num);
    &wire ntRef_ntS_C1 = <wire *strVar>;
 
    sprintf(strVar,"ntSRB%d_DATA_OUT[9]",num);
    &wire ntRef_ntS_C2 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[8]",num);
    &wire ntRef_ntS_C3 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[7]",num);
    &wire ntRef_ntS_C4 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[6]",num);           
    &wire ntRef_ntS_CD = <wire *strVar>; 

    sprintf(strVar,"ntSRB%d_DATA_OUT[5]",num);
    &wire ntRef_ntS_D0 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[4]",num);
    &wire ntRef_ntS_D1 = <wire *strVar>;
 
    sprintf(strVar,"ntSRB%d_DATA_OUT[3]",num);
    &wire ntRef_ntS_D2 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[2]",num);
    &wire ntRef_ntS_D3 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[1]",num);
    &wire ntRef_ntS_D4 = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_DATA_OUT[0]",num);           
    &wire ntRef_ntS_DD = <wire *strVar>; 

    sprintf(strVar,"ntSRB%d_CTL_OUT[5]",num);           
    &wire ntRef_ntA_CLK = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_CTL_OUT[4]",num);           
    &wire ntRef_ntA_RS = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_CTL_OUT[3]",num);           
    &wire ntRef_ntA_CE = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_CTL_OUT[2]",num);           
    &wire ntRef_ntS_CLK = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_CTL_OUT[1]",num);           
    &wire ntRef_ntS_RS = <wire *strVar>;

    sprintf(strVar,"ntSRB%d_CTL_OUT[0]",num);           
    &wire ntRef_ntS_CE = <wire *strVar>;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);           
    &wire ntRef_ntTIEHI = wire *strVar; 

    //SW UNUSED
    
 
    sprintf(strVar, "SRB_TILE_%d_%d", sx, sy);
       device SRB_TILE *strVar
           port map (
                     A_A0  => ntRef_ntA_A0,
                     A_A1  => ntRef_ntA_A1,
                     A_A2  => ntRef_ntA_A2,
                     A_A3  => ntRef_ntA_A3,
                     A_A4  => ntRef_ntA_A4,
                     A_B0  => ntRef_ntA_B0,
                     A_B1  => ntRef_ntA_B1,
                     A_B2  => ntRef_ntA_B2,
                     A_B3  => ntRef_ntA_B3,
                     A_B4  => ntRef_ntA_B4,
                     A_C0  => ntRef_ntA_C0,
                     A_C1  => ntRef_ntA_C1,
                     A_C2  => ntRef_ntA_C2,
                     A_C3  => ntRef_ntA_C3,
                     A_C4  => ntRef_ntA_C4,
                     A_D0  => ntRef_ntA_D0,
                     A_D1  => ntRef_ntA_D1,
                     A_D2  => ntRef_ntA_D2,
                     A_D3  => ntRef_ntA_D3,
                     A_D4  => ntRef_ntA_D4,
                     S_A0  => ntRef_ntS_A0,
                     S_A1  => ntRef_ntS_A1,
                     S_A2  => ntRef_ntS_A2,
                     S_A3  => ntRef_ntS_A3,
                     S_A4  => ntRef_ntS_A4,
                     S_B0  => ntRef_ntS_B0,
                     S_B1  => ntRef_ntS_B1,
                     S_B2  => ntRef_ntS_B2,
                     S_B3  => ntRef_ntS_B3,
                     S_B4  => ntRef_ntS_B4,
                     S_C0  => ntRef_ntS_C0,
                     S_C1  => ntRef_ntS_C1,
                     S_C2  => ntRef_ntS_C2,
                     S_C3  => ntRef_ntS_C3,
                     S_C4  => ntRef_ntS_C4,
                     S_D0  => ntRef_ntS_D0,
                     S_D1  => ntRef_ntS_D1,
                     S_D2  => ntRef_ntS_D2,
                     S_D3  => ntRef_ntS_D3,
                     S_D4  => ntRef_ntS_D4,

                     A_RS  => ntRef_ntA_RS,
                     A_CE  => ntRef_ntA_CE,
                     S_RS  => ntRef_ntS_RS,
                     S_CE  => ntRef_ntS_CE,
                     A_CLK => ntRef_ntA_CLK,
                     S_CLK => ntRef_ntS_CLK,
                     A_AD  => ntRef_ntA_AD,
                     A_BD  => ntRef_ntA_BD,
                     A_CD  => ntRef_ntA_CD,
                     A_DD  => ntRef_ntA_DD,
                     S_AD  => ntRef_ntS_AD,
                     S_BD  => ntRef_ntS_BD,
                     S_CD  => ntRef_ntS_CD,
                     S_DD  => ntRef_ntS_DD,

                     ZSS   => ntRef_ntZSS,
                     ZSN   => ntRef_ntZSN,
                     ZSE   => ntRef_ntZSE,
                     ZSW   => ntRef_ntZSW,
                     ZSNW  => ntRef_ntZSNW,
                     ZSNE  => ntRef_ntZSNE,
                     ZSSW  => ntRef_ntZSSW,
                     ZSSE  => ntRef_ntZSSE,
                     ZDS   => ntRef_ntZDS,
                     ZDN   => ntRef_ntZDN,
                     ZDE   => ntRef_ntZDE,
                     ZDW   => ntRef_ntZDW,
                     ZQS   => ntRef_ntZQS,
                     ZQN   => ntRef_ntZQN,
                     ZQE   => ntRef_ntZQE,
                     ZQW   => ntRef_ntZQW,
                     TIEHI => ntRef_ntTIEHI                    
                   )
        @([sx,sy]);
}
/********************************************************************************
********************************************************************************/
function place_cramsl2_soc_tile(unsigned int tx,ty)
{ 
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;

    int num = ty;
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
      num = num - 1;
    }

    string strVar;

    sprintf(strVar,"ntIBM_0_OUT_%d_%d",sx,sy);
    &wire ntRef_ntIBM_0_OUT[19:0] = wire *strVar[19:0]; 

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar,"ntSRB%d_DATA_IN",num);           
    &wire ntRef_ntIN[19:0] = <wire *strVar>; 

    sprintf(strVar, "CRAMSL2_TILE_%d_%d", sx, sy);
    device CRAMSL2_TILE *strVar
         port map (
                   IBM_0_OUT    => ntRef_ntIBM_0_OUT,
                   TIEHI  => ntRef_ntTIEHI,
                   IN     => ntRef_ntIN
                  )
        @([sx,sy]);

} // end of  funcion place_cramsl2_soc_tile
/********************************************************************************
********************************************************************************/
function place_cramsl2_r_tile(unsigned int tx,ty)
{ 
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;

    string strVar;

    sprintf(strVar,"ntIBM_0_OUT_%d_%d",sx,sy);
    &wire ntRef_ntIBM_0_OUT[19:0] = wire *strVar[19:0]; 

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar, "CRAMSL2_TILE_%d_%d", sx, sy);
    device CRAMSL2_TILE *strVar
         port map (
                   IBM_0_OUT    => ntRef_ntIBM_0_OUT,
                   TIEHI  => ntRef_ntTIEHI

                  )
        @([sx,sy]);

      connect
    (
      <pin IN[0] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
      <pin IN[1] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
      <pin IN[2] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
      <pin IN[3] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
      <pin IN[4] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
      <pin IN[5] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
      <pin IN[6] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
      <pin IN[7] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
      <pin IN[8] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
      <pin IN[9] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
      <pin IN[10] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
      <pin IN[11] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
      <pin IN[12] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
      <pin IN[13] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
      <pin IN[14] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
      <pin IN[15] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
      <pin IN[16] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
      <pin IN[17] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
      <pin IN[18] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>,
      <pin IN[19] of <device CRAMSL2_TILE @[sx,sy]>>  => <wire TIEHI  of <device CRAMSL2_TILE @[sx,sy]>>
    );

} // end of  funcion place_cramsl2_r_tile
/****************************************************************************************************
*****************************************************************************************************/
function place_rckb_tile(unsigned int tx, ty)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;
    sprintf(strVar,"ntS11_PAD_STATE_OUT_%d_%d",sx,sy);
    &wire ntRef_ntS11_PAD_STATE_OUT = wire *strVar;

    sprintf(strVar,"ntTIE_LO_1V1_%d_%d",sx,sy);
    &wire ntRef_ntTIE_LO_1V1 = wire *strVar;

    sprintf(strVar,"ntCLK_ADC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_PLL_EXT_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PLL_EXT_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_PIO0_P_TBUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO0_P_TBUF = wire *strVar;

    sprintf(strVar,"ntGLOGEN_FB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_FB_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_IOCK_B_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOCK_B[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntCLK_IOCK_T_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOCK_T[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntTIEL_%d_%d",sx,sy);
    &wire ntRef_ntTIEL = wire *strVar;

    sprintf(strVar,"ntCLOCK_DR_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_OUT = wire *strVar;

    sprintf(strVar,"ntTIEH_%d_%d",sx,sy);
    &wire ntRef_ntTIEH = wire *strVar;

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntCAL_DONE_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCAL_DONE_OUT = wire *strVar;

    sprintf(strVar,"ntRCLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntRCLK_OUT[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntBUS2_CLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS2_CLK_OUT[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntBUS_BSCAN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_BSCAN_OUT[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntBUS_GSEB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUT[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntCLK_IODIV_HMEMC_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IODIV_HMEMC[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntCLKOUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTB[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCLKOUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTT[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntIBM_0_OUT_%d_%d",sx,sy);
    &wire ntRef_ntIBM_0_OUT[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[25:0] = wire *strVar[25:0];


    sprintf(strVar,"ntIBM_1_OUT_%d_%d",sx,sy);
    &wire ntRef_ntIBM_1_OUT[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntTIEHI_0_IBM_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI_0_IBM = wire *strVar;

    sprintf(strVar,"ntTIEHI_1_IBM_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI_1_IBM = wire *strVar;

    sprintf(strVar,"ntREGION_INC_%d_%d",sx,sy);
    &wire ntRef_ntREGION_INC = wire *strVar;

    sprintf(strVar,"ntCOL_SEL_CCS_A_%d_%d",sx,sy);
    &wire ntRef_ntCOL_SEL_CCS_A = wire *strVar;

    sprintf(strVar,"ntCOL_SEL_CCS_B_%d_%d",sx,sy);
    &wire ntRef_ntCOL_SEL_CCS_B = wire *strVar;

    sprintf(strVar,"ntNONDRM_REG_INC_%d_%d",sx,sy);
    &wire ntRef_ntNONDRM_REG_INC = wire *strVar;

    sprintf(strVar, "RCKB_TILE_%d_%d", sx, sy);
    device RCKB_TILE *strVar
         port map (
                          S11_PAD_STATE_OUT => ntRef_ntS11_PAD_STATE_OUT,
                          TIE_LO_1V1        => ntRef_ntTIE_LO_1V1,       
                          CLK_ADC_OUT       => ntRef_ntCLK_ADC_OUT,      
                          CLK_PLL_EXT_OUT   => ntRef_ntCLK_PLL_EXT_OUT,  
                          CLK_PIO0_P_TBUF   => ntRef_ntCLK_PIO0_P_TBUF,  
                          GLOGEN_FB_OUT     => ntRef_ntGLOGEN_FB_OUT,    
                          CLK_IOCK_B        => ntRef_ntCLK_IOCK_B,       
                          CLK_IOCK_T        => ntRef_ntCLK_IOCK_T,       
                          TIEL              => ntRef_ntTIEL,             
                          CLOCK_DR_OUT      => ntRef_ntCLOCK_DR_OUT,     
                          TIEH              => ntRef_ntTIEH,             
                          COL_INC_OUT       => ntRef_ntCOL_INC_OUT,      
                          GLOGEN_OUT        => ntRef_ntGLOGEN_OUT,       
                          CAL_DONE_OUT      => ntRef_ntCAL_DONE_OUT,     
                          RCLK_OUT          => ntRef_ntRCLK_OUT,         
                          CS_OUT            => ntRef_ntCS_OUT,           
                          BUS2_CLK_OUT      => ntRef_ntBUS2_CLK_OUT,     
                          BUS_BSCAN_OUT     => ntRef_ntBUS_BSCAN_OUT,    
                          BUS_GSEB_OUT      => ntRef_ntBUS_GSEB_OUT,     
                          CLK_IODIV_HMEMC   => ntRef_ntCLK_IODIV_HMEMC,  
                          CLKOUTB           => ntRef_ntCLKOUTB,          
                          CLKOUTT           => ntRef_ntCLKOUTT,          
                          IBM_0_OUT         => ntRef_ntIBM_0_OUT,        
                          IBM_1_OUT         => ntRef_ntIBM_1_OUT,        
                          ADDR              => ntRef_ntADDR,        
                          NONDRM_REG_INC    => ntRef_ntNONDRM_REG_INC,        
                          TIEHI_0_IBM       => ntRef_ntTIEHI_0_IBM,      
                          TIEHI_1_IBM       => ntRef_ntTIEHI_1_IBM,     
                          REGION_INC       => ntRef_ntREGION_INC,     
                          COL_SEL_CCS_A       => ntRef_ntCOL_SEL_CCS_A,     
                          COL_SEL_CCS_B       => ntRef_ntCOL_SEL_CCS_B     
                  )
        @([sx,sy]);

      STRUCT inc_spec_RCKB incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB,ty_srb;
      int sx_srb,sy_srb;

      foreach incVar(inc_RCKB_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;

          ty_srb = (loc_SRB==0) ? ty : ty+2;
          sy_srb = ty_srb * NUM_GRID_Y;          
          sx_srb = sx - 2;

          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device RCKB_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
             connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> =>  <wire *pin_logic_device of <device RCKB_TILE @[sx,sy]>>); 
          }
      }

    int rx = (ty<NUM_TILES_REGION) ? 0 : (ty<2*NUM_TILES_REGION) ? 1 : 2;



    connect
    (
      <pin IBM_0_IN[0] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_0_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_0_IN[1] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_0_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_0_IN[2] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_0_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_0_IN[3] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_0_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_0_IN[4] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_0_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_0_IN[5] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_0_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_0_IN[6] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_0_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_0_IN[7] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_0_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_0_IN[8] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_0_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_0_IN[9] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_0_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_0_IN[10] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_0_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_0_IN[11] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_0_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_0_IN[12] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_0_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_0_IN[13] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_0_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_0_IN[14] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_0_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_0_IN[15] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_0_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_0_IN[16] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_0_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_0_IN[17] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_0_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_0_IN[18] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_0_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_0_IN[19] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_0_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_1_IN[0] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_1_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_1_IN[1] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_1_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_1_IN[2] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_1_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_1_IN[3] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_1_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_1_IN[4] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_1_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_1_IN[5] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_1_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_1_IN[6] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_1_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_1_IN[7] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_1_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_1_IN[8] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_1_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_1_IN[9] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_1_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_1_IN[10] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_1_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_1_IN[11] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_1_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_1_IN[12] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_1_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_1_IN[13] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_1_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_1_IN[14] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_1_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_1_IN[15] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_1_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_1_IN[16] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_1_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_1_IN[17] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_1_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_1_IN[18] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_1_IBM  of <device RCKB_TILE @[sx,sy]>>,
      <pin IBM_1_IN[19] of <device RCKB_TILE @[sx,sy]>>  => <wire TIEHI_1_IBM  of <device RCKB_TILE @[sx,sy]>>
    ); 

} //end of place_rckb_tile

/****************************************************************************************************
*****************************************************************************************************/
function place_cgra_tile(unsigned int tx, ty)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    

    string strVar;
    sprintf(strVar,"ntTH_CGRA_CLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_CGRA_CLK_OUT = wire *strVar;

    sprintf(strVar,"ntTH_RDATA_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_RDATA_OUT[256:0] = wire *strVar[256:0];

    sprintf(strVar,"ntTH_BRESP_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_BRESP_OUT[2:0] = wire *strVar[2:0];

    sprintf(strVar,"ntTH_RRESP_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_RRESP_OUT[2:0] = wire *strVar[2:0];

    sprintf(strVar,"ntTH_BID_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_BID_OUT[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTH_RID_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_RID_OUT[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTH_AWREADY_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_AWREADY_OUT = wire *strVar;

    sprintf(strVar,"ntTH_WREADY_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_WREADY_OUT = wire *strVar;

    sprintf(strVar,"ntTH_BVALID_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_BVALID_OUT = wire *strVar;

    sprintf(strVar,"ntTH_ARREADY_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_ARREADY_OUT = wire *strVar;

    sprintf(strVar,"ntTH_RLAST_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_RLAST_OUT = wire *strVar;

    sprintf(strVar,"ntTH_RVALID_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_RVALID_OUT = wire *strVar;

    sprintf(strVar,"ntTH_AWID_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_AWID_OUT[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTH_AWVALID_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_AWVALID_OUT = wire *strVar;

    sprintf(strVar,"ntTH_AWADDR_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_AWADDR_OUT[32:0] = wire *strVar[32:0];

    sprintf(strVar,"ntTH_AWLEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_AWLEN_OUT[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTH_AWSIZE_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_AWSIZE_OUT[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntTH_AWBURST_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_AWBURST_OUT[2:0] = wire *strVar[2:0];

    sprintf(strVar,"ntTH_AWLOCK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_AWLOCK_OUT[2:0] = wire *strVar[2:0];

    sprintf(strVar,"ntTH_AWCACHE_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_AWCACHE_OUT[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTH_AWPROT_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_AWPROT_OUT[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntTH_WID_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_WID_OUT[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTH_WVALID_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_WVALID_OUT = wire *strVar;

    sprintf(strVar,"ntTH_WLAST_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_WLAST_OUT = wire *strVar;

    sprintf(strVar,"ntTH_WDATA_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_WDATA_OUT[256:0] = wire *strVar[256:0];

    sprintf(strVar,"ntTH_WSTRB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_WSTRB_OUT[32:0] = wire *strVar[32:0];

    sprintf(strVar,"ntTH_BREADY_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_BREADY_OUT = wire *strVar;

    sprintf(strVar,"ntTH_ARID_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_ARID_OUT[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTH_ARVALID_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_ARVALID_OUT = wire *strVar;

    sprintf(strVar,"ntTH_ARADDR_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_ARADDR_OUT[32:0] = wire *strVar[32:0];

    sprintf(strVar,"ntTH_ARLEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_ARLEN_OUT[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTH_ARSIZE_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_ARSIZE_OUT[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntTH_ARBURST_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_ARBURST_OUT[2:0] = wire *strVar[2:0];

    sprintf(strVar,"ntTH_ARLOCK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_ARLOCK_OUT[2:0] = wire *strVar[2:0];

    sprintf(strVar,"ntTH_ARCACHE_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_ARCACHE_OUT[4:0] = wire *strVar[4:0];

    sprintf(strVar,"ntTH_ARPROT_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_ARPROT_OUT[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntTH_RREADY_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTH_RREADY_OUT[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;


    sprintf(strVar, "CGRA_TILE_%d_%d", sx, sy);
    device CGRA_TILE *strVar
         port map (
                      TH_CGRA_CLK_OUT => ntRef_ntTH_CGRA_CLK_OUT,
                      TH_RDATA_OUT => ntRef_ntTH_RDATA_OUT,
                      TH_BRESP_OUT => ntRef_ntTH_BRESP_OUT,
                      TH_RRESP_OUT => ntRef_ntTH_RRESP_OUT,
                      TH_BID_OUT => ntRef_ntTH_BID_OUT,
                      TH_RID_OUT => ntRef_ntTH_RID_OUT,
                      TH_AWREADY_OUT => ntRef_ntTH_AWREADY_OUT,
                      TH_WREADY_OUT => ntRef_ntTH_WREADY_OUT,
                      TH_BVALID_OUT => ntRef_ntTH_BVALID_OUT,
                      TH_ARREADY_OUT => ntRef_ntTH_ARREADY_OUT,
                      TH_RLAST_OUT => ntRef_ntTH_RLAST_OUT,
                      TH_RVALID_OUT => ntRef_ntTH_RVALID_OUT,
                      TH_AWID_OUT => ntRef_ntTH_AWID_OUT,
                      TH_AWVALID_OUT => ntRef_ntTH_AWVALID_OUT,
                      TH_AWADDR_OUT => ntRef_ntTH_AWADDR_OUT,
                      TH_AWLEN_OUT => ntRef_ntTH_AWLEN_OUT,
                      TH_AWSIZE_OUT => ntRef_ntTH_AWSIZE_OUT,
                      TH_AWBURST_OUT => ntRef_ntTH_AWBURST_OUT,
                      TH_AWLOCK_OUT => ntRef_ntTH_AWLOCK_OUT,
                      TH_AWCACHE_OUT => ntRef_ntTH_AWCACHE_OUT,
                      TH_AWPROT_OUT => ntRef_ntTH_AWPROT_OUT,
                      TH_WID_OUT => ntRef_ntTH_WID_OUT,
                      TH_WVALID_OUT => ntRef_ntTH_WVALID_OUT,
                      TH_WLAST_OUT => ntRef_ntTH_WLAST_OUT,
                      TH_WDATA_OUT => ntRef_ntTH_WDATA_OUT,
                      TH_WSTRB_OUT => ntRef_ntTH_WSTRB_OUT,
                      TH_BREADY_OUT => ntRef_ntTH_BREADY_OUT,
                      TH_ARID_OUT => ntRef_ntTH_ARID_OUT,
                      TH_ARVALID_OUT => ntRef_ntTH_ARVALID_OUT,
                      TH_ARADDR_OUT => ntRef_ntTH_ARADDR_OUT,
                      TH_ARLEN_OUT => ntRef_ntTH_ARLEN_OUT,
                      TH_ARSIZE_OUT => ntRef_ntTH_ARSIZE_OUT,
                      TH_ARBURST_OUT => ntRef_ntTH_ARBURST_OUT,
                      TH_ARLOCK_OUT => ntRef_ntTH_ARLOCK_OUT,
                      TH_ARCACHE_OUT => ntRef_ntTH_ARCACHE_OUT,
                      TH_ARPROT_OUT => ntRef_ntTH_ARPROT_OUT,
                      TH_RREADY_OUT => ntRef_ntTH_RREADY_OUT,
                      TIEHI => ntRef_ntTIEHI
                  )
        @([sx,sy]);

      STRUCT inc_spec_CGRA incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB,ty_srb;
      int sx_srb,sy_srb,sx_cramsl;

      foreach incVar(inc_CGRA_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;

          sy_srb = 4 * NUM_TILES_REGION * NUM_GRID_Y;
          sx_srb = (loc_SRB + tx) * NUM_GRID_X;
          sx_cramsl = (loc_SRB + tx) * NUM_GRID_X + 2;

          if(attribute_IO =="I")
          { 
             connect(<pin *pin_logic_device of <device CGRA_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
             connect(<pin *pin_SRB of<device CRAMSL2_TILE@[sx_cramsl,sy_srb]>> =>  <wire *pin_logic_device of <device CGRA_TILE @[sx,sy]>>); 
          }
      }

} //end of place_cgra_tile

} // end of pkgs pgl200es_funcs_place

