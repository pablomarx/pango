use pgl_defs,pgl35es_defs,pgl_RCKB_SRB_inc,pgl_SOC_SRB_inc, pgl_CCS_SRB_inc,pgl_funcs_place,pgl_IBM_SRB_inc,pgl_TIEHI_SRB_inc;

package pgl200es_funcs
{
/*******************************************************************
********************************************************************/
function connect_col_addr
(
    unsigned int region_index,
    unsigned int tx_blsr,
    unsigned int l_col_l[],
    unsigned int l_col_r[]
)
{
    int sy_blsr = region_index * NUM_GRID_BLSR_Y;
    int sx_blsr = BLSR_TILE_X * NUM_GRID_X;
    int sy_wlsr;

    int tx_wlsrd = 0;
    int tx,tmp_tx,sx;
    string device_wlsr;
    string pin_wlsr;
    foreach tx( l_col_l )
    {
        device_wlsr = "WLSR_TILE";
        pin_wlsr = "COL_ADDR";
        sy_wlsr = region_index * ((NUM_TILES_REGION-1)*NUM_GRID_Y+NUM_GRID_WLSR_Y) + MID_TILE_REGION*NUM_GRID_Y;
        sx = tx * NUM_GRID_X;
        foreach tmp_tx(L_WLSR1_TILES_X)
        {
          if(tmp_tx==tx)
          {
            device_wlsr = "WLSR1_TILE";
            break;
          }
        }
        foreach tmp_tx(L_WLSR2_TILES_X)
        {
          if(tmp_tx==tx)
          {
            device_wlsr = "WLSR2_TILE";
            break;
          }
        }
        foreach tmp_tx(L_WLSRA_TILES_X)
        {
          if(tmp_tx==tx)
          {
             device_wlsr = "WLSRA_TILE";
             break;
          }
        }
        foreach tmp_tx(L_WLSRD_TILES_X)
        {
          if(tmp_tx==tx)
          {
            device_wlsr = "WLSRD_TILE";
            connect 
              (
                <pin COL_ADDR_D[6:2] of <device *device_wlsr @ [sx,sy_wlsr]>>  => <wire COL_L_N_O[6:2] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
              );
            tx_wlsrd = tx_wlsrd + 1;
            if((tx_wlsrd-1)==0)
            {
              connect 
              (
                <pin COL_ADDR_D[1:0] of <device *device_wlsr @ [sx,sy_wlsr]>>  => <wire COL_L_N_O[1:0] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
              );
            }
            else if((tx_wlsrd-1)==1)
            {
              connect 
              (
                <pin COL_ADDR_D[1] of <device *device_wlsr @ [sx,sy_wlsr]>>  => <wire COL_L_N_O[1] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
                <pin COL_ADDR_D[0] of <device *device_wlsr @ [sx,sy_wlsr]>>  => <wire COL_L_O[0] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
              );
            }
            else if((tx_wlsrd-1)==2)
            {
              connect 
              (
                <pin COL_ADDR_D[1] of <device *device_wlsr @ [sx,sy_wlsr]>>  => <wire COL_L_O[1] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
                <pin COL_ADDR_D[0] of <device *device_wlsr @ [sx,sy_wlsr]>>  => <wire COL_L_N_O[0] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
              );
            }
            break;
          }
        }
        foreach tmp_tx(L_IOCKGATEDLL_TILES_X)
        {
          if(tmp_tx==tx)
          {
             device_wlsr = "IOCKGATEDLL_TILE";
             sy_wlsr = sy_wlsr - NUM_GRID_Y;
             sx = tx * NUM_GRID_X + 2;
             break;
          }
        }
        foreach tmp_tx(L_IOB_TILES_X)
        {
          if(tmp_tx==tx)
          {
             device_wlsr = "IOB_TILE";
             sy_wlsr = region_index * ((NUM_TILES_REGION-1)*NUM_GRID_Y + NUM_GRID_WLSR_Y);
             break;
          }
        }
         connect
          (
            <pin *pin_wlsr[6:5] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_L_N_O[6:5] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        if(tx>=16)
        {
          connect
          (
            <pin *pin_wlsr[4] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_L_O[4] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        }
        else
        {
          connect
          (
            <pin *pin_wlsr[4] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_L_N_O[4] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        }
        if(((tx>=8)&&(tx<16))||((tx>=24)&&(tx<32)))
        {
          connect
          (
            <pin *pin_wlsr[3] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_L_O[3] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        }
        else
        {
          connect
          (
            <pin *pin_wlsr[3] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_L_N_O[3] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        }
        if(((tx>=4)&&(tx<8))||((tx>=12)&&(tx<16))||((tx>=20)&&(tx<24))||((tx>=28)&&(tx<32)))
        {
          connect
          (
            <pin *pin_wlsr[2] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_L_O[2] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        }
        else
        {
          connect
          (
            <pin *pin_wlsr[2] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_L_N_O[2] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        }
        if(((tx>=2)&&(tx<4))||((tx>=6)&&(tx<8))||((tx>=10)&&(tx<12))||((tx>=14)&&(tx<16))||((tx>=18)&&(tx<20))||((tx>=22)&&(tx<24))||((tx>=26)&&(tx<28))||((tx>=30)&&(tx<32)))
        {
          connect
          (
            <pin *pin_wlsr[1] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_L_O[1] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        }
        else
        {
          connect
          (
            <pin *pin_wlsr[1] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_L_N_O[1] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        }
        if((tx==1)||(tx==3)||(tx==5)||(tx==7)||(tx==9)||(tx==11)||(tx==13)||(tx==15)||(tx==17)||(tx==19)||(tx==21)||(tx==23)||(tx==25)||(tx==27)||(tx==29))
        {
          connect
          (
            <pin *pin_wlsr[0] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_L_O[0] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        }
        else
        {
          connect
          (
            <pin *pin_wlsr[0] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_L_N_O[0] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        }  
    }

    foreach tx( l_col_r )
    {
        device_wlsr = "WLSR_TILE";
        pin_wlsr = "COL_ADDR";
        sx = tx * NUM_GRID_X;
        sy_wlsr = region_index * ((NUM_TILES_REGION-1)*NUM_GRID_Y+NUM_GRID_WLSR_Y) + MID_TILE_REGION*NUM_GRID_Y;
        foreach tmp_tx(L_WLSR1_TILES_X)
        {
          if(tmp_tx==tx)
          {
            device_wlsr = "WLSR1_TILE";
            break;
          }
        }
        foreach tmp_tx(L_WLSR2_TILES_X)
        {
          if(tmp_tx==tx)
          {
            device_wlsr = "WLSR2_TILE";
            break;
          }
        }
        foreach tmp_tx(L_WLSRA_TILES_X)
        {
          if(tmp_tx==tx)
          {
            device_wlsr = "WLSRA_TILE";
            break;
          }
        }
        foreach tmp_tx(L_WLSRD_TILES_X)
        {
          if(tmp_tx==tx)
          {
            device_wlsr = "WLSRD_TILE";
            connect 
              (
                <pin COL_ADDR_D[6:3] of <device *device_wlsr @ [sx,sy_wlsr]>>  => <wire COL_R_N_O[6:3] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
              );
            tx_wlsrd = tx_wlsrd + 1;
            if(((tx_wlsrd-1>=4)&&(tx_wlsrd-1<8)))
            {
              connect
              (
                <pin COL_ADDR_D[2] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_R_O[2] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
              );
            }
            else
            {
              connect
              (
                <pin COL_ADDR_D[2] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_R_N_O[2] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
              );
            }
            if(((tx_wlsrd-1>=2)&&(tx_wlsrd-1<4))||((tx_wlsrd-1>=6)&&(tx_wlsrd-1<8)))
            {
              connect
              (
                <pin COL_ADDR_D[1] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_R_O[1] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
              );
            }
            else
            {
              connect
              (
                <pin COL_ADDR_D[1] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_R_N_O[1] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
              );
            }
            if((tx_wlsrd-1==1)||(tx_wlsrd-1==3)||(tx_wlsrd-1==5)||(tx_wlsrd-1==7))
            {
              connect
              (
                <pin COL_ADDR_D[0] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_R_O[0] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
              );
            }
            else
            {
              connect
              (
                <pin COL_ADDR_D[0] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_R_N_O[0] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
              );
            }  
            break;
          }
        }
        foreach tmp_tx(L_RCKB_TILES_X)
        {
          if(tmp_tx==tx)
          {
             device_wlsr = "RCKB_TILE";
             sy_wlsr = sy_wlsr - NUM_GRID_Y;
             sx = tx * NUM_GRID_X + 2;
             connect
               (
                  <pin COL_ADDR[13] of <device RCKB_TILE @[sx,sy_wlsr]>> => <wire COL_R_N_O[6] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>,
                  <pin COL_ADDR[12] of <device RCKB_TILE @[sx,sy_wlsr]>> => <wire COL_R_O[5] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>,
                  <pin COL_ADDR[11] of <device RCKB_TILE @[sx,sy_wlsr]>> => <wire COL_R_O[4] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>,
                  <pin COL_ADDR[10] of <device RCKB_TILE @[sx,sy_wlsr]>> => <wire COL_R_O[3] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>,
                  <pin COL_ADDR[9] of <device RCKB_TILE @[sx,sy_wlsr]>>  => <wire COL_R_N_O[2] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>,
                  <pin COL_ADDR[8] of <device RCKB_TILE @[sx,sy_wlsr]>>  => <wire COL_R_N_O[1] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>,
                  <pin COL_ADDR[7] of <device RCKB_TILE @[sx,sy_wlsr]>>  => <wire COL_R_N_O[0] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
               );
             break;
          }
        }
        foreach tmp_tx(L_IOB_TILES_X)
        {
          if(tmp_tx==tx)
          {
             device_wlsr = "IOB_TILE";
             sy_wlsr = region_index * ((NUM_TILES_REGION-1)*NUM_GRID_Y + NUM_GRID_WLSR_Y);
             break;
          }
        }
        tx = tx - 1;
        connect
          (
              <pin *pin_wlsr[6] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_R_N_O[6] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        if(tx>=32)
        {
          connect
          (
            <pin *pin_wlsr[5] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_R_O[5] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        }
        else
        {
          connect
          (
            <pin *pin_wlsr[5] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_R_N_O[5] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        }

        if(((tx>=16)&&(tx<32))||(tx>=48))
        {
          connect
          (
            <pin *pin_wlsr[4] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_R_O[4] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        }
        else
        {
          connect
          (
            <pin *pin_wlsr[4] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_R_N_O[4] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        }
        if(((tx>=24)&&(tx<32))||((tx>=8)&&(tx<16))||((tx>=40)&&(tx<48))||((tx>=56)&&(tx<64)))
        {
          connect
          (
            <pin *pin_wlsr[3] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_R_O[3] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        }
        else
        {
          connect
          (
            <pin *pin_wlsr[3] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_R_N_O[3] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        }
        if(((tx>=20)&&(tx<24))||((tx>=28)&&(tx<32))||((tx>=36)&&(tx<40))||((tx>=44)&&(tx<48))||((tx>=52)&&(tx<56)))
        {
          connect
          (
            <pin *pin_wlsr[2] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_R_O[2] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        }
        else
        {
          connect
          (
            <pin *pin_wlsr[2] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_R_N_O[2] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        }
        if(((tx>=22)&&(tx<24))||((tx>=26)&&(tx<28))||((tx>=30)&&(tx<32))||((tx>=34)&&(tx<36))||((tx>=38)&&(tx<40))||((tx>=42)&&(tx<44))||((tx>=46)&&(tx<48))||((tx>=50)&&(tx<52))||((tx>=54)&&(tx<56))||((tx>=58)&&(tx<60)))
        {
          connect
          (
            <pin *pin_wlsr[1] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_R_O[1] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        }
        else
        {
          connect
          (
            <pin *pin_wlsr[1] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_R_N_O[1] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        }
        if((tx==25)||(tx==27)||(tx==29)||(tx==31)||(tx==33)||(tx==35)||(tx==37)||(tx==39)||(tx==41)||(tx==43)||(tx==45)||(tx==47)||(tx==49)||(tx==51)||(tx==53)||(tx==55)||(tx==57))
        {
          connect
          (
            <pin *pin_wlsr[0] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_R_O[0] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        }
        else
        {
          connect
          (
            <pin *pin_wlsr[0] of <device *device_wlsr @[sx,sy_wlsr]>> => <wire COL_R_N_O[0] of <device BLSR_TILE @[sx_blsr,sy_blsr]>>
          );
        }
    }
    
        
}//end of function connect_col_addr
/*******************************************************************
********************************************************************/
function connect_BLSR_input_pgl35es()
{
  int sx = BLSR_TILE_X * NUM_GRID_X;

  int sx_ccs = CCS_TILE_X * NUM_GRID_X + 2;
  int sy_ccs = CCS_TILE_Y * NUM_GRID_Y;
  int sx_rlybufs = RLYBUFS_TILE_X * NUM_GRID_X + 2;
  int sy_rlybufs = RLYBUFS_TILE_Y * NUM_GRID_Y;

  int sx_uscm = USCM_TILE_X * NUM_GRID_X + 2;
  int sy_uscm = USCM_TILE1_Y * NUM_GRID_Y;
  
  

  int ty;
  for(ty=CCS_TILE_Y;ty>MID_TILE_REGION;ty=ty-NUM_TILES_REGION)
  {
    sy_ccs = sy_ccs + NUM_GRID_WLSR_Y - NUM_GRID_Y;
  }

  connect
    (
      <pin BLSR_SEL_DN of <device BLSR_TILE @ [sx,2*NUM_GRID_BLSR_Y]>>  => <wire BLSR_SEL_O[0] of <device BLSR_TILE @ [sx,2*NUM_GRID_BLSR_Y]>>,
      <pin BLSR_SEL_UP of <device BLSR_TILE @ [sx,2*NUM_GRID_BLSR_Y]>>  => <wire BLSHFT_SEL_O[0] of <device CCS_TILE @ [sx_ccs,sy_ccs]>>,
      <pin REGION_RW_DN of <device BLSR_TILE @ [sx,2*NUM_GRID_BLSR_Y]>> => <wire REGION_RW_EN_O[0] of <device BLSR_TILE @ [sx,2*NUM_GRID_BLSR_Y]>>,
      <pin REGION_RW_UP of <device BLSR_TILE @ [sx,2*NUM_GRID_BLSR_Y]>> => <wire REGION_RW_EN_O[0] of <device CCS_TILE @ [sx_ccs,sy_ccs]>>,
      <pin REGION_RW_I of <device BLSR_TILE @ [sx,2*NUM_GRID_BLSR_Y]>>  => <wire REGION_RW_EN_O[0] of <device BLSR_TILE @ [sx,2*NUM_GRID_BLSR_Y]>>,
      <pin REGION_SEL_I of <device BLSR_TILE @ [sx,2*NUM_GRID_BLSR_Y]>> => <wire WLSR_SEL_O[0] of <device BLSR_TILE @ [sx,2*NUM_GRID_BLSR_Y]>>,
      <pin IREF10UA of <device BLSR_TILE @ [sx,2*NUM_GRID_BLSR_Y]>>     => <wire ICONST10U[0] of <device CCS_TILE @ [sx_ccs,sy_ccs]>>,

      <pin BLSR_SEL_DN of <device BLSR_TILE @ [sx,NUM_GRID_BLSR_Y]>>    => <wire BLSR_SEL_O[1] of <device BLSR_TILE @ [sx,NUM_GRID_BLSR_Y]>>,
      <pin BLSR_SEL_UP of <device BLSR_TILE @ [sx,NUM_GRID_BLSR_Y]>>    => <wire BLSR_SEL_O[1] of <device BLSR_TILE @ [sx,2*NUM_GRID_BLSR_Y]>>,
      <pin REGION_RW_DN of <device BLSR_TILE @ [sx,NUM_GRID_BLSR_Y]>>   => <wire REGION_RW_EN_O[1] of <device BLSR_TILE @ [sx,NUM_GRID_BLSR_Y]>>,
      <pin REGION_RW_UP of <device BLSR_TILE @ [sx,NUM_GRID_BLSR_Y]>>   => <wire REGION_RW_EN_O[1] of <device BLSR_TILE @ [sx,2*NUM_GRID_BLSR_Y]>>,
      <pin REGION_RW_I of <device BLSR_TILE @ [sx,NUM_GRID_BLSR_Y]>>    => <wire REGION_RW_EN_O[1] of <device BLSR_TILE @ [sx,NUM_GRID_BLSR_Y]>>,
      <pin REGION_SEL_I of <device BLSR_TILE @ [sx,NUM_GRID_BLSR_Y]>>   => <wire WLSR_SEL_O[1] of <device BLSR_TILE @ [sx,NUM_GRID_BLSR_Y]>>,
      <pin IREF10UA of <device BLSR_TILE @ [sx,NUM_GRID_BLSR_Y]>>       => <wire ICONST10U[1] of <device CCS_TILE @ [sx_ccs,sy_ccs]>>,

      <pin BLSR_SEL_DN of <device BLSR_TILE @ [sx,0]>>    => <wire BLSR_SEL_O[2] of <device BLSR_TILE @ [sx,0]>>,
      <pin BLSR_SEL_UP of <device BLSR_TILE @ [sx,0]>>    => <wire BLSR_SEL_O[2] of <device BLSR_TILE @ [sx,NUM_GRID_BLSR_Y]>>,
      <pin REGION_RW_DN of <device BLSR_TILE @ [sx,0]>>   => <wire REGION_RW_EN_O[2] of <device BLSR_TILE @ [sx,0]>>,
      <pin REGION_RW_UP of <device BLSR_TILE @ [sx,0]>>   => <wire REGION_RW_EN_O[2] of <device BLSR_TILE @ [sx,NUM_GRID_BLSR_Y]>>,
      <pin REGION_RW_I of <device BLSR_TILE @ [sx,0]>>    => <wire REGION_RW_EN_O[2] of <device BLSR_TILE @ [sx,0]>>,
      <pin REGION_SEL_I of <device BLSR_TILE @ [sx,0]>>   => <wire WLSR_SEL_O[2] of <device BLSR_TILE @ [sx,0]>>,
      <pin IREF10UA of <device BLSR_TILE @ [sx,0]>>       => <wire ICONST10U[2] of <device CCS_TILE @ [sx_ccs,sy_ccs]>>
    );
}//end of function connect_BLSR_input
/****************************************************************************************************
*****************************************************************************************************/
function connect_CCS_input
(
  unsigned int tx,
  unsigned int ty,
  unsigned int tx_iockgate,
  unsigned int ty_iockgate_t,
  unsigned int ty_blsr_t,
  unsigned int tx_idcode,
  unsigned int ty_idcode,
  unsigned int tx_esd,
  unsigned int tx_wlsr1
)
{
  int sx = tx*NUM_GRID_X + 2;

  int tmp_ty,sy;
  sy = ty * NUM_GRID_Y;
  for(tmp_ty=ty;tmp_ty > MID_TILE_REGION;tmp_ty = tmp_ty - NUM_TILES_REGION)
  {
    sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
  }
   
  
  connect 
    (
      <pin ADDR_D of <device CCS_TILE @[sx,sy]>>       => <wire ADDR_D of <device WLSRD_TILE @ [sx-2,sy-NUM_GRID_WLSR_Y]>>,
      <pin ADDR2 of <device CCS_TILE @[sx,sy]>>        => <wire ADDR[22] of <device WLSRD_TILE @ [sx-2,sy-NUM_GRID_WLSR_Y]>>,
      <pin ADDR1 of <device CCS_TILE @[sx,sy]>>        => <wire ADDR[27] of <device WLSR_TILE @ [sx+2+8*NUM_GRID_X,sy-NUM_GRID_WLSR_Y]>>,
      <pin ADDR0 of <device CCS_TILE @[sx,sy]>>        => <wire ADDR[26] of <device WLSR_TILE @ [sx+2+8*NUM_GRID_X,sy-NUM_GRID_WLSR_Y]>>,
      <pin ADDR_BLINT of <device CCS_TILE @[sx,sy]>>   => <wire ADDR[25:0] of <device WLSR_TILE @ [sx+2+8*NUM_GRID_X,sy-NUM_GRID_WLSR_Y]>>
    );
 
  int sx_blsr = BLSR_TILE_X * NUM_GRID_X;
  int sy_blsr = ty_blsr_t * NUM_GRID_BLSR_Y;
  int sx_esd = tx_esd * NUM_GRID_X;

  int sy_esd = NUM_REGION * ((NUM_TILES_REGION-1)*NUM_GRID_Y + NUM_GRID_WLSR_Y);

  connect
    (
      <pin COL_INC_I of <device CCS_TILE @[sx,sy]>>        => <wire COL_INC_O of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
      <pin NONDRM_REG_INC_I of <device CCS_TILE @[sx,sy]>> => <wire NONDRM_REG_INC_O of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
      <pin NONDRM_END_I of <device CCS_TILE @[sx,sy]>>     => <wire NONDRM_END_O of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
      <pin DATABACK_I of <device CCS_TILE @[sx,sy]>>       => <wire DSROUTTO_CONFIG of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
      <pin DATA of <device CCS_TILE @[sx,sy]>>             => <wire DATA[2175:1096] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
      <pin DATAN of <device CCS_TILE @[sx,sy]>>            => <wire DATAN[2175:1096] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
      <pin READ_OL of <device CCS_TILE @[sx,sy]>>          => <wire BUS_WLSR_OUTL[11] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
      <pin DCI_MATCH of <device CCS_TILE @[sx,sy]>>        => <wire DCI_INIT of <device BLSR_TILE@[sx_blsr,sy_blsr]>>,
      <pin DDR_VREF_I of <device CCS_TILE @ [sx,sy]>>       => <wire TIEHI of <device CCS_TILE @ [sx,sy]>>,
      <pin CMFB_VREF_I of <device CCS_TILE @ [sx,sy]>>      => <wire TIEHI of <device CCS_TILE @ [sx,sy]>>

    );

  int sx_pll = PLL_TILE_X * NUM_GRID_X + 2;
  int sy_pll0 = PLL_TILE0_Y * NUM_GRID_Y;
  for(tmp_ty=PLL_TILE0_Y;tmp_ty > MID_TILE_REGION;tmp_ty = tmp_ty - NUM_TILES_REGION)
  {
    sy_pll0 = sy_pll0 + NUM_GRID_WLSR_Y - NUM_GRID_Y;
  }

  int sy_pll1 = PLL_TILE1_Y * NUM_GRID_Y;
  for(tmp_ty=PLL_TILE1_Y;tmp_ty > MID_TILE_REGION;tmp_ty = tmp_ty - NUM_TILES_REGION)
  {
    sy_pll1 = sy_pll1 + NUM_GRID_WLSR_Y - NUM_GRID_Y;
  }

  int sy_pll2 = PLL_TILE2_Y * NUM_GRID_Y;
  for(tmp_ty=PLL_TILE2_Y;tmp_ty > MID_TILE_REGION;tmp_ty = tmp_ty - NUM_TILES_REGION)
  {
    sy_pll2 = sy_pll2 + NUM_GRID_WLSR_Y - NUM_GRID_Y;
  }


  int sy_pll3 = PLL_TILE3_Y * NUM_GRID_Y;
  for(tmp_ty=PLL_TILE3_Y;tmp_ty > MID_TILE_REGION;tmp_ty = tmp_ty - NUM_TILES_REGION)
  {
    sy_pll3 = sy_pll3 + NUM_GRID_WLSR_Y - NUM_GRID_Y;
  }

  int sy_pll4 = PLL_TILE4_Y * NUM_GRID_Y;
  for(tmp_ty=PLL_TILE4_Y;tmp_ty > MID_TILE_REGION;tmp_ty = tmp_ty - NUM_TILES_REGION)
  {
    sy_pll4 = sy_pll4 + NUM_GRID_WLSR_Y - NUM_GRID_Y;
  }

  int sy_pll5 = PLL_TILE5_Y * NUM_GRID_Y;
  int sx_wlsr1 = tx_wlsr1 * NUM_GRID_X;

  connect
    (
      <pin PLL_LOCK of <device CCS_TILE @ [sx,sy]>>         => <wire LOCK of <device PLL_TILE @ [sx_pll,sy_pll5]>>,
      <pin PLL_LDO_I[5] of <device CCS_TILE @ [sx,sy]>>     => <wire VCP of <device PLL_TILE @ [sx_pll,sy_pll5]>>,
      <pin PLL_LDO_I[4] of <device CCS_TILE @ [sx,sy]>>     => <wire VCP of <device PLL_TILE @ [sx_pll,sy_pll4]>>,
      <pin PLL_LDO_I[3] of <device CCS_TILE @ [sx,sy]>>     => <wire VCP of <device PLL_TILE @ [sx_pll,sy_pll3]>>,
      <pin PLL_LDO_I[2] of <device CCS_TILE @ [sx,sy]>>     => <wire VCP of <device PLL_TILE @ [sx_pll,sy_pll2]>>,
      <pin PLL_LDO_I[1] of <device CCS_TILE @ [sx,sy]>>     => <wire VCP of <device PLL_TILE @ [sx_pll,sy_pll1]>>,
      <pin PLL_LDO_I[0] of <device CCS_TILE @ [sx,sy]>>     => <wire VCP of <device PLL_TILE @ [sx_pll,sy_pll0]>>


    );

  connect
    (
      //<pin TDO_BSCAN_IO of <device CCS_TILE @[sx,sy]>>  => <wire TDO_OUT of <device ESD_PGL22G_TILE @ [sx_esd,sy_esd]>>,
      <pin TDO_BSCAN_IO of <device CCS_TILE @[sx,sy]>>  => <wire TDO_OUT of <device BUF_PGL35IP_TILE @ [BUF_PGL35ES_TILE_X*NUM_GRID_X,BUF_PGL35ES_TILE_Y*NUM_GRID_Y]>>,//update @20180718

      <pin COL_SEL_CCS2 of <device CCS_TILE @[sx,sy]>>  => <wire COL_SEL_CCS of <device WLSR_TILE@[sx+2,sy-NUM_GRID_WLSR_Y]>>,
      <pin COL_SEL_CCS3 of <device CCS_TILE @[sx,sy]>>  => <wire COL_SEL_CCS of <device WLSR_TILE@[sx+2+NUM_GRID_X,sy-NUM_GRID_WLSR_Y]>>,
      <pin COL_SEL_CCS4 of <device CCS_TILE @[sx,sy]>>  => <wire COL_SEL_CCS of <device WLSR_TILE@[sx+2+2*NUM_GRID_X,sy-NUM_GRID_WLSR_Y]>>,
      <pin COL_SEL_CCS5 of <device CCS_TILE @[sx,sy]>>  => <wire COL_SEL_CCS of <device WLSR_TILE@[sx+2+3*NUM_GRID_X,sy-NUM_GRID_WLSR_Y]>>,
      <pin COL_SEL_CCS6 of <device CCS_TILE @[sx,sy]>>  => <wire COL_SEL_CCS of <device WLSR_TILE@[sx+2+4*NUM_GRID_X,sy-NUM_GRID_WLSR_Y]>>,
      <pin COL_SEL_CCS7 of <device CCS_TILE @[sx,sy]>>  => <wire COL_SEL_CCS of <device WLSR_TILE@[sx+2+5*NUM_GRID_X,sy-NUM_GRID_WLSR_Y]>>,
      <pin COL_SEL_CCS8 of <device CCS_TILE @[sx,sy]>>  => <wire COL_SEL_CCS1 of <device WLSRD_TILE@[sx+2+6*NUM_GRID_X,sy-NUM_GRID_WLSR_Y]>>,
      <pin COL_SEL_CCS9 of <device CCS_TILE @[sx,sy]>>  => <wire COL_SEL_CCS2 of <device WLSRD_TILE@[sx+2+6*NUM_GRID_X,sy-NUM_GRID_WLSR_Y]>>,
      <pin COL_SEL_CCS10 of <device CCS_TILE @[sx,sy]>>  => <wire COL_SEL_CCS of <device WLSR_TILE@[sx+2+7*NUM_GRID_X,sy-NUM_GRID_WLSR_Y]>>,

      <pin BSMODE1_DIO of <device CCS_TILE @[sx,sy]>>   => <wire BUS_BSCAN_OUT[2] of <device WLSR1_TILE@[sx_wlsr1,sy-NUM_GRID_WLSR_Y]>>,
      <pin BSMODE2_DIO of <device CCS_TILE @[sx,sy]>>   => <wire BUS_BSCAN_OUT[3] of <device WLSR1_TILE@[sx_wlsr1,sy-NUM_GRID_WLSR_Y]>>,
      <pin BSMODE3_DIO of <device CCS_TILE @[sx,sy]>>   => <wire BUS_BSCAN_OUT[15] of <device WLSR1_TILE@[sx_wlsr1,sy-NUM_GRID_WLSR_Y]>>,
      <pin UPDATEDR_DIO of <device CCS_TILE @[sx,sy]>>  => <wire BUS_BSCAN_OUT[6] of <device WLSR1_TILE@[sx_wlsr1,sy-NUM_GRID_WLSR_Y]>>,
      <pin SHIFTDR_DIO of <device CCS_TILE @[sx,sy]>>   => <wire BUS_BSCAN_OUT[5] of <device WLSR1_TILE@[sx_wlsr1,sy-NUM_GRID_WLSR_Y]>>,
      <pin GOUTEN_DIO of <device CCS_TILE @[sx,sy]>>    => <wire BUS_BSCAN_OUT[13] of <device WLSR1_TILE@[sx_wlsr1,sy-NUM_GRID_WLSR_Y]>>
    );

  connect
    (
      //<pin GLOGEN_FB of <device CCS_TILE @ [sx,sy]>>  => <wire GLOGEN_FB_OUT of <device ESD_PGL22G_TILE @ [sx_esd,sy_esd]>>            
      <pin GLOGEN_FB of <device CCS_TILE @ [sx,sy]>>  => <wire GLOGEN_FB_OUT of <device BUF_PGL35IP_TILE @ [BUF_PGL35ES_TILE_X*NUM_GRID_X,BUF_PGL35ES_TILE_Y*NUM_GRID_Y]>>//update @20180718
    );

  int sx_idcode = tx_idcode * NUM_GRID_X + 2;
  int sy_idcode = ty_idcode * NUM_GRID_Y;
  for(tmp_ty=ty_idcode;tmp_ty > MID_TILE_REGION;tmp_ty = tmp_ty - NUM_TILES_REGION)
  {
    sy_idcode = sy_idcode + NUM_GRID_WLSR_Y - NUM_GRID_Y;
  }

  connect
    (
      <pin IDCODE of <device CCS_TILE @[sx,sy]>>  => <wire IDCODE of <device IDCODE_PGL35IP_TILE @ [sx_idcode,sy_idcode]>>
    );

  &wire ntRef_ntTCK = <wire ntTCK>;
  &wire ntRef_ntTDI = <wire ntTDI>;
  &wire ntRef_ntTMS = <wire ntTMS>;
  &wire ntRef_ntTDO = <wire ntTDO>;
  &wire ntRef_ntTDO_TS = <wire ntTDO_TS>;
  &wire ntRef_ntCFG_DONE = <wire ntCFG_DONE>;
  &wire ntRef_ntRST_N = <wire ntRST_N>;
  &wire ntRef_ntREXT = <wire ntREXT>;

  &wire ntRef_ntCS_N = <wire ntCS_N>;
  &wire ntRef_ntRWSEL = <wire ntRWSEL>;
  &wire ntRef_ntBUSY = <wire ntBUSY>;

  &wire ntRef_ntINIT_FLAG_N = <wire ntINIT_FLAG_N>;
  &wire ntRef_ntCFG_CLK = <wire ntCFG_CLK>;
  &wire ntRef_ntDIN_0  = <wire ntDIN_0>;
  &wire ntRef_ntDIN_1  = <wire ntDIN_1>;
  &wire ntRef_ntDIN_2  = <wire ntDIN_2>;
  &wire ntRef_ntDIN_3  = <wire ntDIN_3>;
  &wire ntRef_ntDIN_4  = <wire ntDIN_4>;
  &wire ntRef_ntDIN_5  = <wire ntDIN_5>;
  &wire ntRef_ntDIN_6  = <wire ntDIN_6>;
  &wire ntRef_ntDIN_7  = <wire ntDIN_7>;
  &wire ntRef_ntDIN_8  = <wire ntDIN_8>;
  &wire ntRef_ntDIN_9  = <wire ntDIN_9>;
  &wire ntRef_ntDIN_10 = <wire ntDIN_10>;
  &wire ntRef_ntDIN_11 = <wire ntDIN_11>;
  &wire ntRef_ntDIN_12 = <wire ntDIN_12>;
  &wire ntRef_ntDIN_13 = <wire ntDIN_13>;
  &wire ntRef_ntDIN_14 = <wire ntDIN_14>;
  &wire ntRef_ntDIN_15 = <wire ntDIN_15>;
  &wire ntRef_ntDIN_16 = <wire ntDIN_16>;
  &wire ntRef_ntDIN_17 = <wire ntDIN_17>;
  &wire ntRef_ntDIN_18 = <wire ntDIN_18>;
  &wire ntRef_ntDIN_19 = <wire ntDIN_19>;
  &wire ntRef_ntDIN_20 = <wire ntDIN_20>;
  &wire ntRef_ntDIN_21 = <wire ntDIN_21>;
  &wire ntRef_ntDIN_22 = <wire ntDIN_22>;
  &wire ntRef_ntDIN_23 = <wire ntDIN_23>;
  &wire ntRef_ntDIN_24 = <wire ntDIN_24>;
  &wire ntRef_ntDIN_25 = <wire ntDIN_25>;
  &wire ntRef_ntDIN_26 = <wire ntDIN_26>;
  &wire ntRef_ntDIN_27 = <wire ntDIN_27>;
  &wire ntRef_ntDIN_28 = <wire ntDIN_28>;
  &wire ntRef_ntDIN_29 = <wire ntDIN_29>;
  &wire ntRef_ntDIN_30 = <wire ntDIN_30>;
  &wire ntRef_ntDIN_31 = <wire ntDIN_31>;

  &wire ntRef_ntDOUT_0  = <wire ntDOUT_0>;
  &wire ntRef_ntDOUT_1  = <wire ntDOUT_1>;
  &wire ntRef_ntDOUT_2  = <wire ntDOUT_2>;
  &wire ntRef_ntDOUT_3  = <wire ntDOUT_3>;
  &wire ntRef_ntDOUT_4  = <wire ntDOUT_4>;
  &wire ntRef_ntDOUT_5  = <wire ntDOUT_5>;
  &wire ntRef_ntDOUT_6  = <wire ntDOUT_6>;
  &wire ntRef_ntDOUT_7  = <wire ntDOUT_7>;
  &wire ntRef_ntDOUT_8  = <wire ntDOUT_8>;
  &wire ntRef_ntDOUT_9  = <wire ntDOUT_9>;
  &wire ntRef_ntDOUT_10 = <wire ntDOUT_10>;
  &wire ntRef_ntDOUT_11 = <wire ntDOUT_11>;
  &wire ntRef_ntDOUT_12 = <wire ntDOUT_12>;
  &wire ntRef_ntDOUT_13 = <wire ntDOUT_13>;
  &wire ntRef_ntDOUT_14 = <wire ntDOUT_14>;
  &wire ntRef_ntDOUT_15 = <wire ntDOUT_15>;
  &wire ntRef_ntDOUT_16 = <wire ntDOUT_16>;
  &wire ntRef_ntDOUT_17 = <wire ntDOUT_17>;
  &wire ntRef_ntDOUT_18 = <wire ntDOUT_18>;
  &wire ntRef_ntDOUT_19 = <wire ntDOUT_19>;
  &wire ntRef_ntDOUT_20 = <wire ntDOUT_20>;
  &wire ntRef_ntDOUT_21 = <wire ntDOUT_21>;
  &wire ntRef_ntDOUT_22 = <wire ntDOUT_22>;
  &wire ntRef_ntDOUT_23 = <wire ntDOUT_23>;
  &wire ntRef_ntDOUT_24 = <wire ntDOUT_24>;
  &wire ntRef_ntDOUT_25 = <wire ntDOUT_25>;
  &wire ntRef_ntDOUT_26 = <wire ntDOUT_26>;
  &wire ntRef_ntDOUT_27 = <wire ntDOUT_27>;
  &wire ntRef_ntDOUT_28 = <wire ntDOUT_28>;
  &wire ntRef_ntDOUT_29 = <wire ntDOUT_29>;
  &wire ntRef_ntDOUT_30 = <wire ntDOUT_30>;
  &wire ntRef_ntDOUT_31 = <wire ntDOUT_31>;



  connect
    (
      <pin TCK of <device CCS_TILE @[sx,sy]>>             => ntRef_ntTCK,
      <pin TDI of <device CCS_TILE @[sx,sy]>>             => ntRef_ntTDI,
      <pin TMS of <device CCS_TILE @[sx,sy]>>             => ntRef_ntTMS,
      <pin TDO of <device CCS_TILE @[sx,sy]>>             => ntRef_ntTDO,
      <pin TDO_TS of <device CCS_TILE @[sx,sy]>>          => ntRef_ntTDO_TS,
      <pin CFG_DONE of <device CCS_TILE @[sx,sy]>>        => ntRef_ntCFG_DONE,
      <pin BUSY of <device CCS_TILE @[sx,sy]>>            => ntRef_ntBUSY,
      <pin RST_N of <device CCS_TILE @[sx,sy]>>           => ntRef_ntRST_N,
      <pin CS_N of <device CCS_TILE @[sx,sy]>>            => ntRef_ntCS_N,
      <pin RDWR_N of <device CCS_TILE @[sx,sy]>>          => ntRef_ntRWSEL,

      <pin SCLK of <device CCS_TILE @[sx,sy]>>            => ntRef_ntCFG_CLK,

      <pin DIN[0] of <device CCS_TILE @[sx,sy]>>         => ntRef_ntDIN_0,
      <pin DIN[1] of <device CCS_TILE @[sx,sy]>>         => ntRef_ntDIN_1,
      <pin DIN[2] of <device CCS_TILE @[sx,sy]>>         => ntRef_ntDIN_2,
      <pin DIN[3] of <device CCS_TILE @[sx,sy]>>         => ntRef_ntDIN_3,
      <pin DIN[4] of <device CCS_TILE @[sx,sy]>>         => ntRef_ntDIN_4,
      <pin DIN[5] of <device CCS_TILE @[sx,sy]>>         => ntRef_ntDIN_5,
      <pin DIN[6] of <device CCS_TILE @[sx,sy]>>         => ntRef_ntDIN_6,
      <pin DIN[7] of <device CCS_TILE @[sx,sy]>>         => ntRef_ntDIN_7,
      <pin DIN[8] of <device CCS_TILE @[sx,sy]>>         => ntRef_ntDIN_8,
      <pin DIN[9] of <device CCS_TILE @[sx,sy]>>         => ntRef_ntDIN_9,
      <pin DIN[10] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDIN_10,
      <pin DIN[11] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDIN_11,
      <pin DIN[12] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDIN_12,
      <pin DIN[13] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDIN_13,
      <pin DIN[14] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDIN_14,
      <pin DIN[15] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDIN_15,
      <pin DIN[16] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDIN_16,
      <pin DIN[17] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDIN_17,
      <pin DIN[18] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDIN_18,
      <pin DIN[19] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDIN_19,
      <pin DIN[20] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDIN_20,
      <pin DIN[21] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDIN_21,
      <pin DIN[22] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDIN_22,
      <pin DIN[23] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDIN_23,
      <pin DIN[24] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDIN_24,
      <pin DIN[25] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDIN_25,
      <pin DIN[26] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDIN_26,
      <pin DIN[27] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDIN_27,
      <pin DIN[28] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDIN_28,
      <pin DIN[29] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDIN_29,
      <pin DIN[30] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDIN_30,
      <pin DIN[31] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDIN_31,

      <pin DOUT[0] of <device CCS_TILE @[sx,sy]>>         => ntRef_ntDOUT_0,
      <pin DOUT[1] of <device CCS_TILE @[sx,sy]>>         => ntRef_ntDOUT_1,
      <pin DOUT[2] of <device CCS_TILE @[sx,sy]>>         => ntRef_ntDOUT_2,
      <pin DOUT[3] of <device CCS_TILE @[sx,sy]>>         => ntRef_ntDOUT_3,
      <pin DOUT[4] of <device CCS_TILE @[sx,sy]>>         => ntRef_ntDOUT_4,
      <pin DOUT[5] of <device CCS_TILE @[sx,sy]>>         => ntRef_ntDOUT_5,
      <pin DOUT[6] of <device CCS_TILE @[sx,sy]>>         => ntRef_ntDOUT_6,
      <pin DOUT[7] of <device CCS_TILE @[sx,sy]>>         => ntRef_ntDOUT_7,
      <pin DOUT[8] of <device CCS_TILE @[sx,sy]>>         => ntRef_ntDOUT_8,
      <pin DOUT[9] of <device CCS_TILE @[sx,sy]>>         => ntRef_ntDOUT_9,
      <pin DOUT[10] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDOUT_10,
      <pin DOUT[11] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDOUT_11,
      <pin DOUT[12] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDOUT_12,
      <pin DOUT[13] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDOUT_13,
      <pin DOUT[14] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDOUT_14,
      <pin DOUT[15] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDOUT_15,
      <pin DOUT[16] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDOUT_16,
      <pin DOUT[17] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDOUT_17,
      <pin DOUT[18] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDOUT_18,
      <pin DOUT[19] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDOUT_19,
      <pin DOUT[20] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDOUT_20,
      <pin DOUT[21] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDOUT_21,
      <pin DOUT[22] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDOUT_22,
      <pin DOUT[23] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDOUT_23,
      <pin DOUT[24] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDOUT_24,
      <pin DOUT[25] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDOUT_25,
      <pin DOUT[26] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDOUT_26,
      <pin DOUT[27] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDOUT_27,
      <pin DOUT[28] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDOUT_28,
      <pin DOUT[29] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDOUT_29,
      <pin DOUT[30] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDOUT_30,
      <pin DOUT[31] of <device CCS_TILE @[sx,sy]>>        => ntRef_ntDOUT_31,

      <pin INIT_COMPLETE of <device CCS_TILE @[sx,sy]>>      => ntRef_ntINIT_FLAG_N,

      <pin REXT_PAD of <device CCS_TILE @[sx,sy]>>   => ntRef_ntREXT

    );

}//end of function connect_CCS_input
/****************************************************************************************************
*****************************************************************************************************/
//function connect_esd_tile(unsigned int tx,ty)
//{
//    unsigned int sx,sy;
//    sx = tx * NUM_GRID_X;
//    sy = ty * NUM_GRID_Y;
//    
//    unsigned int temp_ty;
//    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
//    {
//      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
//    }
//
//    int sx_dll_l = 1 * NUM_GRID_X + 2;
//    int sx_dll_r = (NUM_TILE_X - 2) * NUM_GRID_X + 2;
//    int sy_dll_u = (NUM_REGION-1)*((NUM_TILES_REGION-1)*NUM_GRID_Y + NUM_GRID_IOCKGATE_Y) + (MID_TILE_REGION-1) * NUM_GRID_Y;
//    int sy_dll_d = MID_TILE_REGION * NUM_GRID_Y - NUM_GRID_Y;
//
//    int sx_ccs = CCS_TILE_X * NUM_GRID_X + 2;
//    int sy_ccs = (NUM_REGION-1)*((NUM_TILES_REGION-1)*NUM_GRID_Y + NUM_GRID_WLSR_Y) + MID_TILE_REGION * NUM_GRID_Y + NUM_GRID_WLSR_Y;
//
//    int sx_iob_l = 0;
//    int sy_iob_l = sy - NUM_TILES_REGION * NUM_GRID_Y;
//    int sx_iob_r = (NUM_TILE_X-1) * NUM_GRID_X;
//    int sy_iob_r = 0;
//
//    &wire ntRef_ntTDI = <wire ntTDI>;
//    connect
//      (
//        <pin CLOCK_DR_IN_T of <device ESD_PGL22G_TILE @[sx,sy]>>     =>  <wire CLOCKDR of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
//
////        <pin TDI_IN_T of <device ESD_PGL22G_TILE @[sx,sy]>>          => <wire TDI_CCS of <device CCS_TILE @[sx_ccs,sy_ccs]>> ,
//
//        <pin TDO_IN of <device ESD_PGL22G_TILE @[sx,sy]>>            => <wire SO[0] of <device IOB_TILE @[sx_iob_l,sy_iob_l]>>,
//
//        <pin GLOGEN_FB_IN of <device ESD_PGL22G_TILE @[sx,sy]>>      => <wire GLOGEN_FB_OUT of <device IOCKGATEDLL_TILE @[sx_dll_l,sy_dll_u]>>,
//
////        <pin S11_PAD_STATE_IN of <device ESD_PGL22G_TILE @[sx,sy]>>  => <wire S11_PAD_STATE_OUT of <device HMEMCIOCKGATEDLL_TILE @[sx_dll_l,sy_dll_d]>>,
//
////        <pin CLOCK_DR_IN_B of <device ESD_PGL22G_TILE @[sx,sy]>>     => <wire CLOCK_DR_OUT of <device HMEMCIOCKGATEDLL_TILE @[sx_dll_l,sy_dll_d]>>,
//
//        <pin TDI_IN_B of <device ESD_PGL22G_TILE @[sx,sy]>>          => ntRef_ntTDI 
//                           
//      );
//}
//new add @20180718//////////////////////////////////////////
function connect_buf_tile(unsigned int tx,ty)
{
    unsigned int sx,sy;
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    int sx_dll_l = 1 * NUM_GRID_X + 2;
    int sx_dll_r = (NUM_TILE_X - 2) * NUM_GRID_X + 2;
    int sy_dll_u = (NUM_REGION-1)*((NUM_TILES_REGION-1)*NUM_GRID_Y + NUM_GRID_IOCKGATE_Y) + (MID_TILE_REGION-1) * NUM_GRID_Y;
    int sy_dll_d = MID_TILE_REGION * NUM_GRID_Y - NUM_GRID_Y;

    int sx_ccs = CCS_TILE_X * NUM_GRID_X + 2;
    int sy_ccs = (NUM_REGION-1)*((NUM_TILES_REGION-1)*NUM_GRID_Y + NUM_GRID_WLSR_Y) + MID_TILE_REGION * NUM_GRID_Y + NUM_GRID_WLSR_Y;

    int sx_iob_l = 0;
    int sy_iob_l = sy - NUM_TILES_REGION * NUM_GRID_Y;
    int sx_iob_r = (NUM_TILE_X-1) * NUM_GRID_X;
    int sy_iob_r = 0;

    &wire ntRef_ntTDI = <wire ntTDI>;
    connect
      (
        <pin CLOCK_DR_IN_T of <device BUF_PGL35IP_TILE @[sx,sy]>>  => <wire CLOCKDR       of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin TDO_IN        of <device BUF_PGL35IP_TILE @[sx,sy]>>  => <wire SO[0]         of <device IOB_TILE @[sx_iob_l,sy_iob_l]>>,
        <pin GLOGEN_FB_IN  of <device BUF_PGL35IP_TILE @[sx,sy]>>  => <wire GLOGEN_FB_OUT of <device IOCKGATEDLL_TILE @[sx_dll_l,sy_dll_u]>>,
        <pin TDI_IN_B      of <device BUF_PGL35IP_TILE @[sx,sy]>>  => ntRef_ntTDI 
      );
}
//new add @20180718//////////////////////////////////////////
/****************************************************************************************************
*****************************************************************************************************/
function connect_bias_iob(string LR)
{
    int sx = (LR=="L") ? 0 : (NUM_TILE_X-1)*NUM_GRID_X;
    int sy0 = 0;
    int sy1 = (NUM_TILES_REGION-1)*NUM_GRID_Y + NUM_GRID_WLSR_Y;
    int sy2 = 2*((NUM_TILES_REGION-1)*NUM_GRID_Y + NUM_GRID_WLSR_Y);

    int sx_ccs = CCS_TILE_X * NUM_GRID_X + 2;
    int sy_ccs = CCS_TILE_Y * NUM_GRID_Y;

    int ty;
    for(ty=CCS_TILE_Y;ty>MID_TILE_REGION;ty=ty-NUM_TILES_REGION)
    {
      sy_ccs = sy_ccs + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    if(LR=="L")
    {
      connect
        (
          <pin ICC10U of <device IOB_TILE@[sx,sy0]>> => <wire ICONST10U[5] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
          <pin ICC10U of <device IOB_TILE@[sx,sy1]>> => <wire ICONST10U[4] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
          <pin ICC10U of <device IOB_TILE@[sx,sy2]>> => <wire ICONST10U[3] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,

          <pin IPO10U of <device IOB_TILE@[sx,sy0]>> => <wire IPOLY10U[2] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
          <pin IPO10U of <device IOB_TILE@[sx,sy1]>> => <wire IPOLY10U[1] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
          <pin IPO10U of <device IOB_TILE@[sx,sy2]>> => <wire IPOLY10U[0] of <device CCS_TILE @[sx_ccs,sy_ccs]>>
        );
    }
    else
    {
      connect
        (
          <pin ICC10U of <device IOB_TILE@[sx,sy0]>> => <wire ICONST10U[8] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
          <pin ICC10U of <device IOB_TILE@[sx,sy1]>> => <wire ICONST10U[7] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
          <pin ICC10U of <device IOB_TILE@[sx,sy2]>> => <wire ICONST10U[6] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,

          <pin IPO10U of <device IOB_TILE@[sx,sy0]>> => <wire IPOLY10U[5] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
          <pin IPO10U of <device IOB_TILE@[sx,sy1]>> => <wire IPOLY10U[4] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
          <pin IPO10U of <device IOB_TILE@[sx,sy2]>> => <wire IPOLY10U[3] of <device CCS_TILE @[sx_ccs,sy_ccs]>>
        );
    }
}
/****************************************************************************************************
*****************************************************************************************************/
function connect_bias_pll()
{
    int sx_ccs = CCS_TILE_X * NUM_GRID_X + 2;
    int sy_ccs = CCS_TILE_Y * NUM_GRID_Y;

    int ty;
    for(ty=CCS_TILE_Y;ty>MID_TILE_REGION;ty=ty-NUM_TILES_REGION)
    {
      sy_ccs = sy_ccs + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    int sx_pll = PLL_TILE_X * NUM_GRID_X + 2;
    int sy_pll0 = PLL_TILE0_Y * NUM_GRID_Y;
    int sy_pll1 = PLL_TILE1_Y * NUM_GRID_Y;
    int sy_pll2 = PLL_TILE2_Y * NUM_GRID_Y;
    int sy_pll3 = PLL_TILE3_Y * NUM_GRID_Y;
    int sy_pll4 = PLL_TILE4_Y * NUM_GRID_Y;
    int sy_pll5 = PLL_TILE5_Y * NUM_GRID_Y;

    connect
      (
        <pin IPOLY_LDO of <device PLL_TILE @[sx_pll,sy_pll5]>> => <wire IPOLY10U[11] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin IPOLY_LDO of <device PLL_TILE @[sx_pll,sy_pll4]>> => <wire IPOLY10U[10] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin IPOLY_LDO of <device PLL_TILE @[sx_pll,sy_pll3]>> => <wire IPOLY10U[9] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin IPOLY_LDO of <device PLL_TILE @[sx_pll,sy_pll2]>> => <wire IPOLY10U[8] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin IPOLY_LDO of <device PLL_TILE @[sx_pll,sy_pll1]>> => <wire IPOLY10U[7] of <device CCS_TILE @[sx_ccs,sy_ccs]>>,
        <pin IPOLY_LDO of <device PLL_TILE @[sx_pll,sy_pll0]>> => <wire IPOLY10U[6] of <device CCS_TILE @[sx_ccs,sy_ccs]>>
      );

}
/****************************************************************************************************
*****************************************************************************************************/
function connect_rlybufs_tile
(
    unsigned int tx,
    unsigned int ty,
    unsigned int tx_pll,
    unsigned int ty_pll0,
    unsigned int ty_pll1,
    unsigned int tx_wlsr2,
    unsigned int ty_wlsr2
)
{
    int sx = tx * NUM_GRID_X + 2;
    int sy = ty * NUM_GRID_Y;

    int sx_pll = tx_pll * NUM_GRID_X + 2;
    int sy_pll0 = ty_pll0 * NUM_GRID_Y;
    int sy_pll1 = ty_pll1 * NUM_GRID_Y;



    int sx_wlsr2 = tx_wlsr2 * NUM_GRID_X;
    int sy_wlsr2 = ty_wlsr2 * NUM_GRID_Y;

    connect
      (
        <pin CLK_PREGMUX_IN[15:8] of <device RLYBUFS_TILE @[sx,sy]>>  => <wire CLK_PREGM_OUT of <device PLL_TILE @[sx_pll,sy_pll0]>>,
        <pin CLK_PREGMUX_IN[7:0] of <device RLYBUFS_TILE @[sx,sy]>>   => <wire CLK_PREGM_OUT of <device PLL_TILE @[sx_pll,sy_pll1]>>,

        <pin CLK_USCM_IN of <device RLYBUFS_TILE @[sx,sy]>>           => <wire CLK_USCM_BUF of <device WLSR2_TILE @[sx_wlsr2,sy_wlsr2]>>
      );

}//end of function connect_rlybufs_tile
/****************************************************************************************************
*****************************************************************************************************/
function connect_rckb_r_bl(unsigned int tx, rx, tx_blsr)
{
    int sx_blsr = tx_blsr * NUM_GRID_X;
    int sy_blsr = rx * NUM_GRID_BLSR_Y;

    int sx,sy;
    sx = tx * NUM_GRID_X;  
    sy = rx * ((NUM_TILES_REGION-1)*NUM_GRID_Y+NUM_GRID_WLSR_Y) + (MID_TILE_REGION-1)*NUM_GRID_Y; 

    connect
      (
        <pin DATA of <device RCKB_TILE @ [sx+2,sy]>>   => <wire DATA_R_NEXT[1167:1008] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
        <pin DATAN of <device RCKB_TILE @ [sx+2,sy]>>  => <wire DATAN_R_NEXT[1167:1008] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
      );
}
/****************************************************************************************************
*****************************************************************************************************/
function connect_cramsl2_r_wl
(
    unsigned int tx,
    unsigned int ty
)

{
    int sx,sy;
    sx = tx * NUM_GRID_X;  
    sy = ty * NUM_GRID_Y; 
    int rx = ty/NUM_TILES_REGION;
    int sy_rckb = rx * NUM_TILES_REGION * NUM_GRID_Y + (MID_TILE_REGION-1) * NUM_GRID_Y;

    connect
      (
        <pin ADDR of <device CRAMSL2_TILE @ [sx+2,sy]>>              => <wire ADDR[23:22] of <device RCKB_TILE @ [sx+2,sy_rckb]>>,
        <pin ADDR of <device CRAMSL2NOIBM_TILE @ [sx+NUM_GRID_X+2,sy]>>   => <wire ADDR[25:24] of <device RCKB_TILE @ [sx+2,sy_rckb]>>
      );
}
/****************************************************************************************************
*****************************************************************************************************/
function connect_cramsl2_r_bl_input
(
    unsigned int tx,
    unsigned int region_index, 
    unsigned int tx_blsr,
    unsigned int tx_rckb
)
{
    int sx_blsr = tx_blsr * NUM_GRID_X;
    int sy_blsr = region_index * NUM_GRID_BLSR_Y;

    int ty,tmp_ty,ty_all;
    int sx,sy;

    sx = tx * NUM_GRID_X;  
    string data = (tx<19) ? "DATA_L_NEXT"
                 :(tx>40) ? "DATA_R_NEXT"
                          : "DATA";
    string datan = (tx<19) ? "DATAN_L_NEXT"
                  :(tx>40) ? "DATAN_R_NEXT"
                           : "DATAN";
    string cramsl2_tile = (tx<57) ? "CRAMSL2_TILE" : "CRAMSL2NOIBM_TILE" ;

    foreach ty({[0:14],[17:30]})
    {
        sy =(ty>MID_TILE_REGION) ? region_index*((NUM_TILES_REGION-1)*NUM_GRID_Y+NUM_GRID_WLSR_Y)+(ty-1)*NUM_GRID_Y + NUM_GRID_WLSR_Y : region_index * ((NUM_TILES_REGION-1)*NUM_GRID_Y+NUM_GRID_WLSR_Y) + ty*NUM_GRID_Y;

        ty_all = ty + region_index * NUM_TILES_REGION;  

        if(ty==17)
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[1239:1168] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[1239:1168] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        }
        if(ty==18)
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[1311:1240] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[1311:1240] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        }
        if(ty==19)
        {
          connect
              (
                <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[1383:1312] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
                <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[1383:1312] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
              );
        }
        if(ty==20)
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[1455:1384] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[1455:1384] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        }
        if(ty==21)
          {
            connect
              (
                <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[1527:1456] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
                <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[1527:1456] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
              );
          }
        if(ty==22)
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[1599:1528] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[1599:1528] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        }
        if(ty==23)
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[1671:1600] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[1671:1600] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        }
        if(ty==24)
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[1743:1672] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[1743:1672] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        }
        if(ty==25)
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[1815:1744] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[1815:1744] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        }
        if(ty==26)
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[1887:1816] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[1887:1816] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        }
        if(ty==27)
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[1959:1888] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[1959:1888] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        }
        if(ty==28)
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[2031:1960] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[2031:1960] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        }
        if(ty==29)
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[2103:2032] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[2103:2032] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        }
        if(ty==30)
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[2175:2104] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[2175:2104] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        }
        if(ty==0)  
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[71:0] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[71:0] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        }
        if(ty==1)  
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[143:72] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[143:72] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        }
        if(ty==2)  
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[215:144] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[215:144] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        }
        if(ty==3)  
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[287:216] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[287:216] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        }
        if(ty==4)  
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[359:288] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[359:288] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        }
        if(ty==5)  
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[431:360] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[431:360] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        }
        if(ty==6)  
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[503:432] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[503:432] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        }
        if(ty==7)  
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[575:504] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[575:504] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        }
        if(ty==8)  
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[647:576] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[647:576] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        } 
        if(ty==9)  
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[719:648] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[719:648] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        } 
        if(ty==10)  
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[791:720] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[791:720] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        } 
        if(ty==11)  
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[863:792] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[863:792] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        } 
        if(ty==12)  
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[935:864] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[935:864] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        }
        if(ty==13)  
        {
          connect
            (
              <pin DATA of <device *cramsl2_tile @ [sx+2,sy]>>   => <wire *data[1007:936] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
              <pin DATAN of <device *cramsl2_tile @ [sx+2,sy]>>  => <wire *datan[1007:936] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
            );
        }
        if(tx==tx_rckb)
        {
          if(ty==14)  
          {
            connect
              (
                <pin DATA of <device RCKB_TILE @ [sx+2,sy]>>   => <wire *data[1167:1008] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>,
                <pin DATAN of <device RCKB_TILE @ [sx+2,sy]>>  => <wire *datan[1167:1008] of <device BLSR_TILE @ [sx_blsr,sy_blsr]>>
              );
           }
        }
    }
}//end of function connect_IOL_bl_input
/****************************************************************************************************
*****************************************************************************************************/
function connect_cramsl2_srb(unsigned int tx,ty)
{

    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y; 

      STRUCT inc_spec_IBM_SRB incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      string direct_SRB;

      foreach incVar(inc_IBM_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;

          connect(<pin *pin_SRB of<device SRB_TILE@[sx-2,sy]>> =>  <wire *pin_logic_device of <device CRAMSL2_TILE @[sx,sy]>>); 
      }    

}//end of function connect_cramsl2_srb 

}//end of package pgl35es_funcs











