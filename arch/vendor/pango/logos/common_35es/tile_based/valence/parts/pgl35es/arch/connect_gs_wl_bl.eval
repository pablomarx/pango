*************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl35es_defs,pgl_funcs_place,pgl_funcs_connect_gs_wl,pgl35es_funcs;
//use pgl_funcs_connect_blsr;

structure arch_nl connect_gs_wl of PGL35ES
{   
    unsigned int l_regions[] = {[0:2]};
    unsigned int rx,tx;
    
    unsigned int l_tx_wlsrs[];
    unsigned int l_tx_wlsr[] = L_WLSR_TILES_X;
    unsigned int l_tx_wlsr1[] = L_WLSR1_TILES_X;
    unsigned int l_tx_wlsr2[] = L_WLSR2_TILES_X;
    unsigned int l_tx_dll[] = L_IOCKGATEDLL_TILES_X;
    unsigned int l_tx_wlsra[] = L_WLSRA_TILES_X;
    unsigned int l_tx_wlsrd[] = L_WLSRD_TILES_X;
    unsigned int l_tx_rckb[] = L_RCKB_TILES_X;

    unsigned int tx_blsr =  BLSR_TILE_X;
    unsigned int tx_hmemc0 = 1;
    unsigned int tx_hmemc1 = NUM_TILE_X - 1;
    unsigned int n_hmemc = 0;

    unsigned int ty,tmp_ty;
    foreach rx( l_regions )
    {
      l_tx_wlsrs = {[2:28,30:55]};
      connect_WLSR_gs_wl(rx, tx_blsr, l_tx_wlsrs, l_tx_wlsr, l_tx_wlsr1, l_tx_wlsr2, l_tx_wlsra, l_tx_wlsrd, tx_hmemc0);
     
      foreach tx( L_SRB_TILES_X)
      {
          connect_SRB_gs_addr_input(tx, rx,  CCS_TILE_X, CCS_TILE_Y, tx_hmemc0, tx_hmemc1, NUM_TILE_Y-1, 0,
                                    l_tx_wlsr1, l_tx_wlsr2, l_tx_wlsra, l_tx_wlsrd, l_tx_dll, l_tx_rckb);
      }


      foreach ty( {[0:14],[16:30]} )
      {
        tmp_ty = rx * NUM_TILES_REGION + ty;
        foreach tx( L_CLMA_TILES_X )
        {
          if(!((tx>=CCS_TILE_X) && (tx<=(CCS_TILE_X+NUM_GRID_CCS_X/NUM_GRID_X)) && (tmp_ty>=CCS_TILE_Y)))
          {
            if((tx==PLL_TILE_X) && (((tmp_ty>=PLL_TILE0_Y) && (tmp_ty<=PLL_TILE0_Y+NUM_GRID_PLL_Y/NUM_GRID_Y-1))||((tmp_ty >= PLL_TILE1_Y) && (tmp_ty<=PLL_TILE1_Y+NUM_GRID_PLL_Y/NUM_GRID_Y - 1))||((tmp_ty>=PLL_TILE2_Y) && (tmp_ty<=PLL_TILE2_Y + NUM_GRID_PLL_Y/NUM_GRID_Y - 1)) || ((tmp_ty>=PLL_TILE3_Y) && (tmp_ty<=PLL_TILE3_Y+NUM_GRID_PLL_Y/NUM_GRID_Y-1))||((tmp_ty>=PLL_TILE4_Y)&&(tmp_ty<=PLL_TILE4_Y+NUM_GRID_PLL_Y/NUM_GRID_Y-1))||((tmp_ty>=PLL_TILE5_Y)&&(tmp_ty<=PLL_TILE5_Y+NUM_GRID_PLL_Y/NUM_GRID_Y-1)))) 
            {      
            }  
            else if((tx==USCM_TILE_X)&&(((tmp_ty >= USCM_TILE0_Y) && (tmp_ty<=USCM_TILE0_Y+NUM_GRID_USCM_Y/NUM_GRID_Y-1))||((tmp_ty>=USCM_TILE1_Y) && (tmp_ty<=USCM_TILE1_Y+NUM_GRID_USCM_Y/NUM_GRID_Y-1))))
            {
            }
            else if(((tx<=tx_hmemc0)||(tx>=tx_hmemc1))&&(tmp_ty<n_hmemc))
            {
            }
            else if(!((tx==RLYBUFS_TILE_X)&&(tmp_ty==RLYBUFS_TILE_Y)))
            {
              connect_CLM_gs_addr_input(rx, tx, ty, l_tx_wlsr1, l_tx_wlsr2, 1);
            }
          }   
        }
        foreach tx( L_CLMS_TILES_X )
        {
          if(!((tx>=CCS_TILE_X) && (tx<=(CCS_TILE_X+NUM_GRID_CCS_X/NUM_GRID_X)) && (tmp_ty>=CCS_TILE_Y)))
          {
            if((tx==PLL_TILE_X)&&(((tmp_ty>=PLL_TILE0_Y) && (tmp_ty<=PLL_TILE0_Y+NUM_GRID_PLL_Y/NUM_GRID_Y-1))||((tmp_ty>=PLL_TILE1_Y)&&(tmp_ty<=PLL_TILE1_Y+NUM_GRID_PLL_Y/NUM_GRID_Y-1))||((tmp_ty>=PLL_TILE2_Y) && (tmp_ty<=PLL_TILE2_Y+NUM_GRID_PLL_Y/NUM_GRID_Y-1))||((tmp_ty>=PLL_TILE3_Y)&&(tmp_ty<=PLL_TILE3_Y+NUM_GRID_PLL_Y/NUM_GRID_Y-1))||((tmp_ty>=PLL_TILE4_Y) && (tmp_ty<=PLL_TILE4_Y+NUM_GRID_PLL_Y/NUM_GRID_Y-1))||((tmp_ty>=PLL_TILE5_Y)&&(tmp_ty<=PLL_TILE5_Y+NUM_GRID_PLL_Y/NUM_GRID_Y-1)))) 
            {      
            }  
            else if((tx==USCM_TILE_X) && (((tmp_ty>=USCM_TILE0_Y) && (tmp_ty <= USCM_TILE0_Y+NUM_GRID_USCM_Y/NUM_GRID_Y-1))||((tmp_ty>=USCM_TILE1_Y)&&(tmp_ty<=USCM_TILE1_Y+NUM_GRID_USCM_Y/NUM_GRID_Y-1))))
            {
            }
            else if(((tx<=tx_hmemc0)||(tx>=tx_hmemc1))&&(tmp_ty<n_hmemc))
            {
            }
            else if(!((tx==RLYBUFS_TILE_X)&&(tmp_ty==RLYBUFS_TILE_Y)))
            {
              connect_CLM_gs_addr_input(rx, tx, ty, l_tx_wlsr1, l_tx_wlsr2, 0);
            }
          }
        }
      }
     
      foreach ty( {0,5,10,16,21,26} )
      {
        tmp_ty = rx * NUM_TILES_REGION + ty;
        foreach tx( L_DRM_TILES_X )
        {
          if(!((tx>=CCS_TILE_X) && (tx<=(CCS_TILE_X+NUM_GRID_CCS_X/NUM_GRID_X)) && (tmp_ty>=CCS_TILE_Y)))
          {
            connect_DRM_gs_addr_input(rx,tx,ty);
          }
        }
      }

      foreach tx( L_APM_TILES_X )
      {
          connect_APM_gs_addr_input(rx,tx);
      }
    }
    
    unsigned int L_PLL_TILES_X[] = {PLL_TILE_X};
    unsigned int L_PLL_TILES_Y[] = {PLL_TILE0_Y,PLL_TILE1_Y,PLL_TILE2_Y,PLL_TILE3_Y,PLL_TILE4_Y,PLL_TILE5_Y};

    foreach tx ( L_PLL_TILES_X )
    {
        foreach ty ( L_PLL_TILES_Y )
        {
            connect_PLL_gs_addr_input( tx, ty);
        }     
    } 

    unsigned int L_USCM_TILES_X[] = {USCM_LOC_X};
    unsigned int L_USCM_TILES_Y[] = {USCM0_LOC_Y, USCM1_LOC_Y};    
    int tx_wlsr = USCM_TILE_X;
    

    foreach tx ( L_USCM_TILES_X )
    {
        foreach ty ( L_USCM_TILES_Y )
        {
            connect_USCM_gs_addr_input( tx, ty, tx_wlsr);
        }      
    } 

    int s_hmemc = NUM_TILE_Y - 1;

    foreach tx( L_IOL_TILES_X )
    {
      foreach ty( L_IOL_TILES_Y )
      {
         connect_iol_gs_addr_input(tx, ty, s_hmemc, n_hmemc, "IOL_TILE", 1);
      }
      foreach ty( L_DQSL_TILES_Y )
      {
         connect_iol_gs_addr_input(tx, ty, s_hmemc, n_hmemc, "DQSL_TILE", 1);
      }
      foreach ty( L_CRAMSL2_TILES_Y_L )
      {
         connect_cramsl2_addr_input(tx, ty, s_hmemc, n_hmemc, "CRAMSL2_TILE", 1);
      }
      foreach ty( L_RLYBUFS5_TILES_Y )
      {
         connect_cramsl2_addr_input(tx, ty, s_hmemc, n_hmemc, "RLYBUFS5_TILE", 1);
      }


      foreach rx( l_regions )
      {
         //connect_iockgatedll_gs_input(tx, rx, tx_hmemc0, tx_hmemc1, ESD_PGL35ES_TILE_X, NUM_REGION, "ESD_PGL22G_TILE", 2);
         connect_iockgatedll_gs_input(tx, rx, tx_hmemc0, tx_hmemc1, BUF_PGL35ES_TILE_X, NUM_REGION, "BUF_PGL35IP_TILE", 2);//update @20180718
      }

    }

    foreach tx( L_RCKB_TILES_X )
    {
      foreach rx( l_regions )
      {
         //connect_iockgatedll_gs_input(tx, rx, tx_hmemc0, tx_hmemc1, ESD_PGL35ES_TILE_X, NUM_REGION, "ESD_PGL22G_TILE", 2);
         connect_iockgatedll_gs_input(tx, rx, tx_hmemc0, tx_hmemc1, BUF_PGL35ES_TILE_X, NUM_REGION, "BUF_PGL35IP_TILE", 2);//update @20180718
      }

    }



    foreach tx( {56} )
    {
      foreach ty( L_CRAMSL2_TILES_Y_R )
      {
         connect_cramsl2_r_wl(tx, ty);
      }
    }


    foreach rx( l_regions )
    {
      foreach tx( L_IOB_TILES_X )
      {
        connect_iob_gs_input(tx, rx, 0);
      }
    }


};//end of structure arch_nl connect_global_sig of PGL35ES

/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl35es_defs,pgl_funcs_place,pgl_funcs_connect_gs_wl;
use pgl_funcs_connect_blsr;

structure arch_nl connect_blsr_output of PGL35ES
{
    unsigned int l_regions[] = {[0:2]};
    unsigned int tx_blsr = BLSR_TILE_X;

    unsigned int rx,tx;
    string device_wlsr;
    int tx_wlsr1_l = WLSR1_TILE_X_L;
    int tx_wlsr1_r = WLSR1_TILE_X_R;
    int tx_dll_l = 1;
    int tx_dll_r = 56;


    foreach rx( l_regions )
    {
        foreach tx( L_WLSR_TILES_X )
        {
           connect_blsr_gs_output(rx, tx, tx_blsr, CCS_TILE_X, CCS_TILE_Y, "WLSR_TILE");
          
        } 

        foreach tx( L_WLSR1_TILES_X )
        {
          connect_blsr_gs_output(rx, tx, tx_blsr, CCS_TILE_X, CCS_TILE_Y, "WLSR1_TILE");
        }

        foreach tx( L_WLSR2_TILES_X )
        {
          connect_blsr_gs_output(rx, tx, tx_blsr, CCS_TILE_X, CCS_TILE_Y, "WLSR2_TILE");
        }

        foreach tx( L_WLSRA_TILES_X )
        {
          connect_blsr_gs_output(rx, tx, tx_blsr, CCS_TILE_X, CCS_TILE_Y, "WLSRA_TILE");
        }

        foreach tx( L_WLSRD_TILES_X )
        {
          connect_blsr_gs_output(rx, tx, tx_blsr, CCS_TILE_X, CCS_TILE_Y, "WLSRD_TILE");
        }

        foreach tx( L_IOCKGATEDLL_TILES_X )
        {
          connect_blsr_gs_output(rx, tx, tx_blsr, CCS_TILE_X, CCS_TILE_Y, "IOCKGATEDLL_TILE");
        }

        foreach tx( L_RCKB_TILES_X )
        {
          connect_blsr_gs_output(rx, tx, tx_blsr, CCS_TILE_X, CCS_TILE_Y, "RCKB_TILE");
        } 

        foreach tx( L_IOB_TILES_X )
        {
          connect_blsr_gs_output(rx, tx, tx_blsr, CCS_TILE_X, CCS_TILE_Y, "IOB_TILE");
        }



        connect_blsr_gs_output1(rx, tx_blsr, tx_wlsr1_l, tx_wlsr1_r, tx_dll_l, tx_dll_r, 2);
    }

};//end of structure arch_nl connect_blsr of PGL35ES

/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl35es_defs,pgl35es_funcs;

structure arch_nl connect_col_addr of PGL35ES
{
    unsigned int l_regions[] = {[0:2]};
    unsigned int l_tx_l[];
    unsigned int l_tx_r[];
    unsigned int tx_blsr = BLSR_TILE_X;

    unsigned int rx;

    foreach rx( l_regions )
    {
        l_tx_l =  {[0:28]};
        l_tx_r =  {[30:56]};
        connect_col_addr( rx, tx_blsr, l_tx_l, l_tx_r);
    }

};//end of structure arch_nl connect_blsr of PGL35ES

/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl35es_defs,pgl_funcs_place;
use pgl_funcs_connect_blsr,pgl35es_funcs;

structure arch_nl connect_bl of PGL35ES
{
    unsigned int l_regions[] = {[0:2]};
    unsigned int tx_blsr = BLSR_TILE_X;    
    unsigned int tx_ccs = CCS_TILE_X;
    unsigned int ty_ccs = CCS_TILE_Y;
    unsigned int l_tx_srb[] = L_SRB_TILES_X;  


    unsigned int tx, rx, ty_int, ty;
    string device_wlsr;

    foreach rx( l_regions )
    {
      foreach tx( l_tx_srb )
      {
        if((rx==2)&&(tx>CCS_TILE_X)&&(tx<=(CCS_TILE_X+NUM_GRID_CCS_X/NUM_GRID_X)))
        {
          connect_SRB_bl_input( tx, rx, tx_blsr, 0);
        }
        else
        {
          connect_SRB_bl_input( tx, rx, tx_blsr, 0);
          connect_SRB_bl_input( tx, rx, tx_blsr, 1);
        }
      }

      foreach tx( L_CLMA_TILES_X )
      {
        foreach ty_int( {[0:14],[16:60]} )
        {
           ty = ty_int + rx * NUM_TILES_REGION;
           if(!(((tx>=CCS_TILE_X) && (tx<=CCS_TILE_X+NUM_GRID_CCS_X/NUM_GRID_X) && (ty>=CCS_TILE_Y))))
           {
             if((tx==PLL_TILE_X)&&(((ty>=PLL_TILE0_Y)&&(ty<=PLL_TILE0_Y+NUM_GRID_PLL_Y/NUM_GRID_Y-1))||((ty>=PLL_TILE1_Y)&&(ty<=PLL_TILE1_Y+NUM_GRID_PLL_Y/NUM_GRID_Y-1))||((ty>=PLL_TILE2_Y) && (ty<=PLL_TILE2_Y + NUM_GRID_PLL_Y/NUM_GRID_Y - 1))||((ty>=PLL_TILE3_Y)&&(ty<=PLL_TILE3_Y+NUM_GRID_PLL_Y/NUM_GRID_Y-1))||((ty>=PLL_TILE4_Y)&&(ty<=PLL_TILE4_Y+NUM_GRID_PLL_Y/NUM_GRID_Y-1))||((ty>=PLL_TILE5_Y)&&(ty<=PLL_TILE5_Y+NUM_GRID_PLL_Y/NUM_GRID_Y-1))))
             {      
             }  
             else if((tx == USCM_TILE_X)&&(((ty >= USCM_TILE0_Y)&&(ty<=USCM_TILE0_Y+NUM_GRID_USCM_Y/NUM_GRID_Y-1))||((ty >= USCM_TILE1_Y)&&(ty <= USCM_TILE1_Y + NUM_GRID_USCM_Y/NUM_GRID_Y-1))))
             {
             }
             else if(!((tx==RLYBUFS_TILE_X)&&(ty==RLYBUFS_TILE_Y)))
             {
               connect_CLM_bl_input( rx, tx, ty_int, tx_blsr, 1);
             }
           }  
        }
      }

      foreach tx( L_CLMS_TILES_X )
      {
        foreach ty_int( {[0:14],[16:60]} )
        {
           ty = ty_int + rx * NUM_TILES_REGION;
           if(!(((tx>=CCS_TILE_X) && (tx<=CCS_TILE_X+NUM_GRID_CCS_X/NUM_GRID_X) && (ty>=CCS_TILE_Y))))
           {
             if((tx==PLL_TILE_X) && (((ty>=PLL_TILE0_Y) && (ty<=PLL_TILE0_Y+NUM_GRID_PLL_Y/NUM_GRID_Y-1))||((ty>=PLL_TILE1_Y) && (ty<=PLL_TILE1_Y+NUM_GRID_PLL_Y/NUM_GRID_Y-1))||((ty>=PLL_TILE2_Y) && (ty<=PLL_TILE2_Y+NUM_GRID_PLL_Y/NUM_GRID_Y-1))||((ty>=PLL_TILE3_Y)&&(ty<=PLL_TILE3_Y+NUM_GRID_PLL_Y/NUM_GRID_Y-1)) || ((ty>=PLL_TILE4_Y) && (ty<=PLL_TILE4_Y+NUM_GRID_PLL_Y/NUM_GRID_Y-1))||((ty>=PLL_TILE5_Y)&&(ty<=PLL_TILE5_Y+NUM_GRID_PLL_Y/NUM_GRID_Y-1))))
             {      
             }  
             else if((tx==USCM_TILE_X)&&(((ty>=USCM_TILE0_Y)&&(ty<=USCM_TILE0_Y+NUM_GRID_USCM_Y/NUM_GRID_Y-1))||((ty>=USCM_TILE1_Y)&&(ty<=USCM_TILE1_Y+NUM_GRID_USCM_Y/NUM_GRID_Y-1))))
             {
             }
             else if(!((tx==RLYBUFS_TILE_X)&&(ty==RLYBUFS_TILE_Y)))
             {
               connect_CLM_bl_input( rx, tx, ty_int, tx_blsr, 0);
             }
           }  
        }
      }

      foreach ty_int( {0,5,10,16,21,26} )
      {
        ty = rx * NUM_TILES_REGION + ty;
        foreach tx( L_DRM_TILES_X )
        {
          ty = ty_int + rx * NUM_TILES_REGION;
          if(!(((tx>=CCS_TILE_X) && (tx<=CCS_TILE_X+NUM_GRID_CCS_X/NUM_GRID_X) && (ty>=CCS_TILE_Y))))
          {
            connect_DRM_bl_input( rx, tx, ty_int, tx_blsr);
          }
        }
      }

      foreach tx( L_APM_TILES_X )
      {      
        connect_APM_bl_input( rx, tx, tx_blsr);
      }

        foreach tx( L_IOL_TILES_X)
        {
          connect_IOL_bl_input( tx, rx, tx_blsr, L_IOL_TILES_Y, {93}, L_DQSL_TILES_Y, {93}, 
                                L_IOCKGATEDLL_TILES_Y, {93}, L_CRAMSL2_TILES_Y_L, L_RLYBUFS5_TILES_Y);
        }

        int tx_rckb = 56;
        foreach tx( L_CRAMSL2_TILES_X_R )
        {
          connect_cramsl2_r_bl_input( tx, rx, tx_blsr, tx_rckb );
        }



        foreach tx( L_IOB_TILES_X)
        {
          connect_IOB_bl_input( rx, tx, tx_blsr);
        }

        foreach tx( L_WLSR_TILES_X )
        {
          connect_WLSR_bl_input(rx, tx, tx_blsr, "WLSR_TILE");      
        }

        foreach tx( L_WLSR1_TILES_X )
        {
          connect_WLSR_bl_input(rx, tx, tx_blsr, "WLSR1_TILE");
        }

        foreach tx( L_WLSR2_TILES_X )
        {
          connect_WLSR_bl_input(rx, tx, tx_blsr, "WLSR2_TILE");
        }

        foreach tx( L_WLSRA_TILES_X )
       {
          connect_WLSR_bl_input(rx, tx, tx_blsr, "WLSRA_TILE");
        }

        foreach tx( L_WLSRD_TILES_X )
        {
          connect_WLSR_bl_input(rx, tx, tx_blsr, "WLSRD_TILE");
        }
    } 

    int tx_pll = PLL_TILE_X;
    connect_PLL_bl_input( 0, 11, tx_pll, tx_blsr);
    connect_PLL_bl_input( 0, 16, tx_pll, tx_blsr);
    connect_PLL_bl_input( 1, 11, tx_pll, tx_blsr);
    connect_PLL_bl_input( 1, 16, tx_pll, tx_blsr);
    connect_PLL_bl_input( 2, 11, tx_pll, tx_blsr);
    connect_PLL_bl_input( 2, 16, tx_pll, tx_blsr);


    connect_USCM_bl_input( 0, USCM0_LOC_Y, 29, USCM_LOC_X, tx_blsr);
    connect_USCM_bl_input( 1, USCM1_LOC_Y, 0, USCM_LOC_X, tx_blsr);

};//end of structure arch_nl connect_bl of PGL35ES
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl35es_defs;
use pgl_funcs_place,pgl_funcs_connect_gs_wl;
use pgl_funcs_connect_blsr,pgl35es_funcs;

structure arch_nl connect_blsr_input of PGL35ES
{
  unsigned int L_REGIONS[] = {[0:2]};
  unsigned int tx_wlsr1_l = WLSR1_TILE_X_L;
  unsigned int tx_wlsr1_r = WLSR1_TILE_X_R;
  unsigned int tx_blsr = BLSR_TILE_X;
  unsigned int tx_ccs = CCS_TILE_X;
  unsigned int ty_ccs = CCS_TILE_Y;
  unsigned int tx_wlsr2 = 33;

  int rx;
  foreach rx( L_REGIONS )
  {
    connect_BLSR_input_pgl( rx, tx_wlsr1_l, tx_wlsr1_r, tx_blsr, tx_ccs, ty_ccs, tx_wlsr2, NUM_REGION, NUM_TILE_X, 2);
  }

  connect_BLSR_input_pgl35es();

};//end of structure arch_nl connect_BLSR_input of PGL22
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl35es_defs;
use pgl_funcs_place,pgl_funcs_connect_gs_wl;
use pgl_funcs_connect_blsr,pgl35es_funcs;

structure arch_nl connect_ccs_tile of PGL35ES
{
  int ty_blsr_t = 2;
  int ty_iob_so = NUM_TILE_Y - 1;
  int tx_iockgate = 1;
  int ty_iockgate_t = 77;
  int tx_idcode = IDCODE_TILE_X;
  int ty_idcode = IDCODE_TILE_Y;

  int tx_wlsr1 = WLSR1_TILE_X_L;

  connect_CCS_input(CCS_TILE_X,CCS_TILE_Y,
                    tx_iockgate,ty_iockgate_t,
                    ty_blsr_t, tx_idcode, ty_idcode, ESD_PGL35ES_TILE_X,tx_wlsr1);

};//end of structure arch_nl connect_ccs_tile of PGL35ES
/***************************************************************************************
****************************************************************************************/
//library work;
//use pgl_defs,pgl35es_defs;
//use pgl_funcs_place,pgl_funcs_connect_gs_wl;
//use pgl_funcs_connect_blsr,pgl35es_funcs;
//
//structure arch_nl connect_esd_tile of PGL35ES
//{
//  int tx,ty;
//
//  foreach tx( {ESD_PGL35ES_TILE_X} )
//  {
//    foreach ty( {ESD_PGL35ES_TILE_Y} )
//    {
//      connect_esd_tile( tx, ty);
//    }
//  }
//
//
//};//end of structure arch_nl connect_ccs_tile of PGL35ES
//new add @20180718//////////////////////////////////////////
library work;
use pgl_defs,pgl35es_defs;
use pgl_funcs_place,pgl_funcs_connect_gs_wl;
use pgl_funcs_connect_blsr,pgl35es_funcs;

structure arch_nl connect_buf_tile of PGL35ES
{

  connect_buf_tile( BUF_PGL35ES_TILE_X, BUF_PGL35ES_TILE_Y);

};//end of structure arch_nl connect_ccs_tile of PGL35ES
//new add @20180718//////////////////////////////////////////

/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl35es_defs;
use pgl_funcs_place,pgl_funcs_connect_gs_wl;
use pgl_funcs_connect_blsr,pgl35es_funcs;
structure arch_nl connect_bias of PGL35ES
{
    string LR;
    foreach LR({ "L" })
    {
      connect_bias_iob( LR );
    }

    connect_bias_pll();

};//end of structure arch_nl connect_bias of PGL35ES
