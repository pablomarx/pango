*******************************************************************

  Operator    [gopIOMDDRDEL]

  Abstract  []

  Revision History:

********************************************************************************/
gate
operator gopIOMDDRDEL
{
    parameter
    (
        string MIPI_MODE        = "FALSE",
        string DOMODE           = "DD",
        string MODE            = "DDM0",
        string DELAY_MODE      = "NODELAY",   //"NODELAY", "INDELAY", "OUTDELAY",
        string DELAY_SEL       = "DEFAULT",
        bit    IODLY_CTRL_EN   = 1'b0,
        bit    IODLY_STEP[3:0] = 4'b0000,
        bit    GRS_EN          = 1'b0,
        string OCLK_SRC         = "WCLK",     // "WCLK", "WCLK_DEL"   
        bit    CP_TSDDR_SR      = 1'b0,
        bit    WL_EXTEND        = 1'b0,
        bit    IDDR_LRS_EN      = 1'b0,
        bit    ODDR_LRS_EN      = 1'b0,
        bit    CLK_I_INV        = 1'b0,
        bit    CLK_O_INV        = 1'b0,
        bit    LRS_INV          = 1'b0
    );
    port
    (
        input   D[7:0],
        input   T[3:0],        

        output  Q[7:0],
        output  OUT,

        input   IFIFO_WADDR[2:0],
        input   IFIFO_RADDR[2:0],

        input   IODLY_CTRL[2:0],
        output  IODLY_OV,
       
        input   SERCLK,
        input   ICLK,
        input   TCLK,
        input   DESCLK /*pragma PAP_ARC_GOP_CTRL_PIN="IOCLK"*/,
        input   SYSCLK /*pragma PAP_ARC_GOP_CTRL_PIN="GCLK|RCLK|COLCLK"*/,
        input   RESET /*pragma PAP_ARC_GOP_CTRL_PIN="RST"*/,
        
        input   PADI,
        output  PADO,
        output  PADT,
        output  INCK,
        output  DO_OUT,
        output  TO_OUT,
        
        input  MI,
        output MO
    );
};

implementation impl of gopIOMDDRDEL
{
    string ODDR_OCLK      = "WCLK";      // "WCLK", "WCLKDEL"

    if((OCLK_SRC != "WCLK") && (OCLK_SRC != "WCLK_DEL"))
    {
        error("Error config OCLK_SRC = %s in gopOMSER8A", OCLK_SRC);
    }
    
    string oddm_mode = "OMDDR";
    string iddm_mode = "IMDDR";
    
    if (MODE == "DDM0")
    {
        oddm_mode = "OMDDR";
        iddm_mode = "IMDDR";
    }
    else if (MODE == "DDM4")
    {
        oddm_mode = "OMSER4";
        iddm_mode = "IMDES4";
    }
    else if (MODE == "DDM8")
    {
        oddm_mode = "OMSER8";
        iddm_mode = "IMDES8";
    }
    device devIOMSD8IOLADEL gate_iomddrioldel
        parameter map
        (
            CP_IDDR_MODE   =>   iddm_mode,
            CP_DOMODE      =>   MIPI_MODE == "FALSE" ? DOMODE : "DD",
            CP_ICLK_SEL    =>   2'b01,
            CP_ODDR_MODE   =>   oddm_mode,
            CP_SERCLK_SEL  =>   1'b1,
            
            CP_DELAY_SETTING =>  {DELAY_MODE == "INDELAY" ? 1'b1 : 1'b0, DELAY_MODE == "OUTDELAY" ? 1'b1 : 1'b0},
            CP_IODLY_STEP    =>  IODLY_STEP,
            CP_GRS_DIS       =>  GRS_EN == 1'b0 ? "FALSE" : "TRUE",
            CP_OCLK_SEL     =>   {OCLK_SRC == "WCLK_DEL" ? 1'b1 : 1'b0, OCLK_SRC == "WCLK" ? 1'b1 : 1'b0},
            CP_INLRS_EN     =>   IDDR_LRS_EN == 1'b0 ? "DISABLE" : "ENABLE", 
            CP_OUTLRS_EN    =>   ODDR_LRS_EN == 1'b0 ? "DISABLE" : "ENABLE", 
            CP_TSDDR_SR     =>   CP_TSDDR_SR == 1'b0 ? "RESET" : "SET",
            CP_INCLK_POL    =>   CLK_I_INV == 1'b0 ? "FALSE" : "TRUE",     
            CP_OUTCLK_POL   =>   CLK_O_INV == 1'b0 ? "FALSE" : "TRUE",     
            CP_LRS_POL     =>   LRS_INV     == 1'b0 ? "FALSE" : "TRUE",
            CP_WL_EXT      =>   WL_EXTEND   == 1'b0 ? "FALSE" : "TRUE",
            CP_MIPI_EN     =>   MIPI_MODE   == "FALSE" ? "DISABLE" : "ENABLE"
        )

        port map 
        (
            RX_DATA      =>   Q,
            RX_DATA_DD   =>   OUT,
        
            TX_DATA      =>   D,
            TS_CTRL      =>   T,

            IFIFO_WADDR  =>   IFIFO_WADDR,
            IFIFO_RADDR  =>   IFIFO_RADDR,

            IODLY_CTRL   =>   IODLY_CTRL,
            IODLY_OV     =>   IODLY_OV,

            CLK_IO       =>   DESCLK,
            CLK_R        =>   SERCLK,
            WCLK         =>   (OCLK_SRC == "WCLK") ? TCLK : 1'bx,
            WCLK_DEL     =>   (OCLK_SRC == "WCLK_DEL") ? TCLK : 1'bx,
        
            DQSI_DEL     =>   ICLK,
            CLK_SYS      =>   SYSCLK,
            LRS          =>   RESET,
            DI           =>   PADI, 

            DO           =>   PADO, 
            TO           =>   PADT,
            INCK         =>   INCK,
            DO_OUT       =>   DO_OUT,
            TO_OUT       =>   TO_OUT,
           
            MIPI_SW_DYN_O =>  MO,
            MIPI_SW_DYN_I =>  MI
        );
};


