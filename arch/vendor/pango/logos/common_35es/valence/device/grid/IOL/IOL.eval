tarted
grid
device IOL
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config string CP_INCLK_POL = "FALSE",
        config string CP_OUTCLK_POL = "FALSE",
        config string CP_CE_POL = "FALSE",
        config string CP_LRS_POL = "FALSE",
        config string CP_INCE_EN = "DISABLE",
        config string CP_OUTCE_EN = "DISABLE",
        config string CP_INLRS_EN = "DISABLE",
        config string CP_OUTLRS_EN = "DISABLE",
        config string CP_FF_SYNC = "ASYNC",
        config string CP_TSFF_SET = "SET",
        config string CP_TSFF_LATCH = "FF",
        config string CP_OFF_SET = "SET",
        config string CP_OFF_LATCH = "FF",
        config string CP_IFF_SET = "SET",
        config string CP_IFF_LATCH = "FF",
        config string CP_TSDDR_SR = "RESET",
        config string CP_ODDR_MODE = "DISABLE",
        config bit CP_ICLK_SEL[1:0] = 2'b00,
        config bit CP_OCLK_SEL[1:0] = 2'b00,
        config string CP_DOMODE = "DD",
        config string CP_TOMODE = "DD",
        config bit CP_DELAY_SETTING[1:0] = 2'b00,
        config string CP_IDDR_MODE = "DISABLE",
        config string CP_ODDR_DQS = "FALSE",
        config string CP_PDIFF = "DISABLE",
        config bit CP_IODLY_STEP[3:0] = 4'b0000,
        config string CP_IODLY_DYN = "FALSE",
        config string CP_IODLY_DEGL = "FALSE",
        config string CP_WL_EXT = "FALSE",
        config string CP_INCLK_EN = "DISABLE",
        config string CP_OUTCLK_EN = "DISABLE",
        config string CP_GRS_DIS = "FALSE",
        config bit CP_ISI_DELSEL[1:0] = 2'b00,
        config string CP_ISI_EN = "DISABLE",
        config string CP_MIPI_EN = "DISABLE",
        config bit CP_SERCLK_SEL = 1'b0
    );
    port
    (
// configuration_body_def_on


    config input SC_INCLK_POL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_INCLK_POL" */,

    config input SC_OUTCLK_POL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_OUTCLK_POL" */,

    config input SC_CE_POL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CE_POL" */,

    config input SC_LRS_POL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LRS_POL" */,

    config input SC_INCE_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_INCE_EN" */,

    config input SC_OUTCE_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_OUTCE_EN" */,

    config input SC_INLRS_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_INLRS_EN" */,

    config input SC_OUTLRS_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_OUTLRS_EN" */,

    config input SC_FF_SYNC = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FF_SYNC" */,

    config input SC_RSS[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RSS[2],SC_RSS[1],SC_RSS[0]" */,

    config input SC_LATCHMODE[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LATCHMODE[2],SC_LATCHMODE[1],SC_LATCHMODE[0]" */,

    config input SC_ODDR_MODE[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODDR_MODE[3],SC_ODDR_MODE[2],SC_ODDR_MODE[1],SC_ODDR_MODE[0]" */,

    config input SC_ICLK_SEL[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ICLK_SEL[1],SC_ICLK_SEL[0]" */,

    config input SC_OCLK_SEL[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_OCLK_SEL[1],SC_OCLK_SEL[0]" */,

    config input SC_DOMODE[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DOMODE[1],SC_DOMODE[0]" */,

    config input SC_TOMODE[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TOMODE[1],SC_TOMODE[0]" */,

    config input SC_IODLY_EN[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_IODLY_EN[1],SC_IODLY_EN[0]" */,

    config input SC_IDDR_MODE[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_IDDR_MODE[3],SC_IDDR_MODE[2],SC_IDDR_MODE[1],SC_IDDR_MODE[0]" */,

    config input SC_ODDR_DQS = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODDR_DQS" */,

    config input SC_PDIFF = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PDIFF" */,

    config input SC_IODLY_STEP[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_IODLY_STEP[3],SC_IODLY_STEP[2],SC_IODLY_STEP[1],SC_IODLY_STEP[0]" */,

    config input SC_IODLY_DYN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_IODLY_DYN" */,

    config input SC_IODLY_DEGL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_IODLY_DEGL" */,

    config input SC_WL_EXT = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_WL_EXT" */,

    config input SC_INCLK_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_INCLK_EN" */,

    config input SC_OUTCLK_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_OUTCLK_EN" */,

    config input SC_GRS_DIS = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GRS_DIS" */,

    config input SC_ISI_DELSEL[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ISI_DELSEL[1],SC_ISI_DELSEL[0]" */,

    config input SC_ISI_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ISI_EN" */,

    config input SC_MIPI_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MIPI_EN" */,

    config input SC_TS_SR = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TS_SR" */,

    config input SC_SERCLK_SEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SERCLK_SEL" */,

// configuration_body_def_end

        input TX_DATA[7:0] = 8'b1111_1111,
        input TS_CTRL[3:0] = 4'b1111,
        input IODLY_CTRL[2:0] = 3'b111,
        input IFIFO_WADDR[2:0] = 3'b111,
        input IFIFO_RADDR[2:0] = 3'b111,
        input CLK_SYS = 1'b1,
        input CE = 1'b1,
        input LRS = 1'b1,
        input DQSI_DEL = 1'b1,
        input WCLK = 1'b1,
        input WCLK_DEL = 1'b1,
        input CLK_R = 1'b1,
        input CLK_IO = 1'b1,
        input DI = 1'b1,
        input MIPI_SW_DYN_I = 1'b1,
        input TERM_IN = 1'b1,
        input TO_IN = 1'b1,
        input DO_IN = 1'b1,
        input OUT_EXT = 1'b1,
        output RX_DATA[7:0],
        output IODLY_OV,
        output RX_DATA_DD,
        output TO_OUT,
        output TO,
        output DO_OUT,
        output DO,
        output TERM,
        output TERM_OUT,
        output MIPI_SW_DYN_O,
        output INCK
    );
};
//grid device end

//grid device structure netlist started
structure netlist of IOL
{
    // Wires for input ports
    wire ntCLK_SYS;
    wire ntCE;
    wire ntLRS;
    wire ntDQSI_DEL;
    wire ntWCLK;
    wire ntWCLK_DEL;
    wire ntCLK_IO;
    wire ntDI;
    wire ntTERM_IN;  
    wire ntTO_IN;  
    wire ntDO_IN;  
    wire ntMIPI_SW_DYN_I;
    wire ntCLK_R;
    
    // wires for output ports
    wire ntIODLY_OV;
    wire ntRX_DATA_DD;
    wire ntRX_DATA_IFF;
    wire ntTO_OUT;
    wire ntTO;    
    wire ntDO_OUT;
    wire ntDO;    
    wire ntTERM;  
    wire ntTERM_OUT; 
    wire ntMIPI_SW_DYN_O;
    
    // Internal wires
    wire ntCE_SEL;
    wire ntLRS_SEL;
    wire ntCLK_SYS_FOR_INPUT; 
    wire ntCLK_SYS_FOR_OUTPUT;
    wire ntICLK;
    wire ntOCLK;
    wire ntCE_OUT;
    wire ntLRS_OUT;
    wire ntTS_FF_TO;
    wire ntTX_DO;
    wire ntTS_TERM;
    wire ntTS_TO;
    wire ntTX_FFDO;
    wire ntOUTPUT_DATA_SEL;
    wire ntOUTPUT_DATA_SEL_TMP;
    wire ntDIN;
    wire ntDOUT;
    wire ntCE_IN;
    wire ntLRS_IN;
    wire ntCLK_SYS_I;
    wire ntCLK_SYS_O;
    wire ntOUT_EXT;
    wire ntWCLK_DEL_RESERCE;
    wire ntDO_IN_REVERSE;
    wire ntRX_DATA_TMP;
    wire ntSERCLK;
    
    //
    // Connection to ports
    //
    ntOUT_EXT            <= OUT_EXT;
    ntCLK_SYS            <= CLK_SYS; 
    ntCE                 <= CE;      
    ntLRS                <= LRS;     
    ntDQSI_DEL           <= DQSI_DEL;  
    ntWCLK               <= WCLK;      
    ntWCLK_DEL           <= WCLK_DEL;  
    ntCLK_IO             <= CLK_IO; 
    ntDI                 <= DI;     
    ntTERM_IN            <= TERM_IN;
    ntTO_IN              <= TO_IN;  
    ntDO_IN              <= DO_IN;  
    ntMIPI_SW_DYN_I      <= MIPI_SW_DYN_I;
    ntCLK_R              <= CLK_R;
    
    INCK                 <= ntDI;
    IODLY_OV             <= ntIODLY_OV;
    RX_DATA_DD           <= ntRX_DATA_DD; 
    TO_OUT               <= ntTO_OUT;     
    TO                   <= ntTO;         
    DO_OUT               <= ntDO_OUT;     
    DO                   <= ntDO;         
    TERM                 <= ntTERM;       
    TERM_OUT             <= ntTERM_OUT;   
    MIPI_SW_DYN_O        <= ntMIPI_SW_DYN_O;
    
    device MUX21_EN MIPI_EN_MUX
        parameter map
        (
            CP_SEL => CP_MIPI_EN
        )
        port map
        (
            X0 => ntMIPI_SW_DYN_I,
            X1 => 1'b0,
            Y  => ntMIPI_SW_DYN_O
        );
        
    device POLMUX CE_POL_MUX
        parameter map
        (
            CP_POLARITY_INV => CP_CE_POL
        )
        port map
        (
            X => ntCE,
            Y => ntCE_SEL
        );

    device POLMUX LRS_POL_MUX
        parameter map
        (
            CP_POLARITY_INV => CP_LRS_POL
        )
        port map
        (
            X  => ntLRS,
            Y  => ntLRS_SEL
        );

    device MUX21_EN RCLK_EN_MUX_I
        parameter map
        (
            CP_SEL => CP_INCLK_EN
        )
        port map
        (
            X0  =>   ntCLK_SYS,
            X1  =>   1'b0,
            Y   =>   ntCLK_SYS_I
        );
            
    device MUX21_EN RCLK_EN_MUX_O
        parameter map
        (
            CP_SEL => CP_OUTCLK_EN
        )
        port map
        (
            X0    =>   ntCLK_SYS,
            X1    =>   1'b0,
            Y     =>   ntCLK_SYS_O
        );
           
    device POLMUX RCLK_POL_MUX_I
        parameter map
        (
            CP_POLARITY_INV => CP_INCLK_POL
        )
        port map
        (
            X  => ntCLK_SYS_I,
            Y  => ntCLK_SYS_FOR_INPUT
        );
    
    device POLMUX RCLK_POL_MUX_O
        parameter map
        (
            CP_POLARITY_INV => CP_OUTCLK_POL
        )
        port map
        (
            X  => ntCLK_SYS_O,
            Y  => ntCLK_SYS_FOR_OUTPUT
        );

     device MUX31 IDDR_CLK_MUX
        parameter map
        (
            CP_SEL => CP_ICLK_SEL
        )
        port map
        (
            X0   => ntCLK_IO,
            X1   => ntDQSI_DEL,
            X2   => ntCLK_SYS_FOR_INPUT,
            Y    => ntICLK
        );
        
    device MUX41 ODDR_CLK_MUX
        parameter map
        (
            CP_SEL => CP_OCLK_SEL
        )
        port map
        (
            X3   => ntCLK_IO,
            X2   => ntWCLK_DEL,
            X1   => ntWCLK,
            X0   => ntCLK_SYS_FOR_OUTPUT,
            Y    => ntOCLK
        );
        
    device MUX21_EN OFF_CE_MUX
        parameter map
        (
            CP_SEL => CP_OUTCE_EN
        )
        port map
        (
            X0   => ntCE_SEL,
            X1   => 1'b1,
            Y    => ntCE_OUT
        );
        
    device MUX21_EN OFF_LRS_MUX
        parameter map
        (
            CP_SEL => CP_OUTLRS_EN
        )
        port map
        (
            X0  => ntLRS_SEL,
            X1  => 1'b0,
            Y   => ntLRS_OUT
        );
    
    device IOL_FF U_TSFF
        parameter map
        (
            CP_GRS_DIS => CP_GRS_DIS,
            CP_SET     => CP_TSFF_SET,   //1'B1 => set; 1'b0 => reset
            CP_SYNC    => CP_FF_SYNC,    //1'B1 => sync; 1'b0 => async
            CP_LATCH   => CP_TSFF_LATCH
        )
        port map
        (
            D     => TS_CTRL[0],
            CLK   => ntCLK_SYS_FOR_OUTPUT,
            CE    => ntCE_OUT,
            LRS   => ntLRS_OUT,
            Q     => ntTS_FF_TO
        );
       
    device MUX21 SERCLK_MUX
        parameter map
        (
            CP_SEL => CP_SERCLK_SEL
        )
        port map
        (
            X0  => ntCLK_IO,
            X1  => ntCLK_R,
            Y   => ntSERCLK
        );
         
    device ODDR ODDR
        parameter map
        (
            CP_GRS_DIS => CP_GRS_DIS,
            CP_ODDR_MODE     => CP_ODDR_MODE,
            CP_TSDDR_SR      => CP_TSDDR_SR,
            CP_ODDR_DQS      => CP_ODDR_DQS,
            CP_WL_EXT        => CP_WL_EXT,
            CP_ISI_EN        => CP_ISI_EN,
            CP_ISI_DELSEL    => CP_ISI_DELSEL
        )
        port map
        (
            LRS             => ntLRS_OUT,
            TX_DATA         => TX_DATA,  
            TS_CTRL         => TS_CTRL,
            OCLK            => ntOCLK,
            CLK_SYS         => ntCLK_SYS_FOR_OUTPUT,
            SERCLK          => ntSERCLK,
            TX_DO           => ntTX_DO,
            TS_TERM         => ntTS_TERM,
            TS_TO           => ntTS_TO
        );
          
    device OUTMUX TO_OUT_MUX
        parameter map
        (
            CP_SEL => CP_TOMODE
        )
        port map
        (
            X0   => TS_CTRL[0],
            X1   => ntTS_FF_TO,
            X2   => ntTS_TO,
            X3   => 1'b0,
            Y    => ntTO_OUT
        );
              
    device OUTMUX TERM_OUT_MUX
        parameter map
        (
            CP_SEL => CP_TOMODE
        )
        port map
        (
            X0   => TS_CTRL[0],
            X1   => ntTS_FF_TO,
            X2   => ntTS_TERM,
            X3   => 1'b0,
            Y    => ntTERM_OUT
        );
        
    device MUX21_EN DO_PDIFF_MUX
        parameter map
        (
            CP_SEL => CP_PDIFF
        )
        port map
        (
            X1   => ntDO_OUT,
            X0   => ntDO_IN_REVERSE,
            Y    => ntDO
        );
        
    device REVERSE_MUX DO_IN_REVERSE
        port map
        (
            IN  => ntDO_IN,
            OUT => ntDO_IN_REVERSE
        );
            
    device MUX21_EN TO_PDIFF_MUX
        parameter map
        (
            CP_SEL => CP_PDIFF
        )
        port map
        (
            X0   => ntTO_IN,
            X1   => ntTO_OUT,
            Y    => ntTO
        );  
        
    device MUX21_EN TERM_PDIFF_MUX
        parameter map
        (
            CP_SEL => CP_PDIFF
        )
        port map
        (
            X0   => ntTERM_IN,
            X1   => ntTERM_OUT,
            Y    => ntTERM
        );  
      
    device IOL_FF OFF
        parameter map
        (
            CP_GRS_DIS => CP_GRS_DIS,
            CP_SET   => CP_OFF_SET,
            CP_SYNC  => CP_FF_SYNC,
            CP_LATCH => CP_OFF_LATCH
        )
        port map
        (
            D    => TX_DATA[7],
            CLK  => ntCLK_SYS_FOR_OUTPUT,
            CE   => ntCE_OUT,
            LRS  => ntLRS_OUT,
            Q    => ntTX_FFDO
        );
        
    device OUTMUX OUTPUT_DATA_MUX
        parameter map
        (
            CP_SEL => CP_DOMODE
        )
        port map
        (
            X0   => TX_DATA[7],
            X1   => ntTX_FFDO,
            X2   => ntTX_DO,
            X3   => ntOUT_EXT,
            Y    => ntOUTPUT_DATA_SEL_TMP
        );
    
    device MIPI_OUT MIPI_OUT
        port map
        (
            X0 => ntMIPI_SW_DYN_O,
            X1 => ntTX_DO,
            X2 => ntOUTPUT_DATA_SEL_TMP,
            Y  => ntOUTPUT_DATA_SEL
        );
        
    device MUX21 IN_OUT_DELSEL_MUX
        parameter map
        (
            CP_SEL => CP_DELAY_SETTING[0]
        )
        port map
        (
            X0   => ntDI,
            X1   => ntOUTPUT_DATA_SEL,
            Y    => ntDIN
        );

    device DLY  DELAY
        parameter map
        (
            CP_IODLY_STEP => CP_IODLY_STEP,
            CP_IODLY_DYN  => CP_IODLY_DYN,
            CP_IODLY_DEGL => CP_IODLY_DEGL
        )
        port map
        (
            DIN        => ntDIN,
            DOUT       => ntDOUT,
            IODLY_CTRL => IODLY_CTRL,
            IODLY_OV   => ntIODLY_OV
        );
        
    device MUX21 OUT_DELSEL_MUX
        parameter map
        (
            CP_SEL => CP_DELAY_SETTING[0]
        )
        port map
        (
            X0   => ntOUTPUT_DATA_SEL,
            X1   => ntDOUT,
            Y    => ntDO_OUT
        );
          
    device MUX21 IN_DELSEL_MUX
        parameter map
        (
            CP_SEL => CP_DELAY_SETTING[1]
        )
        port map
        (
            X0   => ntDI,
            X1   => ntDOUT,
            Y    => ntRX_DATA_DD
        );  
          
    device MUX21_EN IFF_CE_MUX
        parameter map
        (
            CP_SEL => CP_INCE_EN
        )
        port map
        (
            X0   => ntCE_SEL,
            X1   => 1'b1,
            Y    => ntCE_IN
        );
      
    device MUX21_EN IFF_LRS_MUX
        parameter map
        (
            CP_SEL => CP_INLRS_EN
        )
        port map
        (
            X0   => ntLRS_SEL,
            X1   => 1'b0,
            Y    => ntLRS_IN
        );    
          
    device IOL_FF IFF
        parameter map
        (
            CP_GRS_DIS => CP_GRS_DIS,
            CP_SET   => CP_IFF_SET,
            CP_SYNC  => CP_FF_SYNC,
            CP_LATCH => CP_IFF_LATCH
        )
        port map
        (
            D    => ntRX_DATA_DD,
            CLK  => ntCLK_SYS_FOR_INPUT,
            CE   => ntCE_IN,
            LRS  => ntLRS_IN,
            Q    => ntRX_DATA_IFF
        );  
          
    device IDDR IDDR  
        parameter map
        (
            CP_GRS_DIS => CP_GRS_DIS,
            CP_IDDR_MODE => CP_IDDR_MODE
        )
        port map
        (
            LRS            => ntLRS_IN,
            RX_DATA        => {RX_DATA[7:1], ntRX_DATA_TMP},
            IFIFO_WADDR    => IFIFO_WADDR,
            IFIFO_RADDR    => IFIFO_RADDR,
            ICLK           => ntICLK ,
            DESCLK         => ntCLK_IO,
            CLK_SYS        => ntCLK_SYS_FOR_INPUT,
            DIN            => ntRX_DATA_DD
        ); 

     device MUX21_N IFF_RXDATA_SEL_MUX
        parameter map
        (
            CP_SEL => CP_IDDR_MODE
        )
        port map
        (
            X0     =>  ntRX_DATA_TMP,
            X1     =>  ntRX_DATA_IFF,
            Y      =>  RX_DATA[0]
        );
        
};// end of structure netlist of IOL
//grid device structure netlist end
//grid device configure body started

configuration cfg of IOL
{

 // assign config body begin
    SC_IODLY_STEP  :=  CP_IODLY_STEP;
    SC_ISI_DELSEL  :=  CP_ISI_DELSEL;
    SC_SERCLK_SEL  :=  CP_SERCLK_SEL;
// assign config body end

//initial config body0 begin
    SC_INCLK_POL             :=  1'b0;
    SC_OUTCLK_POL            :=  1'b0;
    SC_CE_POL                :=  1'b0;
    SC_LRS_POL               :=  1'b0;
    SC_INCE_EN               :=  1'b0;
    SC_OUTCE_EN              :=  1'b0;
    SC_INLRS_EN              :=  1'b0;
    SC_OUTLRS_EN             :=  1'b0;
    SC_FF_SYNC               :=  1'b0;
    SC_RSS                   :=  3'b000;
    SC_LATCHMODE             :=  3'b000;
    SC_ODDR_MODE[3:0]        :=  4'b0000;
    SC_ICLK_SEL[1:0]         :=  2'b00;
    SC_OCLK_SEL[1:0]         :=  2'b00;
    SC_DOMODE[1:0]           :=  2'b00;
    SC_TOMODE[1:0]           :=  2'b00;
    SC_IODLY_EN[1:0]         :=  2'b00;
    SC_IDDR_MODE[3:0]        :=  4'b0000;
    SC_ODDR_DQS              :=  1'b0;
    SC_PDIFF                 :=  1'b0;
    SC_IODLY_DYN             :=  1'b0;
    SC_IODLY_DEGL            :=  1'b0;
    SC_WL_EXT                :=  1'b0;
    SC_INCLK_EN              :=  1'b0;
    SC_OUTCLK_EN             :=  1'b0;
    SC_GRS_DIS               :=  1'b0;
    SC_ISI_EN                :=  1'b0;
    SC_MIPI_EN               :=  1'b0;
    SC_TS_SR                 :=  1'b0;
    if(CP_TSDDR_SR == "RESET")
    {
        SC_TS_SR  :=  1'b0;
    }
    else if(CP_TSDDR_SR == "SET")
    {
        SC_TS_SR  :=  1'b1;
    }
    if(CP_GRS_DIS == "FALSE")
    {
        SC_GRS_DIS  :=  1'b0;
    }
    else if(CP_GRS_DIS == "TRUE")
    {
        SC_GRS_DIS  :=  1'b1;
    }
    if(CP_INCLK_POL == "FALSE")
    {
        SC_INCLK_POL             :=  1'b0;
    }
    else if(CP_INCLK_POL == "TRUE")
    {
        SC_INCLK_POL             :=  1'b1;
    }
    if(CP_OUTCLK_POL == "FALSE")
    {
        SC_OUTCLK_POL            :=  1'b0;
    }
    else if(CP_OUTCLK_POL == "TRUE")
    {
        SC_OUTCLK_POL            :=  1'b1;
    }
    if(CP_CE_POL == "FALSE")
    {
        SC_CE_POL                :=  1'b0;
    }
    else if(CP_CE_POL == "TRUE")
    {
        SC_CE_POL                :=  1'b1;
    }
    if(CP_LRS_POL == "FALSE")
    {
        SC_LRS_POL               :=  1'b0;
    }
    else if(CP_LRS_POL == "TRUE")
    {
        SC_LRS_POL               :=  1'b1;
    }
    if(CP_INCE_EN == "DISABLE")
    {
        SC_INCE_EN               :=  1'b0;
    }
    else if(CP_INCE_EN == "ENABLE")
    {
        SC_INCE_EN               :=  1'b1;
    }
    if(CP_OUTCE_EN == "DISABLE")
    {
        SC_OUTCE_EN               :=  1'b0;
    }
    else if(CP_OUTCE_EN == "ENABLE")
    {
        SC_OUTCE_EN               :=  1'b1;
    }
    if(CP_INLRS_EN == "DISABLE")
    {
        SC_INLRS_EN               :=  1'b0;
    }
    else if(CP_INLRS_EN == "ENABLE")
    {
        SC_INLRS_EN               :=  1'b1;
    }
    if(CP_OUTLRS_EN == "DISABLE")
    {
        SC_OUTLRS_EN               :=  1'b0;
    }
    else if(CP_OUTLRS_EN == "ENABLE")
    {
        SC_OUTLRS_EN               :=  1'b1;
    }
    if(CP_FF_SYNC == "ASYNC")
    {
        SC_FF_SYNC               :=  1'b0;
    }
    else if(CP_FF_SYNC == "SYNC")
    {
        SC_FF_SYNC               :=  1'b1;
    }
    if(CP_TSFF_SET == "SET")
    {
        SC_RSS[2]                :=  1'b0;
    }
    else if(CP_TSFF_SET == "RESET")
    {
        SC_RSS[2]                :=  1'b1;
    }
    if(CP_TSFF_LATCH == "FF")
    {
        SC_LATCHMODE[2]          :=  1'b0;
    }
    else if(CP_TSFF_LATCH == "LATCH")
    {
        SC_LATCHMODE[2]          :=  1'b1;
    }
    if(CP_OFF_SET == "SET")
    {
        SC_RSS[1]                :=  1'b0;
    }
    else if(CP_OFF_SET == "RESET")
    {
        SC_RSS[1]                :=  1'b1;
    }
    if(CP_OFF_LATCH == "FF")
    {
        SC_LATCHMODE[1]          :=  1'b0;
    }
    else if(CP_OFF_LATCH == "LATCH")
    {
        SC_LATCHMODE[1]          :=  1'b1;
    }
    if(CP_IFF_SET == "SET")
    {
        SC_RSS[0]                :=  1'b0;
    }
    else if(CP_IFF_SET == "RESET")
    {
        SC_RSS[0]                :=  1'b1;
    }
    if(CP_IFF_LATCH == "FF")
    {
        SC_LATCHMODE[0]          :=  1'b0;
    }
    else if(CP_IFF_LATCH == "LATCH")
    {
        SC_LATCHMODE[0]          :=  1'b1;
    }
    if(CP_OUTCLK_EN == "DISABLE")
    {
        SC_OUTCLK_EN               :=  1'b0;
    }
    else if(CP_OUTCLK_EN == "ENABLE")
    {
        SC_OUTCLK_EN               :=  1'b1;
    }
    if(CP_DOMODE == "DD")
    {
        SC_DOMODE  :=  2'b00;
    }
    else if(CP_DOMODE == "FF" || CP_DOMODE == "LATCH")
    {
        SC_DOMODE  :=  2'b01;
    }
    else if(CP_DOMODE == "DDR")
    {
        SC_DOMODE  :=  2'b10;
    }
    else if(CP_DOMODE == "OUT_EXT")
    {
        SC_DOMODE  :=  2'b11;
    }
    else
    {
        error("Illegal setting for CP_DOMODE: %s ", CP_DOMODE);
    }
    if(CP_ODDR_MODE == "OGDDR")
    {
        SC_ODDR_MODE        :=  4'b0001;
    }
    else if(CP_ODDR_MODE == "OMDDR")
    {
        SC_ODDR_MODE        :=  4'b1001;
    }
    else if(CP_ODDR_MODE == "OGSER4")
    {
        SC_ODDR_MODE        :=  4'b0010;
    }
    else if(CP_ODDR_MODE == "OMSER4")
    {
        SC_ODDR_MODE        :=  4'b1010;
    }
    else if(CP_ODDR_MODE == "OGSER8")
    {
        SC_ODDR_MODE        :=  4'b0100;
    }
    else if(CP_ODDR_MODE == "OMSER8")
    {
        SC_ODDR_MODE        :=  4'b1100;
    }
    else if(CP_ODDR_MODE == "OGSER7")
    {
        SC_ODDR_MODE        :=  4'b0111;
    }
    else if(CP_ODDR_MODE == "DISABLE")
    {
        SC_ODDR_MODE        :=  4'b0000;
    }
    else
    {
        error("Illegal setting for CP_ODDR_MODE: %s ", CP_ODDR_MODE);
    }
    if(CP_OCLK_SEL == 2'b00)
    {
        SC_OCLK_SEL  :=  2'b00;
    }
    else if(CP_OCLK_SEL == 2'b01)
    {
        SC_OCLK_SEL  :=  2'b01;
    }
    else if(CP_OCLK_SEL == 2'b10)
    {
        SC_OCLK_SEL  :=  2'b10;
    }
    else if(CP_OCLK_SEL == 2'b11)
    {
        SC_OCLK_SEL  :=  2'b11;
    }
    else
    {
        error("Illegal setting for CP_ODDR_MODE: %s with CP_OCLK_SEL: %d",CP_ODDR_MODE, CP_OCLK_SEL);
    }
    if(CP_TOMODE == "DD")
    {
        SC_TOMODE  :=  2'b00;
    }
    else if(CP_TOMODE == "FF" || CP_TOMODE == "LATCH")
    {
        SC_TOMODE  :=  2'b01;
    }
    else if(CP_TOMODE == "DDR")
    {
        SC_TOMODE  :=  2'b10;
    }
    else if(CP_TOMODE == "OUT_EXT")
    {
        SC_TOMODE  :=  2'b11;
    }
    else
    {
        error("Illegal setting for CP_TOMODE: %s ", CP_TOMODE);
    }
    if(CP_IODLY_DYN == "FALSE")
    {
        SC_IODLY_DYN  :=  1'b0;
    }
    else if(CP_IODLY_DYN == "TRUE")
    {
        SC_IODLY_DYN  :=  1'b1;
    }
    else
    {
        error("Illegal setting for CP_IODLY_DYN: %s ", CP_IODLY_DYN);
    }
    if(CP_IODLY_DEGL == "FALSE")
    {
        SC_IODLY_DEGL  :=  1'b0;
    }
    else if(CP_IODLY_DEGL == "TRUE")
    {
        SC_IODLY_DEGL  :=  1'b1;
    }
    else
    {
        error("Illegal setting for CP_IODLY_DEGL: %s ", CP_IODLY_DEGL);
    }
    if(CP_DELAY_SETTING == 2'b01)
    {
        SC_IODLY_EN  :=  2'b10;
    }
    else if(CP_DELAY_SETTING == 2'b10)
    {
        SC_IODLY_EN  :=  2'b01;
    }
    else if(CP_DELAY_SETTING == 2'b00)
    {
        SC_IODLY_EN  :=  2'b00;
    }
    else
    {
        error("Illegal setting for CP_DELAY_SETTING: %b ", CP_DELAY_SETTING);
    }
    if(CP_ISI_EN == "DISABLE")
    {
        SC_ISI_EN  :=  1'b0;
    }
    else if(CP_ISI_EN == "ENABLE")
    {
        SC_ISI_EN  :=  1'b1;
    }
    if(CP_WL_EXT == "FALSE")
    {
        SC_WL_EXT  :=  1'b0;
    }
    else if(CP_WL_EXT == "TRUE")
    {
        SC_WL_EXT  :=  1'b1;
    }
    if(CP_ODDR_DQS == "FALSE")
    {
        SC_ODDR_DQS  :=  1'b0;
    }
    else if(CP_ODDR_DQS == "TRUE")
    {
        SC_ODDR_DQS  :=  1'b1;
    }
    if(CP_PDIFF == "DISABLE")
    {
        SC_PDIFF  :=  1'b0;
    }
    else if(CP_PDIFF == "ENABLE")
    {
        SC_PDIFF  :=  1'b1;
    }
    if(CP_INCLK_EN == "DISABLE")
    {
        SC_INCLK_EN               :=  1'b0;
    }
    else if(CP_INCLK_EN == "ENABLE")
    {
        SC_INCLK_EN               :=  1'b1;
    }
    if(CP_IDDR_MODE == "DISABLE")
    {
        SC_IDDR_MODE  :=  4'b0000;
    }
    else if(CP_IDDR_MODE == "IGDDR")
    {
        SC_IDDR_MODE  :=  4'b0001;
    }
    else if(CP_IDDR_MODE == "IMDDR")
    {
        SC_IDDR_MODE  :=  4'b1001;
    }
    else if(CP_IDDR_MODE == "IGDES4")
    {
        SC_IDDR_MODE  :=  4'b0010;
    }
    else if(CP_IDDR_MODE == "IMDES4")
    {
        SC_IDDR_MODE  :=  4'b1010;
    }
    else if(CP_IDDR_MODE == "IGDES8")
    {
        SC_IDDR_MODE  :=  4'b0100;
    }
    else if(CP_IDDR_MODE == "IMDES8")
    {
        SC_IDDR_MODE  :=  4'b1100;
    }
    else if(CP_IDDR_MODE == "IGDES7")
    {
        SC_IDDR_MODE  :=  4'b0111;
    }
    else
    {
        error("Illegal setting for CP_IDDR_MODE: %s ", CP_IDDR_MODE);
    }
    if(CP_ICLK_SEL == 2'b00)
    {
        SC_ICLK_SEL  :=  2'b00;
    }
    else if(CP_ICLK_SEL == 2'b01)
    {
        SC_ICLK_SEL  :=  2'b01;
    }
    else if(CP_ICLK_SEL == 2'b10)
    {
        SC_ICLK_SEL  :=  2'b10;
    }
    else
    {
        error("Illegal setting for CP_IDDR_MODE: %s with CP_ICLK_SEL: %d", CP_IDDR_MODE, CP_ICLK_SEL);
    }
    if(CP_MIPI_EN == "DISABLE")
    {
        SC_MIPI_EN               :=  1'b0;
    }
    else if(CP_MIPI_EN == "ENABLE")
    {
        SC_MIPI_EN               :=  1'b1;
    }

//initial config body0 end

};

//grid device configure body end

