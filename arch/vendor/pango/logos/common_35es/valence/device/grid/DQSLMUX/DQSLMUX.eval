tarted
grid
device DQSLMUX
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config bit CP_DLLCODESEL[1:0] = 2'b00,
        config bit CP_IOCLK_SEL = 1'b0
    );
    port
    (
// configuration_body_def_on


    config input SC_DLLCODESEL[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DLLCODESEL[1],SC_DLLCODESEL[0]" */,

    config input SC_IOCLK_SEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_IOCLK_SEL" */,

// configuration_body_def_end

        input DLL_CODE0[7:0] = 8'b1111_1111,
        input DLL_CODE1[7:0] = 8'b1111_1111,
        input DLL_CODE2[7:0] = 8'b1111_1111,
        input CLK_IO_IN[1:0] = 2'b11,
        output DLL_CODE0_BUF[7:0],
        output DLL_CODE1_BUF[7:0],
        output DLL_CODE2_BUF[7:0],
        output DLL_STEP[7:0],
        output CLK_IO
    );
};
//grid device end

//grid device structure netlist started

structure netlist of DQSLMUX
{
    routing
    {
        ( CLK_IO_IN[0] --> CLK_IO ) = 150;
        ( CLK_IO_IN[1] --> CLK_IO ) = 150;
        ( DLL_CODE0[0] --> DLL_CODE0_BUF[0] ) = 150;
        ( DLL_CODE0[0] --> DLL_STEP[0] ) = 150;
        ( DLL_CODE0[1] --> DLL_CODE0_BUF[1] ) = 150;
        ( DLL_CODE0[1] --> DLL_STEP[1] ) = 150;
        ( DLL_CODE0[2] --> DLL_CODE0_BUF[2] ) = 150;
        ( DLL_CODE0[2] --> DLL_STEP[2] ) = 150;
        ( DLL_CODE0[3] --> DLL_CODE0_BUF[3] ) = 150;
        ( DLL_CODE0[3] --> DLL_STEP[3] ) = 150;
        ( DLL_CODE0[4] --> DLL_CODE0_BUF[4] ) = 150;
        ( DLL_CODE0[4] --> DLL_STEP[4] ) = 150;
        ( DLL_CODE0[5] --> DLL_CODE0_BUF[5] ) = 150;
        ( DLL_CODE0[5] --> DLL_STEP[5] ) = 150;
        ( DLL_CODE0[6] --> DLL_CODE0_BUF[6] ) = 150;
        ( DLL_CODE0[6] --> DLL_STEP[6] ) = 150;
        ( DLL_CODE0[7] --> DLL_CODE0_BUF[7] ) = 150;
        ( DLL_CODE0[7] --> DLL_STEP[7] ) = 150;
        ( DLL_CODE1[0] --> DLL_CODE1_BUF[0] ) = 150;
        ( DLL_CODE1[0] --> DLL_STEP[0] ) = 150;
        ( DLL_CODE1[1] --> DLL_CODE1_BUF[1] ) = 150;
        ( DLL_CODE1[1] --> DLL_STEP[1] ) = 150;
        ( DLL_CODE1[2] --> DLL_CODE1_BUF[2] ) = 150;
        ( DLL_CODE1[2] --> DLL_STEP[2] ) = 150;
        ( DLL_CODE1[3] --> DLL_CODE1_BUF[3] ) = 150;
        ( DLL_CODE1[3] --> DLL_STEP[3] ) = 150;
        ( DLL_CODE1[4] --> DLL_CODE1_BUF[4] ) = 150;
        ( DLL_CODE1[4] --> DLL_STEP[4] ) = 150;
        ( DLL_CODE1[5] --> DLL_CODE1_BUF[5] ) = 150;
        ( DLL_CODE1[5] --> DLL_STEP[5] ) = 150;
        ( DLL_CODE1[6] --> DLL_CODE1_BUF[6] ) = 150;
        ( DLL_CODE1[6] --> DLL_STEP[6] ) = 150;
        ( DLL_CODE1[7] --> DLL_CODE1_BUF[7] ) = 150;
        ( DLL_CODE1[7] --> DLL_STEP[7] ) = 150;
        ( DLL_CODE2[0] --> DLL_CODE2_BUF[0] ) = 150;
        ( DLL_CODE2[0] --> DLL_STEP[0] ) = 150;
        ( DLL_CODE2[1] --> DLL_CODE2_BUF[1] ) = 150;
        ( DLL_CODE2[1] --> DLL_STEP[1] ) = 150;
        ( DLL_CODE2[2] --> DLL_CODE2_BUF[2] ) = 150;
        ( DLL_CODE2[2] --> DLL_STEP[2] ) = 150;
        ( DLL_CODE2[3] --> DLL_CODE2_BUF[3] ) = 150;
        ( DLL_CODE2[3] --> DLL_STEP[3] ) = 150;
        ( DLL_CODE2[4] --> DLL_CODE2_BUF[4] ) = 150;
        ( DLL_CODE2[4] --> DLL_STEP[4] ) = 150;
        ( DLL_CODE2[5] --> DLL_CODE2_BUF[5] ) = 150;
        ( DLL_CODE2[5] --> DLL_STEP[5] ) = 150;
        ( DLL_CODE2[6] --> DLL_CODE2_BUF[6] ) = 150;
        ( DLL_CODE2[6] --> DLL_STEP[6] ) = 150;
        ( DLL_CODE2[7] --> DLL_CODE2_BUF[7] ) = 150;
        ( DLL_CODE2[7] --> DLL_STEP[7] ) = 150;

    }
};
//grid device structure netlist end
//grid device configure body started

configuration cfg of DQSLMUX
{

 // assign config body begin
    SC_DLLCODESEL  :=  CP_DLLCODESEL;
    SC_IOCLK_SEL  :=  CP_IOCLK_SEL;
// assign config body end
    if ( DLL_CODE0[0] --> DLL_CODE0_BUF[0] )
    {
    }

    if ( DLL_CODE0[1] --> DLL_CODE0_BUF[1] )
    {
    }

    if ( DLL_CODE0[2] --> DLL_CODE0_BUF[2] )
    {
    }

    if ( DLL_CODE0[3] --> DLL_CODE0_BUF[3] )
    {
    }

    if ( DLL_CODE0[4] --> DLL_CODE0_BUF[4] )
    {
    }

    if ( DLL_CODE0[5] --> DLL_CODE0_BUF[5] )
    {
    }

    if ( DLL_CODE0[6] --> DLL_CODE0_BUF[6] )
    {
    }

    if ( DLL_CODE0[7] --> DLL_CODE0_BUF[7] )
    {
    }

    if ( DLL_CODE1[0] --> DLL_CODE1_BUF[0] )
    {
    }

    if ( DLL_CODE1[1] --> DLL_CODE1_BUF[1] )
    {
    }

    if ( DLL_CODE1[2] --> DLL_CODE1_BUF[2] )
    {
    }

    if ( DLL_CODE1[3] --> DLL_CODE1_BUF[3] )
    {
    }

    if ( DLL_CODE1[4] --> DLL_CODE1_BUF[4] )
    {
    }

    if ( DLL_CODE1[5] --> DLL_CODE1_BUF[5] )
    {
    }

    if ( DLL_CODE1[6] --> DLL_CODE1_BUF[6] )
    {
    }

    if ( DLL_CODE1[7] --> DLL_CODE1_BUF[7] )
    {
    }

    if ( DLL_CODE2[0] --> DLL_CODE2_BUF[0] )
    {
    }

    if ( DLL_CODE2[1] --> DLL_CODE2_BUF[1] )
    {
    }

    if ( DLL_CODE2[2] --> DLL_CODE2_BUF[2] )
    {
    }

    if ( DLL_CODE2[3] --> DLL_CODE2_BUF[3] )
    {
    }

    if ( DLL_CODE2[4] --> DLL_CODE2_BUF[4] )
    {
    }

    if ( DLL_CODE2[5] --> DLL_CODE2_BUF[5] )
    {
    }

    if ( DLL_CODE2[6] --> DLL_CODE2_BUF[6] )
    {
    }

    if ( DLL_CODE2[7] --> DLL_CODE2_BUF[7] )
    {
    }

    if ( CLK_IO_IN[0] --> CLK_IO )
    {
        SC_IOCLK_SEL := 1'b0;
    }

    if ( CLK_IO_IN[1] --> CLK_IO )
    {
        SC_IOCLK_SEL := 1'b1;
    }

    if ( DLL_CODE0[0] --> DLL_STEP[0] )
    {
        SC_DLLCODESEL := 2'b00;
    }

    if ( DLL_CODE1[0] --> DLL_STEP[0] )
    {
        SC_DLLCODESEL := 2'b01;
    }

    if ( DLL_CODE2[0] --> DLL_STEP[0] )
    {
        SC_DLLCODESEL := 2'b10;
    }

    if ( DLL_CODE0[1] --> DLL_STEP[1] )
    {
        SC_DLLCODESEL := 2'b00;
    }

    if ( DLL_CODE1[1] --> DLL_STEP[1] )
    {
        SC_DLLCODESEL := 2'b01;
    }

    if ( DLL_CODE2[1] --> DLL_STEP[1] )
    {
        SC_DLLCODESEL := 2'b10;
    }

    if ( DLL_CODE0[2] --> DLL_STEP[2] )
    {
        SC_DLLCODESEL := 2'b00;
    }

    if ( DLL_CODE1[2] --> DLL_STEP[2] )
    {
        SC_DLLCODESEL := 2'b01;
    }

    if ( DLL_CODE2[2] --> DLL_STEP[2] )
    {
        SC_DLLCODESEL := 2'b10;
    }

    if ( DLL_CODE0[3] --> DLL_STEP[3] )
    {
        SC_DLLCODESEL := 2'b00;
    }

    if ( DLL_CODE1[3] --> DLL_STEP[3] )
    {
        SC_DLLCODESEL := 2'b01;
    }

    if ( DLL_CODE2[3] --> DLL_STEP[3] )
    {
        SC_DLLCODESEL := 2'b10;
    }

    if ( DLL_CODE0[4] --> DLL_STEP[4] )
    {
        SC_DLLCODESEL := 2'b00;
    }

    if ( DLL_CODE1[4] --> DLL_STEP[4] )
    {
        SC_DLLCODESEL := 2'b01;
    }

    if ( DLL_CODE2[4] --> DLL_STEP[4] )
    {
        SC_DLLCODESEL := 2'b10;
    }

    if ( DLL_CODE0[5] --> DLL_STEP[5] )
    {
        SC_DLLCODESEL := 2'b00;
    }

    if ( DLL_CODE1[5] --> DLL_STEP[5] )
    {
        SC_DLLCODESEL := 2'b01;
    }

    if ( DLL_CODE2[5] --> DLL_STEP[5] )
    {
        SC_DLLCODESEL := 2'b10;
    }

    if ( DLL_CODE0[6] --> DLL_STEP[6] )
    {
        SC_DLLCODESEL := 2'b00;
    }

    if ( DLL_CODE1[6] --> DLL_STEP[6] )
    {
        SC_DLLCODESEL := 2'b01;
    }

    if ( DLL_CODE2[6] --> DLL_STEP[6] )
    {
        SC_DLLCODESEL := 2'b10;
    }

    if ( DLL_CODE0[7] --> DLL_STEP[7] )
    {
        SC_DLLCODESEL := 2'b00;
    }

    if ( DLL_CODE1[7] --> DLL_STEP[7] )
    {
        SC_DLLCODESEL := 2'b01;
    }

    if ( DLL_CODE2[7] --> DLL_STEP[7] )
    {
        SC_DLLCODESEL := 2'b10;
    }

};

//grid device configure body end

