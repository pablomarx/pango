
use pgl_defs, pgl_schm_funcs, pgl25g_defs;

schematic schm_view draw_logic_resource of device PGL25G
{
    // Tile index variable
    unsigned int tx, ty;
    
    
    // draw srb tile
    foreach tx ( L_SRB_TILES_X )
    {
        foreach ty ( L_SRB_TILES_Y )
        {
              draw_srb_tile ( tx, ty);
        } 
    }
    
    
    // draw clm tile
    foreach tx ( L_CLMA_TILES_X )         
    {                                     
        foreach ty ( L_CLM_TILES_Y )      
        {                                 
               draw_clma_tile( tx, ty ); 
        }                                 
    }                                     

    
//   foreach tx ( L_CLMS_TILES_X )
//   {
//       foreach ty ( L_CLM_TILES_Y )
//       {
//
//           if(!((tx==PLL_TILE_X)&&((ty>=PLL0_TILE_Y&&ty<=PLL0_TILE_Y+NUM_GRID_PLL_Y)||(ty>=PLL2_TILE_Y&&ty<=PLL2_TILE_Y+NUM_GRID_PLL_Y)||(ty>=USCM0_TILE_Y&&ty<=USCM0_TILE_Y+NUM_GRID_USCM_Y))))
//           {
//              draw_clms_tile( tx, ty );
//           }
//       }
//   }
    
    foreach tx ( L_CLMS_TILES_X )
    {
        foreach ty ( L_CLM_TILES_Y )
        {

            if(!((tx==PLL_TILE_X)&&((ty>=PLL0_TILE_Y&&ty<=PLL0_TILE_Y+NUM_GRID_PLL_Y)||(ty>=PLL2_TILE_Y&&ty<=PLL2_TILE_Y+NUM_GRID_PLL_Y)||(ty>=USCM0_TILE_Y&&ty<USCM0_TILE_Y+NUM_GRID_USCM_Y))))
            {
               if(!(tx==59&&ty<4))
               {
                   draw_clms_tile( tx, ty );
               }
            }
        }
    }
    
    
   draw_ccs_tile(CCS_TILE_X, CCS_TILE_Y);
    
    
    foreach tx ( L_DRM_TILES_X )
    {
        foreach ty ( L_DRM_TILES_Y )
        {
            draw_drm_tile( tx, ty );
        }
    } 
    
    
    
    foreach tx ( L_APM_TILES_X )
    {
        foreach ty ( L_APM_TILES_Y )
        {
            draw_apm_tile( tx, ty);
        }
    } 
    
    
    unsigned int L_PLL_TILES_X[] = {PLL_TILE_X};
    unsigned int L_PLL_B_TILES_Y[] = {PLL0_TILE_Y,PLL2_TILE_Y};
    unsigned int L_PLL_T_TILES_Y[] = {PLL1_TILE_Y,PLL3_TILE_Y};

    foreach tx ( L_PLL_TILES_X )
    {
        foreach ty ( L_PLL_B_TILES_Y )
        {
            draw_pll_tile( tx, ty, 0);
        }  
        foreach ty ( L_PLL_T_TILES_Y )
        {
            draw_pll_tile( tx, ty, 1);
        } 
    }    
    
    
    unsigned int L_USCM_TILES_X[] = {USCM_TILE_LOC_X};
    unsigned int L_USCM_TILES_Y[] = {USCM0_TILE_LOC_Y, USCM1_TILE_LOC_Y};

    foreach tx ( L_USCM_TILES_X )
    {
        foreach ty ( L_USCM_TILES_Y )
        {
            draw_uscm_tile( tx, ty);
        }      
    } 
    

    foreach ty ( {IOL_TILE_Y_U} )
    {
        foreach tx ( L_IOL_TILES_X_U )
        {
            draw_iol_tile_ud( tx, ty); //1
        }  
//        foreach tx ( L_CLMA_TILES_X_U )
//        {
//            draw_clma_tile( tx, ty);
//        } 
    }
    
    foreach ty ( {IOL_TILE_Y_D} )
    {
        foreach tx ( L_IOL_TILES_X_D )
        {
            draw_iol_tile_ud( tx, ty); //0
        }  
//        foreach tx ( L_CLMA_TILES_X_D )
//        {
//            draw_clma_tile( tx, ty);
//        } 
    }
    
    foreach tx ( {IOL_TILE_X_L,IOL_TILE_X_R} )
    {
        foreach ty ( L_IOCKGATEDLL_TILES_Y )
        {
            draw_iockgatedll_tile( tx, ty);
        } 
    }
    
    
    foreach tx ( {IOL_TILE_X_L,IOL_TILE_X_R} )
    {
        foreach ty ( L_IOL_TILES_Y_LR )
        {
            draw_iol_tile( tx, ty);
        }  
        foreach ty ( L_DQSL_TILES_Y )
        {
            draw_dqsl_tile( tx, ty); //0
        }
    }
    

//***********************************************************
  
//    foreach tx ( L_IOL_TILES_X )
//    {
//        foreach ty ( L_IOL_TILES_Y )
//        {
//            draw_iol_tile( tx, ty );
//        }  
//        foreach ty ( L_DQSL_TILES_Y )
//        {
//            draw_dqsl_tile( tx, ty, 0 );
//        }
//        foreach ty ( L_IOCKGATEDLL_TILES_Y )
//        {
//            draw_iockgatedll_tile( tx, ty );
//        }
//    }
//    
//    
////    foreach tx({L_IOB_TILES_X})
////    {
//        foreach ty ({ L_IOB_TILES_Y} )
//        {
//            draw_iob_tile( 32, ty );
//        }
////    } 
//   
////    foreach tx({L_IOB_WO_TILES_X})
////    {
//        foreach ty ({ L_IOB_TILES_Y} )
//        {
//            draw_iob_wo_tile( 0, ty);
//        }
////    } 
//    
//    // blsr_tile has no pnr device
//    //foreach tx ( L_BLSR_TILES_X )
//    //{
//    //    foreach ty ( L_BLSR_TILES_Y )
//    //    {
//    //        draw_blsr_tile( tx, ty );
//    //    }  
//    //} 
//    
//

//****************************************************
    unsigned int tx_hmemc = 31;
    
    foreach ty ( L_WLSR_TILES_Y )
    {
        foreach tx ( L_WLSR_TILES_X )
        {
            draw_wlsr_tile( tx, ty);
        }  
        foreach tx ( L_WLSRA_TILES_X )
        {
            draw_wlsra_tile( tx,ty);
        }
        foreach tx ( L_WLSR1_TILES_X )
        {
            draw_wlsr1_tile( tx, ty);
        } 
        foreach tx ( L_WLSRD_TILES_X )
        {
            draw_wlsrd_tile( tx, ty);
        }
        foreach tx ( {WLSR2_TILE_X} )
        {
            draw_wlsr2_tile( tx, ty);
        }
    }   
    
    draw_analog_tile( ANALOG_TILE_X, ANALOG_TILE_Y); 
    
    draw_iob_tile_u( IOB0_TILE_X, IOB0_TILE_Y); 
    draw_iob_tile_d( IOB2_TILE_X, IOB2_TILE_Y);
    draw_iob_tile_r( IOB1_TILE_X, IOB1_TILE_Y);
    draw_iob_tile_l( IOB3_TILE_X, IOB3_TILE_Y);
    
    foreach ty ( L_IOCKDLL_TILES_LOC_Y )
    {
       // int ty_iockdll = (ty < PLL0_TILE_Y) ? IOL_TILE_Y_D : IOL_TILE_Y_U ;

        foreach tx( L_IOCKDLL_TILES_LOC_X )
        {
            if(ty < PLL0_TILE_Y)
            {
                //int tx_iockdll = (tx < PLL_TILE_X) ? IOCKDLL_TILE_X_D_L : IOCKDLL_TILE_X_D_R ;

                draw_iockdll_tile(tx, ty);
            }
            else
            { 
                //int tx_iockdll = (tx < PLL_TILE_X) ? IOCKDLL_TILE_X_U_L : IOCKDLL_TILE_X_U_R ;

                draw_iockdll_tile(tx, ty);
            }
        }

    }
};