use pgl_defs, pgl_floorplan_funcs, pgl50h_defs;

floorplan
structure fp_struct place_logic_resource of device PGL50H
{
    // Tile index variable
    unsigned int tx, ty;
    unsigned int ty_tmp,rx,flag_t;
    
    
    //CLM
    foreach tx ( L_CLMA_TILES_X )
    {
        foreach ty ( L_CLM_TILES_Y )
        {
            if(!(tx>=HSST_TILE_U_L_X && tx<HSST_TILE_U_R_X && ty>=HSST_TILE_U_L_Y - 1))
            {
                if(!(tx>=PCIE_TILE_L_X && tx<=PCIE_TILE_R_X && ty>=PCIE_TILE_L_Y && ty<PCIE_TILE_R_Y))
                {
                    place_clma_tile_fp( tx, ty );
                }
            }
        }
    }
    foreach tx ( L_CLMS_TILES_X )
    {
        foreach ty ( L_CLM_TILES_Y )
        {
            if(!(tx>=HSST_TILE_U_L_X && tx<HSST_TILE_U_R_X && ty>=HSST_TILE_U_L_Y - 1))
            {
                if(!(tx>=PCIE_TILE_L_X && tx<=PCIE_TILE_R_X && ty>=PCIE_TILE_L_Y && ty<PCIE_TILE_R_Y))
                {
                    if(!(tx==PLL_TILE_X))
                    {
                        place_clms_tile_fp( tx, ty );
                    }
                }
            }
        }
    }

    foreach ty ( L_CLM_TILES_PLL_Y )
    {
        place_clms_tile_fp( PLL_TILE_X, ty);                            
    }  
  //APM
    foreach tx ( L_APM_TILES_X )
    {
        foreach ty ( L_APM_TILES_Y )
        {
            if(!(tx==BLSR_TILE_X_L || tx==BLSR_TILE_X_R))
            {
                if(!(tx>=HSST_TILE_U_L_X && tx<HSST_TILE_U_R_X && ty>=HSST_TILE_U_L_Y - 1))
                {
                    if(!((tx>PCIE_TILE_L_X && tx<PCIE_TILE_R_X) && (ty>=PCIE_TILE_L_Y && ty<PCIE_TILE_R_Y)))
                    {

                        place_apm_tile_fp ( tx, ty);

                    }
                }
            }
        }
    }
  //DRM
    foreach tx ( L_DRM_TILES_X )
    {
        foreach ty ( L_DRM_TILES_Y )
        {
            if(!(tx==BLSR_TILE_X_L || tx==BLSR_TILE_X_R))
            {
                if(!(tx>=HSST_TILE_U_L_X && tx<HSST_TILE_U_R_X && ty>=HSST_TILE_U_L_Y - 1) )
                {
                    if(!((tx>PCIE_TILE_L_X && tx<PCIE_TILE_R_X) && (ty>=PCIE_TILE_L_Y && ty<PCIE_TILE_R_Y)))
                    {
                        place_drm_tile_fp ( tx, ty);

                    }
                }
            }
        }
    } 

//IOL
    foreach tx ( {IOL_TILE_X_L,IOL_TILE_X_R} )
    {
        int ty_iol[] = (tx==IOL_TILE_X_L) ? L_IOL_TILES_Y_L : L_IOL_TILES_Y_R ;

        foreach ty ( ty_iol )
        {
            place_iol_tile_fp( tx, ty);
        }  
        foreach ty ( L_DQSL_TILES_Y )
        {
            int flag_ccs = (ty==7&&tx==IOL_TILE_X_R) ? 1 : 0 ;

            place_dqsl_tile_fp( tx, ty,flag_ccs);
        }

        foreach ty ( L_IOCKGATEDLL_TILES_Y )
        {
           place_iockgatedll_tile_fp( tx, ty);
        }               
    } 
    foreach ty ( {IOL_TILE_Y_U} )
    {
        foreach tx ( L_IOL_TILES_X_U )
        {
           place_iol_tile_ud_fp( tx, ty, 1);
        }  
    }
    foreach ty ( {IOL_TILE_Y_D} )
    {
        foreach tx ( L_IOL_TILES_X_D )
        {
            place_iol_tile_ud_fp( tx, ty, 0);
        }  
    }  
   //iob
    place_iob0_tile_fp(IOB0_TILE_X, IOB0_TILE_Y);
    place_iob1_tile_fp(IOB1_TILE_X, IOB1_TILE_Y);
    place_iob2_tile_fp(IOB2_TILE_X, IOB2_TILE_Y);
    place_iob3_tile_fp(IOB3_TILE_X, IOB3_TILE_Y);  
  //CCS
   place_ccs_tile_fp(CCS_TILE_X,CCS_TILE_Y);   
//PLL
   unsigned int L_PLL_B_TILES_Y[] = {PLL0_TILE_Y};
   unsigned int L_PLL_T_TILES_Y[] = {PLL1_TILE_Y};
   
   foreach rx(L_REGIONS)
   {
       foreach ty_tmp ( {PLL0_TILE_Y,PLL1_TILE_Y} )
       {
           ty = ty_tmp + rx * NUM_TILES_REGION;
   
           flag_t = (ty_tmp==PLL1_TILE_Y) ? 1 : 0 ;
   
           if(ty<=NUM_TILE_HALF_Y + 2 * NUM_TILES_REGION)
           { 
               place_pll_tile_fp( PLL_TILE_X, ty, flag_t);
           }
       }  
   }  
    //uscm
    unsigned int L_USCM_TILES_X[] = {USCM_TILE_LOC_X};
    unsigned int L_USCM_TILES_Y[] = {USCM0_TILE_LOC_Y, USCM1_TILE_LOC_Y};
    int tx_srb = USCM_TILE_X;

    foreach tx ( L_USCM_TILES_X )
    {
        foreach ty ( L_USCM_TILES_Y )
        {
            int ty_srb = (ty < NUM_TILES_REGION * 3) ? USCM0_TILE_Y : USCM1_TILE_Y;
            place_uscm_tile_fp( tx, ty, tx_srb, ty_srb);
        }      
    }    
 //hsst
    int flag_ud , ty_dr ;

    ty_dr = HSST_TILE_U_R_Y ;

    foreach ty({HSST_TILE_U_L_Y})
    {

        flag_ud = (ty > USCM0_TILE_Y) ? 1 : 0 ;

        place_hsst_tile_fp(HSST_TILE_U_L_X, ty ,ty_dr, flag_ud);
    } 
 //pcie
     place_pcie_tile_fp(PCIE_TILE_L_X,PCIE_TILE_L_Y,PCIE_TILE_R_X);    
     place_analog_tile_fp( ANALOG_TILE_X, ANALOG_TILE_Y,93);     


    foreach ty ( L_IOCKDLL_TILES_LOC_Y )
    {

         int ty_iockdll = (ty < PLL0_TILE_Y) ? IOL_TILE_Y_D : IOL_TILE_Y_U ;

        foreach tx( L_BLSR_TILES_X )
        {
            
            int tx_iockdll = (tx < PLL_TILE_X && ty < USCM0_TILE_Y) ? IOCKDLL_TILE_X_D_L : 
                             (tx < PLL_TILE_X && ty > USCM0_TILE_Y) ? IOCKDLL_TILE_X_U_L : 
                             (tx > PLL_TILE_X && ty < USCM0_TILE_Y) ? IOCKDLL_TILE_X_D_R :  IOCKDLL_TILE_X_U_R ;

            place_iockdll_tile_fp( tx, ty, tx_iockdll, ty_iockdll);
        }

    }                
} // end of structure floorplan place_logic_resource of device PGL50H
