use pgl_defs, pgl25g_defs;
use pgl_funcs_connect_logic;
structure arch_nl connect_SRB_input_v of PGL25G
{
    unsigned int l_srb_tile_y0[59:0] = {[1:15,17:46,48:62]};
    unsigned int l_srb_tile_y0_u[59:0] = {[62:48,46:17,15:1]};
    unsigned int l_srb_tile_y1[50:0] = {[1:15,17:46,48:53]};
    unsigned int l_srb_tile_y1_u[50:0] = {[53:48,46:17,15:1]};

    unsigned int tx,index; 

    foreach tx(L_SRB_TILES_X)
    {
        foreach index ({[59:0]})
        {
           connect_SRB_input_v(tx, index,l_srb_tile_y0_u,l_srb_tile_y1_u,IOL_TILE_Y_D,1,0,1);
           connect_SRB_input_v(tx, index,l_srb_tile_y0_u,l_srb_tile_y1_u,IOL_TILE_Y_D,1,0,2);
           connect_SRB_input_v(tx, index,l_srb_tile_y0_u,l_srb_tile_y1_u,IOL_TILE_Y_D,1,0,4);
           connect_SRB_input_v(tx, index,l_srb_tile_y0_u,l_srb_tile_y1_u,IOL_TILE_Y_D,1,0,8);
        }
        foreach index ({[59:0]})
        {
           connect_SRB_input_v(tx, index,l_srb_tile_y0,l_srb_tile_y1,IOL_TILE_Y_D,0,0,1);
           connect_SRB_input_v(tx, index,l_srb_tile_y0,l_srb_tile_y1,IOL_TILE_Y_D,0,0,2);
           connect_SRB_input_v(tx, index,l_srb_tile_y0,l_srb_tile_y1,IOL_TILE_Y_D,0,0,4);
           connect_SRB_input_v(tx, index,l_srb_tile_y0,l_srb_tile_y1,IOL_TILE_Y_D,0,0,8);
           connect_SRB_input_v(tx, index,l_srb_tile_y0,l_srb_tile_y1,IOL_TILE_Y_D,0,0,3);
        }
    }

};//end of structure arch_nl layout_srb_tile of PGL25G
/*******************************************************************************
********************************************************************************/
library work;
use pgl_defs, pgl25g_defs;
use pgl_funcs_connect_logic;
structure arch_nl connect_SRB_input_h of PGL25G
{
    unsigned int l_srb_tile_y[59:0] = {[62:48,46:17,15:1]};
    unsigned int l_srb_tile_x0[57:0] = {[1:13,15:46,48:60]};
    unsigned int l_srb_tile_x0_u[57:0] = {[60:48,46:15,13:1]};
    unsigned int l_srb_tile_x1[12:0] = {[1:13]};
    unsigned int l_srb_tile_x1_u[12:0] = {[13:1]};
    unsigned int l_srb_tile_x2[12:0] = {[48:60]};
    unsigned int l_srb_tile_x2_u[12:0] = {[60:48]};

    unsigned int ty,index,index_y; 

    foreach index_y({[59:0]})
    {
        int flag_blank_d=(l_srb_tile_y[index_y]==IOL_TILE_Y_D) ? 1 : 0 ;
        int flag_blank_u=(l_srb_tile_y[index_y]==IOL_TILE_Y_U) ? 1 : 0 ;

        foreach index ({[57:0]})
        {
           connect_SRB_input_h(index_y, index,200,64,l_srb_tile_y,l_srb_tile_x0_u,l_srb_tile_x1_u,l_srb_tile_x2_u,1,0,1,flag_blank_d,flag_blank_u);
           connect_SRB_input_h(index_y, index,200,64,l_srb_tile_y,l_srb_tile_x0_u,l_srb_tile_x1_u,l_srb_tile_x2_u,1,0,2,flag_blank_d,flag_blank_u);
           connect_SRB_input_h(index_y, index,200,64,l_srb_tile_y,l_srb_tile_x0_u,l_srb_tile_x1_u,l_srb_tile_x2_u,1,0,4,flag_blank_d,flag_blank_u);
           connect_SRB_input_h(index_y, index,200,64,l_srb_tile_y,l_srb_tile_x0_u,l_srb_tile_x1_u,l_srb_tile_x2_u,1,0,8,flag_blank_d,flag_blank_u);
        }
        foreach index ({[57:0]})
        {
           connect_SRB_input_h(index_y, index,200,64,l_srb_tile_y,l_srb_tile_x0,l_srb_tile_x1,l_srb_tile_x2,0,0,1,flag_blank_d,flag_blank_u);
           connect_SRB_input_h(index_y, index,200,64,l_srb_tile_y,l_srb_tile_x0,l_srb_tile_x1,l_srb_tile_x2,0,0,2,flag_blank_d,flag_blank_u);
           connect_SRB_input_h(index_y, index,200,64,l_srb_tile_y,l_srb_tile_x0,l_srb_tile_x1,l_srb_tile_x2,0,0,4,flag_blank_d,flag_blank_u);
           connect_SRB_input_h(index_y, index,200,64,l_srb_tile_y,l_srb_tile_x0,l_srb_tile_x1,l_srb_tile_x2,0,0,8,flag_blank_d,flag_blank_u);
        }
    }

};//end of structure arch_nl layout_srb_tile of PGL25G
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl25g_defs,pgl_funcs_connect_logic;

structure arch_nl connect_CLM_TILES of PGL25G
{
    unsigned int l_clms_tile_y[57:0] = {[2:15,17:46,48:61]};
    unsigned int l_clms_tile_y_u[57:0] = {[61:48,46:17,15:2]};
    unsigned int l_clms_tile_y_pll[31:0] = {[2:11,21:29,34:42,49:52]};
    unsigned int l_clms_tile_y_pll_u[31:0] = {[52:49,42:34,29:21,11:2]};
    unsigned int l_clms_tile_y_h[48:0] = {[2:15,17:46,48:52]}; //6
    unsigned int l_clms_tile_y_h_u[48:0] = {[52:48,46:17,15:2]};
    unsigned int l_clms_tile_y_d55[55:0] = {[4:15,17:46,48:61]}; //9
    unsigned int l_clms_tile_y_d55_u[55:0] = {[61:48,46:17,15:4]};

    unsigned int l_clma_tile_y_0[57:0] = {[2:15,17:46,48:61]};     //2
    unsigned int l_clma_tile_y_0_u[57:0] = {[61:48,46:17,15:2]};
    unsigned int l_clma_tile_y_d[58:0] = {[1:15,17:46,48:61]};  //3
    unsigned int l_clma_tile_y_d_u[58:0] = {[61:48,46:17,15:1]};
    unsigned int l_clma_tile_y_u[58:0] = {[2:15,17:46,48:62]};
    unsigned int l_clma_tile_y_u_u[58:0] = {[62:48,46:17,15:2]};
    unsigned int l_clma_tile_y_ud[59:0] = {[1:15,17:46,48:62]};
    unsigned int l_clma_tile_y_ud_u[59:0] = {[62:48,46:17,15:1]};
    unsigned int l_clma_tile_y_h[48:0] = {[2:15,17:46,48:52]};   //7
    unsigned int l_clma_tile_y_h_u[48:0] = {[52:48,46:17,15:2]};
    unsigned int l_clma_tile_y_hd[37:0] = {[2:11,21:29,34:42,52:61]};  //8 for pgl25g pll col clms
    unsigned int l_clma_tile_y_hd_u[37:0] = {[61:52,42:34,29:21,11:2]};

    unsigned int tx,index; 


    foreach tx ( L_CLMS_TILES_X )
    {
        if(tx==59)
        {
            foreach index ({[55:0]})
            {
               connect_CLM_input(tx, index, l_clms_tile_y_u,l_clms_tile_y_pll_u,l_clma_tile_y_0_u,l_clma_tile_y_d_u,l_clma_tile_y_u_u,l_clma_tile_y_ud_u,l_clms_tile_y_h_u,l_clma_tile_y_h_u,l_clma_tile_y_hd_u,l_clms_tile_y_d55_u,1,1,9);
            }
            foreach index ({[55:0]})
            {
               connect_CLM_input(tx, index, l_clms_tile_y,l_clms_tile_y_pll,l_clma_tile_y_0,l_clma_tile_y_d,l_clma_tile_y_u,l_clma_tile_y_ud,l_clms_tile_y_h,l_clma_tile_y_h,l_clma_tile_y_hd,l_clms_tile_y_d55,1,0,9);
            }
        }
        else if(tx==PLL_TILE_X)
        {
            foreach index ({[37:0]})
            {
               connect_CLM_input(tx, index, l_clms_tile_y_u,l_clms_tile_y_pll_u,l_clma_tile_y_0_u,l_clma_tile_y_d_u,l_clma_tile_y_u_u,l_clma_tile_y_ud_u,l_clms_tile_y_h_u,l_clma_tile_y_h_u,l_clma_tile_y_hd_u,l_clms_tile_y_d55_u,1,1,8);
            }
            foreach index ({[37:0]})
            {
               connect_CLM_input(tx, index, l_clms_tile_y,l_clms_tile_y_pll,l_clma_tile_y_0,l_clma_tile_y_d,l_clma_tile_y_u,l_clma_tile_y_ud,l_clms_tile_y_h,l_clma_tile_y_h,l_clma_tile_y_hd,l_clms_tile_y_d55,1,0,8);
            }
        }
        else
        {
            foreach index ({[57:0]})

            {
               connect_CLM_input(tx, index, l_clms_tile_y_u,l_clms_tile_y_pll_u,l_clma_tile_y_0_u,l_clma_tile_y_d_u,l_clma_tile_y_u_u,l_clma_tile_y_ud_u,l_clms_tile_y_h_u,l_clma_tile_y_h_u,l_clma_tile_y_hd_u,l_clms_tile_y_d55_u,1,1,0);
            }
            foreach index ({[57:0]})

            {
               connect_CLM_input(tx, index, l_clms_tile_y,l_clms_tile_y_pll,l_clma_tile_y_0,l_clma_tile_y_d,l_clma_tile_y_u,l_clma_tile_y_ud,l_clms_tile_y_h,l_clma_tile_y_h,l_clma_tile_y_hd,l_clms_tile_y_d55,1,0,0);
            }
        }
    }
    
// for clma

    foreach tx ( L_CLMA_TILES_X ) 
    {
        foreach index ({[57:0]})
        {
           connect_CLM_input(tx, index, l_clms_tile_y_u,l_clms_tile_y_pll_u,l_clma_tile_y_0_u,l_clma_tile_y_d_u,l_clma_tile_y_u_u,l_clma_tile_y_ud_u,l_clms_tile_y_h_u,l_clma_tile_y_h_u,l_clma_tile_y_hd_u,l_clms_tile_y_d55_u,0,1,2);
        }
        foreach index ({[57:0]})
        {
           connect_CLM_input(tx, index, l_clms_tile_y,l_clms_tile_y_pll,l_clma_tile_y_0,l_clma_tile_y_d,l_clma_tile_y_u,l_clma_tile_y_ud,l_clms_tile_y_h,l_clma_tile_y_h,l_clma_tile_y_hd,l_clms_tile_y_d55,0,0,2);
        }
    }
};
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl25g_defs,pgl_funcs_connect_logic;

structure arch_nl connect_APM_TILE of PGL25G
{
    unsigned int l_apm_tile_y[19:0] = {1,4,7,10,13,17,20,23,26,29,32,35,38,41,44,48,51,54,57,60};
    unsigned int l_apm_tile_y_u[19:0] = {60,57,54,51,48,44,41,38,35,32,29,26,23,20,17,13,10,7,4,1}; 
    unsigned int l_apm_tile_y_h[15:0] = {1,4,7,10,13,17,20,23,26,29,32,35,38,41,44,48};
    unsigned int l_apm_tile_y_h_u[15:0] = {48,44,41,38,35,32,29,26,23,20,17,13,10,7,4,1};

    int tx, index ;

    foreach tx ( L_APM_TILES_X )
    {
        foreach index ({[19:0]})
        {
           connect_APM_input(tx, index, l_apm_tile_y_u,l_apm_tile_y_h_u,1,0);
        }
        foreach index ({[19:0]})
        {
           connect_APM_input(tx, index, l_apm_tile_y,l_apm_tile_y_h,0,0);
        }
    }
    
};  // end of structure arch_nl connect_APM_TILE of PGL25G
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl25g_defs;
use pgl_funcs_connect_logic;
structure arch_nl connect_bias of PGL25G
{
    connect_bias_iob( IOB0_TILE_X, IOB1_TILE_X, IOB3_TILE_X, IOB0_TILE_Y,IOB2_TILE_Y,IOB1_TILE_Y, ANALOG_TILE_X, ANALOG_TILE_Y, 0,"ANALOG_PGL25G_TILE" );

    connect_bias_pll(PLL_TILE_X, PLL0_TILE_Y, PLL1_TILE_Y,  ANALOG_TILE_X, ANALOG_TILE_Y, "ANALOG_PGL25G_TILE","PLL_TILE", 0);

};//end of structure arch_nl connect_bias of PGL25G
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl25g_defs;
use pgl_funcs_connect_logic;
structure arch_nl connect_iob_gs of PGL25G
{

    connect_iob_gs_input(CCS_TILE_X, CCS_TILE_Y,ANALOG_TILE_X, ANALOG_TILE_Y,IOB0_TILE_X,IOB0_TILE_Y,IOB1_TILE_X,IOB1_TILE_Y,IOB2_TILE_X,IOB2_TILE_Y,IOB3_TILE_X,IOB3_TILE_Y,0,0,"CCS_TILE","ANALOG_PGL25G_TILE",0,0);

};//end of structure arch_nl connect_iob_gs of PGL25G
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl25g_defs;
use pgl_funcs_connect_logic;
structure arch_nl connect_blsr_input of PGL25G
{

    connect_BLSR_input_pgl25g(BLSR_TILE_X_R,BLSR_TILE_X_L,CCS_TILE_X, CCS_TILE_Y,ANALOG_TILE_X, ANALOG_TILE_Y, "CCS_TILE", "BLSR1_TILE", "BLSR2_TILE", "ANALOG_PGL25G_TILE" );

    connect_BLSR_input_loop(1, BLSR_TILE_X_L, BLSR_TILE_X_L,CCS_TILE_X, CCS_TILE_Y,ANALOG_TILE_X, ANALOG_TILE_Y, PLL_TILE_X, IOB1_TILE_X, IOB1_TILE_Y,"BLSR1_TILE", "BLSR1_TILE", "BLSR2_TILE", "ANALOG_PGL25G_TILE", 1, 1, 1);
    connect_BLSR_input_loop(0, BLSR_TILE_X_L, BLSR_TILE_X_L,CCS_TILE_X, CCS_TILE_Y,ANALOG_TILE_X, ANALOG_TILE_Y, PLL_TILE_X, IOB1_TILE_X, IOB1_TILE_Y,"BLSR2_TILE", "BLSR1_TILE", "BLSR2_TILE", "ANALOG_PGL25G_TILE", 1, 0, 1);
    connect_BLSR_input_loop(1, BLSR_TILE_X_R, BLSR_TILE_X_L,CCS_TILE_X, CCS_TILE_Y,ANALOG_TILE_X, ANALOG_TILE_Y, PLL_TILE_X, IOB1_TILE_X, IOB1_TILE_Y,"BLSR1_TILE", "BLSR1_TILE", "BLSR2_TILE", "ANALOG_PGL25G_TILE", 0, 1, 1);
    connect_BLSR_input_loop(0, BLSR_TILE_X_R, BLSR_TILE_X_L,CCS_TILE_X, CCS_TILE_Y,ANALOG_TILE_X, ANALOG_TILE_Y, PLL_TILE_X, IOB1_TILE_X, IOB1_TILE_Y,"BLSR2_TILE", "BLSR1_TILE", "BLSR2_TILE", "ANALOG_PGL25G_TILE", 0, 0, 1);


};//end of structure arch_nl connect_blsr_input of PGL25G
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl25g_defs;
use pgl_funcs_connect_logic;
structure arch_nl connect_ccs_input of PGL25G
{

    connect_ccs_input(CCS_TILE_X, CCS_TILE_Y , BLSR_TILE_X_R, 1, 0, IDCODE_TILE_X, IDCODE_TILE_Y, IOB2_TILE_X, IOB2_TILE_Y, PLL_TILE_X, PLL0_TILE_Y, ANALOG_TILE_X, ANALOG_TILE_Y, "BLSR1_TILE", "BLSR2_TILE", "IOB2_TILE","IDCODE_PGL25G_TILE","PLL_TILE","ANALOG_PGL25G_TILE");


};//end of structure arch_nl connect_ccs_input of PGL25G
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl25g_defs;
use pgl_funcs_connect_logic;
structure arch_nl connect_analog_input of PGL25G
{

    connect_analog_input(ANALOG_TILE_X, ANALOG_TILE_Y, PLL_TILE_X, PLL0_TILE_Y, PLL1_TILE_Y, CCS_TILE_X, CCS_TILE_Y,IOB2_TILE_X, IOB2_TILE_Y, "ANALOG_PGL25G_TILE","PLL_TILE","CCS_TILE","IOB2_TILE",0);


};//end of structure arch_nl connect_analog_input of PGL25G
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl25g_defs;
use pgl_funcs_connect_logic;
structure arch_nl connect_analog_output of PGL25G
{

    int rx, tx ;

    foreach rx({[1:0]})
    {
        foreach tx({IOL_TILE_X_L,IOL_TILE_X_R})
        {
            connect_analog_output(tx, rx, ANALOG_TILE_X, ANALOG_TILE_Y, "ANALOG_PGL25G_TILE", "IOCKGATEDLL_TILE", 1);
        }
        foreach tx(L_WLSR_TILES_X)
        {
            connect_analog_output(tx, rx, ANALOG_TILE_X, ANALOG_TILE_Y, "ANALOG_PGL25G_TILE", "WLSR_TILE", 0);
        }
        foreach tx(L_WLSR1_TILES_X)
        {
            connect_analog_output(tx, rx, ANALOG_TILE_X, ANALOG_TILE_Y, "ANALOG_PGL25G_TILE", "WLSR1_TILE", 0);
        }
        foreach tx(L_WLSRA_TILES_X)
        {
            connect_analog_output(tx, rx, ANALOG_TILE_X, ANALOG_TILE_Y, "ANALOG_PGL25G_TILE", "WLSRA_TILE", 0);
        }
        foreach tx(L_WLSRD_TILES_X)
        {
            connect_analog_output(tx, rx, ANALOG_TILE_X, ANALOG_TILE_Y, "ANALOG_PGL25G_TILE", "WLSRD_TILE", 0);
        }
        foreach tx({WLSR2_TILE_X})
        {
            connect_analog_output(tx, rx, ANALOG_TILE_X, ANALOG_TILE_Y, "ANALOG_PGL25G_TILE", "WLSR2_TILE", 0);
        }
    }
    

};//end of structure arch_nl connect_analog_input of PGL25G
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl25g_defs,pgl_funcs_connect_logic;

structure arch_nl connect_vdd11_gclk of PGL25G
{
    unsigned int tx,ty,ty_blsr,tx_blsr;
    string blsr ;
    
    foreach tx ( L_WLSR_TILES_X )
    {
        foreach ty ( L_WLSR_TILES_Y )
        {

            tx_blsr = (tx<=PLL_TILE_X) ? BLSR_TILE_X_L : BLSR_TILE_X_R;

            ty_blsr = (ty<NUM_TILES_REGION) ? 0 : 1 ;

            blsr = (ty<NUM_TILES_REGION)  ? "BLSR2_TILE" : "BLSR1_TILE" ;

            connect_vdd11_gclk( tx, ty, tx_blsr,ty_blsr, "WLSR_TILE", blsr, "TIEL2");
        }
    } 

    foreach tx ( L_WLSR1_TILES_X )
    {
        foreach ty ( L_WLSR_TILES_Y )
        {
            tx_blsr = (tx<=PLL_TILE_X) ? BLSR_TILE_X_L : BLSR_TILE_X_R;

            ty_blsr = (ty<NUM_TILES_REGION) ? 0 : 1 ;

            blsr = (ty<NUM_TILES_REGION)  ? "BLSR2_TILE" : "BLSR1_TILE" ;

            connect_vdd11_gclk( tx, ty, tx_blsr,ty_blsr, "WLSR1_TILE", blsr, "TIEL2");
        }
    }
    foreach tx ( {WLSR2_TILE_X} )
    {
        foreach ty ( L_WLSR_TILES_Y )
        {
            tx_blsr = (tx<=PLL_TILE_X) ? BLSR_TILE_X_L : BLSR_TILE_X_R;

            ty_blsr = (ty<NUM_TILES_REGION) ? 0 : 1 ;

            blsr = (ty<NUM_TILES_REGION)  ? "BLSR2_TILE" : "BLSR1_TILE" ;

            connect_vdd11_gclk( tx, ty, tx_blsr,ty_blsr, "WLSR2_TILE", blsr, "TIEL2");
        }
    }
    foreach tx ( L_WLSRA_TILES_X )
    {
        foreach ty ( L_WLSR_TILES_Y )
        {
            tx_blsr = (tx<=PLL_TILE_X) ? BLSR_TILE_X_L : BLSR_TILE_X_R;

            ty_blsr = (ty<NUM_TILES_REGION) ? 0 : 1 ;

            blsr = (ty<NUM_TILES_REGION)  ? "BLSR2_TILE" : "BLSR1_TILE" ;

            connect_vdd11_gclk( tx, ty, tx_blsr,ty_blsr, "WLSRA_TILE", blsr, "TIEL2");
        }
    }
    foreach tx ( L_WLSRD_TILES_X )
    {
        foreach ty ( L_WLSR_TILES_Y )
        {
            tx_blsr = (tx<=PLL_TILE_X) ? BLSR_TILE_X_L : BLSR_TILE_X_R;

            ty_blsr = (ty<NUM_TILES_REGION) ? 0 : 1 ;

            blsr = (ty<NUM_TILES_REGION)  ? "BLSR2_TILE" : "BLSR1_TILE" ;

            connect_vdd11_gclk( tx, ty, tx_blsr,ty_blsr, "WLSRD_TILE", blsr, "TIEL2");
        }
    }

    foreach tx ( L_IOL_TILES_X_LR )
    {
        foreach ty ( L_IOCKGATEDLL_TILES_Y )
        {
            tx_blsr = (tx<=PLL_TILE_X) ? BLSR_TILE_X_L : BLSR_TILE_X_R;

            ty_blsr = (ty<NUM_TILES_REGION) ? 0 : 1 ;

            blsr = (ty<NUM_TILES_REGION)  ? "BLSR2_TILE" : "BLSR1_TILE" ;

            connect_vdd11_gclk( tx, ty, tx_blsr,ty_blsr, "IOCKGATEDLL_TILE", blsr, "TIEL2");
        }
    }
    foreach ty ( {USCM0_TILE_LOC_Y,USCM1_TILE_LOC_Y} )
    {
            tx_blsr = (tx<=PLL_TILE_X) ? BLSR_TILE_X_L : BLSR_TILE_X_R;

            ty_blsr = (ty<NUM_TILES_REGION) ? 0 : 1 ;

            blsr = (ty<NUM_TILES_REGION)  ? "BLSR2_TILE" : "BLSR1_TILE" ;

            connect_vdd11_gclk( BLSR_TILE_X_L, ty, tx_blsr,ty_blsr, "USCM_TILE", blsr, "TIEL2");
    }

};  // end of structure arch_nl connect_vdd11_gclk of PGL25G
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl25g_defs;
use pgl_funcs_connect_logic;
structure arch_nl connect_tiehi of PGL25G
{

    int rx, tx ;

    foreach rx({[1:0]})
    {
        foreach tx(L_WLSR1_TILES_X)
        {
            connect_wlsr1_tiehi_input(tx, rx, "WLSR1_TILE");
        }
        foreach tx({BLSR_TILE_X_L,BLSR_TILE_X_R})
        {
            string blsr = (rx == 0) ? "BLSR2_TILE" : "BLSR1_TILE" ;

            int flag_lr = (tx<PLL_TILE_X) ? 1 :0 ;
            
            int flag_ud = (rx == 0) ? 0 : 1 ; 
            
            connect_blsr_tiehi_input(tx, rx, blsr, flag_lr , flag_ud);
        }
    }
    
};//end of structure arch_nl connect_analog_input of PGL25G
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl25g_defs;
use pgl_funcs_connect_logic;
structure arch_nl connect_in_tiehi of PGL25G
{

    int rx, tx, ty;

    foreach ty(L_CRAMSL2_TILES_Y)
    {
        foreach tx({IOL_TILE_X_L,IOL_TILE_X_R})
        {
            if(!(ty==8&&tx==IOL_TILE_X_R))
            {
                connect_cramsl2_tiehi_input(tx, ty, "CRAMSL2_TILE");
            }
        }
    }
    

};//end of structure arch_nl connect_in_tiehi of PGL25G
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl25g_defs;
use pgl_funcs_connect_logic;
structure arch_nl connect_iol_input of PGL25G
{

    int rx, tx, ty;

    foreach ty(L_IOL_TILES_Y_LR)
    {
        foreach tx({IOL_TILE_X_L,IOL_TILE_X_R})
        {
            connect_iol_input(tx, ty, "IOL_TILE");
        }
   } 

};//end of structure arch_nl connect_iol_input of PGL25G
/***************************************************************************************
****************************************************************************************/
//library work;
//use pgl_defs,pgl25g_defs;
//use pgl_funcs_connect_logic;
//structure arch_nl connect_dqsl_input of PGL25G
//{
//
//    int rx, tx, ty;
//
//    foreach ty(L_DQSL_TILES_Y)
//    {
//        foreach tx({IOL_TILE_X_L,IOL_TILE_X_R})
//        {
//            connect_dqsl_input(tx, ty, "DQSL_TILE");
//        }
//    }
//    
//
//};//end of structure arch_nl connect_dqsl_input of PGL25G
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl25g_defs;
use pgl_funcs_connect_logic;
structure arch_nl connect_iock_tiehi_input of PGL25G
{

    int rx, tx, ty;

    foreach ty(L_IOCKGATEDLL_TILES_Y)
    {
        foreach tx({IOL_TILE_X_L,IOL_TILE_X_R})
        {

           int flag_lr = (tx < PLL_TILE_X) ? 1 : 0 ; 
           int flag_ud = (ty < MID_TILE_REGION) ? 0 : 1 ;

            connect_iock_tiehi_input(tx, ty, "IOCKGATEDLL_TILE",flag_lr,flag_ud);
        }
    }
    

};//end of structure arch_nl connect_iock_tiehi_input of PGL25G
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl25g_defs;
use pgl_funcs_connect_logic;
structure arch_nl connect_cramsl7206_input of PGL25G
{

    int rx, tx, ty;

    foreach ty({IOL_TILE_Y_U})
    {
        foreach tx(L_CRAMSL7206_TILES_X_U)
        {
            connect_cramsl7206_input(tx, ty, 0);
        }
    }

    foreach ty({IOL_TILE_Y_D})
    {
        foreach tx(L_CRAMSL7206_TILES_X_D)
        {
            int flag_ccs = (tx > 58) ? 1 : 0 ; 

            connect_cramsl7206_input(tx, ty, flag_ccs);
        }
    }    


};//end of structure arch_nl connect_cramsl7206_input of PGL25G
/***************************************************************************************
****************************************************************************************/


