*****************************************************************
********************************************************************************/
library work;
use pgl_defs, pgl100h_defs;
use pgl100h_funcs_logic;
structure arch_nl connect_SRB_input_v of PGL100H
{
    unsigned int l_srb_tile_y0[149:0] = {[1:15,17:31,32:46,48:62,63:77,79:93,94:108,110:124,125:139,141:155]};
    unsigned int l_srb_tile_y0_u[149:0] = {[155:141,139:125,124:110,108:94,93:79,77:63,62:48,46:32,31:17,15:1]};
    unsigned int l_srb_tile_y1[131:0] = {[10:15,17:31,32:46,48:62,63:77,79:93,94:108,110:124,125:139,141:146]};
    unsigned int l_srb_tile_y1_u[131:0] = {[146:141,139:125,124:110,108:94,93:79,77:63,62:48,46:32,31:17,15:10]};
    unsigned int l_srb_tile_y2[95:0] = {[10:15,17:31,32:46,48:62,63:77,79:93,94:108]};
    unsigned int l_srb_tile_y2_u[95:0] = {[108:94,93:79,77:63,62:48,46:32,31:17,15:10]};
    unsigned int l_srb_tile_y3[5:0] = {[141:146]};
    unsigned int l_srb_tile_y3_u[5:0] = {[146:141]};

    unsigned int tx,index ,flag_ud; 

    foreach tx(L_SRB_TILES_X)
    {
        foreach flag_ud({0,1})
        {
            int l_ty_0[149:0] = (flag_ud==1) ? l_srb_tile_y0_u : l_srb_tile_y0 ;
            int l_ty_1[131:0] = (flag_ud==1) ? l_srb_tile_y1_u : l_srb_tile_y1 ;
            int l_ty_2[95:0]  = (flag_ud==1) ? l_srb_tile_y2_u : l_srb_tile_y2 ;
            int l_ty_3[5:0]   = (flag_ud==1) ? l_srb_tile_y3_u : l_srb_tile_y3 ;

            if(!(tx>=HSST_TILE_D_L_X&&tx<HSST_TILE_D_R_X))  
            {
                if(tx!=BLSR_TILE_X_L && tx!=BLSR_TILE_X_R)
                {
                    foreach index ({[149:0]})
                    {
                        connect_SRB_input_v(tx, index,l_ty_0,l_ty_1,l_ty_2,l_ty_3,flag_ud,0,1);
                        connect_SRB_input_v(tx, index,l_ty_0,l_ty_1,l_ty_2,l_ty_3,flag_ud,0,2);
                        connect_SRB_input_v(tx, index,l_ty_0,l_ty_1,l_ty_2,l_ty_3,flag_ud,0,4);
                        connect_SRB_input_v(tx, index,l_ty_0,l_ty_1,l_ty_2,l_ty_3,flag_ud,0,8);
                    }
                    if(flag_ud==0)
                    {
                        foreach index ({[149:0]})
                        {
                           connect_SRB_input_v(tx, index,l_ty_0,l_ty_1,l_ty_2,l_ty_3,flag_ud,0,3);
                        }
                    }
                }
            }
            else if(tx>PCIE_TILE_L_X&&tx<PCIE_TILE_R_X)
            {

                foreach index ({[95:0]})
                {
                    connect_SRB_input_v(tx, index,l_ty_0,l_ty_1,l_ty_2,l_ty_3,flag_ud,2,1);
                    connect_SRB_input_v(tx, index,l_ty_0,l_ty_1,l_ty_2,l_ty_3,flag_ud,2,2);
                    connect_SRB_input_v(tx, index,l_ty_0,l_ty_1,l_ty_2,l_ty_3,flag_ud,2,4);
                    connect_SRB_input_v(tx, index,l_ty_0,l_ty_1,l_ty_2,l_ty_3,flag_ud,2,8);
                }
                foreach index ({[5:0]})
                {
                    connect_SRB_input_v(tx, index,l_ty_0,l_ty_1,l_ty_2,l_ty_3,flag_ud,3,1);
                    connect_SRB_input_v(tx, index,l_ty_0,l_ty_1,l_ty_2,l_ty_3,flag_ud,3,2);
                    connect_SRB_input_v(tx, index,l_ty_0,l_ty_1,l_ty_2,l_ty_3,flag_ud,3,4);
                }
                if(flag_ud==0)
                {
                    foreach index ({[95:0]})
                    {
                       connect_SRB_input_v(tx, index,l_ty_0,l_ty_1,l_ty_2,l_ty_3,flag_ud,2,3);
                    }
                    foreach index ({[5:0]})
                    {
                       connect_SRB_input_v(tx, index,l_ty_0,l_ty_1,l_ty_2,l_ty_3,flag_ud,3,3);
                    }
                }
                if(flag_ud==1)
                {
                    foreach index ({[5:0]})
                    {
                       connect_SRB_input_v(tx, index,l_ty_0,l_ty_1,l_ty_2,l_ty_3,flag_ud,3,8);
                    }
                }
            }
            else
            {
                foreach index ({[131:0]})
                {
                    connect_SRB_input_v(tx, index,l_ty_0,l_ty_1,l_ty_2,l_ty_3,flag_ud,1,1);
                    connect_SRB_input_v(tx, index,l_ty_0,l_ty_1,l_ty_2,l_ty_3,flag_ud,1,2);
                    connect_SRB_input_v(tx, index,l_ty_0,l_ty_1,l_ty_2,l_ty_3,flag_ud,1,4);
                    connect_SRB_input_v(tx, index,l_ty_0,l_ty_1,l_ty_2,l_ty_3,flag_ud,1,8);
                }
                if(flag_ud==0)
                {
                    foreach index ({[131:0]})
                    {
                       connect_SRB_input_v(tx, index,l_ty_0,l_ty_1,l_ty_2,l_ty_3,flag_ud,1,3);
                    }
                }
            }
        }
    }

};//end of structure arch_nl connect_SRB_input_v of PGL100H
/*******************************************************************************
**************************   New    *******************************************/
library work;
use pgl_defs, pgl100h_defs;
use pgl100h_funcs_logic;
structure arch_nl connect_SRB_input_h of PGL100H
{
    unsigned int l_srb_tile_y[149:0] = {[155:141,139:125,124:110,108:94,93:79,77:63,62:48,46:32,31:17,15:1]};
    unsigned int l_srb_tile_x0[27:0] = {[1:23],[25:29]};
    unsigned int l_srb_tile_x0_u[27:0] = {[29:25],[23:1]};
    unsigned int l_srb_tile_x1[32:0] = {[62:73],[75:95]};
    unsigned int l_srb_tile_x1_u[32:0] = {[95:75],[73:62]};
    unsigned int l_srb_tile_x2[87:0] = {[1:23,25:38,44:73,75:95]};
    unsigned int l_srb_tile_x2_u[87:0] = {[95:75,73:44,38:25,23:1]};
    unsigned int l_srb_tile_x3[92:0] = {[1:23,25:73,75:95]};
    unsigned int l_srb_tile_x3_u[92:0] = {[95:75,73:25,23:1]};

    int tx_hsst_l = HSST_TILE_D_L_X  ;        
    int ty_hsst_t = HSST_TILE_U_L_Y  ;     
    int tx_hsst_r = HSST_TILE_D_R_X  ;      
    int ty_hsst_b = HSST_TILE_D_R_Y  ;      
    int tx_pcie_l = PCIE_TILE_L_X    ;     
    int ty_pcie   = PCIE_TILE_L_Y    ;       
    int ty_pcie_u = PCIE_TILE_R_Y    ;       
    int tx_pcie_r = PCIE_TILE_R_X    ;         

    unsigned int flag_ud,index,index_y; 

    foreach flag_ud({[1:0]})
    {
        int l_x0[27:0] = (flag_ud==1) ? l_srb_tile_x0_u : l_srb_tile_x0 ;
        int l_x1[32:0] = (flag_ud==1) ? l_srb_tile_x1_u : l_srb_tile_x1 ;
        int l_x2[87:0] = (flag_ud==1) ? l_srb_tile_x2_u : l_srb_tile_x2 ;
        int l_x3[92:0] = (flag_ud==1) ? l_srb_tile_x3_u : l_srb_tile_x3 ;

        foreach index_y({[149:0]})
        {
            int flag_blank_d=(l_srb_tile_y[index_y]==1) ? 1 : 0 ;
            int flag_blank_u=(l_srb_tile_y[index_y]==NUM_TILES_REGION*5) ? 1 : 0 ; 

            if(l_srb_tile_y[index_y]>=ty_hsst_t || l_srb_tile_y[index_y]<ty_hsst_b)  
            {
                foreach index ({[27:0]})
                {
                   connect_SRB_input_h(index_y, index,l_srb_tile_y,l_x0,l_x1,l_x2,l_x3,tx_hsst_l,ty_hsst_t,tx_hsst_r,ty_hsst_b,tx_pcie_l,ty_pcie,ty_pcie_u,tx_pcie_r,0,flag_ud,1,flag_blank_d,flag_blank_u);
                   connect_SRB_input_h(index_y, index,l_srb_tile_y,l_x0,l_x1,l_x2,l_x3,tx_hsst_l,ty_hsst_t,tx_hsst_r,ty_hsst_b,tx_pcie_l,ty_pcie,ty_pcie_u,tx_pcie_r,0,flag_ud,2,flag_blank_d,flag_blank_u);
                   connect_SRB_input_h(index_y, index,l_srb_tile_y,l_x0,l_x1,l_x2,l_x3,tx_hsst_l,ty_hsst_t,tx_hsst_r,ty_hsst_b,tx_pcie_l,ty_pcie,ty_pcie_u,tx_pcie_r,0,flag_ud,4,flag_blank_d,flag_blank_u);
                   connect_SRB_input_h(index_y, index,l_srb_tile_y,l_x0,l_x1,l_x2,l_x3,tx_hsst_l,ty_hsst_t,tx_hsst_r,ty_hsst_b,tx_pcie_l,ty_pcie,ty_pcie_u,tx_pcie_r,0,flag_ud,8,flag_blank_d,flag_blank_u);
                }
                foreach index ({[32:0]})
                {
                   connect_SRB_input_h(index_y, index,l_srb_tile_y,l_x0,l_x1,l_x2,l_x3,tx_hsst_l,ty_hsst_t,tx_hsst_r,ty_hsst_b,tx_pcie_l,ty_pcie,ty_pcie_u,tx_pcie_r,1,flag_ud,1,flag_blank_d,flag_blank_u);
                   connect_SRB_input_h(index_y, index,l_srb_tile_y,l_x0,l_x1,l_x2,l_x3,tx_hsst_l,ty_hsst_t,tx_hsst_r,ty_hsst_b,tx_pcie_l,ty_pcie,ty_pcie_u,tx_pcie_r,1,flag_ud,2,flag_blank_d,flag_blank_u);
                   connect_SRB_input_h(index_y, index,l_srb_tile_y,l_x0,l_x1,l_x2,l_x3,tx_hsst_l,ty_hsst_t,tx_hsst_r,ty_hsst_b,tx_pcie_l,ty_pcie,ty_pcie_u,tx_pcie_r,1,flag_ud,4,flag_blank_d,flag_blank_u);
                   connect_SRB_input_h(index_y, index,l_srb_tile_y,l_x0,l_x1,l_x2,l_x3,tx_hsst_l,ty_hsst_t,tx_hsst_r,ty_hsst_b,tx_pcie_l,ty_pcie,ty_pcie_u,tx_pcie_r,1,flag_ud,8,flag_blank_d,flag_blank_u);
                }
            }
            else if(l_srb_tile_y[index_y]>=ty_pcie&&l_srb_tile_y[index_y]<ty_pcie_u)
            {
                foreach index ({[87:0]})
                {
                   connect_SRB_input_h(index_y, index,l_srb_tile_y,l_x0,l_x1,l_x2,l_x3,tx_hsst_l,ty_hsst_t,tx_hsst_r,ty_hsst_b,tx_pcie_l,ty_pcie,ty_pcie_u,tx_pcie_r,2,flag_ud,1,flag_blank_d,flag_blank_u);
                   connect_SRB_input_h(index_y, index,l_srb_tile_y,l_x0,l_x1,l_x2,l_x3,tx_hsst_l,ty_hsst_t,tx_hsst_r,ty_hsst_b,tx_pcie_l,ty_pcie,ty_pcie_u,tx_pcie_r,2,flag_ud,2,flag_blank_d,flag_blank_u);
                   connect_SRB_input_h(index_y, index,l_srb_tile_y,l_x0,l_x1,l_x2,l_x3,tx_hsst_l,ty_hsst_t,tx_hsst_r,ty_hsst_b,tx_pcie_l,ty_pcie,ty_pcie_u,tx_pcie_r,2,flag_ud,4,flag_blank_d,flag_blank_u);
                   connect_SRB_input_h(index_y, index,l_srb_tile_y,l_x0,l_x1,l_x2,l_x3,tx_hsst_l,ty_hsst_t,tx_hsst_r,ty_hsst_b,tx_pcie_l,ty_pcie,ty_pcie_u,tx_pcie_r,2,flag_ud,8,flag_blank_d,flag_blank_u);
                }
            }
            else
            {
                foreach index ({[92:0]})
                {
                   connect_SRB_input_h(index_y, index,l_srb_tile_y,l_x0,l_x1,l_x2,l_x3,tx_hsst_l,ty_hsst_t,tx_hsst_r,ty_hsst_b,tx_pcie_l,ty_pcie,ty_pcie_u,tx_pcie_r,3,flag_ud,1,flag_blank_d,flag_blank_u);
                   connect_SRB_input_h(index_y, index,l_srb_tile_y,l_x0,l_x1,l_x2,l_x3,tx_hsst_l,ty_hsst_t,tx_hsst_r,ty_hsst_b,tx_pcie_l,ty_pcie,ty_pcie_u,tx_pcie_r,3,flag_ud,2,flag_blank_d,flag_blank_u);
                   connect_SRB_input_h(index_y, index,l_srb_tile_y,l_x0,l_x1,l_x2,l_x3,tx_hsst_l,ty_hsst_t,tx_hsst_r,ty_hsst_b,tx_pcie_l,ty_pcie,ty_pcie_u,tx_pcie_r,3,flag_ud,4,flag_blank_d,flag_blank_u);
                   connect_SRB_input_h(index_y, index,l_srb_tile_y,l_x0,l_x1,l_x2,l_x3,tx_hsst_l,ty_hsst_t,tx_hsst_r,ty_hsst_b,tx_pcie_l,ty_pcie,ty_pcie_u,tx_pcie_r,3,flag_ud,8,flag_blank_d,flag_blank_u);
                }
            }
        }
    }
};//end of structure arch_nl connect_SRB_input_h of PGL100H
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl100h_defs,pgl100h_funcs_logic;

structure arch_nl connect_CLM_TILES of PGL100H
{
    unsigned int l_clm_tile_y0[147:0] = {[2:15,17:31,32:46,48:62,63:77,79:93,94:108,110:124,125:139,141:154]};
    unsigned int l_clm_tile_y0_u[147:0] = {[154:141,139:125,124:110,108:94,93:79,77:63,62:48,46:32,31:17,15:2]};
    unsigned int l_clm_tile_y1[129:0] = {[11:15,17:31,32:46,48:62,63:77,79:93,94:108,110:124,125:139,141:145]};
    unsigned int l_clm_tile_y1_u[129:0] = {[145:141,139:125,124:110,108:94,93:79,77:63,62:48,46:32,31:17,15:11]};
    unsigned int l_clm_tile_y2[94:0] = {[11:15,17:31,32:46,48:62,63:77,79:93,94:108]};
    unsigned int l_clm_tile_y2_u[94:0] = {[108:94,93:79,77:63,62:48,46:32,31:17,15:11]};
    unsigned int l_clm_tile_y3[91:0] = {[11:14,21:31,32:42,52:62,63:73,83:91,96:104,114:124,125:135,142:145]};
    unsigned int l_clm_tile_y3_u[91:0] = {[145:142,135:125,124:114,104:96,91:83,73:63,62:52,42:32,31:21,14:11]};
    unsigned int l_clm_tile_y4[145:0] = {[4:15,17:31,32:46,48:62,63:77,79:93,94:108,110:124,125:139,141:154]};
    unsigned int l_clm_tile_y4_u[145:0] = {[154:141,139:125,124:110,108:94,93:79,77:63,62:48,46:32,31:17,15:4]};
    unsigned int l_clm_tile_y5[4:0] = {[141:145]};
    unsigned int l_clm_tile_y5_u[4:0] = {[145:141]};

    unsigned int tx,index,flag_clms,tx_tmp,flag_ud; 

    string clm ;

    foreach flag_ud({[1:0]})
    {
        int l_y0[147:0] = (flag_ud==1) ? l_clm_tile_y0_u : l_clm_tile_y0 ;
        int l_y1[129:0] = (flag_ud==1) ? l_clm_tile_y1_u : l_clm_tile_y1 ;
        int l_y2[94:0]  = (flag_ud==1) ? l_clm_tile_y2_u : l_clm_tile_y2 ;
        int l_y3[91:0]  = (flag_ud==1) ? l_clm_tile_y3_u : l_clm_tile_y3 ;
        int l_y4[145:0] = (flag_ud==1) ? l_clm_tile_y4_u : l_clm_tile_y4 ;
        int l_y5[4:0]   = (flag_ud==1) ? l_clm_tile_y5_u : l_clm_tile_y5 ;

        foreach tx ( L_CLM_TILES_X )
        {
            flag_clms = 0;

            foreach tx_tmp (L_CLMS_TILES_X)
            {
                if(tx==tx_tmp)
                {
                    clm = "CLMS_TILE" ;

                    flag_clms = 1 ;

                    break ;
                }
            }

            if(flag_clms==0)
            {
                clm = "CLMA_TILE" ;
            }        

            if(!(tx>=HSST_TILE_D_L_X && tx<HSST_TILE_D_R_X))
            {
                foreach index ({[147:0]})
                {
                   connect_CLM_input(tx, index,l_y0,l_y1,l_y2,l_y3,l_y4,l_y5,clm,flag_ud,0);
                }
            }
            else if(tx>=PCIE_TILE_L_X && tx<=PCIE_TILE_R_X)
            {
                foreach index ({[94:0]})
                {
                   connect_CLM_input(tx, index,l_y0,l_y1,l_y2,l_y3,l_y4,l_y5,clm,flag_ud,2);
                }
                foreach index ({[4:0]})
                {
                   connect_CLM_input(tx, index,l_y0,l_y1,l_y2,l_y3,l_y4,l_y5,clm,flag_ud,5);
                }
            }
            else if(tx==PLL_TILE_X)
            {
                foreach index ({[91:0]})
                {
                   connect_CLM_input(tx, index,l_y0,l_y1,l_y2,l_y3,l_y4,l_y5,clm,flag_ud,3);
                }
            }
            else
            {
                foreach index ({[129:0]})
                {
                   connect_CLM_input(tx, index,l_y0,l_y1,l_y2,l_y3,l_y4,l_y5,clm,flag_ud,1);
                }
            }
        }
    }
};
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl100h_defs,pgl100h_funcs_logic;

structure arch_nl connect_APM_TILE of PGL100H
{
    unsigned int l_apm_tile_y0[49:0] = {1,4,7,10,13,17,20,23,26,29,32,35,38,41,44,48,51,54,57,60,63,66,69,72,75,79,82,85,88,91,94,97,100,103,106,110,113,116,119,122,125,128,131,134,137,141,144,147,150,153};
    unsigned int l_apm_tile_y0_u[49:0] = {153,150,147,144,141,137,134,131,128,125,122,119,116,113,110,106,103,100,97,94,91,88,85,82,79,75,72,69,66,63,60,57,54,51,48,44,41,38,35,32,29,26,23,20,17,13,10,7,4,1}; 
    unsigned int l_apm_tile_y1[43:0] = {10,13,17,20,23,26,29,32,35,38,41,44,48,51,54,57,60,63,66,69,72,75,79,82,85,88,91,94,97,100,103,106,110,113,116,119,122,125,128,131,134,137,141,144};
    unsigned int l_apm_tile_y1_u[43:0] = {144,141,137,134,131,128,125,122,119,116,113,110,106,103,100,97,94,91,88,85,82,79,75,72,69,66,63,60,57,54,51,48,44,41,38,35,32,29,26,23,20,17,13,10};

    int tx, index ;

    foreach tx ( L_APM_TILES_X )
    {
        if(tx>=HSST_TILE_D_L_X && tx<HSST_TILE_D_R_X)
        {
            foreach index ({[43:0]})
            {
               connect_APM_input(tx, index,l_apm_tile_y0_u,l_apm_tile_y1_u,1,1);
            }
            foreach index ({[43:0]})
            {
               connect_APM_input(tx, index,l_apm_tile_y0,l_apm_tile_y1,0,1);
            }
        }
        else
        {
            foreach index ({[49:0]})
            {
               connect_APM_input(tx, index,l_apm_tile_y0_u,l_apm_tile_y1_u,1,0);
            }
            foreach index ({[49:0]})
            {
               connect_APM_input(tx, index,l_apm_tile_y0,l_apm_tile_y1,0,0);
            }
        }
    }
};  // end of structure arch_nl connect_APM_TILE of PGL100H
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl100h_defs;
use pgl_funcs_connect_logic_100h;
structure arch_nl connect_iockgatedll_input of PGL100H
{

    int rx, tx, ty;

    foreach ty(L_IOCKGATEDLL_TILES_Y)
    {
        foreach tx(L_IOL_TILES_X_LR)
        {
            int flag_lr = (tx < PLL_TILE_X) ? 1 : 0 ; 
            int flag_connect = (flag_lr==0 && ty < NUM_TILES_REGION ) ? 1 : (flag_lr==0 && ty < 3 * NUM_TILES_REGION ) ? 2 : 0 ;

            int flag_chip = 1 ;

            int tx_wlsr1 = WLSR1B_TILE_X_R1;

            connect_iockgatedll_input(tx, ty, NUM_REGION, "IOCKGATEDLL_100H_TILE",flag_lr,flag_connect,tx_wlsr1,flag_chip);
        }
    }

};//end of structure arch_nl connect_iockgatedll_input of PGL100H

/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl100h_defs;
use pgl100h_funcs_logic,pgl_funcs_connect_logic_100h;
structure arch_nl connect_bias of PGL100H
{
    int tx_ud = IOB0_TILE_X ;
    int tx_l  = IOB_TILE_X_L ;
    int tx_r  = IOB_TILE_X_R ;
             
    int ty_u  = IOB_TILE_Y_U ; 
    int ty_d  = IOB_TILE_Y_D ;
    int ty_lr = IOB1_TILE_Y ;
    int ty_lr2= IOB5_TILE_Y ;

    connect_bias_iob_100h(tx_ud,tx_l,tx_r,ty_u,ty_d,ty_lr,ty_lr2, ANALOG_TILE_X, ANALOG_TILE_Y, 1,"ANALOG_PGL100H_TILE" );

    connect_bias_pll_100h(PLL_TILE_X, PLL0_TILE_Y, PLL1_TILE_Y,  ANALOG_TILE_X, ANALOG_TILE_Y, "ANALOG_PGL100H_TILE",1);

};//end of structure arch_nl connect_bias of PGL100H
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl100h_defs;
use pgl_funcs_connect_logic_100h ;
use pgl100h_funcs_logic ;
structure arch_nl connect_blsr_input of PGL100H
{

    connect_BLSR_input(BLSR_TILE_X_R,BLSR_TILE_X_L,CCS_TILE_X, CCS_TILE_Y,ANALOG_TILE_X, ANALOG_TILE_Y, PLL_TILE_X,IOB_TILE_X_R,IOB1_TILE_Y,"CCS_TILE", "BLSR1_TILE", "BLSR2_TILE", "ANALOG_PGL100H_TILE" );

    int rx ,tx , flag_ud, flag_lr ;

    string blsr2, blsr_d ;

    foreach rx(L_REGIONS)
    {
        flag_ud = (rx==0) ? 0 : (rx==NUM_REGION-1) ? 1 : 2 ;

        foreach tx(L_BLSR_TILES_X)
        {
            flag_lr = (tx==BLSR_TILE_X_L) ? 1 : 0 ;

            blsr2 = (rx==0&&tx==BLSR_TILE_X_R) ? "BLSR2_TILE" : "BLSR1_TILE" ;             
            blsr_d = (rx==1&&tx==BLSR_TILE_X_R) ? "BLSR2_TILE" : "BLSR1_TILE" ;             

            connect_BLSR_input_loop(rx, tx, BLSR_TILE_X_L,CCS_TILE_X, CCS_TILE_Y, "BLSR1_TILE", blsr2, blsr_d, flag_lr, flag_ud, 1);
        }
    }

};//end of structure arch_nl connect_blsr_input of PGL50H
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl100h_defs;
use pgl_funcs_connect_logic_100h;
structure arch_nl connect_ccs_input of PGL100H
{

    connect_ccs_input(CCS_TILE_X, CCS_TILE_Y , BLSR_TILE_X_R, 1, 0, IDCODE_TILE_X, IDCODE_TILE_Y, IOB2_TILE_X, IOB_TILE_Y_D, PLL_TILE_X, PLL1_TILE_Y, ANALOG_TILE_X, ANALOG_TILE_Y, "BLSR1_TILE", "BLSR2_TILE", "IOB2_TILE","IDCODE_PGL100H_TILE","ANALOG_PGL100H_TILE");

};//end of structure arch_nl connect_ccs_input of PGL100H
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl100h_defs;
use pgl_funcs_connect_logic_100h;
structure arch_nl connect_analog_input of PGL100H
{

    int rx, ty_pll_tmp, ty_pll, flag_once,flag_pll;

    foreach rx({[0:4]})
    {
        foreach ty_pll_tmp({PLL0_TILE_Y,PLL1_TILE_Y})
        {
            ty_pll = rx * NUM_TILES_REGION + ty_pll_tmp ;

            flag_once = (ty_pll==PLL1_TILE_Y) ? 1 : 0 ;

            string pll_ldo_i = (ty_pll == 0 * NUM_TILES_REGION + PLL1_TILE_Y) ? "PLL_LDO_I[0]" : 
                               (ty_pll == 1 * NUM_TILES_REGION + PLL0_TILE_Y) ? "PLL_LDO_I[1]" :
                               (ty_pll == 1 * NUM_TILES_REGION + PLL1_TILE_Y) ? "PLL_LDO_I[2]" :
                               (ty_pll == 2 * NUM_TILES_REGION + PLL0_TILE_Y) ? "PLL_LDO_I[3]" :
                               (ty_pll == 2 * NUM_TILES_REGION + PLL1_TILE_Y) ? "PLL_LDO_I[4]" :
                               (ty_pll == 3 * NUM_TILES_REGION + PLL0_TILE_Y) ? "PLL_LDO_I[5]" :
                               (ty_pll == 3 * NUM_TILES_REGION + PLL1_TILE_Y) ? "PLL_LDO_I[6]" : "PLL_LDO_I[7]" ;

            flag_pll = (ty_pll > 4 * NUM_TILES_REGION + MID_TILE_REGION || ty_pll < MID_TILE_REGION) ? 2 : 1 ;

            connect_analog_input(ANALOG_TILE_X, ANALOG_TILE_Y, PLL_TILE_X, ty_pll, CCS_TILE_X, CCS_TILE_Y,IOB2_TILE_X, IOB_TILE_Y_D, "ANALOG_PGL100H_TILE","CCS_TILE","IOB2_TILE",pll_ldo_i,flag_pll,flag_once);

        }
    }

};//end of structure arch_nl connect_analog_input of PGL100H
///***************************************************************************************
//****************************************************************************************/
//library work;
//use pgl_defs,pgl100h_defs,pgl_funcs_connect_logic;
//
//structure arch_nl connect_vdd11_gclk of PGL100H
//{
//    unsigned int tx,ty,ty_blsr,tx_blsr,tx_tmp;
//    string blsr, wlsr;
//
//    foreach tx ( {L_WLS_TILES_X,L_IOL_TILES_X_LR} )
//    {
//        wlsr = "WLSR_TILE" ;
//
//        foreach tx_tmp(L_WLSR1_TILES_X)
//        {
//            if(tx==tx_tmp)
//            {
//                wlsr = "WLSR1_TILE" ;
//                break ;
//            }
//        }
//        foreach tx_tmp(L_WLSR1B_TILES_X)
//        {
//            if(tx==tx_tmp)
//            {
//                wlsr = "WLSR1_100H_TILE" ;
//                break ;
//            }
//        }
//        foreach tx_tmp({PLL_TILE_X})
//        {
//            if(tx==tx_tmp)
//            {
//                wlsr = "WLSR2_TILE" ;
//                break ;
//            }
//        }
//        foreach tx_tmp(L_APM_TILES_X)
//        {
//            if(tx==tx_tmp)
//            {
//                wlsr = "WLSRA_TILE" ;
//                break ;
//            }
//        }
//        foreach tx_tmp(L_DRM_TILES_X)
//        {
//            if(tx==tx_tmp)
//            {
//                wlsr = "WLSRD_TILE" ;
//                break ;
//            }
//        }
//        foreach tx_tmp(L_IOL_TILES_X_LR)
//        {
//            if(tx==tx_tmp)
//            {
//                wlsr = "IOCKGATEDLL_100H_TILE" ;
//                break ;
//            }
//        }
//
//        foreach ty_blsr ( L_BLSR_TILES_Y )
//        {
//
//            ty = (wlsr=="IOCKGATEDLL_100H_TILE") ? MID_TILE_REGION + ty_blsr * NUM_TILES_REGION - 1 : MID_TILE_REGION + ty_blsr * NUM_TILES_REGION ;
//
//            tx_blsr = (tx<=PLL_TILE_X) ? BLSR_TILE_X_L : BLSR_TILE_X_R;
//
//            blsr = (tx > PLL_TILE_X&&ty_blsr==0) ? "BLSR2_TILE" : "BLSR1_TILE" ;
//
//            connect_vdd11_gclk( tx, ty, tx_blsr,ty_blsr, wlsr, blsr, "TIEL2");
//        }
//    }    
//
//    foreach ty ( {USCM0_TILE_LOC_Y,USCM1_TILE_LOC_Y} )
//    {
//            tx_blsr = BLSR_TILE_X_L ;
//
//            ty_blsr = (ty==USCM0_TILE_LOC_Y) ? 2 : 3 ;
//
//            blsr =  "BLSR1_TILE" ;
//
//            connect_vdd11_gclk( BLSR_TILE_X_L, ty, tx_blsr,ty_blsr, "USCM_TILE", blsr, "TIEL2");
//    }
//
//};  // end of structure arch_nl connect_vdd11_gclk of PGL100H
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl100h_defs;
use pgl_funcs_connect_logic;
use pgl_funcs_connect_logic_100h;
structure arch_nl connect_tiehi of PGL100H
{

    int rx, tx ,rx_con,flag_lr,ty,ty_cramsl2;

    rx_con=2 ;

    foreach rx({L_REGIONS})
    {
        foreach tx(L_WLSR1_TILES_X)
        {
            connect_wlsr1_tiehi_input(tx, rx, "WLSR1_TILE");
        }
        foreach tx(L_WLSR1B_TILES_X)
        {
            connect_wlsr1_tiehi_input(tx, rx, "WLSR1_100H_TILE");
        }
        foreach tx({BLSR_TILE_X_L,BLSR_TILE_X_R})
        {
            string blsr = (rx == 0&&tx == BLSR_TILE_X_R) ? "BLSR2_TILE" : "BLSR1_TILE" ;

            flag_lr = (tx<PLL_TILE_X) ? 1 :0 ;
            
            connect_blsr_tiehi_input_100h(tx, rx, rx_con, blsr, flag_lr );
        }
    }

    foreach tx({IOL_TILE_X_L})
    {
        foreach ty(L_CRAMSL2_TILES_Y_L)
        {
            connect_cramsl2_tiehi_input(tx, ty, "CRAMSL2_TILE");
        }
    }
    foreach tx({IOL_TILE_X_R})
    {
        foreach ty(L_CRAMSL2_TILES_Y_R)
        {
            if(!(ty==8&&tx==IOL_TILE_X_R))
            {
                connect_cramsl2_tiehi_input(tx, ty, "CRAMSL2_TILE");
            }
        }
    }
    foreach tx(L_IOL_TILES_X_LR)
    {
        foreach ty(L_RLYBUFS5_TILES_Y)
        {
            connect_cramsl2_tiehi_input(tx, ty, "RLYBUFS7_TILE");
        }
    }
    foreach tx(L_IOL_TILES_X_LR)
    {
        foreach ty(L_RLYBUFS8_TILES_Y)
        {
            connect_cramsl2_tiehi_input(tx, ty, "RLYBUFS8_TILE");
        }
    }
    
};//end of structure arch_nl connect_analog_input of PGL100H
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl100h_defs;
use pgl_funcs_connect_logic;
structure arch_nl connect_iol_input of PGL100H
{

    int tx,ty ;

    foreach tx({IOL_TILE_X_L})
    {
        foreach ty(L_IOL_TILES_Y_L)
        {
            if(!(ty==8&&tx==IOL_TILE_X_R))
            {
                connect_iol_input(tx, ty, "IOL_TILE");
            }
        }
    }
    foreach tx({IOL_TILE_X_R})
    {
        foreach ty(L_IOL_TILES_Y_R)
        {
            if(!(ty==8&&tx==IOL_TILE_X_R))
            {
                connect_iol_input(tx, ty, "IOL_TILE");
            }
        }
    }

};//end of structure arch_nl connect_iol_input of PGL100H
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl100h_defs;
use pgl_funcs_connect_logic;
structure arch_nl connect_cramsl7206_input of PGL100H
{

    int rx, tx, ty;

    foreach ty({IOL_TILE_Y_U})
    {
        foreach tx({CRAMSL7206_TILE_X})
        {
            connect_cramsl7206_input(tx, ty, 0);
        }
    }

    foreach ty({IOL_TILE_Y_D})
    {
        foreach tx({CRAMSL7206_TILE_X})
        {
            int flag_ccs = 0 ; 

            connect_cramsl7206_input(tx, ty, flag_ccs);
        }
    }    
};//end of structure arch_nl connect_cramsl7206_input of PGL100H
/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl100h_defs;
use pgl_funcs_connect_logic_100h;
structure arch_nl connect_analog_output of PGL100H
{

    int rx, tx, tx_tmp;

    string wlsr ;

    foreach rx(L_REGIONS)
    {
        foreach tx ( {L_WLS_TILES_X,L_IOL_TILES_X_LR} )
        {
            wlsr = "WLSR_TILE" ;

            foreach tx_tmp(L_WLSR1_TILES_X)
            {
                if(tx==tx_tmp)
                {
                    wlsr = "WLSR1_TILE" ;
                    break ;
                }
            }
            foreach tx_tmp(L_WLSR1B_TILES_X)
            {
                if(tx==tx_tmp)
                {
                    wlsr = "WLSR1_100H_TILE" ;
                    break ;
                }
            }
            foreach tx_tmp({PLL_TILE_X})
            {
                if(tx==tx_tmp)
                {
                    wlsr = "WLSR2_TILE" ;
                    break ;
                }
            }
            foreach tx_tmp(L_APM_TILES_X)
            {
                if(tx==tx_tmp)
                {
                    wlsr = "WLSRA_TILE" ;
                    break ;
                }
            }
            foreach tx_tmp(L_DRM_TILES_X)
            {
                if(tx==tx_tmp)
                {
                    wlsr = "WLSRD_TILE" ;
                    break ;
                }
            }
            foreach tx_tmp(L_IOL_TILES_X_LR)
            {
                if(tx==tx_tmp)
                {
                    wlsr = "IOCKGATEDLL_100H_TILE" ;
                    break ;
                }
            }

            int flag_iock = (wlsr == "IOCKGATEDLL_100H_TILE") ? 1 : 0 ;

            int flag_ccs = (tx > PLL_TILE_X&&rx>2 ) ? 1 : 0 ;

            string analog = (flag_ccs == 1) ? "CCS_TILE" : "ANALOG_PGL100H_TILE" ;

            int tx_ana = (flag_ccs == 1) ? CCS_TILE_X : ANALOG_TILE_X ;
            int ty_ana = (flag_ccs == 1) ? CCS_TILE_Y : ANALOG_TILE_Y ;

            string ngb = (tx>PLL_TILE_X&&rx<3) ? "NGB_LDORD" : 
                         (tx>PLL_TILE_X) ? "NGB_LDORU" : 
                         (tx<=PLL_TILE_X&&rx<3) ? "NGB_LDOLD" : "NGB_LDOLU" ;

            connect_analog_output(tx, rx, tx_ana,ty_ana,analog,wlsr,ngb,flag_iock,flag_ccs);
        }
    }

};//end of structure arch_nl connect_analog_input of PGL100H

/***************************************************************************************
****************************************************************************************/
library work;
use pgl_defs,pgl100h_defs;
use pgl100h_funcs_logic;
structure arch_nl connect_iob_tiehi of PGL100H
{
    connect_iob_tiehi(IOB_TILE_X_L,IOB3_TILE_Y,"IOB3_TILE") ;
    connect_iob_tiehi(IOB_TILE_X_L,IOB4_TILE_Y,"IOB4_TILE") ;

};//end of structure arch_nl connect_iob3_input of PGL100H


