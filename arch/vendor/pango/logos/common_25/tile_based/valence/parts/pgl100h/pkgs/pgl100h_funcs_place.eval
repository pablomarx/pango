use pgl_defs;
use pgl_IOB1_SRB_inc,pgl_IOB3_SRB_inc,pgl_IOB4_SRB_inc,pgl_IOB5_SRB_inc ;

package pgl100h_funcs_place
{
/******************************************************************
********************************************************************/
function place_iob0_tile(unsigned int tx,ty)
{  
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;

    sprintf(strVar,"ntCLOCK_DR_BUF1_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_BUF1 = wire *strVar;

    sprintf(strVar,"ntCLOCK_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_O = wire *strVar;

    sprintf(strVar,"ntS11_PAD_STATE_O_L_%d_%d",sx,sy);
    &wire ntRef_ntS11_PAD_STATE_O_L = wire *strVar;

    sprintf(strVar,"ntS11_PAD_STATE_O_R_%d_%d",sx,sy);
    &wire ntRef_ntS11_PAD_STATE_O_R = wire *strVar;

    sprintf(strVar,"ntBSMODE1_BUF2_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE1_BUF2 = wire *strVar;

    sprintf(strVar,"ntSHIFT_DR_BUF2_%d_%d",sx,sy);
    &wire ntRef_ntSHIFT_DR_BUF2 = wire *strVar;

    sprintf(strVar,"ntUPDATE_DR_BUF2_%d_%d",sx,sy);
    &wire ntRef_ntUPDATE_DR_BUF2 = wire *strVar;

    sprintf(strVar,"ntS11_BSRRST_BUF2_%d_%d",sx,sy);
    &wire ntRef_ntS11_BSRRST_BUF2 = wire *strVar;

    sprintf(strVar,"ntSO_%d_%d",sx,sy);
    &wire ntRef_ntSO[91:0] = wire *strVar[91:0];

    sprintf(strVar,"ntS11_DIN_MIPI_LP_%d_%d",sx,sy);
    &wire ntRef_ntS11_DIN_MIPI_LP[45:0] = wire *strVar[45:0];

    sprintf(strVar,"ntS11_TIHI_%d_%d",sx,sy);
    &wire ntRef_ntS11_TIHI[91:0] = wire *strVar[91:0];

    sprintf(strVar,"ntDIN_%d_%d",sx,sy);
    &wire ntRef_ntDIN[91:0] = wire *strVar[91:0];

    sprintf(strVar,"ntS11_TILO_%d_%d",sx,sy);
    &wire ntRef_ntS11_TILO[91:0] = wire *strVar[91:0];

    sprintf(strVar, "IOB0_TILE_%d_%d", sx, sy);
    device IOB0_TILE *strVar
         port map (
        CLOCK_DR_BUF1        =>    ntRef_ntCLOCK_DR_BUF1,       
        CLOCK_DR_O           =>    ntRef_ntCLOCK_DR_O,          
        S11_PAD_STATE_O_L    =>    ntRef_ntS11_PAD_STATE_O_L,   
        S11_PAD_STATE_O_R    =>    ntRef_ntS11_PAD_STATE_O_R,   
        BSMODE1_BUF2         =>    ntRef_ntBSMODE1_BUF2,        
        SHIFT_DR_BUF2        =>    ntRef_ntSHIFT_DR_BUF2,       
        UPDATE_DR_BUF2       =>    ntRef_ntUPDATE_DR_BUF2,      
        S11_BSRRST_BUF2      =>    ntRef_ntS11_BSRRST_BUF2,     
        SO                   =>    ntRef_ntSO,                  
        S11_DIN_MIPI_LP      =>    ntRef_ntS11_DIN_MIPI_LP,     
        S11_TIHI             =>    ntRef_ntS11_TIHI,            
        DIN                  =>    ntRef_ntDIN,                 
        S11_TILO             =>    ntRef_ntS11_TILO
                   )
        @([sx,sy]);

}//end of function place_iob0_tile
/******************************************************************
********************************************************************/
function place_iob1_tile(unsigned int tx,ty)
{  
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;

    sprintf(strVar,"ntBSMODE1_O_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE1_O = wire *strVar;

    sprintf(strVar,"ntBSMODE2_O_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE2_O = wire *strVar;

    sprintf(strVar,"ntBSMODE3_O_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE3_O = wire *strVar;

    sprintf(strVar,"ntCLK_XTAL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_XTAL = wire *strVar;

    sprintf(strVar,"ntCLOCK_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_O = wire *strVar;

    sprintf(strVar,"ntGOUTEN_O_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_O = wire *strVar;

    sprintf(strVar,"ntPOR_N_O_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_O = wire *strVar;

    sprintf(strVar,"ntS11_BSRRST_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_BSRRST_O = wire *strVar;

    sprintf(strVar,"ntS11_PAD_STATE_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_PAD_STATE_O = wire *strVar;

    sprintf(strVar,"ntSHIFT_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntSHIFT_DR_O = wire *strVar;

    sprintf(strVar,"ntUPDATE_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntUPDATE_DR_O = wire *strVar;

    sprintf(strVar,"ntADDR0_%d_%d",sx,sy);
    &wire ntRef_ntADDR0[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntADDR2_%d_%d",sx,sy);
    &wire ntRef_ntADDR2[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntS11_TILO_%d_%d",sx,sy);
    &wire ntRef_ntS11_TILO[93:0] = wire *strVar[93:0];

    sprintf(strVar,"ntADDR1_%d_%d",sx,sy);
    &wire ntRef_ntADDR1[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT[2:0] = wire *strVar[2:0];

    sprintf(strVar,"ntS11_TIHI_%d_%d",sx,sy);
    &wire ntRef_ntS11_TIHI[93:0] = wire *strVar[93:0];

    sprintf(strVar,"ntGATE_FROM_LOOP_%d_%d",sx,sy);
    &wire ntRef_ntGATE_FROM_LOOP[6:0] = wire *strVar[6:0];

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT[2:0] = wire *strVar[2:0];

    sprintf(strVar,"ntDIN_%d_%d",sx,sy);
    &wire ntRef_ntDIN[93:0] = wire *strVar[93:0];

    sprintf(strVar,"ntSO_%d_%d",sx,sy);
    &wire ntRef_ntSO[93:0] = wire *strVar[93:0];

    sprintf(strVar,"ntREGION_INC_%d_%d",sx,sy);
    &wire ntRef_ntREGION_INC[2:0] = wire *strVar[2:0];

    sprintf(strVar,"ntDQS_O_%d_%d",sx,sy);
    &wire ntRef_ntDQS_O[7:1] = wire *strVar[7:1];


    sprintf(strVar, "IOB1_TILE_%d_%d", sx, sy);
    device IOB1_TILE *strVar
         port map (
        BSMODE1_O          =>    ntRef_ntBSMODE1_O,         
        BSMODE2_O          =>    ntRef_ntBSMODE2_O,         
        BSMODE3_O          =>    ntRef_ntBSMODE3_O,         
        CLK_XTAL           =>    ntRef_ntCLK_XTAL,          
        CLOCK_DR_O         =>    ntRef_ntCLOCK_DR_O,        
        GOUTEN_O           =>    ntRef_ntGOUTEN_O,          
        POR_N_O            =>    ntRef_ntPOR_N_O,           
        S11_BSRRST_O       =>    ntRef_ntS11_BSRRST_O,      
        S11_PAD_STATE_O    =>    ntRef_ntS11_PAD_STATE_O,   
        SHIFT_DR_O         =>    ntRef_ntSHIFT_DR_O,        
        UPDATE_DR_O        =>    ntRef_ntUPDATE_DR_O,       
        ADDR0              =>    ntRef_ntADDR0,             
        ADDR2              =>    ntRef_ntADDR2,             
        S11_TILO           =>    ntRef_ntS11_TILO,          
        ADDR1              =>    ntRef_ntADDR1,             
        COL_INC_OUT        =>    ntRef_ntCOL_INC_OUT,       
        S11_TIHI           =>    ntRef_ntS11_TIHI,          
        GATE_FROM_LOOP     =>    ntRef_ntGATE_FROM_LOOP,    
        CS_OUT             =>    ntRef_ntCS_OUT,            
        DIN                =>    ntRef_ntDIN,               
        SO                 =>    ntRef_ntSO,                
        REGION_INC         =>    ntRef_ntREGION_INC,        
        DQS_O              =>    ntRef_ntDQS_O
                   )
        @([sx,sy]);


      STRUCT inc_spec_IOB1 incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_srb,ty_srb,sx_srb;

      foreach incVar(inc_IOB1_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          sy_srb = sy + loc_SRB*NUM_GRID_Y; 

          sx_srb =  sx - NUM_GRID_X ; 

          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device IOB1_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> =>  <wire *pin_logic_device of <device IOB1_TILE @[sx,sy]>>); 
          }
      }         

}//end of function place_iob0_tile
/******************************************************************
********************************************************************/
function place_iob2_tile(unsigned int tx,ty)
{  
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;

    sprintf(strVar,"ntBSMODE1_O_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE1_O = wire *strVar;

    sprintf(strVar,"ntBSMODE2_O_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE2_O = wire *strVar;

    sprintf(strVar,"ntBSMODE3_O_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE3_O = wire *strVar;

    sprintf(strVar,"ntCLOCK_DR_BUF1_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_BUF1 = wire *strVar;

    sprintf(strVar,"ntCLOCK_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_O = wire *strVar;

    sprintf(strVar,"ntDIN_RST_N_%d_%d",sx,sy);
    &wire ntRef_ntDIN_RST_N = wire *strVar;

    sprintf(strVar,"ntDONE_I_%d_%d",sx,sy);
    &wire ntRef_ntDONE_I = wire *strVar;

    sprintf(strVar,"ntGOUTEN_O_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_O = wire *strVar;

    sprintf(strVar,"ntPOR_N_O_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_O = wire *strVar;

    sprintf(strVar,"ntS11_BSRRST_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_BSRRST_O = wire *strVar;

    sprintf(strVar,"ntSHIFT_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntSHIFT_DR_O = wire *strVar;

    sprintf(strVar,"ntUPDATE_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntUPDATE_DR_O = wire *strVar;

    sprintf(strVar,"ntBSMODE1_BUF2_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE1_BUF2 = wire *strVar;

    sprintf(strVar,"ntSHIFT_DR_BUF2_%d_%d",sx,sy);
    &wire ntRef_ntSHIFT_DR_BUF2 = wire *strVar;

    sprintf(strVar,"ntUPDATE_DR_BUF2_%d_%d",sx,sy);
    &wire ntRef_ntUPDATE_DR_BUF2 = wire *strVar;

    sprintf(strVar,"ntS11_BSRRST_BUF2_%d_%d",sx,sy);
    &wire ntRef_ntS11_BSRRST_BUF2 = wire *strVar;

    sprintf(strVar,"ntSO_%d_%d",sx,sy);
    &wire ntRef_ntSO[91:0] = wire *strVar[91:0];

    sprintf(strVar,"ntS11_DIN_MIPI_LP_%d_%d",sx,sy);
    &wire ntRef_ntS11_DIN_MIPI_LP[45:0] = wire *strVar[45:0];

    sprintf(strVar,"ntDIN_%d_%d",sx,sy);
    &wire ntRef_ntDIN[91:0] = wire *strVar[91:0];

    sprintf(strVar,"ntS11_TILO_%d_%d",sx,sy);
    &wire ntRef_ntS11_TILO[91:0] = wire *strVar[91:0];

    sprintf(strVar,"ntSO_CFG_%d_%d",sx,sy);
    &wire ntRef_ntSO_CFG[2:0] = wire *strVar[2:0];

    sprintf(strVar,"ntS11_CCS_DIN_%d_%d",sx,sy);
    &wire ntRef_ntS11_CCS_DIN[91:0] = wire *strVar[91:0];

    sprintf(strVar,"ntS11_TIHI_%d_%d",sx,sy);
    &wire ntRef_ntS11_TIHI[91:0] = wire *strVar[91:0];

    sprintf(strVar, "IOB2_TILE_%d_%d", sx, sy);
    device IOB2_TILE *strVar
         port map (
        BSMODE1_O          =>    ntRef_ntBSMODE1_O,         
        BSMODE2_O          =>    ntRef_ntBSMODE2_O,         
        BSMODE3_O          =>    ntRef_ntBSMODE3_O,         
        CLOCK_DR_BUF1      =>    ntRef_ntCLOCK_DR_BUF1,     
        CLOCK_DR_O         =>    ntRef_ntCLOCK_DR_O,        
        DIN_RST_N          =>    ntRef_ntDIN_RST_N,         
        DONE_I             =>    ntRef_ntDONE_I,            
        GOUTEN_O           =>    ntRef_ntGOUTEN_O,          
        POR_N_O            =>    ntRef_ntPOR_N_O,           
        S11_BSRRST_O       =>    ntRef_ntS11_BSRRST_O,      
        SHIFT_DR_O         =>    ntRef_ntSHIFT_DR_O,        
        UPDATE_DR_O        =>    ntRef_ntUPDATE_DR_O,       
        BSMODE1_BUF2       =>    ntRef_ntBSMODE1_BUF2,      
        SHIFT_DR_BUF2      =>    ntRef_ntSHIFT_DR_BUF2,     
        UPDATE_DR_BUF2     =>    ntRef_ntUPDATE_DR_BUF2,    
        S11_BSRRST_BUF2    =>    ntRef_ntS11_BSRRST_BUF2,   
        SO                 =>    ntRef_ntSO,                
        S11_DIN_MIPI_LP    =>    ntRef_ntS11_DIN_MIPI_LP,   
        DIN                =>    ntRef_ntDIN,               
        S11_TILO           =>    ntRef_ntS11_TILO,          
        SO_CFG             =>    ntRef_ntSO_CFG,            
        S11_CCS_DIN        =>    ntRef_ntS11_CCS_DIN,       
        S11_TIHI           =>    ntRef_ntS11_TIHI
                   )
        @([sx,sy]);

}//end of function place_iob0_tile
/******************************************************************
********************************************************************/
function place_iob3_tile(unsigned int tx,ty)
{  
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;

    sprintf(strVar,"ntBSMODE1_O_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE1_O = wire *strVar;

    sprintf(strVar,"ntBSMODE2_O_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE2_O = wire *strVar;

    sprintf(strVar,"ntBSMODE3_O_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE3_O = wire *strVar;

    sprintf(strVar,"ntCLK_XTAL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_XTAL = wire *strVar;

    sprintf(strVar,"ntCLOCK_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_O = wire *strVar;

    sprintf(strVar,"ntGOUTEN_O_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_O = wire *strVar;

    sprintf(strVar,"ntPOR_N_O_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_O = wire *strVar;

    sprintf(strVar,"ntS11_BSRRST_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_BSRRST_O = wire *strVar;

    sprintf(strVar,"ntS11_PAD_STATE_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_PAD_STATE_O = wire *strVar;

    sprintf(strVar,"ntSHIFT_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntSHIFT_DR_O = wire *strVar;

    sprintf(strVar,"ntUPDATE_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntUPDATE_DR_O = wire *strVar;

    sprintf(strVar,"ntADDR2_%d_%d",sx,sy);
    &wire ntRef_ntADDR2[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntADDR1_%d_%d",sx,sy);
    &wire ntRef_ntADDR1[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntS11_TILO_%d_%d",sx,sy);
    &wire ntRef_ntS11_TILO[113:0] = wire *strVar[113:0];

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT[2:0] = wire *strVar[2:0];

    sprintf(strVar,"ntADDR0_%d_%d",sx,sy);
    &wire ntRef_ntADDR0[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntSO_%d_%d",sx,sy);
    &wire ntRef_ntSO[113:0] = wire *strVar[113:0];

    sprintf(strVar,"ntS11_TIHI_%d_%d",sx,sy);
    &wire ntRef_ntS11_TIHI[113:0] = wire *strVar[113:0];

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT[2:0] = wire *strVar[2:0];

    sprintf(strVar,"ntDQS_O_%d_%d",sx,sy);
    &wire ntRef_ntDQS_O[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntDIN_%d_%d",sx,sy);
    &wire ntRef_ntDIN[113:0] = wire *strVar[113:0];

    sprintf(strVar,"ntREGION_INC_%d_%d",sx,sy);
    &wire ntRef_ntREGION_INC[2:0] = wire *strVar[2:0];

    sprintf(strVar,"ntGATE_FROM_LOOP_%d_%d",sx,sy);
    &wire ntRef_ntGATE_FROM_LOOP[7:0] = wire *strVar[7:0];

    sprintf(strVar, "IOB3_TILE_%d_%d", sx, sy);
    device IOB3_TILE *strVar
         port map (
        BSMODE1_O          =>    ntRef_ntBSMODE1_O,         
        BSMODE2_O          =>    ntRef_ntBSMODE2_O,         
        BSMODE3_O          =>    ntRef_ntBSMODE3_O,         
        CLK_XTAL           =>    ntRef_ntCLK_XTAL,          
        CLOCK_DR_O         =>    ntRef_ntCLOCK_DR_O,        
        GOUTEN_O           =>    ntRef_ntGOUTEN_O,          
        POR_N_O            =>    ntRef_ntPOR_N_O,           
        S11_BSRRST_O       =>    ntRef_ntS11_BSRRST_O,      
        S11_PAD_STATE_O    =>    ntRef_ntS11_PAD_STATE_O,   
        SHIFT_DR_O         =>    ntRef_ntSHIFT_DR_O,        
        UPDATE_DR_O        =>    ntRef_ntUPDATE_DR_O,       
        ADDR2              =>    ntRef_ntADDR2,             
        ADDR1              =>    ntRef_ntADDR1,             
        S11_TILO           =>    ntRef_ntS11_TILO,          
        COL_INC_OUT        =>    ntRef_ntCOL_INC_OUT,       
        ADDR0              =>    ntRef_ntADDR0,             
        SO                 =>    ntRef_ntSO,                
        S11_TIHI           =>    ntRef_ntS11_TIHI,          
        CS_OUT             =>    ntRef_ntCS_OUT,            
        DQS_O              =>    ntRef_ntDQS_O,             
        DIN                =>    ntRef_ntDIN,               
        REGION_INC         =>    ntRef_ntREGION_INC,        
        GATE_FROM_LOOP     =>    ntRef_ntGATE_FROM_LOOP
                   )
        @([sx,sy]);

// SRB CON

      STRUCT inc_spec_IOB3 incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_srb,ty_srb,sx_srb;

      foreach incVar(inc_IOB3_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          sy_srb = sy + loc_SRB*NUM_GRID_Y; 

          sx_srb =  sx + NUM_GRID_X ; 

          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device IOB3_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> =>  <wire *pin_logic_device of <device IOB3_TILE @[sx,sy]>>); 
          }
      }

}//end of function place_iob0_tile
/******************************************************************
********************************************************************/
function place_iob4_tile(unsigned int tx,ty)
{  
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;

    sprintf(strVar,"ntBSMODE1_O_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE1_O = wire *strVar;

    sprintf(strVar,"ntBSMODE2_O_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE2_O = wire *strVar;

    sprintf(strVar,"ntBSMODE3_O_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE3_O = wire *strVar;

    sprintf(strVar,"ntCLK_XTAL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_XTAL = wire *strVar;

    sprintf(strVar,"ntCLOCK_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_O = wire *strVar;

    sprintf(strVar,"ntGOUTEN_O_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_O = wire *strVar;

    sprintf(strVar,"ntPOR_N_O_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_O = wire *strVar;

    sprintf(strVar,"ntS11_BSRRST_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_BSRRST_O = wire *strVar;

    sprintf(strVar,"ntS11_PAD_STATE_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_PAD_STATE_O = wire *strVar;

    sprintf(strVar,"ntSHIFT_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntSHIFT_DR_O = wire *strVar;

    sprintf(strVar,"ntUPDATE_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntUPDATE_DR_O = wire *strVar;

    sprintf(strVar,"ntADDR0_%d_%d",sx,sy);
    &wire ntRef_ntADDR0[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntSO_%d_%d",sx,sy);
    &wire ntRef_ntSO[51:0] = wire *strVar[51:0];

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntDQS_O_%d_%d",sx,sy);
    &wire ntRef_ntDQS_O[4:1] = wire *strVar[4:1];

    sprintf(strVar,"ntGATE_FROM_LOOP_%d_%d",sx,sy);
    &wire ntRef_ntGATE_FROM_LOOP[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntADDR1_%d_%d",sx,sy);
    &wire ntRef_ntADDR1[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntS11_TIHI_%d_%d",sx,sy);
    &wire ntRef_ntS11_TIHI[51:0] = wire *strVar[51:0];

    sprintf(strVar,"ntREGION_INC_%d_%d",sx,sy);
    &wire ntRef_ntREGION_INC[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntS11_TILO_%d_%d",sx,sy);
    &wire ntRef_ntS11_TILO[51:0] = wire *strVar[51:0];

    sprintf(strVar,"ntDIN_%d_%d",sx,sy);
    &wire ntRef_ntDIN[51:0] = wire *strVar[51:0];

    sprintf(strVar, "IOB4_TILE_%d_%d", sx, sy);
    device IOB4_TILE *strVar
         port map (
        BSMODE1_O          =>    ntRef_ntBSMODE1_O,         
        BSMODE2_O          =>    ntRef_ntBSMODE2_O,         
        BSMODE3_O          =>    ntRef_ntBSMODE3_O,         
        CLK_XTAL           =>    ntRef_ntCLK_XTAL,          
        CLOCK_DR_O         =>    ntRef_ntCLOCK_DR_O,        
        GOUTEN_O           =>    ntRef_ntGOUTEN_O,          
        POR_N_O            =>    ntRef_ntPOR_N_O,           
        S11_BSRRST_O       =>    ntRef_ntS11_BSRRST_O,      
        S11_PAD_STATE_O    =>    ntRef_ntS11_PAD_STATE_O,   
        SHIFT_DR_O         =>    ntRef_ntSHIFT_DR_O,        
        UPDATE_DR_O        =>    ntRef_ntUPDATE_DR_O,       
        ADDR0              =>    ntRef_ntADDR0,             
        COL_INC_OUT        =>    ntRef_ntCOL_INC_OUT,       
        SO                 =>    ntRef_ntSO,                
        CS_OUT             =>    ntRef_ntCS_OUT,            
        DQS_O              =>    ntRef_ntDQS_O,             
        GATE_FROM_LOOP     =>    ntRef_ntGATE_FROM_LOOP,    
        ADDR1              =>    ntRef_ntADDR1,             
        S11_TIHI           =>    ntRef_ntS11_TIHI,          
        REGION_INC         =>    ntRef_ntREGION_INC,        
        S11_TILO           =>    ntRef_ntS11_TILO,          
        DIN                =>    ntRef_ntDIN
                   )
        @([sx,sy]);

// SRB CON

      STRUCT inc_spec_IOB4 incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_srb,ty_srb,sx_srb;

      foreach incVar(inc_IOB4_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          sy_srb = sy + loc_SRB*NUM_GRID_Y; 

          sx_srb =  sx + NUM_GRID_X ; 

          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device IOB4_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> =>  <wire *pin_logic_device of <device IOB4_TILE @[sx,sy]>>); 
          }
      }

}//end of function place_iob0_tile
/******************************************************************
********************************************************************/
function place_iob5_tile(unsigned int tx,ty)
{  
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;

    sprintf(strVar,"ntBSMODE1_O_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE1_O = wire *strVar;

    sprintf(strVar,"ntBSMODE2_O_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE2_O = wire *strVar;

    sprintf(strVar,"ntBSMODE3_O_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE3_O = wire *strVar;

    sprintf(strVar,"ntCLK_XTAL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_XTAL = wire *strVar;

    sprintf(strVar,"ntCLOCK_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_O = wire *strVar;

    sprintf(strVar,"ntGOUTEN_O_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_O = wire *strVar;

    sprintf(strVar,"ntPOR_N_O_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_O = wire *strVar;

    sprintf(strVar,"ntS11_BSRRST_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_BSRRST_O = wire *strVar;

    sprintf(strVar,"ntS11_PAD_STATE_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_PAD_STATE_O = wire *strVar;

    sprintf(strVar,"ntSHIFT_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntSHIFT_DR_O = wire *strVar;

    sprintf(strVar,"ntUPDATE_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntUPDATE_DR_O = wire *strVar;

    sprintf(strVar,"ntADDR1_%d_%d",sx,sy);
    &wire ntRef_ntADDR1[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntADDR0_%d_%d",sx,sy);
    &wire ntRef_ntADDR0[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntS11_TILO_%d_%d",sx,sy);
    &wire ntRef_ntS11_TILO[53:0] = wire *strVar[53:0];

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntGATE_FROM_LOOP_%d_%d",sx,sy);
    &wire ntRef_ntGATE_FROM_LOOP[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntDQS_O_%d_%d",sx,sy);
    &wire ntRef_ntDQS_O[4:1] = wire *strVar[4:1];

    sprintf(strVar,"ntREGION_INC_%d_%d",sx,sy);
    &wire ntRef_ntREGION_INC[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntDIN_%d_%d",sx,sy);
    &wire ntRef_ntDIN[53:0] = wire *strVar[53:0];

    sprintf(strVar,"ntS11_TIHI_%d_%d",sx,sy);
    &wire ntRef_ntS11_TIHI[53:0] = wire *strVar[53:0];

    sprintf(strVar,"ntSO_%d_%d",sx,sy);
    &wire ntRef_ntSO[53:0] = wire *strVar[53:0];

    sprintf(strVar, "IOB5_TILE_%d_%d", sx, sy);
    device IOB5_TILE *strVar
         port map (
        BSMODE1_O          =>    ntRef_ntBSMODE1_O,         
        BSMODE2_O          =>    ntRef_ntBSMODE2_O,         
        BSMODE3_O          =>    ntRef_ntBSMODE3_O,         
        CLK_XTAL           =>    ntRef_ntCLK_XTAL,          
        CLOCK_DR_O         =>    ntRef_ntCLOCK_DR_O,        
        GOUTEN_O           =>    ntRef_ntGOUTEN_O,          
        POR_N_O            =>    ntRef_ntPOR_N_O,           
        S11_BSRRST_O       =>    ntRef_ntS11_BSRRST_O,      
        S11_PAD_STATE_O    =>    ntRef_ntS11_PAD_STATE_O,   
        SHIFT_DR_O         =>    ntRef_ntSHIFT_DR_O,        
        UPDATE_DR_O        =>    ntRef_ntUPDATE_DR_O,       
        ADDR1              =>    ntRef_ntADDR1,             
        ADDR0              =>    ntRef_ntADDR0,             
        CS_OUT             =>    ntRef_ntCS_OUT,            
        S11_TILO           =>    ntRef_ntS11_TILO,          
        COL_INC_OUT        =>    ntRef_ntCOL_INC_OUT,       
        GATE_FROM_LOOP     =>    ntRef_ntGATE_FROM_LOOP,    
        DQS_O              =>    ntRef_ntDQS_O,             
        REGION_INC         =>    ntRef_ntREGION_INC,        
        DIN                =>    ntRef_ntDIN,               
        S11_TIHI           =>    ntRef_ntS11_TIHI,          
        SO                 =>    ntRef_ntSO
                   )
        @([sx,sy]);

// SRB CON

      STRUCT inc_spec_IOB5 incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_srb,ty_srb,sx_srb;

      foreach incVar(inc_IOB5_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          sy_srb = sy + loc_SRB*NUM_GRID_Y; 

          sx_srb =  sx - NUM_GRID_X ; 

          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device IOB5_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> =>  <wire *pin_logic_device of <device IOB5_TILE @[sx,sy]>>); 
          }
      }

}//end of function place_iob5_tile
/****************************************************************************************************
*****************************************************************************************************/
function place_idcode_tile(unsigned int tx, ty)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;
    sprintf(strVar,"ntIDCODE_H12_%d_%d",sx,sy);
    &wire ntRef_ntIDCODE_H12[11:0] = wire *strVar[11:0];

    sprintf(strVar,"ntIDCODE_L18_%d_%d",sx,sy);
    &wire ntRef_ntIDCODE_L18[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntDRM_COLUMN_NUM_%d_%d",sx,sy);
    &wire ntRef_ntDRM_COLUMN_NUM[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntDRM_REGION_NUM_%d_%d",sx,sy);
    &wire ntRef_ntDRM_REGION_NUM[4:0] = wire *strVar[4:0];

    sprintf(strVar,"IDCODE_PGL100H_TILE_%d_%d",sx,sy);
    device IDCODE_PGL100H_TILE *strVar
        port map (
                   IDCODE_H12 => ntRef_ntIDCODE_H12,
                   IDCODE_L18 => ntRef_ntIDCODE_L18,
                   DRM_COLUMN_NUM => ntRef_ntDRM_COLUMN_NUM,
                   DRM_REGION_NUM => ntRef_ntDRM_REGION_NUM
                 )
        @ [sx,sy];       
} // end of place_idcode_tile

/********************************************************************************
********************************************************************************/
function place_esd_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;

      sprintf(strVar, "ESD_PGL100H_TILE_%d_%d", sx, sy);
      device ESD_PGL100H_TILE *strVar
//         port map (
//                  )
        @([sx,sy]);

}


} // end of pkgs pgl100h_funcs_place

