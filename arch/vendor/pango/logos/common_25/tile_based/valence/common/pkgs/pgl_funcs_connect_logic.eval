use pgl_defs;
use pgl_WLSR1_TIEHI_inc, pgl_IOCK_TIEHI_inc,pgl_BLSR_TIEHI_inc, pgl_TIEHI_IN_inc,pgl_TIEHI_SRB_inc;

package pgl_funcs_connect_logic
{
/********************************************************************************/
/********************************************************************************/
function connect_SRB_input_v
( 
    unsigned int tx,
    unsigned int index,
    unsigned int l_srb_tile_y0[59:0],
    unsigned int l_srb_tile_y1[50:0],
    unsigned int ty_iol_d,
    unsigned int flag_ud,
    unsigned int flag_y,
    unsigned int flag_mode
)
{
    unsigned int sx,ty,ty_skew,sy,sy_skew;
    sx = tx * NUM_GRID_X ;
    string strVar = "SRB_TILE" ;

    ty = (flag_y == 0) ? l_srb_tile_y0[index] :
                         l_srb_tile_y1[index] ; 

    int flag_blank_d = (ty==ty_iol_d) ? 1 : 0 ;

    sy = ty * NUM_GRID_Y ;

    if(flag_mode==1)
    {
        if(index!=0)
        {
            ty_skew = (flag_y == 0) ? l_srb_tile_y0[index - 1] :
                                      l_srb_tile_y1[index - 1] ;

            sy_skew = ty_skew * NUM_GRID_Y ;

            if(flag_ud==1)
            {
                connect
                 (
                    <pin ISN of <device *strVar @[sx,sy]>>  => <wire ZSN of <device *strVar @ [sx,sy_skew]>>
                 );
            }
            else
            {

                connect
                (
                    <pin ISS of <device *strVar @[sx,sy]>>    => <wire ZSS of <device *strVar @ [sx,sy_skew]>>
                );                

                if(flag_blank_d==1)
                {
                    connect
                    (
                        <pin IDS_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZDS[5] of <device *strVar @ [sx,sy]>>,
                        <pin ISS_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZSS[4] of <device *strVar @ [sx,sy]>>
                    );
                }               
                else
                { 
                    connect
                    (
                        <pin IDS_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZDS[5] of <device *strVar @ [sx,sy_skew]>>,
                        <pin ISS_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZSS[5] of <device *strVar @ [sx,sy]>>
                    );
                }

             }
        }
        else
        {
            if(flag_ud==1)
            {
                connect
                 (
                    <pin ISN of <device *strVar @[sx,sy]>>  => <wire ZSS of <device *strVar @ [sx,sy]>>
                 );
                }
            else
            {
                connect
                (
                   <pin ISS of <device *strVar @[sx,sy]>>    => <wire ZSN of <device *strVar @ [sx,sy]>>,
                   <pin IDS_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZDN[5] of <device *strVar @ [sx,sy]>>,
                   <pin ISS_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZSS[5] of <device *strVar @ [sx,sy]>>
                );
            }
        }
    }
    
    if(flag_mode==2)
    {
        if(index>1)
        {

            ty_skew = (flag_y == 0) ? l_srb_tile_y0[index - 2] :
                                      l_srb_tile_y1[index - 2] ;

            sy_skew = ty_skew * NUM_GRID_Y ;

            if(flag_ud==1)
            {
                connect
                 (
                    <pin IDN of <device *strVar @[sx,sy]>>  => <wire ZDN of <device *strVar @ [sx,sy_skew]>>
                 );
            }
            else
            {
                connect
                 (
                    <pin IDS of <device *strVar @[sx,sy]>>    => <wire ZDS of <device *strVar @ [sx,sy_skew]>>
                 );            
             }
        }
        else
        {
            ty_skew = (flag_y == 0) ? l_srb_tile_y0[1 - index] :
                                      l_srb_tile_y1[1 - index] ;            

            sy_skew = ty_skew * NUM_GRID_Y ;

            if(flag_ud==1)
            {

                connect
                 (
                    <pin IDN of <device *strVar @[sx,sy]>>  => <wire ZDS of <device *strVar @ [sx,sy_skew]>>
                 );
            }
            else
            {

                connect
                (
                   <pin IDS of <device *strVar @[sx,sy]>>    => <wire ZDN of <device *strVar @ [sx,sy_skew]>>
                );
            }
        }
    }
    if(flag_mode==3)
    {
        if(index>2)
        {

            ty_skew = (flag_y == 0) ? l_srb_tile_y0[index - 3] :
                                      l_srb_tile_y1[index - 3] ;

            sy_skew = ty_skew * NUM_GRID_Y ;

            if(flag_ud==0)
            {

                if(flag_blank_d==1)
                {
                    connect(<pin IQS_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZQS[5] of <device *strVar @ [sx,sy]>>);
                }
                else
                {
                    connect(<pin IQS_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZQS[5] of <device *strVar @ [sx,sy_skew]>>);
                }
            }
        }
        else
        {
            ty_skew = (flag_y == 0) ? l_srb_tile_y0[2 - index] :
                                      l_srb_tile_y1[2 - index] ;            

            sy_skew = ty_skew * NUM_GRID_Y ;

            if(flag_ud==0)
            {
                connect
                (
                   <pin IQS_5_NEXT of <device *strVar @[sx,sy]>>    => <wire ZQN[5] of <device *strVar @ [sx,sy_skew]>>
                );
            }
        }
    }
    if(flag_mode==4)
    {
        if(index>3)
        {

            ty_skew = (flag_y == 0) ? l_srb_tile_y0[index - 4] :
                                      l_srb_tile_y1[index - 4] ;

            sy_skew = ty_skew * NUM_GRID_Y ;

            if(flag_ud==1)
            {
                connect
                 (
                    <pin IQN of <device *strVar @[sx,sy]>>  => <wire ZQN of <device *strVar @ [sx,sy_skew]>>
                 );
            }
            else
            {
                connect
                 (
                    <pin IQS of <device *strVar @[sx,sy]>>    => <wire ZQS of <device *strVar @ [sx,sy_skew]>>
                 );            
             }
        }
        else
        {
            ty_skew = (flag_y == 0) ? l_srb_tile_y0[3 - index] :
                                      l_srb_tile_y1[3 - index] ;            

            sy_skew = ty_skew * NUM_GRID_Y ;

            if(flag_ud==1)
            {
                connect
                 (
                    <pin IQN of <device *strVar @[sx,sy]>>  => <wire ZQS of <device *strVar @ [sx,sy_skew]>>
                 );
            }
            else
            {
                connect
                (
                   <pin IQS of <device *strVar @[sx,sy]>>    => <wire ZQN of <device *strVar @ [sx,sy_skew]>>
                );
            }
        }
    }
    if(flag_mode==8)
    {
        if(index>7)
        {

            ty_skew = (flag_y == 0) ? l_srb_tile_y0[index - 8] :
                                      l_srb_tile_y1[index - 8] ;

            sy_skew = ty_skew * NUM_GRID_Y ;

            if(flag_ud==1)
            {
                connect
                 (
                    <pin LV2 of <device *strVar @[sx,sy_skew]>>  => <wire LV1 of <device *strVar @ [sx,sy]>>
                 );
            }
            else
            {
                connect
                 (
                    <pin LV0 of <device *strVar @[sx,sy_skew]>>    => <wire LV1 of <device *strVar @ [sx,sy]>>
                 );            
             }
        }
        else
        {
            ty_skew = (flag_y == 0) ? l_srb_tile_y0[7 - index] :
                                      l_srb_tile_y1[7 - index] ;            

            sy_skew = ty_skew * NUM_GRID_Y ;

            if(flag_ud==1)
            {

                connect
                 (
                    <pin LV0 of <device *strVar @[sx,sy_skew]>>  => <wire LV1 of <device *strVar @ [sx,sy]>>
                 );
            }
            else
            {

                connect
                (
                   <pin LV2 of <device *strVar @[sx,sy_skew]>>  => <wire LV1 of <device *strVar @ [sx,sy]>>
                );
            }
        }
    }

}// end of connect_SRB_input_v
/********************************************************************************/
/********************************************************************************/
function connect_SRB_input_h
( 
    unsigned int index_y,
    unsigned int index,
    unsigned int tx_hsst,
    unsigned int ty_hsst,
    unsigned int l_srb_tile_y[59:0],
    unsigned int l_srb_tile_x0[57:0],
    unsigned int l_srb_tile_x1[12:0],
    unsigned int l_srb_tile_x2[12:0],
    unsigned int flag_ud,
    unsigned int flag_y,
    unsigned int flag_mode,
    unsigned int flag_blank_d,
    unsigned int flag_blank_h_u
)
{
    unsigned int sx,tx,ty,tx_skew,sy,sx_skew,sy_skew;
    ty = l_srb_tile_y[index_y];
    sy = ty * NUM_GRID_X ;
    string strVar = "SRB_TILE" ;

    tx = (flag_y == 0) ? l_srb_tile_x0[index] :
         (flag_y == 1) ? l_srb_tile_x1[index] :
                         l_srb_tile_x2[index] ;

    int flag_blank_u = (flag_blank_h_u==1) ? 1 :
                       (tx>=tx_hsst&&tx<tx_hsst+NUM_TILE_HSST_X&&ty==ty_hsst-1) ? 1 : 0 ;

    int tx_sw = tx_hsst ;
    int ty_sw = ty_hsst ;

    int tx_se = tx_hsst + NUM_TILE_HSST_X-1;
    int ty_se = ty_hsst ;

    sx = tx * NUM_GRID_Y ;

    if(flag_mode==1)
    {
        if(index!=0)
        {

            tx_skew = (flag_y == 0) ? l_srb_tile_x0[index - 1] :
                      (flag_y == 1) ? l_srb_tile_x1[index - 1] :
                                      l_srb_tile_x2[index - 1] ;

            sx_skew = tx_skew * NUM_GRID_Y ;

            if(flag_ud==1)
            {
                connect(<pin ISE of <device *strVar @[sx,sy]>>  => <wire ZSE of <device *strVar @ [sx_skew,sy]>>);

                if(flag_blank_d==0)
                {

                    sy_skew = l_srb_tile_y[index_y - 1] * NUM_GRID_Y ;

                    connect
                    (
                        <pin ISE_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZSE[5] of <device *strVar @ [sx_skew,sy_skew]>>,
                        <pin TSSW of <device *strVar @[sx_skew,sy]>>  => <wire ZSSW of <device *strVar @ [sx,sy]>>,
                        <pin ISSW of <device *strVar @[sx_skew,sy_skew]>>  => <wire ZSSW of <device *strVar @ [sx,sy]>>
                    );
                }
                else
                {
                    connect
                    (
                        <pin ISE_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZSS[4] of <device *strVar @ [sx,sy]>>,
                        <pin TSSW of <device *strVar @[sx_skew,sy]>>  => <wire ZSSW of <device *strVar @ [sx,sy]>>,
                        <pin ISNE of <device *strVar @[sx,sy]>>  => <wire ZSSW of <device *strVar @ [sx,sy]>>
                    );  
                }
            
                if(flag_blank_u==0)
                {

//special RRD
                    sy_skew = l_srb_tile_y[index_y + 1] * NUM_GRID_Y ;

                    if(tx==tx_se + 2&&ty==ty_se - 1)
                    {
                        connect
                        (
                            <pin TSNW of <device *strVar @[sx,sy_skew]>>  => <wire ZSNW of <device *strVar @ [sx,sy]>>,
                            <pin ISSW of <device *strVar @[sx_skew,sy]>>  => <wire ZSNW of <device *strVar @ [sx,sy]>>
                        );
                    }
                    else
                    {
                        connect
                        (
                            <pin TSNW of <device *strVar @[sx,sy_skew]>>  => <wire ZSNW of <device *strVar @ [sx,sy]>>,
                            <pin ISNW of <device *strVar @[sx_skew,sy_skew]>>  => <wire ZSNW of <device *strVar @ [sx,sy]>>
                        );
                    }
                }

                else
                {

//special LRD
                    if(tx==tx_sw&&ty==ty_sw - 1)
                    {

                        sy_skew = l_srb_tile_y[index_y + 1] * NUM_GRID_Y ;

                        connect
                        (
                            <pin TSSW of <device *strVar @[sx_skew,sy_skew]>>  => <wire ZSNW of <device *strVar @ [sx,sy]>>,
                            <pin ISSW of <device *strVar @[sx_skew,sy]>>  => <wire ZSNW of <device *strVar @ [sx,sy]>>
                        );                    
                    }
                    else
                    {
                        connect
                        (
                            <pin TSSE of <device *strVar @[sx_skew,sy]>>  => <wire ZSNW of <device *strVar @ [sx,sy]>>,
                            <pin ISSE of <device *strVar @[sx,sy]>>  => <wire ZSNW of <device *strVar @ [sx,sy]>>
                        );
                    }
                }
            }

// tx_skew > tx

            else
            {
                connect(<pin ISW of <device *strVar @[sx,sy]>>    => <wire ZSW of <device *strVar @ [sx_skew,sy]>>);

                if(flag_blank_d==0)
                {

                    sy_skew = l_srb_tile_y[index_y - 1] * NUM_GRID_Y ;

                    connect
                    (
                        <pin ISW_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZSW[5] of <device *strVar @ [sx_skew,sy_skew]>>,
                        <pin TSSE of <device *strVar @[sx,sy_skew]>>  => <wire ZSSE of <device *strVar @ [sx,sy]>>,
                        <pin ISSE of <device *strVar @[sx_skew,sy_skew]>>  => <wire ZSSE of <device *strVar @ [sx,sy]>>
                    );
                }
                else
                {
                    connect
                    (
                        <pin ISW_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZSS[1] of <device *strVar @ [sx,sy]>>,
                        <pin TSNW of <device *strVar @[sx_skew,sy]>>  => <wire ZSSE of <device *strVar @ [sx,sy]>>,
                        <pin ISNW of <device *strVar @[sx,sy]>>  => <wire ZSSE of <device *strVar @ [sx,sy]>>
                    );                
                }
                if(flag_blank_u==0)
                {
//special LLD

                    sy_skew = l_srb_tile_y[index_y + 1] * NUM_GRID_Y ;                    

                    if(tx==tx_sw - 2&&ty==ty_sw - 1)
                    {
                        connect
                        (
                            <pin TSNE of <device *strVar @[sx_skew,sy]>>  => <wire ZSNE of <device *strVar @ [sx,sy]>>,
                            <pin ISNW of <device *strVar @[sx,sy_skew]>>  => <wire ZSNE of <device *strVar @ [sx,sy]>>
                        );
                    }

                    else
                    {
                        connect
                        (
                            <pin TSNE of <device *strVar @[sx_skew,sy]>>  => <wire ZSNE of <device *strVar @ [sx,sy]>>,
                            <pin ISNE of <device *strVar @[sx_skew,sy_skew]>>  => <wire ZSNE of <device *strVar @ [sx,sy]>>
                        );
                    }
                }
                else
                {
//special RLD

                    if(tx==tx_se&&ty==ty_se - 1)
                    {

                        sy_skew = l_srb_tile_y[index_y + 1] * NUM_GRID_Y ;

                        connect
                        (
                            <pin TSNE of <device *strVar @[sx_skew,sy]>>  => <wire ZSNE of <device *strVar @ [sx,sy]>>,
                            <pin ISNE of <device *strVar @[sx_skew,sy_skew]>>  => <wire ZSNE of <device *strVar @ [sx,sy]>>
                        );
                    }
                    else
                    {
                        connect
                        (
                            <pin TSNE of <device *strVar @[sx_skew,sy]>>  => <wire ZSNE of <device *strVar @ [sx,sy]>>,
                            <pin ISSW of <device *strVar @[sx,sy]>>  => <wire ZSNE of <device *strVar @ [sx,sy]>>
                        );
                    }
                }
            }
        }

// index==0,boundry,no sx_skew

        else
        {
            if(flag_ud==1)
            {
                connect
                (
                    <pin ISE of <device *strVar @[sx,sy]>>  => <wire ZSW of <device *strVar @ [sx,sy]>>
                );

                if(flag_blank_d==0)
                {

                    sy_skew = l_srb_tile_y[index_y - 1] * NUM_GRID_Y ;
                    
                    if(ty==ty_hsst && flag_y==2)
                    {
                        connect(<pin ISE_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZSE[5] of <device *strVar @ [sx-2*NUM_GRID_X,sy_skew]>>);
                    }
                    else
                    {
                        connect(<pin ISE_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZSW[5] of <device *strVar @ [sx,sy_skew]>>);
                    }

//special RRU

                    if(tx==tx_se + 2&&ty==ty_se)
                    {
                        connect
                        (
                            <pin TSSE of <device *strVar @[sx-2*NUM_GRID_X,sy_skew]>>  => <wire ZSSW of <device *strVar @ [sx,sy]>>,
                            <pin ISSE of <device *strVar @[sx,sy_skew]>>  => <wire ZSSW of <device *strVar @ [sx,sy]>>
                        );
                    }
                    else
                    {
                        connect
                        (
                            <pin TSNE of <device *strVar @[sx,sy_skew]>>  => <wire ZSSW of <device *strVar @ [sx,sy]>>,
                            <pin ISNE of <device *strVar @[sx,sy]>>  => <wire ZSSW of <device *strVar @ [sx,sy]>>
                        );
                    }
                }
                else
                {

                    connect
                    (
                        <pin ISE_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZSS[4] of <device *strVar @ [sx,sy]>>,
                        <pin ISNE of <device *strVar @[sx,sy]>>  => <wire ZSSW of <device *strVar @ [sx,sy]>>,
                        <pin TSNW of <device *strVar @[sx,sy]>>  => <wire ZSSW of <device *strVar @ [sx,sy]>>
                    );                

                }
                if(flag_blank_u==0)
                {
                    sy_skew = l_srb_tile_y[index_y + 1] * NUM_GRID_Y ;

                    connect
                    (
                        <pin TSNW of <device *strVar @[sx,sy_skew]>>  => <wire ZSNW of <device *strVar @ [sx,sy]>>,
                        <pin ISSE of <device *strVar @[sx,sy]>>  => <wire ZSNW of <device *strVar @ [sx,sy]>>
                    );
                }
                else
                {
                    connect
                    (
                        <pin TSNE of <device *strVar @[sx,sy]>>  => <wire ZSNW of <device *strVar @ [sx,sy]>>,
                        <pin ISSE of <device *strVar @[sx,sy]>>  => <wire ZSNW of <device *strVar @ [sx,sy]>>
                    );                
                }
            }

 // tx_skew > tx

            else
            {
                connect(<pin ISW of <device *strVar @[sx,sy]>>    => <wire ZSE of <device *strVar @ [sx,sy]>>);
                
                if(flag_blank_d==0)
                {

                    sy_skew = l_srb_tile_y[index_y - 1] * NUM_GRID_Y ;

                    if(ty==ty_hsst && flag_y==1)
                    {
                        connect(<pin ISW_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZSW[5] of <device *strVar @ [sx+2*NUM_GRID_X,sy_skew]>>);
                    }
                    else
                    {
                        connect(<pin ISW_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZSE[5] of <device *strVar @ [sx,sy_skew]>>);
                    }

//special LLU

                    if(tx==tx_sw - 2&&ty==ty_sw)
                    {

                        connect
                        (
                            <pin TSSE of <device *strVar @[sx,sy_skew]>>  => <wire ZSSE of <device *strVar @ [sx,sy]>>,
                            <pin ISSE of <device *strVar @[sx+2*NUM_GRID_X,sy_skew]>>  => <wire ZSSE of <device *strVar @ [sx,sy]>>
                        );
                    }
                    else
                    { 
                        connect
                        (
                            <pin TSSE of <device *strVar @[sx,sy_skew]>>  => <wire ZSSE of <device *strVar @ [sx,sy]>>,
                            <pin ISNW of <device *strVar @[sx,sy]>>  => <wire ZSSE of <device *strVar @ [sx,sy]>>
                        );
                    }
                }
                else
                {
                    connect
                    (
                        <pin ISW_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZSS[1] of <device *strVar @ [sx,sy]>>,
                        <pin TSSW of <device *strVar @[sx,sy]>>  => <wire ZSSE of <device *strVar @ [sx,sy]>>,
                        <pin ISNW of <device *strVar @[sx,sy]>>  => <wire ZSSE of <device *strVar @ [sx,sy]>>
                    );                
                }
                if(flag_blank_u==0)
                {
                    sy_skew = l_srb_tile_y[index_y + 1] * NUM_GRID_Y ;

                    connect
                    (
                        <pin TSSW of <device *strVar @[sx,sy_skew]>>  => <wire ZSNE of <device *strVar @ [sx,sy]>>,
                        <pin ISSW of <device *strVar @[sx,sy]>>  => <wire ZSNE of <device *strVar @ [sx,sy]>>
                    );
                }
                else
                {
                    connect
                    (
                        <pin TSSE of <device *strVar @[sx,sy]>>  => <wire ZSNE of <device *strVar @ [sx,sy]>>,
                        <pin ISSW of <device *strVar @[sx,sy]>>  => <wire ZSNE of <device *strVar @ [sx,sy]>>
                    );                
                }
            }
        }
    }
    
    if(flag_mode==2)
    {
        if(index>1)
        {

            tx_skew = (flag_y == 0) ? l_srb_tile_x0[index - 2] :
                      (flag_y == 1) ? l_srb_tile_x1[index - 2] :
                                      l_srb_tile_x2[index - 2] ;

            sx_skew = tx_skew * NUM_GRID_Y ;

            if(flag_ud==1)
            {
                connect
                (
                    <pin IDE of <device *strVar @[sx,sy]>>  => <wire ZDE of <device *strVar @ [sx_skew,sy]>>
                );
                if(flag_blank_d==0)
                {

                    sy_skew = l_srb_tile_y[index_y - 1] * NUM_GRID_Y ;

                    connect
                    (
                        <pin IDE_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZDE[5] of <device *strVar @ [sx_skew,sy_skew]>>
                    );
                }
                else
                {
                    connect
                    (
                        <pin IDE_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZDS[4] of <device *strVar @ [sx,sy]>>
                    );                
                }
            }
            else
            {
                connect
                (
                    <pin IDW of <device *strVar @[sx,sy]>>    => <wire ZDW of <device *strVar @ [sx_skew,sy]>>
                );            
                if(flag_blank_d==0)
                {
                    sy_skew = l_srb_tile_y[index_y - 1] * NUM_GRID_Y ;

                    connect
                    (
                        <pin IDW_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZDW[5] of <device *strVar @ [sx_skew,sy_skew]>>
                    );
                }
                else
                {
                    connect
                    (
                        <pin IDW_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZDS[3] of <device *strVar @ [sx,sy]>>
                    );                
                }
             }
        }

//boundry mode2 

        else
        {
            tx_skew = (flag_y == 0) ? l_srb_tile_x0[1 - index] :
                      (flag_y == 1) ? l_srb_tile_x1[1 - index] :
                                      l_srb_tile_x2[1 - index] ;

            sx_skew = tx_skew * NUM_GRID_Y ;

            if(flag_ud==1)
            {

                connect
                 (
                    <pin IDE of <device *strVar @[sx,sy]>>  => <wire ZDW of <device *strVar @ [sx_skew,sy]>>
                 );
                if(flag_blank_d==0)
                {
                    sy_skew = l_srb_tile_y[index_y - 1] * NUM_GRID_Y ;

                    if(ty==ty_hsst && flag_y==2)
                    {
                        connect(<pin IDE_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZDE[5] of <device *strVar @ [sx-3*NUM_GRID_X,sy_skew]>>);
                    }
                    else
                    {
                        connect(<pin IDE_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZDW[5] of <device *strVar @ [sx_skew,sy_skew]>>);
                    }

                }
                else
                {
                    connect
                    (
                        <pin IDE_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZDS[4] of <device *strVar @ [sx,sy]>>
                    );                
                }
            }
            else
            {
                connect(<pin IDW of <device *strVar @[sx,sy]>>    => <wire ZDE of <device *strVar @ [sx_skew,sy]>>);

                if(flag_blank_d==0)
                {

                    sy_skew = l_srb_tile_y[index_y - 1] * NUM_GRID_Y ;

                    if(ty==ty_hsst && flag_y==1)
                    {
                        connect(<pin IDW_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZDW[5] of <device *strVar @ [sx+3*NUM_GRID_X,sy_skew]>>);
                    }
                    else
                    {
                        connect(<pin IDW_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZDE[5] of <device *strVar @ [sx_skew,sy_skew]>>);
                    }
                    
                }
                else
                {
                    connect(<pin IDW_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZDS[3] of <device *strVar @ [sx,sy]>>);
                
                }
            }
        }
    }

    if(flag_mode==4)
    {
        if(index>3)
        {

            tx_skew = (flag_y == 0) ? l_srb_tile_x0[index - 4] :
                      (flag_y == 1) ? l_srb_tile_x1[index - 4] :
                                      l_srb_tile_x2[index - 4] ;

            sx_skew = tx_skew * NUM_GRID_Y ;

            if(flag_ud==1)
            {
                connect
                (
                    <pin IQE of <device *strVar @[sx,sy]>>  => <wire ZQE of <device *strVar @ [sx_skew,sy]>>
                );
                if(flag_blank_d==0)
                {

                    sy_skew = l_srb_tile_y[index_y - 1] * NUM_GRID_Y ;

                    connect
                    (
                        <pin IQE_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZQE[5] of <device *strVar @ [sx_skew,sy_skew]>>
                    );
                }
                else
                {
                    connect
                    (
                        <pin IQE_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZQS[3] of <device *strVar @ [sx,sy]>>
                    );                
                }
            }
            else
            {
                connect
                (
                    <pin IQW of <device *strVar @[sx,sy]>>    => <wire ZQW of <device *strVar @ [sx_skew,sy]>>
                );            
                if(flag_blank_d==0)
                {

                    sy_skew = l_srb_tile_y[index_y - 1] * NUM_GRID_Y ;

                    connect
                    (
                        <pin IQW_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZQW[5] of <device *strVar @ [sx_skew,sy_skew]>>
                    );
                }
                else
                {
                    connect
                    (
                        <pin IQW_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZQS[0] of <device *strVar @ [sx,sy]>>
                    );                
                }
             }
        }
// boundry mode 4
        else
        {
            tx_skew = (flag_y == 0) ? l_srb_tile_x0[3 - index] :
                      (flag_y == 1) ? l_srb_tile_x1[3 - index] :
                                      l_srb_tile_x2[3 - index] ;

            sx_skew = tx_skew * NUM_GRID_Y ;

            if(flag_ud==1)
            {

                connect
                 (
                    <pin IQE of <device *strVar @[sx,sy]>>  => <wire ZQW of <device *strVar @ [sx_skew,sy]>>
                 );
                if(flag_blank_d==0)
                {
                    sy_skew = l_srb_tile_y[index_y - 1] * NUM_GRID_Y ;

                    if(ty==ty_hsst && flag_y==2)
                    {
                        connect(<pin IQE_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZQE[5] of <device *strVar @ [sx-5*NUM_GRID_X,sy_skew]>>);
                    }
                    else
                    {
                        connect(<pin IQE_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZQW[5] of <device *strVar @ [sx_skew,sy_skew]>>);
                    }
                }
                else
                {
                    connect
                    (
                        <pin IQE_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZQS[3] of <device *strVar @ [sx,sy]>>
                    );                
                }
            }
            else
            {
                connect
                (
                   <pin IQW of <device *strVar @[sx,sy]>>    => <wire ZQE of <device *strVar @ [sx_skew,sy]>>
                );
                if(flag_blank_d==0)
                {
                    sy_skew = l_srb_tile_y[index_y - 1] * NUM_GRID_Y ;

                    if(ty==ty_hsst && flag_y==1)
                    {
                        connect(<pin IQW_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZQW[5] of <device *strVar @ [sx+5*NUM_GRID_X,sy_skew]>>);
                    }
                    else
                    {
                        connect(<pin IQW_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZQE[5] of <device *strVar @ [sx_skew,sy_skew]>>);
                    }
                }
                else
                {
                    connect
                    (
                        <pin IQW_5_NEXT of <device *strVar @[sx,sy]>>  => <wire ZQS[0] of <device *strVar @ [sx,sy]>>
                    );                
                }
            }
        }
    }
    if(flag_mode==8)
    {
        if(index>7)
        {

            tx_skew = (flag_y == 0) ? l_srb_tile_x0[index - 8] :
                      (flag_y == 1) ? l_srb_tile_x1[index - 8] :
                                      l_srb_tile_x2[index - 8] ;

            sx_skew = tx_skew * NUM_GRID_Y ;

            if(flag_ud==1)
            {
                connect
                 (
                    <pin LH0 of <device *strVar @[sx_skew,sy]>>  => <wire LH1 of <device *strVar @ [sx,sy]>>
                 );
            }
            else
            {
                connect
                 (
                    <pin LH2 of <device *strVar @[sx_skew,sy]>>    => <wire LH1 of <device *strVar @ [sx,sy]>>
                 );            
             }
        }
        else
        {
            tx_skew = (flag_y == 0) ? l_srb_tile_x0[7 - index] :
                      (flag_y == 1) ? l_srb_tile_x1[7 - index] :
                                      l_srb_tile_x2[7 - index] ;

            sx_skew = tx_skew * NUM_GRID_Y ;

            if(flag_ud==1)
            {

                connect
                 (
                    <pin LH2 of <device *strVar @[sx_skew,sy]>>  => <wire LH1 of <device *strVar @ [sx,sy]>>
                 );
            }
            else
            {
                connect
                (
                   <pin LH0 of <device *strVar @[sx_skew,sy]>>    => <wire LH1 of <device *strVar @ [sx,sy]>>
                );
            }
        }
    }

}// end of connect_SRB_input_h
/****************************************************************************************************
*****************************************************************************************************/
function connect_CLM_input
(
    unsigned int tx,
    unsigned int index,
    unsigned int l_clms_tile_y[57:0],
    unsigned int l_clms_tile_y_pll[31:0],
    unsigned int l_clma_tile_y_0[57:0],
    unsigned int l_clma_tile_y_d[58:0],
    unsigned int l_clma_tile_y_u[58:0],
    unsigned int l_clma_tile_y_ud[59:0],
    unsigned int l_clms_tile_y_h[48:0],
    unsigned int l_clma_tile_y_h[48:0],
    unsigned int l_clma_tile_y_hd[37:0],
    unsigned int l_clms_tile_y_d55[55:0],
    unsigned int flag_sa,
    unsigned int flag_ud,
    unsigned int flag_y
)
{
    unsigned int sx,ty,ty_skew,sy,sy_skew;
    sx = tx * NUM_GRID_X + 2;
    string strVar;
    strVar = (flag_sa==0) ? "CLMA_TILE" : "CLMS_TILE";


    ty = (flag_y == 0) ? l_clms_tile_y[index] :
         (flag_y == 1) ? l_clms_tile_y_pll[index] :
         (flag_y == 2) ? l_clma_tile_y_0[index] :
         (flag_y == 3) ? l_clma_tile_y_d[index] :
         (flag_y == 4) ? l_clma_tile_y_u[index] :
         (flag_y == 5) ? l_clma_tile_y_ud[index] :
         (flag_y == 6) ? l_clms_tile_y_h[index] :
         (flag_y == 7) ? l_clma_tile_y_h[index] :
         (flag_y == 8) ? l_clma_tile_y_hd[index] :
                         l_clms_tile_y_d55[index] ;

    sy = ty * NUM_GRID_Y ;

    if(index!=0)
    {

        ty_skew = (flag_y == 0) ? l_clms_tile_y[index - 1] :
             (flag_y == 1) ? l_clms_tile_y_pll[index - 1] :
             (flag_y == 2) ? l_clma_tile_y_0[index - 1] :
             (flag_y == 3) ? l_clma_tile_y_d[index - 1] :
             (flag_y == 4) ? l_clma_tile_y_u[index - 1] :
            (flag_y == 5) ? l_clma_tile_y_ud[index - 1] :
             (flag_y == 6) ? l_clms_tile_y_h[index - 1] :
              (flag_y == 7) ? l_clma_tile_y_h[index - 1] :
              (flag_y == 8) ? l_clma_tile_y_hd[index - 1] :
                               l_clms_tile_y_d55[index - 1] ;
    
        sy_skew = ty_skew * NUM_GRID_Y ;

        if(flag_ud==1)
        {
            connect
             (
                <pin A_CECI of <device *strVar @[sx,sy]>>  => <wire A_CECO of <device *strVar @ [sx,sy_skew]>>,
                <pin S_CECI of <device *strVar @[sx,sy]>>  => <wire S_CECO of <device *strVar @ [sx,sy_skew]>>,
                <pin A_CIN of <device *strVar @[sx,sy]>>   => <wire A_COUT of <device *strVar @ [sx,sy_skew]>>,
                <pin S_CIN of <device *strVar @[sx,sy]>>   => <wire S_COUT of <device *strVar @ [sx,sy_skew]>>,
                <pin A_RSCI of <device *strVar @[sx,sy]>>  => <wire A_RSCO of <device *strVar @ [sx,sy_skew]>>,
                <pin S_RSCI of <device *strVar @[sx,sy]>>  => <wire S_RSCO of <device *strVar @ [sx,sy_skew]>>,
                <pin A_SRCI of <device *strVar @[sx,sy]>>  => <wire A_SRCO of <device *strVar @ [sx,sy_skew]>>,
                <pin S_SRCI of <device *strVar @[sx,sy]>>  => <wire S_SRCO of <device *strVar @ [sx,sy_skew]>>
             );
        }
        else
        {
            connect
             (
                <pin L7IN of <device *strVar @[sx,sy]>>    => <wire L7OUT of <device *strVar @ [sx,sy_skew]>>
             );            
         }
    }
    else
    {
        if(flag_ud==1)
        {
            connect
             (
                <pin A_CECI of <device *strVar @[sx,sy]>>  => <wire TIEHI of <device *strVar @ [sx,sy]>>,
                <pin S_CECI of <device *strVar @[sx,sy]>>  => <wire TIEHI of <device *strVar @ [sx,sy]>>,
                <pin A_CIN of <device *strVar @[sx,sy]>>   => <wire TIEHI of <device *strVar @ [sx,sy]>>,
                <pin S_CIN of <device *strVar @[sx,sy]>>   => <wire TIEHI of <device *strVar @ [sx,sy]>>,
                <pin A_RSCI of <device *strVar @[sx,sy]>>  => <wire TIEHI of <device *strVar @ [sx,sy]>>,
                <pin S_RSCI of <device *strVar @[sx,sy]>>  => <wire TIEHI of <device *strVar @ [sx,sy]>>,
                <pin A_SRCI of <device *strVar @[sx,sy]>>  => <wire TIEHI of <device *strVar @ [sx,sy]>>,
                <pin S_SRCI of <device *strVar @[sx,sy]>>  => <wire TIEHI of <device *strVar @ [sx,sy]>>
             );
            }
        else
        {
            connect
            (
               <pin L7IN of <device *strVar @[sx,sy]>>    => <wire TIEHI of <device *strVar @ [sx,sy]>>
            );
        }
    } 
  
}//end of function connect_CLM_input
/****************************************************************************************************
*****************************************************************************************************/
function connect_APM_input
(
    unsigned int tx,
    unsigned int index,
    unsigned int l_apm_tile_y[19:0],
    unsigned int l_apm_tile_y_h[15:0],
    unsigned int flag_ud,
    unsigned int flag_y
)
{
    unsigned int sx,ty,sy,ty_skew,sy_skew;
    sx = tx * NUM_GRID_X + 2;
    ty = (flag_y==0) ? l_apm_tile_y[index] :
                       l_apm_tile_y_h[index] ;
    sy = ty * NUM_GRID_Y;
    
    if(index!=0)
    {

        ty_skew =  (flag_y==0) ? l_apm_tile_y[index - 1] : 
                                l_apm_tile_y_h[index - 1] ; 

        sy_skew = ty_skew * NUM_GRID_Y ;

        if(flag_ud==1)
        {
            connect
             (
                <pin XI of <device APM_TILE @[sx,sy]>>   => <wire XO of <device APM_TILE @ [sx,sy_skew]>>,
                <pin PCI of <device APM_TILE @[sx,sy]>>  => <wire PCO of <device APM_TILE @ [sx,sy_skew]>>,
                <pin PI of <device APM_TILE @[sx,sy]>>   => <wire PO of <device APM_TILE @ [sx,sy_skew]>>
             );
        }
        else
        {
             connect
             (
                <pin XBI of <device APM_TILE @[sx,sy]>>   => <wire XBO of <device APM_TILE @ [sx,sy_skew]>>
             );            
         }
    }
    else
    {
        if(flag_ud==1)
        {
            connect
             (
                <pin XI[17] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_1 of <device APM_TILE @ [sx,sy]>>,
                <pin XI[16] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_1 of <device APM_TILE @ [sx,sy]>>,
                <pin XI[15] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_1 of <device APM_TILE @ [sx,sy]>>,
                <pin XI[14] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_1 of <device APM_TILE @ [sx,sy]>>,
                <pin XI[13] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_1 of <device APM_TILE @ [sx,sy]>>,
                <pin XI[12] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_1 of <device APM_TILE @ [sx,sy]>>,
                <pin XI[11] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_1 of <device APM_TILE @ [sx,sy]>>,
                <pin XI[10] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_1 of <device APM_TILE @ [sx,sy]>>,
                <pin XI[9] of <device APM_TILE @[sx,sy]>>    => <wire TIELO_1 of <device APM_TILE @ [sx,sy]>>,
                <pin XI[8] of <device APM_TILE @[sx,sy]>>    => <wire TIELO_1 of <device APM_TILE @ [sx,sy]>>,
                <pin XI[7] of <device APM_TILE @[sx,sy]>>    => <wire TIELO_1 of <device APM_TILE @ [sx,sy]>>,
                <pin XI[6] of <device APM_TILE @[sx,sy]>>    => <wire TIELO_1 of <device APM_TILE @ [sx,sy]>>,
                <pin XI[5] of <device APM_TILE @[sx,sy]>>    => <wire TIELO_1 of <device APM_TILE @ [sx,sy]>>,
                <pin XI[4] of <device APM_TILE @[sx,sy]>>    => <wire TIELO_1 of <device APM_TILE @ [sx,sy]>>,
                <pin XI[3] of <device APM_TILE @[sx,sy]>>    => <wire TIELO_1 of <device APM_TILE @ [sx,sy]>>,
                <pin XI[2] of <device APM_TILE @[sx,sy]>>    => <wire TIELO_1 of <device APM_TILE @ [sx,sy]>>,
                <pin XI[1] of <device APM_TILE @[sx,sy]>>    => <wire TIELO_1 of <device APM_TILE @ [sx,sy]>>,
                <pin XI[0] of <device APM_TILE @[sx,sy]>>    => <wire TIELO_1 of <device APM_TILE @ [sx,sy]>>,
                <pin PCI of <device APM_TILE @[sx,sy]>>      => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[0] of <device APM_TILE @[sx,sy]>>    => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[1] of <device APM_TILE @[sx,sy]>>    => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[2] of <device APM_TILE @[sx,sy]>>    => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[3] of <device APM_TILE @[sx,sy]>>    => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[4] of <device APM_TILE @[sx,sy]>>    => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[5] of <device APM_TILE @[sx,sy]>>    => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[6] of <device APM_TILE @[sx,sy]>>    => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[7] of <device APM_TILE @[sx,sy]>>    => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[8] of <device APM_TILE @[sx,sy]>>    => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[9] of <device APM_TILE @[sx,sy]>>    => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[10] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[11] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[12] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[13] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[14] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[15] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[16] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[17] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[18] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[19] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[20] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[21] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[22] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[23] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_2 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[24] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[25] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[26] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[27] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[28] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[29] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[30] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[31] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[32] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[33] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[34] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[35] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[36] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[37] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[38] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[39] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[40] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[41] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[42] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[43] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[44] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[45] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[46] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>,
                <pin PI[47] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_3 of <device APM_TILE @ [sx,sy]>>
             );
        }
        else
        {
            connect
            (
                <pin XBI[0] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_0 of <device APM_TILE @ [sx,sy]>>,
                <pin XBI[1] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_0 of <device APM_TILE @ [sx,sy]>>,
                <pin XBI[2] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_0 of <device APM_TILE @ [sx,sy]>>,
                <pin XBI[3] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_0 of <device APM_TILE @ [sx,sy]>>,
                <pin XBI[4] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_0 of <device APM_TILE @ [sx,sy]>>,
                <pin XBI[5] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_0 of <device APM_TILE @ [sx,sy]>>,
                <pin XBI[6] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_0 of <device APM_TILE @ [sx,sy]>>,
                <pin XBI[7] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_0 of <device APM_TILE @ [sx,sy]>>,
                <pin XBI[8] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_0 of <device APM_TILE @ [sx,sy]>>,
                <pin XBI[9] of <device APM_TILE @[sx,sy]>>   => <wire TIELO_0 of <device APM_TILE @ [sx,sy]>>,
                <pin XBI[10] of <device APM_TILE @[sx,sy]>>  => <wire TIELO_0 of <device APM_TILE @ [sx,sy]>>,
                <pin XBI[11] of <device APM_TILE @[sx,sy]>>  => <wire TIELO_0 of <device APM_TILE @ [sx,sy]>>,
                <pin XBI[12] of <device APM_TILE @[sx,sy]>>  => <wire TIELO_0 of <device APM_TILE @ [sx,sy]>>,
                <pin XBI[13] of <device APM_TILE @[sx,sy]>>  => <wire TIELO_0 of <device APM_TILE @ [sx,sy]>>,
                <pin XBI[14] of <device APM_TILE @[sx,sy]>>  => <wire TIELO_0 of <device APM_TILE @ [sx,sy]>>,
                <pin XBI[15] of <device APM_TILE @[sx,sy]>>  => <wire TIELO_0 of <device APM_TILE @ [sx,sy]>>,
                <pin XBI[16] of <device APM_TILE @[sx,sy]>>  => <wire TIELO_0 of <device APM_TILE @ [sx,sy]>>,
                <pin XBI[17] of <device APM_TILE @[sx,sy]>>  => <wire TIELO_0 of <device APM_TILE @ [sx,sy]>>
            );
        }
    }
}//end of function connect_APM_input
/***********************************************************************************************************************
************************************************************************************************************************/
function connect_iob_gs_input //control signals connect : MODE GOUTEN UPDATA_DR SHIFT_DR
(
    unsigned int tx_ccs , 
    unsigned int ty_ccs ,
    unsigned int tx_ana , 
    unsigned int ty_ana ,
    unsigned int tx_iob0 ,
    unsigned int ty_iob0 ,
    unsigned int tx_iob1 ,
    unsigned int ty_iob1 ,
    unsigned int tx_iob2 ,
    unsigned int ty_iob2 ,
    unsigned int tx_iob3 ,
    unsigned int ty_iob3 ,
    unsigned int tx_hsst ,
    unsigned int ty_hsst ,
    string dev_ccs,
    string dev_analog,
    unsigned int flag_hsst,
    unsigned int flag_ana_plus2
) 
{
    int sx_ccs = tx_ccs * NUM_GRID_X ;
    int sy_ccs = ty_ccs * NUM_GRID_Y;

    int sx_ana = (flag_ana_plus2 == 0) ? tx_ana * NUM_GRID_X : tx_ana * NUM_GRID_X + 2;
    int sy_ana = ty_ana * NUM_GRID_Y;

    int sx_iob0 = tx_iob0 * NUM_GRID_X;
    int sy_iob0 = ty_iob0 * NUM_GRID_Y;

    int sx_iob1 = tx_iob1 * NUM_GRID_X;
    int sy_iob1 = ty_iob1 * NUM_GRID_Y;

    int sx_iob2 = tx_iob2 * NUM_GRID_X;
    int sy_iob2 = ty_iob2 * NUM_GRID_Y;

    int sx_iob3 = tx_iob3 * NUM_GRID_X;
    int sy_iob3 = ty_iob3 * NUM_GRID_Y;

    int sx_hsst = tx_hsst * NUM_GRID_X;
    int sy_hsst = ty_hsst * NUM_GRID_Y;

    string ccs = dev_ccs;
    string analog = dev_analog;
    string hsst = "HSST_TILE";
    string iob0 = "IOB0_TILE";
    string iob1 = "IOB1_TILE";
    string iob2 = "IOB2_TILE";
    string iob3 = "IOB3_TILE";

    connect
    (
        <pin S11_BSRRST of <device *iob1 @[sx_iob1,sy_iob1]>> => <wire BUS_BSCAN_OUT[4]  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin BSMODE1    of <device *iob1 @[sx_iob1,sy_iob1]>> => <wire BUS_BSCAN_OUT[2]  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin BSMODE2    of <device *iob1 @[sx_iob1,sy_iob1]>> => <wire BUS_BSCAN_OUT[3]  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin BSMODE3    of <device *iob1 @[sx_iob1,sy_iob1]>> => <wire BUS_BSCAN_OUT[15] of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin GOUTEN     of <device *iob1 @[sx_iob1,sy_iob1]>> => <wire BUS_BSCAN_OUT[13] of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin UPDATE_DR  of <device *iob1 @[sx_iob1,sy_iob1]>> => <wire BUS_BSCAN_OUT[6]  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin SHIFT_DR   of <device *iob1 @[sx_iob1,sy_iob1]>> => <wire BUS_BSCAN_OUT[5]  of <device *ccs @[sx_ccs,sy_ccs]>>,

        <pin S11_BSRRST of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire BUS_BSCAN_OUT[4]  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin BSMODE1    of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire BUS_BSCAN_OUT[2]  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin BSMODE2    of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire BUS_BSCAN_OUT[3]  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin BSMODE3    of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire BUS_BSCAN_OUT[15] of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin GOUTEN     of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire BUS_BSCAN_OUT[13] of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin UPDATE_DR  of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire BUS_BSCAN_OUT[6]  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin SHIFT_DR   of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire BUS_BSCAN_OUT[5]  of <device *ccs @[sx_ccs,sy_ccs]>>,

        <pin S11_BSRRST of <device *iob0 @[sx_iob0,sy_iob0]>> => <wire S11_BSRRST_O of <device *iob1 @[sx_iob1,sy_iob1]>>,
        <pin BSMODE1    of <device *iob0 @[sx_iob0,sy_iob0]>> => <wire BSMODE1_O    of <device *iob1 @[sx_iob1,sy_iob1]>>,
        <pin BSMODE2    of <device *iob0 @[sx_iob0,sy_iob0]>> => <wire BSMODE2_O    of <device *iob1 @[sx_iob1,sy_iob1]>>,
        <pin BSMODE3    of <device *iob0 @[sx_iob0,sy_iob0]>> => <wire BSMODE3_O    of <device *iob1 @[sx_iob1,sy_iob1]>>,
        <pin GOUTEN     of <device *iob0 @[sx_iob0,sy_iob0]>> => <wire GOUTEN_O     of <device *iob1 @[sx_iob1,sy_iob1]>>,
        <pin UPDATE_DR  of <device *iob0 @[sx_iob0,sy_iob0]>> => <wire UPDATE_DR_O  of <device *iob1 @[sx_iob1,sy_iob1]>>,
        <pin SHIFT_DR   of <device *iob0 @[sx_iob0,sy_iob0]>> => <wire SHIFT_DR_O   of <device *iob1 @[sx_iob1,sy_iob1]>>,
                                                                                 
        <pin S11_BSRRST of <device *iob3 @[sx_iob3,sy_iob3]>> => <wire S11_BSRRST_O of <device *iob2 @[sx_iob2,sy_iob2]>>,
        <pin BSMODE1    of <device *iob3 @[sx_iob3,sy_iob3]>> => <wire BSMODE1_O    of <device *iob2 @[sx_iob2,sy_iob2]>>,
        <pin BSMODE2    of <device *iob3 @[sx_iob3,sy_iob3]>> => <wire BSMODE2_O    of <device *iob2 @[sx_iob2,sy_iob2]>>,
        <pin BSMODE3    of <device *iob3 @[sx_iob3,sy_iob3]>> => <wire BSMODE3_O    of <device *iob2 @[sx_iob2,sy_iob2]>>,
        <pin GOUTEN     of <device *iob3 @[sx_iob3,sy_iob3]>> => <wire GOUTEN_O     of <device *iob2 @[sx_iob2,sy_iob2]>>,
        <pin UPDATE_DR  of <device *iob3 @[sx_iob3,sy_iob3]>> => <wire UPDATE_DR_O  of <device *iob2 @[sx_iob2,sy_iob2]>>,
        <pin SHIFT_DR   of <device *iob3 @[sx_iob3,sy_iob3]>> => <wire SHIFT_DR_O   of <device *iob2 @[sx_iob2,sy_iob2]>>,

        <pin POR_N      of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire POR_N_2             of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin POR_N      of <device *iob3 @[sx_iob3,sy_iob3]>> => <wire POR_N             of <device *analog @[sx_ana,sy_ana]>>,
        <pin POR_N      of <device *iob0 @[sx_iob0,sy_iob0]>> => <wire POR_N_O      of <device *iob3 @[sx_iob3,sy_iob3]>>,
        <pin POR_N      of <device *iob1 @[sx_iob1,sy_iob1]>> => <wire POR_N_O      of <device *iob2 @[sx_iob2,sy_iob2]>>
    );

    if(flag_hsst==1)
    {
        connect
        (
            <pin MODE_1    of <device *hsst @[sx_hsst,sy_hsst]>> => <wire BSMODE1_BUF1    of <device *iob0 @[sx_iob0,sy_iob0]>>,
            <pin SHIFTDR    of <device *hsst @[sx_hsst,sy_hsst]>> => <wire  SHIFT_DR_BUF1   of <device *iob0 @[sx_iob0,sy_iob0]>>,
            <pin UPDATEDR    of <device *hsst @[sx_hsst,sy_hsst]>> => <wire UPDATE_DR_BUF1    of <device *iob0 @[sx_iob0,sy_iob0]>>,
            <pin JRST    of <device *hsst @[sx_hsst,sy_hsst]>> => <wire S11_BSRRST_BUF1   of <device *iob0 @[sx_iob0,sy_iob0]>>
        );

        connect
        (
            <pin  BS_ACMODE   of <device *hsst @[sx_hsst,sy_hsst]>> => <wire  BUS_BSCAN_OUT[0]   of <device *ccs @[sx_ccs,sy_ccs]>>,
            <pin  BS_AC_TS   of <device *hsst @[sx_hsst,sy_hsst]>> => <wire   BUS_BSCAN_OUT[1]  of <device *ccs @[sx_ccs,sy_ccs]>>,
            <pin  BS_MEMINIT   of <device *hsst @[sx_hsst,sy_hsst]>> => <wire BUS_BSCAN_OUT[14]    of <device *ccs @[sx_ccs,sy_ccs]>>
        );
    }

    connect
    (
        <pin CCS_DOUT   of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire DOUT  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin  CFGMOD16  of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire BUS_BSCAN_OUT[7]  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin  CFGMOD_E  of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire BUS_BSCAN_OUT[9]  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin  CFGMOD  of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire BUS_BSCAN_OUT[10]  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin  CFGMOD_INIT  of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire BUS_BSCAN_OUT[11]  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin  CFGMOD_NP  of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire BUS_BSCAN_OUT[12]  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin  CFGMOD_E_NP  of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire BUS_BSCAN_OUT[17]  of <device *ccs @[sx_ccs,sy_ccs]>>,

        <pin  FCLK  of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire FCLK  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin  FCS_N  of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire FCS_N  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin  IDONE  of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire DONE  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin  MOSI  of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire MOSI  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin  INIT_COMPLETE  of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire INIT_COMPLETE  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin  OUT_EN_CCLK   of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire OUT_EN_CCLK   of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin  OUT_EN_CS_N   of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire OUT_EN_CS_N   of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin  OUT_EN_D15_8  of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire OUT_EN_D15_8  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin  OUT_EN_D7_0   of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire OUT_EN_D7_0   of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin  OUT_EN_FCS_N  of <device *iob2 @[sx_iob2,sy_iob2]>> => <wire OUT_EN_FCS_N  of <device *ccs @[sx_ccs,sy_ccs]>>,

        <pin  CFGMOD  of <device *iob1 @[sx_iob1,sy_iob1]>> => <wire CFGMOD  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin  CFGMOD_NP  of <device *iob1 @[sx_iob1,sy_iob1]>> => <wire BUS_BSCAN_OUT[12]  of <device *ccs @[sx_ccs,sy_ccs]>>,
//        <pin  FCS_N  of <device *iob1 @[sx_iob1,sy_iob1]>> => <wire FCLK  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin DAISY_O   of <device *iob1 @[sx_iob1,sy_iob1]>> => <wire DAISY_O  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin FCE_N            of <device *iob1 @[sx_iob1,sy_iob1]>> => <wire FCE_N           of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin FOE_N          of <device *iob1 @[sx_iob1,sy_iob1]>> => <wire FOE_N         of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin FWE_N          of <device *iob1 @[sx_iob1,sy_iob1]>> => <wire FWE_N         of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin OUT_EN_DAISY_O   of <device *iob1 @[sx_iob1,sy_iob1]>> => <wire OUT_EN_DAISY_O  of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin OUT_EN_DC        of <device *iob1 @[sx_iob1,sy_iob1]>> => <wire OUT_EN_DC       of <device *ccs @[sx_ccs,sy_ccs]>>,
        <pin OUT_EN_FCE_N     of <device *iob1 @[sx_iob1,sy_iob1]>> => <wire OUT_EN_FCE_N    of <device *ccs @[sx_ccs,sy_ccs]>>
    );

    &wire ntRef_ntRST_N = <wire ntRST_N>;
    &wire ntRef_ntCMPCS_B = <wire ntCMPCS_B>;
    &wire ntRef_ntCFG_DONE = <wire ntCFG_DONE>;
    connect
    (
        <pin CFG_DONE of <device *iob2  @[sx_iob2,sy_iob2]>>             => ntRef_ntCFG_DONE,
        <pin RST_N of <device *iob2 @[sx_iob2,sy_iob2]>>             => ntRef_ntRST_N,
        <pin CMPCS_B of <device *iob2 @[sx_iob2,sy_iob2]>>             => ntRef_ntCMPCS_B
    );

}//end of function connect_iob_gs_input

/****************************************************************************************************
*****************************************************************************************************/
function connect_bias_iob(unsigned int tx02, tx1, tx3, ty0, ty2, ty13, tx_ana, ty_ana,flag_ana_plus2, string dev_analog)
{
    int sx0 = tx02 * NUM_GRID_X ;
    int sx1 = tx1 * NUM_GRID_X ;
    int sx2 = tx02 * NUM_GRID_X ;
    int sx3 = tx3 * NUM_GRID_X ;

    int sy0 = ty0 * NUM_GRID_Y;
    int sy1 = ty13 * NUM_GRID_Y;
    int sy2 = ty2 * NUM_GRID_Y;
    int sy3 = ty13 * NUM_GRID_Y;

    int sx_ana = (flag_ana_plus2==0) ? tx_ana * NUM_GRID_X : tx_ana * NUM_GRID_X + 2;
    int sy_ana = ty_ana * NUM_GRID_Y;

    string analog = dev_analog ;

      connect
        (
          <pin ICC10U of <device IOB0_TILE@[sx0,sy0]>> => <wire ICONST10U[7] of <device *analog @[sx_ana,sy_ana]>>,
          <pin ICC10U of <device IOB1_TILE@[sx1,sy1]>> => <wire ICONST10U[6] of <device *analog  @[sx_ana,sy_ana]>>,
          <pin ICC10U of <device IOB2_TILE@[sx2,sy2]>> => <wire ICONST10U[5] of <device *analog @[sx_ana,sy_ana]>>,
          <pin ICC10U of <device IOB3_TILE@[sx3,sy3]>> => <wire ICONST10U[4] of <device *analog @[sx_ana,sy_ana]>>,

          <pin IPO10U of <device IOB0_TILE@[sx0,sy0]>> => <wire IPOLY10U[4] of <device *analog @[sx_ana,sy_ana]>>,
          <pin IPO10U of <device IOB2_TILE@[sx2,sy2]>> => <wire IPOLY10U[3] of <device *analog @[sx_ana,sy_ana]>>
        );
}

/*******************************************************************
********************************************************************/
function connect_BLSR_input_pgl25g  // ccs to blsr region sel,rw enable
(
    unsigned int tx_blsr_r, 
    unsigned int tx_blsr_l, 
    unsigned int tx_ccs, 
    unsigned int ty_ccs,
    unsigned int tx_ana, 
    unsigned int ty_ana,
    string dev_ccs,
    string dev_blsr1,
    string dev_blsr2,
    string dev_analog
)
{
    string ccs = dev_ccs ;
    string blsr1 = dev_blsr1 ;
    string blsr2 = dev_blsr2 ;
    string analog = dev_analog ;

    int sx_blsr_l = tx_blsr_l * NUM_GRID_X;
    int sx_blsr_r = tx_blsr_r * NUM_GRID_X;
    
    int sx_ccs = tx_ccs * NUM_GRID_X;
    int sy_ccs = ty_ccs * NUM_GRID_Y;

    int sx_ana = tx_ana * NUM_GRID_X;
    int sy_ana = ty_ana * NUM_GRID_Y;

    int sy_blsr1 =  1*NUM_GRID_BLSR_Y + NUM_GRID_Y ;
    int sy_blsr2 =  0*NUM_GRID_BLSR_Y + NUM_GRID_Y ;

    connect
    (
      <pin BLSR_SEL_UP of <device *blsr2 @ [sx_blsr_r,sy_blsr2]>>    => <wire BLSR_SEL_O[3] of <device *blsr2 @ [sx_blsr_r,sy_blsr2]>>,
      <pin BLSR_SEL_DN of <device *blsr2 @ [sx_blsr_r,sy_blsr2]>>    => <wire BLSHFT_SEL_O[3] of <device *ccs @ [sx_ccs,sy_ccs]>>,
      <pin REGION_RW_UP of <device *blsr2 @ [sx_blsr_r,sy_blsr2]>>   => <wire REGION_RW_EN_O[3] of <device *blsr2 @ [sx_blsr_r,sy_blsr2]>>,
      <pin REGION_RW_DN of <device *blsr2 @ [sx_blsr_r,sy_blsr2]>>   => <wire REGION_RW_EN_O[3] of <device *ccs @ [sx_ccs,sy_ccs]>>,
      <pin REGION_RW_I of <device *blsr2 @ [sx_blsr_r,sy_blsr2]>>    => <wire REGION_RW_EN_O[3] of <device *blsr2 @ [sx_blsr_r,sy_blsr2]>>,
      <pin REGION_SEL_I of <device *blsr2 @ [sx_blsr_r,sy_blsr2]>>   => <wire WLSR_SEL_O[3] of <device *blsr2 @ [sx_blsr_r,sy_blsr2]>>,
      <pin SEL_OUT[0] of <device *blsr2 @ [sx_blsr_r,sy_blsr2]>>     => <wire BLSR_SEL_O[3] of <device *blsr2 @ [sx_blsr_r,sy_blsr2]>>,
      <pin SEL_OUT[1] of <device *blsr2 @ [sx_blsr_r,sy_blsr2]>>     => <wire BLSR_SEL_O[1] of <device *blsr2 @ [sx_blsr_r,sy_blsr2]>>,
      <pin SEL_OUT[2] of <device *blsr2 @ [sx_blsr_r,sy_blsr2]>>     => <wire BLSR_SEL_O[2] of <device *blsr2 @ [sx_blsr_r,sy_blsr2]>>,
      <pin SEL_OUT[3] of <device *blsr2 @ [sx_blsr_r,sy_blsr2]>>     => <wire BLSR_SEL_O[0] of <device *blsr2 @ [sx_blsr_r,sy_blsr2]>>,

      <pin BLSR_SEL_UP of <device *blsr2 @ [sx_blsr_l,sy_blsr2]>>    => <wire BLSR_SEL_O[2] of <device *blsr2 @ [sx_blsr_l,sy_blsr2]>>,
      <pin BLSR_SEL_DN of <device *blsr2 @ [sx_blsr_l,sy_blsr2]>>    => <wire BLSHFT_SEL_OL[2] of <device *ccs @ [sx_ccs,sy_ccs]>>,
      <pin REGION_RW_UP of <device *blsr2 @ [sx_blsr_l,sy_blsr2]>>   => <wire REGION_RW_EN_O[2] of <device *blsr2 @ [sx_blsr_l,sy_blsr2]>>,
      <pin REGION_RW_DN of <device *blsr2 @ [sx_blsr_l,sy_blsr2]>>   => <wire REGION_RW_EN_OL[2] of <device *ccs @ [sx_ccs,sy_ccs]>>,
      <pin REGION_RW_I of <device *blsr2 @ [sx_blsr_l,sy_blsr2]>>    => <wire REGION_RW_EN_O[2] of <device *blsr2 @ [sx_blsr_l,sy_blsr2]>>,
      <pin REGION_SEL_I of <device *blsr2 @ [sx_blsr_l,sy_blsr2]>>   => <wire WLSR_SEL_O[2] of <device *blsr2 @ [sx_blsr_l,sy_blsr2]>>,
      <pin SEL_OUT[0] of <device *blsr2 @ [sx_blsr_l,sy_blsr2]>>     => <wire BLSR_SEL_O[2] of <device *blsr2 @ [sx_blsr_l,sy_blsr2]>>,
      <pin SEL_OUT[1] of <device *blsr2 @ [sx_blsr_l,sy_blsr2]>>     => <wire BLSR_SEL_O[0] of <device *blsr2 @ [sx_blsr_l,sy_blsr2]>>,
      <pin SEL_OUT[2] of <device *blsr2 @ [sx_blsr_l,sy_blsr2]>>     => <wire TIEL1 of <device *blsr2 @ [sx_blsr_l,sy_blsr2]>>,
      <pin SEL_OUT[3] of <device *blsr2 @ [sx_blsr_l,sy_blsr2]>>     => <wire TIEL1 of <device *blsr2 @ [sx_blsr_l,sy_blsr2]>>,

      <pin BLSR_SEL_UP of <device *blsr1 @ [sx_blsr_r,sy_blsr1]>>    => <wire BLSR_SEL_O[1] of <device *blsr1 @ [sx_blsr_r,sy_blsr1]>>,
      <pin BLSR_SEL_DN of <device *blsr1 @ [sx_blsr_r,sy_blsr1]>>    => <wire BLSR_SEL_O[1] of <device *blsr2 @ [sx_blsr_r,sy_blsr2]>>,
      <pin REGION_RW_UP of <device *blsr1 @ [sx_blsr_r,sy_blsr1]>>   => <wire REGION_RW_EN_O[1] of <device *blsr1 @ [sx_blsr_r,sy_blsr1]>>,
      <pin REGION_RW_DN of <device *blsr1 @ [sx_blsr_r,sy_blsr1]>>   => <wire REGION_RW_EN_O[1] of <device *blsr2 @ [sx_blsr_r,sy_blsr2]>>,
      <pin REGION_RW_I of <device *blsr1 @ [sx_blsr_r,sy_blsr1]>>    => <wire REGION_RW_EN_O[1] of <device *blsr1 @ [sx_blsr_r,sy_blsr1]>>,
      <pin REGION_SEL_I of <device *blsr1 @ [sx_blsr_r,sy_blsr1]>>   => <wire WLSR_SEL_O[1] of <device *blsr1 @ [sx_blsr_r,sy_blsr1]>>,
      <pin SEL_OUT[0] of <device *blsr1 @ [sx_blsr_r,sy_blsr1]>>     => <wire BLSR_SEL_O[1] of <device *blsr1 @ [sx_blsr_r,sy_blsr1]>>,
      <pin SEL_OUT[1] of <device *blsr1 @ [sx_blsr_r,sy_blsr1]>>     => <wire TIEL1 of <device *blsr1 @ [sx_blsr_r,sy_blsr1]>>,
      <pin SEL_OUT[2] of <device *blsr1 @ [sx_blsr_r,sy_blsr1]>>     => <wire TIEL1 of <device *blsr1 @ [sx_blsr_r,sy_blsr1]>>,
      <pin SEL_OUT[3] of <device *blsr1 @ [sx_blsr_r,sy_blsr1]>>     => <wire TIEL1 of <device *blsr1 @ [sx_blsr_r,sy_blsr1]>>,

      <pin BLSR_SEL_UP of <device *blsr1 @ [sx_blsr_l,sy_blsr1]>>    => <wire BLSR_SEL_O[0] of <device *blsr1 @ [sx_blsr_l,sy_blsr1]>>,
      <pin BLSR_SEL_DN of <device *blsr1 @ [sx_blsr_l,sy_blsr1]>>    => <wire BLSR_SEL_O[0] of <device *blsr2 @ [sx_blsr_l,sy_blsr2]>>,
      <pin REGION_RW_UP of <device *blsr1 @ [sx_blsr_l,sy_blsr1]>>   => <wire REGION_RW_EN_O[0] of <device *blsr1 @ [sx_blsr_l,sy_blsr1]>>,
      <pin REGION_RW_DN of <device *blsr1 @ [sx_blsr_l,sy_blsr1]>>   => <wire REGION_RW_EN_O[0] of <device *blsr2 @ [sx_blsr_l,sy_blsr2]>>,
      <pin REGION_RW_I of <device *blsr1 @ [sx_blsr_l,sy_blsr1]>>    => <wire REGION_RW_EN_O[0] of <device *blsr1 @ [sx_blsr_l,sy_blsr1]>>,
      <pin REGION_SEL_I of <device *blsr1 @ [sx_blsr_l,sy_blsr1]>>   => <wire WLSR_SEL_O[0] of <device *blsr1 @ [sx_blsr_l,sy_blsr1]>>,
      <pin SEL_OUT[0] of <device *blsr1 @ [sx_blsr_l,sy_blsr1]>>     => <wire BLSR_SEL_O[0] of <device *blsr1 @ [sx_blsr_l,sy_blsr1]>>,
      <pin SEL_OUT[1] of <device *blsr1 @ [sx_blsr_l,sy_blsr1]>>     => <wire TIEL1 of <device *blsr1 @ [sx_blsr_l,sy_blsr1]>>,
      <pin SEL_OUT[2] of <device *blsr1 @ [sx_blsr_l,sy_blsr1]>>     => <wire TIEL1 of <device *blsr1 @ [sx_blsr_l,sy_blsr1]>>,
      <pin SEL_OUT[3] of <device *blsr1 @ [sx_blsr_l,sy_blsr1]>>     => <wire TIEL1 of <device *blsr1 @ [sx_blsr_l,sy_blsr1]>>,

      <pin IREF10UA of <device BLSR2_TILE @ [sx_blsr_r,sy_blsr2]>>       => <wire ICONST10U[0] of <device *analog @ [sx_ana,sy_ana]>>,
      <pin IREF10UA of <device BLSR2_TILE @ [sx_blsr_l,sy_blsr2]>>       => <wire ICONST10U[1] of <device *analog @ [sx_ana,sy_ana]>>,
      <pin IREF10UA of <device BLSR1_TILE @ [sx_blsr_r,sy_blsr1]>>       => <wire ICONST10U[2] of <device *analog @ [sx_ana,sy_ana]>>,
      <pin IREF10UA of <device BLSR1_TILE @ [sx_blsr_l,sy_blsr1]>>       => <wire ICONST10U[3] of <device *analog @ [sx_ana,sy_ana]>>

    );

}//end of function connect_BLSR_input_pgl25g
/****************************************************************************************************
*****************************************************************************************************/
function connect_BLSR_input_loop
(
   unsigned int region_index,
   unsigned int tx_blsr,
   unsigned int tx_blsr_l,
   unsigned int tx_ccs,
   unsigned int ty_ccs,
   unsigned int tx_ana,
   unsigned int ty_ana,
   unsigned int tx_wlsr2,
   unsigned int tx_iob,
   unsigned int ty_iob,
   string dev_blsr,
   string dev_blsr1,
   string dev_blsr2,
   string dev_analog,
   unsigned int flag_lr, // 1 : l 
   unsigned int flag_ud, // 1 : u
   unsigned int flag_user // 1 : yes
)
{
  int sx = tx_blsr * NUM_GRID_X;
  int sy = region_index * NUM_GRID_BLSR_Y + NUM_GRID_Y;

  int sx_wlsr2 = tx_wlsr2 * NUM_GRID_X;
  int sy_wlsr2 = MID_TILE_REGION * NUM_GRID_Y + region_index * NUM_TILES_REGION * NUM_GRID_Y ;

  int sx_iob = tx_iob * NUM_GRID_X;
  int sy_iob = ty_iob * NUM_GRID_Y;

  int sx_ccs = tx_ccs * NUM_GRID_X ;
  int sy_ccs = ty_ccs * NUM_GRID_Y ;

  int sx_ana = tx_ana * NUM_GRID_X ;
  int sy_ana = ty_ana * NUM_GRID_Y ;

  int sx_blsr_l = tx_blsr_l * NUM_GRID_X ;

  string blsr = dev_blsr ;
  string blsr1 = dev_blsr1 ;
  string blsr2 = dev_blsr2 ;
  string analog = dev_analog ;

  if(flag_ud==1)
  {
  connect
    (
      <pin COL_INC_I of <device *blsr @ [sx,sy]>>         => (flag_lr==1) ? <wire COL_INC_OUT of <device WLSR2_TILE @ [sx_wlsr2,sy_wlsr2]>>
                                                                           : <wire COL_INC_OUT[1] of <device IOB1_TILE @ [sx_iob,sy_iob]>>,
      <pin NONDRM_REG_INC_I of <device *blsr @ [sx,sy]>>  => (flag_lr==1) ? <wire  REGION_INC of <device WLSR2_TILE @ [sx_wlsr2,sy_wlsr2]>>
                                                                           : <wire REGION_INC[1] of <device IOB1_TILE @ [sx_iob,sy_iob]>>
    );
  }
  else
  {
  connect
    (
      <pin COL_INC_I of <device *blsr @ [sx,sy]>>         => (flag_lr==1) ? <wire COL_INC_OUT of <device WLSR2_TILE @ [sx_wlsr2,sy_wlsr2]>>
                                                                           : <wire COL_INC_OUT[0] of <device IOB1_TILE @ [sx_iob,sy_iob]>>,
      <pin NONDRM_REG_INC_I of <device *blsr @ [sx,sy]>>  => (flag_lr==1) ? <wire REGION_INC of <device WLSR2_TILE @ [sx_wlsr2,sy_wlsr2]>>
                                                                           : <wire REGION_INC[0] of <device IOB1_TILE @ [sx_iob,sy_iob]>>
    );
  }

  if(flag_ud==0)
  {
    connect
      (
        <pin DATA_IN of <device *blsr2 @ [sx,sy]>>       => (flag_lr==0) ? <wire DATA_O of <device CCS_TILE @ [sx_ccs,sy_ccs]>> :
                                                                           <wire DATA_OL of <device CCS_TILE @ [sx_ccs,sy_ccs]>> ,
        <pin CLK_IN of <device *blsr2 @ [sx,sy]>>        => (flag_lr==0) ? <wire BLSRCLK_O of <device CCS_TILE @ [sx_ccs,sy_ccs]>> :
                                                                           <wire  BLSRCLK_OL of <device CCS_TILE @ [sx_ccs,sy_ccs]>> ,
        <pin ERASE_EN of <device *blsr2 @ [sx,sy]>>      => (flag_lr==0) ? <wire ERASE_EN_O of <device CCS_TILE @ [sx_ccs,sy_ccs]>> :
                                                                           <wire ERASE_EN_OL of <device CCS_TILE @ [sx_ccs,sy_ccs]>> ,
        <pin POR_ERASE_N of <device *blsr2 @ [sx,sy]>>   => (flag_lr==0) ? <wire POR_N_O of <device CCS_TILE @ [sx_ccs,sy_ccs]>> :
                                                                           <wire POR_N_OL of <device CCS_TILE @ [sx_ccs,sy_ccs]>> ,
        <pin PRECHG of <device *blsr2 @ [sx,sy]>>        => (flag_lr==0) ? <wire PRECHG_O of <device CCS_TILE @ [sx_ccs,sy_ccs]>> :
                                                                           <wire PRECHG_OL of <device CCS_TILE @ [sx_ccs,sy_ccs]>> ,
        <pin PROG_CAP of <device *blsr2 @ [sx,sy]>>      => (flag_lr==0) ? <wire PROG_CAP_O of <device CCS_TILE @ [sx_ccs,sy_ccs]>> :
                                                                           <wire PROG_CAP_OL of <device CCS_TILE @ [sx_ccs,sy_ccs]>> ,
        <pin PROG_ON of <device *blsr2 @ [sx,sy]>>       => (flag_lr==0) ? <wire PROG_ON_O of <device CCS_TILE @ [sx_ccs,sy_ccs]>> :
                                                                           <wire PROG_ON_OL of <device CCS_TILE @ [sx_ccs,sy_ccs]>> ,
        <pin READ of <device *blsr2 @ [sx,sy]>>          => (flag_lr==0) ? <wire READ_O of <device CCS_TILE @ [sx_ccs,sy_ccs]>> :
                                                                           <wire READ_OL of <device CCS_TILE @ [sx_ccs,sy_ccs]>> ,
        <pin RDBK_CAP of <device *blsr2 @ [sx,sy]>>      => (flag_lr==0) ? <wire RDBK_CAP_O of <device CCS_TILE @ [sx_ccs,sy_ccs]>> :
                                                                           <wire RDBK_CAP_OL of <device CCS_TILE @ [sx_ccs,sy_ccs]>> , 
        <pin WL_ON_I of <device *blsr2 @ [sx,sy]>>       => (flag_lr==0) ? <wire WL_ON_O of <device CCS_TILE @ [sx_ccs,sy_ccs]>> :
                                                                           <wire WL_ON_OL of <device CCS_TILE @ [sx_ccs,sy_ccs]>> ,
        <pin PD_IN of <device *blsr2 @ [sx,sy]>>         => (flag_lr==0) ? <wire PD_OUT of <device CCS_TILE @ [sx_ccs,sy_ccs]>> :
                                                                           <wire PD_OUT_OL of <device CCS_TILE @ [sx_ccs,sy_ccs]>> ,
        <pin PUB_IN of <device *blsr2 @ [sx,sy]>>        => (flag_lr==0) ? <wire PUB_OUT of <device CCS_TILE @ [sx_ccs,sy_ccs]>> :
                                                                           <wire PUB_OUT_OL of <device CCS_TILE @ [sx_ccs,sy_ccs]>> ,
        <pin WLSR_SEL_I of <device *blsr2 @ [sx,sy]>>    => (flag_lr==0) ? <wire WLSHFT_SEL_O of <device CCS_TILE @ [sx_ccs,sy_ccs]>> :
                                                                           <wire WLSHFT_SEL_OL of <device CCS_TILE @ [sx_ccs,sy_ccs]>> ,
        <pin RSTN of <device *blsr2 @ [sx,sy]>>          => (flag_lr==0) ? <wire RST_BLSR_O of <device CCS_TILE @ [sx_ccs,sy_ccs]>> :
                                                                           <wire RST_BLSR_OL of <device CCS_TILE @ [sx_ccs,sy_ccs]>> ,
        <pin BLSR_SEL of <device *blsr2 @ [sx,sy]>>      => (flag_lr==0) ? <wire BLSHFT_SEL_O of <device CCS_TILE @ [sx_ccs,sy_ccs]>> :
                                                                           <wire BLSHFT_SEL_OL of <device CCS_TILE @ [sx_ccs,sy_ccs]>> ,
        <pin REGION_RW_EN of <device *blsr2 @ [sx,sy]>>  => (flag_lr==0) ? <wire REGION_RW_EN_O of <device CCS_TILE @ [sx_ccs,sy_ccs]>> :
                                                                           <wire REGION_RW_EN_OL of <device CCS_TILE @ [sx_ccs,sy_ccs]>> ,
        <pin COL_IN_I of <device *blsr2 @ [sx,sy]>>      => (flag_lr==0) ? <wire COL_IN_O of <device CCS_TILE @ [sx_ccs,sy_ccs]>> :
                                                                           <wire COL_IN_OL of <device CCS_TILE @ [sx_ccs,sy_ccs]>> ,
        <pin TYPE_I of <device *blsr2 @ [sx,sy]>>        => (flag_lr==0) ? <wire TYPE_O of <device CCS_TILE @ [sx_ccs,sy_ccs]>> :
                                                                           <wire TYPE_OL of <device CCS_TILE @ [sx_ccs,sy_ccs]>> ,
        <pin FRAME_ADDR_I of <device *blsr2 @ [sx,sy]>>  => (flag_lr==0) ? <wire FRAME_ADDR_O of <device CCS_TILE @ [sx_ccs,sy_ccs]>> :
                                                                           <wire FRAME_ADDR_OL of <device CCS_TILE @ [sx_ccs,sy_ccs]>> ,

        <pin MCLKB_I of <device *blsr2 @ [sx,sy]>>       => (flag_lr==0) ? <wire MCLKB_O of <device CCS_TILE @ [sx_ccs,sy_ccs]>> :
                                                                           <wire MCLKB_OL of <device CCS_TILE @ [sx_ccs,sy_ccs]>> ,
        <pin MCE_I of <device *blsr2 @ [sx,sy]>>         => (flag_lr==0) ? <wire MCE_O of <device CCS_TILE @ [sx_ccs,sy_ccs]>> :                                                                                                       <wire MCE_OL of <device CCS_TILE @ [sx_ccs,sy_ccs]>> ,
        <pin MWR_I of <device *blsr2 @ [sx,sy]>>         => (flag_lr==0) ? <wire MWR_O of <device CCS_TILE @ [sx_ccs,sy_ccs]>> :                                                                                                       <wire MWR_OL of <device CCS_TILE @ [sx_ccs,sy_ccs]>> ,

        <pin CLK_REL_IN of <device *blsr2 @ [sx,sy]>>    => <wire RELCK of <device CCS_TILE @ [sx_ccs,sy_ccs]>>,
        <pin GLOGEN_IN of <device *blsr2 @ [sx,sy]>>     => <wire GLOGEN of <device CCS_TILE @ [sx_ccs,sy_ccs]>>,
        <pin GRS_N_IN of <device *blsr2 @ [sx,sy]>>      => <wire GRS_N of <device CCS_TILE @ [sx_ccs,sy_ccs]>>,
        <pin GWEN_IN of <device *blsr2 @ [sx,sy]>>       => <wire GWEN of <device CCS_TILE @ [sx_ccs,sy_ccs]>>,
        <pin POR_N_IN of <device *blsr2 @ [sx,sy]>>      => (flag_lr==0) ? <wire POR_N_3 of <device CCS_TILE @ [sx_ccs,sy_ccs]>>:
                                                                           <wire POR_N_1 of <device CCS_TILE @ [sx_ccs,sy_ccs]>>,
        <pin PUP_REL_N_IN of <device *blsr2 @ [sx,sy]>>  => <wire PUP_SEL_N of <device CCS_TILE @ [sx_ccs,sy_ccs]>>,
        <pin MASK_I of <device *blsr2 @ [sx,sy]>>  => (flag_lr==0) ? <wire MASK_O of <device CCS_TILE @ [sx_ccs,sy_ccs]>> :                                                                                                       <wire MASK_OL of <device CCS_TILE @ [sx_ccs,sy_ccs]>>

      );
  }
  else
  {
     connect
      (
        <pin DATA_IN of <device *blsr1 @ [sx,sy]>>       => <wire DATA_TO_NEXT of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin CLK_IN of <device *blsr1 @ [sx,sy]>>        => <wire CLKOUT_M of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin ERASE_EN of <device *blsr1 @ [sx,sy]>>      => <wire ERASE_EN_O of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin POR_ERASE_N of <device *blsr1 @ [sx,sy]>>   => <wire POR_ERASE_N_O of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin PRECHG of <device *blsr1 @ [sx,sy]>>        => <wire PRECHG_O of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin PROG_CAP of <device *blsr1 @ [sx,sy]>>      => <wire PROG_CAP_O of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin PROG_ON of <device *blsr1 @ [sx,sy]>>       => <wire PROG_ON_O of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin READ of <device *blsr1 @ [sx,sy]>>          => <wire READ_O of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin RDBK_CAP of <device *blsr1 @ [sx,sy]>>      => <wire RDBK_CAP_O of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin WL_ON_I of <device *blsr1 @ [sx,sy]>>       => <wire WL_ON_O of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin PD_IN of <device *blsr1 @ [sx,sy]>>         => <wire PD_OUT of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin PUB_IN of <device *blsr1 @ [sx,sy]>>        => <wire PUB_OUT of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin WLSR_SEL_I of <device *blsr1 @ [sx,sy]>>    => <wire WLSR_SEL_O of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin RSTN of <device *blsr1 @ [sx,sy]>>          => <wire RSTN_O of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin BLSR_SEL of <device *blsr1 @ [sx,sy]>>      => <wire BLSR_SEL_O of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin REGION_RW_EN of <device *blsr1 @ [sx,sy]>>  => <wire REGION_RW_EN_O of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin COL_IN_I of <device *blsr1 @ [sx,sy]>>      => <wire COL_IN_O of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin TYPE_I of <device *blsr1 @ [sx,sy]>>        => <wire TYPE_O of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin FRAME_ADDR_I of <device *blsr1 @ [sx,sy]>>  => <wire FRAME_ADDR_O of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,

        <pin MCLKB_I of <device *blsr1 @ [sx,sy]>>       => <wire MCLKB_O of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin MCE_I of <device *blsr1 @ [sx,sy]>>         => <wire MCE_O of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin MWR_I of <device *blsr1 @ [sx,sy]>>         => <wire MWR_O of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,

        <pin CLK_REL_IN of <device *blsr1 @ [sx,sy]>>      => <wire CLK_REL_OUT_M of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin GLOGEN_IN of <device *blsr1 @ [sx,sy]>>       => <wire GLOGEN_OUT of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin GRS_N_IN of <device *blsr1 @ [sx,sy]>>        => <wire GRS_N_OUT_M of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin GWEN_IN of <device *blsr1 @ [sx,sy]>>         => <wire GWEN_OUT_M of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin POR_N_IN of <device *blsr1 @ [sx,sy]>>        => <wire POR_N_OUT_M of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin PUP_REL_N_IN of <device *blsr1 @ [sx,sy]>>    => <wire PUP_REL_N_OUT_M of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,

//        <pin CLK_USER_IN of <device *blsr1 @ [sx,sy]>>     => <wire CLK_USER_OUT of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>,
        <pin MASK_I of <device *blsr1 @ [sx,sy]>>          => <wire MASK_O of <device *blsr2 @ [sx,sy-NUM_GRID_BLSR_Y]>>
      );
  }

//    if(flag_user==1)
//    {
//        connect( <pin CLK_USER_IN of <device BLSR_TILE @ [sx,sy]>>   => <wire CLK_USER of <device CCS_TILE @ [sx_ccs,sy_ccs]>> ) ;
//    }

  unsigned int sx_wlsr = tx_wlsr2 * NUM_GRID_Y;

  if(flag_ud==1)
  {
    connect
      (
        <pin DSOUT_PRE1[31] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[30] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[29] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[28] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[27] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[26] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[25] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[24] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[23] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[22] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[21] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[20] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[19] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[18] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[17] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[16] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[15] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[14] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[13] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[12] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[11] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[10] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[9] of <device *blsr1 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[8] of <device *blsr1 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[7] of <device *blsr1 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[6] of <device *blsr1 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[5] of <device *blsr1 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[4] of <device *blsr1 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[3] of <device *blsr1 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[2] of <device *blsr1 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[1] of <device *blsr1 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE1[0] of <device *blsr1 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[31] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[30] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[29] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[28] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[27] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[26] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[25] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[24] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[23] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[22] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[21] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[20] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[19] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[18] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[17] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[16] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[15] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[14] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[13] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[12] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[11] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[10] of <device *blsr1 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[9] of <device *blsr1 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[8] of <device *blsr1 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[7] of <device *blsr1 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[6] of <device *blsr1 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[5] of <device *blsr1 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[4] of <device *blsr1 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[3] of <device *blsr1 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[2] of <device *blsr1 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[1] of <device *blsr1 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin DSOUT_PRE2[0] of <device *blsr1 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr1 @ [sx,sy]>>,
        <pin COL_INC_PREV1_I of <device *blsr1 @ [sx,sy]>>         => <wire TIEL2 of <device *blsr1 @ [sx,sy]>>,
        <pin COL_INC_PREV2_I of <device *blsr1 @ [sx,sy]>>         => <wire TIEL2 of <device *blsr1 @ [sx,sy]>>,
        <pin NONDRM_REG_INC_PREV1_I of <device *blsr1 @ [sx,sy]>>  => <wire TIEL2 of <device *blsr1 @ [sx,sy]>>,
        <pin NONDRM_REG_INC_PREV2_I of <device *blsr1 @ [sx,sy]>>  => <wire TIEL2 of <device *blsr1 @ [sx,sy]>>,
        <pin NONDRM_END_I of <device *blsr1 @ [sx,sy]>>             => <wire NONDRM_END_LOCAL of <device *blsr1 @ [sx,sy]>>

      );
  }
  else
  {
    if(flag_lr==1)
    {
        connect
        (
            <pin DSOUT_PRE1 of <device *blsr2 @ [sx,sy]>>              => <wire DSROUTTO_CONFIG of <device *blsr1 @ [sx,sy+NUM_GRID_BLSR_Y]>>,
            <pin DSOUT_PRE2[31] of <device *blsr2 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[30] of <device *blsr2 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[29] of <device *blsr2 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[28] of <device *blsr2 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[27] of <device *blsr2 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[26] of <device *blsr2 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[25] of <device *blsr2 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[24] of <device *blsr2 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[23] of <device *blsr2 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[22] of <device *blsr2 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[21] of <device *blsr2 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[20] of <device *blsr2 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[19] of <device *blsr2 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[18] of <device *blsr2 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[17] of <device *blsr2 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[16] of <device *blsr2 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[15] of <device *blsr2 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[14] of <device *blsr2 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[13] of <device *blsr2 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[12] of <device *blsr2 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[11] of <device *blsr2 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[10] of <device *blsr2 @ [sx,sy]>>          => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[9] of <device *blsr2 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[8] of <device *blsr2 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[7] of <device *blsr2 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[6] of <device *blsr2 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[5] of <device *blsr2 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[4] of <device *blsr2 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[3] of <device *blsr2 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[2] of <device *blsr2 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[1] of <device *blsr2 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin DSOUT_PRE2[0] of <device *blsr2 @ [sx,sy]>>           => <wire TIEL1 of <device *blsr2 @ [sx,sy]>>,
            <pin COL_INC_PREV1_I of <device *blsr2 @ [sx,sy]>>         => <wire COL_INC_O of <device *blsr1 @ [sx,sy+NUM_GRID_BLSR_Y]>>,
            <pin COL_INC_PREV2_I of <device *blsr2 @ [sx,sy]>>         => <wire TIEL2 of <device *blsr2 @ [sx,sy]>>,
            <pin NONDRM_REG_INC_PREV1_I of <device *blsr2 @ [sx,sy]>>  => <wire NONDRM_REG_INC_O of <device *blsr1 @ [sx,sy+NUM_GRID_BLSR_Y]>>,
            <pin NONDRM_REG_INC_PREV2_I of <device *blsr2 @ [sx,sy]>>  => <wire TIEL2 of <device *blsr2 @ [sx,sy]>>,
            <pin NONDRM_END_I of <device *blsr2 @ [sx,sy]>>           => <wire NONDRM_END_LOCAL of <device *blsr2 @ [sx,sy]>>
        );
    }
    else
    {
        connect
        (
            <pin DSOUT_PRE1 of <device *blsr2 @ [sx,sy]>>              => <wire DSROUTTO_CONFIG of <device *blsr1 @ [sx,sy+NUM_GRID_BLSR_Y]>>,
            <pin DSOUT_PRE2 of <device *blsr2 @ [sx,sy]>>              => <wire DSROUTTO_CONFIG of <device *blsr2 @ [sx_blsr_l,sy]>>,
            <pin COL_INC_PREV1_I of <device *blsr2 @ [sx,sy]>>         => <wire COL_INC_O of <device *blsr1 @ [sx,sy+NUM_GRID_BLSR_Y]>>,
            <pin COL_INC_PREV2_I of <device *blsr2 @ [sx,sy]>>         => <wire COL_INC_O of <device *blsr2 @ [sx_blsr_l,sy]>>,
            <pin NONDRM_REG_INC_PREV1_I of <device *blsr2 @ [sx,sy]>>  => <wire NONDRM_REG_INC_O of <device *blsr1 @ [sx,sy+NUM_GRID_BLSR_Y]>>,
            <pin NONDRM_REG_INC_PREV2_I of <device *blsr2 @ [sx,sy]>>  => <wire NONDRM_REG_INC_O of <device *blsr2 @ [sx_blsr_l,sy]>>,
            <pin NONDRM_END_I of <device *blsr2 @ [sx,sy]>>           => <wire NONDRM_END_LOCAL of <device *blsr2 @ [sx,sy]>>
        );
    }
  }

}//end of function connect_BLSR_input_loop

/****************************************************************************************************
*****************************************************************************************************/
function connect_ccs_input
(
    unsigned int tx,
    unsigned int ty,
    unsigned int tx_blsr,
    unsigned int ty_blsr1,
    unsigned int ty_blsr2,
    unsigned int tx_idcode,
    unsigned int ty_idcode,
    unsigned int tx_iob2,
    unsigned int ty_iob2,
    unsigned int tx_pll,
    unsigned int ty_pll0,
    unsigned int tx_ana,
    unsigned int ty_ana,
    string dev_blsr1,
    string dev_blsr2,
    string dev_iob2,
    string dev_idcode,
    string dev_pll,
    string dev_analog
)
{
    string iob2 = dev_iob2 ;
    string blsr1 = dev_blsr1 ;
    string blsr2 = dev_blsr2 ;
    string idcode = dev_idcode ;
    string analog = dev_analog ;
    string pll = dev_pll ;

    int sx_iob2 = tx_iob2 * NUM_GRID_X ;
    int sy_iob2 = ty_iob2 * NUM_GRID_Y ;

    int sx_ana = tx_ana * NUM_GRID_X ;
    int sy_ana = ty_ana * NUM_GRID_Y ;

    int sx = tx * NUM_GRID_X;
    int sy = ty * NUM_GRID_Y;

    int sx_blsr = tx_blsr * NUM_GRID_X;
    int sy_blsr1 = ty_blsr1 * NUM_GRID_BLSR_Y + NUM_GRID_Y ;
    int sy_blsr2 = ty_blsr2 * NUM_GRID_BLSR_Y + NUM_GRID_Y ;

    connect
      (
        <pin COL_INC_I of <device CCS_TILE @[sx,sy]>>        => <wire COL_INC_O of <device *blsr2 @ [sx_blsr,sy_blsr2]>>,
        <pin NONDRM_REG_INC_I of <device CCS_TILE @[sx,sy]>> => <wire NONDRM_REG_INC_O of <device *blsr2 @ [sx_blsr,sy_blsr2]>>,
        <pin NONDRM_END_I of <device CCS_TILE @[sx,sy]>>     => <wire NONDRM_END_O of <device *blsr2 @ [sx_blsr,sy_blsr2]>>,
        <pin DATABACK_I of <device CCS_TILE @[sx,sy]>>       => <wire DSROUTTO_CONFIG of <device *blsr2 @ [sx_blsr,sy_blsr2]>>,
        <pin DCI_MATCH of <device CCS_TILE @[sx,sy]>>        => <wire DCI_INIT of <device *blsr2 @[sx_blsr,sy_blsr2]>>

      );

    connect
      (
          <pin IPOLY_OSC of <device CCS_TILE@[sx,sy]>> => <wire IPOLY10U[5] of <device *analog @[sx_ana,sy_ana]>>,
          <pin ICONST_OSC of <device CCS_TILE@[sx,sy]>> => <wire ICONST10U[8] of <device *analog @[sx_ana,sy_ana]>>,
          <pin POR_N of <device CCS_TILE@[sx,sy]>> => <wire POR_N of <device *analog @[sx_ana,sy_ana]>>,
          <pin POR_OSC_N of <device CCS_TILE@[sx,sy]>> => <wire POR_OSC_N of <device *analog @[sx_ana,sy_ana]>>,
          <pin GOUTEN_DIO of <device CCS_TILE@[sx,sy]>> => <wire BUS_BSCAN_OUT[13] of <device CCS_TILE @[sx,sy]>>,
          <pin POR33 of <device CCS_TILE@[sx,sy]>> => <wire POR_N33 of <device *analog @[sx_ana,sy_ana]>>

      );

    connect
      (
          <pin EMCLK of <device CCS_TILE@[sx,sy]>> => <wire EMCLK of <device *iob2 @[sx_iob2,sy_iob2]>>,
          <pin RST_N of <device CCS_TILE@[sx,sy]>> => <wire DIN_RST_N of <device *iob2 @[sx_iob2,sy_iob2]>>,
          <pin DONE_I of <device CCS_TILE@[sx,sy]>> => <wire DONE_I of <device *iob2 @[sx_iob2,sy_iob2]>>

      );

    int sx_pll = tx_pll * NUM_GRID_X + 2;
    int sy_pll0 = ty_pll0 * NUM_GRID_Y ;

    connect
      (
        <pin PLL_LOCK of <device CCS_TILE @ [sx,sy]>>         => <wire LOCK of <device *pll @ [sx_pll,sy_pll0]>>
      );

    connect
      (
        <pin GLOGEN_FB of <device CCS_TILE @ [sx,sy]>>  => <wire CLK_ADC_R of <device *blsr2 @ [sx_blsr,sy_blsr2]>>  
      );

    int sx_idcode = tx_idcode * NUM_GRID_X + 2;
    int sy_idcode = ty_idcode * NUM_GRID_Y;

    connect
      (
        <pin IDCODE_H12 of <device CCS_TILE @[sx,sy]>>  => <wire IDCODE_H12 of <device *idcode @ [sx_idcode,sy_idcode]>>,
        <pin IDCODE_L18 of <device CCS_TILE @[sx,sy]>>  => <wire IDCODE_L18 of <device *idcode @ [sx_idcode,sy_idcode]>>
      );

    &wire ntRef_ntTCK = <wire ntTCK>;
    &wire ntRef_ntTDI = <wire ntTDI>;
    &wire ntRef_ntTMS = <wire ntTMS>;
    &wire ntRef_ntTDO = <wire ntTDO>;
    &wire ntRef_ntSTAND_BY = <wire ntSTAND_BY>;

    connect
      (
        <pin TCK of <device CCS_TILE @[sx,sy]>>             => ntRef_ntTCK,
        <pin TDI of <device CCS_TILE @[sx,sy]>>             => ntRef_ntTDI,
        <pin TMS of <device CCS_TILE @[sx,sy]>>             => ntRef_ntTMS,
        <pin STAND_BY of <device CCS_TILE @[sx,sy]>>        => ntRef_ntSTAND_BY,
        <pin TDO of <device CCS_TILE @[sx,sy]>>             => ntRef_ntTDO
      );

}//end of function connect_CCS_input

/****************************************************************************************************
*****************************************************************************************************/
function connect_vdd11_gclk //v
(
    unsigned int tx,
    unsigned int ty,
    unsigned int tx_blsr,
    unsigned int ty_blsr,
    string  dev_wlsr,
    string  dev_blsr,
    string  sig_tiehi
)
{

    string wlsr = dev_wlsr ;
    string tiehi = sig_tiehi ;
    string blsr = dev_blsr ;

    int sx = (wlsr=="PLL_TILE"||wlsr=="IOCKGATEDLL_TILE"||wlsr=="IOCKGATEDLL_100H_TILE") ? tx * NUM_GRID_X + 2 : tx * NUM_GRID_X ;
    int sy = ty * NUM_GRID_Y ;

    int sx_blsr = tx_blsr * NUM_GRID_X ;
    int sy_blsr = ty_blsr * NUM_GRID_BLSR_Y + NUM_GRID_Y ;

            connect
            (
                  <pin VGATE   of <device *wlsr @ [sx,sy]>> => <wire *tiehi of <device *blsr @ [sx_blsr,sy_blsr]>>        
            );

} // end of connect_vdd11_gclk //v

/****************************************************************************************************
*****************************************************************************************************/
function connect_analog_output
(
    unsigned int tx,
    unsigned int rx,
    unsigned int tx_ana,
    unsigned int ty_ana,
    string dev_analog, 
    string dev_wlsr, 
    unsigned int flag_iock 
)
{
    string analog = dev_analog ;
    string wlsr = dev_wlsr ;

    int sx = (flag_iock == 1) ? tx * NUM_GRID_X + 2 : tx * NUM_GRID_X ;
    int ty = (flag_iock == 1) ? (MID_TILE_REGION - 1) + rx * NUM_TILES_REGION : MID_TILE_REGION + rx * NUM_TILES_REGION ;
    int sy = ty * NUM_GRID_Y ;

    int sx_ana = tx_ana * NUM_GRID_X ;
    int sy_ana = ty_ana * NUM_GRID_Y ;

      connect
        (
          <pin VCTRL of <device *wlsr @[sx,sy]>>              => <wire NGB of <device *analog @[sx_ana,sy_ana]>>
        );

}//end of function connect_analog_output
/****************************************************************************************************
*****************************************************************************************************/
function connect_analog_input
(
    unsigned int tx,
    unsigned int ty,
    unsigned int tx_pll,
    unsigned int ty_pll0,
    unsigned int ty_pll1,
    unsigned int tx_ccs,
    unsigned int ty_ccs,
    unsigned int tx_iob2,
    unsigned int ty_iob2,
    string dev_analog, 
    string dev_pll, 
    string dev_ccs,
    string dev_iob2,
    unsigned int flag_20h    //1, for 20h
)
{
    string analog = dev_analog ;
    string pll = dev_pll ;
    string ccs = dev_ccs ;
    string iob2 = dev_iob2 ;

    int sx = tx * NUM_GRID_X ;
    int sy = ty * NUM_GRID_Y ;
    int sx_ccs = tx_ccs * NUM_GRID_X ;
    int sy_ccs = ty_ccs * NUM_GRID_Y ;

    int sx_iob2 = tx_iob2 * NUM_GRID_X ;
    int sy_iob2 = ty_iob2 * NUM_GRID_Y ;

    int sx_pll = tx_pll * NUM_GRID_X + 2;
    int sy_pll0 = ty_pll0 * NUM_GRID_Y + 0 * NUM_TILES_REGION * NUM_GRID_Y;
    int sy_pll1 = ty_pll1 * NUM_GRID_Y + 0 * NUM_TILES_REGION * NUM_GRID_Y;
    int sy_pll2 = ty_pll0  * NUM_GRID_Y + 1 * NUM_TILES_REGION * NUM_GRID_Y;

    &wire ntRef_ntREXT = <wire ntREXT>;

    connect
      (
        <pin PLL_LDO_I[2] of <device *analog @ [sx,sy]>>     => <wire VCP of <device *pll @ [sx_pll,sy_pll2]>>,
        <pin PLL_LDO_I[1] of <device *analog @ [sx,sy]>>     => <wire VCP of <device *pll @ [sx_pll,sy_pll1]>>,
        <pin PLL_LDO_I[0] of <device *analog @ [sx,sy]>>     => <wire VCP of <device *pll @ [sx_pll,sy_pll0]>>
      );

    if(flag_20h==0)
    {
        int sy_pll3 = ty_pll1  * NUM_GRID_Y + 1 * NUM_TILES_REGION * NUM_GRID_Y;

        connect
        (
            <pin PLL_LDO_I[3] of <device *analog @ [sx,sy]>>     => <wire VCP of <device *pll @ [sx_pll,sy_pll3]>>
        );
    }
    else
    {
        connect
        (
            <pin PLL_LDO_I[3] of <device *analog @ [sx,sy]>>     => <wire TIEHI of <device *analog @ [sx,sy]>>
        );
    }

    connect
    (
        <pin ADC_VREF_TEST of<device *analog @[sx,sy]>> =>  <wire TIEHI of <device *analog @ [sx,sy]>>,
        <pin CMFB_VREF_I of<device *analog @[sx,sy]>> =>  <wire TIEHI of <device *analog @ [sx,sy]>>,
        <pin DDR_VREF_I of<device *analog @[sx,sy]>> =>  <wire TIEHI of <device *analog @ [sx,sy]>>,
        <pin CLK_ADC of<device *analog @[sx,sy]>> =>  <wire TIEHI of <device *analog @ [sx,sy]>>,
        <pin REXT_PAD of<device *analog @[sx,sy]>> =>  ntRef_ntREXT,
        <pin CLK_BLSHFT   of<device *analog @[sx,sy]>> =>  <wire CLK_BLSHFT of <device *ccs @ [sx_ccs,sy_ccs]>>,
        <pin CLK_MSPI     of<device *analog @[sx,sy]>> =>  <wire CLK_MSPI of <device *ccs @ [sx_ccs,sy_ccs]>>,
        <pin CLK_USER_OSC of<device *analog @[sx,sy]>> =>  <wire CLK_USER_OSC of <device *ccs @ [sx_ccs,sy_ccs]>>,
        <pin MFG_POR_OFF of<device *analog @[sx,sy]>> =>  <wire MFG_POR_OFF of <device *ccs @ [sx_ccs,sy_ccs]>>,
        <pin VDDT_N of<device *analog @[sx,sy]>> =>  <wire VDDT_N of <device *ccs @ [sx_ccs,sy_ccs]>>,
        <pin ATP of<device *iob2 @[sx_iob2,sy_iob2]>> =>  <wire ATP_O of <device *analog @ [sx,sy]>>,
        <pin ATP_DUMMY of<device *iob2 @[sx_iob2,sy_iob2]>> =>  <wire ATP_DUMMY_O of <device *analog @ [sx,sy]>>
    );

}//end of function connect_analog_input
/****************************************************************************************************
*****************************************************************************************************/
function connect_bias_pll
(
    unsigned int tx,
    unsigned int ty_d, 
    unsigned int ty_u, 
    unsigned int tx_ana, 
    unsigned int ty_ana, 
    string dev_analog,
    string dev_pll,
    unsigned int flag_20h
)
{
    int sx = tx * NUM_GRID_X + 2;

    int sx_ana = tx_ana * NUM_GRID_X;
    int sy_ana = ty_ana * NUM_GRID_Y;

    int sy_pll0 = ty_d * NUM_GRID_Y + 0 * NUM_TILES_REGION * NUM_GRID_Y ;
    int sy_pll1 = ty_u * NUM_GRID_Y + 0 * NUM_TILES_REGION * NUM_GRID_Y ;
    int sy_pll2 = sy_pll0 + 1 * NUM_TILES_REGION * NUM_GRID_Y ;
    int sy_pll3 = sy_pll1 + 1 * NUM_TILES_REGION * NUM_GRID_Y ;

    string pll = dev_pll ;
    string analog = dev_analog ;

    if(flag_20h==0)
    {
        connect
        (
            <pin IPOLY_LDO of <device *pll @[sx,sy_pll3]>> => <wire IPOLY10U[10] of <device *analog @[sx_ana,sy_ana]>>
        );
    }

    connect
      (
        <pin IPOLY_LDO of <device *pll @[sx,sy_pll2]>> => <wire IPOLY10U[9] of <device *analog @[sx_ana,sy_ana]>>,
        <pin IPOLY_LDO of <device *pll @[sx,sy_pll1]>> => <wire IPOLY10U[8] of <device *analog @[sx_ana,sy_ana]>>,
        <pin IPOLY_LDO of <device *pll @[sx,sy_pll0]>> => <wire IPOLY10U[7] of <device *analog @[sx_ana,sy_ana]>>
      );

}
/****************************************************************************************************
*****************************************************************************************************/
function connect_blsr_tiehi_input
(
    unsigned int tx,
    unsigned int rx,
    string dev_blsr,
    unsigned int flag_lr,
    unsigned int flag_ud
)
{
    string blsr = dev_blsr ;

    int sx =  tx * NUM_GRID_X ;
    int sy = rx * NUM_GRID_BLSR_Y + NUM_GRID_Y ;

    STRUCT inc_spec_BLSR_TIEHI incVar;
    string pin_SRB;
    string pin_logic_device;
    string attribute_IO;

    foreach incVar(inc_BLSR_TIEHI_spec)
    {
        pin_SRB = incVar.port_name_SRB;
        pin_logic_device = incVar.port_name_device;
        attribute_IO = incVar.attribute_IO;
       
        if(attribute_IO =="I")
        { 
         
           connect(<pin *pin_logic_device of <device *blsr @[sx,sy]>> => <wire *pin_SRB of <device *blsr @[sx,sy]>>);
        }
    }
    
    if(!(flag_lr==1&&flag_ud==0))
    {
           connect(<pin CLK_USER_IN of <device *blsr @[sx,sy]>> => <wire TIEL2 of <device *blsr @[sx,sy]>>);        
    }

    if(!(flag_lr==0))
    {
           connect(<pin CLK_ADC_IN2 of <device *blsr @[sx,sy]>> => <wire TIEL2 of <device *blsr @[sx,sy]>>);        
    }
}//end of function connect_blsr_tiehi_input
/****************************************************************************************************
*****************************************************************************************************/
function connect_wlsr1_tiehi_input
(
    unsigned int tx,
    unsigned int rx,
    string dev_blsr 
)
{
    string blsr = dev_blsr ;

    int sx =  tx * NUM_GRID_X ;
    int sy = MID_TILE_REGION * NUM_GRID_Y + rx * NUM_TILES_REGION * NUM_GRID_Y ;

    STRUCT inc_spec_WLSR1_TIEHI incVar;
    string pin_SRB;
    string pin_logic_device;
    string attribute_IO;

    foreach incVar(inc_WLSR1_TIEHI_spec)
    {
        pin_SRB = incVar.port_name_SRB;
        pin_logic_device = incVar.port_name_device;
        attribute_IO = incVar.attribute_IO;
       
        if(attribute_IO =="I")
        { 
         
           connect(<pin *pin_logic_device of <device *blsr @[sx,sy]>> => <wire *pin_SRB of <device *blsr @[sx,sy]>>);
        }
    }

}//end of function connect_wlsr1_tiehi_input
/****************************************************************************************************
*****************************************************************************************************/
function connect_cramsl2_tiehi_input
(
    unsigned int tx,
    unsigned int ty,
    string dev_cramsl 
)
{
    string cramsl2 = dev_cramsl ;

    int sx =  tx * NUM_GRID_X + 2;
    int sy = ty * NUM_GRID_Y ;

    STRUCT inc_spec_TIEHI_IN incVar;
    string pin_SRB;
    string pin_logic_device;
    string attribute_IO;

    foreach incVar(inc_TIEHI_IN_spec)
    {
        pin_SRB = incVar.port_name_SRB;
        pin_logic_device = incVar.port_name_device;
        attribute_IO = incVar.attribute_IO;
       
        if(attribute_IO =="I")
        { 
         
           connect(<pin *pin_logic_device of <device *cramsl2 @[sx,sy]>> => <wire *pin_SRB of <device *cramsl2 @[sx,sy]>>);
        }
    }

}//end of function connect_cramsl2_tiehi_input
/****************************************************************************************************
*****************************************************************************************************/
function connect_iock_tiehi_input
(
    unsigned int tx,
    unsigned int ty,
    string dev_iock,
    unsigned int flag_lr,
    unsigned int flag_ud
)
{
    string iock = dev_iock ;

    int sx =  tx * NUM_GRID_X + 2;
    int sy = ty * NUM_GRID_Y ;

    STRUCT inc_spec_IOCK_TIEHI incVar;
    string pin_SRB;
    string pin_logic_device;
    string attribute_IO;

    foreach incVar(inc_IOCK_TIEHI_spec)
    {
        pin_SRB = incVar.port_name_SRB;
        pin_logic_device = incVar.port_name_device;
        attribute_IO = incVar.attribute_IO;
       
        if(attribute_IO =="I")
        { 
         
           connect(<pin *pin_logic_device of <device *iock @[sx,sy]>> => <wire *pin_SRB of <device *iock @[sx,sy]>>);
        }
    }

    connect
    (
        <pin BUS_BSCAN_IN[0] of <device *iock @[sx,sy]>> => <wire  DLL_TIHI of <device *iock @[sx,sy]>>,  
        <pin BUS_BSCAN_IN[1] of <device *iock @[sx,sy]>> => <wire  DLL_TIHI of <device *iock @[sx,sy]>>,  
        <pin BUS_BSCAN_IN[2] of <device *iock @[sx,sy]>> => <wire  DLL_TIHI of <device *iock @[sx,sy]>>,  
        <pin BUS_BSCAN_IN[3] of <device *iock @[sx,sy]>> => <wire  DLL_TIHI of <device *iock @[sx,sy]>>,  
        <pin BUS_BSCAN_IN[4] of <device *iock @[sx,sy]>> => <wire  DLL_TIHI of <device *iock @[sx,sy]>>,  
        <pin BUS_BSCAN_IN[5] of <device *iock @[sx,sy]>> => <wire  DLL_TIHI of <device *iock @[sx,sy]>>,  
        <pin BUS_BSCAN_IN[6] of <device *iock @[sx,sy]>> => <wire  DLL_TIHI of <device *iock @[sx,sy]>>,  
        <pin BUS_BSCAN_IN[7] of <device *iock @[sx,sy]>> => <wire  DLL_TIHI of <device *iock @[sx,sy]>>,  
        <pin BUS_BSCAN_IN[8] of <device *iock @[sx,sy]>> => <wire  DLL_TIHI of <device *iock @[sx,sy]>>,  
        <pin BUS_BSCAN_IN[9] of <device *iock @[sx,sy]>> => <wire  DLL_TIHI of <device *iock @[sx,sy]>>,  
        <pin BUS_BSCAN_IN[10] of <device *iock @[sx,sy]>> => <wire DLL_TIHI of <device *iock @[sx,sy]>>,  
        <pin BUS_BSCAN_IN[11] of <device *iock @[sx,sy]>> => <wire DLL_TIHI of <device *iock @[sx,sy]>>,  
        <pin BUS_BSCAN_IN[12] of <device *iock @[sx,sy]>> => <wire DLL_TIHI of <device *iock @[sx,sy]>>,  
        <pin BUS_BSCAN_IN[13] of <device *iock @[sx,sy]>> => <wire DLL_TIHI of <device *iock @[sx,sy]>>,  
        <pin BUS_BSCAN_IN[14] of <device *iock @[sx,sy]>> => <wire DLL_TIHI of <device *iock @[sx,sy]>>,  
        <pin BUS_BSCAN_IN[15] of <device *iock @[sx,sy]>> => <wire DLL_TIHI of <device *iock @[sx,sy]>>,  
        <pin BUS_BSCAN_IN[16] of <device *iock @[sx,sy]>> => <wire DLL_TIHI of <device *iock @[sx,sy]>>,  
        <pin BUS_BSCAN_IN[17] of <device *iock @[sx,sy]>> => <wire DLL_TIHI of <device *iock @[sx,sy]>>  
    );
    
    if(!(flag_lr==1&&flag_ud==0))
    {
        connect(<pin CAL_DONE_IN of <device *iock @[sx,sy]>> => <wire DLL_TIHI of <device *iock @[sx,sy]>>);        
    }

    

}//end of function connect_iock_tiehi_input
/****************************************************************************************************
*****************************************************************************************************/
function connect_iol_input
(
    unsigned int tx,
    unsigned int ty,
    string dev_iol 
)
{
    string iol = dev_iol ;

    int sx =  tx * NUM_GRID_X + 2;
    int sy = ty * NUM_GRID_Y ;

    connect
    (
        <pin DI_MIPI_A of <device *iol @[sx,sy]>> => <wire TIELO of <device *iol @[sx,sy]>>
    );

}//end of function connect_iol_input
/****************************************************************************************************
*****************************************************************************************************/
function connect_dqsl_input
(
    unsigned int tx,
    unsigned int ty,
    string dev_iol 
)
{
    string iol = dev_iol ;

    int sx =  tx * NUM_GRID_X + 2;
    int sy = ty * NUM_GRID_Y ;

    connect
    (
        <pin GATE_FROM_LOOP of <device *iol @[sx,sy]>> => <wire TIEHI of <device *iol @[sx,sy]>>
    );

}//end of function connect_dqsl_input
   
/****************************************************************************************************
*****************************************************************************************************/
function connect_cramsl7206_input
(
    unsigned int tx,
    unsigned int ty,
    unsigned int flag_ccs
     
)
{

      int sx = tx * NUM_GRID_X + 2 ;
      int sy = ty * NUM_GRID_Y ;

    if(flag_ccs==0)
    {          
      connect
      (
        <pin IN[0] of<device CRAMSL7206_TILE@[sx,sy]>> =>  <wire TIEHI of <device CRAMSL7206_TILE @ [sx,sy]>>, 
        <pin IN[1] of<device CRAMSL7206_TILE@[sx,sy]>> =>  <wire TIEHI of <device CRAMSL7206_TILE @ [sx,sy]>>, 
        <pin IN[2] of<device CRAMSL7206_TILE@[sx,sy]>> =>  <wire TIEHI of <device CRAMSL7206_TILE @ [sx,sy]>>, 
        <pin IN[3] of<device CRAMSL7206_TILE@[sx,sy]>> =>  <wire TIEHI of <device CRAMSL7206_TILE @ [sx,sy]>>, 
        <pin IN[4] of<device CRAMSL7206_TILE@[sx,sy]>> =>  <wire TIEHI of <device CRAMSL7206_TILE @ [sx,sy]>>, 
        <pin IN[5] of<device CRAMSL7206_TILE@[sx,sy]>> =>  <wire TIEHI of <device CRAMSL7206_TILE @ [sx,sy]>>, 
        <pin IN[6] of<device CRAMSL7206_TILE@[sx,sy]>> =>  <wire TIEHI of <device CRAMSL7206_TILE @ [sx,sy]>>, 
        <pin IN[7] of<device CRAMSL7206_TILE@[sx,sy]>> =>  <wire TIEHI of <device CRAMSL7206_TILE @ [sx,sy]>>, 
        <pin IN[8] of<device CRAMSL7206_TILE@[sx,sy]>> =>  <wire TIEHI of <device CRAMSL7206_TILE @ [sx,sy]>>, 
        <pin IN[9] of<device CRAMSL7206_TILE@[sx,sy]>> =>  <wire TIEHI of <device CRAMSL7206_TILE @ [sx,sy]>>, 
        <pin IN[10] of<device CRAMSL7206_TILE@[sx,sy]>> =>  <wire TIEHI of <device CRAMSL7206_TILE @ [sx,sy]>>, 
        <pin IN[11] of<device CRAMSL7206_TILE@[sx,sy]>> =>  <wire TIEHI of <device CRAMSL7206_TILE @ [sx,sy]>>, 
        <pin IN[12] of<device CRAMSL7206_TILE@[sx,sy]>> =>  <wire TIEHI of <device CRAMSL7206_TILE @ [sx,sy]>>, 
        <pin IN[13] of<device CRAMSL7206_TILE@[sx,sy]>> =>  <wire TIEHI of <device CRAMSL7206_TILE @ [sx,sy]>>, 
        <pin IN[14] of<device CRAMSL7206_TILE@[sx,sy]>> =>  <wire TIEHI of <device CRAMSL7206_TILE @ [sx,sy]>>, 
        <pin IN[15] of<device CRAMSL7206_TILE@[sx,sy]>> =>  <wire TIEHI of <device CRAMSL7206_TILE @ [sx,sy]>>, 
        <pin IN[16] of<device CRAMSL7206_TILE@[sx,sy]>> =>  <wire TIEHI of <device CRAMSL7206_TILE @ [sx,sy]>>, 
        <pin IN[17] of<device CRAMSL7206_TILE@[sx,sy]>> =>  <wire TIEHI of <device CRAMSL7206_TILE @ [sx,sy]>>, 
        <pin IN[18] of<device CRAMSL7206_TILE@[sx,sy]>> =>  <wire TIEHI of <device CRAMSL7206_TILE @ [sx,sy]>>, 
        <pin IN[19] of<device CRAMSL7206_TILE@[sx,sy]>> =>  <wire TIEHI of <device CRAMSL7206_TILE @ [sx,sy]>> 
      );
    }

}//end of function connect_cramsl7206_input

} //end of package pgl_funcs_connect_logic

