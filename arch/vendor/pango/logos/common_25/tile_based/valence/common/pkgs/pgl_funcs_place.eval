use pgl_defs;
use pgl_CLMA_SRB_inc,pgl_CLMS_SRB_inc,pgl_DRM_SRB_inc,pgl_APM_SRB_inc,pgl_IOL_SRB_inc,pgl_PLL_B_SRB_inc,pgl_PLL_T_SRB_inc;
use pgl_CCS_SRB_inc,pgl_DQSL_SRB_inc;
use pgl_IOCKGATEDLL_SRB_inc,pgl_IOCKDLL_SRB_inc;
use pgl_USCM_SRB_inc,pgl_TIEHI_SRB_inc,pgl_ANALOG_SRB_inc,pgl_IOLTB_SRB_inc;
use pgl_IOB0_SRB_inc,pgl_IOB1_SRB_inc,pgl_IOB2_SRB_inc,pgl_IOB3_SRB_inc,pgl_CLKMUX_SRB_inc;

package pgl_funcs_place
{

/*******************************************************************
********************************************************************/
function place_ccs_tile
(
    unsigned int tx,
    unsigned int ty
)
{
  int sx = tx * NUM_GRID_X;

  int tmp_ty,sy;

  sy = ty * NUM_GRID_Y;

    string strVar;

    sprintf(strVar,"ntMASK_O_%d_%d",sx,sy);
    &wire ntRef_ntMASK_O = wire *strVar;

    sprintf(strVar,"ntMASK_OL_%d_%d",sx,sy);
    &wire ntRef_ntMASK_OL = wire *strVar;

    sprintf(strVar,"ntINIT_COMPLETE_%d_%d",sx,sy);
    &wire ntRef_ntINIT_COMPLETE = wire *strVar;

    sprintf(strVar,"ntDONE_%d_%d",sx,sy);
    &wire ntRef_ntDONE = wire *strVar;

    sprintf(strVar,"ntCLOCKDR_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR = wire *strVar;

    sprintf(strVar,"ntBUS_BSCAN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_BSCAN_OUT[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntTCK1_%d_%d",sx,sy);
    &wire ntRef_ntTCK1 = wire *strVar;

    sprintf(strVar,"ntTMS1_%d_%d",sx,sy);
    &wire ntRef_ntTMS1 = wire *strVar;

    sprintf(strVar,"ntTDI1_%d_%d",sx,sy);
    &wire ntRef_ntTDI1 = wire *strVar;

    sprintf(strVar,"ntJRTI1_%d_%d",sx,sy);
    &wire ntRef_ntJRTI1 = wire *strVar;

    sprintf(strVar,"ntFLG_USER1_%d_%d",sx,sy);
    &wire ntRef_ntFLG_USER1 = wire *strVar;

    sprintf(strVar,"ntJRST_USER1_%d_%d",sx,sy);
    &wire ntRef_ntJRST_USER1 = wire *strVar;

    sprintf(strVar,"ntCLOCKDR_USER1_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR_USER1 = wire *strVar;

    sprintf(strVar,"ntCAPTUREDR_USER1_%d_%d",sx,sy);
    &wire ntRef_ntCAPTUREDR_USER1 = wire *strVar;

    sprintf(strVar,"ntSHIFTDR_USER1_%d_%d",sx,sy);
    &wire ntRef_ntSHIFTDR_USER1 = wire *strVar;

    sprintf(strVar,"ntUPDATEDR_USER1_%d_%d",sx,sy);
    &wire ntRef_ntUPDATEDR_USER1 = wire *strVar;

    sprintf(strVar,"ntTCK2_%d_%d",sx,sy);
    &wire ntRef_ntTCK2 = wire *strVar;

    sprintf(strVar,"ntTMS2_%d_%d",sx,sy);
    &wire ntRef_ntTMS2 = wire *strVar;

    sprintf(strVar,"ntTDI2_%d_%d",sx,sy);
    &wire ntRef_ntTDI2 = wire *strVar;

    sprintf(strVar,"ntJRTI2_%d_%d",sx,sy);
    &wire ntRef_ntJRTI2 = wire *strVar;

    sprintf(strVar,"ntFLG_USER2_%d_%d",sx,sy);
    &wire ntRef_ntFLG_USER2 = wire *strVar;

    sprintf(strVar,"ntJRST_USER2_%d_%d",sx,sy);
    &wire ntRef_ntJRST_USER2 = wire *strVar;

    sprintf(strVar,"ntCLOCKDR_USER2_%d_%d",sx,sy);
    &wire ntRef_ntCLOCKDR_USER2 = wire *strVar;

    sprintf(strVar,"ntCAPTUREDR_USER2_%d_%d",sx,sy);
    &wire ntRef_ntCAPTUREDR_USER2 = wire *strVar;

    sprintf(strVar,"ntSHIFTDR_USER2_%d_%d",sx,sy);
    &wire ntRef_ntSHIFTDR_USER2 = wire *strVar;

    sprintf(strVar,"ntUPDATEDR_USER2_%d_%d",sx,sy);
    &wire ntRef_ntUPDATEDR_USER2 = wire *strVar;

    sprintf(strVar,"ntFCLK_%d_%d",sx,sy);
    &wire ntRef_ntFCLK = wire *strVar;

    sprintf(strVar,"ntFCS_N_%d_%d",sx,sy);
    &wire ntRef_ntFCS_N = wire *strVar;

    sprintf(strVar,"ntMOSI_%d_%d",sx,sy);
    &wire ntRef_ntMOSI = wire *strVar;

    sprintf(strVar,"ntDAISY_O_%d_%d",sx,sy);
    &wire ntRef_ntDAISY_O = wire *strVar;

    sprintf(strVar,"ntFCE_N_%d_%d",sx,sy);
    &wire ntRef_ntFCE_N = wire *strVar;

    sprintf(strVar,"ntFWE_N_%d_%d",sx,sy);
    &wire ntRef_ntFWE_N = wire *strVar;

    sprintf(strVar,"ntFOE_N_%d_%d",sx,sy);
    &wire ntRef_ntFOE_N = wire *strVar;

    sprintf(strVar,"ntADR_%d_%d",sx,sy);
    &wire ntRef_ntADR[25:0] = wire *strVar[25:0];

    sprintf(strVar,"ntDOUT_%d_%d",sx,sy);
    &wire ntRef_ntDOUT[15:0] = wire *strVar[15:0];

    sprintf(strVar,"ntOUT_EN_CCLK_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_CCLK = wire *strVar;

    sprintf(strVar,"ntOUT_EN_FCS_N_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_FCS_N = wire *strVar;

    sprintf(strVar,"ntOUT_EN_FCE_N_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_FCE_N = wire *strVar;

    sprintf(strVar,"ntOUT_EN_CS_N_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_CS_N = wire *strVar;

    sprintf(strVar,"ntOUT_EN_D7_0_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_D7_0 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_D15_8_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_D15_8 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_DC_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_DC = wire *strVar;

    sprintf(strVar,"ntOUT_EN_DAISY_O_%d_%d",sx,sy);
    &wire ntRef_ntOUT_EN_DAISY_O = wire *strVar;

    sprintf(strVar,"ntCFGMOD_%d_%d",sx,sy);
    &wire ntRef_ntCFGMOD = wire *strVar;

    sprintf(strVar,"ntGLOGEN_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN = wire *strVar;

    sprintf(strVar,"ntGRS_N_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N = wire *strVar;

    sprintf(strVar,"ntGWEN_%d_%d",sx,sy);
    &wire ntRef_ntGWEN = wire *strVar;

    sprintf(strVar,"ntPUP_SEL_N_%d_%d",sx,sy);
    &wire ntRef_ntPUP_SEL_N = wire *strVar;

    sprintf(strVar,"ntIPAL_BUSY_%d_%d",sx,sy);
    &wire ntRef_ntIPAL_BUSY = wire *strVar;

    sprintf(strVar,"ntIPAL_DOUT_%d_%d",sx,sy);
    &wire ntRef_ntIPAL_DOUT[15:0] = wire *strVar[15:0];

    sprintf(strVar,"ntRBCRC_ERR_%d_%d",sx,sy);
    &wire ntRef_ntRBCRC_ERR = wire *strVar;

    sprintf(strVar,"ntRBCRC_VALID_%d_%d",sx,sy);
    &wire ntRef_ntRBCRC_VALID = wire *strVar;

    sprintf(strVar,"ntSEU_VALID_%d_%d",sx,sy);
    &wire ntRef_ntSEU_VALID = wire *strVar;

    sprintf(strVar,"ntSEU_INDEX_%d_%d",sx,sy);
    &wire ntRef_ntSEU_INDEX[11:0] = wire *strVar[11:0];

    sprintf(strVar,"ntSEU_SEC_%d_%d",sx,sy);
    &wire ntRef_ntSEU_SEC = wire *strVar;

    sprintf(strVar,"ntSEU_DED_%d_%d",sx,sy);
    &wire ntRef_ntSEU_DED = wire *strVar;

    sprintf(strVar,"ntUID_DOUT_%d_%d",sx,sy);
    &wire ntRef_ntUID_DOUT = wire *strVar;

    sprintf(strVar,"ntFUSE_%d_%d",sx,sy);
    &wire ntRef_ntFUSE[31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntWAKEUP_OVER_N_%d_%d",sx,sy);
    &wire ntRef_ntWAKEUP_OVER_N = wire *strVar;

    sprintf(strVar,"ntVDDT_N_%d_%d",sx,sy);
    &wire ntRef_ntVDDT_N = wire *strVar;

    sprintf(strVar,"ntMFG_POR_OFF_%d_%d",sx,sy);
    &wire ntRef_ntMFG_POR_OFF = wire *strVar;

    sprintf(strVar,"ntSO_%d_%d",sx,sy);
    &wire ntRef_ntSO = wire *strVar;

    sprintf(strVar,"ntTDI_BSCAN_%d_%d",sx,sy);
    &wire ntRef_ntTDI_BSCAN = wire *strVar;

    sprintf(strVar,"ntRELCK_%d_%d",sx,sy);
    &wire ntRef_ntRELCK = wire *strVar;

    sprintf(strVar,"ntCLK_ADC_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC = wire *strVar;

    sprintf(strVar,"ntCLK_USER_OSC_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USER_OSC = wire *strVar;

    sprintf(strVar,"ntMCLKB_O_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_O = wire *strVar;

    sprintf(strVar,"ntMCE_O_%d_%d",sx,sy);
    &wire ntRef_ntMCE_O = wire *strVar;

    sprintf(strVar,"ntMWR_O_%d_%d",sx,sy);
    &wire ntRef_ntMWR_O = wire *strVar;

    sprintf(strVar,"ntDATA_O_%d_%d",sx,sy);
    &wire ntRef_ntDATA_O[31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntBLSRCLK_O_%d_%d",sx,sy);
    &wire ntRef_ntBLSRCLK_O = wire *strVar;

    sprintf(strVar,"ntERASE_EN_O_%d_%d",sx,sy);
    &wire ntRef_ntERASE_EN_O = wire *strVar;

    sprintf(strVar,"ntPOR_N_O_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_O = wire *strVar;

    sprintf(strVar,"ntPOR_N_1_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_1 = wire *strVar;

    sprintf(strVar,"ntPOR_N_2_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_2 = wire *strVar;

    sprintf(strVar,"ntPOR_N_3_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_3 = wire *strVar;

    sprintf(strVar,"ntPRECHG_O_%d_%d",sx,sy);
    &wire ntRef_ntPRECHG_O = wire *strVar;

    sprintf(strVar,"ntPROG_CAP_O_%d_%d",sx,sy);
    &wire ntRef_ntPROG_CAP_O = wire *strVar;

    sprintf(strVar,"ntPROG_ON_O_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON_O = wire *strVar;

    sprintf(strVar,"ntRDBK_CAP_O_%d_%d",sx,sy);
    &wire ntRef_ntRDBK_CAP_O = wire *strVar;

    sprintf(strVar,"ntREAD_O_%d_%d",sx,sy);
    &wire ntRef_ntREAD_O = wire *strVar;

    sprintf(strVar,"ntREGION_RW_EN_O_%d_%d",sx,sy);
    &wire ntRef_ntREGION_RW_EN_O[11:0] = wire *strVar[11:0];

    sprintf(strVar,"ntRST_BLSR_O_%d_%d",sx,sy);
    &wire ntRef_ntRST_BLSR_O = wire *strVar;

    sprintf(strVar,"ntWLSHFT_SEL_O_%d_%d",sx,sy);
    &wire ntRef_ntWLSHFT_SEL_O[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntBLSHFT_SEL_O_%d_%d",sx,sy);
    &wire ntRef_ntBLSHFT_SEL_O[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntPD_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPD_OUT = wire *strVar;

    sprintf(strVar,"ntPUB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPUB_OUT = wire *strVar;

    sprintf(strVar,"ntWL_ON_O_%d_%d",sx,sy);
    &wire ntRef_ntWL_ON_O = wire *strVar;

    sprintf(strVar,"ntTYPE_O_%d_%d",sx,sy);
    &wire ntRef_ntTYPE_O = wire *strVar;

    sprintf(strVar,"ntFRAME_ADDR_O_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCOL_IN_O_%d_%d",sx,sy);
    &wire ntRef_ntCOL_IN_O[6:0] = wire *strVar[6:0];

    sprintf(strVar,"ntMCLKB_OL_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OL = wire *strVar;

    sprintf(strVar,"ntMCE_OL_%d_%d",sx,sy);
    &wire ntRef_ntMCE_OL = wire *strVar;

    sprintf(strVar,"ntMWR_OL_%d_%d",sx,sy);
    &wire ntRef_ntMWR_OL = wire *strVar;

    sprintf(strVar,"ntDATA_OL_%d_%d",sx,sy);
    &wire ntRef_ntDATA_OL[31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntBLSRCLK_OL_%d_%d",sx,sy);
    &wire ntRef_ntBLSRCLK_OL = wire *strVar;

    sprintf(strVar,"ntERASE_EN_OL_%d_%d",sx,sy);
    &wire ntRef_ntERASE_EN_OL = wire *strVar;

    sprintf(strVar,"ntPOR_N_OL_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OL = wire *strVar;

    sprintf(strVar,"ntPRECHG_OL_%d_%d",sx,sy);
    &wire ntRef_ntPRECHG_OL = wire *strVar;

    sprintf(strVar,"ntPROG_CAP_OL_%d_%d",sx,sy);
    &wire ntRef_ntPROG_CAP_OL = wire *strVar;

    sprintf(strVar,"ntPROG_ON_OL_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON_OL = wire *strVar;

    sprintf(strVar,"ntRDBK_CAP_OL_%d_%d",sx,sy);
    &wire ntRef_ntRDBK_CAP_OL = wire *strVar;

    sprintf(strVar,"ntREAD_OL_%d_%d",sx,sy);
    &wire ntRef_ntREAD_OL = wire *strVar;

    sprintf(strVar,"ntREGION_RW_EN_OL_%d_%d",sx,sy);
    &wire ntRef_ntREGION_RW_EN_OL[11:0] = wire *strVar[11:0];

    sprintf(strVar,"ntRST_BLSR_OL_%d_%d",sx,sy);
    &wire ntRef_ntRST_BLSR_OL = wire *strVar;

    sprintf(strVar,"ntWLSHFT_SEL_OL_%d_%d",sx,sy);
    &wire ntRef_ntWLSHFT_SEL_OL[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntBLSHFT_SEL_OL_%d_%d",sx,sy);
    &wire ntRef_ntBLSHFT_SEL_OL[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntPD_OUT_OL_%d_%d",sx,sy);
    &wire ntRef_ntPD_OUT_OL = wire *strVar;

    sprintf(strVar,"ntPUB_OUT_OL_%d_%d",sx,sy);
    &wire ntRef_ntPUB_OUT_OL = wire *strVar;

    sprintf(strVar,"ntWL_ON_OL_%d_%d",sx,sy);
    &wire ntRef_ntWL_ON_OL = wire *strVar;

    sprintf(strVar,"ntTYPE_OL_%d_%d",sx,sy);
    &wire ntRef_ntTYPE_OL = wire *strVar;

    sprintf(strVar,"ntFRAME_ADDR_OL_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_OL[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCOL_IN_OL_%d_%d",sx,sy);
    &wire ntRef_ntCOL_IN_OL[6:0] = wire *strVar[6:0];

    sprintf(strVar,"ntCLK_BLSHFT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_BLSHFT = wire *strVar;

    sprintf(strVar,"ntCLK_MSPI_%d_%d",sx,sy);
    &wire ntRef_ntCLK_MSPI = wire *strVar;

    sprintf(strVar,"ntTIELO_%d_%d",sx,sy);
    &wire ntRef_ntTIELO = wire *strVar;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar, "CCS_TILE_%d_%d", sx, sy);
    device CCS_TILE *strVar
          port map (

      MASK_O          => ntRef_ntMASK_O,         
      MASK_OL         => ntRef_ntMASK_OL,        
      INIT_COMPLETE   => ntRef_ntINIT_COMPLETE,  
      DONE            => ntRef_ntDONE,           
      CLOCKDR         => ntRef_ntCLOCKDR,        
      BUS_BSCAN_OUT   => ntRef_ntBUS_BSCAN_OUT,  
      TCK1            => ntRef_ntTCK1,           
      TMS1            => ntRef_ntTMS1,           
      TDI1            => ntRef_ntTDI1,           
      JRTI1           => ntRef_ntJRTI1,          
      FLG_USER1       => ntRef_ntFLG_USER1,      
      JRST_USER1      => ntRef_ntJRST_USER1,     
      CLOCKDR_USER1   => ntRef_ntCLOCKDR_USER1,  
      CAPTUREDR_USER1 => ntRef_ntCAPTUREDR_USER1,
      SHIFTDR_USER1   => ntRef_ntSHIFTDR_USER1,  
      UPDATEDR_USER1  => ntRef_ntUPDATEDR_USER1, 
      TCK2            => ntRef_ntTCK2,           
      TMS2            => ntRef_ntTMS2,           
      TDI2            => ntRef_ntTDI2,           
      JRTI2           => ntRef_ntJRTI2,          
      FLG_USER2       => ntRef_ntFLG_USER2,      
      JRST_USER2      => ntRef_ntJRST_USER2,     
      CLOCKDR_USER2   => ntRef_ntCLOCKDR_USER2,  
      CAPTUREDR_USER2 => ntRef_ntCAPTUREDR_USER2,
      SHIFTDR_USER2   => ntRef_ntSHIFTDR_USER2,  
      UPDATEDR_USER2  => ntRef_ntUPDATEDR_USER2, 
      FCLK            => ntRef_ntFCLK,           
      FCS_N           => ntRef_ntFCS_N,          
      MOSI            => ntRef_ntMOSI,           
      DAISY_O         => ntRef_ntDAISY_O,        
      FCE_N           => ntRef_ntFCE_N,          
      FWE_N           => ntRef_ntFWE_N,          
      FOE_N           => ntRef_ntFOE_N,          
      ADR             => ntRef_ntADR,            
      DOUT            => ntRef_ntDOUT,           
      OUT_EN_CCLK     => ntRef_ntOUT_EN_CCLK,    
      OUT_EN_FCS_N    => ntRef_ntOUT_EN_FCS_N,   
      OUT_EN_FCE_N    => ntRef_ntOUT_EN_FCE_N,   
      OUT_EN_CS_N     => ntRef_ntOUT_EN_CS_N,    
      OUT_EN_D7_0     => ntRef_ntOUT_EN_D7_0,    
      OUT_EN_D15_8    => ntRef_ntOUT_EN_D15_8,   
      OUT_EN_DC       => ntRef_ntOUT_EN_DC,      
      OUT_EN_DAISY_O  => ntRef_ntOUT_EN_DAISY_O, 
      CFGMOD          => ntRef_ntCFGMOD,         
      GLOGEN          => ntRef_ntGLOGEN,         
      GRS_N           => ntRef_ntGRS_N,          
      GWEN            => ntRef_ntGWEN,           
      PUP_SEL_N       => ntRef_ntPUP_SEL_N,      
      IPAL_BUSY       => ntRef_ntIPAL_BUSY,      
      IPAL_DOUT       => ntRef_ntIPAL_DOUT,      
      RBCRC_ERR       => ntRef_ntRBCRC_ERR,      
      RBCRC_VALID     => ntRef_ntRBCRC_VALID,    
      SEU_VALID       => ntRef_ntSEU_VALID,      
      SEU_INDEX       => ntRef_ntSEU_INDEX,      
      SEU_SEC         => ntRef_ntSEU_SEC,        
      SEU_DED         => ntRef_ntSEU_DED,        
      UID_DOUT        => ntRef_ntUID_DOUT,       
      FUSE            => ntRef_ntFUSE,           
      WAKEUP_OVER_N   => ntRef_ntWAKEUP_OVER_N,  
      VDDT_N          => ntRef_ntVDDT_N,         
      MFG_POR_OFF     => ntRef_ntMFG_POR_OFF,    
      SO              => ntRef_ntSO,             
      TDI_BSCAN       => ntRef_ntTDI_BSCAN,      
      RELCK           => ntRef_ntRELCK,          
      CLK_ADC         => ntRef_ntCLK_ADC,        
      CLK_USER_OSC    => ntRef_ntCLK_USER_OSC,   
      MCLKB_O         => ntRef_ntMCLKB_O,        
      MCE_O           => ntRef_ntMCE_O,          
      MWR_O           => ntRef_ntMWR_O,          
      DATA_O          => ntRef_ntDATA_O,         
      BLSRCLK_O       => ntRef_ntBLSRCLK_O,      
      ERASE_EN_O      => ntRef_ntERASE_EN_O,     
      POR_N_O         => ntRef_ntPOR_N_O,        
      POR_N_1         => ntRef_ntPOR_N_1,        
      POR_N_2         => ntRef_ntPOR_N_2,        
      POR_N_3         => ntRef_ntPOR_N_3,        
      PRECHG_O        => ntRef_ntPRECHG_O,       
      PROG_CAP_O      => ntRef_ntPROG_CAP_O,     
      PROG_ON_O       => ntRef_ntPROG_ON_O,      
      RDBK_CAP_O      => ntRef_ntRDBK_CAP_O,     
      READ_O          => ntRef_ntREAD_O,         
      REGION_RW_EN_O  => ntRef_ntREGION_RW_EN_O, 
      RST_BLSR_O      => ntRef_ntRST_BLSR_O,     
      WLSHFT_SEL_O    => ntRef_ntWLSHFT_SEL_O,   
      BLSHFT_SEL_O    => ntRef_ntBLSHFT_SEL_O,   
      PD_OUT          => ntRef_ntPD_OUT,         
      PUB_OUT         => ntRef_ntPUB_OUT,        
      WL_ON_O         => ntRef_ntWL_ON_O,        
      TYPE_O          => ntRef_ntTYPE_O,         
      FRAME_ADDR_O    => ntRef_ntFRAME_ADDR_O,   
      COL_IN_O        => ntRef_ntCOL_IN_O,       
      MCLKB_OL        => ntRef_ntMCLKB_OL,       
      MCE_OL          => ntRef_ntMCE_OL,         
      MWR_OL          => ntRef_ntMWR_OL,         
      DATA_OL         => ntRef_ntDATA_OL,        
      BLSRCLK_OL      => ntRef_ntBLSRCLK_OL,     
      ERASE_EN_OL     => ntRef_ntERASE_EN_OL,    
      POR_N_OL        => ntRef_ntPOR_N_OL,       
      PRECHG_OL       => ntRef_ntPRECHG_OL,      
      PROG_CAP_OL     => ntRef_ntPROG_CAP_OL,    
      PROG_ON_OL      => ntRef_ntPROG_ON_OL,     
      RDBK_CAP_OL     => ntRef_ntRDBK_CAP_OL,    
      READ_OL         => ntRef_ntREAD_OL,        
      REGION_RW_EN_OL => ntRef_ntREGION_RW_EN_OL,
      RST_BLSR_OL     => ntRef_ntRST_BLSR_OL,    
      WLSHFT_SEL_OL   => ntRef_ntWLSHFT_SEL_OL,  
      BLSHFT_SEL_OL   => ntRef_ntBLSHFT_SEL_OL,  
      PD_OUT_OL       => ntRef_ntPD_OUT_OL,      
      PUB_OUT_OL      => ntRef_ntPUB_OUT_OL,     
      WL_ON_OL        => ntRef_ntWL_ON_OL,       
      TYPE_OL         => ntRef_ntTYPE_OL,        
      FRAME_ADDR_OL   => ntRef_ntFRAME_ADDR_OL,  
      COL_IN_OL       => ntRef_ntCOL_IN_OL,      
      CLK_BLSHFT      => ntRef_ntCLK_BLSHFT,     
      CLK_MSPI        => ntRef_ntCLK_MSPI,       
      TIELO           => ntRef_ntTIELO,          
      TIEHI           => ntRef_ntTIEHI
                    )
        @([sx,sy]);

        STRUCT inc_spec_CCS incVar;
        string pin_SRB;
        string pin_logic_device;
        string attribute_IO;
        int loc_SRB;
        int sx_SRB,sy_SRB;
        string dev_srb ;
  
        foreach incVar(inc_CCS_SRB_spec)
        {
            pin_SRB = incVar.port_name_SRB;
            pin_logic_device = incVar.port_name_device;
            attribute_IO = incVar.attribute_IO;
            loc_SRB = incVar.loc_SRB;

            if(loc_SRB==0)
            {
              sx_SRB = sx;
              sy_SRB = sy + NUM_GRID_Y ;
              dev_srb = "SRB_TILE";

            }
            else if(loc_SRB==7)
            {
              sx_SRB = sx ; 
              sy_SRB = sy + loc_SRB * NUM_GRID_Y ;
              dev_srb = "SRB_TILE";
            }
            else if(loc_SRB==8)
            {
              sx_SRB = sx + 2; 
              sy_SRB = sy + loc_SRB * NUM_GRID_Y ;
              dev_srb = "CRAMSL2_TILE";
            }
            else
            {
              sx_SRB = sx - 4;
              sy_SRB = sy + loc_SRB*NUM_GRID_Y;
              dev_srb = "SRB_TILE";
            }
            
            if(attribute_IO =="I")
            { 
             
               connect(<pin *pin_logic_device of <device CCS_TILE @[sx,sy]>> => <wire *pin_SRB of <device *dev_srb@[sx_SRB,sy_SRB]>>);
            }
            else
            {
              connect(<pin *pin_SRB of<device *dev_srb@[sx_SRB,sy_SRB]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device *dev_srb@[sx_SRB,sy_SRB]>>
                                                                         : <wire *pin_logic_device of <device CCS_TILE @[sx,sy]>>); 
            }
        }

} // end of place_ccs_tile
/********************************************************************************/
/********************************************************************************/
function place_srb_tile(unsigned int tx,ty)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;

   //DOUBLE
    sprintf(strVar,"ntZDE_%d_%d",sx,sy);
    &wire ntRef_ntZDE[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;    
    
    sprintf(strVar,"ntZDN_%d_%d",sx,sy);
    &wire ntRef_ntZDN[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;    
 
    sprintf(strVar,"ntZDW_%d_%d",sx,sy);
    &wire ntRef_ntZDW[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZDS_%d_%d",sx,sy);
    &wire ntRef_ntZDS[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    //QUAD
    sprintf(strVar,"ntZQE_%d_%d",sx,sy);
    &wire ntRef_ntZQE[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
    
    sprintf(strVar,"ntZQN_%d_%d",sx,sy);
    &wire ntRef_ntZQN[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
 
    sprintf(strVar,"ntZQW_%d_%d",sx,sy);
    &wire ntRef_ntZQW[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZQS_%d_%d",sx,sy);
    &wire ntRef_ntZQS[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
    
     //SINGLE
    sprintf(strVar,"ntZSE_%d_%d",sx,sy);
    &wire ntRef_ntZSE[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
    
    sprintf(strVar,"ntZSN_%d_%d",sx,sy);
    &wire ntRef_ntZSN[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
 
    sprintf(strVar,"ntZSW_%d_%d",sx,sy);
    &wire ntRef_ntZSW[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSS_%d_%d",sx,sy);
    &wire ntRef_ntZSS[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    //DIAGONAL
    sprintf(strVar,"ntZSNE_%d_%d",sx,sy);
    &wire ntRef_ntZSNE[5:0] = wire *strVar[5:0]        /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
    
    sprintf(strVar,"ntZSSW_%d_%d",sx,sy);
    &wire ntRef_ntZSSW[5:0] = wire *strVar[5:0]        /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/; 
 
    sprintf(strVar,"ntZSNW_%d_%d",sx,sy);
    &wire ntRef_ntZSNW[5:0] = wire *strVar[5:0]        /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSSE_%d_%d",sx,sy);
    &wire ntRef_ntZSSE[5:0] = wire *strVar[5:0]        /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    //TO CLMS&CLMA 
    sprintf(strVar,"ntA_A0_%d_%d",sx,sy);
    &wire ntRef_ntA_A0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_A1_%d_%d",sx,sy);
    &wire ntRef_ntA_A1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntA_A2_%d_%d",sx,sy);
    &wire ntRef_ntA_A2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_A3_%d_%d",sx,sy);
    &wire ntRef_ntA_A3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_A4_%d_%d",sx,sy);
    &wire ntRef_ntA_A4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_B0_%d_%d",sx,sy);
    &wire ntRef_ntA_B0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_B1_%d_%d",sx,sy);
    &wire ntRef_ntA_B1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntA_B2_%d_%d",sx,sy);
    &wire ntRef_ntA_B2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntA_B3_%d_%d",sx,sy);
    &wire ntRef_ntA_B3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_B4_%d_%d",sx,sy);
    &wire ntRef_ntA_B4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_C0_%d_%d",sx,sy);
    &wire ntRef_ntA_C0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_C1_%d_%d",sx,sy);
    &wire ntRef_ntA_C1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntA_C2_%d_%d",sx,sy);
    &wire ntRef_ntA_C2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_C3_%d_%d",sx,sy);
    &wire ntRef_ntA_C3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_C4_%d_%d",sx,sy);
    &wire ntRef_ntA_C4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_D0_%d_%d",sx,sy);
    &wire ntRef_ntA_D0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_D1_%d_%d",sx,sy);
    &wire ntRef_ntA_D1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntA_D2_%d_%d",sx,sy);
    &wire ntRef_ntA_D2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_D3_%d_%d",sx,sy);
    &wire ntRef_ntA_D3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_D4_%d_%d",sx,sy);
    &wire ntRef_ntA_D4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_A0_%d_%d",sx,sy);
    &wire ntRef_ntS_A0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_A1_%d_%d",sx,sy);
    &wire ntRef_ntS_A1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntS_A2_%d_%d",sx,sy);
    &wire ntRef_ntS_A2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_A3_%d_%d",sx,sy);
    &wire ntRef_ntS_A3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_A4_%d_%d",sx,sy);
    &wire ntRef_ntS_A4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_B0_%d_%d",sx,sy);
    &wire ntRef_ntS_B0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_B1_%d_%d",sx,sy);
    &wire ntRef_ntS_B1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntS_B2_%d_%d",sx,sy);
    &wire ntRef_ntS_B2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_B3_%d_%d",sx,sy);
    &wire ntRef_ntS_B3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_B4_%d_%d",sx,sy);
    &wire ntRef_ntS_B4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_C0_%d_%d",sx,sy);
    &wire ntRef_ntS_C0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_C1_%d_%d",sx,sy);
    &wire ntRef_ntS_C1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntS_C2_%d_%d",sx,sy);
    &wire ntRef_ntS_C2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_C3_%d_%d",sx,sy);
    &wire ntRef_ntS_C3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_C4_%d_%d",sx,sy);
    &wire ntRef_ntS_C4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_D0_%d_%d",sx,sy);
    &wire ntRef_ntS_D0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_D1_%d_%d",sx,sy);
    &wire ntRef_ntS_D1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntS_D2_%d_%d",sx,sy);
    &wire ntRef_ntS_D2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_D3_%d_%d",sx,sy);
    &wire ntRef_ntS_D3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_D4_%d_%d",sx,sy);
    &wire ntRef_ntS_D4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_M0_%d_%d",sx,sy);           
    &wire ntRef_ntA_M0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_M1_%d_%d",sx,sy);           
    &wire ntRef_ntA_M1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_M2_%d_%d",sx,sy);           
    &wire ntRef_ntA_M2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntA_M3_%d_%d",sx,sy);           
    &wire ntRef_ntA_M3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_M0_%d_%d",sx,sy);           
    &wire ntRef_ntS_M0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_M1_%d_%d",sx,sy);           
    &wire ntRef_ntS_M1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_M2_%d_%d",sx,sy);           
    &wire ntRef_ntS_M2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntS_M3_%d_%d",sx,sy);           
    &wire ntRef_ntS_M3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_RS_%d_%d",sx,sy);           
    &wire ntRef_ntA_RS = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_CE_%d_%d",sx,sy);           
    &wire ntRef_ntA_CE = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_RS_%d_%d",sx,sy);           
    &wire ntRef_ntS_RS = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_CE_%d_%d",sx,sy);           
    &wire ntRef_ntS_CE = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_CLK_%d_%d",sx,sy);           
    &wire ntRef_ntA_CLK = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_CLK_%d_%d",sx,sy);           
    &wire ntRef_ntS_CLK = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_AD_%d_%d",sx,sy);           
    &wire ntRef_ntA_AD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_BD_%d_%d",sx,sy);           
    &wire ntRef_ntA_BD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_CD_%d_%d",sx,sy);           
    &wire ntRef_ntA_CD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_DD_%d_%d",sx,sy);           
    &wire ntRef_ntA_DD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_AD_%d_%d",sx,sy);           
    &wire ntRef_ntS_AD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_BD_%d_%d",sx,sy);           
    &wire ntRef_ntS_BD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntS_CD_%d_%d",sx,sy);           
    &wire ntRef_ntS_CD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntS_DD_%d_%d",sx,sy);           
    &wire ntRef_ntS_DD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);           
    &wire ntRef_ntTIEHI = wire *strVar; 

    sprintf(strVar,"ntLH1_%d_%d",sx,sy);           
    &wire ntRef_ntLH1 = wire *strVar;

    sprintf(strVar,"ntLV1_%d_%d",sx,sy);           
    &wire ntRef_ntLV1 = wire *strVar;

    //SW UNUSED
    
 
    sprintf(strVar, "SRB_TILE_%d_%d", sx, sy);
       device SRB_TILE *strVar
           port map (
                     A_A0  => ntRef_ntA_A0,
                     A_A1  => ntRef_ntA_A1,
                     A_A2  => ntRef_ntA_A2,
                     A_A3  => ntRef_ntA_A3,
                     A_A4  => ntRef_ntA_A4,
                     A_B0  => ntRef_ntA_B0,
                     A_B1  => ntRef_ntA_B1,
                     A_B2  => ntRef_ntA_B2,
                     A_B3  => ntRef_ntA_B3,
                     A_B4  => ntRef_ntA_B4,
                     A_C0  => ntRef_ntA_C0,
                     A_C1  => ntRef_ntA_C1,
                     A_C2  => ntRef_ntA_C2,
                     A_C3  => ntRef_ntA_C3,
                     A_C4  => ntRef_ntA_C4,
                     A_D0  => ntRef_ntA_D0,
                     A_D1  => ntRef_ntA_D1,
                     A_D2  => ntRef_ntA_D2,
                     A_D3  => ntRef_ntA_D3,
                     A_D4  => ntRef_ntA_D4,
                     S_A0  => ntRef_ntS_A0,
                     S_A1  => ntRef_ntS_A1,
                     S_A2  => ntRef_ntS_A2,
                     S_A3  => ntRef_ntS_A3,
                     S_A4  => ntRef_ntS_A4,
                     S_B0  => ntRef_ntS_B0,
                     S_B1  => ntRef_ntS_B1,
                     S_B2  => ntRef_ntS_B2,
                     S_B3  => ntRef_ntS_B3,
                     S_B4  => ntRef_ntS_B4,
                     S_C0  => ntRef_ntS_C0,
                     S_C1  => ntRef_ntS_C1,
                     S_C2  => ntRef_ntS_C2,
                     S_C3  => ntRef_ntS_C3,
                     S_C4  => ntRef_ntS_C4,
                     S_D0  => ntRef_ntS_D0,
                     S_D1  => ntRef_ntS_D1,
                     S_D2  => ntRef_ntS_D2,
                     S_D3  => ntRef_ntS_D3,
                     S_D4  => ntRef_ntS_D4,
                     A_M0  => ntRef_ntA_M0,
                     A_M1  => ntRef_ntA_M1,
                     A_M2  => ntRef_ntA_M2,
                     A_M3  => ntRef_ntA_M3,
                     S_M0  => ntRef_ntS_M0,
                     S_M1  => ntRef_ntS_M1,
                     S_M2  => ntRef_ntS_M2,
                     S_M3  => ntRef_ntS_M3,
                     A_RS  => ntRef_ntA_RS,
                     A_CE  => ntRef_ntA_CE,
                     S_RS  => ntRef_ntS_RS,
                     S_CE  => ntRef_ntS_CE,
                     A_CLK => ntRef_ntA_CLK,
                     S_CLK => ntRef_ntS_CLK,
                     A_AD  => ntRef_ntA_AD,
                     A_BD  => ntRef_ntA_BD,
                     A_CD  => ntRef_ntA_CD,
                     A_DD  => ntRef_ntA_DD,
                     S_AD  => ntRef_ntS_AD,
                     S_BD  => ntRef_ntS_BD,
                     S_CD  => ntRef_ntS_CD,
                     S_DD  => ntRef_ntS_DD,

                     ZSS   => ntRef_ntZSS,
                     ZSN   => ntRef_ntZSN,
                     ZSE   => ntRef_ntZSE,
                     ZSW   => ntRef_ntZSW,
                     ZSNW  => ntRef_ntZSNW,
                     ZSNE  => ntRef_ntZSNE,
                     ZSSW  => ntRef_ntZSSW,
                     ZSSE  => ntRef_ntZSSE,
                     ZDS   => ntRef_ntZDS,
                     ZDN   => ntRef_ntZDN,
                     ZDE   => ntRef_ntZDE,
                     ZDW   => ntRef_ntZDW,
                     ZQS   => ntRef_ntZQS,
                     ZQN   => ntRef_ntZQN,
                     ZQE   => ntRef_ntZQE,
                     ZQW   => ntRef_ntZQW,
                     LH1   => ntRef_ntLH1,                    
                     LV1   => ntRef_ntLV1,                    
                     TIEHI => ntRef_ntTIEHI                    
                   )
        @([sx,sy]);
}//end of function place_srb_tile
/********************************************************************************/
/********************************************************************************/
function connect_blank_srb(unsigned int tx,ty)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    connect
      (
        <pin A_Y0 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin A_Y1 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin A_Y2 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin A_Y3 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin A_Q0 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin A_Q1 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin A_Q2 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin A_Q3 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin S_Y0 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin S_Y1 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin S_Y2 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin S_Y3 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin S_Q0 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin S_Q1 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin S_Q2 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin S_Q3 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin A_Y6AB of <device SRB_TILE @[sx,sy]>>  => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin A_Y6CD of <device SRB_TILE @[sx,sy]>>  => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin S_Y6AB of <device SRB_TILE @[sx,sy]>>  => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin S_Y6CD of <device SRB_TILE @[sx,sy]>>  => <wire TIEHI of <device SRB_TILE @[sx,sy]>>
      );


}//end of function connect_blank_srb
/********************************************************************************
********************************************************************************/
function place_drm_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
  
    string strVar;
   
    //LOGIC OUTPUT
    sprintf(strVar,"ntALMOST_EMPTY_%d_%d",sx,sy);
    &wire ntRef_ntALMOST_EMPTY = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
   
    sprintf(strVar,"ntALMOST_FULL_%d_%d",sx,sy);
    &wire ntRef_ntALMOST_FULL = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntEMPTY_%d_%d",sx,sy);
    &wire ntRef_ntEMPTY = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
  
    sprintf(strVar,"ntFULL_%d_%d",sx,sy);
    &wire ntRef_ntFULL = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntQA0_%d_%d",sx,sy);
    &wire ntRef_ntQA0[17:0] = wire *strVar[17:0]        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntQA1_%d_%d",sx,sy);
    &wire ntRef_ntQA1[17:0] = wire *strVar[17:0]        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntQB0_%d_%d",sx,sy);
    &wire ntRef_ntQB0[17:0] = wire *strVar[17:0]        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntQB1_%d_%d",sx,sy);
    &wire ntRef_ntQB1[17:0] = wire *strVar[17:0]        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar, "DRM_TILE_%d_%d", sx, sy);
    
    device DRM_TILE *strVar
         port map (
                    ALMOST_EMPTY   => ntRef_ntALMOST_EMPTY,
                    ALMOST_FULL    => ntRef_ntALMOST_FULL,
                    EMPTY          => ntRef_ntEMPTY,
                    FULL           => ntRef_ntFULL,
                    QA0            => ntRef_ntQA0,
                    QB0            => ntRef_ntQB0,
                    QA1            => ntRef_ntQA1,
                    QB1            => ntRef_ntQB1
                  )
        @([sx,sy]);
  
      STRUCT inc_spec_DRM incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_DRM_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device DRM_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-2,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx-2,sy_SRB]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE @ [sx-2,sy_SRB]>>
                                                                        : <wire *pin_logic_device of <device DRM_TILE @[sx,sy]>>); 
          }
      }         
        
}// end of function place_drm_tile


/********************************************************************************
********************************************************************************/

function place_apm_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    string strVar;

    sprintf(strVar,"ntXO_%d_%d",sx,sy);
    &wire ntRef_ntXO[17:0] = wire *strVar[17:0]        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntXBO_%d_%d",sx,sy);
    &wire ntRef_ntXBO[17:0] = wire *strVar[17:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPO_%d_%d",sx,sy);
    &wire ntRef_ntPO[47:0] = wire *strVar[47:0]        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntP_%d_%d",sx,sy);
    &wire ntRef_ntP[47:0] = wire *strVar[47:0]         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPCO_%d_%d",sx,sy);
    &wire ntRef_ntPCO = wire *strVar                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO = wire *strVar                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTIELO_0_%d_%d",sx,sy);
    &wire ntRef_ntTIELO_0 = wire *strVar;

    sprintf(strVar,"ntTIELO_1_%d_%d",sx,sy);
    &wire ntRef_ntTIELO_1 = wire *strVar;

    sprintf(strVar,"ntTIELO_2_%d_%d",sx,sy);
    &wire ntRef_ntTIELO_2 = wire *strVar;

    sprintf(strVar,"ntTIELO_3_%d_%d",sx,sy);
    &wire ntRef_ntTIELO_3 = wire *strVar;

    sprintf(strVar, "APM_TILE_%d_%d", sx, sy);
    
    device APM_TILE *strVar
         port map (
                   XO      =>  ntRef_ntXO,
                   PO      =>  ntRef_ntPO,
                   XBO     =>  ntRef_ntXBO,
                   P       =>  ntRef_ntP,
                   PCO     =>  ntRef_ntPCO,
                   TEST_SO =>  ntRef_ntTEST_SO,
                   TIELO_0 =>  ntRef_ntTIELO_0,
                   TIELO_1 =>  ntRef_ntTIELO_1,
                   TIELO_2 =>  ntRef_ntTIELO_2,
                   TIELO_3 =>  ntRef_ntTIELO_3
                 )
        @([sx,sy]);

      STRUCT inc_spec_APM incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_APM_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device APM_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-2,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx-2,sy_SRB]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE @ [sx-2,sy_SRB]>>
                                                                        : <wire *pin_logic_device of <device APM_TILE @[sx,sy]>>); 
          }
      }         

        
}// end of function place_apm_tile

/********************************************************************************
********************************************************************************/
function place_iol_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntRX_DATA_A_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_A[7:0] = wire *strVar[7:0]   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_DATA_B_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_B[7:0] = wire *strVar[7:0]   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIODLY_OV_A_%d_%d",sx,sy);
    &wire ntRef_ntIODLY_OV_A = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_DATA_DD_A_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_DD_A = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_DATA_IFF_A_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_IFF_A = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIODLY_OV_B_%d_%d",sx,sy);
    &wire ntRef_ntIODLY_OV_B = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_DATA_DD_B_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_DD_B = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_DATA_IFF_B_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_IFF_B = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDO_A_%d_%d",sx,sy);
    &wire ntRef_ntDO_A = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDO_B_%d_%d",sx,sy);
    &wire ntRef_ntDO_B = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTO_A_%d_%d",sx,sy);
    &wire ntRef_ntTO_A = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTO_B_%d_%d",sx,sy);
    &wire ntRef_ntTO_B = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntINCK_A_%d_%d",sx,sy);
    &wire ntRef_ntINCK_A = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntINCK_B_%d_%d",sx,sy);
    &wire ntRef_ntINCK_B = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntTERM_A_%d_%d",sx,sy);
    &wire ntRef_ntTERM_A = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM_B_%d_%d",sx,sy);
    &wire ntRef_ntTERM_B = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMIPI_SW_DYN_O_A_%d_%d",sx,sy);
    &wire ntRef_ntMIPI_SW_DYN_O_A = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntMIPI_SW_DYN_O_B_%d_%d",sx,sy);
    &wire ntRef_ntMIPI_SW_DYN_O_B = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTIELO_%d_%d",sx,sy);
    &wire ntRef_ntTIELO = wire *strVar;

    sprintf(strVar, "IOL_TILE_%d_%d", sx, sy);
    
    device IOL_TILE *strVar
         port map (
                   IODLY_OV_A    =>  ntRef_ntIODLY_OV_A ,
                   RX_DATA_A     =>  ntRef_ntRX_DATA_A,
                   RX_DATA_DD_A  =>  ntRef_ntRX_DATA_DD_A,
                   IODLY_OV_B    =>  ntRef_ntIODLY_OV_B ,
                   RX_DATA_B       =>  ntRef_ntRX_DATA_B,
                   RX_DATA_DD_B    =>  ntRef_ntRX_DATA_DD_B,
                   DO_A            =>  ntRef_ntDO_A,
                   DO_B            =>  ntRef_ntDO_B,
                   TO_A            =>  ntRef_ntTO_A,
                   TO_B            =>  ntRef_ntTO_B,
                   INCK_A          =>  ntRef_ntINCK_A,
                   INCK_B          =>  ntRef_ntINCK_B,
                   TERM_A          =>  ntRef_ntTERM_A,
                   TERM_B          =>  ntRef_ntTERM_B,
                   MIPI_SW_DYN_O_A => ntRef_ntMIPI_SW_DYN_O_A,
                   MIPI_SW_DYN_O_B => ntRef_ntMIPI_SW_DYN_O_B,
                   TIELO           => ntRef_ntTIELO

                  )
        @([sx,sy]);

      STRUCT inc_spec_IOL incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;
   
      unsigned int sx_SRB;
      sx_SRB = sx-2;
      int cnt;

      foreach incVar(inc_IOL_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
            connect(<pin *pin_logic_device of <device IOL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_SRB,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy_SRB]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE @ [sx_SRB,sy_SRB]>>
                                                                                                               : <wire *pin_logic_device of <device IOL_TILE @[sx,sy]>>);
          }
      }               
}// end of function place_iol_tile
/********************************************************************************
********************************************************************************/
function place_cramsl2_tile(unsigned int tx,ty)
{

  unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;

    
    string strVar;
    
    sprintf(strVar,"ntOUT_%d_%d",sx,sy);
    &wire ntRef_ntOUT[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;


    sprintf(strVar, "CRAMSL2_TILE_%d_%d", sx, sy);

    device CRAMSL2_TILE *strVar

    port map (
                   OUT => ntRef_ntOUT,
                   TIEHI  => ntRef_ntTIEHI
              )
        @([sx,sy]);

      STRUCT inc_spec_SRB_TIEHI incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;
   
      unsigned int sx_SRB;
      sx_SRB = sx-2;
      int cnt;

      foreach incVar(inc_TIEHI_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          sy_SRB = sy;
          
          connect(<pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy_SRB]>> =>  <wire *pin_logic_device of <device CRAMSL2_TILE @ [sx,sy]>>);
     }
    
}
/********************************************************************************
********************************************************************************/
function place_dqsl_tile(unsigned int tx,ty,flag_ccs)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;

    sprintf(strVar,"ntWL_OV_%d_%d",sx,sy);
    &wire ntRef_ntWL_OV = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRDEL_OV_%d_%d",sx,sy);
    &wire ntRef_ntRDEL_OV = wire *strVar               /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDGTS_%d_%d",sx,sy);
    &wire ntRef_ntDGTS = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_DQSI_DEL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DQSI_DEL = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_W_DEL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_W_DEL = wire *strVar             /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_W_%d_%d",sx,sy);
    &wire ntRef_ntCLK_W = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntIFIFO_WADDR_%d_%d",sx,sy);
    &wire ntRef_ntIFIFO_WADDR[2:0] = wire *strVar[2:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIFIFO_RADDR_%d_%d",sx,sy);
    &wire ntRef_ntIFIFO_RADDR[2:0] = wire *strVar[2:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
   
    sprintf(strVar,"ntREAD_VALID_%d_%d",sx,sy);
    &wire ntRef_ntREAD_VALID = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGATE_TO_LOOP_%d_%d",sx,sy);
    &wire ntRef_ntGATE_TO_LOOP = wire *strVar;

    sprintf(strVar,"ntDQS_TILO_%d_%d",sx,sy);
    &wire ntRef_ntDQS_TILO = wire *strVar;

    sprintf(strVar,"ntDQS_TIHI_%d_%d",sx,sy);
    &wire ntRef_ntDQS_TIHI = wire *strVar;

    sprintf(strVar,"ntDLL_CODE0_BUF_%d_%d",sx,sy);
    &wire ntRef_ntDLL_CODE0_BUF[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntDLL_CODE1_BUF_%d_%d",sx,sy);
    &wire ntRef_ntDLL_CODE1_BUF[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntDLL_CODE2_BUF_%d_%d",sx,sy);
    &wire ntRef_ntDLL_CODE2_BUF[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCLK_IOL_T_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOL_T_OUT[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_IOL_B_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOL_B_OUT[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_R_%d_%d",sx,sy);
    &wire ntRef_ntCLK_R = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntDQS_DRIFT_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DRIFT[1:0] = wire *strVar[1:0]           /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDRIFT_DETECT_ERR_%d_%d",sx,sy);
    &wire ntRef_ntDRIFT_DETECT_ERR = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_DRIFT_STATUS_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DRIFT_STATUS = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;           

      sprintf(strVar,"DQSL_TILE_%d_%d",sx,sy);
      device DQSL_TILE *strVar
        port map
          (
              WL_OV        => ntRef_ntWL_OV,
              RDEL_OV      => ntRef_ntRDEL_OV,
              DGTS         => ntRef_ntDGTS,
              READ_VALID   => ntRef_ntREAD_VALID,
              CLK_DQSI_DEL => ntRef_ntCLK_DQSI_DEL,
              CLK_W_DEL    => ntRef_ntCLK_W_DEL,
              CLK_W        => ntRef_ntCLK_W,
              IFIFO_WADDR  => ntRef_ntIFIFO_WADDR,
              IFIFO_RADDR  => ntRef_ntIFIFO_RADDR,
              DQS_TILO     => ntRef_ntDQS_TILO,
              DQS_TIHI     => ntRef_ntDQS_TIHI,
              GATE_TO_LOOP => ntRef_ntGATE_TO_LOOP,
              CLK_IOL_T_OUT=> ntRef_ntCLK_IOL_T_OUT,
              CLK_IOL_B_OUT=> ntRef_ntCLK_IOL_B_OUT,
              DLL_CODE0_BUF=> ntRef_ntDLL_CODE0_BUF,
              DLL_CODE1_BUF=> ntRef_ntDLL_CODE1_BUF,
              DLL_CODE2_BUF=> ntRef_ntDLL_CODE2_BUF,
              CLK_R        => ntRef_ntCLK_R,
              DQS_DRIFT            => ntRef_ntDQS_DRIFT,
              DRIFT_DETECT_ERR    => ntRef_ntDRIFT_DETECT_ERR,
              DQS_DRIFT_STATUS    => ntRef_ntDQS_DRIFT_STATUS,
              TIEHI           => ntRef_ntTIEHI
           )
          @([sx,sy]);

      STRUCT inc_spec_DQSL incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      string direct_SRB;

      foreach incVar(inc_DQSL_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
                   
          if(attribute_IO =="I")
          {       
            connect(<pin *pin_logic_device of <device DQSL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-2,sy]>>);
          }
          else
          {
            if(incVar.port_name_device == "TIEHI")
            {
                if(flag_ccs==0)
                {
                    connect(<pin *pin_SRB of<device SRB_TILE@[sx-2,sy]>> =>  <wire TIEHI of <device SRB_TILE @ [sx-2,sy]>>);
                }
            }
            else
            {
                connect(<pin *pin_SRB of<device SRB_TILE@[sx-2,sy]>> =>  <wire *pin_logic_device of <device DQSL_TILE @[sx,sy]>>);
            }
          }
      }  

}
/********************************************************************************
********************************************************************************/
function place_rlybufs5_tile(unsigned int tx,ty)
{
    int sx,sy;
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;
    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntTIEH_%d_%d",sx,sy);
    &wire ntRef_ntTIEH = wire *strVar;

    sprintf(strVar,"RLYBUFS5_TILE_%d_%d",sx,sy);
    device RLYBUFS5_TILE *strVar
    port map
      (
          CLK_OUTT    => ntRef_ntCLK_OUTT,
          CLK_OUTB    => ntRef_ntCLK_OUTB,
          TIEH       => ntRef_ntTIEH
      )
      @ ([sx,sy]);    

}
/********************************************************************************
********************************************************************************/
function place_rlybufs_tile(unsigned int tx,ty)
{
    int sx,sy;
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;
    sprintf(strVar,"ntCLK_PREGMUX_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PREGMUX_OUT[15:0] = wire *strVar[15:0];

    sprintf(strVar,"ntCLK_USCM_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USCM_OUT[29:0] = wire *strVar[29:0];

    sprintf(strVar,"ntCLK_ADC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_USER_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USER_OUT = wire *strVar;

    sprintf(strVar,"ntMCLKB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OUT = wire *strVar;

    sprintf(strVar,"ntDCI_INIT_OUT_%d_%d",sx,sy);
    &wire ntRef_ntDCI_INIT_OUT = wire *strVar;

    sprintf(strVar,"RLYBUFS_TILE_%d_%d",sx,sy);
    device RLYBUFS_TILE *strVar
    port map
      (
          CLK_PREGMUX_OUT    => ntRef_ntCLK_PREGMUX_OUT,
          CLK_USCM_OUT       => ntRef_ntCLK_USCM_OUT
      )
      @ ([sx,sy]);   
 
}//end of function place_rlybufs_tile
/******************************************************************
********************************************************************/
function place_iob_tile_d(unsigned int tx,ty)
{  
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;

    sprintf(strVar,"ntBSMODE1_O_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE1_O = wire *strVar;

    sprintf(strVar,"ntBSMODE2_O_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE2_O = wire *strVar;

    sprintf(strVar,"ntBSMODE3_O_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE3_O = wire *strVar;

    sprintf(strVar,"ntCCS_DIN_%d_%d",sx,sy);
    &wire ntRef_ntCCS_DIN[15:0] = wire *strVar[15:0];

    sprintf(strVar,"ntCLK_XTAL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_XTAL = wire *strVar;

    sprintf(strVar,"ntCLOCK_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_O = wire *strVar;

    sprintf(strVar,"ntCS_N_%d_%d",sx,sy);
    &wire ntRef_ntCS_N = wire *strVar;

    sprintf(strVar,"ntDIN_%d_%d",sx,sy);
    &wire ntRef_ntDIN[79:0] = wire *strVar[79:0];

    sprintf(strVar,"ntDIN_RST_N_%d_%d",sx,sy);
    &wire ntRef_ntDIN_RST_N = wire *strVar;

    sprintf(strVar,"ntDONE_I_%d_%d",sx,sy);
    &wire ntRef_ntDONE_I = wire *strVar;

    sprintf(strVar,"ntEMCLK_%d_%d",sx,sy);
    &wire ntRef_ntEMCLK = wire *strVar;

    sprintf(strVar,"ntGOUTEN_O_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_O = wire *strVar;

    sprintf(strVar,"ntINIT_N_%d_%d",sx,sy);
    &wire ntRef_ntINIT_N = wire *strVar;

    sprintf(strVar,"ntM_%d_%d",sx,sy);
    &wire ntRef_ntM[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntPOR_N_O_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_O = wire *strVar;

    sprintf(strVar,"ntRDWR_N_%d_%d",sx,sy);
    &wire ntRef_ntRDWR_N = wire *strVar;

    sprintf(strVar,"ntS11_BSRRST_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_BSRRST_O = wire *strVar;

    sprintf(strVar,"ntS11_CCS_DIN_%d_%d",sx,sy);
    &wire ntRef_ntS11_CCS_DIN[0:79] = wire *strVar[0:79];

    sprintf(strVar,"ntS11_DIN_MIPI_LP_%d_%d",sx,sy);
    &wire ntRef_ntS11_DIN_MIPI_LP[39:0] = wire *strVar[39:0];

    sprintf(strVar,"ntSCLK_%d_%d",sx,sy);
    &wire ntRef_ntSCLK = wire *strVar;

    sprintf(strVar,"ntSHIFT_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntSHIFT_DR_O = wire *strVar;

    sprintf(strVar,"ntSO_%d_%d",sx,sy);
    &wire ntRef_ntSO = wire *strVar;

    sprintf(strVar,"ntUPDATE_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntUPDATE_DR_O = wire *strVar;


    sprintf(strVar, "IOB2_TILE_%d_%d", sx, sy);
    device IOB2_TILE *strVar
         port map (
                     BSMODE1_O       => ntRef_ntBSMODE1_O,      
                     BSMODE2_O       => ntRef_ntBSMODE2_O,      
                     BSMODE3_O       => ntRef_ntBSMODE3_O,      
                     CCS_DIN         => ntRef_ntCCS_DIN,        
                     CLK_XTAL        => ntRef_ntCLK_XTAL,       
                     CLOCK_DR_O      => ntRef_ntCLOCK_DR_O,     
                     CS_N            => ntRef_ntCS_N,           
                     DIN             => ntRef_ntDIN,            
                     DIN_RST_N       => ntRef_ntDIN_RST_N,      
                     DONE_I          => ntRef_ntDONE_I,         
                     EMCLK           => ntRef_ntEMCLK,          
                     GOUTEN_O        => ntRef_ntGOUTEN_O,       
                     INIT_N          => ntRef_ntINIT_N,         
                     M               => ntRef_ntM,              
                     POR_N_O         => ntRef_ntPOR_N_O,        
                     RDWR_N          => ntRef_ntRDWR_N,         
                     S11_BSRRST_O    => ntRef_ntS11_BSRRST_O,   
                     S11_DIN_MIPI_LP => ntRef_ntS11_DIN_MIPI_LP,
                     SCLK            => ntRef_ntSCLK,           
                     SHIFT_DR_O      => ntRef_ntSHIFT_DR_O,     
                     SO              => ntRef_ntSO,             
                     UPDATE_DR_O     => ntRef_ntUPDATE_DR_O
                   )
        @([sx,sy]);


      STRUCT inc_spec_IOB2 incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_srb,ty_srb,sx_srb;

      foreach incVar(inc_IOB2_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          sy_srb = sy + NUM_GRID_Y; 

          sx_srb =  sx + loc_SRB*NUM_GRID_Y ; 

          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device IOB2_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> =>  <wire *pin_logic_device of <device IOB2_TILE @[sx,sy]>>); 
          }
      }         

}//end of function place_iob_tile_d

/*******************************************************************
********************************************************************/
function place_iob_tile_r(unsigned int tx,ty)
{  
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;
    sprintf(strVar,"ntADDR0_%d_%d",sx,sy);
    &wire ntRef_ntADDR0[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntADDR1_%d_%d",sx,sy);
    &wire ntRef_ntADDR1[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntBSMODE1_O_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE1_O = wire *strVar;

    sprintf(strVar,"ntBSMODE2_O_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE2_O = wire *strVar;

    sprintf(strVar,"ntBSMODE3_O_%d_%d",sx,sy);
    &wire ntRef_ntBSMODE3_O = wire *strVar;

    sprintf(strVar,"ntCLK_XTAL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_XTAL = wire *strVar;

    sprintf(strVar,"ntCLOCK_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_O = wire *strVar;

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntDIN_%d_%d",sx,sy);
    &wire ntRef_ntDIN[79:0] = wire *strVar[79:0];

    sprintf(strVar,"ntDQS_O_%d_%d",sx,sy);
    &wire ntRef_ntDQS_O[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntGOUTEN_O_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_O = wire *strVar;

    sprintf(strVar,"ntREGION_INC_%d_%d",sx,sy);
    &wire ntRef_ntREGION_INC[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntS11_BSRRST_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_BSRRST_O = wire *strVar;

    sprintf(strVar,"ntS11_PAD_STATE_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_PAD_STATE_O = wire *strVar;

    sprintf(strVar,"ntSHIFT_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntSHIFT_DR_O = wire *strVar;

    sprintf(strVar,"ntSO_%d_%d",sx,sy);
    &wire ntRef_ntSO = wire *strVar;

    sprintf(strVar,"ntUPDATE_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntUPDATE_DR_O = wire *strVar;

    sprintf(strVar,"ntGATE_FROM_LOOP_%d_%d",sx,sy);
    &wire ntRef_ntGATE_FROM_LOOP[1:0] = wire *strVar[1:0];

    sprintf(strVar, "IOB1_TILE_%d_%d", sx, sy);
    device IOB1_TILE *strVar
         port map (
                       ADDR0           => ntRef_ntADDR0,          
                       ADDR1           => ntRef_ntADDR1,          
                       BSMODE1_O       => ntRef_ntBSMODE1_O,      
                       BSMODE2_O       => ntRef_ntBSMODE2_O,      
                       BSMODE3_O       => ntRef_ntBSMODE3_O,      
                       CLK_XTAL        => ntRef_ntCLK_XTAL,       
                       CLOCK_DR_O      => ntRef_ntCLOCK_DR_O,     
                       COL_INC_OUT     => ntRef_ntCOL_INC_OUT,    
                       CS_OUT          => ntRef_ntCS_OUT,         
                       DIN             => ntRef_ntDIN,            
                       DQS_O           => ntRef_ntDQS_O,          
                       GOUTEN_O        => ntRef_ntGOUTEN_O,       
                       REGION_INC      => ntRef_ntREGION_INC,     
                       S11_BSRRST_O    => ntRef_ntS11_BSRRST_O,   
                       S11_PAD_STATE_O => ntRef_ntS11_PAD_STATE_O,
                       SHIFT_DR_O      => ntRef_ntSHIFT_DR_O,     
                       SO              => ntRef_ntSO,             
                       UPDATE_DR_O     => ntRef_ntUPDATE_DR_O,
                       GATE_FROM_LOOP     => ntRef_ntGATE_FROM_LOOP
                   )
        @([sx,sy]);


      STRUCT inc_spec_IOB1 incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_srb,ty_srb,sx_srb;

      foreach incVar(inc_IOB1_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          sy_srb = sy + loc_SRB*NUM_GRID_Y; 

          sx_srb =  sx - NUM_GRID_X ; 

          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device IOB1_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> =>  <wire *pin_logic_device of <device IOB1_TILE @[sx,sy]>>); 
          }
      }         

}//end of function place_iob_tile_r

/*******************************************************************
********************************************************************/
function place_iob_tile_l(unsigned int tx,ty)
{  
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;
    sprintf(strVar,"ntADDR0_%d_%d",sx,sy);
    &wire ntRef_ntADDR0[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntADDR1_%d_%d",sx,sy);
    &wire ntRef_ntADDR1[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntCLK_XTAL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_XTAL = wire *strVar;

    sprintf(strVar,"ntCLOCK_DR_O_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_O = wire *strVar;

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntDIFFI_OUT_D_%d_%d",sx,sy);
    &wire ntRef_ntDIFFI_OUT_D = wire *strVar;

    sprintf(strVar,"ntDIN_%d_%d",sx,sy);
    &wire ntRef_ntDIN[79:0] = wire *strVar[79:0];

    sprintf(strVar,"ntDQS_O_%d_%d",sx,sy);
    &wire ntRef_ntDQS_O[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntG11_IND_A_%d_%d",sx,sy);
    &wire ntRef_ntG11_IND_A = wire *strVar;

    sprintf(strVar,"ntG11_IND_B_%d_%d",sx,sy);
    &wire ntRef_ntG11_IND_B = wire *strVar;

    sprintf(strVar,"ntPOR_N_O_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_O = wire *strVar;

    sprintf(strVar,"ntREGION_INC_%d_%d",sx,sy);
    &wire ntRef_ntREGION_INC[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntS11_PAD_STATE_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_PAD_STATE_O = wire *strVar;

    sprintf(strVar,"ntSO_%d_%d",sx,sy);
    &wire ntRef_ntSO = wire *strVar;

    sprintf(strVar,"ntGATE_FROM_LOOP_%d_%d",sx,sy);
    &wire ntRef_ntGATE_FROM_LOOP[1:0] = wire *strVar[1:0];

    sprintf(strVar, "IOB3_TILE_%d_%d", sx, sy);
    device IOB3_TILE *strVar
         port map (
                     ADDR0           => ntRef_ntADDR0,          
                     ADDR1           => ntRef_ntADDR1,          
                     CLK_XTAL        => ntRef_ntCLK_XTAL,       
                     CLOCK_DR_O      => ntRef_ntCLOCK_DR_O,     
                     COL_INC_OUT     => ntRef_ntCOL_INC_OUT,    
                     CS_OUT          => ntRef_ntCS_OUT,         
                     DIN             => ntRef_ntDIN,            
                     DQS_O           => ntRef_ntDQS_O,          
                     POR_N_O         => ntRef_ntPOR_N_O,        
                     REGION_INC      => ntRef_ntREGION_INC,     
                     S11_PAD_STATE_O => ntRef_ntS11_PAD_STATE_O,
                     SO              => ntRef_ntSO,
                       GATE_FROM_LOOP     => ntRef_ntGATE_FROM_LOOP
                   )
        @([sx,sy]);


      STRUCT inc_spec_IOB3 incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_srb,ty_srb,sx_srb;

      foreach incVar(inc_IOB3_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          sy_srb = sy + loc_SRB*NUM_GRID_Y; 

          sx_srb =  sx + NUM_GRID_X ; 

          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device IOB3_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> =>  <wire *pin_logic_device of <device IOB3_TILE @[sx,sy]>>); 
          }
      }         

}//end of function place_iob_tile_l
/********************************************************************************
********************************************************************************/
function place_pll_tile(unsigned int tx,ty,flag)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;
    sprintf(strVar,"ntTEST_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTEST_OUT = wire *strVar;

    sprintf(strVar,"ntFBDLY_OB_%d_%d",sx,sy);
    &wire ntRef_ntFBDLY_OB = wire *strVar;

    sprintf(strVar,"ntCLKSWITCH_FLAG_%d_%d",sx,sy);
    &wire ntRef_ntCLKSWITCH_FLAG = wire *strVar;

    sprintf(strVar,"ntLOCK_%d_%d",sx,sy);
    &wire ntRef_ntLOCK = wire *strVar;

    sprintf(strVar,"ntLOCK_LOCAL_%d_%d",sx,sy);
    &wire ntRef_ntLOCK_LOCAL = wire *strVar;

    sprintf(strVar,"ntCLK_OUT0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT0 = wire *strVar;

    sprintf(strVar,"ntCLK_OUT0_WL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT0_WL = wire *strVar;

    sprintf(strVar,"ntCLK_OUT_EXT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT_EXT = wire *strVar;

    sprintf(strVar,"ntCLK_OUT1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT1 = wire *strVar;

    sprintf(strVar,"ntCLK_OUT2_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT2 = wire *strVar;

    sprintf(strVar,"ntCLK_OUT3_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT3 = wire *strVar;

    sprintf(strVar,"ntCLK_OUT4_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT4 = wire *strVar;

    sprintf(strVar,"ntCLK_OUT4_CAS_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT4_CAS = wire *strVar;

    sprintf(strVar,"ntCLK_OUT_5MUX1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT_5MUX1 = wire *strVar;

    sprintf(strVar,"ntCLK_PREGM_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PREGM_OUT[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCLK_GLOBAL_L_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_L[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCLK_GLOBAL_R_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_R[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntVCP_%d_%d",sx,sy);
    &wire ntRef_ntVCP = wire *strVar;

    sprintf(strVar,"ntCLK_INT_FB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_INT_FB = wire *strVar;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;


    sprintf(strVar, "PLL_TILE_%d_%d", sx, sy);
    
    device PLL_TILE *strVar
         port map (
                     TEST_OUT       => ntRef_ntTEST_OUT,      
                     FBDLY_OB       => ntRef_ntFBDLY_OB,      
                     CLKSWITCH_FLAG => ntRef_ntCLKSWITCH_FLAG,
                     LOCK           => ntRef_ntLOCK,          
                     LOCK_LOCAL     => ntRef_ntLOCK_LOCAL,    
                     CLK_OUT0       => ntRef_ntCLK_OUT0,      
                     CLK_OUT0_WL    => ntRef_ntCLK_OUT0_WL,   
                     CLK_OUT_EXT    => ntRef_ntCLK_OUT_EXT,   
                     CLK_OUT1       => ntRef_ntCLK_OUT1,      
                     CLK_OUT2       => ntRef_ntCLK_OUT2,      
                     CLK_OUT3       => ntRef_ntCLK_OUT3,      
                     CLK_OUT4       => ntRef_ntCLK_OUT4,      
                     CLK_OUT4_CAS   => ntRef_ntCLK_OUT4_CAS,  
                     CLK_OUT_5MUX1  => ntRef_ntCLK_OUT_5MUX1, 
                     CLK_PREGM_OUT  => ntRef_ntCLK_PREGM_OUT, 
                     CLK_INT_FB     => ntRef_ntCLK_INT_FB,
                     CLK_GLOBAL_L   => ntRef_ntCLK_GLOBAL_L,  
                     CLK_GLOBAL_R   => ntRef_ntCLK_GLOBAL_R,  
                     VCP            => ntRef_ntVCP,  
                     TIEHI          => ntRef_ntTIEHI
                  )
        @([sx,sy]);
    
    int tx_SRB,sx_SRB ;
 
    if(flag==0)
    {
      STRUCT inc_spec_PLL_B incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_PLL_B_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;

          tx_SRB = (incVar.loc_SRB>3) ? tx - 4 : tx ;         
          sx_SRB = tx_SRB * NUM_GRID_X ; 
 
          sy_SRB = (loc_SRB==20) ? sy - 2 * NUM_GRID_Y:
                   (loc_SRB>3)   ? sy + (loc_SRB - 11) * NUM_GRID_Y :
                                   sy + loc_SRB*NUM_GRID_Y ;

          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device PLL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_SRB,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy_SRB]>> => (incVar.port_name_device=="TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx_SRB,sy_SRB]>>
                                                                         : <wire *pin_logic_device of <device PLL_TILE @[sx,sy]>>); 
          }
      } 
    } 
    else       
    {
      STRUCT inc_spec_PLL_T incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_PLL_T_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;

          tx_SRB = (incVar.loc_SRB>3) ? tx - 4 : tx ;         
          sx_SRB = tx_SRB * NUM_GRID_X ;
         
          sy_SRB = (loc_SRB==20) ? sy + 5 * NUM_GRID_Y:
                   (loc_SRB>3)   ? sy + (loc_SRB - 10) * NUM_GRID_Y :
                                   sy + loc_SRB*NUM_GRID_Y ;
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device PLL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_SRB,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy_SRB]>> => (incVar.port_name_device=="TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx_SRB,sy_SRB]>>
                                                                         : <wire *pin_logic_device of <device PLL_TILE @[sx,sy]>>); 
          }
      } 
    }      


}// end of function place_pll_tile
/********************************************************************************
********************************************************************************/
function place_iol_tile_ud(unsigned int tx,ty,flag_ud)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntTO_A_%d_%d",sx,sy);
    &wire ntRef_ntTO_A = wire *strVar;

    sprintf(strVar,"ntDO_A_%d_%d",sx,sy);
    &wire ntRef_ntDO_A = wire *strVar;

    sprintf(strVar,"ntTERM_A_%d_%d",sx,sy);
    &wire ntRef_ntTERM_A = wire *strVar;

    sprintf(strVar,"ntMIPI_SW_DYN_O_A_%d_%d",sx,sy);
    &wire ntRef_ntMIPI_SW_DYN_O_A = wire *strVar;

    sprintf(strVar,"ntTO_B_%d_%d",sx,sy);
    &wire ntRef_ntTO_B = wire *strVar;

    sprintf(strVar,"ntDO_B_%d_%d",sx,sy);
    &wire ntRef_ntDO_B = wire *strVar;

    sprintf(strVar,"ntTERM_B_%d_%d",sx,sy);
    &wire ntRef_ntTERM_B = wire *strVar;

    sprintf(strVar,"ntMIPI_SW_DYN_O_B_%d_%d",sx,sy);
    &wire ntRef_ntMIPI_SW_DYN_O_B = wire *strVar;

    sprintf(strVar,"ntINCK_A_%d_%d",sx,sy);
    &wire ntRef_ntINCK_A = wire *strVar;

    sprintf(strVar,"ntINCK_B_%d_%d",sx,sy);
    &wire ntRef_ntINCK_B = wire *strVar;

    sprintf(strVar,"ntIODLY_OV_A_%d_%d",sx,sy);
    &wire ntRef_ntIODLY_OV_A = wire *strVar;

    sprintf(strVar,"ntRX_DATA_A_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_A[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntRX_DATA_DD_A_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_DD_A = wire *strVar;

    sprintf(strVar,"ntIODLY_OV_B_%d_%d",sx,sy);
    &wire ntRef_ntIODLY_OV_B = wire *strVar;

    sprintf(strVar,"ntRX_DATA_B_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_B[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntRX_DATA_DD_B_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_DD_B = wire *strVar;

    sprintf(strVar,"ntTIELO_%d_%d",sx,sy);
    &wire ntRef_ntTIELO = wire *strVar;

    sprintf(strVar, "IOLTB_TILE_%d_%d", sx, sy);
    
    device IOLTB_TILE *strVar
         port map (
                        TO_A            => ntRef_ntTO_A,           
                        DO_A            => ntRef_ntDO_A,           
                        TERM_A          => ntRef_ntTERM_A,         
                        MIPI_SW_DYN_O_A => ntRef_ntMIPI_SW_DYN_O_A,
                        TO_B            => ntRef_ntTO_B,           
                        DO_B            => ntRef_ntDO_B,           
                        TERM_B          => ntRef_ntTERM_B,         
                        MIPI_SW_DYN_O_B => ntRef_ntMIPI_SW_DYN_O_B,
                        INCK_A          => ntRef_ntINCK_A,         
                        INCK_B          => ntRef_ntINCK_B,         
                        IODLY_OV_A      => ntRef_ntIODLY_OV_A,     
                        RX_DATA_A       => ntRef_ntRX_DATA_A,      
                        RX_DATA_DD_A    => ntRef_ntRX_DATA_DD_A,   
                        IODLY_OV_B      => ntRef_ntIODLY_OV_B,     
                        RX_DATA_B       => ntRef_ntRX_DATA_B,      
                        RX_DATA_DD_B    => ntRef_ntRX_DATA_DD_B,   
                        TIELO           => ntRef_ntTIELO

                  )
        @([sx,sy]);

      STRUCT inc_spec_IOLTB incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;
   
      unsigned int sx_SRB;

      foreach incVar(inc_IOLTB_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          sx_SRB = sx - 2;
          int sy_SRB = sy ;
          
          if(attribute_IO =="I")
          { 
            
            connect(<pin *pin_logic_device of <device IOLTB_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_SRB,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy_SRB]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE @ [sx_SRB,sy_SRB]>>
                                                                                                               : <wire *pin_logic_device of <device IOLTB_TILE @[sx,sy]>>);
          }
      }               
}// end of function place_iol_tile_ud
/********************************************************************************/
/********************************************************************************/
function place_clms_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X +2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;
    //LOGIC OUTPUT
    sprintf(strVar,"ntA_Y_%d_%d",sx,sy);
    &wire ntRef_ntA_Y[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntA_Q_%d_%d",sx,sy);
    &wire ntRef_ntA_Q[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntA_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntA_Y6AB = wire *strVar;
    
    sprintf(strVar,"ntA_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntA_Y6CD = wire *strVar;
    
    sprintf(strVar,"ntS_Y_%d_%d",sx,sy);
    &wire ntRef_ntS_Y[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntS_Q_%d_%d",sx,sy);
    &wire ntRef_ntS_Q[3:0] = wire *strVar[3:0];
    
    sprintf(strVar,"ntS_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntS_Y6AB = wire *strVar;
    
    sprintf(strVar,"ntS_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntS_Y6CD = wire *strVar;
    
    sprintf(strVar,"ntA_CECO_%d_%d",sx,sy);
    &wire ntRef_ntA_CECO = wire *strVar;
    
    sprintf(strVar,"ntS_CECO_%d_%d",sx,sy);
    &wire ntRef_ntS_CECO = wire *strVar;
    
    sprintf(strVar,"ntA_COUT_%d_%d",sx,sy);
    &wire ntRef_ntA_COUT = wire *strVar;
    
    sprintf(strVar,"ntS_COUT_%d_%d",sx,sy);
    &wire ntRef_ntS_COUT = wire *strVar;
    
    sprintf(strVar,"ntA_RSCO_%d_%d",sx,sy);
    &wire ntRef_ntA_RSCO = wire *strVar;
    
    sprintf(strVar,"ntS_RSCO_%d_%d",sx,sy);
    &wire ntRef_ntS_RSCO = wire *strVar;
    
    sprintf(strVar,"ntA_SRCO_%d_%d",sx,sy);
    &wire ntRef_ntA_SRCO = wire *strVar;
    
    sprintf(strVar,"ntS_SRCO_%d_%d",sx,sy);
    &wire ntRef_ntS_SRCO = wire *strVar;
    
    sprintf(strVar,"ntL7OUT_%d_%d",sx,sy);
    &wire ntRef_ntL7OUT = wire *strVar;
    
    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;
    
    sprintf(strVar,"ntTIELO_%d_%d",sx,sy);
    &wire ntRef_ntTIELO = wire *strVar;
    
    sprintf(strVar,"ntMASK_DATA_ACOUT_%d_%d",sx,sy);
    &wire ntRef_ntMASK_DATA_ACOUT = wire *strVar;
    
    sprintf(strVar,"ntMASK_DATA_BCOUT_%d_%d",sx,sy);
    &wire ntRef_ntMASK_DATA_BCOUT = wire *strVar;
    
    sprintf(strVar,"ntMASK_DATA_CCOUT_%d_%d",sx,sy);
    &wire ntRef_ntMASK_DATA_CCOUT = wire *strVar;
    
    sprintf(strVar,"ntMASK_DATA_DCOUT_%d_%d",sx,sy);
    &wire ntRef_ntMASK_DATA_DCOUT = wire *strVar;

      sprintf(strVar, "CLMS_TILE_%d_%d", sx, sy);
      device CLMS_TILE *strVar
           port map (
                       A_Y             => ntRef_ntA_Y,            
                       A_Q             => ntRef_ntA_Q,            
                       A_Y6AB          => ntRef_ntA_Y6AB,         
                       A_Y6CD          => ntRef_ntA_Y6CD,         
                       S_Y             => ntRef_ntS_Y,            
                       S_Q             => ntRef_ntS_Q,            
                       S_Y6AB          => ntRef_ntS_Y6AB,         
                       S_Y6CD          => ntRef_ntS_Y6CD,         
                       A_CECO          => ntRef_ntA_CECO,         
                       S_CECO          => ntRef_ntS_CECO,         
                       A_COUT          => ntRef_ntA_COUT,         
                       S_COUT          => ntRef_ntS_COUT,         
                       A_RSCO          => ntRef_ntA_RSCO,         
                       S_RSCO          => ntRef_ntS_RSCO,         
                       A_SRCO          => ntRef_ntA_SRCO,         
                       S_SRCO          => ntRef_ntS_SRCO,         
                       L7OUT           => ntRef_ntL7OUT,          
                       TIEHI           => ntRef_ntTIEHI,          
                       TIELO           => ntRef_ntTIELO,          
                       MASK_DATA_ACOUT => ntRef_ntMASK_DATA_ACOUT,
                       MASK_DATA_BCOUT => ntRef_ntMASK_DATA_BCOUT,
                       MASK_DATA_CCOUT => ntRef_ntMASK_DATA_CCOUT,
                       MASK_DATA_DCOUT => ntRef_ntMASK_DATA_DCOUT
                     )
        @([sx,sy]);  
      STRUCT inc_spec_CLMS incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_CLMS_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device CLMS_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-2,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx-2,sy_SRB]>> => <wire *pin_logic_device of <device CLMS_TILE @[sx,sy]>>); 
          }
      }         
}// end of function place_clms_tile
/********************************************************************************/
/********************************************************************************/
function place_clma_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X +2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;
    //LOGIC OUTPUT
    sprintf(strVar,"ntA_Y_%d_%d",sx,sy);
    &wire ntRef_ntA_Y[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntA_Q_%d_%d",sx,sy);
    &wire ntRef_ntA_Q[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntA_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntA_Y6AB = wire *strVar;

    sprintf(strVar,"ntA_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntA_Y6CD = wire *strVar;

    sprintf(strVar,"ntS_Y_%d_%d",sx,sy);
    &wire ntRef_ntS_Y[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntS_Q_%d_%d",sx,sy);
    &wire ntRef_ntS_Q[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntS_Y6AB_%d_%d",sx,sy);
    &wire ntRef_ntS_Y6AB = wire *strVar;

    sprintf(strVar,"ntS_Y6CD_%d_%d",sx,sy);
    &wire ntRef_ntS_Y6CD = wire *strVar;

    sprintf(strVar,"ntA_CECO_%d_%d",sx,sy);
    &wire ntRef_ntA_CECO = wire *strVar;

    sprintf(strVar,"ntS_CECO_%d_%d",sx,sy);
    &wire ntRef_ntS_CECO = wire *strVar;

    sprintf(strVar,"ntA_COUT_%d_%d",sx,sy);
    &wire ntRef_ntA_COUT = wire *strVar;

    sprintf(strVar,"ntS_COUT_%d_%d",sx,sy);
    &wire ntRef_ntS_COUT = wire *strVar;

    sprintf(strVar,"ntA_RSCO_%d_%d",sx,sy);
    &wire ntRef_ntA_RSCO = wire *strVar;

    sprintf(strVar,"ntS_RSCO_%d_%d",sx,sy);
    &wire ntRef_ntS_RSCO = wire *strVar;

    sprintf(strVar,"ntA_SRCO_%d_%d",sx,sy);
    &wire ntRef_ntA_SRCO = wire *strVar;

    sprintf(strVar,"ntS_SRCO_%d_%d",sx,sy);
    &wire ntRef_ntS_SRCO = wire *strVar;

    sprintf(strVar,"ntL7OUT_%d_%d",sx,sy);
    &wire ntRef_ntL7OUT = wire *strVar;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

      sprintf(strVar, "CLMA_TILE_%d_%d", sx, sy);
      device CLMA_TILE *strVar
           port map (
                       A_Y    => ntRef_ntA_Y,   
                       A_Q    => ntRef_ntA_Q,   
                       A_Y6AB => ntRef_ntA_Y6AB,
                       A_Y6CD => ntRef_ntA_Y6CD,
                       S_Y    => ntRef_ntS_Y,   
                       S_Q    => ntRef_ntS_Q,   
                       S_Y6AB => ntRef_ntS_Y6AB,
                       S_Y6CD => ntRef_ntS_Y6CD,
                       A_CECO => ntRef_ntA_CECO,
                       S_CECO => ntRef_ntS_CECO,
                       A_COUT => ntRef_ntA_COUT,
                       S_COUT => ntRef_ntS_COUT,
                       A_RSCO => ntRef_ntA_RSCO,
                       S_RSCO => ntRef_ntS_RSCO,
                       A_SRCO => ntRef_ntA_SRCO,
                       S_SRCO => ntRef_ntS_SRCO,
                       L7OUT  => ntRef_ntL7OUT, 
                       TIEHI  => ntRef_ntTIEHI
                     )
        @([sx,sy]);  
      STRUCT inc_spec_CLMA incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_CLMA_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device CLMA_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-2,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx-2,sy_SRB]>> => <wire *pin_logic_device of <device CLMA_TILE @[sx,sy]>>); 
          }
      }         
}// end of function place_clma_tile
/********************************************************************************/
/********************************************************************************/
function place_iockdll_tile(unsigned int tx,ty,tx_iockdll,ty_iockdll)
{   
    unsigned int sx, sy, sx_iockdll, sy_iockdll;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    sx_iockdll = tx_iockdll * NUM_GRID_X +2 ;    
    sy_iockdll = ty_iockdll * NUM_GRID_Y ;    
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;
    //LOGIC OUTPUT
    sprintf(strVar,"ntCLK_IOCK_R1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOCK_R1[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntCLK_IOCK_R0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOCK_R0[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntBUS2_CLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS2_CLK_OUT[9:0] = wire *strVar[9:0];

    sprintf(strVar,"ntCLK_IOCK_L1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOCK_L1[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntCLK_IOCK_L0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOCK_L0[1:0] = wire *strVar[1:0];

//    sprintf(strVar,"ntCLK_IODIV_%d_%d",sx,sy);
//    &wire ntRef_ntCLK_IODIV[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntCLK_PIO_N_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_N_OUT_0 = wire *strVar;

    sprintf(strVar,"ntCLK_PIO_N_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_N_OUT_1 = wire *strVar;

    sprintf(strVar,"ntCLK_PIO_P_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_P_OUT_0 = wire *strVar;

    sprintf(strVar,"ntCLK_PIO_P_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_P_OUT_1 = wire *strVar;

    sprintf(strVar,"ntCTRL_CODE_%d_%d",sx,sy);
    &wire ntRef_ntCTRL_CODE[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCTRL_CODE_T_%d_%d",sx,sy);
    &wire ntRef_ntCTRL_CODE_T[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntDIV_CLKIN_T_%d_%d",sx,sy);
    &wire ntRef_ntDIV_CLKIN_T = wire *strVar;

    sprintf(strVar,"ntDIV_OSCCLK_T_%d_%d",sx,sy);
    &wire ntRef_ntDIV_OSCCLK_T = wire *strVar;

    sprintf(strVar,"ntDLL_TIHI_%d_%d",sx,sy);
    &wire ntRef_ntDLL_TIHI = wire *strVar;

    sprintf(strVar,"ntDLL_TILO_%d_%d",sx,sy);
    &wire ntRef_ntDLL_TILO = wire *strVar;

    sprintf(strVar,"ntIOCKDLY_COUT_N_0_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_N_0 = wire *strVar;

    sprintf(strVar,"ntIOCKDLY_COUT_N_1_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_N_1 = wire *strVar;

    sprintf(strVar,"ntIOCKDLY_COUT_P_0_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_P_0 = wire *strVar;

    sprintf(strVar,"ntIOCKDLY_COUT_P_1_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_P_1 = wire *strVar;

    sprintf(strVar,"ntLOCK_%d_%d",sx,sy);
    &wire ntRef_ntLOCK = wire *strVar;

    sprintf(strVar,"ntTIEH_%d_%d",sx,sy);
    &wire ntRef_ntTIEH = wire *strVar;

    sprintf(strVar,"ntTIEHI_IBM_0_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI_IBM_0 = wire *strVar;

    sprintf(strVar,"ntTIEL_%d_%d",sx,sy);
    &wire ntRef_ntTIEL = wire *strVar;

    sprintf(strVar,"ntSIG_IBM_0_OUT_%d_%d",sx,sy);
    &wire ntRef_ntSIG_IBM_0_OUT[4:0] = wire *strVar[4:0];

    sprintf(strVar, "IOCKDLL_TILE_%d_%d", sx, sy);
    device IOCKDLL_TILE *strVar
         port map (
                     CLK_IOCK_R1      => ntRef_ntCLK_IOCK_R1,     
                     CLK_IOCK_R0      => ntRef_ntCLK_IOCK_R0,     
                     BUS2_CLK_OUT     => ntRef_ntBUS2_CLK_OUT,    
                     CLK_IOCK_L1      => ntRef_ntCLK_IOCK_L1,     
                     CLK_IOCK_L0      => ntRef_ntCLK_IOCK_L0,     
//                     CLK_IODIV        => ntRef_ntCLK_IODIV,       
                     CLK_PIO_N_OUT_0  => ntRef_ntCLK_PIO_N_OUT_0, 
                     CLK_PIO_N_OUT_1  => ntRef_ntCLK_PIO_N_OUT_1, 
                     CLK_PIO_P_OUT_0  => ntRef_ntCLK_PIO_P_OUT_0, 
                     CLK_PIO_P_OUT_1  => ntRef_ntCLK_PIO_P_OUT_1, 
                     CTRL_CODE        => ntRef_ntCTRL_CODE,       
                     CTRL_CODE_T      => ntRef_ntCTRL_CODE_T,     
                     DIV_CLKIN_T      => ntRef_ntDIV_CLKIN_T,     
                     DIV_OSCCLK_T     => ntRef_ntDIV_OSCCLK_T,    
                     DLL_TIHI         => ntRef_ntDLL_TIHI,        
                     DLL_TILO         => ntRef_ntDLL_TILO,        
                     IOCKDLY_COUT_N_0 => ntRef_ntIOCKDLY_COUT_N_0,
                     IOCKDLY_COUT_N_1 => ntRef_ntIOCKDLY_COUT_N_1,
                     IOCKDLY_COUT_P_0 => ntRef_ntIOCKDLY_COUT_P_0,
                     IOCKDLY_COUT_P_1 => ntRef_ntIOCKDLY_COUT_P_1,
                     LOCK             => ntRef_ntLOCK,            
                     TIEH             => ntRef_ntTIEH,            
                     TIEHI_IBM_0      => ntRef_ntTIEHI_IBM_0,     
                     TIEL             => ntRef_ntTIEL,            
                     SIG_IBM_0_OUT    => ntRef_ntSIG_IBM_0_OUT
                   )
      @([sx,sy]);  

      STRUCT inc_spec_IOCKDLL incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_IOCKDLL_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy_iockdll;
          }
          else
          {
            sy_SRB = sy_iockdll + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device IOCKDLL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_iockdll-2,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_iockdll-2,sy_SRB]>> => <wire *pin_logic_device of <device IOCKDLL_TILE @[sx,sy]>>); 
          }
      }         
}// end of function place_iockdll_tile
/********************************************************************************
********************************************************************************/
function place_wlsr_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;
    
    sprintf(strVar,"ntBUS_GSEB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUT[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntTIE_LO_1V1_%d_%d",sx,sy);
    &wire ntRef_ntTIE_LO_1V1 = wire *strVar;

    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[27:0] = wire *strVar[27:0];

    sprintf(strVar,"ntCOL_SEL_CCS_%d_%d",sx,sy);
    &wire ntRef_ntCOL_SEL_CCS = wire *strVar;

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntMASK_N_%d_%d",sx,sy);
    &wire ntRef_ntMASK_N = wire *strVar;

    sprintf(strVar,"ntREAD2T_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T = wire *strVar;

    sprintf(strVar, "WLSR_TILE_%d_%d", sx, sy);
    
    device WLSR_TILE *strVar
         port map (
                    BUS_GSEB_OUT => ntRef_ntBUS_GSEB_OUT,
                    TIE_LO_1V1   => ntRef_ntTIE_LO_1V1,  
                    CLK_OUTT     => ntRef_ntCLK_OUTT,    
                    GLOGEN_OUT   => ntRef_ntGLOGEN_OUT,  
                    CLK_OUTB     => ntRef_ntCLK_OUTB,    
                    CS_OUT       => ntRef_ntCS_OUT,      
                    ADDR         => ntRef_ntADDR,        
                    COL_SEL_CCS  => ntRef_ntCOL_SEL_CCS, 
                    COL_INC_OUT  => ntRef_ntCOL_INC_OUT, 
                    MASK_N       => ntRef_ntMASK_N,      
                    READ2T       => ntRef_ntREAD2T
                  )
        @([sx,sy]);
       
}// end of function place_wlsr_tile
/********************************************************************************
********************************************************************************/
function place_uscm_tile(unsigned int tx,ty, tx_srb, ty_srb)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X ;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntCLK_USCM_T_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USCM_T[14:0] = wire *strVar[14:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_USCM_B_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USCM_B[14:0] = wire *strVar[14:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OSC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OSC_OUT[1:0] = wire *strVar[1:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntDCI_INIT_OUT_%d_%d",sx,sy);
    &wire ntRef_ntDCI_INIT_OUT = wire *strVar;
    
    sprintf(strVar,"ntCLK_USCM_0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USCM_0 = wire *strVar;

    sprintf(strVar,"ntCLK_USCM_9_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USCM_9 = wire *strVar;

    sprintf(strVar,"ntCLK_USCM_10_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USCM_10 = wire *strVar;

    sprintf(strVar,"ntCLK_USCM_14_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USCM_14 = wire *strVar;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    
    sprintf(strVar, "USCM_TILE_%d_%d", sx, sy);
    
    device USCM_TILE *strVar
          port map (
                     CLK_USCM_0    => ntRef_ntCLK_USCM_0,
                     CLK_USCM_9    => ntRef_ntCLK_USCM_9,
                     CLK_USCM_10   => ntRef_ntCLK_USCM_10,
                     CLK_USCM_14   => ntRef_ntCLK_USCM_14,
                     CLK_USCM_T    => ntRef_ntCLK_USCM_T,
                     CLK_USCM_B    => ntRef_ntCLK_USCM_B,
                     TIEHI         => ntRef_ntTIEHI,
                     DCI_INIT_OUT  => ntRef_ntDCI_INIT_OUT,
                     CLK_OSC_OUT   => ntRef_ntCLK_OSC_OUT            
                   )
        @([sx,sy]);

      STRUCT inc_spec_USCM incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_srb;
      int sx_srb = tx_srb * NUM_GRID_X;
      int sy_srb0 = ty_srb * NUM_GRID_Y;

      foreach incVar(inc_USCM_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_srb = sy_srb0;
          }
          else
          {
            sy_srb = sy_srb0 + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device USCM_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> => (incVar.port_name_device=="TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx_srb,sy_srb]>>
                                                                         : <wire *pin_logic_device of <device USCM_TILE @[sx,sy]>>); 
          }
      }  
       
        
}// end of function place_uscm_tile

/********************************************************************************
********************************************************************************/
function place_wlsr2_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntBUS_GSEB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUT[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntBUS1_CLK_L_%d_%d",sx,sy);
    &wire ntRef_ntBUS1_CLK_L[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntBUS1_CLK_R_%d_%d",sx,sy);
    &wire ntRef_ntBUS1_CLK_R[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[27:0] = wire *strVar[27:0];

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntREGION_INC_%d_%d",sx,sy);
    &wire ntRef_ntREGION_INC = wire *strVar;

    sprintf(strVar,"ntTIE_LO_1V1_%d_%d",sx,sy);
    &wire ntRef_ntTIE_LO_1V1 = wire *strVar;

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar,"ntCOL_SEL_CCS_%d_%d",sx,sy);
    &wire ntRef_ntCOL_SEL_CCS = wire *strVar;

    sprintf(strVar,"ntCLK_USCM_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USCM_BUF[29:0] = wire *strVar[29:0];

    sprintf(strVar,"ntCLK_PLL_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PLL_OUT[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntCLKG_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLKG_OUT = wire *strVar;

    sprintf(strVar,"ntMASK_N_%d_%d",sx,sy);
    &wire ntRef_ntMASK_N = wire *strVar;

    sprintf(strVar,"ntREAD2T_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T = wire *strVar;


    sprintf(strVar, "WLSR2_TILE_%d_%d", sx, sy);
    
    device WLSR2_TILE *strVar
         port map (
                     BUS_GSEB_OUT => ntRef_ntBUS_GSEB_OUT,
                     BUS1_CLK_L   => ntRef_ntBUS1_CLK_L,  
                     BUS1_CLK_R   => ntRef_ntBUS1_CLK_R,  
                     CLK_OUTB     => ntRef_ntCLK_OUTB,    
                     CLK_OUTT     => ntRef_ntCLK_OUTT,    
                     GLOGEN_OUT   => ntRef_ntGLOGEN_OUT,  
                     ADDR         => ntRef_ntADDR,        
                     COL_INC_OUT  => ntRef_ntCOL_INC_OUT, 
                     REGION_INC   => ntRef_ntREGION_INC,
                     TIE_LO_1V1   => ntRef_ntTIE_LO_1V1,  
                     CS_OUT       => ntRef_ntCS_OUT,      
                     TIEHI        => ntRef_ntTIEHI,       
                     COL_SEL_CCS  => ntRef_ntCOL_SEL_CCS, 
                     CLK_USCM_BUF => ntRef_ntCLK_USCM_BUF,
                     CLK_PLL_OUT => ntRef_ntCLK_PLL_OUT,
                     CLKG_OUT     => ntRef_ntCLKG_OUT,    
                     MASK_N       => ntRef_ntMASK_N,      
                     READ2T       => ntRef_ntREAD2T
                  )
        @([sx,sy]);

        
}//end of function place_wlsr2_tile
/********************************************************************************
********************************************************************************/
function place_wlsr1_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntBUS1_CLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS1_CLK_OUT[8:0] = wire *strVar[8:0];

    sprintf(strVar,"ntBUS2_CLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS2_CLK_OUT[9:0] = wire *strVar[9:0];

    sprintf(strVar,"ntBUS_BSCAN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_BSCAN_OUT[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntBUS_GSEB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUT[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[27:0] = wire *strVar[27:0];

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntTIE_LO_1V1_%d_%d",sx,sy);
    &wire ntRef_ntTIE_LO_1V1 = wire *strVar;

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar,"ntCOL_SEL_CCS_%d_%d",sx,sy);
    &wire ntRef_ntCOL_SEL_CCS = wire *strVar;

    sprintf(strVar,"ntMASK_N_%d_%d",sx,sy);
    &wire ntRef_ntMASK_N = wire *strVar;

    sprintf(strVar,"ntREAD2T_%d_%d",sx,sy);
    &wire ntRef_ntREAD2T = wire *strVar;

    sprintf(strVar,"ntCLK_GLOBAL_R_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_R[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntCLK_GLOBAL_L_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_L[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntCAL_DONE_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCAL_DONE_OUT = wire *strVar;

    sprintf(strVar,"ntCLKG_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLKG_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_HRX_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_HRX_OUT[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntCLK_HREF_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_HREF_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_ADC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC_OUT = wire *strVar;

    sprintf(strVar, "WLSR1_TILE_%d_%d", sx, sy);
    
    device WLSR1_TILE *strVar
         port map ( 
                     BUS1_CLK_OUT  => ntRef_ntBUS1_CLK_OUT, 
                     BUS2_CLK_OUT  => ntRef_ntBUS2_CLK_OUT, 
                     BUS_BSCAN_OUT => ntRef_ntBUS_BSCAN_OUT,
                     BUS_GSEB_OUT  => ntRef_ntBUS_GSEB_OUT, 
                     CLK_OUTB      => ntRef_ntCLK_OUTB,     
                     CLK_OUTT      => ntRef_ntCLK_OUTT,     
                     GLOGEN_OUT    => ntRef_ntGLOGEN_OUT,   
                     ADDR          => ntRef_ntADDR,         
                     COL_INC_OUT   => ntRef_ntCOL_INC_OUT,  
                     TIE_LO_1V1    => ntRef_ntTIE_LO_1V1,   
                     CS_OUT        => ntRef_ntCS_OUT,       
                     TIEHI         => ntRef_ntTIEHI,        
                     COL_SEL_CCS   => ntRef_ntCOL_SEL_CCS,  
                     MASK_N        => ntRef_ntMASK_N,       
                     READ2T        => ntRef_ntREAD2T,       
                     CLK_GLOBAL_R  => ntRef_ntCLK_GLOBAL_R, 
                     CLK_GLOBAL_L  => ntRef_ntCLK_GLOBAL_L, 
                     CAL_DONE_OUT  => ntRef_ntCAL_DONE_OUT, 
                     CLKG_OUT      => ntRef_ntCLKG_OUT,     
                     CLK_HRX_OUT   => ntRef_ntCLK_HRX_OUT,  
                     CLK_HREF_OUT  => ntRef_ntCLK_HREF_OUT, 
                     CLK_ADC_OUT   => ntRef_ntCLK_ADC_OUT
                  )
        @([sx,sy]);

        
}//end of function place_wlsr1_tile
/********************************************************************************
********************************************************************************/
function place_wlsra_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntBUS_GSEB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUT[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntTIE_LO_1V1_%d_%d",sx,sy);
    &wire ntRef_ntTIE_LO_1V1 = wire *strVar;

    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[23:0] = wire *strVar[23:0];

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntCOL_SEL_CCS_%d_%d",sx,sy);
    &wire ntRef_ntCOL_SEL_CCS = wire *strVar;


    sprintf(strVar, "WLSRA_TILE_%d_%d", sx, sy);
    
    device WLSRA_TILE *strVar
         port map (
                   BUS_GSEB_OUT  => ntRef_ntBUS_GSEB_OUT, 
                   TIE_LO_1V1    => ntRef_ntTIE_LO_1V1,   
                   CLK_OUTT      => ntRef_ntCLK_OUTT,     
                   GLOGEN_OUT    => ntRef_ntGLOGEN_OUT,   
                   CLK_OUTB      => ntRef_ntCLK_OUTB,     
                   CS_OUT        => ntRef_ntCS_OUT,       
                   COL_SEL_CCS   => ntRef_ntCOL_SEL_CCS,       
                   ADDR          => ntRef_ntADDR,         
                   COL_INC_OUT => ntRef_ntCOL_INC_OUT      
                   )
        @([sx,sy]);

        
}// end of function place_wlsra_tile

/********************************************************************************
********************************************************************************/
function place_wlsrd_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntBUS_GSEB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUT[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntTIE_LO_1V1_%d_%d",sx,sy);
    &wire ntRef_ntTIE_LO_1V1 = wire *strVar;

    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[22:0] = wire *strVar[22:0];

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntCOL_SEL_CCS1_%d_%d",sx,sy);
    &wire ntRef_ntCOL_SEL_CCS1 = wire *strVar;

    sprintf(strVar,"ntCOL_SEL_CCS2_%d_%d",sx,sy);
    &wire ntRef_ntCOL_SEL_CCS2 = wire *strVar;

    sprintf(strVar,"ntADDR_D_%d_%d",sx,sy);
    &wire ntRef_ntADDR_D = wire *strVar;

    sprintf(strVar,"ntCSDRM_MEM_O_%d_%d",sx,sy);
    &wire ntRef_ntCSDRM_MEM_O = wire *strVar;

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntMCE2DRM_%d_%d",sx,sy);
    &wire ntRef_ntMCE2DRM = wire *strVar;

    sprintf(strVar,"ntMCLKB2DRM_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB2DRM = wire *strVar;

    sprintf(strVar,"ntMWR2DRM_%d_%d",sx,sy);
    &wire ntRef_ntMWR2DRM = wire *strVar;

    sprintf(strVar, "WLSRD_TILE_%d_%d", sx, sy);
    
    device WLSRD_TILE *strVar
         port map (
                    BUS_GSEB_OUT => ntRef_ntBUS_GSEB_OUT,
                    TIE_LO_1V1   => ntRef_ntTIE_LO_1V1,  
                    CLK_OUTT     => ntRef_ntCLK_OUTT,    
                    GLOGEN_OUT   => ntRef_ntGLOGEN_OUT,  
                    ADDR         => ntRef_ntADDR,        
                    CLK_OUTB     => ntRef_ntCLK_OUTB,    
                    CS_OUT       => ntRef_ntCS_OUT,      
                    COL_SEL_CCS1 => ntRef_ntCOL_SEL_CCS1,
                    COL_SEL_CCS2 => ntRef_ntCOL_SEL_CCS2,
                    ADDR_D       => ntRef_ntADDR_D,      
                    CSDRM_MEM_O  => ntRef_ntCSDRM_MEM_O, 
                    COL_INC_OUT  => ntRef_ntCOL_INC_OUT, 
                    MCE2DRM      => ntRef_ntMCE2DRM,     
                    MCLKB2DRM    => ntRef_ntMCLKB2DRM,   
                    MWR2DRM      => ntRef_ntMWR2DRM
                  )
        @([sx,sy]);

        
}// end of function place_wlsrd_tile
/********************************************************************************
********************************************************************************/
function place_iockgatedll_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntS11_PAD_STATE_OUT_%d_%d",sx,sy);
    &wire ntRef_ntS11_PAD_STATE_OUT = wire *strVar;

    sprintf(strVar,"ntTIE_LO_1V1_%d_%d",sx,sy);
    &wire ntRef_ntTIE_LO_1V1 = wire *strVar;

    sprintf(strVar,"ntCLK_ADC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_PLL_EXT_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PLL_EXT_OUT = wire *strVar;

    sprintf(strVar,"ntIOCKDLY_COUT_N_1_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_N_1 = wire *strVar;

    sprintf(strVar,"ntLOCK_%d_%d",sx,sy);
    &wire ntRef_ntLOCK = wire *strVar;

    sprintf(strVar,"ntCLK_PIO0_P_TBUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO0_P_TBUF = wire *strVar;

    sprintf(strVar,"ntGLOGEN_FB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_FB_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_IOCK_B_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOCK_B[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntCLKOUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTT[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntDIV_CLKIN_T_%d_%d",sx,sy);
    &wire ntRef_ntDIV_CLKIN_T = wire *strVar;

    sprintf(strVar,"ntCLK_IOCK_T_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOCK_T[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntDLL_TIHI_%d_%d",sx,sy);
    &wire ntRef_ntDLL_TIHI = wire *strVar;

    sprintf(strVar,"ntIOCKDLY_COUT_P_0_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_P_0 = wire *strVar;

    sprintf(strVar,"ntIOCKDLY_COUT_P_1_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_P_1 = wire *strVar;

    sprintf(strVar,"ntTIEL_%d_%d",sx,sy);
    &wire ntRef_ntTIEL = wire *strVar;

    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[23:0] = wire *strVar[23:0];

    sprintf(strVar,"ntCLOCK_DR_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_OUT = wire *strVar;

    sprintf(strVar,"ntTIEH_%d_%d",sx,sy);
    &wire ntRef_ntTIEH = wire *strVar;

    sprintf(strVar,"ntCLKOUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTB[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntDLL_TILO_%d_%d",sx,sy);
    &wire ntRef_ntDLL_TILO = wire *strVar;

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntDIV_OSCCLK_T_%d_%d",sx,sy);
    &wire ntRef_ntDIV_OSCCLK_T = wire *strVar;

    sprintf(strVar,"ntIOCKDLY_COUT_N_0_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_N_0 = wire *strVar;

    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntCAL_DONE_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCAL_DONE_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_IODIV_HMEMC_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IODIV_HMEMC[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntRCLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntRCLK_OUT[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntCTRL_CODE_%d_%d",sx,sy);
    &wire ntRef_ntCTRL_CODE[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCTRL_CODE_T_%d_%d",sx,sy);
    &wire ntRef_ntCTRL_CODE_T[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntBUS2_CLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS2_CLK_OUT[9:0] = wire *strVar[9:0];

    sprintf(strVar,"ntBUS_BSCAN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_BSCAN_OUT[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntBUS_GSEB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUT[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntCLK_PIO_P_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_P_OUT_0 = wire *strVar;

    sprintf(strVar,"ntCLK_PIO_N_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_N_OUT_0 = wire *strVar;

    sprintf(strVar,"ntCLK_PIO_P_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_P_OUT_1 = wire *strVar;

    sprintf(strVar,"ntCLK_PIO_N_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_N_OUT_1 = wire *strVar;

    sprintf(strVar,"ntSIG_IBM_1_OUT_%d_%d",sx,sy);
    &wire ntRef_ntSIG_IBM_1_OUT[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntSIG_IBM_0_OUT_%d_%d",sx,sy);
    &wire ntRef_ntSIG_IBM_0_OUT[6:0] = wire *strVar[6:0];

    sprintf(strVar,"ntTIEHI_IBM_0_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI_IBM_0 = wire *strVar;

    sprintf(strVar,"ntTIEHI_IBM_1_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI_IBM_1 = wire *strVar;

    sprintf(strVar, "IOCKGATEDLL_TILE_%d_%d", sx, sy);
    device IOCKGATEDLL_TILE *strVar
         port map(
                   S11_PAD_STATE_OUT => ntRef_ntS11_PAD_STATE_OUT,
                   TIE_LO_1V1        => ntRef_ntTIE_LO_1V1,       
                   CLK_ADC_OUT       => ntRef_ntCLK_ADC_OUT,      
                   CLK_PLL_EXT_OUT   => ntRef_ntCLK_PLL_EXT_OUT,  
                   IOCKDLY_COUT_N_1  => ntRef_ntIOCKDLY_COUT_N_1, 
                   LOCK              => ntRef_ntLOCK,             
                   CLK_PIO0_P_TBUF   => ntRef_ntCLK_PIO0_P_TBUF,  
                   GLOGEN_FB_OUT     => ntRef_ntGLOGEN_FB_OUT,    
                   CLK_IOCK_B        => ntRef_ntCLK_IOCK_B,       
                   CLKOUTT           => ntRef_ntCLKOUTT,          
                   DIV_CLKIN_T       => ntRef_ntDIV_CLKIN_T,      
                   CLK_IOCK_T        => ntRef_ntCLK_IOCK_T,       
                   DLL_TIHI          => ntRef_ntDLL_TIHI,         
                   IOCKDLY_COUT_P_0  => ntRef_ntIOCKDLY_COUT_P_0, 
                   IOCKDLY_COUT_P_1  => ntRef_ntIOCKDLY_COUT_P_1, 
                   TIEL              => ntRef_ntTIEL,             
                   ADDR              => ntRef_ntADDR,             
                   CLOCK_DR_OUT      => ntRef_ntCLOCK_DR_OUT,     
                   TIEH              => ntRef_ntTIEH,             
                   CLKOUTB           => ntRef_ntCLKOUTB,          
                   DLL_TILO          => ntRef_ntDLL_TILO,         
                   COL_INC_OUT       => ntRef_ntCOL_INC_OUT,      
                   DIV_OSCCLK_T      => ntRef_ntDIV_OSCCLK_T,     
                   IOCKDLY_COUT_N_0  => ntRef_ntIOCKDLY_COUT_N_0, 
                   GLOGEN_OUT        => ntRef_ntGLOGEN_OUT,       
                   CAL_DONE_OUT      => ntRef_ntCAL_DONE_OUT,     
                   CLK_IODIV_HMEMC   => ntRef_ntCLK_IODIV_HMEMC,  
                   RCLK_OUT          => ntRef_ntRCLK_OUT,         
                   CS_OUT            => ntRef_ntCS_OUT,           
                   CTRL_CODE         => ntRef_ntCTRL_CODE,        
                   CTRL_CODE_T       => ntRef_ntCTRL_CODE_T,      
                   BUS2_CLK_OUT      => ntRef_ntBUS2_CLK_OUT,     
                   BUS_BSCAN_OUT     => ntRef_ntBUS_BSCAN_OUT,    
                   BUS_GSEB_OUT      => ntRef_ntBUS_GSEB_OUT,     
                   CLK_PIO_P_OUT_0   => ntRef_ntCLK_PIO_P_OUT_0,  
                   CLK_PIO_N_OUT_0   => ntRef_ntCLK_PIO_N_OUT_0,  
                   CLK_PIO_P_OUT_1   => ntRef_ntCLK_PIO_P_OUT_1,  
                   CLK_PIO_N_OUT_1   => ntRef_ntCLK_PIO_N_OUT_1,  
                   SIG_IBM_1_OUT     => ntRef_ntSIG_IBM_1_OUT,    
                   SIG_IBM_0_OUT     => ntRef_ntSIG_IBM_0_OUT,    
                   TIEHI_IBM_0       => ntRef_ntTIEHI_IBM_0,      
                   TIEHI_IBM_1       => ntRef_ntTIEHI_IBM_1
                  )
        @([sx,sy]);

      STRUCT inc_spec_IOCKGATEDLL incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB,ty_srb;
      int sx_srb,sy_srb;

      foreach incVar(inc_IOCKGATEDLL_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;

          ty_srb = (loc_SRB==0) ? ty : ty+2;
          sy_srb = ty_srb * NUM_GRID_Y;
          
          sx_srb = sx-2;

          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device IOCKGATEDLL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect
            (
              <pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE @ [sx_srb,sy_srb]>>
                                                                                                         : <wire *pin_logic_device of <device IOCKGATEDLL_TILE @[sx,sy]>>
            ); 
          }
      }
 
   connect(
                 <pin SIG_IBM_0[0] of <device IOCKGATEDLL_TILE @[sx,sy]>> => <wire TIEHI_IBM_0 of <device IOCKGATEDLL_TILE @[sx,sy]>>,
                 <pin SIG_IBM_0[1] of <device IOCKGATEDLL_TILE @[sx,sy]>> => <wire TIEHI_IBM_0 of <device IOCKGATEDLL_TILE @[sx,sy]>>,
                 <pin SIG_IBM_0[2] of <device IOCKGATEDLL_TILE @[sx,sy]>> => <wire TIEHI_IBM_0 of <device IOCKGATEDLL_TILE @[sx,sy]>>,
                 <pin SIG_IBM_0[3] of <device IOCKGATEDLL_TILE @[sx,sy]>> => <wire TIEHI_IBM_0 of <device IOCKGATEDLL_TILE @[sx,sy]>>
               );

}// end of function place_iockgatedll_tile
/********************************************************************************
********************************************************************************/
function place_cramsl7206_tile(unsigned int tx,ty)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    string strVar;
    sprintf(strVar,"ntOUT_%d_%d",sx,sy);
    &wire ntRef_ntOUT[19:0] = wire *strVar[19:0];   
 
    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar, "CRAMSL7206_TILE_%d_%d", sx, sy);

    device CRAMSL7206_TILE *strVar

         port map(
                  OUT => ntRef_ntOUT,
                  TIEHI => ntRef_ntTIEHI
                 )

        @([sx,sy]);

      STRUCT inc_spec_SRB_TIEHI incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;
   
      unsigned int sx_SRB;
      sx_SRB = sx-2;
      int cnt;

      foreach incVar(inc_TIEHI_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          sy_SRB = sy;
          
          connect(<pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy_SRB]>> =>  <wire *pin_logic_device of <device CRAMSL7206_TILE @ [sx,sy]>>);
      }

}
/********************************************************************************/
/********************************************************************************/
function place_clkmux_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy, sx_iockdll, sy_iockdll;
    
    sx = tx * NUM_GRID_X +2;
    sy = ty * NUM_GRID_Y;
    
    string strVar;
    //LOGIC OUTPUT
    sprintf(strVar,"ntCLK_PREGM_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PREGM_OUT[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCLK_GLOBAL_L_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_L[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCLK_GLOBAL_R_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_R[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntOUT_%d_%d",sx,sy);
    &wire ntRef_ntOUT[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar, "CLKMUX_TILE_%d_%d", sx, sy);
    device CLKMUX_TILE *strVar
         port map (
                     CLK_PREGM_OUT => ntRef_ntCLK_PREGM_OUT,
                     CLK_GLOBAL_L  => ntRef_ntCLK_GLOBAL_L, 
                     TIEHI         => ntRef_ntTIEHI, 
                     OUT          => ntRef_ntOUT, 
                     CLK_GLOBAL_R  => ntRef_ntCLK_GLOBAL_R
                   )
      @([sx,sy]);  
      STRUCT inc_spec_CLKMUX incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sx_SRB;

      foreach incVar(inc_CLKMUX_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sx_SRB = sx - 2;
          }
          else
          {
            sx_SRB = sx - 2 + loc_SRB*NUM_GRID_X; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device CLKMUX_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_SRB,sy]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy]>> => <wire *pin_logic_device of <device CLKMUX_TILE @[sx,sy]>>); 
          }
      }         
}// end of function place_clkmux_tile
/********************************************************************************
********************************************************************************/

}//end of package pgl_funcs_place


