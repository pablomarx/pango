tarted
grid
device PLL
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config bit CP_VREF_TRIM_DIG[3:0] = 4'b0000,
        config bit CP_VREF_TRIM_ANA[3:0] = 4'b0000,
        config string CP_LDO_TEST_EN = "FALSE",
        config bit CP_LDO_TESTSEL = 1'b0,
        config string CP_DYN_CLKMOD_SEL_EN = "FALSE",
        config bit CP_CLKIN_STASEL = 1'b0,
        config bit CP_FBDLY_CNTL[7:0] = 8'b00000000,
        config string CP_FBCK_DLY_EN = "FALSE",
        config bit CP_DYN_RATIO_IDIV_EN = 1'b0,
        config bit CP_DYN_RATIO_MDIV_EN = 1'b0,
        config bit CP_RATIO_IDIV[9:0] = 10'b0000000001,
        config bit CP_RATIO_MDIV[6:0] = 7'b0000001,
        config string CP_PFDENA_DISABLE = "FALSE",
        config bit CP_FREQ_LOCK[3:0] = 4'b0000,
        config string CP_FREQ_LOCKDET_EN = "TRUE",
        config string CP_PHASE_LOCKDET_EN = "TRUE",
        config string CP_LOCK_FILTER_PD = "FALSE",
        config bit CP_VCOCLK_DIV2 = 1'b0,
        config bit CP_DYN_RATIO_ODIV_EN[4:0] = 5'b00000,
        config bit CP_DYN_RATIO_FDIV_EN = 1'b0,
        config bit CP_RATIO_ODIV0[9:0] = 10'b0000000001,
        config bit CP_RATIO_ODIV1[9:0] = 10'b0000000001,
        config bit CP_RATIO_ODIV2[9:0] = 10'b0000000001,
        config bit CP_RATIO_ODIV3[9:0] = 10'b0000000001,
        config bit CP_RATIO_ODIV4[9:0] = 10'b0000000001,
        config bit CP_RATIO_FDIV[9:0] = 10'b0000000001,
        config bit CP_DYN_DUTY_ODIV_EN[4:0] = 5'b00000,
        config bit CP_DUTY_ODIV0[9:0] = 10'b0000000010,
        config bit CP_DUTY_ODIV1[9:0] = 10'b0000000010,
        config bit CP_DUTY_ODIV2[9:0] = 10'b0000000010,
        config bit CP_DUTY_ODIV3[9:0] = 10'b0000000010,
        config bit CP_DUTY_ODIV4[9:0] = 10'b0000000010,
        config bit CP_PHASE_ODIV0[12:0] = 13'b0000000000000,
        config bit CP_PHASE_ODIV1[12:0] = 13'b0000000000000,
        config bit CP_PHASE_ODIV2[12:0] = 13'b0000000000000,
        config bit CP_PHASE_ODIV3[12:0] = 13'b0000000000000,
        config bit CP_PHASE_ODIV4[12:0] = 13'b0000000000000,
        config bit CP_PHASE_FDIV[12:0] = 13'b0000000000000,
        config bit CP_ODIV_CAS[4:0] = 5'b00000,
        config bit CP_TS_CLK[4:0] = 5'b00000,
        config bit CP_FBDIV_SEL[2:0] = 3'b000,
        config bit CP_CLKOUT_SEL[2:0] = 3'b000,
        config string CP_BYPASS_EN = "FALSE",
        config bit CP_GATE_EN[5:0] = 6'b000000,
        config bit CP_GATE_5MUX1_EN = 1'b0,
        config string CP_PLL_PWD_ENABLE = "FALSE",
        config string CP_PLL_GLOGEN_ENABLE = "TRUE",
        config string CP_PLL_RST_DISABLE = "FALSE",
        config string CP_ODIV_RST_ENABLE = "FALSE",
        config string CP_LOOP_DYN_EN = "FALSE",
        config string CP_LOOP_MAPPING_EN = "FALSE",
        config bit CP_ICP_BASE_TRIM = 1'b0,
        config bit CP_BW_SEL[1:0] = 2'b00,
        config bit CP_ICP_SEL[3:0] = 4'b0000,
        config bit CP_LPFRES_SEL[2:0] = 3'b000,
        config bit CP_CRIPPLE_SEL = 1'b0,
        config bit CP_VCO_IADJ_TRIM[2:0] = 3'b000,
        config bit CP_TEST_SEL[1:0] = 2'b00
    );
    port
    (
// configuration_body_def_on


    config input SC_VREF_TRIM_DIG[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_VREF_TRIM_DIG[3],SC_VREF_TRIM_DIG[2],SC_VREF_TRIM_DIG[1],SC_VREF_TRIM_DIG[0]" */,

    config input SC_VREF_TRIM_ANA[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_VREF_TRIM_ANA[3],SC_VREF_TRIM_ANA[2],SC_VREF_TRIM_ANA[1],SC_VREF_TRIM_ANA[0]" */,

    config input SC_LDO_TEST_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LDO_TEST_EN" */,

    config input SC_LDO_TESTSEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LDO_TESTSEL" */,

    config input SC_DYN_CLKMOD_SEL_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DYN_CLKMOD_SEL_EN" */,

    config input SC_CLKIN_STASEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKIN_STASEL" */,

    config input SC_FBDLY_CNTL[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FBDLY_CNTL[7],SC_FBDLY_CNTL[6],SC_FBDLY_CNTL[5],SC_FBDLY_CNTL[4],SC_FBDLY_CNTL[3],SC_FBDLY_CNTL[2],SC_FBDLY_CNTL[1],SC_FBDLY_CNTL[0]" */,

    config input SC_FBCK_DLY_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FBCK_DLY_EN" */,

    config input SC_DYN_RATIO_IDIV_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DYN_RATIO_IDIV_EN" */,

    config input SC_DYN_RATIO_MDIV_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DYN_RATIO_MDIV_EN" */,

    config input SC_RATIO_IDIV[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RATIO_IDIV[9],SC_RATIO_IDIV[8],SC_RATIO_IDIV[7],SC_RATIO_IDIV[6],SC_RATIO_IDIV[5],SC_RATIO_IDIV[4],SC_RATIO_IDIV[3],SC_RATIO_IDIV[2],SC_RATIO_IDIV[1],SC_RATIO_IDIV[0]" */,

    config input SC_RATIO_MDIV[6:0] = 7'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RATIO_MDIV[6],SC_RATIO_MDIV[5],SC_RATIO_MDIV[4],SC_RATIO_MDIV[3],SC_RATIO_MDIV[2],SC_RATIO_MDIV[1],SC_RATIO_MDIV[0]" */,

    config input SC_PFDENA_DISABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PFDENA_DISABLE" */,

    config input SC_FREQ_LOCK[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FREQ_LOCK[3],SC_FREQ_LOCK[2],SC_FREQ_LOCK[1],SC_FREQ_LOCK[0]" */,

    config input SC_FREQ_LOCKDET_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FREQ_LOCKDET_EN" */,

    config input SC_PHASE_LOCKDET_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PHASE_LOCKDET_EN" */,

    config input SC_LOCK_FILTER_PD = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LOCK_FILTER_PD" */,

    config input SC_VCOCLK_DIV2 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_VCOCLK_DIV2" */,

    config input SC_DYN_RATIO_ODIV_EN[4:0] = 5'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DYN_RATIO_ODIV_EN[4],SC_DYN_RATIO_ODIV_EN[3],SC_DYN_RATIO_ODIV_EN[2],SC_DYN_RATIO_ODIV_EN[1],SC_DYN_RATIO_ODIV_EN[0]" */,

    config input SC_DYN_RATIO_FDIV_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DYN_RATIO_FDIV_EN" */,

    config input SC_RATIO_ODIV0[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RATIO_ODIV0[9],SC_RATIO_ODIV0[8],SC_RATIO_ODIV0[7],SC_RATIO_ODIV0[6],SC_RATIO_ODIV0[5],SC_RATIO_ODIV0[4],SC_RATIO_ODIV0[3],SC_RATIO_ODIV0[2],SC_RATIO_ODIV0[1],SC_RATIO_ODIV0[0]" */,

    config input SC_RATIO_ODIV1[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RATIO_ODIV1[9],SC_RATIO_ODIV1[8],SC_RATIO_ODIV1[7],SC_RATIO_ODIV1[6],SC_RATIO_ODIV1[5],SC_RATIO_ODIV1[4],SC_RATIO_ODIV1[3],SC_RATIO_ODIV1[2],SC_RATIO_ODIV1[1],SC_RATIO_ODIV1[0]" */,

    config input SC_RATIO_ODIV2[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RATIO_ODIV2[9],SC_RATIO_ODIV2[8],SC_RATIO_ODIV2[7],SC_RATIO_ODIV2[6],SC_RATIO_ODIV2[5],SC_RATIO_ODIV2[4],SC_RATIO_ODIV2[3],SC_RATIO_ODIV2[2],SC_RATIO_ODIV2[1],SC_RATIO_ODIV2[0]" */,

    config input SC_RATIO_ODIV3[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RATIO_ODIV3[9],SC_RATIO_ODIV3[8],SC_RATIO_ODIV3[7],SC_RATIO_ODIV3[6],SC_RATIO_ODIV3[5],SC_RATIO_ODIV3[4],SC_RATIO_ODIV3[3],SC_RATIO_ODIV3[2],SC_RATIO_ODIV3[1],SC_RATIO_ODIV3[0]" */,

    config input SC_RATIO_ODIV4[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RATIO_ODIV4[9],SC_RATIO_ODIV4[8],SC_RATIO_ODIV4[7],SC_RATIO_ODIV4[6],SC_RATIO_ODIV4[5],SC_RATIO_ODIV4[4],SC_RATIO_ODIV4[3],SC_RATIO_ODIV4[2],SC_RATIO_ODIV4[1],SC_RATIO_ODIV4[0]" */,

    config input SC_RATIO_FDIV[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RATIO_FDIV[9],SC_RATIO_FDIV[8],SC_RATIO_FDIV[7],SC_RATIO_FDIV[6],SC_RATIO_FDIV[5],SC_RATIO_FDIV[4],SC_RATIO_FDIV[3],SC_RATIO_FDIV[2],SC_RATIO_FDIV[1],SC_RATIO_FDIV[0]" */,

    config input SC_DYN_DUTY_ODIV_EN[4:0] = 5'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DYN_DUTY_ODIV_EN[4],SC_DYN_DUTY_ODIV_EN[3],SC_DYN_DUTY_ODIV_EN[2],SC_DYN_DUTY_ODIV_EN[1],SC_DYN_DUTY_ODIV_EN[0]" */,

    config input SC_DUTY_ODIV0[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DUTY_ODIV0[9],SC_DUTY_ODIV0[8],SC_DUTY_ODIV0[7],SC_DUTY_ODIV0[6],SC_DUTY_ODIV0[5],SC_DUTY_ODIV0[4],SC_DUTY_ODIV0[3],SC_DUTY_ODIV0[2],SC_DUTY_ODIV0[1],SC_DUTY_ODIV0[0]" */,

    config input SC_DUTY_ODIV1[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DUTY_ODIV1[9],SC_DUTY_ODIV1[8],SC_DUTY_ODIV1[7],SC_DUTY_ODIV1[6],SC_DUTY_ODIV1[5],SC_DUTY_ODIV1[4],SC_DUTY_ODIV1[3],SC_DUTY_ODIV1[2],SC_DUTY_ODIV1[1],SC_DUTY_ODIV1[0]" */,

    config input SC_DUTY_ODIV2[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DUTY_ODIV2[9],SC_DUTY_ODIV2[8],SC_DUTY_ODIV2[7],SC_DUTY_ODIV2[6],SC_DUTY_ODIV2[5],SC_DUTY_ODIV2[4],SC_DUTY_ODIV2[3],SC_DUTY_ODIV2[2],SC_DUTY_ODIV2[1],SC_DUTY_ODIV2[0]" */,

    config input SC_DUTY_ODIV3[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DUTY_ODIV3[9],SC_DUTY_ODIV3[8],SC_DUTY_ODIV3[7],SC_DUTY_ODIV3[6],SC_DUTY_ODIV3[5],SC_DUTY_ODIV3[4],SC_DUTY_ODIV3[3],SC_DUTY_ODIV3[2],SC_DUTY_ODIV3[1],SC_DUTY_ODIV3[0]" */,

    config input SC_DUTY_ODIV4[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DUTY_ODIV4[9],SC_DUTY_ODIV4[8],SC_DUTY_ODIV4[7],SC_DUTY_ODIV4[6],SC_DUTY_ODIV4[5],SC_DUTY_ODIV4[4],SC_DUTY_ODIV4[3],SC_DUTY_ODIV4[2],SC_DUTY_ODIV4[1],SC_DUTY_ODIV4[0]" */,

    config input SC_PHASE_ODIV0[12:0] = 13'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PHASE_ODIV0[12],SC_PHASE_ODIV0[11],SC_PHASE_ODIV0[10],SC_PHASE_ODIV0[9],SC_PHASE_ODIV0[8],SC_PHASE_ODIV0[7],SC_PHASE_ODIV0[6],SC_PHASE_ODIV0[5],SC_PHASE_ODIV0[4],SC_PHASE_ODIV0[3],SC_PHASE_ODIV0[2],SC_PHASE_ODIV0[1],SC_PHASE_ODIV0[0]" */,

    config input SC_PHASE_ODIV1[12:0] = 13'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PHASE_ODIV1[12],SC_PHASE_ODIV1[11],SC_PHASE_ODIV1[10],SC_PHASE_ODIV1[9],SC_PHASE_ODIV1[8],SC_PHASE_ODIV1[7],SC_PHASE_ODIV1[6],SC_PHASE_ODIV1[5],SC_PHASE_ODIV1[4],SC_PHASE_ODIV1[3],SC_PHASE_ODIV1[2],SC_PHASE_ODIV1[1],SC_PHASE_ODIV1[0]" */,

    config input SC_PHASE_ODIV2[12:0] = 13'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PHASE_ODIV2[12],SC_PHASE_ODIV2[11],SC_PHASE_ODIV2[10],SC_PHASE_ODIV2[9],SC_PHASE_ODIV2[8],SC_PHASE_ODIV2[7],SC_PHASE_ODIV2[6],SC_PHASE_ODIV2[5],SC_PHASE_ODIV2[4],SC_PHASE_ODIV2[3],SC_PHASE_ODIV2[2],SC_PHASE_ODIV2[1],SC_PHASE_ODIV2[0]" */,

    config input SC_PHASE_ODIV3[12:0] = 13'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PHASE_ODIV3[12],SC_PHASE_ODIV3[11],SC_PHASE_ODIV3[10],SC_PHASE_ODIV3[9],SC_PHASE_ODIV3[8],SC_PHASE_ODIV3[7],SC_PHASE_ODIV3[6],SC_PHASE_ODIV3[5],SC_PHASE_ODIV3[4],SC_PHASE_ODIV3[3],SC_PHASE_ODIV3[2],SC_PHASE_ODIV3[1],SC_PHASE_ODIV3[0]" */,

    config input SC_PHASE_ODIV4[12:0] = 13'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PHASE_ODIV4[12],SC_PHASE_ODIV4[11],SC_PHASE_ODIV4[10],SC_PHASE_ODIV4[9],SC_PHASE_ODIV4[8],SC_PHASE_ODIV4[7],SC_PHASE_ODIV4[6],SC_PHASE_ODIV4[5],SC_PHASE_ODIV4[4],SC_PHASE_ODIV4[3],SC_PHASE_ODIV4[2],SC_PHASE_ODIV4[1],SC_PHASE_ODIV4[0]" */,

    config input SC_PHASE_FDIV[12:0] = 13'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PHASE_FDIV[12],SC_PHASE_FDIV[11],SC_PHASE_FDIV[10],SC_PHASE_FDIV[9],SC_PHASE_FDIV[8],SC_PHASE_FDIV[7],SC_PHASE_FDIV[6],SC_PHASE_FDIV[5],SC_PHASE_FDIV[4],SC_PHASE_FDIV[3],SC_PHASE_FDIV[2],SC_PHASE_FDIV[1],SC_PHASE_FDIV[0]" */,

    config input SC_ODIV_CAS[4:0] = 5'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV_CAS[4],SC_ODIV_CAS[3],SC_ODIV_CAS[2],SC_ODIV_CAS[1],SC_ODIV_CAS[0]" */,

    config input SC_TS_CLK[4:0] = 5'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TS_CLK[4],SC_TS_CLK[3],SC_TS_CLK[2],SC_TS_CLK[1],SC_TS_CLK[0]" */,

    config input SC_FBDIV_SEL[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FBDIV_SEL[2],SC_FBDIV_SEL[1],SC_FBDIV_SEL[0]" */,

    config input SC_CLKOUT_SEL[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOUT_SEL[2],SC_CLKOUT_SEL[1],SC_CLKOUT_SEL[0]" */,

    config input SC_BYPASS_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_BYPASS_EN" */,

    config input SC_GATE_EN[5:0] = 6'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GATE_EN[5],SC_GATE_EN[4],SC_GATE_EN[3],SC_GATE_EN[2],SC_GATE_EN[1],SC_GATE_EN[0]" */,

    config input SC_GATE_5MUX1_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GATE_5MUX1_EN" */,

    config input SC_PLL_PWD_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PLL_PWD_ENABLE" */,

    config input SC_PLL_GLOGEN_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PLL_GLOGEN_ENABLE" */,

    config input SC_PLL_RST_DISABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PLL_RST_DISABLE" */,

    config input SC_ODIV_RST_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV_RST_ENABLE" */,

    config input SC_LOOP_DYN_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LOOP_DYN_EN" */,

    config input SC_LOOP_MAPPING_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LOOP_MAPPING_EN" */,

    config input SC_ICP_BASE_TRIM = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ICP_BASE_TRIM" */,

    config input SC_BW_SEL[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_BW_SEL[1],SC_BW_SEL[0]" */,

    config input SC_ICP_SEL[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ICP_SEL[3],SC_ICP_SEL[2],SC_ICP_SEL[1],SC_ICP_SEL[0]" */,

    config input SC_LPFRES_SEL[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LPFRES_SEL[2],SC_LPFRES_SEL[1],SC_LPFRES_SEL[0]" */,

    config input SC_CRIPPLE_SEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CRIPPLE_SEL" */,

    config input SC_VCO_IADJ_TRIM[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_VCO_IADJ_TRIM[2],SC_VCO_IADJ_TRIM[1],SC_VCO_IADJ_TRIM[0]" */,

    config input SC_TEST_SEL[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TEST_SEL[1],SC_TEST_SEL[0]" */,

    config input SC_TEST_MODE[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TEST_MODE[3],SC_TEST_MODE[2],SC_TEST_MODE[1],SC_TEST_MODE[0]" */,

// configuration_body_def_end

        input PHASESEL[2:0] = 3'b111,
        input IDIV_RATIO_DYN[9:0] = 10'b1111_1111_11,
        input MDIV_RATIO_DYN[6:0] = 7'b1111_111,
        input ODIV0_RATIO_DYN[9:0] = 10'b1111_1111_11,
        input ODIV1_RATIO_DYN[9:0] = 10'b1111_1111_11,
        input ODIV2_RATIO_DYN[9:0] = 10'b1111_1111_11,
        input ODIV3_RATIO_DYN[9:0] = 10'b1111_1111_11,
        input ODIV4_RATIO_DYN[9:0] = 10'b1111_1111_11,
        input FDIV_RATIO_DYN[9:0] = 10'b1111_1111_11,
        input ODIV0_DUTY_DYN[9:0] = 10'b1111_1111_11,
        input ODIV1_DUTY_DYN[9:0] = 10'b1111_1111_11,
        input ODIV2_DUTY_DYN[9:0] = 10'b1111_1111_11,
        input ODIV3_DUTY_DYN[9:0] = 10'b1111_1111_11,
        input ODIV4_DUTY_DYN[9:0] = 10'b1111_1111_11,
        input GATE_CLKOUT[5:0] = 6'b1111_11,
        input ICP_SEL_DYN[3:0] = 4'b1111,
        input LPFRES_SEL_DYN[2:0] = 3'b111,
        input CLK_IN0 = 1'b1,
        input CLK_IN1 = 1'b1,
        input DYNSEL_CLKIN = 1'b1,
        input DYNSEL_MANNU_EN = 1'b1,
        input CLK_FBIN = 1'b1,
        input FBDLY_LOAD = 1'b1,
        input FBDLY_MOVE = 1'b1,
        input FBDLY_DIRECTION = 1'b1,
        input PFDENA_DYN = 1'b1,
        input LOCK_CAS = 1'b1,
        input CLK_CAS = 1'b1,
        input PHASEDIR = 1'b1,
        input LOAD_FPHASE = 1'b1,
        input FPHASESTEP_N = 1'b1,
        input GATE_5MUX1 = 1'b1,
        input PLL_PWRDOWN = 1'b1,
        input RST_PLL = 1'b1,
        input RST_ODIV = 1'b1,
        input ICP_BASE_TRIM_DYN = 1'b1,
        input CRIPPLE_SEL_DYN = 1'b1,
        input LDO_TEST_SEL = 1'b1,
        output TEST_OUT,
        output FBDLY_OB,
        output CLKSWITCH_FLAG,
        output LOCK,
        output LOCK_LOCAL,
        output CLK_INT_FB,
        output CLK_OUT0,
        output CLK_OUT0_WL,
        output CLK_OUT_EXT,
        output CLK_OUT1,
        output CLK_OUT2,
        output CLK_OUT3,
        output CLK_OUT4,
        output CLK_OUT4_CAS,
        output CLK_OUT_5MUX1
    );
};
//grid device end

//grid device structure netlist started
structure netlist of PLL
{
};
//grid device structure netlist end
//grid device configure body started

configuration cfg of PLL
{

 // assign config body begin
    SC_VREF_TRIM_DIG  :=  CP_VREF_TRIM_DIG;
    SC_VREF_TRIM_ANA  :=  CP_VREF_TRIM_ANA;
    SC_LDO_TESTSEL  :=  CP_LDO_TESTSEL;
    SC_CLKIN_STASEL  :=  CP_CLKIN_STASEL;
    SC_FBDLY_CNTL    :=  CP_FBDLY_CNTL;
    SC_DYN_RATIO_IDIV_EN  :=  CP_DYN_RATIO_IDIV_EN;
    SC_DYN_RATIO_MDIV_EN  :=  CP_DYN_RATIO_MDIV_EN;
    SC_RATIO_IDIV  :=  CP_RATIO_IDIV;
    SC_RATIO_MDIV  :=  CP_RATIO_MDIV;
    SC_FREQ_LOCK    :=  CP_FREQ_LOCK;
    SC_VCOCLK_DIV2  :=  CP_VCOCLK_DIV2;
    SC_DYN_RATIO_ODIV_EN  :=  CP_DYN_RATIO_ODIV_EN;
    SC_DYN_RATIO_FDIV_EN  :=  CP_DYN_RATIO_FDIV_EN;
    SC_RATIO_ODIV0  :=  CP_RATIO_ODIV0;
    SC_RATIO_ODIV1  :=  CP_RATIO_ODIV1;
    SC_RATIO_ODIV2  :=  CP_RATIO_ODIV2;
    SC_RATIO_ODIV3  :=  CP_RATIO_ODIV3;
    SC_RATIO_ODIV4  :=  CP_RATIO_ODIV4;
    SC_RATIO_FDIV   :=  CP_RATIO_FDIV;
    SC_DYN_DUTY_ODIV_EN  :=  CP_DYN_DUTY_ODIV_EN;
    SC_DUTY_ODIV0  :=  CP_DUTY_ODIV0;
    SC_DUTY_ODIV1  :=  CP_DUTY_ODIV1;
    SC_DUTY_ODIV2  :=  CP_DUTY_ODIV2;
    SC_DUTY_ODIV3  :=  CP_DUTY_ODIV3;
    SC_DUTY_ODIV4  :=  CP_DUTY_ODIV4;
    SC_PHASE_ODIV0  :=  CP_PHASE_ODIV0;
    SC_PHASE_ODIV1  :=  CP_PHASE_ODIV1;
    SC_PHASE_ODIV2  :=  CP_PHASE_ODIV2;
    SC_PHASE_ODIV3  :=  CP_PHASE_ODIV3;
    SC_PHASE_ODIV4  :=  CP_PHASE_ODIV4;
    SC_PHASE_FDIV   :=  CP_PHASE_FDIV;
    SC_ODIV_CAS    :=  CP_ODIV_CAS;
    SC_TS_CLK      :=  CP_TS_CLK;
    SC_FBDIV_SEL   :=  CP_FBDIV_SEL;
    SC_CLKOUT_SEL  :=  CP_CLKOUT_SEL;
    SC_GATE_EN        :=  CP_GATE_EN;
    SC_GATE_5MUX1_EN  :=  CP_GATE_5MUX1_EN;
    SC_ICP_BASE_TRIM  :=  CP_ICP_BASE_TRIM;
    SC_BW_SEL         :=  CP_BW_SEL;
    SC_ICP_SEL        :=  CP_ICP_SEL;
    SC_LPFRES_SEL     :=  CP_LPFRES_SEL;
    SC_CRIPPLE_SEL    :=  CP_CRIPPLE_SEL;
    SC_VCO_IADJ_TRIM  :=  CP_VCO_IADJ_TRIM;
    SC_TEST_SEL       :=  CP_TEST_SEL;
// assign config body end

//initial config body0 begin
    if(CP_LDO_TEST_EN == "FALSE")
    {
        SC_LDO_TEST_EN  :=  1'b0;
    }
    else if(CP_LDO_TEST_EN == "TRUE")
    {
        SC_LDO_TEST_EN  :=  1'b1;
    }
    else
    {
        SC_LDO_TEST_EN  :=  1'bx;
        error("illegal setting for CP_LDO_TEST_EN  :=  %s",CP_LDO_TEST_EN);
    }

//initial config body0 end


//initial config body1 begin
    if(CP_DYN_CLKMOD_SEL_EN == "FALSE")
    {
        SC_DYN_CLKMOD_SEL_EN  :=  1'b0;
    }
    else if(CP_DYN_CLKMOD_SEL_EN == "TRUE")
    {
        SC_DYN_CLKMOD_SEL_EN  :=  1'b1;
    }
    else
    {
        SC_DYN_CLKMOD_SEL_EN  :=  1'bx;
        error("illegal setting for CP_DYN_CLKMOD_SEL_EN  :=  %s",CP_DYN_CLKMOD_SEL_EN);
    }

//initial config body1 end


//initial config body2 begin
    if(CP_FBCK_DLY_EN == "FALSE")
    {
        SC_FBCK_DLY_EN  :=  1'b0;
    }
    else if(CP_FBCK_DLY_EN == "TRUE")
    {
        SC_FBCK_DLY_EN  :=  1'b1;
    }
    else
    {
        SC_FBCK_DLY_EN  :=  1'bx;
        error("illegal setting for CP_FBCK_DLY_EN  :=  %s",CP_FBCK_DLY_EN);
    }

//initial config body2 end


//initial config body3 begin
    if(CP_PFDENA_DISABLE == "FALSE")
    {
        SC_PFDENA_DISABLE  :=  1'b0;
    }
    else if(CP_PFDENA_DISABLE == "TRUE")
    {
        SC_PFDENA_DISABLE  :=  1'b1;
    }
    else
    {
        SC_PFDENA_DISABLE  :=  1'bx;
        error("illegal setting for CP_PFDENA_DISABLE  :=  %s",CP_PFDENA_DISABLE);
    }

//initial config body3 end


//initial config body4 begin
    if(CP_FREQ_LOCKDET_EN == "FALSE")
    {
        SC_FREQ_LOCKDET_EN  :=  1'b0;
    }
    else if(CP_FREQ_LOCKDET_EN == "TRUE")
    {
        SC_FREQ_LOCKDET_EN  :=  1'b1;
    }
    else
    {
        SC_FREQ_LOCKDET_EN  :=  1'bx;
        error("illegal setting for CP_FREQ_LOCKDET_EN  :=  %s",CP_FREQ_LOCKDET_EN);
    }

//initial config body4 end


//initial config body5 begin
    if(CP_PHASE_LOCKDET_EN == "FALSE")
    {
        SC_PHASE_LOCKDET_EN  :=  1'b0;
    }
    else if(CP_PHASE_LOCKDET_EN == "TRUE")
    {
        SC_PHASE_LOCKDET_EN  :=  1'b1;
    }
    else
    {
        SC_PHASE_LOCKDET_EN  :=  1'bx;
        error("illegal setting for CP_PHASE_LOCKDET_EN  :=  %s",CP_PHASE_LOCKDET_EN);
    }

//initial config body5 end


//initial config body6 begin
    if(CP_LOCK_FILTER_PD == "FALSE")
    {
        SC_LOCK_FILTER_PD  :=  1'b0;
    }
    else if(CP_LOCK_FILTER_PD == "TRUE")
    {
        SC_LOCK_FILTER_PD  :=  1'b1;
    }
    else
    {
        SC_LOCK_FILTER_PD  :=  1'bx;
        error("illegal setting for CP_LOCK_FILTER_PD  :=  %s",CP_LOCK_FILTER_PD);
    }

//initial config body6 end


//initial config body7 begin
    if(CP_BYPASS_EN == "FALSE")
    {
        SC_BYPASS_EN  :=  1'b0;
    }
    else if(CP_BYPASS_EN == "TRUE")
    {
        SC_BYPASS_EN  :=  1'b1;
    }
    else
    {
        SC_BYPASS_EN  :=  1'bx;
        error("illegal setting for CP_BYPASS_EN  :=  %s",CP_BYPASS_EN);
    }

//initial config body7 end


//initial config body8 begin
    if(CP_PLL_PWD_ENABLE == "FALSE")
    {
        SC_PLL_PWD_ENABLE  :=  1'b0;
    }
    else if(CP_PLL_PWD_ENABLE == "TRUE")
    {
        SC_PLL_PWD_ENABLE  :=  1'b1;
    }
    else
    {
        SC_PLL_PWD_ENABLE  :=  1'bx;
        error("illegal setting for CP_PLL_PWD_ENABLE  :=  %s",CP_PLL_PWD_ENABLE);
    }

//initial config body8 end


//initial config body9 begin
    if(CP_PLL_GLOGEN_ENABLE == "FALSE")
    {
        SC_PLL_GLOGEN_ENABLE  :=  1'b0;
    }
    else if(CP_PLL_GLOGEN_ENABLE == "TRUE")
    {
        SC_PLL_GLOGEN_ENABLE  :=  1'b1;
    }
    else
    {
        SC_PLL_GLOGEN_ENABLE  :=  1'bx;
        error("illegal setting for CP_PLL_GLOGEN_ENABLE  :=  %s",CP_PLL_GLOGEN_ENABLE);
    }

//initial config body9 end


//initial config body10 begin
    if(CP_PLL_RST_DISABLE == "FALSE")
    {
        SC_PLL_RST_DISABLE  :=  1'b0;
    }
    else if(CP_PLL_RST_DISABLE == "TRUE")
    {
        SC_PLL_RST_DISABLE  :=  1'b1;
    }
    else
    {
        SC_PLL_RST_DISABLE  :=  1'bx;
        error("illegal setting for CP_PLL_RST_DISABLE  :=  %s",CP_PLL_RST_DISABLE);
    }

//initial config body10 end


//initial config body11 begin
    if(CP_ODIV_RST_ENABLE == "FALSE")
    {
        SC_ODIV_RST_ENABLE  :=  1'b0;
    }
    else if(CP_ODIV_RST_ENABLE == "TRUE")
    {
        SC_ODIV_RST_ENABLE  :=  1'b1;
    }
    else
    {
        SC_ODIV_RST_ENABLE  :=  1'bx;
        error("illegal setting for CP_ODIV_RST_ENABLE  :=  %s",CP_ODIV_RST_ENABLE);
    }

//initial config body11 end


//initial config body12 begin
    if(CP_LOOP_DYN_EN == "FALSE")
    {
        SC_LOOP_DYN_EN  :=  1'b0;
    }
    else if(CP_LOOP_DYN_EN == "TRUE")
    {
        SC_LOOP_DYN_EN  :=  1'b1;
    }
    else
    {
        SC_LOOP_DYN_EN  :=  1'bx;
        error("illegal setting for CP_LOOP_DYN_EN  :=  %s",CP_LOOP_DYN_EN);
    }

//initial config body12 end


//initial config body13 begin
    if(CP_LOOP_MAPPING_EN == "FALSE")
    {
        SC_LOOP_MAPPING_EN  :=  1'b0;
    }
    else if(CP_LOOP_MAPPING_EN == "TRUE")
    {
        SC_LOOP_MAPPING_EN  :=  1'b1;
    }
    else
    {
        SC_LOOP_MAPPING_EN  :=  1'bx;
        error("illegal setting for CP_LOOP_MAPPING_EN  :=  %s",CP_LOOP_MAPPING_EN);
    }

//initial config body13 end

};

//grid device configure body end

