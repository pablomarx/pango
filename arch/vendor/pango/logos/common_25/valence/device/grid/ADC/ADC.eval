tarted
grid
device ADC
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config bit CP_REG0[15:0] = 16'h0000,
        config bit CP_REG1[15:0] = 16'h0000,
        config bit CP_REG2[15:0] = 16'h0000,
        config bit CP_REG3[15:0] = 16'h0000,
        config bit CP_REG4[15:0] = 16'h0000,
        config string CP_AD_EN_ENABLE = "FALSE"
    );
    port
    (
// configuration_body_def_on


    config input SC_REG0[15:0] = 16'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_REG0[15],SC_REG0[14],SC_REG0[13],SC_REG0[12],SC_REG0[11],SC_REG0[10],SC_REG0[9],SC_REG0[8],SC_REG0[7],SC_REG0[6],SC_REG0[5],SC_REG0[4],SC_REG0[3],SC_REG0[2],SC_REG0[1],SC_REG0[0]" */,

    config input SC_REG1[15:0] = 16'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_REG1[15],SC_REG1[14],SC_REG1[13],SC_REG1[12],SC_REG1[11],SC_REG1[10],SC_REG1[9],SC_REG1[8],SC_REG1[7],SC_REG1[6],SC_REG1[5],SC_REG1[4],SC_REG1[3],SC_REG1[2],SC_REG1[1],SC_REG1[0]" */,

    config input SC_REG2[15:0] = 16'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_REG2[15],SC_REG2[14],SC_REG2[13],SC_REG2[12],SC_REG2[11],SC_REG2[10],SC_REG2[9],SC_REG2[8],SC_REG2[7],SC_REG2[6],SC_REG2[5],SC_REG2[4],SC_REG2[3],SC_REG2[2],SC_REG2[1],SC_REG2[0]" */,

    config input SC_REG3[15:0] = 16'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_REG3[15],SC_REG3[14],SC_REG3[13],SC_REG3[12],SC_REG3[11],SC_REG3[10],SC_REG3[9],SC_REG3[8],SC_REG3[7],SC_REG3[6],SC_REG3[5],SC_REG3[4],SC_REG3[3],SC_REG3[2],SC_REG3[1],SC_REG3[0]" */,

    config input SC_REG4[15:0] = 16'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_REG4[15],SC_REG4[14],SC_REG4[13],SC_REG4[12],SC_REG4[11],SC_REG4[10],SC_REG4[9],SC_REG4[8],SC_REG4[7],SC_REG4[6],SC_REG4[5],SC_REG4[4],SC_REG4[3],SC_REG4[2],SC_REG4[1],SC_REG4[0]" */,

    config input SC_AD_EN_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_AD_EN_ENABLE" */,

// configuration_body_def_end

        input VAUX[9:0] = 10'b1111_1111_11,
        input VA[1:0] = 2'b11,
        input DI[15:0] = 16'b1111_1111_1111_1111,
        input DADDR[7:0] = 8'b1111_1111,
        input RST_N = 1'b1,
        input LOADN_SC = 1'b1,
        input DCLK = 1'b1,
        input DEN = 1'b1,
        input DWE = 1'b1,
        input CONVST = 1'b1,
        input AD_EN = 1'b1,
        input TEST_MODE_N = 1'b1,
        input TEST_CLK = 1'b1,
        input TEST_SE_N = 1'b1,
        input TEST_RSTN = 1'b1,
        input TEST_SI0 = 1'b1,
        input TEST_SI1 = 1'b1,
        input TEST_SI2 = 1'b1,
        output DO[15:0],
        output DBUSY,
        output DRDY,
        output DMODIFIED,
        output LOGIC_DONE,
        output OVER_TEMP,
        output TEST_SO0,
        output TEST_SO1,
        output TEST_SO2
    );
};
//grid device end

//grid device structure netlist started
structure netlist of ADC
{
};
//grid device structure netlist end
//grid device configure body started

configuration cfg of ADC
{

 // assign config body begin
    SC_REG0  :=  CP_REG0;
    SC_REG1  :=  CP_REG1;
    SC_REG2  :=  CP_REG2;
    SC_REG3  :=  CP_REG3;
    SC_REG4  :=  CP_REG4;
// assign config body end

//initial config body0 begin
    if(CP_AD_EN_ENABLE == "FALSE")
    {
        SC_AD_EN_ENABLE  :=  1'b0;
    }
    else if(CP_AD_EN_ENABLE == "TRUE")
    {
        SC_AD_EN_ENABLE  :=  1'b1;
    }
    else
    {
        SC_AD_EN_ENABLE  :=  1'bx;
        error("illegal setting for CP_AD_EN_ENABLE  :=  %s",CP_AD_EN_ENABLE);
    }

//initial config body0 end

};

//grid device configure body end

timing  adc_tnl of ADC
{

    bit    GAVERAGE[1:0]          =  CP_REG0[15:14];
    bit    GCALIB[1:0]            =  CP_REG0[13:12];
    bit    GREFERENCE             =  CP_REG0[11   ];
    bit    GCALIB_REFERENCE       =  CP_REG0[10   ];
    bit    GFULL_SWING[2:0]       =  CP_REG0[ 9: 7];
    bit    GVCM[2:0]              =  CP_REG0[ 6: 4];
    bit    GDIVIDER[3:0]          =  CP_REG0[ 3: 0]; 
    bit    GADC_MODE[1:0]         =  CP_REG1[15:14];
    bit    GEVENT_DRIVE           =  CP_REG1[13   ];
    bit    GADC_MODE_1MSPS        =  CP_REG1[12   ];
    bit    GCLKSWITCH             =  CP_REG1[11   ];
    bit    GINTERNAL_VOL_SEL[1:0] =  CP_REG1[ 7: 6];
    bit    GSINGLE_CH_SEL[3:0]    =  CP_REG1[ 5: 2];
    bit    GSINGLE_CH_IN[1:0]     =  CP_REG1[ 1: 0];
    bit    GSEQ_CH11_10_SEL[1:0]  =  CP_REG2[11:10];
    bit    GSEQ_CH9_8_SEL[1:0]    =  CP_REG2[ 9: 8];
    bit    GSEQ_CH7_6_SEL[1:0]    =  CP_REG2[ 7: 6];
    bit    GSEQ_CH5_4_SEL[1:0]    =  CP_REG2[ 5: 4];
    bit    GSEQ_CH3_2_SEL[1:0]    =  CP_REG2[ 3: 2];
    bit    GSEQ_CH1_0_SEL[1:0]    =  CP_REG2[ 1: 0];
    bit    GSEQ_CH11_10_IN[1:0]   =  CP_REG3[11:10];
    bit    GSEQ_CH9_8_IN[1:0]     =  CP_REG3[ 9: 8];
    bit    GSEQ_CH7_6_IN[1:0]     =  CP_REG3[ 7: 6];
    bit    GSEQ_CH5_4_IN[1:0]     =  CP_REG3[ 5: 4];
    bit    GSEQ_CH3_2_IN[1:0]     =  CP_REG3[ 3: 2];
    bit    GSEQ_CH1_0_IN[1:0]     =  CP_REG3[ 1: 0];
    bit    GTEMP_SENSOR_HIGH[7:0] =  CP_REG4[15: 8];
    bit    GTEMP_SENSOR_LOW[7:0]  =  CP_REG4[ 7: 0];
    
    string AVERAGE          =  (GAVERAGE          == 2'b00  ) ? "1"              :
                               (GAVERAGE          == 2'b01  ) ? "16"             :
                               (GAVERAGE          == 2'b10  ) ? "64"             : 
                               (GAVERAGE          == 2'b11  ) ? "256"            : "";
    string CALIB            =  (GCALIB            == 2'b00  ) ? "NONE"           :
                               (GCALIB            == 2'b01  ) ? "OFFSET"         :
                               (GCALIB            == 2'b11  ) ? "OFFSET_GAIN"    : "";
    string REFERENCE        =  (GREFERENCE        == 1'b0   ) ? "INTERNAL"       :
                               (GREFERENCE        == 1'b1   ) ? "EXTERNAL"       : "";
    string CALIB_REFERENCE  =  (GCALIB_REFERENCE  == 1'b0   ) ? "INTERNAL"       :
                               (GCALIB_REFERENCE  == 1'b1   ) ? "EXTERNAL"       : "";
    string FULL_SWING       =  (GFULL_SWING       == 3'b000 ) ? "0.5V"           :
                               (GFULL_SWING       == 3'b001 ) ? "0.6V"           :
                               (GFULL_SWING       == 3'b010 ) ? "0.7V"           :
                               (GFULL_SWING       == 3'b011 ) ? "0.8V"           :
                               (GFULL_SWING       == 3'b100 ) ? "0.9V"           :
                               (GFULL_SWING       == 3'b101 ) ? "1.0V"           :
                               (GFULL_SWING       == 3'b110 ) ? "1.1V"           :
                               (GFULL_SWING       == 3'b111 ) ? "1.2V"           : "";
    string VCM              =  (GVCM              == 3'b000 ) ? "0.8V"           :
                               (GVCM              == 3'b001 ) ? "0.9V"           :
                               (GVCM              == 3'b010 ) ? "1.0V"           :
                               (GVCM              == 3'b011 ) ? "1.1V"           :
                               (GVCM              == 3'b100 ) ? "1.2V"           :
                               (GVCM              == 3'b101 ) ? "1.3V"           :
                               (GVCM              == 3'b110 ) ? "1.4V"           :
                               (GVCM              == 3'b111 ) ? "1.5V"           : "";
    string DIVIDER          =  (GDIVIDER          == 4'b0001) ? "2"              :
                               (GDIVIDER          == 4'b0010) ? "3"              :
                               (GDIVIDER          == 4'b0011) ? "4"              :
                               (GDIVIDER          == 4'b0100) ? "5"              :
                               (GDIVIDER          == 4'b0101) ? "6"              :
                               (GDIVIDER          == 4'b0110) ? "7"              :
                               (GDIVIDER          == 4'b0111) ? "8"              : 
                               (GDIVIDER          == 4'b1000) ? "9"              :
                               (GDIVIDER          == 4'b1001) ? "10"             :
                               (GDIVIDER          == 4'b1010) ? "11"             :
                               (GDIVIDER          == 4'b1011) ? "12"             :
                               (GDIVIDER          == 4'b1100) ? "13"             :
                               (GDIVIDER          == 4'b1101) ? "14"             :
                               (GDIVIDER          == 4'b1110) ? "15"             :
                               (GDIVIDER          == 4'b1111) ? "16"             : "";
    string ADC_MODE         =  (GADC_MODE         == 2'b00  ) ? "DEFAULT"        :
                               (GADC_MODE         == 2'b01  ) ? "SINGLE_PASS"    :
                               (GADC_MODE         == 2'b10  ) ? "CONTINUE_SEQ"   :
                               (GADC_MODE         == 2'b11  ) ? "SINGLE_CHANNEL" : "";
    string EVENT_DRIVE      =  (GEVENT_DRIVE      == 1'b0   ) ? "FALSE"          :
                               (GEVENT_DRIVE      == 1'b1   ) ? "TRUE"           : "";
    string ADC_MODE_1MSPS   =  (GADC_MODE_1MSPS   == 1'b0   ) ? "FALSE"          :
                               (GADC_MODE_1MSPS   == 1'b1   ) ? "TRUE"           : "";
    string CLKSWITCH        =  (GCLKSWITCH        == 1'b0   ) ? "FALSE"          :
                               (GCLKSWITCH        == 1'b1   ) ? "TRUE"           : "";
    string INTERNAL_VOL_SEL =  (GINTERNAL_VOL_SEL == 2'b01  ) ? "VDD33"          :
                               (GINTERNAL_VOL_SEL == 2'b10  ) ? "VDD11"          :
                               (GINTERNAL_VOL_SEL == 2'b11  ) ? "VDDM"           : "";
    string SINGLE_CH_SEL    =  (GSINGLE_CH_SEL    == 4'b0000) ? "0"              :
                               (GSINGLE_CH_SEL    == 4'b0001) ? "1"              :
                               (GSINGLE_CH_SEL    == 4'b0010) ? "2"              :
                               (GSINGLE_CH_SEL    == 4'b0011) ? "3"              :
                               (GSINGLE_CH_SEL    == 4'b0100) ? "4"              :
                               (GSINGLE_CH_SEL    == 4'b0101) ? "5"              :
                               (GSINGLE_CH_SEL    == 4'b0110) ? "6"              :
                               (GSINGLE_CH_SEL    == 4'b0111) ? "7"              :
                               (GSINGLE_CH_SEL    == 4'b1000) ? "8"              :
                               (GSINGLE_CH_SEL    == 4'b1001) ? "9"              :
                               (GSINGLE_CH_SEL    == 4'b1010) ? "10"             :
                               (GSINGLE_CH_SEL    == 4'b1011) ? "11"             :
                               (GSINGLE_CH_SEL    == 4'b1100) ? "12"             :
                               (GSINGLE_CH_SEL    == 4'b1101) ? "13"             :
                               (GSINGLE_CH_SEL    == 4'b1110) ? "14"             :
                               (GSINGLE_CH_SEL    == 4'b1111) ? "15"             : "";
    string SINGLE_CH_IN     =  (GSINGLE_CH_IN     == 2'b00  ) ? "SINGLE_END"     :
                               (GSINGLE_CH_IN     == 2'b01  ) ? "UNIPOLAR"       :
                               (GSINGLE_CH_IN     == 2'b11  ) ? "BIPOLAR"        : "";
    string SEQ_CH11_10_SEL  =  (GSEQ_CH11_10_SEL  == 2'b00  ) ? "NONE"           :
                               (GSEQ_CH11_10_SEL  == 2'b01  ) ? "CH10"           :
                               (GSEQ_CH11_10_SEL  == 2'b10  ) ? "CH11"           :
                               (GSEQ_CH11_10_SEL  == 2'b11  ) ? "ALL"            : "";
    string SEQ_CH9_8_SEL    =  (GSEQ_CH9_8_SEL    == 2'b00  ) ? "NONE"           :
                               (GSEQ_CH9_8_SEL    == 2'b01  ) ? "CH8"            :
                               (GSEQ_CH9_8_SEL    == 2'b10  ) ? "CH9"            :
                               (GSEQ_CH9_8_SEL    == 2'b11  ) ? "ALL"            : "";
    string SEQ_CH7_6_SEL    =  (GSEQ_CH7_6_SEL    == 2'b00  ) ? "NONE"           :
                               (GSEQ_CH7_6_SEL    == 2'b01  ) ? "CH6"            :
                               (GSEQ_CH7_6_SEL    == 2'b10  ) ? "CH7"            :
                               (GSEQ_CH7_6_SEL    == 2'b11  ) ? "ALL"            : "";
    string SEQ_CH5_4_SEL    =  (GSEQ_CH5_4_SEL    == 2'b00  ) ? "NONE"           :
                               (GSEQ_CH5_4_SEL    == 2'b01  ) ? "CH4"            :
                               (GSEQ_CH5_4_SEL    == 2'b10  ) ? "CH5"            :
                               (GSEQ_CH5_4_SEL    == 2'b11  ) ? "ALL"            : "";
    string SEQ_CH3_2_SEL    =  (GSEQ_CH3_2_SEL    == 2'b00  ) ? "NONE"           :
                               (GSEQ_CH3_2_SEL    == 2'b01  ) ? "CH2"            :
                               (GSEQ_CH3_2_SEL    == 2'b10  ) ? "CH3"            :
                               (GSEQ_CH3_2_SEL    == 2'b11  ) ? "ALL"            : "";
    string SEQ_CH1_0_SEL    =  (GSEQ_CH1_0_SEL    == 2'b00  ) ? "NONE"           :
                               (GSEQ_CH1_0_SEL    == 2'b01  ) ? "CH0"            :
                               (GSEQ_CH1_0_SEL    == 2'b10  ) ? "CH1"            :
                               (GSEQ_CH1_0_SEL    == 2'b11  ) ? "ALL"            : "";
    string SEQ_CH11_10_IN   =  (GSEQ_CH11_10_IN   == 2'b00  ) ? "SINGLE_END"     :
                               (GSEQ_CH11_10_IN   == 2'b01  ) ? "UNIPOLAR"       :
                               (GSEQ_CH11_10_IN   == 2'b11  ) ? "BIPOLAR"        : "";
    string SEQ_CH9_8_IN     =  (GSEQ_CH9_8_IN     == 2'b00  ) ? "SINGLE_END"     :
                               (GSEQ_CH9_8_IN     == 2'b01  ) ? "UNIPOLAR"       :
                               (GSEQ_CH9_8_IN     == 2'b11  ) ? "BIPOLAR"        : "";
    string SEQ_CH7_6_IN     =  (GSEQ_CH7_6_IN     == 2'b00  ) ? "SINGLE_END"     :
                               (GSEQ_CH7_6_IN     == 2'b01  ) ? "UNIPOLAR"       :
                               (GSEQ_CH7_6_IN     == 2'b11  ) ? "BIPOLAR"        : "";
    string SEQ_CH5_4_IN     =  (GSEQ_CH5_4_IN     == 2'b00  ) ? "SINGLE_END"     :
                               (GSEQ_CH5_4_IN     == 2'b01  ) ? "UNIPOLAR"       :
                               (GSEQ_CH5_4_IN     == 2'b11  ) ? "BIPOLAR"        : "";
    string SEQ_CH3_2_IN     =  (GSEQ_CH3_2_IN     == 2'b00  ) ? "SINGLE_END"     :
                               (GSEQ_CH3_2_IN     == 2'b01  ) ? "UNIPOLAR"       :
                               (GSEQ_CH3_2_IN     == 2'b11  ) ? "BIPOLAR"        : "";
    string SEQ_CH1_0_IN     =  (GSEQ_CH1_0_IN     == 2'b00  ) ? "SINGLE_END"     :
                               (GSEQ_CH1_0_IN     == 2'b01  ) ? "UNIPOLAR"       :
                               (GSEQ_CH1_0_IN     == 2'b11  ) ? "BIPOLAR"        : "";
    int TEMP_SENSOR_HIGH    =   to_integer(GTEMP_SENSOR_HIGH);
    int TEMP_SENSOR_LOW     =   to_integer(GTEMP_SENSOR_LOW );

    operator V_ADC_E1 V_ADC_E1
        parameter map
        (
           AVERAGE             =>    AVERAGE         ,
           CALIB               =>    CALIB           ,
           REFERENCE           =>    REFERENCE       ,
           CALIB_REFERENCE     =>    CALIB_REFERENCE ,
           FULL_SWING          =>    FULL_SWING      ,
           VCM                 =>    VCM             ,
           DIVIDER             =>    DIVIDER         ,
           ADC_MODE            =>    ADC_MODE        ,
           EVENT_DRIVE         =>    EVENT_DRIVE     ,
           ADC_MODE_1MSPS      =>    ADC_MODE_1MSPS  ,
           CLKSWITCH           =>    CLKSWITCH       ,
           INTERNAL_VOL_SEL    =>    INTERNAL_VOL_SEL,
           SINGLE_CH_SEL       =>    SINGLE_CH_SEL   ,
           SINGLE_CH_IN        =>    SINGLE_CH_IN    ,
           SEQ_CH11_10_SEL     =>    SEQ_CH11_10_SEL ,
           SEQ_CH9_8_SEL       =>    SEQ_CH9_8_SEL   ,
           SEQ_CH7_6_SEL       =>    SEQ_CH7_6_SEL   ,
           SEQ_CH5_4_SEL       =>    SEQ_CH5_4_SEL   ,
           SEQ_CH3_2_SEL       =>    SEQ_CH3_2_SEL   ,
           SEQ_CH1_0_SEL       =>    SEQ_CH1_0_SEL   ,
           SEQ_CH11_10_IN      =>    SEQ_CH11_10_IN  ,
           SEQ_CH9_8_IN        =>    SEQ_CH9_8_IN    ,
           SEQ_CH7_6_IN        =>    SEQ_CH7_6_IN    ,
           SEQ_CH5_4_IN        =>    SEQ_CH5_4_IN    ,
           SEQ_CH3_2_IN        =>    SEQ_CH3_2_IN    ,
           SEQ_CH1_0_IN        =>    SEQ_CH1_0_IN    ,
           TEMP_SENSOR_HIGH    =>    TEMP_SENSOR_HIGH,
           TEMP_SENSOR_LOW     =>    TEMP_SENSOR_LOW ,
           ADC_EN_ENABLE       =>    CP_AD_EN_ENABLE
        )
        port map
        (
            VAUX         =>  VAUX      ,
            VA           =>  VA        ,
            RST_N        =>  RST_N     ,
            LOADSC_N     =>  LOADN_SC  ,
            DCLK         =>  DCLK      ,
            DEN          =>  DEN       ,
            DI           =>  DI        ,
            DWE          =>  DWE       ,
            DADDR        =>  DADDR     ,
            CONVST       =>  CONVST    ,
            DBUSY        =>  DBUSY     ,
            ADC_EN       =>  AD_EN     ,
            DO           =>  DO        ,
            DRDY         =>  DRDY      ,
            DMODIFIED    =>  DMODIFIED ,
            LOGIC_DONE   =>  LOGIC_DONE,
            OVER_TEMP    =>  OVER_TEMP 
        );
};

