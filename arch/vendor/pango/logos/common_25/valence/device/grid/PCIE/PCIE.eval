tarted
grid
device PCIE
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config string CP_PCIE_HARD_EN = "FALSE",
        config string CP_GRS_EN = "FALSE",
        config string CP_PIN_MUX_INT_FORCE_EN = "FALSE",
        config string CP_PIN_MUX_INT_DISABLE = "FALSE",
        config string CP_DIAG_CTRL_BUS_B2 = "NORMAL",
        config string CP_DYN_DEBUG_SEL_EN = "FALSE",
        config int CP_DEBUG_INFO_SEL = 0,
        config int CP_BAR_RESIZABLE = 21,
        config int CP_NUM_OF_RBARS = 3,
        config int CP_BAR_INDEX_0 = 0,
        config int CP_BAR_INDEX_1 = 2,
        config int CP_BAR_INDEX_2 = 4,
        config string CP_TPH_DISABLE = "FALSE",
        config string CP_MSIX_CAP_DISABLE = "FALSE",
        config string CP_MSI_CAP_DISABLE = "FALSE",
        config string CP_MSI_PVM_DISABLE = "FALSE",
        config int CP_BAR_MASK_WRITABLE = 32,
        config int CP_APP_DEV_NUM = 0,
        config int CP_APP_BUS_NUM = 0,
        config string CP_RAM_MUX_EN = "FALSE",
        config string CP_ATOMIC_DISABLE = "FALSE"
    );
    port
    (
// configuration_body_def_on


    config input SC_GRSN_DIS = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GRSN_DIS" */,

    config input SC_PIN_MUX_INT_FORCE_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIN_MUX_INT_FORCE_EN" */,

    config input SC_PIN_MUX_INT_DISABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIN_MUX_INT_DISABLE" */,

    config input SC_DIAG_CTRL_BUS_B2 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DIAG_CTRL_BUS_B2" */,

    config input SC_DYN_DEBUG_SEL_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DYN_DEBUG_SEL_EN" */,

    config input SC_DEBUG_INFO_SEL[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DEBUG_INFO_SEL[3],SC_DEBUG_INFO_SEL[2],SC_DEBUG_INFO_SEL[1],SC_DEBUG_INFO_SEL[0]" */,

    config input SC_BAR_RESIZABLE[5:0] = 6'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_BAR_RESIZABLE[5],SC_BAR_RESIZABLE[4],SC_BAR_RESIZABLE[3],SC_BAR_RESIZABLE[2],SC_BAR_RESIZABLE[1],SC_BAR_RESIZABLE[0]" */,

    config input SC_NUM_OF_RBARS[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_NUM_OF_RBARS[2],SC_NUM_OF_RBARS[1],SC_NUM_OF_RBARS[0]" */,

    config input SC_BAR_INDEX_0[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_BAR_INDEX_0[2],SC_BAR_INDEX_0[1],SC_BAR_INDEX_0[0]" */,

    config input SC_BAR_INDEX_1[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_BAR_INDEX_1[2],SC_BAR_INDEX_1[1],SC_BAR_INDEX_1[0]" */,

    config input SC_BAR_INDEX_2[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_BAR_INDEX_2[2],SC_BAR_INDEX_2[1],SC_BAR_INDEX_2[0]" */,

    config input SC_TPH_DISABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TPH_DISABLE" */,

    config input SC_MSIX_CAP_DISABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MSIX_CAP_DISABLE" */,

    config input SC_MSI_CAP_DISABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MSI_CAP_DISABLE" */,

    config input SC_MSI_PVM_DISABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MSI_PVM_DISABLE" */,

    config input SC_BAR_MASK_WRITABLE[5:0] = 6'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_BAR_MASK_WRITABLE[5],SC_BAR_MASK_WRITABLE[4],SC_BAR_MASK_WRITABLE[3],SC_BAR_MASK_WRITABLE[2],SC_BAR_MASK_WRITABLE[1],SC_BAR_MASK_WRITABLE[0]" */,

    config input SC_APP_DEV_NUM[4:0] = 5'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_APP_DEV_NUM[4],SC_APP_DEV_NUM[3],SC_APP_DEV_NUM[2],SC_APP_DEV_NUM[1],SC_APP_DEV_NUM[0]" */,

    config input SC_APP_BUS_NUM[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_APP_BUS_NUM[7],SC_APP_BUS_NUM[6],SC_APP_BUS_NUM[5],SC_APP_BUS_NUM[4],SC_APP_BUS_NUM[3],SC_APP_BUS_NUM[2],SC_APP_BUS_NUM[1],SC_APP_BUS_NUM[0]" */,

    config input SC_RAM_MUX_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RAM_MUX_EN" */,

    config input SC_ATOMIC_DISABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ATOMIC_DISABLE" */,

// configuration_body_def_end

        input DEVICE_TYPE[2:0] = 3'b111,
        input TRGT1_RADM_PKT_HALT[2:0] = 3'b111,
        input AXIS_SLAVE0_TDATA[127:0] = 128'b1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111,
        input AXIS_SLAVE1_TDATA[127:0] = 128'b1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111,
        input AXIS_SLAVE2_TDATA[127:0] = 128'b1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111,
        input DBI_ADDR[31:0] = 32'b1111_1111_1111_1111_1111_1111_1111_1111,
        input DBI_DIN[31:0] = 32'b1111_1111_1111_1111_1111_1111_1111_1111,
        input DBI_WR[3:0] = 4'b1111,
        input VEN_MSI_TC[2:0] = 3'b111,
        input VEN_MSI_VECTOR[4:0] = 5'b1111_1,
        input CFG_MSI_PENDING[31:0] = 32'b1111_1111_1111_1111_1111_1111_1111_1111,
        input MSIX_ADDR[63:0] = 64'b1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111,
        input MSIX_DATA[31:0] = 32'b1111_1111_1111_1111_1111_1111_1111_1111,
        input APP_HDR_LOG[127:0] = 128'b1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111,
        input APP_ERR_BUS[12:0] = 13'b1111_1111_1111_1,
        input DIAG_CTRL_BUS[1:0] = 2'b11,
        input DYN_DEBUG_INFO_SEL[3:0] = 4'b1111,
        input APP_RAS_DES_TBA_CTRL[1:0] = 2'b11,
        input PHY_MAC_RXELECIDLE[3:0] = 4'b1111,
        input PHY_MAC_PHYSTATUS[3:0] = 4'b1111,
        input PHY_MAC_RXDATA[127:0] = 128'b1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111,
        input PHY_MAC_RXDATAK[15:0] = 16'b1111_1111_1111_1111,
        input PHY_MAC_RXVALID[3:0] = 4'b1111,
        input PHY_MAC_RXSTATUS[11:0] = 12'b1111_1111_1111,
        input P_DATAQ_DATAOUT[65:0] = 66'b1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_11,
        input RETRYRAM_XDLH_DATA[67:0] = 68'b1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111,
        input P_HDRQ_DATAOUT[137:0] = 138'b1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_11,
        input MEM_CLK = 1'b1,
        input PCLK = 1'b1,
        input PCLK_DIV2 = 1'b1,
        input BUTTON_RST = 1'b1,
        input POWER_UP_RST = 1'b1,
        input PERST = 1'b1,
        input APP_INIT_RST = 1'b1,
        input RX_LANE_FLIP_EN = 1'b1,
        input TX_LANE_FLIP_EN = 1'b1,
        input APP_LTSSM_ENABLE = 1'b1,
        input APP_REQ_RETRY_EN = 1'b1,
        input AXIS_MASTER_TREADY = 1'b1,
        input AXIS_SLAVE0_TVALID = 1'b1,
        input AXIS_SLAVE0_TLAST = 1'b1,
        input AXIS_SLAVE0_TUSER = 1'b1,
        input AXIS_SLAVE1_TVALID = 1'b1,
        input AXIS_SLAVE1_TLAST = 1'b1,
        input AXIS_SLAVE1_TUSER = 1'b1,
        input AXIS_SLAVE2_TVALID = 1'b1,
        input AXIS_SLAVE2_TLAST = 1'b1,
        input AXIS_SLAVE2_TUSER = 1'b1,
        input DBI_CS = 1'b1,
        input DBI_CS2 = 1'b1,
        input APP_DBI_RO_WR_DISABLE = 1'b1,
        input SEDI = 1'b1,
        input SEDI_ACK = 1'b1,
        input SYS_INT = 1'b1,
        input VEN_MSI_REQ = 1'b1,
        input OUTBAND_PWRUP_CMD = 1'b1,
        input APP_REQ_ENTR_L1 = 1'b1,
        input APP_READY_ENTR_L23 = 1'b1,
        input APP_REQ_EXIT_L1 = 1'b1,
        input APP_XFER_PENDING = 1'b1,
        input APPS_PM_XMT_TURNOFF = 1'b1,
        input APP_UNLOCK_MSG = 1'b1,
        input APPS_PM_XMT_PME = 1'b1,
        input APP_CLK_PM_EN = 1'b1,
        input SYS_AUX_PWR_DET = 1'b1,
        input APP_HDR_VALID = 1'b1,
        input APP_ERR_ADVISORY = 1'b1,
        input APP_RAS_DES_SD_HOLD_LTSSM = 1'b1,
        input RAM_TEST_EN = 1'b1,
        input RAM_TEST_ADDRH = 1'b1,
        input RETRY_TEST_DATA_EN = 1'b1,
        input RAM_TEST_MODE_N = 1'b1,
        input TEST_SE_N = 1'b1,
        input TEST_RST_N = 1'b1,
        input TEST_MODE_N = 1'b1,
        output SMLH_LTSSM_STATE[4:0],
        output AXIS_MASTER_TDATA[127:0],
        output AXIS_MASTER_TKEEP[3:0],
        output AXIS_MASTER_TUSER[7:0],
        output RADM_GRANT_TLP_TYPE[5:0],
        output LBC_DBI_DOUT[31:0],
        output PM_DSTATE[2:0],
        output PM_MASTER_STATE[4:0],
        output PM_SLAVE_STATE[4:0],
        output RADM_TIMEOUT_CPL_TC[2:0],
        output RADM_TIMEOUT_CPL_TAG[7:0],
        output RADM_TIMEOUT_CPL_ATTR[1:0],
        output RADM_TIMEOUT_CPL_LEN[10:0],
        output CFG_MAX_RD_REQ_SIZE[2:0],
        output CFG_MAX_PAYLOAD_SIZE[2:0],
        output CFG_TPH_REQ_EN[1:0],
        output CFG_PF_TPH_ST_MODE[2:0],
        output CFG_PBUS_NUM[7:0],
        output CFG_PBUS_DEV_NUM[4:0],
        output DEBUG_INFO_MUX[132:0],
        output XADM_PH_CDTS[7:0],
        output XADM_PD_CDTS[11:0],
        output XADM_NPH_CDTS[7:0],
        output XADM_NPD_CDTS[11:0],
        output XADM_CPLH_CDTS[7:0],
        output XADM_CPLD_CDTS[11:0],
        output MAC_PHY_POWERDOWN[1:0],
        output MAC_PHY_TXDATA[127:0],
        output MAC_PHY_TXDATAK[15:0],
        output MAC_PHY_TXDETECTRX_LOOPBACK[3:0],
        output MAC_PHY_TXELECIDLE_L[3:0],
        output MAC_PHY_TXELECIDLE_H[3:0],
        output MAC_PHY_TXCOMPLIANCE[3:0],
        output MAC_PHY_RXPOLARITY[3:0],
        output MAC_PHY_TXDEEMPH[1:0],
        output MAC_PHY_TXMARGIN[2:0],
        output P_DATAQ_ADDRA[9:0],
        output P_DATAQ_ADDRB[9:0],
        output P_DATAQ_DATAIN[65:0],
        output XDLH_RETRYRAM_ADDR[10:0],
        output XDLH_RETRYRAM_DATA[67:0],
        output P_HDRQ_ADDRA[8:0],
        output P_HDRQ_ADDRB[8:0],
        output P_HDRQ_DATAIN[137:0],
        output CORE_RST_N,
        output TRAINING_RST_N,
        output PHY_RST_N,
        output SMLH_LINK_UP,
        output RDLH_LINK_UP,
        output AXIS_MASTER_TVALID,
        output AXIS_MASTER_TLAST,
        output AXIS_SLAVE0_TREADY,
        output AXIS_SLAVE1_TREADY,
        output AXIS_SLAVE2_TREADY,
        output PM_XTLH_BLOCK_TLP,
        output LBC_DBI_ACK,
        output SEDO,
        output SEDO_EN,
        output CFG_INT_DISABLE,
        output INTA_GRT_MUX,
        output INTB_GRT_MUX,
        output INTC_GRT_MUX,
        output INTD_GRT_MUX,
        output VEN_MSI_GRANT,
        output CFG_MSI_EN,
        output CFG_MSIX_EN,
        output CFG_MSIX_FUNC_MASK,
        output RADM_PM_TURNOFF,
        output RADM_MSG_UNLOCK,
        output PM_STATUS,
        output AUX_PM_EN,
        output PM_PME_EN,
        output PM_LINKST_IN_L0S,
        output PM_LINKST_IN_L1,
        output PM_LINKST_IN_L2,
        output PM_LINKST_L2_EXIT,
        output WAKE,
        output RADM_PM_PME,
        output RADM_PM_TO_ACK,
        output CFG_SEND_COR_ERR_MUX,
        output CFG_SEND_NF_ERR_MUX,
        output CFG_SEND_F_ERR_MUX,
        output CFG_SYS_ERR_RC,
        output CFG_AER_RC_ERR_MUX,
        output RADM_CPL_TIMEOUT,
        output CFG_BUS_MASTER_EN,
        output CFG_RCB,
        output CFG_MEM_SPACE_EN,
        output CFG_PM_NO_SOFT_RST,
        output CFG_CRS_SW_VIS_EN,
        output CFG_NO_SNOOP_EN,
        output CFG_RELAX_ORDER_EN,
        output RBAR_CTRL_UPDATE,
        output CFG_ATOMIC_REQ_EN,
        output CFG_ATOMIC_EGRESS_BLOCK,
        output CFG_EXT_TAG_EN,
        output RADM_IDLE,
        output RADM_Q_NOT_EMPTY,
        output RADM_QOVERFLOW,
        output CFG_LINK_AUTO_BW_MUX,
        output CFG_BW_MGT_MUX,
        output CFG_PME_MUX,
        output CFG_IDO_REQ_EN,
        output CFG_IDO_CPL_EN,
        output MAC_PHY_RATE,
        output MAC_PHY_TXSWING,
        output CFG_HW_AUTO_SP_DIS,
        output P_DATAQ_ENA,
        output P_DATAQ_ENB,
        output P_DATAQ_WEA,
        output XDLH_RETRYRAM_WE,
        output XDLH_RETRYRAM_EN,
        output P_HDRQ_ENA,
        output P_HDRQ_ENB,
        output P_HDRQ_WEA
    );
};
//grid device end

//grid device structure netlist started
structure netlist of PCIE
{
};
//grid device structure netlist end
//grid device configure body started

configuration cfg of PCIE
{

//initial config body0 begin
    if (CP_GRS_EN == "FALSE")
    {
        SC_GRSN_DIS  :=  1'b1;
    }
    else if (CP_GRS_EN == "TRUE")
    {
        SC_GRSN_DIS  :=  1'b0;
    }
    else
    {
        SC_GRSN_DIS  :=  1'b1;
        error("Setting Error : The CP_GRS_EN is set to %s. Legal values is FALSE,TRUE",CP_GRS_EN);
        
    }

//initial config body0 end


//initial config body1 begin
    if (CP_PIN_MUX_INT_FORCE_EN == "FALSE")
    {
        SC_PIN_MUX_INT_FORCE_EN  :=  1'b0;
    }
    else if (CP_PIN_MUX_INT_FORCE_EN == "TRUE")
    {
        SC_PIN_MUX_INT_FORCE_EN  :=  1'b1;
    }
    else
    {
        SC_PIN_MUX_INT_FORCE_EN  :=  1'b0;
        error("Setting Error : The CP_PIN_MUX_INT_FORCE_EN is set to %s. Legal values is FALSE,TRUE",CP_PIN_MUX_INT_FORCE_EN);
        
    }

//initial config body1 end


//initial config body2 begin
    if (CP_PIN_MUX_INT_DISABLE == "FALSE")
    {
        SC_PIN_MUX_INT_DISABLE  :=  1'b0;
    }
    else if (CP_PIN_MUX_INT_DISABLE == "TRUE")
    {
        SC_PIN_MUX_INT_DISABLE  :=  1'b1;
    }
    else
    {
        SC_PIN_MUX_INT_DISABLE  :=  1'b0;
        error("Setting Error : The CP_PIN_MUX_INT_DISABLE is set to %s. Legal values is FALSE,TRUE",CP_PIN_MUX_INT_DISABLE);
        
    }

//initial config body2 end


//initial config body3 begin
    if (CP_DIAG_CTRL_BUS_B2 == "NORMAL")
    {
        SC_DIAG_CTRL_BUS_B2  :=  1'b0;
    }
    else if (CP_DIAG_CTRL_BUS_B2 == "FAST_LINK_MODE")
    {
        SC_DIAG_CTRL_BUS_B2  :=  1'b1;
    }
    else
    {
        SC_DIAG_CTRL_BUS_B2  :=  1'b0;
        error("Setting Error : The CP_DIAG_CTRL_BUS_B2 is set to %s. Legal values is NORMAL,FAST_LINK_MODE",CP_PIN_MUX_INT_DISABLE);
        
    }

//initial config body3 end


//initial config body4 begin
    if (CP_DYN_DEBUG_SEL_EN == "FALSE")
    {
        SC_DYN_DEBUG_SEL_EN  :=  1'b0;
    }
    else if (CP_DYN_DEBUG_SEL_EN == "TRUE")
    {
        SC_DYN_DEBUG_SEL_EN  :=  1'b1;
    }
    else
    {
        SC_DYN_DEBUG_SEL_EN  :=  1'b0;
        error("Setting Error : The CP_DYN_DEBUG_SEL_EN is set to %s. Legal values is FALSE,TRUE",CP_DYN_DEBUG_SEL_EN);
        
    }

//initial config body4 end


//initial config body5 begin
    if (CP_DEBUG_INFO_SEL >= 0 && CP_DEBUG_INFO_SEL <= 15)
    {
        SC_DEBUG_INFO_SEL  :=  CP_DEBUG_INFO_SEL;
    }
    else
    {
        SC_DEBUG_INFO_SEL  :=  0;
        error("Setting Error : The CP_DEBUG_INFO_SEL is set to %d. Legal values is 0 to 15",CP_DEBUG_INFO_SEL);
        
    }

//initial config body5 end


//initial config body6 begin
    if (CP_BAR_RESIZABLE >= 0 && CP_BAR_RESIZABLE <= 63)
    {
        SC_BAR_RESIZABLE  :=  CP_BAR_RESIZABLE;
    }
    else
    {
        SC_BAR_RESIZABLE  :=  21;
        error("Setting Error : The CP_BAR_RESIZABLE is set to %d. Legal values is at most assigning 1 to three bits simultaneously",CP_BAR_RESIZABLE);
        
    }

//initial config body6 end


//initial config body7 begin
    if (CP_NUM_OF_RBARS  >= 0 && CP_NUM_OF_RBARS <= 3)
    {
        SC_NUM_OF_RBARS  :=  CP_NUM_OF_RBARS;
    }
    else
    {
        SC_NUM_OF_RBARS  :=  3;
        error("Setting Error : The CP_NUM_OF_RBARS is set to %d. Legal values is 0 to 3 according to CP_BAR_RESIZABLE ",CP_NUM_OF_RBARS);
        
    }

//initial config body7 end


//initial config body8 begin
    if (CP_BAR_INDEX_0  >= 0 && CP_BAR_INDEX_0 <= 5)
    {
        SC_BAR_INDEX_0  :=  CP_BAR_INDEX_0;
    }
    else
    {
        SC_BAR_INDEX_0  :=  0;
        error("Setting Error : The CP_BAR_INDEX_0 is set to %d. Legal values is 0 to 5 ",CP_BAR_INDEX_0);
        
    }

//initial config body8 end


//initial config body9 begin
    if (CP_BAR_INDEX_1  >= 0 && CP_BAR_INDEX_1 <= 5)
    {
        SC_BAR_INDEX_1  :=  CP_BAR_INDEX_1;
    }
    else
    {
        SC_BAR_INDEX_1  :=  2;
        error("Setting Error : The CP_BAR_INDEX_1 is set to %d. Legal values is 0 to 5 ",CP_BAR_INDEX_1);
        
    }

//initial config body9 end


//initial config body10 begin
    if (CP_BAR_INDEX_2  >= 0 && CP_BAR_INDEX_2 <= 5)
    {
        SC_BAR_INDEX_2  :=  CP_BAR_INDEX_2;
    }
    else
    {
        SC_BAR_INDEX_2  :=  4;
        error("Setting Error : The CP_BAR_INDEX_2 is set to %d. Legal values is 0 to 5 ",CP_BAR_INDEX_2);
        
    }

//initial config body10 end


//initial config body11 begin
    if (CP_TPH_DISABLE == "FALSE")
    {
        SC_TPH_DISABLE  :=  1'b0;
    }
    else if (CP_TPH_DISABLE == "TRUE")
    {
        SC_TPH_DISABLE  :=  1'b1;
    }
    else
    {
        SC_TPH_DISABLE  :=  1'b0;
        error("Setting Error : The CP_TPH_DISABLE is set to %s. Legal values is FALSE,TRUE",CP_TPH_DISABLE);
        
    }

//initial config body11 end


//initial config body12 begin
    if (CP_MSIX_CAP_DISABLE == "FALSE")
    {
        SC_MSIX_CAP_DISABLE  :=  1'b0;
    }
    else if (CP_MSIX_CAP_DISABLE == "TRUE")
    {
        SC_MSIX_CAP_DISABLE  :=  1'b1;
    }
    else
    {
        SC_MSIX_CAP_DISABLE  :=  1'b0;
        error("Setting Error : The CP_MSIX_CAP_DISABLE is set to %s. Legal values is FALSE,TRUE",CP_MSIX_CAP_DISABLE);
        
    }

//initial config body12 end


//initial config body13 begin
    if (CP_MSI_CAP_DISABLE == "FALSE")
    {
        SC_MSI_CAP_DISABLE  :=  1'b0;
    }
    else if (CP_MSI_CAP_DISABLE == "TRUE")
    {
        SC_MSI_CAP_DISABLE  :=  1'b1;
    }
    else
    {
        SC_MSI_CAP_DISABLE  :=  1'b0;
        error("Setting Error : The CP_MSI_CAP_DISABLE is set to %s. Legal values is FALSE,TRUE",CP_MSI_CAP_DISABLE);
        
    }

//initial config body13 end


//initial config body14 begin
    if (CP_MSI_PVM_DISABLE == "FALSE")
    {
        SC_MSI_PVM_DISABLE  :=  1'b0;
    }
    else if (CP_MSI_PVM_DISABLE == "TRUE")
    {
        SC_MSI_PVM_DISABLE  :=  1'b1;
    }
    else
    {
        SC_MSI_PVM_DISABLE  :=  1'b0;
        error("Setting Error : The CP_MSI_PVM_DISABLE is set to %s. Legal values is FALSE,TRUE",CP_MSI_PVM_DISABLE);
        
    }

//initial config body14 end


//initial config body15 begin
    if (CP_BAR_MASK_WRITABLE >= 0 && CP_BAR_MASK_WRITABLE <= 63)
    {
        SC_BAR_MASK_WRITABLE  :=  CP_BAR_MASK_WRITABLE;
    }
    else
    {
        SC_BAR_MASK_WRITABLE  :=  32;
        error("Setting Error : The CP_BAR_MASK_WRITABLE is set to %d. Legal values is 0 to 63",CP_BAR_RESIZABLE);
        
    }

//initial config body15 end


//initial config body16 begin
    if (CP_APP_DEV_NUM >= 0 && CP_APP_DEV_NUM <= 31)
    {
        SC_APP_DEV_NUM  :=  CP_APP_DEV_NUM;
    }
    else
    {
        SC_APP_DEV_NUM  :=  0;
        error("Setting Error : The CP_APP_DEV_NUM is set to %d. Legal values is 0 to 31",CP_APP_DEV_NUM);
        
    }

//initial config body16 end


//initial config body17 begin
    if (CP_APP_BUS_NUM >= 0 && CP_APP_BUS_NUM <= 255)
    {
        SC_APP_BUS_NUM  :=  CP_APP_BUS_NUM;
    }
    else
    {
        SC_APP_BUS_NUM  :=  0;
        error("Setting Error : The CP_APP_BUS_NUM is set to %d. Legal values is 0 to 255",CP_APP_BUS_NUM);
        
    }

//initial config body17 end


//initial config body18 begin
    if (CP_RAM_MUX_EN == "FALSE")
    {
        SC_RAM_MUX_EN  :=  1'b0;
    }
    else if (CP_RAM_MUX_EN == "TRUE")
    {
        SC_RAM_MUX_EN  :=  1'b1;
    }
    else
    {
        SC_RAM_MUX_EN  :=  1'b0;
        error("Setting Error : The CP_RAM_MUX_EN is set to %s. Legal values is FALSE,TRUE",CP_RAM_MUX_EN);
        
    }

//initial config body18 end


//initial config body19 begin
    if (CP_ATOMIC_DISABLE == "FALSE")
    {
        SC_ATOMIC_DISABLE  :=  1'b0;
    }
    else if (CP_ATOMIC_DISABLE == "TRUE")
    {
        SC_ATOMIC_DISABLE  :=  1'b1;
    }
    else
    {
        SC_ATOMIC_DISABLE  :=  1'b0;
        error("Setting Error : The CP_ATOMIC_DISABLE is set to %s. Legal values is FALSE,TRUE",CP_ATOMIC_DISABLE);
        
    }

//initial config body19 end

};

//grid device configure body end

