USE pgl_defs, pgl20h_defs, pango_defs;

package pgl_floorplan_funcs
{

unsigned int fsx = 0;
unsigned int fsy = 0;
unsigned int gsx = 0;
unsigned int gsy = 0;
unsigned int gap_x = 0;

unsigned int is_print_fp_map = 0;


function print_inst_fp_map(string inst_name, unsigned int lsx, unsigned int lsy)
{
    if (is_print_fp_map)
    {
        printf("%s (%d, %d) => (%d, %d)", inst_name, lsx, lsy, fsx, fsy);
    }
}


function get_floorplan_gap_x(unsigned int tmp_i)
{
    if (tmp_i < 17)
    {
        gap_x = 17;
    }
    else if (tmp_i < 27)
    {
        gap_x = 27;
    }
    else if (tmp_i < 41)
    {
        gap_x = 41;
    }
    else if (tmp_i < 51)
    {
        gap_x = 51;
    }
    else if (tmp_i < 69)
    {
        gap_x = 69;
    }
    else if (tmp_i < 83)
    {
        gap_x = 83;
    }
    else
    {
        gap_x = 101;
    }
}


function adjust_floorplan_gap(unsigned int lsx, lsy)
{
    if (lsx / NUM_GRID_X < 14)
    {
        gsx = 0;
    }
    else if (lsx / NUM_GRID_X < 47)
    {
        gsx = 1;
    }
    else
    {
        gsx = 2;
    }

    if (lsy / NUM_GRID_Y < 16)
    {
        gsy = 0;
    }
    else if (lsy / NUM_GRID_Y < 47)
    {
        gsy = 1;
    }
    else
    {
        gsy = 2;
    }

    gsx = lsx - NUM_GRID_X * gsx;
    gsy = lsy - NUM_GRID_Y * gsy;
}


function get_normal_coordinate(unsigned int lsx, lsy)
{
    adjust_floorplan_gap(lsx, lsy);
    fsx = gsx / 2 + gsy % 2 - 1;
    fsy = gsy / NUM_GRID_Y;
}


function get_coordinate_of_clm(unsigned int lsx, lsy)
{
    get_normal_coordinate(lsx, lsy);
    fsy += 1;
    if (fsy >= 2)
    {
        fsy += 1;
    }
}


function get_coordinate_of_apmdrmpll(unsigned int lsx, lsy)
{
    get_normal_coordinate(lsx, lsy);
    fsy += 1;
    if (fsy >= 2)
    {
        fsy += 1;
    }
}


function get_coordinate_of_uscm(unsigned int lsx, lsy)
{
    get_normal_coordinate(lsx, lsy);
    get_floorplan_gap_x(gsx);
    fsx = gap_x;
    fsy = 18 + gsy - 112;
    if (fsy > 40)
    {
        fsy -= 17;
    }
    if (fsy >= 2)
    {
        fsy += 1;
    }
}


function get_coordinate_of_iol(unsigned int lsx, lsy)
{
    get_normal_coordinate(lsx, lsy);
    unsigned int x = fsx, y = fsy;
    if (y >= 60)
    {
        y = 63;
    }
    if (x < 4)
    {
        y += 1;
        // left IOL, in IOL tile IOL at top is even, IOL at bottom is odd
        if (y % 2)
        {
            // odd row IOL place at col 0
            if (x % 2 == 0)
            {
                y += 1;
            }
            x = 0;
        }
        else
        {
            y -= 1;
            // even row IOL place at col 2
            if (x % 2 == 0)
            {
                y += 1;
            }
            x = 2;
        }
    }
    else if (x > 115)
    {
        y += 1;
        // right IOL, in IOL tile IOL at top is even, IOL at bottom is odd
        if (y % 2)
        {
            // odd row IOL place at col 0
            if (x % 2 == 0)
            {
                y += 1;
            }
            x = 116;
        }
        else
        {
            y -= 1;
            // even row IOL place at col 2
            if (x % 2 == 0)
            {
                y += 1;
            }
            x = 118;
        }
        // P/N swap
        if (lsy % 2 == 0)
        {
            y -= 1;
        }
        else
        {
            y += 1;
        }
    }
    else if (y < 2)
    {
        // bottom IOL, in IOL tile IOL at top is even, IOL at bottom is odd
        if (x % 2)
        {
            x -= 1;
        }
        else
        {
            y -= 1;
        }
    }
    else
    {
        // top IOL, in IOL tile IOL at top is even, IOL at bottom is odd
        if (x % 2)
        {
            x -= 1;
            y += 1;
        }
    }

    if (y >= 2)
    {
        y += 1;
    }

    fsx = x;
    fsy = y;
}


function get_coordinate_of_iob(unsigned int lsx, lsy)
{
    get_normal_coordinate(lsx, lsy);
    unsigned int x = fsx, y = fsy, tmp_i = gsx, tmp_j = gsy;

    x += 1;  // add one to prevent x = -1
    if (y > 60)
    {
        y = 63;
    }
    if (x < 4)  // left
    {
        y += 1;
        // odd is top, even is bottom
        if (y % 2)
        {
            // odd row placed at col 1
            if (x % 2)
            {
                y += 1;
            }
            x = 1;
        }
        else
        {
            // even row placed at col 3
            y -= 1;
            if (x % 2)
            {
                y += 1;
            }
            x = 3;
        }
    }
    else if (x > 115)  // right
    {
        y += 1;
        // odd is top, even is bottom
        if (y % 2)
        {
            // odd row placed at col 1
            if (x % 2)
            {
                y += 1;
            }
            x = 117;
        }
        else
        {
            // even row placed at col 3
            y -= 1;
            if (x % 2)
            {
                y += 1;
            }
            x = 119;
        }
        // P/N swap
        if (lsy % 2 == 0)
        {
            y += 1;
        }
        else
        {
            y -= 1;
        }
    }
    else if (y < 2)
    {
        y += 1;
        y -= tmp_i % 2;
        x += 1;
        if (tmp_j != 0)
        {
            // IOBS_8_2, IOB without related IOL
            y += 1;
        }
    }
    else
    {
        y += tmp_i % 2;
        x += 1;
    }

    if (y >= 2)
    {
        y += 1;
    }

    fsx = x;
    fsy = y;
}


function get_coordinate_of_hsst(unsigned int lsx, lsy)
{
    fsy = 52;
    fsx = 51;
}


function get_coordinate_of_dqsl(unsigned int lsx, lsy)
{
    get_normal_coordinate(lsx, lsy);
    get_floorplan_gap_x(gsx);
    fsx = gap_x;
    
    if (lsx < 8)
    {
        fsx = 2;
    }
    else
    {
        fsx = 118;
    }
    
    fsy += 1;//2019-09-21 xuyongji Y coordinate add 1, I do not know how this problem ocurred
    if (lsy == 56 || lsy == 180)
    {
        fsy = fsy + 1;
    }
}


function get_coordinate_of_iockdiv(unsigned int lsx, lsy)
{
    get_normal_coordinate(lsx, lsy);
    get_floorplan_gap_x(gsx);
    fsx = gap_x;
    if (fsy < 59)
    {
        fsy += 6 + gsy % 2 + gsx % 2;
    }
    else
    {
        fsy -= 2 + gsy % 2 + gsx % 2;
    }

    if (fsy >= 2)
    {
        fsy += 1;
    }
}


function get_coordinate_of_iockgate(unsigned int lsx, lsy)
{
    get_normal_coordinate(lsx, lsy);
    get_floorplan_gap_x(gsx);
    fsx = gap_x;
    if (fsy < 59)
    {
        fsy += 5 + gsy % 2 + gsx % 2;
    }
    else
    {
        fsy -= 1 + gsy % 2 + gsx % 2;
    }

    if (fsy >= 2)
    {
        fsy += 1;
    }
}


function get_coordinate_of_iockdly(unsigned int lsx, lsy)
{
    get_normal_coordinate(lsx, lsy);
    get_floorplan_gap_x(gsx);
    fsx = gap_x;

    unsigned int x = fsx, y = fsy, tmp_i = gsx, tmp_j = gsy;

    if (x == 17)
    {
        y += 1 + tmp_j % 4;
    }
    else if (x == 69)
    {
        int tmp = tmp_j % 4;
        if (tmp == 1)
        {
            tmp = 2;
        }
        else if (tmp == 2 || tmp == 3)
        {
            tmp = 1;
        }
        y += tmp;
    }
    else  // if (x == 101)
    {
        if (y < 10)
        {
            int tmp = tmp_j % 4;
            if (tmp == 2)
            {
                tmp = 1;
            }
            else if (tmp == 1)
            {
                tmp = 3;
            }
            else if (tmp == 3)
            {
                x += 1;
            }
            y -= 1 + tmp;
        }
        else if (y < 20)
        {
            y += tmp_j % 4;
        }
        else if (y < 50)
        {
            y += tmp_j % 4;
        }
        else
        {
            int tmp = tmp_j % 4;
            if (tmp == 1)
            {
                tmp = 2;
            }
            else if (tmp == 2 || tmp == 3)
            {
                tmp = 1;
            }
            y += tmp;
        }
    }

    fsx = x;
    fsy = y;

    if (fsy >= 2)
    {
        fsy += 1;
    }
}


function get_coordinate_of_dll(unsigned int lsx, lsy)
{
    get_normal_coordinate(lsx, lsy);
    get_floorplan_gap_x(gsx);
    fsx = gap_x - 1;
    if (fsy >= 2)
    {
        fsy += 1;
    }
}


function get_coordinate_of_crystal(unsigned int lsx, lsy)
{
    get_normal_coordinate(lsx, lsy);
    get_floorplan_gap_x(gsx);
    fsx = gap_x - 1;
    if (fsy >= 2)
    {
        fsy += 1;
    }
}


function get_coordinate_of_rckb(unsigned int lsx, lsy)
{
    get_normal_coordinate(lsx, lsy);
    get_floorplan_gap_x(gsx);
    fsx = gap_x;
    fsy -= 3 + gsy % 4;
    if (fsx > 100 && fsy < 14)
    {
        fsy -= 3;
        if (fsy < 8)
        {
            fsy -= 1;
        }
    }
    if (fsy >= 2)
    {
        fsy += 1;
    }
}


function place_clma_tile_fp(unsigned int tx, ty)
{
    // Site index variable. The X index for logic and GUI are declared separately
    unsigned int lsx, lsy;

    // device reference variables
    &device aRef, fsRef;
    string strVar;
    
    lsx = tx * NUM_GRID_X + 2;
    lsy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
        lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    aRef = <device CLMA @[lsx,lsy] of ARCHITECTURE>;
    sprintf(strVar, "CLMA_%d_%d", lsx, lsy);
    get_coordinate_of_clm(lsx, lsy);
    fsRef = device CLMA ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device CLMA @[lsx,lsy+1] of ARCHITECTURE>;
    sprintf(strVar, "CLMA_%d_%d", lsx, lsy+1);
    get_coordinate_of_clm(lsx, lsy+1);
    fsRef = device CLMA ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);
}


function draw_clma_tile_fp(unsigned int tx, ty)
{
    // Site index variable. The X index for logic and GUI are declared separately
    unsigned int lsx, lsy;

    // device reference variables
    &device aRef, fsRef;
    string strVar;
    
    lsx = tx * NUM_GRID_X + 2;
    lsy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
        lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    sprintf(strVar, "CLMA_%d_%d", lsx, lsy);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_clm(lsx, lsy);
    fsRef = device CLMA ( schematic floorplan_view ) *strVar @[(fsx + 2) * 160, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("CLMA", lsx, lsy);

    sprintf(strVar, "CLMA_%d_%d", lsx, lsy+1);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_clm(lsx, lsy+1);
    fsRef = device CLMA ( schematic floorplan_view ) *strVar @[(fsx + 2) * 160, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("CLMA", lsx, lsy+1);
}


function place_clms_tile_fp(unsigned int tx, ty)
{
    // Site index variable. The X index for logic and GUI are declared separately
    unsigned int lsx, lsy;

    // device reference variables
    &device aRef, fsRef;
    string strVar;
    
    lsx = tx * NUM_GRID_X+2;
    lsy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
        lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    aRef = <device CLMA @[lsx,lsy] of ARCHITECTURE>;
    sprintf(strVar, "CLMA_%d_%d", lsx, lsy);
    get_coordinate_of_clm(lsx, lsy);
    fsRef = device CLMA ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device CLMS @[lsx,lsy+1] of ARCHITECTURE>;
    sprintf(strVar, "CLMS_%d_%d", lsx, lsy+1);
    get_coordinate_of_clm(lsx, lsy+1);
    fsRef = device CLMS ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);
}


function draw_clms_tile_fp(unsigned int tx, ty)
{
    // Site index variable. The X index for logic and GUI are declared separately
    unsigned int lsx, lsy;

    // device reference variables
    &device aRef, fsRef;
    string strVar;
    
    lsx = tx * NUM_GRID_X+2;
    lsy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
        lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    sprintf(strVar, "CLMA_%d_%d", lsx, lsy);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_clm(lsx, lsy);
    fsRef = device CLMA ( schematic floorplan_view ) *strVar @[(fsx + 2) * 160, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("CLMA", lsx, lsy);

    sprintf(strVar, "CLMS_%d_%d", lsx, lsy+1);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_clm(lsx, lsy+1);
    fsRef = device CLMS ( schematic floorplan_view ) *strVar @[(fsx + 2) * 160, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("CLMS", lsx, lsy+1);
}

function place_ccs_tile_fp(unsigned int tx, ty)
{   
    unsigned int lsx, lsy;

    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;

    // device reference variables
    &device aRef, fsRef;
    string strVar;

    aRef = <device FUSECODE @[lsx,lsy+1] of ARCHITECTURE>;
    sprintf(strVar, "FUSECODE_%d_%d", lsx, lsy+1);
    get_normal_coordinate(lsx, lsy+1);
    fsx = 115;
    fsy += 1;
    fsRef = device FUSECODE ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device START @[lsx,lsy+2] of ARCHITECTURE>;
    sprintf(strVar, "START_%d_%d", lsx, lsy+2);
    get_normal_coordinate(lsx, lsy+2);
    fsx = 116;
    fsy += 1;
    fsRef = device START ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device IPAL @[lsx,lsy+3] of ARCHITECTURE>;
    sprintf(strVar, "IPAL_%d_%d", lsx, lsy+3);
    get_normal_coordinate(lsx, lsy+3);
    fsx = 116;
    fsy += 2;
    fsRef = device IPAL ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device SCANCHAIN @[lsx+1,lsy] of ARCHITECTURE>;
    sprintf(strVar, "SCANCHAIN_%d_%d", lsx+1, lsy);
    get_normal_coordinate(lsx+1, lsy);
    fsx = 117;
    fsy += 1;
    fsRef = device SCANCHAIN ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device SCANCHAIN @[lsx+1,lsy+1] of ARCHITECTURE>;
    sprintf(strVar, "SCANCHAIN_%d_%d", lsx+1, lsy+1);
    get_normal_coordinate(lsx+1, lsy+1);
    fsx = 117;
    fsy += 2;
    fsRef = device SCANCHAIN ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device UDID @[lsx+1,lsy+2] of ARCHITECTURE>;
    sprintf(strVar, "UDID_%d_%d", lsx+1, lsy+2);
    get_normal_coordinate(lsx+1, lsy+2);
    fsx = 118;
    fsy += 1;
    fsRef = device UDID ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device OSC @[lsx+1,lsy+3] of ARCHITECTURE>;
    sprintf(strVar, "OSC_%d_%d", lsx+1, lsy+3);
    get_normal_coordinate(lsx+1, lsy+3);
    fsx = 119;
    fsy += 1;
    fsRef = device OSC ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);
}

function draw_ccs_tile_fp(unsigned int tx, ty)
{
    unsigned int lsx, lsy;

    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;

    // device reference variables
    &device aRef, fsRef;
    string strVar;

    sprintf(strVar, "FUSECODE_%d_%d", lsx, lsy+1);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_normal_coordinate(lsx, lsy+1);
    fsx = 115;
    fsy += 1;
    fsRef = device FUSECODE ( symbol fpsym ) *strVar @[(fsx + 5) * 160, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("FUSECODE", lsx, lsy+1);

    sprintf(strVar, "START_%d_%d", lsx, lsy+2);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_normal_coordinate(lsx, lsy+2);
    fsx = 116;
    fsy += 1;
    fsRef = device START ( symbol fpsym ) *strVar @[(fsx + 5) * 160, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("START", lsx, lsy+2);

    sprintf(strVar, "IPAL_%d_%d", lsx, lsy+3);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_normal_coordinate(lsx, lsy+3);
    fsx = 116;
    fsy += 2;
    fsRef = device IPAL ( symbol fpsym ) *strVar @[(fsx + 5) * 160, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("IPAL", lsx, lsy+3);

    sprintf(strVar, "SCANCHAIN_%d_%d", lsx+1, lsy);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_normal_coordinate(lsx+1, lsy);
    fsx = 117;
    fsy += 1;
    fsRef = device SCANCHAIN ( symbol fpsym ) *strVar @[(fsx + 5) * 160, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("SCANCHAIN", lsx+1, lsy);

    sprintf(strVar, "SCANCHAIN_%d_%d", lsx+1, lsy+1);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_normal_coordinate(lsx+1, lsy+1);
    fsx = 117;
    fsy += 2;
    fsRef = device SCANCHAIN ( symbol fpsym ) *strVar @[(fsx + 5) * 160, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("SCANCHAIN", lsx+1, lsy+1);

    sprintf(strVar, "UDID_%d_%d", lsx+1, lsy+2);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_normal_coordinate(lsx+1, lsy+2);
    fsx = 118;
    fsy += 1;
    fsRef = device UDID ( symbol fpsym ) *strVar @[(fsx + 5) * 160, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("UDID", lsx+1, lsy+2);

    sprintf(strVar, "OSC_%d_%d", lsx+1, lsy+3);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_normal_coordinate(lsx+1, lsy+3);
    fsx = 118;
    fsy += 2;
    fsRef = device OSC ( symbol fpsym ) *strVar @[(fsx + 5) * 160, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("OSC", lsx+1, lsy+3);
}


function place_drm_tile_fp(unsigned int tx, ty)
{
    unsigned int lsx, lsy;
    
    lsx = tx * NUM_GRID_X + 2;
    lsy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
        lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    // device reference variables
    &device aRef, fsRef;
    string strVar;

    aRef = <device DRM @[lsx,lsy] of ARCHITECTURE>;
    sprintf(strVar, "DRM_%d_%d", lsx, lsy);
    get_coordinate_of_apmdrmpll(lsx, lsy);
    fsRef = device DRM ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);
}


function draw_drm_tile_fp(unsigned int tx, ty)
{   
    unsigned int lsx, lsy;
    
    lsx = tx * NUM_GRID_X + 2;
    lsy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
        lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    // device reference variables
    &device aRef, fsRef;
    string strVar;

    sprintf(strVar, "DRM_%d_%d", lsx, lsy);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_apmdrmpll(lsx, lsy);
    fsRef = device DRM ( schematic floorplan_view ) *strVar @[(fsx + 2) * 160, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("DRM", lsx, lsy);
}


function place_apm_tile_fp(unsigned int tx, ty)
{
    unsigned int lsx, lsy, gsx, gsy;
    
    lsx = tx * NUM_GRID_X + 2;
    lsy = ty * NUM_GRID_Y;

    // device reference variables
    &device aRef, fsRef;
    string strVar;

    aRef = <device APM @[lsx,lsy] of ARCHITECTURE>;
    sprintf(strVar, "APM_%d_%d", lsx, lsy);
    get_coordinate_of_apmdrmpll(lsx, lsy);
    fsRef = device APM ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);
}


function draw_apm_tile_fp(unsigned int tx, ty)
{
    unsigned int lsx, lsy, gsx, gsy;
    
    lsx = tx * NUM_GRID_X + 2;
    lsy = ty * NUM_GRID_Y;

    // device reference variables
    &device aRef, fsRef;
    string strVar;

    sprintf(strVar, "APM_%d_%d", lsx, lsy);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_apmdrmpll(lsx, lsy);
    fsRef = device APM ( schematic floorplan_view ) *strVar @[(fsx + 2) * 160, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("APM", lsx, lsy);
}


function place_pll_tile_fp(unsigned int tx, ty, flag)
{
    unsigned int lsx, lsy;
    
    lsx = tx * NUM_GRID_X + 2;
    lsy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    // device reference variables
    &device aRef, fsRef;
    string strVar;

    aRef = <device PLL @[lsx,lsy+7] of ARCHITECTURE>;
    sprintf(strVar, "PLL_%d_%d", lsx, lsy+7);
    get_coordinate_of_apmdrmpll(lsx, lsy+7);
    fsRef = device PLL ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);
}

function draw_pll_tile_fp(unsigned int tx, ty, flag)
{
    unsigned int lsx, lsy;
    
    lsx = tx * NUM_GRID_X + 2;
    lsy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    // device reference variables
    &device aRef, fsRef;
    string strVar;

    sprintf(strVar, "PLL_%d_%d", lsx, lsy+7);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_apmdrmpll(lsx, lsy+7);
    fsRef = device PLL ( symbol fpsym ) *strVar @[(fsx + 1) * 160, fsy * 320];
    map(fsRef => aRef);
    print_inst_fp_map("PLL", lsx, lsy+7);
}


function place_uscm_tile_fp(unsigned int tx, ty)
{
    unsigned int lsx, lsy;
    
    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;

    // device reference variables
    &device aRef, fsRef;
    string strVar;

    unsigned int uscm_y_idxs[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};

    unsigned int dx = 0, dy = 0;

    foreach dy (uscm_y_idxs)
    {
        aRef = <device USCM @[lsx+dx,lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "USCM_%d_%d", lsx+dx, lsy+dy);
        get_coordinate_of_uscm(lsx+dx, lsy+dy);
        fsRef = device USCM ( structure fp_struct ) *strVar @[fsx,fsy];
        map(fsRef => aRef);
    }
}

function draw_uscm_tile_fp(unsigned int tx, ty)
{
    unsigned int lsx, lsy;
    
    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;

    // device reference variables
    &device aRef, fsRef;
    string strVar;

    unsigned int uscm_y_idxs[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};

    unsigned int dx = 0, dy = 0;

    foreach dy (uscm_y_idxs)
    {
        sprintf(strVar, "USCM_%d_%d", lsx+dx, lsy+dy);
        aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
        get_coordinate_of_uscm(lsx+dx, lsy+dy);
        fsRef = device USCM ( symbol fpsym ) *strVar @[(fsx + 2) * 160 + 60, (fsy + 2) * 320];
        map(fsRef => aRef);
        print_inst_fp_map("USCM", lsx+dx, lsy+dy);
    }
}


function place_iol_tile_ud_fp(unsigned int tx, ty, ud)
{
    unsigned int lsx, lsy;
    
    lsx = tx * NUM_GRID_X + 2;
    lsy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
        lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    // device reference variables
    &device aRef, fsRef;
    string strVar;

    aRef = <device IOL @[lsx+1,lsy+1] of ARCHITECTURE>;
    sprintf(strVar, "IOL_%d_%d", lsx+1, lsy+1);
    get_coordinate_of_iol(lsx+1, lsy+1);
    fsRef = device IOL ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device IOL @[lsx+1,lsy+2] of ARCHITECTURE>;
    sprintf(strVar, "IOL_%d_%d", lsx+1, lsy+2);
    get_coordinate_of_iol(lsx+1, lsy+2);
    fsRef = device IOL ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);
}


function draw_iol_tile_ud_fp(unsigned int tx, ty, ud)
{
    unsigned int lsx, lsy;
    
    lsx = tx * NUM_GRID_X + 2;
    lsy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
        lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    // device reference variables
    &device aRef, fsRef;
    string strVar;

    sprintf(strVar, "IOL_%d_%d", lsx+1, lsy+1);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_iol(lsx+1, lsy+1);
    if (ud == 1)
    {
        fsRef = device IOL ( schematic floorplan_view ) *strVar @[(fsx + 2) * 160, (fsy + 2) * 320];
    }
    else
    {
        fsRef = device IOL ( schematic floorplan_view ) *strVar @[(fsx + 2) * 160, (fsy + 1) * 320];
    }
    map(fsRef => aRef);
    print_inst_fp_map("IOL", lsx+1, lsy+1);

    sprintf(strVar, "IOL_%d_%d", lsx+1, lsy+2);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_iol(lsx+1, lsy+2);
    if (ud == 1)
    {
        fsRef = device IOL ( schematic floorplan_view ) *strVar @[(fsx + 2) * 160, (fsy + 2) * 320];
    }
    else
    {
        fsRef = device IOL ( schematic floorplan_view ) *strVar @[(fsx + 2) * 160, (fsy + 1) * 320];
    }
    map(fsRef => aRef);
    print_inst_fp_map("IOL", lsx+1, lsy+2);
}


function place_iol_tile_fp(unsigned int tx, ty)
{
    unsigned int lsx, lsy, gsx, gsy;
    
    lsx = tx * NUM_GRID_X + 2;
    lsy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
        lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    // device reference variables
    &device aRef, fsRef;
    string strVar;

    aRef = <device IOL @[lsx+1,lsy+1] of ARCHITECTURE>;
    sprintf(strVar, "IOL_%d_%d", lsx+1, lsy+1);
    get_coordinate_of_iol(lsx+1, lsy+1);
    fsRef = device IOL ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device IOL @[lsx+1,lsy+2] of ARCHITECTURE>;
    sprintf(strVar, "IOL_%d_%d", lsx+1, lsy+2);
    get_coordinate_of_iol(lsx+1, lsy+2);
    fsRef = device IOL ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);
}


function draw_iol_tile_fp(unsigned int tx, ty)
{
    unsigned int lsx, lsy, gsx, gsy;
    
    lsx = tx * NUM_GRID_X + 2;
    lsy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
        lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    // device reference variables
    &device aRef, fsRef;
    string strVar;

    sprintf(strVar, "IOL_%d_%d", lsx+1, lsy+1);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_iol(lsx+1, lsy+1);
    if (fsx >= 115)
    {
        fsRef = device IOL ( schematic floorplan_view ) *strVar @[(fsx + 3) * 160, (fsy + 1) * 320];
    }
    else
    {
        fsRef = device IOL ( schematic floorplan_view ) *strVar @[(fsx + 1) * 160, (fsy + 1) * 320];
    }
    map(fsRef => aRef);
    print_inst_fp_map("IOL", lsx+1, lsy+1);

    sprintf(strVar, "IOL_%d_%d", lsx+1, lsy+2);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_iol(lsx+1, lsy+2);
    if (fsx >= 115)
    {
        fsRef = device IOL ( schematic floorplan_view ) *strVar @[(fsx + 3) * 160, (fsy + 1) * 320];
    }
    else
    {
        fsRef = device IOL ( schematic floorplan_view ) *strVar @[(fsx + 1) * 160, (fsy + 1) * 320];
    }
    map(fsRef => aRef);
    print_inst_fp_map("IOL", lsx+1, lsy+2);
}


function place_iockgatedll_tile_fp(unsigned int tx, ty)
{
    unsigned int lsx, lsy;

    lsx = tx * NUM_GRID_X + 2;
    lsy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    // device reference variables
    &device aRef, fsRef;
    string strVar;

    aRef = <device IOCKDLY @[lsx,lsy+4] of ARCHITECTURE>;
    sprintf(strVar, "IOCKDLY_%d_%d", lsx, lsy+4);
    get_coordinate_of_iockdly(lsx, lsy+4);
    fsRef = device IOCKDLY ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device IOCKDLY @[lsx,lsy+5] of ARCHITECTURE>;
    sprintf(strVar, "IOCKDLY_%d_%d", lsx, lsy+5);
    get_coordinate_of_iockdly(lsx, lsy+5);
    fsRef = device IOCKDLY ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device IOCKGATE @[lsx,lsy+1] of ARCHITECTURE>;
    sprintf(strVar, "IOCKGATE_%d_%d", lsx, lsy+1);
    get_coordinate_of_iockgate(lsx, lsy+1);
    fsRef = device IOCKGATE ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device IOCKDIV @[lsx,lsy+9] of ARCHITECTURE>;
    sprintf(strVar, "IOCKDIV_%d_%d", lsx, lsy+9);
    get_coordinate_of_iockdiv(lsx, lsy+9);
    fsRef = device IOCKDIV ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device IOCKDLY @[lsx,lsy+6] of ARCHITECTURE>;
    sprintf(strVar, "IOCKDLY_%d_%d", lsx, lsy+6);
    get_coordinate_of_iockdly(lsx, lsy+6);
    fsRef = device IOCKDLY ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device IOCKDLY @[lsx,lsy+7] of ARCHITECTURE>;
    sprintf(strVar, "IOCKDLY_%d_%d", lsx, lsy+7);
    get_coordinate_of_iockdly(lsx, lsy+7);
    fsRef = device IOCKDLY ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device IOCKGATE @[lsx,lsy] of ARCHITECTURE>;
    sprintf(strVar, "IOCKGATE_%d_%d", lsx, lsy);
    get_coordinate_of_iockgate(lsx, lsy);
    fsRef = device IOCKGATE ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device IOCKDIV @[lsx,lsy+8] of ARCHITECTURE>;
    sprintf(strVar, "IOCKDIV_%d_%d", lsx, lsy+8);
    get_coordinate_of_iockdiv(lsx, lsy+8);
    fsRef = device IOCKDIV ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device DLL @[lsx+1,lsy+3] of ARCHITECTURE>;
    sprintf(strVar, "DLL_%d_%d", lsx+1, lsy+3);
    get_coordinate_of_dll(lsx+1, lsy+3);
    fsRef = device DLL ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device RCKB @[lsx+1,lsy+4] of ARCHITECTURE>;
    sprintf(strVar, "RCKB_%d_%d", lsx+1, lsy+4);
    get_coordinate_of_rckb(lsx+1, lsy+4);
    fsRef = device RCKB ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device RCKB @[lsx+1,lsy+5] of ARCHITECTURE>;
    sprintf(strVar, "RCKB_%d_%d", lsx+1, lsy+5);
    get_coordinate_of_rckb(lsx+1, lsy+5);
    fsRef = device RCKB ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device RCKB @[lsx+1,lsy+6] of ARCHITECTURE>;
    sprintf(strVar, "RCKB_%d_%d", lsx+1, lsy+6);
    get_coordinate_of_rckb(lsx+1, lsy+6);
    fsRef = device RCKB ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device RCKB @[lsx+1,lsy+7] of ARCHITECTURE>;
    sprintf(strVar, "RCKB_%d_%d", lsx+1, lsy+7);
    get_coordinate_of_rckb(lsx+1, lsy+7);
    fsRef = device RCKB ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);
}


function draw_iockgatedll_tile_fp(unsigned int tx, ty)
{
    unsigned int lsx, lsy;

    lsx = tx * NUM_GRID_X + 2;
    lsy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    // device reference variables
    &device aRef, fsRef;
    string strVar;

    sprintf(strVar, "IOCKDLY_%d_%d", lsx, lsy+4);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_iockdly(lsx, lsy+4);
    fsRef = device IOCKDLY ( symbol fpsym ) *strVar @[(fsx + 2) * 160 + 60, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("IOCKDLY", lsx, lsy+4);

    sprintf(strVar, "IOCKDLY_%d_%d", lsx, lsy+5);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_iockdly(lsx, lsy+5);
    fsRef = device IOCKDLY ( symbol fpsym ) *strVar @[(fsx + 2) * 160 + 60, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("IOCKDLY", lsx, lsy+5);

    sprintf(strVar, "IOCKGATE_%d_%d", lsx, lsy+1);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_iockgate(lsx, lsy+1);
    fsRef = device IOCKGATE ( symbol fpsym ) *strVar @[(fsx + 2) * 160 + 60, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("IOCKGATE", lsx, lsy+1);

    sprintf(strVar, "IOCKDIV_%d_%d", lsx, lsy+9);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_iockdiv(lsx, lsy+9);
    fsRef = device IOCKDIV ( symbol fpsym ) *strVar @[(fsx + 2) * 160 + 60, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("IOCKDIV", lsx, lsy+9);

    sprintf(strVar, "IOCKDLY_%d_%d", lsx, lsy+6);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_iockdly(lsx, lsy+6);
    fsRef = device IOCKDLY ( symbol fpsym ) *strVar @[(fsx + 2) * 160 + 60, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("IOCKDLY", lsx, lsy+6);

    sprintf(strVar, "IOCKDLY_%d_%d", lsx, lsy+7);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_iockdly(lsx, lsy+7);
    fsRef = device IOCKDLY ( symbol fpsym ) *strVar @[(fsx + 2) * 160 + 60, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("IOCKDLY", lsx, lsy+7);

    sprintf(strVar, "IOCKGATE_%d_%d", lsx, lsy);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_iockgate(lsx, lsy);
    fsRef = device IOCKGATE ( symbol fpsym ) *strVar @[(fsx + 2) * 160 + 60, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("IOCKGATE", lsx, lsy);

    sprintf(strVar, "IOCKDIV_%d_%d", lsx, lsy+8);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_iockdiv(lsx, lsy+8);
    fsRef = device IOCKDIV ( symbol fpsym ) *strVar @[(fsx + 2) * 160 + 60, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("IOCKDIV", lsx, lsy+8);

    sprintf(strVar, "DLL_%d_%d", lsx+1, lsy+3);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_dll(lsx+1, lsy+3);
    fsRef = device DLL ( symbol fpsym ) *strVar @[(fsx + 3) * 160 + 50, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("DLL", lsx+1, lsy+3);

    sprintf(strVar, "RCKB_%d_%d", lsx+1, lsy+4);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_rckb(lsx+1, lsy+4);
    fsRef = device RCKB ( symbol fpsym ) *strVar @[(fsx + 2) * 160 + 60, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("RCKB", lsx+1, lsy+4);

    sprintf(strVar, "RCKB_%d_%d", lsx+1, lsy+5);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_rckb(lsx+1, lsy+5);
    fsRef = device RCKB ( symbol fpsym ) *strVar @[(fsx + 2) * 160 + 60, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("RCKB", lsx+1, lsy+5);

    sprintf(strVar, "RCKB_%d_%d", lsx+1, lsy+6);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_rckb(lsx+1, lsy+6);
    fsRef = device RCKB ( symbol fpsym ) *strVar @[(fsx + 2) * 160 + 60, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("RCKB", lsx+1, lsy+6);

    sprintf(strVar, "RCKB_%d_%d", lsx+1, lsy+7);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_rckb(lsx+1, lsy+7);
    fsRef = device RCKB ( symbol fpsym ) *strVar @[(fsx + 2) * 160 + 60, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("RCKB", lsx+1, lsy+7);
}


function place_iockdll_tile_fp(unsigned int tx, ty, tx_iockdll, ty_iockdll)
{
    unsigned int lsx, lsy;

    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    // device reference variables
    &device aRef, fsRef;
    string strVar;

    aRef = <device IOCKDLY @[lsx,lsy] of ARCHITECTURE>;
    sprintf(strVar, "IOCKDLY_%d_%d", lsx, lsy);
    get_coordinate_of_iockdly(lsx, lsy);
    fsRef = device IOCKDLY ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device IOCKDLY @[lsx,lsy+2] of ARCHITECTURE>;
    sprintf(strVar, "IOCKDLY_%d_%d", lsx, lsy+2);
    get_coordinate_of_iockdly(lsx, lsy+2);
    fsRef = device IOCKDLY ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device IOCKGATE @[lsx+1,lsy] of ARCHITECTURE>;
    sprintf(strVar, "IOCKGATE_%d_%d", lsx+1, lsy);
    get_coordinate_of_iockgate(lsx+1, lsy);
    fsRef = device IOCKGATE ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device IOCKDIV @[lsx+1,lsy+1] of ARCHITECTURE>;
    sprintf(strVar, "IOCKDIV_%d_%d", lsx+1, lsy+1);
    get_coordinate_of_iockdiv(lsx+1, lsy+1);
    fsRef = device IOCKDIV ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device IOCKDLY @[lsx+1,lsy+5] of ARCHITECTURE>;
    sprintf(strVar, "IOCKDLY_%d_%d", lsx+1, lsy+5);
    get_coordinate_of_iockdly(lsx+1, lsy+5);
    fsRef = device IOCKDLY ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device IOCKDLY @[lsx+1,lsy+7] of ARCHITECTURE>;
    sprintf(strVar, "IOCKDLY_%d_%d", lsx+1, lsy+7);
    get_coordinate_of_iockdly(lsx+1, lsy+7);
    fsRef = device IOCKDLY ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device IOCKGATE @[lsx+2,lsy] of ARCHITECTURE>;
    sprintf(strVar, "IOCKGATE_%d_%d", lsx+2, lsy);
    get_coordinate_of_iockgate(lsx+2, lsy);
    fsRef = device IOCKGATE ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device IOCKDIV @[lsx+2,lsy+1] of ARCHITECTURE>;
    sprintf(strVar, "IOCKDIV_%d_%d", lsx+2, lsy+1);
    get_coordinate_of_iockdiv(lsx+2, lsy+1);
    fsRef = device IOCKDIV ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);

    aRef = <device DLL @[lsx+2,lsy+3] of ARCHITECTURE>;
    sprintf(strVar, "DLL_%d_%d", lsx+2, lsy+3);
    get_coordinate_of_dll(lsx+2, lsy+3);
    fsRef = device DLL ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);
}

function draw_iockdll_tile_fp(unsigned int tx, ty, tx_iockdll, ty_iockdll)
{
    unsigned int lsx, lsy;

    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    // device reference variables
    &device aRef, fsRef;
    string strVar;

    sprintf(strVar, "IOCKDLY_%d_%d", lsx, lsy);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_iockdly(lsx, lsy);
    fsRef = device IOCKDLY ( symbol fpsym ) *strVar @[(fsx + 2) * 160 + 60, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("IOCKDLY", lsx, lsy);

    sprintf(strVar, "IOCKDLY_%d_%d", lsx, lsy+2);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_iockdly(lsx, lsy+2);
    fsRef = device IOCKDLY ( symbol fpsym ) *strVar @[(fsx + 2) * 160 + 60, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("IOCKDLY", lsx, lsy+2);

    sprintf(strVar, "IOCKGATE_%d_%d", lsx+1, lsy);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_iockgate(lsx+1, lsy);
    fsRef = device IOCKGATE ( symbol fpsym ) *strVar @[(fsx + 2) * 160 + 60, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("IOCKGATE", lsx+1, lsy);

    sprintf(strVar, "IOCKDIV_%d_%d", lsx+1, lsy+1);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_iockdiv(lsx+1, lsy+1);
    fsRef = device IOCKDIV ( symbol fpsym ) *strVar @[(fsx + 2) * 160 + 60, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("IOCKDIV", lsx+1, lsy+1);

    sprintf(strVar, "IOCKDLY_%d_%d", lsx+1, lsy+5);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_iockdly(lsx+1, lsy+5);
    fsRef = device IOCKDLY ( symbol fpsym ) *strVar @[(fsx + 2) * 160 + 60, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("IOCKDLY", lsx+1, lsy+5);

    sprintf(strVar, "IOCKDLY_%d_%d", lsx+1, lsy+7);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_iockdly(lsx+1, lsy+7);
    fsRef = device IOCKDLY ( symbol fpsym ) *strVar @[(fsx + 2) * 160 + 60, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("IOCKDLY", lsx+1, lsy+7);

    sprintf(strVar, "IOCKGATE_%d_%d", lsx+2, lsy);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_iockgate(lsx+2, lsy);
    fsRef = device IOCKGATE ( symbol fpsym ) *strVar @[(fsx + 2) * 160 + 60, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("IOCKGATE", lsx+2, lsy);

    sprintf(strVar, "IOCKDIV_%d_%d", lsx+2, lsy+1);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_iockdiv(lsx+2, lsy+1);
    fsRef = device IOCKDIV ( symbol fpsym ) *strVar @[(fsx + 2) * 160 + 60, (fsy + 1) * 320];
    map(fsRef => aRef);
    print_inst_fp_map("IOCKDIV", lsx+2, lsy+1);

    sprintf(strVar, "DLL_%d_%d", lsx+2, lsy+3);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_dll(lsx+2, lsy+3);
    fsRef = device DLL ( symbol fpsym ) *strVar @[(fsx + 3) * 160 + 50, (fsy + 1) * 320 + 90];
    map(fsRef => aRef);
    print_inst_fp_map("DLL", lsx+2, lsy+3);
}


function place_hsst_tile_fp(unsigned int tx, ty)
{
    unsigned int lsx, lsy;
    
    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;

    // device reference variables
    &device aRef, fsRef;
    string strVar;

    aRef = <device HSST @[lsx,lsy] of ARCHITECTURE>;
    sprintf(strVar, "HSST_%d_%d", lsx, lsy);
    get_coordinate_of_hsst(lsx, lsy);
    fsRef = device HSST ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);
}

function draw_hsst_tile_fp(unsigned int tx, ty)
{
    unsigned int lsx, lsy;
    
    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;

    // device reference variables
    &device aRef, fsRef;
    string strVar;
    
    sprintf(strVar, "HSST_%d_%d", lsx, lsy);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_hsst(lsx, lsy);
    fsRef = device HSST ( symbol fpsym ) *strVar @[(fsx - 21) * 160, (fsy + 2) * 320 + 20];
    map(fsRef => aRef);
    print_inst_fp_map("HSST", lsx, lsy);
}

function place_dqsl_tile_fp (unsigned int tx, ty, flag)
{
    unsigned int lsx, lsy;

    lsx = tx * NUM_GRID_X+2;
    lsy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
        lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    // device reference variables
    &device aRef, fsRef;
    string strVar;

    aRef = <device DQSL @[lsx,lsy] of ARCHITECTURE>;
    sprintf(strVar, "DQSL_%d_%d", lsx, lsy);
    get_coordinate_of_dqsl(lsx, lsy);
    //printf("Floorplan coordinate: %s: %d, %d.", strVar, fsx, fsy);
    fsRef = device DQSL ( structure fp_struct ) *strVar @[fsx,fsy];
    map(fsRef => aRef);
}

function draw_dqsl_tile_fp (unsigned int tx, ty, flag)
{
    unsigned int lsx, lsy;

    lsx = tx * NUM_GRID_X+2;
    lsy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
        lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    // device reference variables
    &device aRef, fsRef;
    string strVar;

    sprintf(strVar, "DQSL_%d_%d", lsx, lsy);
    aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
    get_coordinate_of_dqsl(lsx, lsy);
    if (fsx < 30)
    {
        fsRef = device DQSL ( symbol fpsym ) *strVar @[(fsx + 4) * 160 - 80, (fsy + 2) * 320];
    }
    else
    {
        fsRef = device DQSL ( symbol fpsym ) *strVar @[(fsx + 1) * 160 - 80, (fsy + 2) * 320];
    }
    map(fsRef => aRef);
    print_inst_fp_map("DQSL", lsx, lsy);
}


function place_iob_tile_u_fp (unsigned int tx, ty)
{
    unsigned int lsx, lsy;

    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty; temp_ty > MID_TILE_REGION; temp_ty = temp_ty - NUM_TILES_REGION)
    {
        lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    unsigned int dx, dy;
    unsigned int d_tx, d_tx_l;
    // device reference variables
    &device aRef, fsRef;
    string strVar;

    unsigned int crystal_y = 1;
    unsigned int crystal_x[] = {136};

    foreach dx (crystal_x) {
        dy = crystal_y;
        aRef = <device CRYSTAL @[lsx+dx,lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CRYSTAL_%d_%d", lsx+dx, lsy+dy);
        get_coordinate_of_crystal(lsx+dx, lsy+dy);
        fsRef = device CRYSTAL ( structure fp_struct ) *strVar @[fsx,fsy];
        map(fsRef => aRef);
    }

    unsigned int iobs_y = 0;
    unsigned int iobs_x[] = {205, 213, 217, 13, 17, 29, 37, 41, 185, 189};
    foreach dx (iobs_x) {
        dy = iobs_y;
        aRef = <device IOBS @[lsx+dx,lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
        get_coordinate_of_iob(lsx+dx, lsy+dy);
        fsRef = device IOBS ( structure fp_struct ) *strVar @[fsx,fsy];
        map(fsRef => aRef);
    }

    unsigned int iobr_y = 0;
    unsigned int iobr_x[] = {193, 9};
    foreach dx (iobr_x) {
        dy = iobr_y;
        aRef = <device IOBR @[lsx+dx,lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOBR_%d_%d", lsx+dx, lsy+dy);
        get_coordinate_of_iob(lsx+dx, lsy+dy);
        fsRef = device IOBR ( structure fp_struct ) *strVar @[fsx,fsy];
        map(fsRef => aRef);
    }

    unsigned int iobd_y = 0;
    unsigned int iobd_x[] = {8, 192, 12, 16, 28, 36, 40, 184, 188, 204, 212, 216};
    foreach dx (iobd_x) {
        dy = iobd_y;
        aRef = <device IOBD @[lsx+dx,lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOBD_%d_%d", lsx+dx, lsy+dy);
        get_coordinate_of_iob(lsx+dx, lsy+dy);
        fsRef = device IOBD ( structure fp_struct ) *strVar @[fsx,fsy];
        map(fsRef => aRef);
    }
}

function draw_iob_tile_u_fp (unsigned int tx, ty)
{
    unsigned int lsx, lsy;

    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty; temp_ty > MID_TILE_REGION; temp_ty = temp_ty - NUM_TILES_REGION)
    {
        lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    unsigned int dx, dy;
    unsigned int d_tx, d_tx_l;
    // device reference variables
    &device aRef, fsRef;
    string strVar;

    unsigned int crystal_y = 1;
    unsigned int crystal_x[] = {136};

    foreach dx (crystal_x) {
        dy = crystal_y;
        sprintf(strVar, "CRYSTAL_%d_%d", lsx+dx, lsy+dy);
        aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
        get_coordinate_of_crystal(lsx+dx, lsy+dy);
        fsRef = device CRYSTAL ( symbol fpsym ) *strVar @[(fsx + 3) * 160, (fsy + 2) * 320];
        map(fsRef => aRef);
        print_inst_fp_map("CRYSTAL", lsx+dx, lsy+dy);
    }

    unsigned int iobs_y = 0;
    unsigned int iobs_x[] = {205, 213, 217, 13, 17, 29, 37, 41, 185, 189};
    foreach dx (iobs_x) {
        dy = iobs_y;
        sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
        aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
        get_coordinate_of_iob(lsx+dx, lsy+dy);
        fsRef = device IOBS ( schematic floorplan_view ) *strVar @[(fsx + 2) * 160, (fsy + 2) * 320];
        map(fsRef => aRef);
        print_inst_fp_map("IOBS", lsx+dx, lsy+dy);
    }

    unsigned int iobr_y = 0;
    unsigned int iobr_x[] = {193, 9};
    foreach dx (iobr_x) {
        dy = iobr_y;
        sprintf(strVar, "IOBR_%d_%d", lsx+dx, lsy+dy);
        aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
        get_coordinate_of_iob(lsx+dx, lsy+dy);
        fsRef = device IOBR ( schematic floorplan_view ) *strVar @[(fsx + 2) * 160, (fsy + 2) * 320];
        map(fsRef => aRef);
        print_inst_fp_map("IOBR", lsx+dx, lsy+dy);
    }

    unsigned int iobd_y = 0;
    unsigned int iobd_x[] = {8, 192, 12, 16, 28, 36, 40, 184, 188, 204, 212, 216};
    foreach dx (iobd_x) {
        dy = iobd_y;
        sprintf(strVar, "IOBD_%d_%d", lsx+dx, lsy+dy);
        aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
        get_coordinate_of_iob(lsx+dx, lsy+dy);
        fsRef = device IOBD ( schematic floorplan_view ) *strVar @[(fsx + 2) * 160, (fsy + 2) * 320];
        map(fsRef => aRef);
        print_inst_fp_map("IOBD", lsx+dx, lsy+dy);
    }
}


function place_iob_tile_d_fp(unsigned int tx, ty)
{
    unsigned int lsx, lsy, gsx, gsy;

    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty; temp_ty > MID_TILE_REGION; temp_ty = temp_ty - NUM_TILES_REGION)
    {
        lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    unsigned int dx, dy;
    unsigned int d_tx, d_tx_l;
    // device reference variables
    &device aRef, fsRef;
    string strVar;

    unsigned int crystal_y = 1;
    unsigned int crystal_x[] = {134};

    foreach dx (crystal_x) {
        dy = crystal_y;
        aRef = <device CRYSTAL @[lsx+dx,lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CRYSTAL_%d_%d", lsx+dx, lsy+dy);
        get_coordinate_of_crystal(lsx+dx, lsy+dy);
        fsRef = device CRYSTAL ( structure fp_struct ) *strVar @[fsx,fsy];
        map(fsRef => aRef);
    }

    unsigned int iobs_y = 0;
    unsigned int iobs_x[] = {184, 188, 196, 204, 208, 212, 216, 220, 224, 120, 124, 136, 140, 144, 152, 156, 168, 172,
        116, 72, 80, 84, 88, 100, 104, 0, 4, 8, 12, 16, 20, 28, 36, 40, 52, 56, 60};
    foreach dx (iobs_x) {
        dy = iobs_y;
        aRef = <device IOBS @[lsx+dx,lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
        get_coordinate_of_iob(lsx+dx, lsy+dy);
        fsRef = device IOBS ( structure fp_struct ) *strVar @[fsx,fsy];
        map(fsRef => aRef);
    }

    unsigned int iobr_y = 0;
    unsigned int iobr_x[] = {176, 68, 112};
    foreach dx (iobr_x) {
        dy = iobr_y;
        aRef = <device IOBR @[lsx+dx,lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOBR_%d_%d", lsx+dx, lsy+dy);
        get_coordinate_of_iob(lsx+dx, lsy+dy);
        fsRef = device IOBR ( structure fp_struct ) *strVar @[fsx,fsy];
        map(fsRef => aRef);
    }

    unsigned int iobd_y = 0;
    unsigned int iobd_x[] = {185, 189, 197, 205, 209, 213, 217, 221, 225, 177, 121, 125, 137, 141, 145, 153, 157, 169, 173, 117, 113,
        73, 81, 85, 89, 101, 105, 69, 1, 5, 9, 13, 17, 21, 29, 37, 41, 53, 57, 61};
    foreach dx (iobd_x) {
        dy = iobd_y;
        aRef = <device IOBD @[lsx+dx,lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOBD_%d_%d", lsx+dx, lsy+dy);
        get_coordinate_of_iob(lsx+dx, lsy+dy);
        fsRef = device IOBD ( structure fp_struct ) *strVar @[fsx,fsy];
        map(fsRef => aRef);
    }
}

function draw_iob_tile_d_fp(unsigned int tx, ty)
{
    unsigned int lsx, lsy, gsx, gsy;

    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty; temp_ty > MID_TILE_REGION; temp_ty = temp_ty - NUM_TILES_REGION)
    {
        lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    unsigned int dx, dy;
    unsigned int d_tx, d_tx_l;
    // device reference variables
    &device aRef, fsRef;
    string strVar;

    unsigned int crystal_y = 1;
    unsigned int crystal_x[] = {134};

    foreach dx (crystal_x) {
        dy = crystal_y;
        sprintf(strVar, "CRYSTAL_%d_%d", lsx+dx, lsy+dy);
        aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
        get_coordinate_of_crystal(lsx+dx, lsy+dy);
        fsRef = device CRYSTAL ( symbol fpsym ) *strVar @[(fsx + 3) * 160, (fsy + 2) * 320];
        map(fsRef => aRef);
        print_inst_fp_map("CRYSTAL", lsx+dx, lsy+dy);
    }

    unsigned int iobs_y = 0;
    unsigned int iobs_x[] = {184, 188, 196, 204, 208, 212, 216, 220, 224, 120, 124, 136, 140, 144, 152, 156, 168, 172,
        116, 72, 80, 84, 88, 100, 104, 0, 4, 8, 12, 16, 20, 28, 36, 40, 52, 56, 60};
    foreach dx (iobs_x) {
        dy = iobs_y;
        sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
        aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
        get_coordinate_of_iob(lsx+dx, lsy+dy);
        fsRef = device IOBS ( schematic floorplan_view ) *strVar @[(fsx + 2) * 160, (fsy + 1) * 320];
        map(fsRef => aRef);
        print_inst_fp_map("IOBS", lsx+dx, lsy+dy);
    }

    unsigned int iobr_y = 0;
    unsigned int iobr_x[] = {176, 68, 112};
    foreach dx (iobr_x) {
        dy = iobr_y;
        sprintf(strVar, "IOBR_%d_%d", lsx+dx, lsy+dy);
        aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
        get_coordinate_of_iob(lsx+dx, lsy+dy);
        fsRef = device IOBR ( schematic floorplan_view ) *strVar @[(fsx + 2) * 160, (fsy + 1) * 320];
        map(fsRef => aRef);
        print_inst_fp_map("IOBR", lsx+dx, lsy+dy);
    }
    
    unsigned int iobd_y = 0;
    unsigned int iobd_x[] = {185, 189, 197, 205, 209, 213, 217, 221, 225, 177, 121, 125, 137, 141, 145, 153, 157, 169, 173, 117, 113,
        73, 81, 85, 89, 101, 105, 69, 1, 5, 9, 13, 17, 21, 29, 37, 41, 53, 57, 61};
    foreach dx (iobd_x) {
        dy = iobd_y;
        sprintf(strVar, "IOBD_%d_%d", lsx+dx, lsy+dy);
        aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
        get_coordinate_of_iob(lsx+dx, lsy+dy);
        fsRef = device IOBD ( schematic floorplan_view ) *strVar @[(fsx + 2) * 160, (fsy + 1) * 320];
        map(fsRef => aRef);
        print_inst_fp_map("IOBD", lsx+dx, lsy+dy);
    }
}

function place_iob_tile_l_fp(unsigned int tx, ty)
{
    unsigned int lsx, lsy;

    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty; temp_ty > MID_TILE_REGION; temp_ty = temp_ty - NUM_TILES_REGION)
    {
        lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    unsigned int dx, dy;
    unsigned int d_tx, d_tx_l;
    // device reference variables
    &device aRef, fsRef;
    string strVar;

    unsigned int crystal_x = 1;
    unsigned int crystal_y[] = {142};

    foreach dy (crystal_y) {
        dx = crystal_x;
        aRef = <device CRYSTAL @[lsx+dx,lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CRYSTAL_%d_%d", lsx+dx, lsy+dy);
        get_coordinate_of_crystal(lsx+dx, lsy+dy);
        fsRef = device CRYSTAL ( structure fp_struct ) *strVar @[fsx,fsy];
        map(fsRef => aRef);
    }

    unsigned int iobs_x = 0;
    unsigned int iobs_y[] = {40, 44, 48, 72, 76, 80, 84, 88, 100, 104, 108, 112, 116, 240, 4, 128, 132, 136, 140, 144, 156, 160, 164, 168, 
        172, 36, 8, 12, 16, 20, 32, 196, 200, 204, 208, 212, 224, 228, 232, 236, 41, 45, 49, 73, 77, 81, 85, 89, 101, 105, 109, 113, 117, 129,
        133, 137, 141, 145, 157, 161, 165, 169, 173, 197, 201, 205, 209, 213, 225, 229, 233, 237, 9, 13, 17, 21, 33};
    foreach dy (iobs_y) {
        dx = iobs_x;
        aRef = <device IOBS @[lsx+dx,lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
        get_coordinate_of_iob(lsx+dx, lsy+dy);
        fsRef = device IOBS ( structure fp_struct ) *strVar @[fsx,fsy];
        map(fsRef => aRef);
    }

    unsigned int iobr_x = 0;
    unsigned int iobr_y[] = {5, 37, 241};
    foreach dy (iobr_y) {
        dx = iobr_x;
        aRef = <device IOBR @[lsx+dx,lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOBR_%d_%d", lsx+dx, lsy+dy);
        get_coordinate_of_iob(lsx+dx, lsy+dy);
        fsRef = device IOBR ( structure fp_struct ) *strVar @[fsx,fsy];
        map(fsRef => aRef);
    }
}

function draw_iob_tile_l_fp(unsigned int tx, ty)
{
    unsigned int lsx, lsy;

    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty; temp_ty > MID_TILE_REGION; temp_ty = temp_ty - NUM_TILES_REGION)
    {
        lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    unsigned int dx, dy;
    unsigned int d_tx, d_tx_l;
    // device reference variables
    &device aRef, fsRef;
    string strVar;

    unsigned int crystal_x = 1;
    unsigned int crystal_y[] = {142};

    foreach dy (crystal_y) {
        dx = crystal_x;
        sprintf(strVar, "CRYSTAL_%d_%d", lsx+dx, lsy+dy);
        aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
        get_coordinate_of_crystal(lsx+dx, lsy+dy);
        fsRef = device CRYSTAL ( symbol fpsym ) *strVar @[(fsx + 3) * 160, (fsy + 2) * 320];
        map(fsRef => aRef);
        print_inst_fp_map("CRYSTAL", lsx+dx, lsy+dy);
    }

    unsigned int iobs_x = 0;
    unsigned int iobs_y[] = {40, 44, 48, 72, 76, 80, 84, 88, 100, 104, 108, 112, 116, 240, 4, 128, 132, 136, 140, 144, 156, 160, 164, 168, 
        172, 36, 8, 12, 16, 20, 32, 196, 200, 204, 208, 212, 224, 228, 232, 236, 41, 45, 49, 73, 77, 81, 85, 89, 101, 105, 109, 113, 117, 129,
        133, 137, 141, 145, 157, 161, 165, 169, 173, 197, 201, 205, 209, 213, 225, 229, 233, 237, 9, 13, 17, 21, 33};
    foreach dy (iobs_y) {
        dx = iobs_x;
        sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
        aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
        get_coordinate_of_iob(lsx+dx, lsy+dy);
        fsRef = device IOBS ( schematic floorplan_view ) *strVar @[(fsx + 1) * 160, (fsy + 1) * 320];
        map(fsRef => aRef);
        print_inst_fp_map("IOBS", lsx+dx, lsy+dy);
    }

    unsigned int iobr_x = 0;
    unsigned int iobr_y[] = {5, 37, 241};
    foreach dy (iobr_y) {
        dx = iobr_x;
        sprintf(strVar, "IOBR_%d_%d", lsx+dx, lsy+dy);
        aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
        get_coordinate_of_iob(lsx+dx, lsy+dy);
        fsRef = device IOBR ( schematic floorplan_view ) *strVar @[(fsx + 1) * 160, (fsy + 1) * 320];
        map(fsRef => aRef);
        print_inst_fp_map("IOBR", lsx+dx, lsy+dy);
    }
}

function place_iob_tile_r_fp(unsigned int tx, ty)
{
    unsigned int lsx, lsy;

    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty; temp_ty > MID_TILE_REGION; temp_ty = temp_ty - NUM_TILES_REGION)
    {
        lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    unsigned int dx, dy;
    unsigned int d_tx, d_tx_l;
    // device reference variables
    &device aRef, fsRef;
    string strVar;

    unsigned int crystal_x = 1;
    unsigned int crystal_y[] = {142};

    foreach dy (crystal_y) {
        dx = crystal_x;
        aRef = <device CRYSTAL @[lsx+dx,lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "CRYSTAL_%d_%d", lsx+dx, lsy+dy);
        get_coordinate_of_crystal(lsx+dx, lsy+dy);
        fsRef = device CRYSTAL ( structure fp_struct ) *strVar @[fsx,fsy];
        map(fsRef => aRef);
    }

    unsigned int iobs_x = 0;
    unsigned int iobs_y[] = {129, 133, 137, 141, 145, 157, 161, 165, 169, 173, 5, 9, 13, 17, 21, 33, 37, 41, 45, 49, 73, 77, 81, 85, 89,
        101, 105, 109, 113, 117, 197, 201, 205, 209, 213, 225, 229, 233, 237, 241, 4, 8, 12, 16, 20, 32, 40, 44, 48, 72, 76, 80, 84, 88, 100,
        104, 108, 112, 116, 196, 200, 204, 208, 212, 224, 228, 232, 236, 128, 132, 136, 140, 144, 156, 160, 164, 168, 172};
    foreach dy (iobs_y) {
        dx = iobs_x;
        aRef = <device IOBS @[lsx+dx,lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
        get_coordinate_of_iob(lsx+dx, lsy+dy);
        fsRef = device IOBS ( structure fp_struct ) *strVar @[fsx,fsy];
        map(fsRef => aRef);
    }

    unsigned int iobr_x = 0;
    unsigned int iobr_y[] = {36, 240};
    foreach dy (iobr_y) {
        dx = iobr_x;
        aRef = <device IOBR @[lsx+dx,lsy+dy] of ARCHITECTURE>;
        sprintf(strVar, "IOBR_%d_%d", lsx+dx, lsy+dy);
        get_coordinate_of_iob(lsx+dx, lsy+dy);
        fsRef = device IOBR ( structure fp_struct ) *strVar @[fsx,fsy];
        map(fsRef => aRef);
    }
}

function draw_iob_tile_r_fp(unsigned int tx, ty)
{
    unsigned int lsx, lsy;

    lsx = tx * NUM_GRID_X;
    lsy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty; temp_ty > MID_TILE_REGION; temp_ty = temp_ty - NUM_TILES_REGION)
    {
        lsy = lsy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    unsigned int dx, dy;
    unsigned int d_tx, d_tx_l;
    // device reference variables
    &device aRef, fsRef;
    string strVar;

    unsigned int crystal_x = 1;
    unsigned int crystal_y[] = {142};

    foreach dy (crystal_y) {
        dx = crystal_x;
        sprintf(strVar, "CRYSTAL_%d_%d", lsx+dx, lsy+dy);
        aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
        get_coordinate_of_crystal(lsx+dx, lsy+dy);
        fsRef = device CRYSTAL ( symbol fpsym ) *strVar @[(fsx + 3) * 160, (fsy + 2) * 320];
        map(fsRef => aRef);
        print_inst_fp_map("CRYSTAL", lsx+dx, lsy+dy);
    }

    unsigned int iobs_x = 0;
    unsigned int iobs_y[] = {129, 133, 137, 141, 145, 157, 161, 165, 169, 173, 5, 9, 13, 17, 21, 33, 37, 41, 45, 49, 73, 77, 81, 85, 89,
        101, 105, 109, 113, 117, 197, 201, 205, 209, 213, 225, 229, 233, 237, 241, 4, 8, 12, 16, 20, 32, 40, 44, 48, 72, 76, 80, 84, 88, 100,
        104, 108, 112, 116, 196, 200, 204, 208, 212, 224, 228, 232, 236, 128, 132, 136, 140, 144, 156, 160, 164, 168, 172};
    foreach dy (iobs_y) {
        dx = iobs_x;
        sprintf(strVar, "IOBS_%d_%d", lsx+dx, lsy+dy);
        aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
        get_coordinate_of_iob(lsx+dx, lsy+dy);
        fsRef = device IOBS ( schematic floorplan_view ) *strVar @[(fsx + 3) * 160, (fsy + 1) * 320];
        map(fsRef => aRef);
        print_inst_fp_map("IOBS", lsx+dx, lsy+dy);
    }

    unsigned int iobr_x = 0;
    unsigned int iobr_y[] = {36, 240};
    foreach dy (iobr_y) {
        dx = iobr_x;
        sprintf(strVar, "IOBR_%d_%d", lsx+dx, lsy+dy);
        aRef = <instance *strVar of ARCHITECTURE (structure fp_struct)>;
        get_coordinate_of_iob(lsx+dx, lsy+dy);
        fsRef = device IOBR ( schematic floorplan_view ) *strVar @[(fsx + 3) * 160, (fsy + 1) * 320];
        map(fsRef => aRef);
        print_inst_fp_map("IOBR", lsx+dx, lsy+dy);
    }
}

}; // end of package pgl_schm_funcs
