use pgl_defs,pgl12g_defs;
use pgl_CLMA_SRB_inc,pgl_CLMS_SRB_inc,pgl_DRM_SRB_inc,pgl_APM_SRB_inc,pgl_IOL_SRB_inc,pgl_PLL_B_SRB_inc,pgl_PLL_T_SRB_inc;
use pgl_CCS_SRB_inc,pgl_DQSL_SRB_inc,pgl_HMEMCDQSL_SRB_inc,pgl_HMEMCIOL_SRB_inc;
use pgl_IOCKGATEDLL_SRB_inc,pgl_HMEMCIOCKGATEDLL_SRB_inc;
use pgl_USCM_SRB_inc,pgl_HMEMC_SRB_inc,pgl_IOB_SRB_inc;

package pgl_funcs_place
{


/********************************************************************************/
/********************************************************************************/
function place_srb_tile(unsigned int tx,ty)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;

   //DOUBLE
    sprintf(strVar,"ntZDE_%d_%d",sx,sy);
    &wire ntRef_ntZDE[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;    
    
    sprintf(strVar,"ntZDN_%d_%d",sx,sy);
    &wire ntRef_ntZDN[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;    
 
    sprintf(strVar,"ntZDW_%d_%d",sx,sy);
    &wire ntRef_ntZDW[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZDS_%d_%d",sx,sy);
    &wire ntRef_ntZDS[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    //QUAD
    sprintf(strVar,"ntZQE_%d_%d",sx,sy);
    &wire ntRef_ntZQE[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
    
    sprintf(strVar,"ntZQN_%d_%d",sx,sy);
    &wire ntRef_ntZQN[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
 
    sprintf(strVar,"ntZQW_%d_%d",sx,sy);
    &wire ntRef_ntZQW[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZQS_%d_%d",sx,sy);
    &wire ntRef_ntZQS[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
    
     //SINGLE
    sprintf(strVar,"ntZSE_%d_%d",sx,sy);
    &wire ntRef_ntZSE[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
    
    sprintf(strVar,"ntZSN_%d_%d",sx,sy);
    &wire ntRef_ntZSN[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
 
    sprintf(strVar,"ntZSW_%d_%d",sx,sy);
    &wire ntRef_ntZSW[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSS_%d_%d",sx,sy);
    &wire ntRef_ntZSS[5:0] = wire *strVar[5:0]         /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    //DIAGONAL
    sprintf(strVar,"ntZSNE_%d_%d",sx,sy);
    &wire ntRef_ntZSNE[5:0] = wire *strVar[5:0]        /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;
    
    sprintf(strVar,"ntZSSW_%d_%d",sx,sy);
    &wire ntRef_ntZSSW[5:0] = wire *strVar[5:0]        /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/; 
 
    sprintf(strVar,"ntZSNW_%d_%d",sx,sy);
    &wire ntRef_ntZSNW[5:0] = wire *strVar[5:0]        /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    sprintf(strVar,"ntZSSE_%d_%d",sx,sy);
    &wire ntRef_ntZSSE[5:0] = wire *strVar[5:0]        /*pragma PAP_ARC_ITC_TYPE = "SHORT"*/;

    //TO CLMS&CLMA 
    sprintf(strVar,"ntA_A0_%d_%d",sx,sy);
    &wire ntRef_ntA_A0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_A1_%d_%d",sx,sy);
    &wire ntRef_ntA_A1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntA_A2_%d_%d",sx,sy);
    &wire ntRef_ntA_A2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_A3_%d_%d",sx,sy);
    &wire ntRef_ntA_A3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_A4_%d_%d",sx,sy);
    &wire ntRef_ntA_A4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_B0_%d_%d",sx,sy);
    &wire ntRef_ntA_B0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_B1_%d_%d",sx,sy);
    &wire ntRef_ntA_B1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntA_B2_%d_%d",sx,sy);
    &wire ntRef_ntA_B2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntA_B3_%d_%d",sx,sy);
    &wire ntRef_ntA_B3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_B4_%d_%d",sx,sy);
    &wire ntRef_ntA_B4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_C0_%d_%d",sx,sy);
    &wire ntRef_ntA_C0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_C1_%d_%d",sx,sy);
    &wire ntRef_ntA_C1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntA_C2_%d_%d",sx,sy);
    &wire ntRef_ntA_C2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_C3_%d_%d",sx,sy);
    &wire ntRef_ntA_C3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_C4_%d_%d",sx,sy);
    &wire ntRef_ntA_C4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_D0_%d_%d",sx,sy);
    &wire ntRef_ntA_D0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_D1_%d_%d",sx,sy);
    &wire ntRef_ntA_D1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntA_D2_%d_%d",sx,sy);
    &wire ntRef_ntA_D2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_D3_%d_%d",sx,sy);
    &wire ntRef_ntA_D3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_D4_%d_%d",sx,sy);
    &wire ntRef_ntA_D4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_A0_%d_%d",sx,sy);
    &wire ntRef_ntS_A0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_A1_%d_%d",sx,sy);
    &wire ntRef_ntS_A1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntS_A2_%d_%d",sx,sy);
    &wire ntRef_ntS_A2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_A3_%d_%d",sx,sy);
    &wire ntRef_ntS_A3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_A4_%d_%d",sx,sy);
    &wire ntRef_ntS_A4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_B0_%d_%d",sx,sy);
    &wire ntRef_ntS_B0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_B1_%d_%d",sx,sy);
    &wire ntRef_ntS_B1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntS_B2_%d_%d",sx,sy);
    &wire ntRef_ntS_B2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_B3_%d_%d",sx,sy);
    &wire ntRef_ntS_B3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_B4_%d_%d",sx,sy);
    &wire ntRef_ntS_B4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_C0_%d_%d",sx,sy);
    &wire ntRef_ntS_C0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_C1_%d_%d",sx,sy);
    &wire ntRef_ntS_C1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntS_C2_%d_%d",sx,sy);
    &wire ntRef_ntS_C2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_C3_%d_%d",sx,sy);
    &wire ntRef_ntS_C3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_C4_%d_%d",sx,sy);
    &wire ntRef_ntS_C4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_D0_%d_%d",sx,sy);
    &wire ntRef_ntS_D0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_D1_%d_%d",sx,sy);
    &wire ntRef_ntS_D1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntS_D2_%d_%d",sx,sy);
    &wire ntRef_ntS_D2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_D3_%d_%d",sx,sy);
    &wire ntRef_ntS_D3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_D4_%d_%d",sx,sy);
    &wire ntRef_ntS_D4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_M0_%d_%d",sx,sy);           
    &wire ntRef_ntA_M0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_M1_%d_%d",sx,sy);           
    &wire ntRef_ntA_M1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_M2_%d_%d",sx,sy);           
    &wire ntRef_ntA_M2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntA_M3_%d_%d",sx,sy);           
    &wire ntRef_ntA_M3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_M0_%d_%d",sx,sy);           
    &wire ntRef_ntS_M0 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_M1_%d_%d",sx,sy);           
    &wire ntRef_ntS_M1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_M2_%d_%d",sx,sy);           
    &wire ntRef_ntS_M2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntS_M3_%d_%d",sx,sy);           
    &wire ntRef_ntS_M3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_RS_%d_%d",sx,sy);           
    &wire ntRef_ntA_RS = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_CE_%d_%d",sx,sy);           
    &wire ntRef_ntA_CE = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_RS_%d_%d",sx,sy);           
    &wire ntRef_ntS_RS = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_CE_%d_%d",sx,sy);           
    &wire ntRef_ntS_CE = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_CLK_%d_%d",sx,sy);           
    &wire ntRef_ntA_CLK = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_CLK_%d_%d",sx,sy);           
    &wire ntRef_ntS_CLK = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_AD_%d_%d",sx,sy);           
    &wire ntRef_ntA_AD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_BD_%d_%d",sx,sy);           
    &wire ntRef_ntA_BD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_CD_%d_%d",sx,sy);           
    &wire ntRef_ntA_CD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_DD_%d_%d",sx,sy);           
    &wire ntRef_ntA_DD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_AD_%d_%d",sx,sy);           
    &wire ntRef_ntS_AD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_BD_%d_%d",sx,sy);           
    &wire ntRef_ntS_BD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntS_CD_%d_%d",sx,sy);           
    &wire ntRef_ntS_CD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntS_DD_%d_%d",sx,sy);           
    &wire ntRef_ntS_DD = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);           
    &wire ntRef_ntTIEHI = wire *strVar; 

    //SW UNUSED
    
 
    sprintf(strVar, "SRB_TILE_%d_%d", sx, sy);
       device SRB_TILE *strVar
           port map (
                     A_A0  => ntRef_ntA_A0,
                     A_A1  => ntRef_ntA_A1,
                     A_A2  => ntRef_ntA_A2,
                     A_A3  => ntRef_ntA_A3,
                     A_A4  => ntRef_ntA_A4,
                     A_B0  => ntRef_ntA_B0,
                     A_B1  => ntRef_ntA_B1,
                     A_B2  => ntRef_ntA_B2,
                     A_B3  => ntRef_ntA_B3,
                     A_B4  => ntRef_ntA_B4,
                     A_C0  => ntRef_ntA_C0,
                     A_C1  => ntRef_ntA_C1,
                     A_C2  => ntRef_ntA_C2,
                     A_C3  => ntRef_ntA_C3,
                     A_C4  => ntRef_ntA_C4,
                     A_D0  => ntRef_ntA_D0,
                     A_D1  => ntRef_ntA_D1,
                     A_D2  => ntRef_ntA_D2,
                     A_D3  => ntRef_ntA_D3,
                     A_D4  => ntRef_ntA_D4,
                     S_A0  => ntRef_ntS_A0,
                     S_A1  => ntRef_ntS_A1,
                     S_A2  => ntRef_ntS_A2,
                     S_A3  => ntRef_ntS_A3,
                     S_A4  => ntRef_ntS_A4,
                     S_B0  => ntRef_ntS_B0,
                     S_B1  => ntRef_ntS_B1,
                     S_B2  => ntRef_ntS_B2,
                     S_B3  => ntRef_ntS_B3,
                     S_B4  => ntRef_ntS_B4,
                     S_C0  => ntRef_ntS_C0,
                     S_C1  => ntRef_ntS_C1,
                     S_C2  => ntRef_ntS_C2,
                     S_C3  => ntRef_ntS_C3,
                     S_C4  => ntRef_ntS_C4,
                     S_D0  => ntRef_ntS_D0,
                     S_D1  => ntRef_ntS_D1,
                     S_D2  => ntRef_ntS_D2,
                     S_D3  => ntRef_ntS_D3,
                     S_D4  => ntRef_ntS_D4,
                     A_M0  => ntRef_ntA_M0,
                     A_M1  => ntRef_ntA_M1,
                     A_M2  => ntRef_ntA_M2,
                     A_M3  => ntRef_ntA_M3,
                     S_M0  => ntRef_ntS_M0,
                     S_M1  => ntRef_ntS_M1,
                     S_M2  => ntRef_ntS_M2,
                     S_M3  => ntRef_ntS_M3,
                     A_RS  => ntRef_ntA_RS,
                     A_CE  => ntRef_ntA_CE,
                     S_RS  => ntRef_ntS_RS,
                     S_CE  => ntRef_ntS_CE,
                     A_CLK => ntRef_ntA_CLK,
                     S_CLK => ntRef_ntS_CLK,
                     A_AD  => ntRef_ntA_AD,
                     A_BD  => ntRef_ntA_BD,
                     A_CD  => ntRef_ntA_CD,
                     A_DD  => ntRef_ntA_DD,
                     S_AD  => ntRef_ntS_AD,
                     S_BD  => ntRef_ntS_BD,
                     S_CD  => ntRef_ntS_CD,
                     S_DD  => ntRef_ntS_DD,

                     ZSS   => ntRef_ntZSS,
                     ZSN   => ntRef_ntZSN,
                     ZSE   => ntRef_ntZSE,
                     ZSW   => ntRef_ntZSW,
                     ZSNW  => ntRef_ntZSNW,
                     ZSNE  => ntRef_ntZSNE,
                     ZSSW  => ntRef_ntZSSW,
                     ZSSE  => ntRef_ntZSSE,
                     ZDS   => ntRef_ntZDS,
                     ZDN   => ntRef_ntZDN,
                     ZDE   => ntRef_ntZDE,
                     ZDW   => ntRef_ntZDW,
                     ZQS   => ntRef_ntZQS,
                     ZQN   => ntRef_ntZQN,
                     ZQE   => ntRef_ntZQE,
                     ZQW   => ntRef_ntZQW,
                     TIEHI => ntRef_ntTIEHI                    
                   )
        @([sx,sy]);
}//end of function place_srb_tile
/********************************************************************************/
/********************************************************************************/
function connect_blank_srb(unsigned int tx,ty)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    connect
      (
        <pin A_Y0 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin A_Y1 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin A_Y2 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin A_Y3 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin A_Q0 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin A_Q1 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin A_Q2 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin A_Q3 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin S_Y0 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin S_Y1 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin S_Y2 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin S_Y3 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin S_Q0 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin S_Q1 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin S_Q2 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin S_Q3 of <device SRB_TILE @[sx,sy]>>    => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin A_Y6AB of <device SRB_TILE @[sx,sy]>>  => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin A_Y6CD of <device SRB_TILE @[sx,sy]>>  => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin S_Y6AB of <device SRB_TILE @[sx,sy]>>  => <wire TIEHI of <device SRB_TILE @[sx,sy]>>,
        <pin S_Y6CD of <device SRB_TILE @[sx,sy]>>  => <wire TIEHI of <device SRB_TILE @[sx,sy]>>
      );


}//end of function connect_blank_srb
/********************************************************************************/
/********************************************************************************/
function place_clm_tile(unsigned int tx,ty,clm_flag)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;
    //LOGIC OUTPUT
    sprintf(strVar,"ntL7OUT_%d_%d",sx+2,sy);
    &wire ntRef_ntL7OUT = wire*strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntA_CECO_%d_%d",sx+2,sy);
    &wire ntRef_ntA_CECO = wire*strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
   
    sprintf(strVar,"ntA_COUT_%d_%d",sx+2,sy);
    &wire ntRef_ntA_COUT = wire*strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntA_RSCO_%d_%d",sx+2,sy);
    &wire ntRef_ntA_RSCO = wire*strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntA_SRCO_%d_%d",sx+2,sy);
    &wire ntRef_ntA_SRCO = wire*strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntS_CECO_%d_%d",sx+2,sy);
    &wire ntRef_ntS_CECO = wire*strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
   
    sprintf(strVar,"ntS_COUT_%d_%d",sx+2,sy);
    &wire ntRef_ntS_COUT = wire*strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntS_RSCO_%d_%d",sx+2,sy);
    &wire ntRef_ntS_RSCO = wire*strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntS_SRCO_%d_%d",sx+2,sy);
    &wire ntRef_ntS_SRCO = wire*strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_Y_%d_%d",sx+2,sy);
    &wire ntRef_ntA_Y[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntA_Q_%d_%d",sx+2,sy);
    &wire ntRef_ntA_Q[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntA_Y6AB_%d_%d",sx+2,sy);
    &wire ntRef_ntA_Y6AB = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/; 
 
    sprintf(strVar,"ntA_Y6CD_%d_%d",sx+2,sy);
    &wire ntRef_ntA_Y6CD = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_Y_%d_%d",sx+2,sy);
    &wire ntRef_ntS_Y[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS_Q_%d_%d",sx+2,sy);
    &wire ntRef_ntS_Q[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntS_Y6AB_%d_%d",sx+2,sy);
    &wire ntRef_ntS_Y6AB = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;   
 
    sprintf(strVar,"ntS_Y6CD_%d_%d",sx+2,sy);
    &wire ntRef_ntS_Y6CD = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;  

    sprintf(strVar,"ntTIEHI_%d_%d",sx+2,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    if(clm_flag == 1)
    {
      sprintf(strVar, "CLMA_TILE_%d_%d", sx+2, sy);
      device CLMA_TILE *strVar
           port map (
                     A_Y    =>  ntRef_ntA_Y,
                     A_Q    =>  ntRef_ntA_Q,
                     A_Y6AB =>  ntRef_ntA_Y6AB,
                     A_Y6CD =>  ntRef_ntA_Y6CD,
                     S_Y    =>  ntRef_ntS_Y,
                     S_Q    =>  ntRef_ntS_Q,
                     S_Y6AB =>  ntRef_ntS_Y6AB,
                     S_Y6CD =>  ntRef_ntS_Y6CD,
                     L7OUT  => ntRef_ntL7OUT,
                     A_CECO => ntRef_ntA_CECO,
                     A_COUT => ntRef_ntA_COUT,
                     A_RSCO => ntRef_ntA_RSCO,
                     A_SRCO => ntRef_ntA_SRCO,
                     S_CECO => ntRef_ntS_CECO,
                     S_COUT => ntRef_ntS_COUT,
                     S_RSCO => ntRef_ntS_RSCO,
                     S_SRCO => ntRef_ntS_SRCO,
                     TIEHI  => ntRef_ntTIEHI                    
                    )
        @([sx+2,sy]);
     
      STRUCT inc_spec_CLMA incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_CLMA_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device CLMA_TILE @[sx+2,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx,sy_SRB]>> => <wire *pin_logic_device of <device CLMA_TILE @[sx+2,sy]>>); 
          }
      }
    }
    else
    {
      sprintf(strVar, "CLMS_TILE_%d_%d", sx+2, sy);
      device CLMS_TILE *strVar
           port map (
                     A_Y    =>  ntRef_ntA_Y,
                     A_Q    =>  ntRef_ntA_Q,
                     A_Y6AB =>  ntRef_ntA_Y6AB,
                     A_Y6CD =>  ntRef_ntA_Y6CD,
                     S_Y    =>  ntRef_ntS_Y,
                     S_Q    =>  ntRef_ntS_Q,
                     S_Y6AB =>  ntRef_ntS_Y6AB,
                     S_Y6CD =>  ntRef_ntS_Y6CD,
                     L7OUT  => ntRef_ntL7OUT,
                     A_CECO => ntRef_ntA_CECO,
                     A_COUT => ntRef_ntA_COUT,
                     A_RSCO => ntRef_ntA_RSCO,
                     A_SRCO => ntRef_ntA_SRCO,
                     S_CECO => ntRef_ntS_CECO,
                     S_COUT => ntRef_ntS_COUT,
                     S_RSCO => ntRef_ntS_RSCO,
                     S_SRCO => ntRef_ntS_SRCO,
                     TIEHI  => ntRef_ntTIEHI
                     )
        @([sx+2,sy]);  
      STRUCT inc_spec_CLMS incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_CLMS_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device CLMS_TILE @[sx+2,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx,sy_SRB]>> => <wire *pin_logic_device of <device CLMS_TILE @[sx+2,sy]>>); 
          }
      }         
    }
        
}// end of function place_clm_tile
/********************************************************************************
********************************************************************************/
function place_esd_tile(unsigned int tx,ty,flag)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;
    sprintf(strVar,"ntTIE_LO_1V1_%d_%d",sx,sy);
    &wire ntRef_ntTIE_LO_1V1 = wire *strVar;

    sprintf(strVar,"ntS11_PAD_STATE_OUT_%d_%d",sx,sy);
    &wire ntRef_ntS11_PAD_STATE_OUT = wire *strVar;

    sprintf(strVar,"ntCLOCK_DR_OUT_T_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_OUT_T = wire *strVar;

    sprintf(strVar,"ntCLOCK_DR_OUT_B_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_OUT_B = wire *strVar;

    sprintf(strVar,"ntTDI_OUT_T_%d_%d",sx,sy);
    &wire ntRef_ntTDI_OUT_T = wire *strVar;

    sprintf(strVar,"ntTDI_OUT_B_%d_%d",sx,sy);
    &wire ntRef_ntTDI_OUT_B = wire *strVar;

    sprintf(strVar,"ntTDO_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTDO_OUT = wire *strVar;

    sprintf(strVar,"ntGLOGEN_FB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_FB_OUT = wire *strVar;

    sprintf(strVar,"ntTIELO_%d_%d",sx,sy);
    &wire ntRef_ntTIELO[3:0] = wire *strVar[3:0];

    sprintf(strVar,"ntFB_VDD11_GCLK_%d_%d",sx,sy);
    &wire ntRef_ntFB_VDD11_GCLK = wire *strVar;

    sprintf(strVar,"VDD11_GCLK",sx,sy);
    &wire ntRef_ntVDD11_GCLK = wire *strVar;

    if(flag==1)
    {
      sprintf(strVar, "ESD_PGL22G_TILE_%d_%d", sx, sy);
      device ESD_PGL22G_TILE *strVar
         port map (
                      S11_PAD_STATE_OUT => ntRef_ntS11_PAD_STATE_OUT,
                      GLOGEN_FB_OUT     => ntRef_ntGLOGEN_FB_OUT,
                      CLOCK_DR_OUT_T    => ntRef_ntCLOCK_DR_OUT_T,
                      CLOCK_DR_OUT_B    => ntRef_ntCLOCK_DR_OUT_B,
                      TDI_OUT_B         => ntRef_ntTDI_OUT_B,
                      TDI_OUT_T         => ntRef_ntTDI_OUT_T,
                      TDO_OUT           => ntRef_ntTDO_OUT

                    )
        @([sx,sy]);  
    }
    else
    {
      sprintf(strVar, "ESD_PGL12G_TILE_%d_%d", sx, sy);
      device ESD_PGL12G_TILE *strVar
         port map (
                      S11_PAD_STATE_OUT => ntRef_ntS11_PAD_STATE_OUT,
                      GLOGEN_FB_OUT     => ntRef_ntGLOGEN_FB_OUT,
                      CLOCK_DR_OUT_T    => ntRef_ntCLOCK_DR_OUT_T,
                      CLOCK_DR_OUT_B    => ntRef_ntCLOCK_DR_OUT_B,
                      TDI_OUT_B         => ntRef_ntTDI_OUT_B,
                      TDI_OUT_T         => ntRef_ntTDI_OUT_T,
                      FB_VDD11_GCLK     => ntRef_ntFB_VDD11_GCLK,
                      VDD11_GCLK        => ntRef_ntVDD11_GCLK,
                      TDO_OUT           => ntRef_ntTDO_OUT

                    )
        @([sx,sy]);  
    }
   
}
/********************************************************************************
********************************************************************************/
function place_ccs_tile(unsigned int tx,ty,flag)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;
   
    sprintf(strVar,"ntFUSE_%d_%d",sx+2,sy);
    &wire ntRef_ntFUSE[31:0] = wire *strVar[31:0]               /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIPAL_BUSY_%d_%d",sx+2,sy);
    &wire ntRef_ntIPAL_BUSY = wire *strVar                       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIPAL_DOUT_%d_%d",sx+2,sy);
    &wire ntRef_ntIPAL_DOUT[31:0] = wire *strVar[31:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRBCRC_ERR_%d_%d",sx+2,sy);
    &wire ntRef_ntRBCRC_ERR = wire *strVar                       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRBCRC_VALID_%d_%d",sx+2,sy);
    &wire ntRef_ntRBCRC_VALID = wire *strVar                     /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEU_VALID_%d_%d",sx+2,sy);
    &wire ntRef_ntSEU_VALID = wire *strVar                       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntSEU_INDEX_%d_%d",sx+2,sy);
    &wire ntRef_ntSEU_INDEX[11:0] = wire *strVar[11:0]          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEU_SEC_%d_%d",sx+2,sy);
    &wire ntRef_ntSEU_SEC = wire *strVar                        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSEU_DED_%d_%d",sx+2,sy);
    &wire ntRef_ntSEU_DED = wire *strVar                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTDI_USER_%d_%d",sx+2,sy);
    &wire ntRef_ntTDI_USER = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntJRST_USER1_%d_%d",sx+2,sy);
    &wire ntRef_ntJRST_USER1 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLOCKDR_USER1_%d_%d",sx+2,sy);
    &wire ntRef_ntCLOCKDR_USER1 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCAPTUREDR_USER1_%d_%d",sx+2,sy);
    &wire ntRef_ntCAPTUREDR_USER1 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSHIFTDR_USER1_%d_%d",sx+2,sy);
    &wire ntRef_ntSHIFTDR_USER1 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntUPDATEDR_USER1_%d_%d",sx+2,sy);
    &wire ntRef_ntUPDATEDR_USER1 = wire *strVar        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

//    sprintf(strVar,"ntTDI_USER2_%d_%d",sx+2,sy);
//    &wire ntRef_ntTDI_USER2 = wire *strVar;

    sprintf(strVar,"ntJRST_USER2_%d_%d",sx+2,sy);
    &wire ntRef_ntJRST_USER2 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLOCKDR_USER2_%d_%d",sx+2,sy);
    &wire ntRef_ntCLOCKDR_USER2 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCAPTUREDR_USER2_%d_%d",sx+2,sy);
    &wire ntRef_ntCAPTUREDR_USER2 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSHIFTDR_USER2_%d_%d",sx+2,sy);
    &wire ntRef_ntSHIFTDR_USER2 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntUPDATEDR_USER2_%d_%d",sx+2,sy);
    &wire ntRef_ntUPDATEDR_USER2 = wire *strVar        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

//    sprintf(strVar,"ntTDI_USER3_%d_%d",sx+2,sy);
//    &wire ntRef_ntTDI_USER3 = wire *strVar;

    sprintf(strVar,"ntJRST_USER3_%d_%d",sx+2,sy);
    &wire ntRef_ntJRST_USER3 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLOCKDR_USER3_%d_%d",sx+2,sy);
    &wire ntRef_ntCLOCKDR_USER3 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCAPTUREDR_USER3_%d_%d",sx+2,sy);
    &wire ntRef_ntCAPTUREDR_USER3 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSHIFTDR_USER3_%d_%d",sx+2,sy);
    &wire ntRef_ntSHIFTDR_USER3 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntUPDATEDR_USER3_%d_%d",sx+2,sy);
    &wire ntRef_ntUPDATEDR_USER3 = wire *strVar        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

//    sprintf(strVar,"ntTDI_USER4_%d_%d",sx+2,sy);
//    &wire ntRef_ntTDI_USER4 = wire *strVar;

    sprintf(strVar,"ntJRST_USER4_%d_%d",sx+2,sy);
    &wire ntRef_ntJRST_USER4 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLOCKDR_USER4_%d_%d",sx+2,sy);
    &wire ntRef_ntCLOCKDR_USER4 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCAPTUREDR_USER4_%d_%d",sx+2,sy);
    &wire ntRef_ntCAPTUREDR_USER4 = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSHIFTDR_USER4_%d_%d",sx+2,sy);
    &wire ntRef_ntSHIFTDR_USER4 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntUPDATEDR_USER4_%d_%d",sx+2,sy);
    &wire ntRef_ntUPDATEDR_USER4 = wire *strVar        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFLG_USER1_%d_%d",sx+2,sy);
    &wire ntRef_ntFLG_USER1 = wire *strVar             /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFLG_USER2_%d_%d",sx+2,sy);
    &wire ntRef_ntFLG_USER2 = wire *strVar             /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFLG_USER3_%d_%d",sx+2,sy);
    &wire ntRef_ntFLG_USER3 = wire *strVar             /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFLG_USER4_%d_%d",sx+2,sy);
    &wire ntRef_ntFLG_USER4 = wire *strVar             /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTDI1_%d_%d",sx+2,sy);
    &wire ntRef_ntTDI1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTDI2_%d_%d",sx+2,sy);
    &wire ntRef_ntTDI2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTDI3_%d_%d",sx+2,sy);
    &wire ntRef_ntTDI3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTDI4_%d_%d",sx+2,sy);
    &wire ntRef_ntTDI4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTCK1_%d_%d",sx+2,sy);
    &wire ntRef_ntTCK1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTCK2_%d_%d",sx+2,sy);
    &wire ntRef_ntTCK2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTCK3_%d_%d",sx+2,sy);
    &wire ntRef_ntTCK3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTCK4_%d_%d",sx+2,sy);
    &wire ntRef_ntTCK4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTMS1_%d_%d",sx+2,sy);
    &wire ntRef_ntTMS1 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTMS2_%d_%d",sx+2,sy);
    &wire ntRef_ntTMS2 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTMS3_%d_%d",sx+2,sy);
    &wire ntRef_ntTMS3 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTMS4_%d_%d",sx+2,sy);
    &wire ntRef_ntTMS4 = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntJRTI1_%d_%d",sx+2,sy);
    &wire ntRef_ntJRTI1 = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntJRTI2_%d_%d",sx+2,sy);
    &wire ntRef_ntJRTI2 = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntJRTI3_%d_%d",sx+2,sy);
    &wire ntRef_ntJRTI3 = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntJRTI4_%d_%d",sx+2,sy);
    &wire ntRef_ntJRTI4 = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntWAKEUP_OVER_N_%d_%d",sx+2,sy);
    &wire ntRef_ntWAKEUP_OVER_N = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntLOGIC_DONE_%d_%d",sx+2,sy);
    &wire ntRef_ntLOGIC_DONE = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDBUSY_%d_%d",sx+2,sy);
    &wire ntRef_ntDBUSY = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDRDY_%d_%d",sx+2,sy);
    &wire ntRef_ntDRDY = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDMODIFIED_%d_%d",sx+2,sy);
    &wire ntRef_ntDMODIFIED = wire *strVar             /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDO_ADC_%d_%d",sx+2,sy);
    &wire ntRef_ntDO_ADC[15:0] = wire *strVar[15:0]    /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO0_%d_%d",sx+2,sy);
    &wire ntRef_ntTEST_SO0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO1_%d_%d",sx+2,sy);
    &wire ntRef_ntTEST_SO1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO2_%d_%d",sx+2,sy);
    &wire ntRef_ntTEST_SO2 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO3_%d_%d",sx+2,sy);
    &wire ntRef_ntTEST_SO3 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO4_%d_%d",sx+2,sy);
    &wire ntRef_ntTEST_SO4 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO5_%d_%d",sx+2,sy);
    &wire ntRef_ntTEST_SO5 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO6_%d_%d",sx+2,sy);
    &wire ntRef_ntTEST_SO6 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO7_%d_%d",sx+2,sy);
    &wire ntRef_ntTEST_SO7 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntUID_DOUT_%d_%d",sx+2,sy);
    &wire ntRef_ntUID_DOUT = wire *strVar             /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_USER_%d_%d",sx+2,sy);
    &wire ntRef_ntCLK_USER = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_MSPI_%d_%d",sx+2,sy);
    &wire ntRef_ntCLK_MSPI = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_BLSHFT_%d_%d",sx+2,sy);
    &wire ntRef_ntCLK_BLSHFT = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_ADC_%d_%d",sx+2,sy);
    &wire ntRef_ntCLK_ADC = wire *strVar;

    sprintf(strVar,"ntGRS_N_%d_%d",sx+2,sy);
    &wire ntRef_ntGRS_N = wire *strVar;

    sprintf(strVar,"ntGLOGEN_%d_%d",sx+2,sy);
    &wire ntRef_ntGLOGEN = wire *strVar;

    sprintf(strVar,"ntPOR_N_%d_%d",sx+2,sy);
    &wire ntRef_ntPOR_N = wire *strVar;

    sprintf(strVar,"ntGWEN_%d_%d",sx+2,sy);
    &wire ntRef_ntGWEN = wire *strVar;

    sprintf(strVar,"ntCFGMOD_%d_%d",sx+2,sy);
    &wire ntRef_ntCFGMOD = wire *strVar;

    sprintf(strVar,"ntNGB_%d_%d",sx+2,sy);
    &wire ntRef_ntNGB = wire *strVar;

    sprintf(strVar,"ntVCCON_%d_%d",sx+2,sy);
    &wire ntRef_ntVCCON = wire *strVar;

    sprintf(strVar,"ntBUS_BSCAN_OUT_%d_%d",sx+2,sy);
    &wire ntRef_ntBUS_BSCAN_OUT[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntIPOLY10U_%d_%d",sx+2,sy);
    &wire ntRef_ntIPOLY10U[12:0] = wire *strVar[12:0];

    sprintf(strVar,"ntICONST10U_%d_%d",sx+2,sy);
    &wire ntRef_ntICONST10U[10:0] = wire *strVar[10:0];

    sprintf(strVar,"ntPUP_SEL_N_%d_%d",sx+2,sy);
    &wire ntRef_ntPUP_SEL_N = wire *strVar;

    sprintf(strVar,"ntTDI_CCS_%d_%d",sx+2,sy);
    &wire ntRef_ntTDI_CCS = wire *strVar;

    sprintf(strVar,"ntDATA_O_%d_%d",sx+2,sy);
    &wire ntRef_ntDATA_O[31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntBLSRCLK_O_%d_%d",sx+2,sy);
    &wire ntRef_ntBLSRCLK_O = wire *strVar;

    sprintf(strVar,"ntERASE_EN_O_%d_%d",sx+2,sy);
    &wire ntRef_ntERASE_EN_O = wire *strVar;

    sprintf(strVar,"ntPOR_N_O_%d_%d",sx+2,sy);
    &wire ntRef_ntPOR_N_O = wire *strVar;

    sprintf(strVar,"ntPRECHG_O_%d_%d",sx+2,sy);
    &wire ntRef_ntPRECHG_O = wire *strVar;

    sprintf(strVar,"ntPROG_CAP_O_%d_%d",sx+2,sy);
    &wire ntRef_ntPROG_CAP_O = wire *strVar;

    sprintf(strVar,"ntPROG_ON_O_%d_%d",sx+2,sy);
    &wire ntRef_ntPROG_ON_O = wire *strVar;

    sprintf(strVar,"ntREAD_O_%d_%d",sx+2,sy);
    &wire ntRef_ntREAD_O = wire *strVar;

    sprintf(strVar,"ntRDBK_CAP_O_%d_%d",sx+2,sy);
    &wire ntRef_ntRDBK_CAP_O = wire *strVar;

    sprintf(strVar,"ntWL_ON_O_%d_%d",sx+2,sy);
    &wire ntRef_ntWL_ON_O = wire *strVar;

    sprintf(strVar,"ntPD_OUT_%d_%d",sx+2,sy);
    &wire ntRef_ntPD_OUT = wire *strVar;

    sprintf(strVar,"ntPUB_OUT_%d_%d",sx+2,sy);
    &wire ntRef_ntPUB_OUT = wire *strVar;

    sprintf(strVar,"ntWLSHFT_SEL_O_%d_%d",sx+2,sy);
    &wire ntRef_ntWLSHFT_SEL_O[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntRST_BLSR_O_%d_%d",sx+2,sy);
    &wire ntRef_ntRST_BLSR_O = wire *strVar;

    sprintf(strVar,"ntBLSHFT_SEL_O_%d_%d",sx+2,sy);
    &wire ntRef_ntBLSHFT_SEL_O[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntREGION_RW_EN_O_%d_%d",sx+2,sy);
    &wire ntRef_ntREGION_RW_EN_O[11:0] = wire *strVar[11:0];

    sprintf(strVar,"ntCOL_IN_O_%d_%d",sx+2,sy);
    &wire ntRef_ntCOL_IN_O[6:0] = wire *strVar[6:0];

    sprintf(strVar,"ntTYPE_O_%d_%d",sx+2,sy);
    &wire ntRef_ntTYPE_O = wire *strVar;

    sprintf(strVar,"ntFRAME_ADDR_O_%d_%d",sx+2,sy);
    &wire ntRef_ntFRAME_ADDR_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntOUT_EN_D31_16_%d_%d",sx+2,sy);
    &wire ntRef_ntOUT_EN_D31_16 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_D15_8_%d_%d",sx+2,sy);
    &wire ntRef_ntOUT_EN_D15_8 = wire *strVar;
 
    sprintf(strVar,"ntOUT_EN_D_7_2_%d_%d",sx+2,sy);
    &wire ntRef_ntOUT_EN_D7_2 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_D4_%d_%d",sx+2,sy);
    &wire ntRef_ntOUT_EN_D4 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_D1_%d_%d",sx+2,sy);
    &wire ntRef_ntOUT_EN_D1 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_D0_%d_%d",sx+2,sy);
    &wire ntRef_ntOUT_EN_D0 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_I_D0_%d_%d",sx+2,sy);
    &wire ntRef_ntOUT_EN_I_D0 = wire *strVar;

    sprintf(strVar,"ntOUT_EN_I_D3_2_%d_%d",sx+2,sy);
    &wire ntRef_ntOUT_EN_I_D3_2 = wire *strVar;

    sprintf(strVar,"ntDOUT_%d_%d",sx+2,sy);
    &wire ntRef_ntDOUT[31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntOUT_EN_DAISY_O_%d_%d",sx+2,sy);
    &wire ntRef_ntOUT_EN_DAISY_O = wire *strVar;

    sprintf(strVar,"ntOUT_EN_FCS_N_%d_%d",sx+2,sy);
    &wire ntRef_ntOUT_EN_FCS_N = wire *strVar;

    sprintf(strVar,"ntOUT_EN_FCS2_N_%d_%d",sx+2,sy);
    &wire ntRef_ntOUT_EN_FCS2_N = wire *strVar;

    sprintf(strVar,"ntOUT_EN_FCE_N_%d_%d",sx+2,sy);
    &wire ntRef_ntOUT_EN_FCE_N = wire *strVar;

    sprintf(strVar,"ntOUT_EN_I_FCS_N_%d_%d",sx+2,sy);
    &wire ntRef_ntOUT_EN_I_FCS_N = wire *strVar;

    sprintf(strVar,"ntOUT_EN_CCLK_%d_%d",sx+2,sy);
    &wire ntRef_ntOUT_EN_CCLK = wire *strVar;

    sprintf(strVar,"ntI_FCS_N_%d_%d",sx+2,sy);
    &wire ntRef_ntI_FCS_N = wire *strVar;

    sprintf(strVar,"ntDAISY_O_%d_%d",sx+2,sy);
    &wire ntRef_ntDAISY_O = wire *strVar;

    sprintf(strVar,"ntI_MOSI_%d_%d",sx+2,sy);
    &wire ntRef_ntI_MOSI = wire *strVar;

    sprintf(strVar,"ntBUSY_%d_%d",sx+2,sy);
    &wire ntRef_ntBUSY = wire *strVar;

    sprintf(strVar,"ntRELCK_%d_%d",sx+2,sy);
    &wire ntRef_ntRELCK = wire *strVar;

    sprintf(strVar,"ntUSER_I_DOUT_%d_%d",sx+2,sy);
    &wire ntRef_ntUSER_I_DOUT[3:0] = wire *strVar[3:0]         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPRECHGNN_DRM_OUT_%d_%d",sx+2,sy);
    &wire ntRef_ntPRECHGNN_DRM_OUT = wire *strVar;

    sprintf(strVar,"ntMCLKB_O_%d_%d",sx+2,sy);
    &wire ntRef_ntMCLKB_O = wire *strVar;

    sprintf(strVar,"ntMCE_O_%d_%d",sx+2,sy);
    &wire ntRef_ntMCE_O = wire *strVar;

    sprintf(strVar,"ntMWR_O_%d_%d",sx+2,sy);
    &wire ntRef_ntMWR_O = wire *strVar;
 
    sprintf(strVar,"ntFCLK_%d_%d",sx+2,sy);
    &wire ntRef_ntFCLK = wire *strVar;

    sprintf(strVar,"ntFCS_N_%d_%d",sx+2,sy);
    &wire ntRef_ntFCS_N = wire *strVar;

    sprintf(strVar,"ntFCE_N_%d_%d",sx+2,sy);
    &wire ntRef_ntFCE_N = wire *strVar;

    sprintf(strVar,"ntFOE_N_%d_%d",sx+2,sy);
    &wire ntRef_ntFOE_N = wire *strVar;

    sprintf(strVar,"ntFWE_N_%d_%d",sx+2,sy);
    &wire ntRef_ntFWE_N = wire *strVar;

    sprintf(strVar,"ntADR_%d_%d",sx+2,sy);
    &wire ntRef_ntADR[15:0] = wire *strVar[15:0];

    sprintf(strVar,"ntADV_N_%d_%d",sx+2,sy);
    &wire ntRef_ntADV_N = wire *strVar;

    sprintf(strVar,"ntFCS2_N_%d_%d",sx+2,sy);
    &wire ntRef_ntFCS2_N = wire *strVar;

    sprintf(strVar,"ntINIT_COMPLETE_%d_%d",sx+2,sy);
    &wire ntRef_ntINIT_COMPLETE = wire *strVar;

    sprintf(strVar,"ntCLOCKDR_%d_%d",sx+2,sy);
    &wire ntRef_ntCLOCKDR = wire *strVar;

    sprintf(strVar,"ntTEST_SO0_ADC_%d_%d",sx+2,sy);
    &wire ntRef_ntTEST_SO0_ADC = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO1_ADC_%d_%d",sx+2,sy);
    &wire ntRef_ntTEST_SO1_ADC = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO2_ADC_%d_%d",sx+2,sy);
    &wire ntRef_ntTEST_SO2_ADC = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntOVER_TEMP_%d_%d",sx+2,sy);
    &wire ntRef_ntOVER_TEMP = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTIEHI_%d_%d",sx+2,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar,"ntTIELO_%d_%d",sx+2,sy);
    &wire ntRef_ntTIELO = wire *strVar;

    sprintf(strVar,"ntNGB_VGATE_%d_%d",sx+2,sy);
    &wire ntRef_ntNGB_VGATE = wire *strVar;

    if(flag==1)
    {
      sprintf(strVar, "CCS_TILE_%d_%d", sx+2, sy);
      device CCS_TILE *strVar
            port map ( 
                       FUSE            => ntRef_ntFUSE,
                       IPAL_BUSY       => ntRef_ntIPAL_BUSY,
                       IPAL_DOUT       => ntRef_ntIPAL_DOUT,
                       RBCRC_ERR       => ntRef_ntRBCRC_ERR,
                       RBCRC_VALID     => ntRef_ntRBCRC_VALID,
                       SEU_VALID       => ntRef_ntSEU_VALID,
                       SEU_INDEX       => ntRef_ntSEU_INDEX,
                       SEU_SEC         => ntRef_ntSEU_SEC,
                       SEU_DED         => ntRef_ntSEU_DED,
                       JRST_USER1      => ntRef_ntJRST_USER1,
                       CLOCKDR_USER1   => ntRef_ntCLOCKDR_USER1,
                       CAPTUREDR_USER1 => ntRef_ntCAPTUREDR_USER1,
                       SHIFTDR_USER1   => ntRef_ntSHIFTDR_USER1,
                       UPDATEDR_USER1  => ntRef_ntUPDATEDR_USER1,
                       JRST_USER2      => ntRef_ntJRST_USER2,
                       CLOCKDR_USER2   => ntRef_ntCLOCKDR_USER2,
                       CAPTUREDR_USER2 => ntRef_ntCAPTUREDR_USER2,
                       SHIFTDR_USER2   => ntRef_ntSHIFTDR_USER2,
                       UPDATEDR_USER2  => ntRef_ntUPDATEDR_USER2,
                       JRST_USER3      => ntRef_ntJRST_USER3,
                       CLOCKDR_USER3   => ntRef_ntCLOCKDR_USER3,
                       CAPTUREDR_USER3 => ntRef_ntCAPTUREDR_USER3,
                       SHIFTDR_USER3   => ntRef_ntSHIFTDR_USER3,
                       UPDATEDR_USER3  => ntRef_ntUPDATEDR_USER3,
                       JRST_USER4      => ntRef_ntJRST_USER4,
                       CLOCKDR_USER4   => ntRef_ntCLOCKDR_USER4,
                       CAPTUREDR_USER4 => ntRef_ntCAPTUREDR_USER4,
                       SHIFTDR_USER4   => ntRef_ntSHIFTDR_USER4,
                       UPDATEDR_USER4  => ntRef_ntUPDATEDR_USER4, 
                       FLG_USER1       => ntRef_ntFLG_USER1,
                       FLG_USER2       => ntRef_ntFLG_USER2,
                       FLG_USER3       => ntRef_ntFLG_USER3,
                       FLG_USER4       => ntRef_ntFLG_USER4, 
                       TCK1            => ntRef_ntTCK1,
                       TCK2            => ntRef_ntTCK2,
                       TCK3            => ntRef_ntTCK3,
                       TCK4            => ntRef_ntTCK4, 
                       TMS1            => ntRef_ntTMS1,
                       TMS2            => ntRef_ntTMS2,
                       TMS3            => ntRef_ntTMS3,
                       TMS4            => ntRef_ntTMS4, 
                       TDI1            => ntRef_ntTDI1,
                       TDI2            => ntRef_ntTDI2,
                       TDI3            => ntRef_ntTDI3,
                       TDI4            => ntRef_ntTDI4, 
                       JRTI1           => ntRef_ntJRTI1,
                       JRTI2           => ntRef_ntJRTI2,
                       JRTI3           => ntRef_ntJRTI3,
                       JRTI4           => ntRef_ntJRTI4, 
                       WAKEUP_OVER_N   => ntRef_ntWAKEUP_OVER_N, 
                       LOGIC_DONE      => ntRef_ntLOGIC_DONE,
                       DBUSY           => ntRef_ntDBUSY,
                       DRDY            => ntRef_ntDRDY,
                       DMODIFIED       => ntRef_ntDMODIFIED,
                       DO_ADC          => ntRef_ntDO_ADC, 
                       UID_DOUT        => ntRef_ntUID_DOUT,
                       CLK_USER        => ntRef_ntCLK_USER,
                       CLK_MSPI        => ntRef_ntCLK_MSPI,
                       CLK_BLSHFT      => ntRef_ntCLK_BLSHFT,
  
                       CLK_ADC         => ntRef_ntCLK_ADC,
                       GRS_N            => ntRef_ntGRS_N,
                       GLOGEN          => ntRef_ntGLOGEN,
                       POR_N            => ntRef_ntPOR_N,
                       GWEN            => ntRef_ntGWEN,
                       NGB             => ntRef_ntNGB,
                       IPOLY10U        => ntRef_ntIPOLY10U,
                       ICONST10U       => ntRef_ntICONST10U,
                       BUS_BSCAN_OUT   => ntRef_ntBUS_BSCAN_OUT,
  
                       PUP_SEL_N       => ntRef_ntPUP_SEL_N,
                       TDI_CCS         => ntRef_ntTDI_CCS,
  
                       DATA_O          => ntRef_ntDATA_O,
                       BLSRCLK_O       => ntRef_ntBLSRCLK_O,
                       ERASE_EN_O      => ntRef_ntERASE_EN_O,
                       POR_N_O         => ntRef_ntPOR_N_O,
                       PRECHG_O        => ntRef_ntPRECHG_O,
                       PROG_CAP_O      => ntRef_ntPROG_CAP_O,
                       PROG_ON_O       => ntRef_ntPROG_ON_O,
                       READ_O          => ntRef_ntREAD_O,
                       RDBK_CAP_O      => ntRef_ntRDBK_CAP_O,
                       WL_ON_O         => ntRef_ntWL_ON_O,
                       PD_OUT          => ntRef_ntPD_OUT,
                       PUB_OUT         => ntRef_ntPUB_OUT,
                       RST_BLSR_O      => ntRef_ntRST_BLSR_O,
                       WLSHFT_SEL_O    => ntRef_ntWLSHFT_SEL_O,
                       BLSHFT_SEL_O    => ntRef_ntBLSHFT_SEL_O,
                       REGION_RW_EN_O  => ntRef_ntREGION_RW_EN_O,
                       COL_IN_O        => ntRef_ntCOL_IN_O,
                       TYPE_O          => ntRef_ntTYPE_O,
                       FRAME_ADDR_O    => ntRef_ntFRAME_ADDR_O,
                       CLOCKDR         => ntRef_ntCLOCKDR,
                       
                       OUT_EN_D31_16   => ntRef_ntOUT_EN_D31_16,
                       OUT_EN_D15_8    => ntRef_ntOUT_EN_D15_8,
                       OUT_EN_D7_2     => ntRef_ntOUT_EN_D7_2,
                       OUT_EN_D4       => ntRef_ntOUT_EN_D4,
                       OUT_EN_D1       => ntRef_ntOUT_EN_D1,
                       OUT_EN_D0       => ntRef_ntOUT_EN_D0,
                       OUT_EN_CCLK     => ntRef_ntOUT_EN_CCLK,
                       OUT_EN_FCS_N    => ntRef_ntOUT_EN_FCS_N,
                       OUT_EN_FCS2_N   => ntRef_ntOUT_EN_FCS2_N,
                       OUT_EN_FCE_N    => ntRef_ntOUT_EN_FCE_N,
                       USER_I_DOUT     => ntRef_ntUSER_I_DOUT,
                       OUT_EN_DAISY_O  => ntRef_ntOUT_EN_DAISY_O,
                       DOUT            => ntRef_ntDOUT,
                       DAISY_O         => ntRef_ntDAISY_O,
                       BUSY            => ntRef_ntBUSY,
                       RELCK           => ntRef_ntRELCK,
  
                       MCLKB_O         => ntRef_ntMCLKB_O,
                       MCE_O           => ntRef_ntMCE_O,
                       MWR_O           => ntRef_ntMWR_O,
                       FCLK            => ntRef_ntFCLK,
                       FCS_N           => ntRef_ntFCS_N,
                       FCE_N           => ntRef_ntFCE_N,
                       FOE_N           => ntRef_ntFOE_N,
                       FWE_N           => ntRef_ntFWE_N,
                       ADV_N           => ntRef_ntADV_N,
                       ADR             => ntRef_ntADR,
                       FCS2_N          => ntRef_ntFCS2_N,
                       INIT_COMPLETE   => ntRef_ntINIT_COMPLETE,
                       TEST_SO0_ADC   => ntRef_ntTEST_SO0_ADC,
                       TEST_SO1_ADC   => ntRef_ntTEST_SO1_ADC,
                       TEST_SO2_ADC   => ntRef_ntTEST_SO2_ADC,
                       OVER_TEMP      => ntRef_ntOVER_TEMP,

                       NGB_VGATE      => ntRef_ntNGB_VGATE

                      )
          @([sx+2,sy]);
    }
    else
    {
      sprintf(strVar, "CCS_TILE_%d_%d", sx+2, sy);
      device CCS_TILE *strVar
            port map (
                       FUSE            => ntRef_ntFUSE,
                       IPAL_BUSY       => ntRef_ntIPAL_BUSY,
                       IPAL_DOUT       => ntRef_ntIPAL_DOUT,
                       RBCRC_ERR       => ntRef_ntRBCRC_ERR,
                       RBCRC_VALID     => ntRef_ntRBCRC_VALID,
                       SEU_VALID       => ntRef_ntSEU_VALID,
                       SEU_INDEX       => ntRef_ntSEU_INDEX,
                       SEU_SEC         => ntRef_ntSEU_SEC,
                       SEU_DED         => ntRef_ntSEU_DED,
                       JRST_USER1      => ntRef_ntJRST_USER1,
                       CLOCKDR_USER1   => ntRef_ntCLOCKDR_USER1,
                       CAPTUREDR_USER1 => ntRef_ntCAPTUREDR_USER1,
                       SHIFTDR_USER1   => ntRef_ntSHIFTDR_USER1,
                       UPDATEDR_USER1  => ntRef_ntUPDATEDR_USER1,
                       JRST_USER2      => ntRef_ntJRST_USER2,
                       CLOCKDR_USER2   => ntRef_ntCLOCKDR_USER2,
                       CAPTUREDR_USER2 => ntRef_ntCAPTUREDR_USER2,
                       SHIFTDR_USER2   => ntRef_ntSHIFTDR_USER2,
                       UPDATEDR_USER2  => ntRef_ntUPDATEDR_USER2,
                       JRST_USER3      => ntRef_ntJRST_USER3,
                       CLOCKDR_USER3   => ntRef_ntCLOCKDR_USER3,
                       CAPTUREDR_USER3 => ntRef_ntCAPTUREDR_USER3,
                       SHIFTDR_USER3   => ntRef_ntSHIFTDR_USER3,
                       UPDATEDR_USER3  => ntRef_ntUPDATEDR_USER3,
                       JRST_USER4      => ntRef_ntJRST_USER4,
                       CLOCKDR_USER4   => ntRef_ntCLOCKDR_USER4,
                       CAPTUREDR_USER4 => ntRef_ntCAPTUREDR_USER4,
                       SHIFTDR_USER4   => ntRef_ntSHIFTDR_USER4,
                       UPDATEDR_USER4  => ntRef_ntUPDATEDR_USER4, 
                       FLG_USER1       => ntRef_ntFLG_USER1,
                       FLG_USER2       => ntRef_ntFLG_USER2,
                       FLG_USER3       => ntRef_ntFLG_USER3,
                       FLG_USER4       => ntRef_ntFLG_USER4, 
                       TCK1            => ntRef_ntTCK1,
                       TCK2            => ntRef_ntTCK2,
                       TCK3            => ntRef_ntTCK3,
                       TCK4            => ntRef_ntTCK4, 
                       TMS1            => ntRef_ntTMS1,
                       TMS2            => ntRef_ntTMS2,
                       TMS3            => ntRef_ntTMS3,
                       TMS4            => ntRef_ntTMS4, 
                       TDI1            => ntRef_ntTDI1,
                       TDI2            => ntRef_ntTDI2,
                       TDI3            => ntRef_ntTDI3,
                       TDI4            => ntRef_ntTDI4, 
                       JRTI1           => ntRef_ntJRTI1,
                       JRTI2           => ntRef_ntJRTI2,
                       JRTI3           => ntRef_ntJRTI3,
                       JRTI4           => ntRef_ntJRTI4, 
                       WAKEUP_OVER_N   => ntRef_ntWAKEUP_OVER_N, 
                       LOGIC_DONE      => ntRef_ntLOGIC_DONE,
                       DBUSY           => ntRef_ntDBUSY,
                       DRDY            => ntRef_ntDRDY,
                       DMODIFIED       => ntRef_ntDMODIFIED,
                       DO_ADC          => ntRef_ntDO_ADC, 
                       UID_DOUT        => ntRef_ntUID_DOUT,
                       CLK_USER        => ntRef_ntCLK_USER,
                       CLK_MSPI        => ntRef_ntCLK_MSPI,
                       CLK_BLSHFT      => ntRef_ntCLK_BLSHFT,
  
                       CLK_ADC         => ntRef_ntCLK_ADC,
                       GRS_N            => ntRef_ntGRS_N,
                       GLOGEN          => ntRef_ntGLOGEN,
                       POR_N            => ntRef_ntPOR_N,
                       GWEN            => ntRef_ntGWEN,
                       NGB             => ntRef_ntNGB,
                       IPOLY10U        => ntRef_ntIPOLY10U,
                       ICONST10U       => ntRef_ntICONST10U,
                       BUS_BSCAN_OUT   => ntRef_ntBUS_BSCAN_OUT,
  
                       PUP_SEL_N       => ntRef_ntPUP_SEL_N,
                       TDI_CCS         => ntRef_ntTDI_CCS,
  
                       DATA_O          => ntRef_ntDATA_O,
                       BLSRCLK_O       => ntRef_ntBLSRCLK_O,
                       ERASE_EN_O      => ntRef_ntERASE_EN_O,
                       POR_N_O         => ntRef_ntPOR_N_O,
                       PRECHG_O        => ntRef_ntPRECHG_O,
                       PROG_CAP_O      => ntRef_ntPROG_CAP_O,
                       PROG_ON_O       => ntRef_ntPROG_ON_O,
                       READ_O          => ntRef_ntREAD_O,
                       RDBK_CAP_O      => ntRef_ntRDBK_CAP_O,
                       WL_ON_O         => ntRef_ntWL_ON_O,
                       PD_OUT          => ntRef_ntPD_OUT,
                       PUB_OUT         => ntRef_ntPUB_OUT,
                       RST_BLSR_O      => ntRef_ntRST_BLSR_O,
                       WLSHFT_SEL_O    => ntRef_ntWLSHFT_SEL_O,
                       BLSHFT_SEL_O    => ntRef_ntBLSHFT_SEL_O,
                       REGION_RW_EN_O  => ntRef_ntREGION_RW_EN_O,
                       COL_IN_O        => ntRef_ntCOL_IN_O,
                       TYPE_O          => ntRef_ntTYPE_O,
                       FRAME_ADDR_O    => ntRef_ntFRAME_ADDR_O,
                       CLOCKDR         => ntRef_ntCLOCKDR,
                       
                       OUT_EN_D31_16   => ntRef_ntOUT_EN_D31_16,
                       OUT_EN_D15_8    => ntRef_ntOUT_EN_D15_8,
                       OUT_EN_D7_2     => ntRef_ntOUT_EN_D7_2,
                       OUT_EN_D4       => ntRef_ntOUT_EN_D4,
                       OUT_EN_D1       => ntRef_ntOUT_EN_D1,
                       OUT_EN_D0       => ntRef_ntOUT_EN_D0,
                       OUT_EN_CCLK     => ntRef_ntOUT_EN_CCLK,
                       OUT_EN_FCS_N    => ntRef_ntOUT_EN_FCS_N,
                       OUT_EN_FCS2_N   => ntRef_ntOUT_EN_FCS2_N,
                       OUT_EN_FCE_N    => ntRef_ntOUT_EN_FCE_N,
                       USER_I_DOUT     => ntRef_ntUSER_I_DOUT,
                       OUT_EN_DAISY_O  => ntRef_ntOUT_EN_DAISY_O,
                       DOUT            => ntRef_ntDOUT,
                       DAISY_O         => ntRef_ntDAISY_O,
                       BUSY            => ntRef_ntBUSY,
                       RELCK           => ntRef_ntRELCK,
  
                       MCLKB_O         => ntRef_ntMCLKB_O,
                       MCE_O           => ntRef_ntMCE_O,
                       MWR_O           => ntRef_ntMWR_O,
                       FCLK            => ntRef_ntFCLK,
                       FCS_N           => ntRef_ntFCS_N,
                       FCE_N           => ntRef_ntFCE_N,
                       FOE_N           => ntRef_ntFOE_N,
                       FWE_N           => ntRef_ntFWE_N,
                       ADV_N           => ntRef_ntADV_N,
                       ADR             => ntRef_ntADR,
                       FCS2_N          => ntRef_ntFCS2_N,
                       INIT_COMPLETE   => ntRef_ntINIT_COMPLETE,
  
                       TEST_SO0_ADC   => ntRef_ntTEST_SO0_ADC,
                       TEST_SO1_ADC   => ntRef_ntTEST_SO1_ADC,
                       TEST_SO2_ADC   => ntRef_ntTEST_SO2_ADC,
                       OVER_TEMP      => ntRef_ntOVER_TEMP,
                       TIELO          => ntRef_ntTIELO,
                       TIEHI          => ntRef_ntTIEHI,

                       NGB_VGATE      => ntRef_ntNGB_VGATE


                      )
          @([sx+2,sy]);
    }
  
        STRUCT inc_spec_CCS incVar;
        string pin_SRB;
        string pin_logic_device;
        string attribute_IO;
        int loc_SRB;
        int sy_SRB;
  
        foreach incVar(inc_CCS_SRB_spec)
        {
            pin_SRB = incVar.port_name_SRB;
            pin_logic_device = incVar.port_name_device;
            attribute_IO = incVar.attribute_IO;
            loc_SRB = incVar.loc_SRB;
           
            if(loc_SRB==0)
            {
              sy_SRB = sy;
            }
            else
            {
              sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
            }
            
            if(attribute_IO =="I")
            { 
             
               connect(<pin *pin_logic_device of <device CCS_TILE @[sx+2,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx,sy_SRB]>>);
            }
            else
            {
              connect(<pin *pin_SRB of<device SRB_TILE@[sx,sy_SRB]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx,sy_SRB]>>
                                                                         : <wire *pin_logic_device of <device CCS_TILE @[sx+2,sy]>>); 
            }
        }

int tx_esd = ESD_PGL12G_TILE_X;
int ty_esd = ESD_PGL12G_TILE_Y;

int sx_esd = tx_esd * NUM_GRID_X;
int sy_esd = ty_esd * NUM_GRID_Y;

    connect(
                 <pin VDD11_GCLK of <device CCS_TILE @[sx+2,sy]>> => <wire VDD11_GCLK of <device ESD_PGL12G_TILE @[sx_esd,sy_esd]>>,
                 <pin FB_VDD11_GCLK of <device CCS_TILE @[sx+2,sy]>> => <wire FB_VDD11_GCLK of <device ESD_PGL12G_TILE @[sx_esd,sy_esd]>>                                                    
               );

      
}// end of function place_ccs_tile

/********************************************************************************
********************************************************************************/
function place_drm_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
  
    string strVar;
   
    //LOGIC OUTPUT
    sprintf(strVar,"ntALMOST_EMPTY_%d_%d",sx,sy);
    &wire ntRef_ntALMOST_EMPTY = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
   
    sprintf(strVar,"ntALMOST_FULL_%d_%d",sx,sy);
    &wire ntRef_ntALMOST_FULL = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntEMPTY_%d_%d",sx,sy);
    &wire ntRef_ntEMPTY = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
  
    sprintf(strVar,"ntFULL_%d_%d",sx,sy);
    &wire ntRef_ntFULL = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntQA0_%d_%d",sx,sy);
    &wire ntRef_ntQA0[17:0] = wire *strVar[17:0]        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntQA1_%d_%d",sx,sy);
    &wire ntRef_ntQA1[17:0] = wire *strVar[17:0]        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntQB0_%d_%d",sx,sy);
    &wire ntRef_ntQB0[17:0] = wire *strVar[17:0]        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntQB1_%d_%d",sx,sy);
    &wire ntRef_ntQB1[17:0] = wire *strVar[17:0]        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar, "DRM_TILE_%d_%d", sx, sy);
    
    device DRM_TILE *strVar
         port map (
                    ALMOST_EMPTY   => ntRef_ntALMOST_EMPTY,
                    ALMOST_FULL    => ntRef_ntALMOST_FULL,
                    EMPTY          => ntRef_ntEMPTY,
                    FULL           => ntRef_ntFULL,
                    QA0            => ntRef_ntQA0,
                    QB0            => ntRef_ntQB0,
                    QA1            => ntRef_ntQA1,
                    QB1            => ntRef_ntQB1
                  )
        @([sx,sy]);
  
      STRUCT inc_spec_DRM incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_DRM_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device DRM_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-2,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx-2,sy_SRB]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE @ [sx-2,sy_SRB]>>
                                                                        : <wire *pin_logic_device of <device DRM_TILE @[sx,sy]>>); 
          }
      }         
        
}// end of function place_drm_tile


/********************************************************************************
********************************************************************************/

function place_apm_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    string strVar;

    sprintf(strVar,"ntXO_%d_%d",sx,sy);
    &wire ntRef_ntXO[17:0] = wire *strVar[17:0]        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntXBO_%d_%d",sx,sy);
    &wire ntRef_ntXBO[17:0] = wire *strVar[17:0]       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPO_%d_%d",sx,sy);
    &wire ntRef_ntPO[47:0] = wire *strVar[47:0]        /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntP_%d_%d",sx,sy);
    &wire ntRef_ntP[47:0] = wire *strVar[47:0]         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPCO_%d_%d",sx,sy);
    &wire ntRef_ntPCO = wire *strVar                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTEST_SO_%d_%d",sx,sy);
    &wire ntRef_ntTEST_SO = wire *strVar                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTIELO_0_%d_%d",sx,sy);
    &wire ntRef_ntTIELO_0 = wire *strVar;

    sprintf(strVar,"ntTIELO_1_%d_%d",sx,sy);
    &wire ntRef_ntTIELO_1 = wire *strVar;

    sprintf(strVar,"ntTIELO_2_%d_%d",sx,sy);
    &wire ntRef_ntTIELO_2 = wire *strVar;

    sprintf(strVar,"ntTIELO_3_%d_%d",sx,sy);
    &wire ntRef_ntTIELO_3 = wire *strVar;

    sprintf(strVar, "APM_TILE_%d_%d", sx, sy);
    
    device APM_TILE *strVar
         port map (
                   XO      =>  ntRef_ntXO,
                   PO      =>  ntRef_ntPO,
                   XBO     =>  ntRef_ntXBO,
                   P       =>  ntRef_ntP,
                   PCO     =>  ntRef_ntPCO,
                   TEST_SO =>  ntRef_ntTEST_SO,
                   TIELO_0 =>  ntRef_ntTIELO_0,
                   TIELO_1 =>  ntRef_ntTIELO_1,
                   TIELO_2 =>  ntRef_ntTIELO_2,
                   TIELO_3 =>  ntRef_ntTIELO_3
                 )
        @([sx,sy]);

      STRUCT inc_spec_APM incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_APM_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device APM_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-2,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx-2,sy_SRB]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE @ [sx-2,sy_SRB]>>
                                                                        : <wire *pin_logic_device of <device APM_TILE @[sx,sy]>>); 
          }
      }         

        
}// end of function place_apm_tile
/********************************************************************************
********************************************************************************/
function place_iob_tile(unsigned int tx,ty,s_hmemc,n_hmemc,tx_hmemc0,tx_hmemc1,num_tile_x,num_rx)
{  
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;
    sprintf(strVar,"ntS11_CCS_DIN_%d_%d",sx,sy);
    &wire ntRef_ntS11_CCS_DIN[39:0] = wire *strVar[39:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDIN_%d_%d",sx,sy);
    &wire ntRef_ntDIN[39:0] = wire *strVar[39:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSO_%d_%d",sx,sy);
    &wire ntRef_ntSO[39:0] = wire *strVar[39:0];

    sprintf(strVar,"ntCLK_XTAL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_XTAL = wire *strVar;

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntREGION_INC_%d_%d",sx,sy);
    &wire ntRef_ntREGION_INC = wire *strVar;

    sprintf(strVar,"ntNL_%d_%d",sx,sy);
    &wire ntRef_ntNL[4:0] = wire *strVar[4:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPL_%d_%d",sx,sy);
    &wire ntRef_ntPL[4:0] = wire *strVar[4:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTNL_%d_%d",sx,sy);
    &wire ntRef_ntTNL[4:0] = wire *strVar[4:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTPL_%d_%d",sx,sy);
    &wire ntRef_ntTPL[4:0] = wire *strVar[4:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntCAL_ACT_N_%d_%d",sx,sy);
    &wire ntRef_ntCAL_ACT_N = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDIFFI_OUT_%d_%d",sx,sy);
    &wire ntRef_ntDIFFI_OUT[39:0] = wire *strVar[39:0];

    sprintf(strVar,"ntS11_TIHI_D_%d_%d",sx,sy);
    &wire ntRef_ntS11_TIHI_D[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntS11_TIHI_S_%d_%d",sx,sy);
    &wire ntRef_ntS11_TIHI_S[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntS11_TILO_D_%d_%d",sx,sy);
    &wire ntRef_ntS11_TILO_D[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntS11_TILO_S_%d_%d",sx,sy);
    &wire ntRef_ntS11_TILO_S[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntS11_TILO_%d_%d",sx,sy);
    &wire ntRef_ntS11_TILO = wire *strVar;

    sprintf(strVar,"ntS11_PDG1_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_PDG1_O = wire *strVar;

    sprintf(strVar,"ntS11_PDG2_N_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_PDG2_N_O = wire *strVar;

    sprintf(strVar,"ntS11_PDG3_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_PDG3_O = wire *strVar;

    sprintf(strVar,"ntDQS_O_%d_%d",sx,sy);
    &wire ntRef_ntDQS_O[2:0] = wire *strVar[2:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGATE_FROM_LOOP_%d_%d",sx,sy);
    &wire ntRef_ntGATE_FROM_LOOP[1:0] = wire *strVar[1:0]      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS11_DIN_MIPI_LP_%d_%d",sx,sy);
    &wire ntRef_ntS11_DIN_MIPI_LP[19:0] = wire *strVar[19:0]      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntVREF_%d_%d",sx,sy);
    &wire ntRef_ntVREF = wire *strVar;

    sprintf(strVar,"ntIVREF_T_%d_%d",sx,sy);
    &wire ntRef_ntIVREF_T[9:0] = wire *strVar[9:0];

    sprintf(strVar,"ntS11_PAD_STATE_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_PAD_STATE_O = wire *strVar;


    sprintf(strVar, "IOB_TILE_%d_%d", sx, sy);
    device IOB_TILE *strVar
         port map (
                    DIN        => ntRef_ntDIN,
                    SO          => ntRef_ntSO,
                    S11_CCS_DIN => ntRef_ntS11_CCS_DIN,
                    CLK_XTAL    => ntRef_ntCLK_XTAL,
                    COL_INC_OUT => ntRef_ntCOL_INC_OUT,
                    CS_OUT      => ntRef_ntCS_OUT,
                    REGION_INC  => ntRef_ntREGION_INC,

                    NL           => ntRef_ntNL,
                    PL           => ntRef_ntPL,
                    TNL          => ntRef_ntTNL,
                    TPL          => ntRef_ntTPL,
                    CAL_ACT_N    => ntRef_ntCAL_ACT_N,
                    DIFFI_OUT    => ntRef_ntDIFFI_OUT,
                    S11_TIHI_D   => ntRef_ntS11_TIHI_D,
                    S11_TIHI_S   => ntRef_ntS11_TIHI_S,
                    S11_TILO_D   => ntRef_ntS11_TILO_D,
                    S11_TILO_S   => ntRef_ntS11_TILO_S,
                    S11_TILO     => ntRef_ntS11_TILO,
                    DQS_O        => ntRef_ntDQS_O,
                    VREF         => ntRef_ntVREF,
                    IVREF_T      => ntRef_ntIVREF_T,
                    S11_PAD_STATE_O => ntRef_ntS11_PAD_STATE_O,
                    GATE_FROM_LOOP  => ntRef_ntGATE_FROM_LOOP,
                    S11_DIN_MIPI_LP => ntRef_ntS11_DIN_MIPI_LP
                   )
        @([sx,sy]);

    unsigned int sx_iol;
    sx_iol = (tx==num_tile_x-1) ? sx-2 : sx+6;

    int ty_iol19 = ty + 1;
    int ty_iol18 = ty + 2;
    int ty_iol17 = ty + 3;
    int ty_iol16 = ty + 4;
    int ty_iol15 = ty + 5;
    int ty_iol14 = ty + 8;
    int ty_iol13 = ty + 9;
    int ty_iol12 = ty + 10;
    int ty_iol11 = ty + 11;
    int ty_iol10 = ty + 12;
    int ty_iol9 = ty + 18;
    int ty_iol8 = ty + 19;
    int ty_iol7 = ty + 20;
    int ty_iol6 = ty + 21;
    int ty_iol5 = ty + 22;
    int ty_iol4 = ty + 25;
    int ty_iol3 = ty + 26;
    int ty_iol2 = ty + 27;
    int ty_iol1 = ty + 28;
    int ty_iol0 = ty + 29;

    string device_iol0 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol0>=s_hmemc)&&(ty_iol0<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol1 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol1>=s_hmemc)&&(ty_iol1<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol2 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol2>=s_hmemc)&&(ty_iol2<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol3 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol3>=s_hmemc)&&(ty_iol3<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol4 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol4>=s_hmemc)&&(ty_iol4<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol5 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol5>=s_hmemc)&&(ty_iol5<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol6 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol6>=s_hmemc)&&(ty_iol6<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol7 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol7>=s_hmemc)&&(ty_iol7<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol8 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol8>=s_hmemc)&&(ty_iol8<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol9 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol9>=s_hmemc)&&(ty_iol9<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol10 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol10>=s_hmemc)&&(ty_iol10<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol11 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol11>=s_hmemc)&&(ty_iol11<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol12 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol12>=s_hmemc)&&(ty_iol12<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol13 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol13>=s_hmemc)&&(ty_iol13<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol14 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol14>=s_hmemc)&&(ty_iol14<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol15 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol15>=s_hmemc)&&(ty_iol15<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol16 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol16>=s_hmemc)&&(ty_iol16<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol17 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol17>=s_hmemc)&&(ty_iol17<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol18 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol18>=s_hmemc)&&(ty_iol18<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol19 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol19>=s_hmemc)&&(ty_iol19<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";

    connect
      (
         <pin S11_USR_DO[0] of <device IOB_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol0 @ [sx_iol,ty_iol0*NUM_GRID_Y]>>,
         <pin S11_USR_TS[0] of <device IOB_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol0 @ [sx_iol,ty_iol0*NUM_GRID_Y]>>,
         <pin S11_USR_DO[1] of <device IOB_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol0 @ [sx_iol,ty_iol0*NUM_GRID_Y]>>,
         <pin S11_USR_TS[1] of <device IOB_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol0 @ [sx_iol,ty_iol0*NUM_GRID_Y]>>,
         <pin S11_TERM90[0] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol0 @ [sx_iol,ty_iol0*NUM_GRID_Y]>>,
         <pin S11_TERM90[1] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol0 @ [sx_iol,ty_iol0*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[0] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol0 @ [sx_iol,ty_iol0*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[1] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol0 @ [sx_iol,ty_iol0*NUM_GRID_Y]>>,

         <pin S11_USR_DO[2] of <device IOB_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol1 @ [sx_iol,ty_iol1*NUM_GRID_Y]>>,
         <pin S11_USR_TS[2] of <device IOB_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol1 @ [sx_iol,ty_iol1*NUM_GRID_Y]>>,
         <pin S11_USR_DO[3] of <device IOB_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol1 @ [sx_iol,ty_iol1*NUM_GRID_Y]>>,
         <pin S11_USR_TS[3] of <device IOB_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol1 @ [sx_iol,ty_iol1*NUM_GRID_Y]>>,
         <pin S11_TERM90[2] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol1 @ [sx_iol,ty_iol1*NUM_GRID_Y]>>,
         <pin S11_TERM90[3] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol1 @ [sx_iol,ty_iol1*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[2] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol1 @ [sx_iol,ty_iol1*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[3] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol1 @ [sx_iol,ty_iol1*NUM_GRID_Y]>>,

         <pin S11_USR_DO[4] of <device IOB_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol2 @ [sx_iol,ty_iol2*NUM_GRID_Y]>>,
         <pin S11_USR_TS[4] of <device IOB_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol2 @ [sx_iol,ty_iol2*NUM_GRID_Y]>>,
         <pin S11_USR_DO[5] of <device IOB_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol2 @ [sx_iol,ty_iol2*NUM_GRID_Y]>>,
         <pin S11_USR_TS[5] of <device IOB_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol2 @ [sx_iol,ty_iol2*NUM_GRID_Y]>>,
         <pin S11_TERM90[4] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol2 @ [sx_iol,ty_iol2*NUM_GRID_Y]>>,
         <pin S11_TERM90[5] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol2 @ [sx_iol,ty_iol2*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[4] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol2 @ [sx_iol,ty_iol2*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[5] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol2 @ [sx_iol,ty_iol2*NUM_GRID_Y]>>,

         <pin S11_USR_DO[6] of <device IOB_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol3 @ [sx_iol,ty_iol3*NUM_GRID_Y]>>,
         <pin S11_USR_TS[6] of <device IOB_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol3 @ [sx_iol,ty_iol3*NUM_GRID_Y]>>,
         <pin S11_USR_DO[7] of <device IOB_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol3 @ [sx_iol,ty_iol3*NUM_GRID_Y]>>,
         <pin S11_USR_TS[7] of <device IOB_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol3 @ [sx_iol,ty_iol3*NUM_GRID_Y]>>,
         <pin S11_TERM90[6] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol3 @ [sx_iol,ty_iol3*NUM_GRID_Y]>>,
         <pin S11_TERM90[7] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol3 @ [sx_iol,ty_iol3*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[6] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol3 @ [sx_iol,ty_iol3*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[7] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol3 @ [sx_iol,ty_iol3*NUM_GRID_Y]>>,

         <pin S11_USR_DO[8] of <device IOB_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol4 @ [sx_iol,ty_iol4*NUM_GRID_Y]>>,
         <pin S11_USR_TS[8] of <device IOB_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol4 @ [sx_iol,ty_iol4*NUM_GRID_Y]>>,
         <pin S11_USR_DO[9] of <device IOB_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol4 @ [sx_iol,ty_iol4*NUM_GRID_Y]>>,
         <pin S11_USR_TS[9] of <device IOB_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol4 @ [sx_iol,ty_iol4*NUM_GRID_Y]>>,
         <pin S11_TERM90[8] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol4 @ [sx_iol,ty_iol4*NUM_GRID_Y]>>,
         <pin S11_TERM90[9] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol4 @ [sx_iol,ty_iol4*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[8] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol4 @ [sx_iol,ty_iol4*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[9] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol4 @ [sx_iol,ty_iol4*NUM_GRID_Y]>>,

         <pin S11_USR_DO[10] of <device IOB_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol5 @ [sx_iol,ty_iol5*NUM_GRID_Y]>>,
         <pin S11_USR_TS[10] of <device IOB_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol5 @ [sx_iol,ty_iol5*NUM_GRID_Y]>>,
         <pin S11_USR_DO[11] of <device IOB_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol5 @ [sx_iol,ty_iol5*NUM_GRID_Y]>>,
         <pin S11_USR_TS[11] of <device IOB_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol5 @ [sx_iol,ty_iol5*NUM_GRID_Y]>>,
         <pin S11_TERM90[10] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol5 @ [sx_iol,ty_iol5*NUM_GRID_Y]>>,
         <pin S11_TERM90[11] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol5 @ [sx_iol,ty_iol5*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[10] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol5 @ [sx_iol,ty_iol5*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[11] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol5 @ [sx_iol,ty_iol5*NUM_GRID_Y]>>,

         <pin S11_USR_DO[12] of <device IOB_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol6 @ [sx_iol,ty_iol6*NUM_GRID_Y]>>,
         <pin S11_USR_TS[12] of <device IOB_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol6 @ [sx_iol,ty_iol6*NUM_GRID_Y]>>,
         <pin S11_USR_DO[13] of <device IOB_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol6 @ [sx_iol,ty_iol6*NUM_GRID_Y]>>,
         <pin S11_USR_TS[13] of <device IOB_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol6 @ [sx_iol,ty_iol6*NUM_GRID_Y]>>,
         <pin S11_TERM90[12] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol6 @ [sx_iol,ty_iol6*NUM_GRID_Y]>>,
         <pin S11_TERM90[13] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol6 @ [sx_iol,ty_iol6*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[12] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol1 @ [sx_iol,ty_iol6*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[13] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol1 @ [sx_iol,ty_iol6*NUM_GRID_Y]>>,

         <pin S11_USR_DO[14] of <device IOB_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol7 @ [sx_iol,ty_iol7*NUM_GRID_Y]>>,
         <pin S11_USR_TS[14] of <device IOB_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol7 @ [sx_iol,ty_iol7*NUM_GRID_Y]>>,
         <pin S11_USR_DO[15] of <device IOB_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol7 @ [sx_iol,ty_iol7*NUM_GRID_Y]>>,
         <pin S11_USR_TS[15] of <device IOB_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol7 @ [sx_iol,ty_iol7*NUM_GRID_Y]>>,
         <pin S11_TERM90[14] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol7 @ [sx_iol,ty_iol7*NUM_GRID_Y]>>,
         <pin S11_TERM90[15] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol7 @ [sx_iol,ty_iol7*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[14] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol7 @ [sx_iol,ty_iol7*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[15] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol7 @ [sx_iol,ty_iol7*NUM_GRID_Y]>>,

         <pin S11_USR_DO[16] of <device IOB_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol8 @ [sx_iol,ty_iol8*NUM_GRID_Y]>>,
         <pin S11_USR_TS[16] of <device IOB_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol8 @ [sx_iol,ty_iol8*NUM_GRID_Y]>>,
         <pin S11_USR_DO[17] of <device IOB_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol8 @ [sx_iol,ty_iol8*NUM_GRID_Y]>>,
         <pin S11_USR_TS[17] of <device IOB_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol8 @ [sx_iol,ty_iol8*NUM_GRID_Y]>>,
         <pin S11_TERM90[16] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol8 @ [sx_iol,ty_iol8*NUM_GRID_Y]>>,
         <pin S11_TERM90[17] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol8 @ [sx_iol,ty_iol8*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[16] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol8 @ [sx_iol,ty_iol8*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[17] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol8 @ [sx_iol,ty_iol8*NUM_GRID_Y]>>,

         <pin S11_USR_DO[18] of <device IOB_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol9 @ [sx_iol,ty_iol9*NUM_GRID_Y]>>,
         <pin S11_USR_TS[18] of <device IOB_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol9 @ [sx_iol,ty_iol9*NUM_GRID_Y]>>,
         <pin S11_USR_DO[19] of <device IOB_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol9 @ [sx_iol,ty_iol9*NUM_GRID_Y]>>,
         <pin S11_USR_TS[19] of <device IOB_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol9 @ [sx_iol,ty_iol9*NUM_GRID_Y]>>,
         <pin S11_TERM90[18] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol9 @ [sx_iol,ty_iol9*NUM_GRID_Y]>>,
         <pin S11_TERM90[19] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol9 @ [sx_iol,ty_iol9*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[18] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol9 @ [sx_iol,ty_iol9*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[19] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol9 @ [sx_iol,ty_iol9*NUM_GRID_Y]>>,

         <pin S11_USR_DO[20] of <device IOB_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol10 @ [sx_iol,ty_iol10*NUM_GRID_Y]>>,
         <pin S11_USR_TS[20] of <device IOB_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol10 @ [sx_iol,ty_iol10*NUM_GRID_Y]>>,
         <pin S11_USR_DO[21] of <device IOB_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol10 @ [sx_iol,ty_iol10*NUM_GRID_Y]>>,
         <pin S11_USR_TS[21] of <device IOB_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol10 @ [sx_iol,ty_iol10*NUM_GRID_Y]>>,
         <pin S11_TERM90[20] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol10 @ [sx_iol,ty_iol10*NUM_GRID_Y]>>,
         <pin S11_TERM90[21] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol10 @ [sx_iol,ty_iol10*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[20] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol10 @ [sx_iol,ty_iol10*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[21] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol10 @ [sx_iol,ty_iol10*NUM_GRID_Y]>>,

         <pin S11_USR_DO[22] of <device IOB_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol11 @ [sx_iol,ty_iol11*NUM_GRID_Y]>>,
         <pin S11_USR_TS[22] of <device IOB_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol11 @ [sx_iol,ty_iol11*NUM_GRID_Y]>>,
         <pin S11_USR_DO[23] of <device IOB_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol11 @ [sx_iol,ty_iol11*NUM_GRID_Y]>>,
         <pin S11_USR_TS[23] of <device IOB_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol11 @ [sx_iol,ty_iol11*NUM_GRID_Y]>>,
         <pin S11_TERM90[22] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol11 @ [sx_iol,ty_iol11*NUM_GRID_Y]>>,
         <pin S11_TERM90[23] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol11 @ [sx_iol,ty_iol11*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[22] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol11 @ [sx_iol,ty_iol11*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[23] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol11 @ [sx_iol,ty_iol11*NUM_GRID_Y]>>,

         <pin S11_USR_DO[24] of <device IOB_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol12 @ [sx_iol,ty_iol12*NUM_GRID_Y]>>,
         <pin S11_USR_TS[24] of <device IOB_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol12 @ [sx_iol,ty_iol12*NUM_GRID_Y]>>,
         <pin S11_USR_DO[25] of <device IOB_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol12 @ [sx_iol,ty_iol12*NUM_GRID_Y]>>,
         <pin S11_USR_TS[25] of <device IOB_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol12 @ [sx_iol,ty_iol12*NUM_GRID_Y]>>,
         <pin S11_TERM90[24] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol12 @ [sx_iol,ty_iol12*NUM_GRID_Y]>>,
         <pin S11_TERM90[25] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol12 @ [sx_iol,ty_iol12*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[24] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol12 @ [sx_iol,ty_iol12*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[25] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol12 @ [sx_iol,ty_iol12*NUM_GRID_Y]>>,

         <pin S11_USR_DO[26] of <device IOB_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol13 @ [sx_iol,ty_iol13*NUM_GRID_Y]>>,
         <pin S11_USR_TS[26] of <device IOB_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol13 @ [sx_iol,ty_iol13*NUM_GRID_Y]>>,
         <pin S11_USR_DO[27] of <device IOB_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol13 @ [sx_iol,ty_iol13*NUM_GRID_Y]>>,
         <pin S11_USR_TS[27] of <device IOB_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol13 @ [sx_iol,ty_iol13*NUM_GRID_Y]>>,
         <pin S11_TERM90[26] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol13 @ [sx_iol,ty_iol13*NUM_GRID_Y]>>,
         <pin S11_TERM90[27] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol13 @ [sx_iol,ty_iol13*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[26] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol13 @ [sx_iol,ty_iol13*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[27] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol13 @ [sx_iol,ty_iol13*NUM_GRID_Y]>>,

         <pin S11_USR_DO[28] of <device IOB_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol14 @ [sx_iol,ty_iol14*NUM_GRID_Y]>>,
         <pin S11_USR_TS[28] of <device IOB_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol14 @ [sx_iol,ty_iol14*NUM_GRID_Y]>>,
         <pin S11_USR_DO[29] of <device IOB_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol14 @ [sx_iol,ty_iol14*NUM_GRID_Y]>>,
         <pin S11_USR_TS[29] of <device IOB_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol14 @ [sx_iol,ty_iol14*NUM_GRID_Y]>>,
         <pin S11_TERM90[28] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol14 @ [sx_iol,ty_iol14*NUM_GRID_Y]>>,
         <pin S11_TERM90[29] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol14 @ [sx_iol,ty_iol14*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[28] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol14 @ [sx_iol,ty_iol14*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[29] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol14 @ [sx_iol,ty_iol14*NUM_GRID_Y]>>,

         <pin S11_USR_DO[30] of <device IOB_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol15 @ [sx_iol,ty_iol15*NUM_GRID_Y]>>,
         <pin S11_USR_TS[30] of <device IOB_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol15 @ [sx_iol,ty_iol15*NUM_GRID_Y]>>,
         <pin S11_USR_DO[31] of <device IOB_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol15 @ [sx_iol,ty_iol15*NUM_GRID_Y]>>,
         <pin S11_USR_TS[31] of <device IOB_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol15 @ [sx_iol,ty_iol15*NUM_GRID_Y]>>,
         <pin S11_TERM90[30] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol15 @ [sx_iol,ty_iol15*NUM_GRID_Y]>>,
         <pin S11_TERM90[31] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol15 @ [sx_iol,ty_iol15*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[30] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol15 @ [sx_iol,ty_iol15*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[31] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol15 @ [sx_iol,ty_iol15*NUM_GRID_Y]>>,

         <pin S11_USR_DO[32] of <device IOB_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol16 @ [sx_iol,ty_iol16*NUM_GRID_Y]>>,
         <pin S11_USR_TS[32] of <device IOB_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol16 @ [sx_iol,ty_iol16*NUM_GRID_Y]>>,
         <pin S11_USR_DO[33] of <device IOB_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol16 @ [sx_iol,ty_iol16*NUM_GRID_Y]>>,
         <pin S11_USR_TS[33] of <device IOB_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol16 @ [sx_iol,ty_iol16*NUM_GRID_Y]>>,
         <pin S11_TERM90[32] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol16 @ [sx_iol,ty_iol16*NUM_GRID_Y]>>,
         <pin S11_TERM90[33] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol16 @ [sx_iol,ty_iol16*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[32] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol16 @ [sx_iol,ty_iol16*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[33] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol16 @ [sx_iol,ty_iol16*NUM_GRID_Y]>>,

         <pin S11_USR_DO[34] of <device IOB_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol17 @ [sx_iol,ty_iol17*NUM_GRID_Y]>>,
         <pin S11_USR_TS[34] of <device IOB_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol17 @ [sx_iol,ty_iol17*NUM_GRID_Y]>>,
         <pin S11_USR_DO[35] of <device IOB_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol17 @ [sx_iol,ty_iol17*NUM_GRID_Y]>>,
         <pin S11_USR_TS[35] of <device IOB_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol17 @ [sx_iol,ty_iol17*NUM_GRID_Y]>>,
         <pin S11_TERM90[34] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol17 @ [sx_iol,ty_iol17*NUM_GRID_Y]>>,
         <pin S11_TERM90[35] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol17 @ [sx_iol,ty_iol17*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[34] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol17 @ [sx_iol,ty_iol17*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[35] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol17 @ [sx_iol,ty_iol17*NUM_GRID_Y]>>,

         <pin S11_USR_DO[36] of <device IOB_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol18 @ [sx_iol,ty_iol18*NUM_GRID_Y]>>,
         <pin S11_USR_TS[36] of <device IOB_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol18 @ [sx_iol,ty_iol18*NUM_GRID_Y]>>,
         <pin S11_USR_DO[37] of <device IOB_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol18 @ [sx_iol,ty_iol18*NUM_GRID_Y]>>,
         <pin S11_USR_TS[37] of <device IOB_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol18 @ [sx_iol,ty_iol18*NUM_GRID_Y]>>,
         <pin S11_TERM90[36] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol18 @ [sx_iol,ty_iol18*NUM_GRID_Y]>>,
         <pin S11_TERM90[37] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol18 @ [sx_iol,ty_iol18*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[36] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol18 @ [sx_iol,ty_iol18*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[37] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol18 @ [sx_iol,ty_iol18*NUM_GRID_Y]>>,

         <pin S11_USR_DO[38] of <device IOB_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol19 @ [sx_iol,ty_iol19*NUM_GRID_Y]>>,
         <pin S11_USR_TS[38] of <device IOB_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol19 @ [sx_iol,ty_iol19*NUM_GRID_Y]>>,
         <pin S11_USR_DO[39] of <device IOB_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol19 @ [sx_iol,ty_iol19*NUM_GRID_Y]>>,
         <pin S11_USR_TS[39] of <device IOB_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol19 @ [sx_iol,ty_iol19*NUM_GRID_Y]>>,
         <pin S11_TERM90[38] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol19 @ [sx_iol,ty_iol19*NUM_GRID_Y]>>,
         <pin S11_TERM90[39] of <device IOB_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol19 @ [sx_iol,ty_iol19*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[38] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol19 @ [sx_iol,ty_iol19*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[39] of <device IOB_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol19 @ [sx_iol,ty_iol19*NUM_GRID_Y]>>,

         <pin DI_A of <device *device_iol0 @ [sx_iol,ty_iol0*NUM_GRID_Y]>>  => <wire DIN[0] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol0 @ [sx_iol,ty_iol0*NUM_GRID_Y]>>  => <wire DIN[1] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol1 @ [sx_iol,ty_iol1*NUM_GRID_Y]>>  => <wire DIN[2] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol1 @ [sx_iol,ty_iol1*NUM_GRID_Y]>>  => <wire DIN[3] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol2 @ [sx_iol,ty_iol2*NUM_GRID_Y]>>  => <wire DIN[4] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol2 @ [sx_iol,ty_iol2*NUM_GRID_Y]>>  => <wire DIN[5] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol3 @ [sx_iol,ty_iol3*NUM_GRID_Y]>>  => <wire DIN[6] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol3 @ [sx_iol,ty_iol3*NUM_GRID_Y]>>  => <wire DIN[7] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol4 @ [sx_iol,ty_iol4*NUM_GRID_Y]>>  => <wire DIN[8] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol4 @ [sx_iol,ty_iol4*NUM_GRID_Y]>>  => <wire DIN[9] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol5 @ [sx_iol,ty_iol5*NUM_GRID_Y]>>  => <wire DIN[10] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol5 @ [sx_iol,ty_iol5*NUM_GRID_Y]>>  => <wire DIN[11] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol6 @ [sx_iol,ty_iol6*NUM_GRID_Y]>>  => <wire DIN[12] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol6 @ [sx_iol,ty_iol6*NUM_GRID_Y]>>  => <wire DIN[13] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol7 @ [sx_iol,ty_iol7*NUM_GRID_Y]>>  => <wire DIN[14] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol7 @ [sx_iol,ty_iol7*NUM_GRID_Y]>>  => <wire DIN[15] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol8 @ [sx_iol,ty_iol8*NUM_GRID_Y]>>  => <wire DIN[16] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol8 @ [sx_iol,ty_iol8*NUM_GRID_Y]>>  => <wire DIN[17] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol9 @ [sx_iol,ty_iol9*NUM_GRID_Y]>>  => <wire DIN[18] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol9 @ [sx_iol,ty_iol9*NUM_GRID_Y]>>  => <wire DIN[19] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol10 @ [sx_iol,ty_iol10*NUM_GRID_Y]>>  => <wire DIN[20] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol10 @ [sx_iol,ty_iol10*NUM_GRID_Y]>>  => <wire DIN[21] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol11 @ [sx_iol,ty_iol11*NUM_GRID_Y]>>  => <wire DIN[22] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol11 @ [sx_iol,ty_iol11*NUM_GRID_Y]>>  => <wire DIN[23] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol12 @ [sx_iol,ty_iol12*NUM_GRID_Y]>>  => <wire DIN[24] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol12 @ [sx_iol,ty_iol12*NUM_GRID_Y]>>  => <wire DIN[25] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol13 @ [sx_iol,ty_iol13*NUM_GRID_Y]>>  => <wire DIN[26] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol13 @ [sx_iol,ty_iol13*NUM_GRID_Y]>>  => <wire DIN[27] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol14 @ [sx_iol,ty_iol14*NUM_GRID_Y]>>  => <wire DIN[28] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol14 @ [sx_iol,ty_iol14*NUM_GRID_Y]>>  => <wire DIN[29] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol15 @ [sx_iol,ty_iol15*NUM_GRID_Y]>>  => <wire DIN[30] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol15 @ [sx_iol,ty_iol15*NUM_GRID_Y]>>  => <wire DIN[31] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol16 @ [sx_iol,ty_iol16*NUM_GRID_Y]>>  => <wire DIN[32] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol16 @ [sx_iol,ty_iol16*NUM_GRID_Y]>>  => <wire DIN[33] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol17 @ [sx_iol,ty_iol17*NUM_GRID_Y]>>  => <wire DIN[34] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol17 @ [sx_iol,ty_iol17*NUM_GRID_Y]>>  => <wire DIN[35] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol18 @ [sx_iol,ty_iol18*NUM_GRID_Y]>>  => <wire DIN[36] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol18 @ [sx_iol,ty_iol18*NUM_GRID_Y]>>  => <wire DIN[37] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol19 @ [sx_iol,ty_iol19*NUM_GRID_Y]>>  => <wire DIN[38] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol19 @ [sx_iol,ty_iol19*NUM_GRID_Y]>>  => <wire DIN[39] of <device IOB_TILE @[sx,sy]>>,

         <pin DI_MIPI_A of <device *device_iol0 @ [sx_iol,ty_iol0*NUM_GRID_Y]>>    => <wire S11_DIN_MIPI_LP[0] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol1 @ [sx_iol,ty_iol1*NUM_GRID_Y]>>    => <wire S11_DIN_MIPI_LP[1] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol2 @ [sx_iol,ty_iol2*NUM_GRID_Y]>>    => <wire S11_DIN_MIPI_LP[2] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol3 @ [sx_iol,ty_iol3*NUM_GRID_Y]>>    => <wire S11_DIN_MIPI_LP[3] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol4 @ [sx_iol,ty_iol4*NUM_GRID_Y]>>    => <wire S11_DIN_MIPI_LP[4] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol5 @ [sx_iol,ty_iol5*NUM_GRID_Y]>>    => <wire S11_DIN_MIPI_LP[5] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol6 @ [sx_iol,ty_iol6*NUM_GRID_Y]>>    => <wire S11_DIN_MIPI_LP[6] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol7 @ [sx_iol,ty_iol7*NUM_GRID_Y]>>    => <wire S11_DIN_MIPI_LP[7] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol8 @ [sx_iol,ty_iol8*NUM_GRID_Y]>>    => <wire S11_DIN_MIPI_LP[8] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol9 @ [sx_iol,ty_iol9*NUM_GRID_Y]>>    => <wire S11_DIN_MIPI_LP[9] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol10 @ [sx_iol,ty_iol10*NUM_GRID_Y]>>  => <wire S11_DIN_MIPI_LP[10] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol11 @ [sx_iol,ty_iol11*NUM_GRID_Y]>>  => <wire S11_DIN_MIPI_LP[11] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol12 @ [sx_iol,ty_iol12*NUM_GRID_Y]>>  => <wire S11_DIN_MIPI_LP[12] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol13 @ [sx_iol,ty_iol13*NUM_GRID_Y]>>  => <wire S11_DIN_MIPI_LP[13] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol14 @ [sx_iol,ty_iol14*NUM_GRID_Y]>>  => <wire S11_DIN_MIPI_LP[14] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol15 @ [sx_iol,ty_iol15*NUM_GRID_Y]>>  => <wire S11_DIN_MIPI_LP[15] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol16 @ [sx_iol,ty_iol16*NUM_GRID_Y]>>  => <wire S11_DIN_MIPI_LP[16] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol17 @ [sx_iol,ty_iol17*NUM_GRID_Y]>>  => <wire S11_DIN_MIPI_LP[17] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol18 @ [sx_iol,ty_iol18*NUM_GRID_Y]>>  => <wire S11_DIN_MIPI_LP[18] of <device IOB_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol19 @ [sx_iol,ty_iol19*NUM_GRID_Y]>>  => <wire S11_DIN_MIPI_LP[19] of <device IOB_TILE @[sx,sy]>>,


         <pin S11_OPEN_DRAIN_EN of <device IOB_TILE @[sx,sy]>> => ((tx==0)&&(ty==(num_rx-1)*NUM_TILES_REGION)) ? <wire S11_TIHI_S[7] of <device IOB_TILE @[sx,sy]>>
                                                                                                               : <wire S11_TILO_S[7] of <device IOB_TILE @[sx,sy]>>
      );

      STRUCT inc_spec_IOB incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB,ty_srb,sx_srb;

      foreach incVar(inc_IOB_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          ty_srb = ty + loc_SRB;

          sx_srb = ((tx<tx_hmemc0)&&(ty_srb>=s_hmemc)&&(ty_srb<=n_hmemc)) ? sx+NUM_GRID_HMEMC_X+NUM_GRID_X : 
                    ((tx>tx_hmemc1)&&(ty_srb>=s_hmemc)&&(ty_srb<=n_hmemc)) ? sx-NUM_GRID_HMEMC_X-NUM_GRID_X :
                                                  (tx==0) ? sx+NUM_GRID_X : sx-NUM_GRID_X;

          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device IOB_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_SRB]>> =>  <wire *pin_logic_device of <device IOB_TILE @[sx,sy]>>); 
          }
      }         

}//end of function place_iob_tile
/********************************************************************************
********************************************************************************/
function place_iob_wo_tile(unsigned int tx,ty,s_hmemc,n_hmemc,tx_hmemc0,tx_hmemc1,num_tile_x,num_rx)  
{  
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;

    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;
    sprintf(strVar,"ntS11_CCS_DIN_%d_%d",sx,sy);
    &wire ntRef_ntS11_CCS_DIN[39:0] = wire *strVar[39:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDIN_%d_%d",sx,sy);
    &wire ntRef_ntDIN[39:0] = wire *strVar[39:0]                   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntSO_%d_%d",sx,sy);
    &wire ntRef_ntSO[39:0] = wire *strVar[39:0];

    sprintf(strVar,"ntCLK_XTAL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_XTAL = wire *strVar;

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntREGION_INC_%d_%d",sx,sy);
    &wire ntRef_ntREGION_INC = wire *strVar;

    sprintf(strVar,"ntNL_%d_%d",sx,sy);
    &wire ntRef_ntNL[4:0] = wire *strVar[4:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntPL_%d_%d",sx,sy);
    &wire ntRef_ntPL[4:0] = wire *strVar[4:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTNL_%d_%d",sx,sy);
    &wire ntRef_ntTNL[4:0] = wire *strVar[4:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTPL_%d_%d",sx,sy);
    &wire ntRef_ntTPL[4:0] = wire *strVar[4:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
 
    sprintf(strVar,"ntCAL_ACT_N_%d_%d",sx,sy);
    &wire ntRef_ntCAL_ACT_N = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDIFFI_OUT_%d_%d",sx,sy);
    &wire ntRef_ntDIFFI_OUT[39:0] = wire *strVar[39:0];

    sprintf(strVar,"ntS11_TIHI_D_%d_%d",sx,sy);
    &wire ntRef_ntS11_TIHI_D[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntS11_TIHI_S_%d_%d",sx,sy);
    &wire ntRef_ntS11_TIHI_S[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntS11_TILO_D_%d_%d",sx,sy);
    &wire ntRef_ntS11_TILO_D[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntS11_TILO_S_%d_%d",sx,sy);
    &wire ntRef_ntS11_TILO_S[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntS11_TILO_%d_%d",sx,sy);
    &wire ntRef_ntS11_TILO = wire *strVar;

    sprintf(strVar,"ntS11_PDG1_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_PDG1_O = wire *strVar;

    sprintf(strVar,"ntS11_PDG2_N_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_PDG2_N_O = wire *strVar;

    sprintf(strVar,"ntS11_PDG3_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_PDG3_O = wire *strVar;

    sprintf(strVar,"ntDQS_O_%d_%d",sx,sy);
    &wire ntRef_ntDQS_O[2:0] = wire *strVar[2:0]              /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGATE_FROM_LOOP_%d_%d",sx,sy);
    &wire ntRef_ntGATE_FROM_LOOP[1:0] = wire *strVar[1:0]      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntS11_DIN_MIPI_LP_%d_%d",sx,sy);
    &wire ntRef_ntS11_DIN_MIPI_LP[19:0] = wire *strVar[19:0]      /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntVREF_%d_%d",sx,sy);
    &wire ntRef_ntVREF = wire *strVar;

    sprintf(strVar,"ntIVREF_T_%d_%d",sx,sy);
    &wire ntRef_ntIVREF_T[9:0] = wire *strVar[9:0];

    sprintf(strVar,"ntS11_PAD_STATE_O_%d_%d",sx,sy);
    &wire ntRef_ntS11_PAD_STATE_O = wire *strVar;


    sprintf(strVar, "IOB_WO_ODIFF_TILE_%d_%d", sx, sy);
    device IOB_WO_ODIFF_TILE *strVar
         port map (
                    DIN        => ntRef_ntDIN,
                    SO          => ntRef_ntSO,
                    S11_CCS_DIN => ntRef_ntS11_CCS_DIN,
                    CLK_XTAL    => ntRef_ntCLK_XTAL,
                    COL_INC_OUT => ntRef_ntCOL_INC_OUT,
                    CS_OUT      => ntRef_ntCS_OUT,
                    REGION_INC  => ntRef_ntREGION_INC,

                    NL           => ntRef_ntNL,
                    PL           => ntRef_ntPL,
                    TNL          => ntRef_ntTNL,
                    TPL          => ntRef_ntTPL,
                    CAL_ACT_N    => ntRef_ntCAL_ACT_N,
                    DIFFI_OUT    => ntRef_ntDIFFI_OUT,
                    S11_TIHI_D   => ntRef_ntS11_TIHI_D,
                    S11_TIHI_S   => ntRef_ntS11_TIHI_S,
                    S11_TILO_D   => ntRef_ntS11_TILO_D,
                    S11_TILO_S   => ntRef_ntS11_TILO_S,
                    S11_TILO     => ntRef_ntS11_TILO,
                    DQS_O        => ntRef_ntDQS_O,
                    VREF         => ntRef_ntVREF,
                    IVREF_T      => ntRef_ntIVREF_T,
                    S11_PAD_STATE_O => ntRef_ntS11_PAD_STATE_O,
                    GATE_FROM_LOOP  => ntRef_ntGATE_FROM_LOOP,
                    S11_DIN_MIPI_LP => ntRef_ntS11_DIN_MIPI_LP
                   )
        @([sx,sy]);

    unsigned int sx_iol;
    sx_iol = (tx==num_tile_x-1) ? sx-2 : sx+6;

    int ty_iol19 = ty + 1;
    int ty_iol18 = ty + 2;
    int ty_iol17 = ty + 3;
    int ty_iol16 = ty + 4;
    int ty_iol15 = ty + 5;
    int ty_iol14 = ty + 8;
    int ty_iol13 = ty + 9;
    int ty_iol12 = ty + 10;
    int ty_iol11 = ty + 11;
    int ty_iol10 = ty + 12;
    int ty_iol9 = ty + 18;
    int ty_iol8 = ty + 19;
    int ty_iol7 = ty + 20;
    int ty_iol6 = ty + 21;
    int ty_iol5 = ty + 22;
    int ty_iol4 = ty + 25;
    int ty_iol3 = ty + 26;
    int ty_iol2 = ty + 27;
    int ty_iol1 = ty + 28;
    int ty_iol0 = ty + 29;

    string device_iol0 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol0>=s_hmemc)&&(ty_iol0<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol1 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol1>=s_hmemc)&&(ty_iol1<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol2 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol2>=s_hmemc)&&(ty_iol2<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol3 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol3>=s_hmemc)&&(ty_iol3<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol4 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol4>=s_hmemc)&&(ty_iol4<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol5 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol5>=s_hmemc)&&(ty_iol5<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol6 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol6>=s_hmemc)&&(ty_iol6<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol7 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol7>=s_hmemc)&&(ty_iol7<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol8 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol8>=s_hmemc)&&(ty_iol8<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol9 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol9>=s_hmemc)&&(ty_iol9<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol10 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol10>=s_hmemc)&&(ty_iol10<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol11 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol11>=s_hmemc)&&(ty_iol11<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol12 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol12>=s_hmemc)&&(ty_iol12<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol13 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol13>=s_hmemc)&&(ty_iol13<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol14 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol14>=s_hmemc)&&(ty_iol14<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol15 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol15>=s_hmemc)&&(ty_iol15<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol16 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol16>=s_hmemc)&&(ty_iol16<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol17 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol17>=s_hmemc)&&(ty_iol17<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol18 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol18>=s_hmemc)&&(ty_iol18<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";
    string device_iol19 = (((tx>tx_hmemc1)||(tx<tx_hmemc0))&&(ty_iol19>=s_hmemc)&&(ty_iol19<=n_hmemc)) ? "HMEMCIOL_TILE" : "IOL_TILE";

    connect
      (
         <pin S11_USR_DO[0] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol0 @ [sx_iol,ty_iol0*NUM_GRID_Y]>>,
         <pin S11_USR_TS[0] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol0 @ [sx_iol,ty_iol0*NUM_GRID_Y]>>,
         <pin S11_USR_DO[1] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol0 @ [sx_iol,ty_iol0*NUM_GRID_Y]>>,
         <pin S11_USR_TS[1] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol0 @ [sx_iol,ty_iol0*NUM_GRID_Y]>>,
         <pin S11_TERM90[0] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol0 @ [sx_iol,ty_iol0*NUM_GRID_Y]>>,
         <pin S11_TERM90[1] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol0 @ [sx_iol,ty_iol0*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[0] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol0 @ [sx_iol,ty_iol0*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[1] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol0 @ [sx_iol,ty_iol0*NUM_GRID_Y]>>,

         <pin S11_USR_DO[2] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol1 @ [sx_iol,ty_iol1*NUM_GRID_Y]>>,
         <pin S11_USR_TS[2] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol1 @ [sx_iol,ty_iol1*NUM_GRID_Y]>>,
         <pin S11_USR_DO[3] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol1 @ [sx_iol,ty_iol1*NUM_GRID_Y]>>,
         <pin S11_USR_TS[3] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol1 @ [sx_iol,ty_iol1*NUM_GRID_Y]>>,
         <pin S11_TERM90[2] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol1 @ [sx_iol,ty_iol1*NUM_GRID_Y]>>,
         <pin S11_TERM90[3] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol1 @ [sx_iol,ty_iol1*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[2] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol1 @ [sx_iol,ty_iol1*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[3] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol1 @ [sx_iol,ty_iol1*NUM_GRID_Y]>>,

         <pin S11_USR_DO[4] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol2 @ [sx_iol,ty_iol2*NUM_GRID_Y]>>,
         <pin S11_USR_TS[4] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol2 @ [sx_iol,ty_iol2*NUM_GRID_Y]>>,
         <pin S11_USR_DO[5] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol2 @ [sx_iol,ty_iol2*NUM_GRID_Y]>>,
         <pin S11_USR_TS[5] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol2 @ [sx_iol,ty_iol2*NUM_GRID_Y]>>,
         <pin S11_TERM90[4] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol2 @ [sx_iol,ty_iol2*NUM_GRID_Y]>>,
         <pin S11_TERM90[5] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol2 @ [sx_iol,ty_iol2*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[4] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol2 @ [sx_iol,ty_iol2*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[5] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol2 @ [sx_iol,ty_iol2*NUM_GRID_Y]>>,

         <pin S11_USR_DO[6] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol3 @ [sx_iol,ty_iol3*NUM_GRID_Y]>>,
         <pin S11_USR_TS[6] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol3 @ [sx_iol,ty_iol3*NUM_GRID_Y]>>,
         <pin S11_USR_DO[7] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol3 @ [sx_iol,ty_iol3*NUM_GRID_Y]>>,
         <pin S11_USR_TS[7] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol3 @ [sx_iol,ty_iol3*NUM_GRID_Y]>>,
         <pin S11_TERM90[6] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol3 @ [sx_iol,ty_iol3*NUM_GRID_Y]>>,
         <pin S11_TERM90[7] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol3 @ [sx_iol,ty_iol3*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[6] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol3 @ [sx_iol,ty_iol3*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[7] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol3 @ [sx_iol,ty_iol3*NUM_GRID_Y]>>,

         <pin S11_USR_DO[8] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol4 @ [sx_iol,ty_iol4*NUM_GRID_Y]>>,
         <pin S11_USR_TS[8] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol4 @ [sx_iol,ty_iol4*NUM_GRID_Y]>>,
         <pin S11_USR_DO[9] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol4 @ [sx_iol,ty_iol4*NUM_GRID_Y]>>,
         <pin S11_USR_TS[9] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol4 @ [sx_iol,ty_iol4*NUM_GRID_Y]>>,
         <pin S11_TERM90[8] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol4 @ [sx_iol,ty_iol4*NUM_GRID_Y]>>,
         <pin S11_TERM90[9] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol4 @ [sx_iol,ty_iol4*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[8] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol4 @ [sx_iol,ty_iol4*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[9] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol4 @ [sx_iol,ty_iol4*NUM_GRID_Y]>>,

         <pin S11_USR_DO[10] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol5 @ [sx_iol,ty_iol5*NUM_GRID_Y]>>,
         <pin S11_USR_TS[10] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol5 @ [sx_iol,ty_iol5*NUM_GRID_Y]>>,
         <pin S11_USR_DO[11] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol5 @ [sx_iol,ty_iol5*NUM_GRID_Y]>>,
         <pin S11_USR_TS[11] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol5 @ [sx_iol,ty_iol5*NUM_GRID_Y]>>,
         <pin S11_TERM90[10] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol5 @ [sx_iol,ty_iol5*NUM_GRID_Y]>>,
         <pin S11_TERM90[11] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol5 @ [sx_iol,ty_iol5*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[10] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol5 @ [sx_iol,ty_iol5*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[11] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol5 @ [sx_iol,ty_iol5*NUM_GRID_Y]>>,

         <pin S11_USR_DO[12] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol6 @ [sx_iol,ty_iol6*NUM_GRID_Y]>>,
         <pin S11_USR_TS[12] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol6 @ [sx_iol,ty_iol6*NUM_GRID_Y]>>,
         <pin S11_USR_DO[13] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol6 @ [sx_iol,ty_iol6*NUM_GRID_Y]>>,
         <pin S11_USR_TS[13] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol6 @ [sx_iol,ty_iol6*NUM_GRID_Y]>>,
         <pin S11_TERM90[12] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol6 @ [sx_iol,ty_iol6*NUM_GRID_Y]>>,
         <pin S11_TERM90[13] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol6 @ [sx_iol,ty_iol6*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[12] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol1 @ [sx_iol,ty_iol6*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[13] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol1 @ [sx_iol,ty_iol6*NUM_GRID_Y]>>,

         <pin S11_USR_DO[14] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol7 @ [sx_iol,ty_iol7*NUM_GRID_Y]>>,
         <pin S11_USR_TS[14] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol7 @ [sx_iol,ty_iol7*NUM_GRID_Y]>>,
         <pin S11_USR_DO[15] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol7 @ [sx_iol,ty_iol7*NUM_GRID_Y]>>,
         <pin S11_USR_TS[15] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol7 @ [sx_iol,ty_iol7*NUM_GRID_Y]>>,
         <pin S11_TERM90[14] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol7 @ [sx_iol,ty_iol7*NUM_GRID_Y]>>,
         <pin S11_TERM90[15] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol7 @ [sx_iol,ty_iol7*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[14] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol7 @ [sx_iol,ty_iol7*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[15] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol7 @ [sx_iol,ty_iol7*NUM_GRID_Y]>>,

         <pin S11_USR_DO[16] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol8 @ [sx_iol,ty_iol8*NUM_GRID_Y]>>,
         <pin S11_USR_TS[16] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol8 @ [sx_iol,ty_iol8*NUM_GRID_Y]>>,
         <pin S11_USR_DO[17] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol8 @ [sx_iol,ty_iol8*NUM_GRID_Y]>>,
         <pin S11_USR_TS[17] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol8 @ [sx_iol,ty_iol8*NUM_GRID_Y]>>,
         <pin S11_TERM90[16] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol8 @ [sx_iol,ty_iol8*NUM_GRID_Y]>>,
         <pin S11_TERM90[17] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol8 @ [sx_iol,ty_iol8*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[16] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol8 @ [sx_iol,ty_iol8*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[17] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol8 @ [sx_iol,ty_iol8*NUM_GRID_Y]>>,

         <pin S11_USR_DO[18] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol9 @ [sx_iol,ty_iol9*NUM_GRID_Y]>>,
         <pin S11_USR_TS[18] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol9 @ [sx_iol,ty_iol9*NUM_GRID_Y]>>,
         <pin S11_USR_DO[19] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol9 @ [sx_iol,ty_iol9*NUM_GRID_Y]>>,
         <pin S11_USR_TS[19] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol9 @ [sx_iol,ty_iol9*NUM_GRID_Y]>>,
         <pin S11_TERM90[18] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol9 @ [sx_iol,ty_iol9*NUM_GRID_Y]>>,
         <pin S11_TERM90[19] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol9 @ [sx_iol,ty_iol9*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[18] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol9 @ [sx_iol,ty_iol9*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[19] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol9 @ [sx_iol,ty_iol9*NUM_GRID_Y]>>,

         <pin S11_USR_DO[20] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol10 @ [sx_iol,ty_iol10*NUM_GRID_Y]>>,
         <pin S11_USR_TS[20] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol10 @ [sx_iol,ty_iol10*NUM_GRID_Y]>>,
         <pin S11_USR_DO[21] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol10 @ [sx_iol,ty_iol10*NUM_GRID_Y]>>,
         <pin S11_USR_TS[21] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol10 @ [sx_iol,ty_iol10*NUM_GRID_Y]>>,
         <pin S11_TERM90[20] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol10 @ [sx_iol,ty_iol10*NUM_GRID_Y]>>,
         <pin S11_TERM90[21] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol10 @ [sx_iol,ty_iol10*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[20] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol10 @ [sx_iol,ty_iol10*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[21] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol10 @ [sx_iol,ty_iol10*NUM_GRID_Y]>>,

         <pin S11_USR_DO[22] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol11 @ [sx_iol,ty_iol11*NUM_GRID_Y]>>,
         <pin S11_USR_TS[22] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol11 @ [sx_iol,ty_iol11*NUM_GRID_Y]>>,
         <pin S11_USR_DO[23] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol11 @ [sx_iol,ty_iol11*NUM_GRID_Y]>>,
         <pin S11_USR_TS[23] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol11 @ [sx_iol,ty_iol11*NUM_GRID_Y]>>,
         <pin S11_TERM90[22] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol11 @ [sx_iol,ty_iol11*NUM_GRID_Y]>>,
         <pin S11_TERM90[23] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol11 @ [sx_iol,ty_iol11*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[22] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol11 @ [sx_iol,ty_iol11*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[23] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol11 @ [sx_iol,ty_iol11*NUM_GRID_Y]>>,

         <pin S11_USR_DO[24] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol12 @ [sx_iol,ty_iol12*NUM_GRID_Y]>>,
         <pin S11_USR_TS[24] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol12 @ [sx_iol,ty_iol12*NUM_GRID_Y]>>,
         <pin S11_USR_DO[25] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol12 @ [sx_iol,ty_iol12*NUM_GRID_Y]>>,
         <pin S11_USR_TS[25] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol12 @ [sx_iol,ty_iol12*NUM_GRID_Y]>>,
         <pin S11_TERM90[24] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol12 @ [sx_iol,ty_iol12*NUM_GRID_Y]>>,
         <pin S11_TERM90[25] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol12 @ [sx_iol,ty_iol12*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[24] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol12 @ [sx_iol,ty_iol12*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[25] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol12 @ [sx_iol,ty_iol12*NUM_GRID_Y]>>,

         <pin S11_USR_DO[26] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol13 @ [sx_iol,ty_iol13*NUM_GRID_Y]>>,
         <pin S11_USR_TS[26] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol13 @ [sx_iol,ty_iol13*NUM_GRID_Y]>>,
         <pin S11_USR_DO[27] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol13 @ [sx_iol,ty_iol13*NUM_GRID_Y]>>,
         <pin S11_USR_TS[27] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol13 @ [sx_iol,ty_iol13*NUM_GRID_Y]>>,
         <pin S11_TERM90[26] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol13 @ [sx_iol,ty_iol13*NUM_GRID_Y]>>,
         <pin S11_TERM90[27] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol13 @ [sx_iol,ty_iol13*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[26] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol13 @ [sx_iol,ty_iol13*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[27] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol13 @ [sx_iol,ty_iol13*NUM_GRID_Y]>>,

         <pin S11_USR_DO[28] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol14 @ [sx_iol,ty_iol14*NUM_GRID_Y]>>,
         <pin S11_USR_TS[28] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol14 @ [sx_iol,ty_iol14*NUM_GRID_Y]>>,
         <pin S11_USR_DO[29] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol14 @ [sx_iol,ty_iol14*NUM_GRID_Y]>>,
         <pin S11_USR_TS[29] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol14 @ [sx_iol,ty_iol14*NUM_GRID_Y]>>,
         <pin S11_TERM90[28] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol14 @ [sx_iol,ty_iol14*NUM_GRID_Y]>>,
         <pin S11_TERM90[29] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol14 @ [sx_iol,ty_iol14*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[28] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol14 @ [sx_iol,ty_iol14*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[29] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol14 @ [sx_iol,ty_iol14*NUM_GRID_Y]>>,

         <pin S11_USR_DO[30] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol15 @ [sx_iol,ty_iol15*NUM_GRID_Y]>>,
         <pin S11_USR_TS[30] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol15 @ [sx_iol,ty_iol15*NUM_GRID_Y]>>,
         <pin S11_USR_DO[31] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol15 @ [sx_iol,ty_iol15*NUM_GRID_Y]>>,
         <pin S11_USR_TS[31] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol15 @ [sx_iol,ty_iol15*NUM_GRID_Y]>>,
         <pin S11_TERM90[30] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol15 @ [sx_iol,ty_iol15*NUM_GRID_Y]>>,
         <pin S11_TERM90[31] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol15 @ [sx_iol,ty_iol15*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[30] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol15 @ [sx_iol,ty_iol15*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[31] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol15 @ [sx_iol,ty_iol15*NUM_GRID_Y]>>,

         <pin S11_USR_DO[32] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol16 @ [sx_iol,ty_iol16*NUM_GRID_Y]>>,
         <pin S11_USR_TS[32] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol16 @ [sx_iol,ty_iol16*NUM_GRID_Y]>>,
         <pin S11_USR_DO[33] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol16 @ [sx_iol,ty_iol16*NUM_GRID_Y]>>,
         <pin S11_USR_TS[33] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol16 @ [sx_iol,ty_iol16*NUM_GRID_Y]>>,
         <pin S11_TERM90[32] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol16 @ [sx_iol,ty_iol16*NUM_GRID_Y]>>,
         <pin S11_TERM90[33] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol16 @ [sx_iol,ty_iol16*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[32] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol16 @ [sx_iol,ty_iol16*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[33] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol16 @ [sx_iol,ty_iol16*NUM_GRID_Y]>>,

         <pin S11_USR_DO[34] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol17 @ [sx_iol,ty_iol17*NUM_GRID_Y]>>,
         <pin S11_USR_TS[34] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol17 @ [sx_iol,ty_iol17*NUM_GRID_Y]>>,
         <pin S11_USR_DO[35] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol17 @ [sx_iol,ty_iol17*NUM_GRID_Y]>>,
         <pin S11_USR_TS[35] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol17 @ [sx_iol,ty_iol17*NUM_GRID_Y]>>,
         <pin S11_TERM90[34] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol17 @ [sx_iol,ty_iol17*NUM_GRID_Y]>>,
         <pin S11_TERM90[35] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol17 @ [sx_iol,ty_iol17*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[34] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol17 @ [sx_iol,ty_iol17*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[35] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol17 @ [sx_iol,ty_iol17*NUM_GRID_Y]>>,

         <pin S11_USR_DO[36] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol18 @ [sx_iol,ty_iol18*NUM_GRID_Y]>>,
         <pin S11_USR_TS[36] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol18 @ [sx_iol,ty_iol18*NUM_GRID_Y]>>,
         <pin S11_USR_DO[37] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol18 @ [sx_iol,ty_iol18*NUM_GRID_Y]>>,
         <pin S11_USR_TS[37] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol18 @ [sx_iol,ty_iol18*NUM_GRID_Y]>>,
         <pin S11_TERM90[36] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol18 @ [sx_iol,ty_iol18*NUM_GRID_Y]>>,
         <pin S11_TERM90[37] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol18 @ [sx_iol,ty_iol18*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[36] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol18 @ [sx_iol,ty_iol18*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[37] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol18 @ [sx_iol,ty_iol18*NUM_GRID_Y]>>,

         <pin S11_USR_DO[38] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_A of <device *device_iol19 @ [sx_iol,ty_iol19*NUM_GRID_Y]>>,
         <pin S11_USR_TS[38] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_A of <device *device_iol19 @ [sx_iol,ty_iol19*NUM_GRID_Y]>>,
         <pin S11_USR_DO[39] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire DO_B of <device *device_iol19 @ [sx_iol,ty_iol19*NUM_GRID_Y]>>,
         <pin S11_USR_TS[39] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TO_B of <device *device_iol19 @ [sx_iol,ty_iol19*NUM_GRID_Y]>>,
         <pin S11_TERM90[38] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_A of <device *device_iol19 @ [sx_iol,ty_iol19*NUM_GRID_Y]>>,
         <pin S11_TERM90[39] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>  => <wire TERM_B of <device *device_iol19 @ [sx_iol,ty_iol19*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[38] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_A of <device *device_iol19 @ [sx_iol,ty_iol19*NUM_GRID_Y]>>,
         <pin MIPI_SW_DYN[39] of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire MIPI_SW_DYN_O_B of <device *device_iol19 @ [sx_iol,ty_iol19*NUM_GRID_Y]>>,

         <pin DI_A of <device *device_iol0 @ [sx_iol,ty_iol0*NUM_GRID_Y]>>  => <wire DIN[0] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol0 @ [sx_iol,ty_iol0*NUM_GRID_Y]>>  => <wire DIN[1] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol1 @ [sx_iol,ty_iol1*NUM_GRID_Y]>>  => <wire DIN[2] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol1 @ [sx_iol,ty_iol1*NUM_GRID_Y]>>  => <wire DIN[3] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol2 @ [sx_iol,ty_iol2*NUM_GRID_Y]>>  => <wire DIN[4] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol2 @ [sx_iol,ty_iol2*NUM_GRID_Y]>>  => <wire DIN[5] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol3 @ [sx_iol,ty_iol3*NUM_GRID_Y]>>  => <wire DIN[6] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol3 @ [sx_iol,ty_iol3*NUM_GRID_Y]>>  => <wire DIN[7] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol4 @ [sx_iol,ty_iol4*NUM_GRID_Y]>>  => <wire DIN[8] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol4 @ [sx_iol,ty_iol4*NUM_GRID_Y]>>  => <wire DIN[9] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol5 @ [sx_iol,ty_iol5*NUM_GRID_Y]>>  => <wire DIN[10] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol5 @ [sx_iol,ty_iol5*NUM_GRID_Y]>>  => <wire DIN[11] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol6 @ [sx_iol,ty_iol6*NUM_GRID_Y]>>  => <wire DIN[12] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol6 @ [sx_iol,ty_iol6*NUM_GRID_Y]>>  => <wire DIN[13] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol7 @ [sx_iol,ty_iol7*NUM_GRID_Y]>>  => <wire DIN[14] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol7 @ [sx_iol,ty_iol7*NUM_GRID_Y]>>  => <wire DIN[15] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol8 @ [sx_iol,ty_iol8*NUM_GRID_Y]>>  => <wire DIN[16] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol8 @ [sx_iol,ty_iol8*NUM_GRID_Y]>>  => <wire DIN[17] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol9 @ [sx_iol,ty_iol9*NUM_GRID_Y]>>  => <wire DIN[18] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol9 @ [sx_iol,ty_iol9*NUM_GRID_Y]>>  => <wire DIN[19] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol10 @ [sx_iol,ty_iol10*NUM_GRID_Y]>>  => <wire DIN[20] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol10 @ [sx_iol,ty_iol10*NUM_GRID_Y]>>  => <wire DIN[21] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol11 @ [sx_iol,ty_iol11*NUM_GRID_Y]>>  => <wire DIN[22] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol11 @ [sx_iol,ty_iol11*NUM_GRID_Y]>>  => <wire DIN[23] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol12 @ [sx_iol,ty_iol12*NUM_GRID_Y]>>  => <wire DIN[24] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol12 @ [sx_iol,ty_iol12*NUM_GRID_Y]>>  => <wire DIN[25] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol13 @ [sx_iol,ty_iol13*NUM_GRID_Y]>>  => <wire DIN[26] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol13 @ [sx_iol,ty_iol13*NUM_GRID_Y]>>  => <wire DIN[27] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol14 @ [sx_iol,ty_iol14*NUM_GRID_Y]>>  => <wire DIN[28] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol14 @ [sx_iol,ty_iol14*NUM_GRID_Y]>>  => <wire DIN[29] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol15 @ [sx_iol,ty_iol15*NUM_GRID_Y]>>  => <wire DIN[30] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol15 @ [sx_iol,ty_iol15*NUM_GRID_Y]>>  => <wire DIN[31] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol16 @ [sx_iol,ty_iol16*NUM_GRID_Y]>>  => <wire DIN[32] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol16 @ [sx_iol,ty_iol16*NUM_GRID_Y]>>  => <wire DIN[33] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol17 @ [sx_iol,ty_iol17*NUM_GRID_Y]>>  => <wire DIN[34] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol17 @ [sx_iol,ty_iol17*NUM_GRID_Y]>>  => <wire DIN[35] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol18 @ [sx_iol,ty_iol18*NUM_GRID_Y]>>  => <wire DIN[36] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol18 @ [sx_iol,ty_iol18*NUM_GRID_Y]>>  => <wire DIN[37] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_A of <device *device_iol19 @ [sx_iol,ty_iol19*NUM_GRID_Y]>>  => <wire DIN[38] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_B of <device *device_iol19 @ [sx_iol,ty_iol19*NUM_GRID_Y]>>  => <wire DIN[39] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,

         <pin DI_MIPI_A of <device *device_iol0 @ [sx_iol,ty_iol0*NUM_GRID_Y]>>    => <wire S11_DIN_MIPI_LP[0] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol1 @ [sx_iol,ty_iol1*NUM_GRID_Y]>>    => <wire S11_DIN_MIPI_LP[1] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol2 @ [sx_iol,ty_iol2*NUM_GRID_Y]>>    => <wire S11_DIN_MIPI_LP[2] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol3 @ [sx_iol,ty_iol3*NUM_GRID_Y]>>    => <wire S11_DIN_MIPI_LP[3] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol4 @ [sx_iol,ty_iol4*NUM_GRID_Y]>>    => <wire S11_DIN_MIPI_LP[4] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol5 @ [sx_iol,ty_iol5*NUM_GRID_Y]>>    => <wire S11_DIN_MIPI_LP[5] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol6 @ [sx_iol,ty_iol6*NUM_GRID_Y]>>    => <wire S11_DIN_MIPI_LP[6] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol7 @ [sx_iol,ty_iol7*NUM_GRID_Y]>>    => <wire S11_DIN_MIPI_LP[7] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol8 @ [sx_iol,ty_iol8*NUM_GRID_Y]>>    => <wire S11_DIN_MIPI_LP[8] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol9 @ [sx_iol,ty_iol9*NUM_GRID_Y]>>    => <wire S11_DIN_MIPI_LP[9] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol10 @ [sx_iol,ty_iol10*NUM_GRID_Y]>>  => <wire S11_DIN_MIPI_LP[10] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol11 @ [sx_iol,ty_iol11*NUM_GRID_Y]>>  => <wire S11_DIN_MIPI_LP[11] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol12 @ [sx_iol,ty_iol12*NUM_GRID_Y]>>  => <wire S11_DIN_MIPI_LP[12] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol13 @ [sx_iol,ty_iol13*NUM_GRID_Y]>>  => <wire S11_DIN_MIPI_LP[13] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol14 @ [sx_iol,ty_iol14*NUM_GRID_Y]>>  => <wire S11_DIN_MIPI_LP[14] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol15 @ [sx_iol,ty_iol15*NUM_GRID_Y]>>  => <wire S11_DIN_MIPI_LP[15] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol16 @ [sx_iol,ty_iol16*NUM_GRID_Y]>>  => <wire S11_DIN_MIPI_LP[16] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol17 @ [sx_iol,ty_iol17*NUM_GRID_Y]>>  => <wire S11_DIN_MIPI_LP[17] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol18 @ [sx_iol,ty_iol18*NUM_GRID_Y]>>  => <wire S11_DIN_MIPI_LP[18] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,
         <pin DI_MIPI_A of <device *device_iol19 @ [sx_iol,ty_iol19*NUM_GRID_Y]>>  => <wire S11_DIN_MIPI_LP[19] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>,


         <pin S11_OPEN_DRAIN_EN of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => ((tx==0)&&(ty==(num_rx-1)*NUM_TILES_REGION)) ? <wire S11_TIHI_S[7] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>
                                                                                                               : <wire S11_TILO_S[7] of <device IOB_WO_ODIFF_TILE @[sx,sy]>>
      );

      STRUCT inc_spec_IOB incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB,ty_srb,sx_srb;

      foreach incVar(inc_IOB_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          ty_srb = ty + loc_SRB;

          sx_srb = ((tx<tx_hmemc0)&&(ty_srb>=s_hmemc)&&(ty_srb<=n_hmemc)) ? sx+NUM_GRID_HMEMC_X+NUM_GRID_X : 
                    ((tx>tx_hmemc1)&&(ty_srb>=s_hmemc)&&(ty_srb<=n_hmemc)) ? sx-NUM_GRID_HMEMC_X-NUM_GRID_X :
                                                  (tx==0) ? sx+NUM_GRID_X : sx-NUM_GRID_X;

          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device IOB_WO_ODIFF_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_SRB]>> =>  <wire *pin_logic_device of <device IOB_WO_ODIFF_TILE @[sx,sy]>>); 
          }
      }         

}//end of function place_iob_wo_tile
/********************************************************************************
********************************************************************************/
function place_pll_tile(unsigned int tx,ty,flag)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;
    sprintf(strVar,"ntLOCK_%d_%d",sx,sy);
    &wire ntRef_ntLOCK = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntLOCK_LOCAL_%d_%d",sx,sy);
    &wire ntRef_ntLOCK_LOCAL = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntFBDLY_OB_%d_%d",sx,sy);
    &wire ntRef_ntFBDLY_OB = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLKSWITCH_FLAG_%d_%d",sx,sy);
    &wire ntRef_ntCLKSWITCH_FLAG = wire *strVar;

    sprintf(strVar,"ntCLK_OUT0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT0 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUT1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT1 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUT2_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT2 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUT3_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT3 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUT4_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT4 = wire *strVar              /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUT4_CAS_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT4_CAS = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    //sprintf(strVar,"ntCLK_OUT_ADC_%d_%d",sx,sy);
    //&wire ntRef_ntCLK_OUT_ADC = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUT_EXT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT_EXT = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUT0_WL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT0_WL = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUT_5MUX1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUT_5MUX1 = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar,"ntVCP_%d_%d",sx,sy);
    &wire ntRef_ntVCP = wire *strVar;

    sprintf(strVar,"ntCLK_GLOBAL_R_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_R[7:0] = wire *strVar[7:0]    /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_GLOBAL_L_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_L[7:0] = wire *strVar[7:0]    /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_PREGM_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PREGM_OUT[7:0] = wire *strVar[7:0]    /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntTEST_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTEST_OUT = wire *strVar  ;


    sprintf(strVar, "PLL_TILE_%d_%d", sx, sy);
    
    device PLL_TILE *strVar
         port map (
                    LOCK          => ntRef_ntLOCK, 
                    LOCK_LOCAL    => ntRef_ntLOCK_LOCAL,
                    CLKSWITCH_FLAG=> ntRef_ntCLKSWITCH_FLAG,
                    FBDLY_OB      => ntRef_ntFBDLY_OB,
                    CLK_OUT0      => ntRef_ntCLK_OUT0,
                    CLK_OUT0_WL   => ntRef_ntCLK_OUT0_WL,
                    CLK_OUT1      => ntRef_ntCLK_OUT1,
                    CLK_OUT2      => ntRef_ntCLK_OUT2,
                    CLK_OUT3      => ntRef_ntCLK_OUT3,
                    CLK_OUT4      => ntRef_ntCLK_OUT4,
                    CLK_OUT4_CAS  => ntRef_ntCLK_OUT4_CAS,
                    //CLK_OUT_ADC   => ntRef_ntCLK_OUT_ADC,
                    CLK_OUT_EXT   => ntRef_ntCLK_OUT_EXT,
                    CLK_OUT_5MUX1 => ntRef_ntCLK_OUT_5MUX1,
                    VCP           => ntRef_ntVCP,
                    TIEHI         => ntRef_ntTIEHI,
                    CLK_GLOBAL_L  => ntRef_ntCLK_GLOBAL_L,
                    CLK_GLOBAL_R  => ntRef_ntCLK_GLOBAL_R,
                    CLK_PREGM_OUT => ntRef_ntCLK_PREGM_OUT,
                    TEST_OUT      => ntRef_ntTEST_OUT
                  )
        @([sx,sy]);
     
    if(flag==0)
    {
      STRUCT inc_spec_PLL_B incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_PLL_B_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device PLL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-2,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx-2,sy_SRB]>> => (incVar.port_name_device=="TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx-2,sy_SRB]>>
                                                                         : <wire *pin_logic_device of <device PLL_TILE @[sx,sy]>>); 
          }
      } 
    } 
    else       
    {
      STRUCT inc_spec_PLL_T incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;

      foreach incVar(inc_PLL_T_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device PLL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-2,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx-2,sy_SRB]>> => (incVar.port_name_device=="TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx-2,sy_SRB]>>
                                                                         : <wire *pin_logic_device of <device PLL_TILE @[sx,sy]>>); 
          }
      } 
    }      

int tx_esd = ESD_PGL12G_TILE_X;
int ty_esd = ESD_PGL12G_TILE_Y;

int sx_esd = tx_esd * NUM_GRID_X;
int sy_esd = ty_esd * NUM_GRID_Y;

    connect(
                 <pin VDD11_GCLK of <device PLL_TILE @[sx,sy]>> => <wire VDD11_GCLK of <device ESD_PGL12G_TILE @[sx_esd,sy_esd]>>
               );

}// end of function place_pll_tile

/********************************************************************************
********************************************************************************/
function place_iol_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntRX_DATA_A_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_A[7:0] = wire *strVar[7:0]   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_DATA_B_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_B[7:0] = wire *strVar[7:0]   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIODLY_OV_A_%d_%d",sx,sy);
    &wire ntRef_ntIODLY_OV_A = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_DATA_DD_A_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_DD_A = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_DATA_IFF_A_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_IFF_A = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIODLY_OV_B_%d_%d",sx,sy);
    &wire ntRef_ntIODLY_OV_B = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_DATA_DD_B_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_DD_B = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_DATA_IFF_B_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_IFF_B = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDO_A_%d_%d",sx,sy);
    &wire ntRef_ntDO_A = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDO_B_%d_%d",sx,sy);
    &wire ntRef_ntDO_B = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTO_A_%d_%d",sx,sy);
    &wire ntRef_ntTO_A = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTO_B_%d_%d",sx,sy);
    &wire ntRef_ntTO_B = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntINCK_A_%d_%d",sx,sy);
    &wire ntRef_ntINCK_A = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntINCK_B_%d_%d",sx,sy);
    &wire ntRef_ntINCK_B = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntTERM_A_%d_%d",sx,sy);
    &wire ntRef_ntTERM_A = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM_B_%d_%d",sx,sy);
    &wire ntRef_ntTERM_B = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMIPI_SW_DYN_O_A_%d_%d",sx,sy);
    &wire ntRef_ntMIPI_SW_DYN_O_A = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntMIPI_SW_DYN_O_B_%d_%d",sx,sy);
    &wire ntRef_ntMIPI_SW_DYN_O_B = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTIELO_%d_%d",sx,sy);
    &wire ntRef_ntTIELO = wire *strVar;

    sprintf(strVar, "IOL_TILE_%d_%d", sx, sy);
    
    device IOL_TILE *strVar
         port map (
                   IODLY_OV_A    =>  ntRef_ntIODLY_OV_A ,
                   RX_DATA_A     =>  ntRef_ntRX_DATA_A,
                   RX_DATA_DD_A  =>  ntRef_ntRX_DATA_DD_A,
                   IODLY_OV_B    =>  ntRef_ntIODLY_OV_B ,
                   RX_DATA_B       =>  ntRef_ntRX_DATA_B,
                   RX_DATA_DD_B    =>  ntRef_ntRX_DATA_DD_B,
                   DO_A            =>  ntRef_ntDO_A,
                   DO_B            =>  ntRef_ntDO_B,
                   TO_A            =>  ntRef_ntTO_A,
                   TO_B            =>  ntRef_ntTO_B,
                   INCK_A          =>  ntRef_ntINCK_A,
                   INCK_B          =>  ntRef_ntINCK_B,
                   TERM_A          =>  ntRef_ntTERM_A,
                   TERM_B          =>  ntRef_ntTERM_B,
                   MIPI_SW_DYN_O_A => ntRef_ntMIPI_SW_DYN_O_A,
                   MIPI_SW_DYN_O_B => ntRef_ntMIPI_SW_DYN_O_B,
                   TIELO           => ntRef_ntTIELO

                  )
        @([sx,sy]);

      STRUCT inc_spec_IOL incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;
   
      unsigned int sx_SRB;
      sx_SRB = sx-2;
      int cnt;

      foreach incVar(inc_IOL_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_SRB = sy;
          }
          else
          {
            sy_SRB = sy + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
            connect(<pin *pin_logic_device of <device IOL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_SRB,sy_SRB]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy_SRB]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE @ [sx_SRB,sy_SRB]>>
                                                                                                               : <wire *pin_logic_device of <device IOL_TILE @[sx,sy]>>);
          }
      }               
}// end of function place_iol_tile
/********************************************************************************
********************************************************************************/
function place_cramsl2_tile(unsigned int tx,ty)
{
 

  unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;

    
    string strVar;
    
    sprintf(strVar,"ntOUT_%d_%d",sx,sy);
    &wire ntRef_ntOUT[19:0] = wire *strVar[19:0];

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;


    sprintf(strVar, "CRAMSL2_TILE_%d_%d", sx, sy);

    device CRAMSL2_TILE *strVar

    port map (
                   OUT => ntRef_ntOUT,
                   TIEHI  => ntRef_ntTIEHI
                )
        @([sx,sy]);
    
}
/********************************************************************************
********************************************************************************/
function place_hmemciol_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntRX_DATA_A_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_A[7:0] = wire *strVar[7:0]   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_DATA_B_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_B[7:0] = wire *strVar[7:0]   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIODLY_OV_A_%d_%d",sx,sy);
    &wire ntRef_ntIODLY_OV_A = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_DATA_DD_A_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_DD_A = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_DATA_IFF_A_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_IFF_A = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIODLY_OV_B_%d_%d",sx,sy);
    &wire ntRef_ntIODLY_OV_B = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_DATA_DD_B_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_DD_B = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRX_DATA_IFF_B_%d_%d",sx,sy);
    &wire ntRef_ntRX_DATA_IFF_B = wire *strVar         /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDO_A_%d_%d",sx,sy);
    &wire ntRef_ntDO_A = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDO_B_%d_%d",sx,sy);
    &wire ntRef_ntDO_B = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTO_A_%d_%d",sx,sy);
    &wire ntRef_ntTO_A = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTO_B_%d_%d",sx,sy);
    &wire ntRef_ntTO_B = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntINCK_A_%d_%d",sx,sy);
    &wire ntRef_ntINCK_A = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntINCK_B_%d_%d",sx,sy);
    &wire ntRef_ntINCK_B = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntTERM_A_%d_%d",sx,sy);
    &wire ntRef_ntTERM_A = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTERM_B_%d_%d",sx,sy);
    &wire ntRef_ntTERM_B = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMIPI_SW_DYN_O_A_%d_%d",sx,sy);
    &wire ntRef_ntMIPI_SW_DYN_O_A = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntMIPI_SW_DYN_O_B_%d_%d",sx,sy);
    &wire ntRef_ntMIPI_SW_DYN_O_B = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntTIELO_%d_%d",sx,sy);
    &wire ntRef_ntTIELO = wire *strVar;


    sprintf(strVar, "HMEMCIOL_TILE_%d_%d", sx, sy);
    
    device HMEMCIOL_TILE *strVar
       port map (
                   IODLY_OV_A      =>  ntRef_ntIODLY_OV_A ,
                   RX_DATA_A       =>  ntRef_ntRX_DATA_A,
                   RX_DATA_DD_A    =>  ntRef_ntRX_DATA_DD_A,
                   IODLY_OV_B      =>  ntRef_ntIODLY_OV_B ,
                   RX_DATA_B       =>  ntRef_ntRX_DATA_B,
                   RX_DATA_DD_B    =>  ntRef_ntRX_DATA_DD_B,
                   DO_A            =>  ntRef_ntDO_A,
                   DO_B            =>  ntRef_ntDO_B,
                   TO_A            =>  ntRef_ntTO_A,
                   TO_B            =>  ntRef_ntTO_B,
                   INCK_A          =>  ntRef_ntINCK_A,
                   INCK_B          =>  ntRef_ntINCK_B,
                   TERM_A          =>  ntRef_ntTERM_A,
                   TERM_B          =>  ntRef_ntTERM_B,
                   MIPI_SW_DYN_O_A => ntRef_ntMIPI_SW_DYN_O_A,
                   MIPI_SW_DYN_O_B => ntRef_ntMIPI_SW_DYN_O_B,
                   TIELO           => ntRef_ntTIELO
                )
        @([sx,sy]);

      STRUCT inc_spec_HMEMCIOL incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_SRB;
   
      unsigned int sx_SRB;
      sx_SRB = (tx==1) ? sx+NUM_GRID_HMEMC_X-2 : sx-NUM_GRID_HMEMC_X-2;
      int cnt;

      foreach incVar(inc_HMEMCIOL_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
         
          
          if(attribute_IO =="I")
          { 
            
            connect(<pin *pin_logic_device of <device HMEMCIOL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_SRB,sy]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_SRB,sy]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE @ [sx_SRB,sy]>>
                                                                                                           : <wire *pin_logic_device of <device HMEMCIOL_TILE @[sx,sy]>>);
          }
      }               

        
}// end of function place_hmemciol_tile
/********************************************************************************
********************************************************************************/
function place_dqsl_tile(unsigned int tx,ty,flag)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;

    sprintf(strVar,"ntWL_OV_%d_%d",sx,sy);
    &wire ntRef_ntWL_OV = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntRDEL_OV_%d_%d",sx,sy);
    &wire ntRef_ntRDEL_OV = wire *strVar               /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDGTS_%d_%d",sx,sy);
    &wire ntRef_ntDGTS = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_DQSI_DEL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_DQSI_DEL = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_W_DEL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_W_DEL = wire *strVar             /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_W_%d_%d",sx,sy);
    &wire ntRef_ntCLK_W = wire *strVar                 /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntIFIFO_WADDR_%d_%d",sx,sy);
    &wire ntRef_ntIFIFO_WADDR[2:0] = wire *strVar[2:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIFIFO_RADDR_%d_%d",sx,sy);
    &wire ntRef_ntIFIFO_RADDR[2:0] = wire *strVar[2:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
   
    sprintf(strVar,"ntREAD_VALID_%d_%d",sx,sy);
    &wire ntRef_ntREAD_VALID = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntGATE_TO_LOOP_%d_%d",sx,sy);
    &wire ntRef_ntGATE_TO_LOOP = wire *strVar;

    sprintf(strVar,"ntDQS_TILO_%d_%d",sx,sy);
    &wire ntRef_ntDQS_TILO = wire *strVar;

    sprintf(strVar,"ntDQS_TIHI_%d_%d",sx,sy);
    &wire ntRef_ntDQS_TIHI = wire *strVar;

    sprintf(strVar,"ntDLL_CODE0_BUF_%d_%d",sx,sy);
    &wire ntRef_ntDLL_CODE0_BUF[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntDLL_CODE1_BUF_%d_%d",sx,sy);
    &wire ntRef_ntDLL_CODE1_BUF[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntDLL_CODE2_BUF_%d_%d",sx,sy);
    &wire ntRef_ntDLL_CODE2_BUF[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCLK_IOL_T_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOL_T_OUT[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_IOL_B_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOL_B_OUT[1:0] = wire *strVar[1:0]       /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_R_%d_%d",sx,sy);
    &wire ntRef_ntCLK_R = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntDQS_DRIFT_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DRIFT[1:0] = wire *strVar[1:0]           /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDRIFT_DETECT_ERR_%d_%d",sx,sy);
    &wire ntRef_ntDRIFT_DETECT_ERR = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_DRIFT_STATUS_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DRIFT_STATUS = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    if(flag==1)
    {
      sprintf(strVar,"HMEMCDQSL_TILE_%d_%d",sx,sy);
      device HMEMCDQSL_TILE *strVar
        port map
          (
              WL_OV        => ntRef_ntWL_OV,
              RDEL_OV      => ntRef_ntRDEL_OV,
              DGTS         => ntRef_ntDGTS,
              READ_VALID   => ntRef_ntREAD_VALID,
              CLK_DQSI_DEL => ntRef_ntCLK_DQSI_DEL,
              CLK_W_DEL    => ntRef_ntCLK_W_DEL,
              CLK_W        => ntRef_ntCLK_W,
              IFIFO_WADDR  => ntRef_ntIFIFO_WADDR,
              IFIFO_RADDR  => ntRef_ntIFIFO_RADDR,
              DQS_TILO     => ntRef_ntDQS_TILO,
              DQS_TIHI     => ntRef_ntDQS_TIHI,
              GATE_TO_LOOP => ntRef_ntGATE_TO_LOOP,
              CLK_IOL_T_OUT=> ntRef_ntCLK_IOL_T_OUT,
              CLK_IOL_B_OUT=> ntRef_ntCLK_IOL_B_OUT,
              DLL_CODE0_BUF=> ntRef_ntDLL_CODE0_BUF,
              DLL_CODE1_BUF=> ntRef_ntDLL_CODE1_BUF,
              DLL_CODE2_BUF=> ntRef_ntDLL_CODE2_BUF,
              CLK_R        => ntRef_ntCLK_R,
              DQS_DRIFT            => ntRef_ntDQS_DRIFT,
              DRIFT_DETECT_ERR    => ntRef_ntDRIFT_DETECT_ERR,
              DQS_DRIFT_STATUS    => ntRef_ntDQS_DRIFT_STATUS
          )
          @([sx,sy]);

      STRUCT inc_spec_HMEMCDQSL incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      string direct_SRB;

      int sx_srb = (tx==1) ? sx+NUM_GRID_HMEMC_X-2 : sx-NUM_GRID_HMEMC_X-2;

      foreach incVar(inc_HMEMCDQSL_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
                   
          if(attribute_IO =="I")
          {       
            connect(<pin *pin_logic_device of <device HMEMCDQSL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE @ [sx_srb,sy]>>
                                                                                                           : <wire *pin_logic_device of <device HMEMCDQSL_TILE @[sx,sy]>>); 
          }
      }  
    }
    else
    {
      sprintf(strVar,"DQSL_TILE_%d_%d",sx,sy);
      device DQSL_TILE *strVar
        port map
          (
              WL_OV        => ntRef_ntWL_OV,
              RDEL_OV      => ntRef_ntRDEL_OV,
              DGTS         => ntRef_ntDGTS,
              READ_VALID   => ntRef_ntREAD_VALID,
              CLK_DQSI_DEL => ntRef_ntCLK_DQSI_DEL,
              CLK_W_DEL    => ntRef_ntCLK_W_DEL,
              CLK_W        => ntRef_ntCLK_W,
              IFIFO_WADDR  => ntRef_ntIFIFO_WADDR,
              IFIFO_RADDR  => ntRef_ntIFIFO_RADDR,
              DQS_TILO     => ntRef_ntDQS_TILO,
              DQS_TIHI     => ntRef_ntDQS_TIHI,
              GATE_TO_LOOP => ntRef_ntGATE_TO_LOOP,
              CLK_IOL_T_OUT=> ntRef_ntCLK_IOL_T_OUT,
              CLK_IOL_B_OUT=> ntRef_ntCLK_IOL_B_OUT,
              DLL_CODE0_BUF=> ntRef_ntDLL_CODE0_BUF,
              DLL_CODE1_BUF=> ntRef_ntDLL_CODE1_BUF,
              DLL_CODE2_BUF=> ntRef_ntDLL_CODE2_BUF,
              CLK_R        => ntRef_ntCLK_R,
              DQS_DRIFT            => ntRef_ntDQS_DRIFT,
              DRIFT_DETECT_ERR    => ntRef_ntDRIFT_DETECT_ERR,
              DQS_DRIFT_STATUS    => ntRef_ntDQS_DRIFT_STATUS
           )
          @([sx,sy]);

      STRUCT inc_spec_DQSL incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      string direct_SRB;

      foreach incVar(inc_DQSL_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
                   
          if(attribute_IO =="I")
          {       
            connect(<pin *pin_logic_device of <device DQSL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx-2,sy]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx-2,sy]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE @ [sx-2,sy]>>
                                                                                                         : <wire *pin_logic_device of <device DQSL_TILE @[sx,sy]>>); 
          }
      }  

    }
}
/********************************************************************************
********************************************************************************/
function place_hmemciockgatedll_tile(unsigned int tx,ty,s_hmemc,n_hmemc,num_tile_x)
{
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntCTRL_CODE_%d_%d",sx,sy);
    &wire ntRef_ntCTRL_CODE[7:0] = wire *strVar[7:0]   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCTRL_CODE_T_%d_%d",sx,sy);
    &wire ntRef_ntCTRL_CODE_T[7:0] = wire *strVar[7:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDIV_OSCCLK_T_%d_%d",sx,sy);
    &wire ntRef_ntDIV_OSCCLK_T = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntDIV_CLKIN_T_%d_%d",sx,sy);
    &wire ntRef_ntDIV_CLKIN_T = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntLOCK_%d_%d",sx,sy);
    &wire ntRef_ntLOCK = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_XTAL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_XTAL = wire *strVar                /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_PIO0_P_TBUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO0_P_TBUF = wire *strVar        /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_PIO_P_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_P_OUT_0 = wire *strVar        /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_PIO_N_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_N_OUT_0 = wire *strVar        /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_PIO_P_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_P_OUT_1 = wire *strVar        /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_PIO_N_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_N_OUT_1 = wire *strVar        /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_IOCK_B_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOCK_B[1:0] = wire *strVar[1:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_IOL_C_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOL_C[1:0] = wire *strVar[1:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_IOCK_T_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOCK_T[1:0] = wire *strVar[1:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLOCK_DR_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_OUT = wire *strVar;

    sprintf(strVar,"ntCLKG_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLKG_OUT = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_ADC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC_OUT = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntGLOGEN_FB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_FB_OUT = wire *strVar;

    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntIOCKDLY_COUT_P_1_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_P_1 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIOCKDLY_COUT_N_1_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_N_1 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIOCKDLY_COUT_P_0_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_P_0 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIOCKDLY_COUT_N_0_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_N_0 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntREGION_INC_%d_%d",sx,sy);
    &wire ntRef_ntREGION_INC = wire *strVar;

    sprintf(strVar,"ntGOUTEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_OUT = wire *strVar;

    sprintf(strVar,"ntDLL_TILO_%d_%d",sx,sy);
    &wire ntRef_ntDLL_TILO = wire *strVar;

    sprintf(strVar,"ntDLL_TIHI_%d_%d",sx,sy);
    &wire ntRef_ntDLL_TIHI = wire *strVar;

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntS11_PAD_STATE_OUT_%d_%d",sx,sy);
    &wire ntRef_ntS11_PAD_STATE_OUT = wire *strVar;

    sprintf(strVar,"ntRCLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntRCLK_OUT[3:0] = wire *strVar[3:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCAL_DONE_OUT_%d_%d",sx,sy);    
    &wire ntRef_ntCAL_DONE_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_A_IOL_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_A_IOL_OUT[1:0] = wire *strVar[1:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_PLL_EXT_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PLL_EXT_OUT = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntTIE_LO_1V1_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTIE_LO_1V1 = wire *strVar;

    sprintf(strVar,"ntBUS2_CLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS2_CLK_OUT[9:0] = wire *strVar[9:0]            /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_IODIV_HMEMC_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IODIV_HMEMC[1:0] = wire *strVar[1:0]           /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntBUS_BSCAN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_BSCAN_OUT[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntBUS_GSEB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUT[5:0] = wire *strVar[5:0];

    sprintf(strVar, "HMEMCIOCKGATEDLL_TILE_%d_%d", sx, sy);
    device HMEMCIOCKGATEDLL_TILE *strVar
         port map (
                    ADDR           => ntRef_ntADDR,

                    CLK_PIO0_P_TBUF => ntRef_ntCLK_PIO0_P_TBUF,
                    CLK_IOCK_B      => ntRef_ntCLK_IOCK_B,
                    CLK_IOCK_T      => ntRef_ntCLK_IOCK_T,

                    CTRL_CODE      => ntRef_ntCTRL_CODE,
                    CTRL_CODE_T    => ntRef_ntCTRL_CODE_T,
                    DIV_OSCCLK_T   => ntRef_ntDIV_OSCCLK_T,
                    DIV_CLKIN_T    => ntRef_ntDIV_CLKIN_T,
                    RCLK_OUT        => ntRef_ntRCLK_OUT,
                    CLK_PLL_EXT_OUT => ntRef_ntCLK_PLL_EXT_OUT,
                    BUS2_CLK_OUT    => ntRef_ntBUS2_CLK_OUT,
                    BUS_BSCAN_OUT   => ntRef_ntBUS_BSCAN_OUT,
                    BUS_GSEB_OUT    => ntRef_ntBUS_GSEB_OUT,

                    CLK_PIO_P_OUT_0 => ntRef_ntCLK_PIO_P_OUT_0,
                    CLK_PIO_N_OUT_0 => ntRef_ntCLK_PIO_N_OUT_0,
                    CLK_PIO_P_OUT_1 => ntRef_ntCLK_PIO_P_OUT_1,
                    CLK_PIO_N_OUT_1 => ntRef_ntCLK_PIO_N_OUT_1,
                    IOCKDLY_COUT_P_0 => ntRef_ntIOCKDLY_COUT_P_0,
                    IOCKDLY_COUT_N_0 => ntRef_ntIOCKDLY_COUT_N_0,
                    IOCKDLY_COUT_P_1 => ntRef_ntIOCKDLY_COUT_P_1,
                    IOCKDLY_COUT_N_1 => ntRef_ntIOCKDLY_COUT_N_1,
                    CLK_IODIV_HMEMC  => ntRef_ntCLK_IODIV_HMEMC,

                    LOCK           => ntRef_ntLOCK,
                    COL_INC_OUT    => ntRef_ntCOL_INC_OUT,
                    REGION_INC     => ntRef_ntREGION_INC,
                    S11_PAD_STATE_OUT=> ntRef_ntS11_PAD_STATE_OUT,
                    CLK_ADC_OUT      => ntRef_ntCLK_ADC_OUT,
                    CLOCK_DR_OUT     => ntRef_ntCLOCK_DR_OUT,
                    GLOGEN_FB_OUT    => ntRef_ntGLOGEN_FB_OUT,
                    GLOGEN_OUT       => ntRef_ntGLOGEN_OUT,
                    DLL_TILO         => ntRef_ntDLL_TILO,
                    DLL_TIHI         => ntRef_ntDLL_TIHI,
                    CS_OUT           => ntRef_ntCS_OUT,
                    CAL_DONE_OUT     => ntRef_ntCAL_DONE_OUT
                  )
        @([sx,sy]);

      STRUCT inc_spec_HMEMCIOCKGATEDLL incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB,ty_srb;
      int sx_srb,sy_srb;

      foreach incVar(inc_HMEMCIOCKGATEDLL_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;

          ty_srb = (loc_SRB==0) ? ty : ty+2;
          sy_srb = ty_srb * NUM_GRID_Y;          
          sx_srb = (tx==1) ? (sx+NUM_GRID_HMEMC_X-2) : sx-NUM_GRID_HMEMC_X-2;

          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device HMEMCIOCKGATEDLL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect
            (
              <pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE @ [sx_srb,sy_srb]>>
                                                                                                         : <wire *pin_logic_device of <device HMEMCIOCKGATEDLL_TILE @[sx,sy]>>
            ); 
          }
      }


 }//end of function place_hmemciockgatedll_tile
/********************************************************************************************************
*********************************************************************************************************/
function place_blsr_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_BLSR_Y;
    
    string strVar;

    sprintf(strVar,"ntCOL_R_O_%d_%d",sx,sy);
    &wire ntRef_ntCOL_R_O[6:0] = wire *strVar[6:0];

    sprintf(strVar,"ntCOL_L_O_%d_%d",sx,sy);
    &wire ntRef_ntCOL_L_O[6:0] = wire *strVar[6:0];

    sprintf(strVar,"ntCOL_R_N_O_%d_%d",sx,sy);
    &wire ntRef_ntCOL_R_N_O[6:0] = wire *strVar[6:0];

    sprintf(strVar,"ntCOL_L_N_O_%d_%d",sx,sy);
    &wire ntRef_ntCOL_L_N_O[6:0] = wire *strVar[6:0];

    sprintf(strVar,"ntPOR_N_OL_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OL = wire *strVar;

    sprintf(strVar,"ntPOR_N_OR_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OR = wire *strVar;

    sprintf(strVar,"ntPROG_ON_O_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON_O = wire *strVar;

    sprintf(strVar,"ntPROG_ON_R_O_%d_%d",sx,sy);
    &wire ntRef_ntPROG_ON_R_O = wire *strVar;

    sprintf(strVar,"ntTYPE_O_%d_%d",sx,sy);
    &wire ntRef_ntTYPE_O = wire *strVar;

    sprintf(strVar,"ntPRECHG_O_%d_%d",sx,sy);
    &wire ntRef_ntPRECHG_O = wire *strVar;

    sprintf(strVar,"ntERASE_R_O_%d_%d",sx,sy);
    &wire ntRef_ntERASE_R_O = wire *strVar;

    sprintf(strVar,"ntREGION_CTRL_OL_%d_%d",sx,sy);
    &wire ntRef_ntREGION_CTRL_OL = wire *strVar;

    sprintf(strVar,"ntREGION_CTRL_OR_%d_%d",sx,sy);
    &wire ntRef_ntREGION_CTRL_OR = wire *strVar;

    sprintf(strVar,"ntWLSR_REF_%d_%d",sx,sy);
    &wire ntRef_ntWLSR_REF[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntDATA_%d_%d",sx,sy);
    &wire ntRef_ntDATA[2175:0] = wire *strVar[2175:0];

    sprintf(strVar,"ntDATAN_%d_%d",sx,sy);
    &wire ntRef_ntDATAN[2175:0] = wire *strVar[2175:0];

    sprintf(strVar,"ntDATA_TO_NEXT_%d_%d",sx,sy);
    &wire ntRef_ntDATA_TO_NEXT[31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntDSROUTTO_CONFIG_%d_%d",sx,sy);
    &wire ntRef_ntDSROUTTO_CONFIG[31:0] = wire *strVar[31:0];

    sprintf(strVar,"ntCLKOUT_M_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUT_M = wire *strVar;

    sprintf(strVar,"ntERASE_EN_O_%d_%d",sx,sy);
    &wire ntRef_ntERASE_EN_O = wire *strVar;

    sprintf(strVar,"ntPOR_ERASE_N_O_%d_%d",sx,sy);
    &wire ntRef_ntPOR_ERASE_N_O = wire *strVar;

    sprintf(strVar,"ntPROG_CAP_O_%d_%d",sx,sy);
    &wire ntRef_ntPROG_CAP_O = wire *strVar;

    sprintf(strVar,"ntREAD_O_%d_%d",sx,sy);
    &wire ntRef_ntREAD_O = wire *strVar;

    sprintf(strVar,"ntRDBK_CAP_O_%d_%d",sx,sy);
    &wire ntRef_ntRDBK_CAP_O = wire *strVar;

    sprintf(strVar,"ntWL_ON_O_%d_%d",sx,sy);
    &wire ntRef_ntWL_ON_O = wire *strVar;

    sprintf(strVar,"ntPD_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPD_OUT = wire *strVar;

    sprintf(strVar,"ntPUB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPUB_OUT = wire *strVar;

    sprintf(strVar,"ntBLSR_SEL_O_%d_%d",sx,sy);
    &wire ntRef_ntBLSR_SEL_O[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntWLSR_SEL_O_%d_%d",sx,sy);
    &wire ntRef_ntWLSR_SEL_O[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntREGION_RW_EN_O_%d_%d",sx,sy);
    &wire ntRef_ntREGION_RW_EN_O[11:0] = wire *strVar[11:0];

    sprintf(strVar,"ntDRM_REG_INC_O_%d_%d",sx,sy);
    &wire ntRef_ntDRM_REG_INC_O = wire *strVar;

    sprintf(strVar,"ntDRM_END_O_%d_%d",sx,sy);
    &wire ntRef_ntDRM_END_O = wire *strVar;

    sprintf(strVar,"ntNONDRM_REG_INC_O_%d_%d",sx,sy);
    &wire ntRef_ntNONDRM_REG_INC_O = wire *strVar;

    sprintf(strVar,"ntNONDRM_END_O_%d_%d",sx,sy);
    &wire ntRef_ntNONDRM_END_O = wire *strVar;

    sprintf(strVar,"ntFRAME_ADDR_O_%d_%d",sx,sy);
    &wire ntRef_ntFRAME_ADDR_O[7:0] = wire *strVar[7:0];

    sprintf(strVar,"ntCOL_INC_O_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_O = wire *strVar;

    sprintf(strVar,"ntCOL_IN_O_%d_%d",sx,sy);
    &wire ntRef_ntCOL_IN_O[6:0] = wire *strVar[6:0];

    sprintf(strVar,"ntRSTN_O_%d_%d",sx,sy);
    &wire ntRef_ntRSTN_O = wire *strVar;

    sprintf(strVar,"ntDRM_END_LOCAL_%d_%d",sx,sy);
    &wire ntRef_ntDRM_END_LOCAL = wire *strVar;

    sprintf(strVar,"ntNONDRM_END_LOCAL_%d_%d",sx,sy);
    &wire ntRef_ntNONDRM_END_LOCAL = wire *strVar;

    sprintf(strVar,"ntTIEL1_%d_%d",sx,sy);
    &wire ntRef_ntTIEL1 = wire *strVar;

    sprintf(strVar,"ntTIEL2_%d_%d",sx,sy);
    &wire ntRef_ntTIEL2 = wire *strVar;

    sprintf(strVar,"ntCLKG_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLKG_OUT = wire *strVar;

    sprintf(strVar,"ntCLKG_L_%d_%d",sx,sy);
    &wire ntRef_ntCLKG_L = wire *strVar;

    sprintf(strVar,"ntCLKG_R_%d_%d",sx,sy);
    &wire ntRef_ntCLKG_R = wire *strVar;

    sprintf(strVar,"ntCLK_ADC_L_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC_L = wire *strVar;

    sprintf(strVar,"ntCLK_ADC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_ADC_R_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC_R = wire *strVar;

    sprintf(strVar,"ntCLK_USER_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USER_OUT = wire *strVar;

    sprintf(strVar,"ntGRS_N_OUT_M_%d_%d",sx,sy);
    &wire ntRef_ntGRS_N_OUT_M = wire *strVar;

    sprintf(strVar,"ntPOR_N_OUT_M_%d_%d",sx,sy);
    &wire ntRef_ntPOR_N_OUT_M = wire *strVar;

    sprintf(strVar,"ntGWEN_OUT_M_%d_%d",sx,sy);
    &wire ntRef_ntGWEN_OUT_M = wire *strVar;

    sprintf(strVar,"ntPUP_REL_N_OUT_M_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OUT_M = wire *strVar;

    sprintf(strVar,"ntGOUTEN_OUT_M_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_OUT_M = wire *strVar;

    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_REL_OUT_M_%d_%d",sx,sy);
    &wire ntRef_ntCLK_REL_OUT_M = wire *strVar;

    sprintf(strVar,"ntTS_ALL_OUT_M_%d_%d",sx,sy);
    &wire ntRef_ntTS_ALL_OUT_M = wire *strVar;

    sprintf(strVar,"ntMEM_INIT_OUT_M_%d_%d",sx,sy);
    &wire ntRef_ntMEM_INIT_OUT_M = wire *strVar;

    sprintf(strVar,"ntDCI_INIT_%d_%d",sx,sy);
    &wire ntRef_ntDCI_INIT = wire *strVar;

    sprintf(strVar,"ntMCLKB_O_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_O = wire *strVar;

    sprintf(strVar,"ntMCE_O_%d_%d",sx,sy);
    &wire ntRef_ntMCE_O = wire *strVar;

    sprintf(strVar,"ntMWR_O_%d_%d",sx,sy);
    &wire ntRef_ntMWR_O = wire *strVar;

    sprintf(strVar,"ntMCLKB_OL_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OL = wire *strVar;

    sprintf(strVar,"ntMCE_OL_%d_%d",sx,sy);
    &wire ntRef_ntMCE_OL = wire *strVar;

    sprintf(strVar,"ntMWR_OL_%d_%d",sx,sy);
    &wire ntRef_ntMWR_OL = wire *strVar;

    sprintf(strVar,"ntMCLKB_OR_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OR = wire *strVar;

    sprintf(strVar,"ntMCE_OR_%d_%d",sx,sy);
    &wire ntRef_ntMCE_OR = wire *strVar;

    sprintf(strVar,"ntMWR_OR_%d_%d",sx,sy);
    &wire ntRef_ntMWR_OR = wire *strVar;

    sprintf(strVar,"ntBUS_GSEB_OUTL_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUTL[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntBUS_GSEB_OUTR_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUTR[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntBUS_BSCAN_OUTL_%d_%d",sx,sy);
    &wire ntRef_ntBUS_BSCAN_OUTL[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntBUS_BSCAN_OUTM_%d_%d",sx,sy);
    &wire ntRef_ntBUS_BSCAN_OUTM[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntBUS_BSCAN_OUTR_%d_%d",sx,sy);
    &wire ntRef_ntBUS_BSCAN_OUTR[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntBUS_WLSR_OUTL_%d_%d",sx,sy);
    &wire ntRef_ntBUS_WLSR_OUTL[12:0] = wire *strVar[12:0];

    sprintf(strVar,"ntBUS_WLSR_OUTR_%d_%d",sx,sy);
    &wire ntRef_ntBUS_WLSR_OUTR[12:0] = wire *strVar[12:0];


    sprintf(strVar, "BLSR_TILE_%d_%d", sx, sy);
    
    device BLSR_TILE *strVar
         port map (
                    FRAME_ADDR_O    => ntRef_ntFRAME_ADDR_O,
                    COL_L_O         => ntRef_ntCOL_L_O,
                    COL_R_O         => ntRef_ntCOL_R_O,
                    COL_L_N_O       => ntRef_ntCOL_L_N_O,
                    COL_R_N_O       => ntRef_ntCOL_R_N_O,
                    TYPE_O          => ntRef_ntTYPE_O,

                    BUS_GSEB_OUTL   => ntRef_ntBUS_GSEB_OUTL,
                    BUS_GSEB_OUTR   => ntRef_ntBUS_GSEB_OUTR,
                    BUS_BSCAN_OUTL  => ntRef_ntBUS_BSCAN_OUTL,
                    BUS_BSCAN_OUTR  => ntRef_ntBUS_BSCAN_OUTR,
                    BUS_BSCAN_OUTM  => ntRef_ntBUS_BSCAN_OUTM,
                    BUS_WLSR_OUTL   => ntRef_ntBUS_WLSR_OUTL,
                    BUS_WLSR_OUTR   => ntRef_ntBUS_WLSR_OUTR,

                    POR_N_OL        => ntRef_ntPOR_N_OL,
                    POR_N_OR        => ntRef_ntPOR_N_OR,
                    POR_N_OUT_M     => ntRef_ntPOR_N_OUT_M,
                    GRS_N_OUT_M     => ntRef_ntGRS_N_OUT_M,
                    GWEN_OUT_M      => ntRef_ntGWEN_OUT_M,
                    PUP_REL_N_OUT_M => ntRef_ntPUP_REL_N_OUT_M,
                    GLOGEN_OUT      => ntRef_ntGLOGEN_OUT,
                    CLK_REL_OUT_M   => ntRef_ntCLK_REL_OUT_M,

                    PROG_ON_O       => ntRef_ntPROG_ON_O,
                    PROG_ON_R_O     => ntRef_ntPROG_ON_R_O,
                    PRECHG_O        => ntRef_ntPRECHG_O,
                    WLSR_REF        => ntRef_ntWLSR_REF,
                    DATA            => ntRef_ntDATA,
                    DATAN           => ntRef_ntDATAN,

                    DATA_TO_NEXT     => ntRef_ntDATA_TO_NEXT,
                    DSROUTTO_CONFIG  => ntRef_ntDSROUTTO_CONFIG,
                    CLKOUT_M         => ntRef_ntCLKOUT_M,
                    ERASE_EN_O       => ntRef_ntERASE_EN_O,
                    POR_ERASE_N_O    => ntRef_ntPOR_ERASE_N_O,
                    READ_O           => ntRef_ntREAD_O,
                    PROG_CAP_O       => ntRef_ntPROG_CAP_O,
                    RDBK_CAP_O       => ntRef_ntRDBK_CAP_O,
                    WL_ON_O          => ntRef_ntWL_ON_O,
                    PD_OUT           => ntRef_ntPD_OUT,
                    PUB_OUT          => ntRef_ntPUB_OUT,
                    WLSR_SEL_O       => ntRef_ntWLSR_SEL_O,
                    BLSR_SEL_O       => ntRef_ntBLSR_SEL_O,
                    REGION_RW_EN_O   => ntRef_ntREGION_RW_EN_O,
                    COL_IN_O         => ntRef_ntCOL_IN_O,
                    COL_INC_O        => ntRef_ntCOL_INC_O,
                    NONDRM_REG_INC_O => ntRef_ntNONDRM_REG_INC_O,
                    NONDRM_END_O     => ntRef_ntNONDRM_END_O,
                    RSTN_O           => ntRef_ntRSTN_O,
                    NONDRM_END_LOCAL => ntRef_ntNONDRM_END_LOCAL,
                    TIEL1            => ntRef_ntTIEL1,
                    TIEL2            => ntRef_ntTIEL2,

                    CLK_ADC_L        => ntRef_ntCLK_ADC_L,
                    CLK_ADC_OUT      => ntRef_ntCLK_ADC_OUT,
                    CLK_ADC_R        => ntRef_ntCLK_ADC_R,
                    CLK_USER_OUT     => ntRef_ntCLK_USER_OUT,
                    DCI_INIT         => ntRef_ntDCI_INIT,
                    MCLKB_O          => ntRef_ntMCLKB_O,
                    MCE_O            => ntRef_ntMCE_O,
                    MWR_O            => ntRef_ntMWR_O,
                    MCLKB_OL         => ntRef_ntMCLKB_OL,
                    MCE_OL           => ntRef_ntMCE_OL,
                    MWR_OL           => ntRef_ntMWR_OL,
                    MCLKB_OR         => ntRef_ntMCLKB_OR,
                    MCE_OR           => ntRef_ntMCE_OR,
                    MWR_OR           => ntRef_ntMWR_OR
                  )
        @([sx,sy]);
        
}// end of function place_blsr_tile

/********************************************************************************
********************************************************************************/

function place_wlsr_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;
    
    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);    
    &wire ntRef_ntCOL_INC_OUT = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);       
    &wire ntRef_ntCLK_OUTT[7:0] = wire *strVar[7:0]    /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);        
    &wire ntRef_ntCLK_OUTB[7:0] = wire *strVar[7:0]    /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    //GLOBAL SIGNAL


    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[27:0] = wire *strVar[27:0];

    sprintf(strVar,"ntCOL_SEL_CCS_%d_%d",sx,sy);
    &wire ntRef_ntCOL_SEL_CCS = wire *strVar;

    sprintf(strVar,"ntBUS_GSEB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUT[5:0] = wire *strVar[5:0];

    sprintf(strVar, "WLSR_TILE_%d_%d", sx, sy);
    
    device WLSR_TILE *strVar
         port map (
                    CLK_OUTT    => ntRef_ntCLK_OUTT,
                    CLK_OUTB    => ntRef_ntCLK_OUTB,

                    BUS_GSEB_OUT     => ntRef_ntBUS_GSEB_OUT,
                    GLOGEN_OUT       => ntRef_ntGLOGEN_OUT,
                    CS_OUT           => ntRef_ntCS_OUT,
                    COL_INC_OUT      => ntRef_ntCOL_INC_OUT,
                    ADDR             => ntRef_ntADDR,
                    COL_SEL_CCS      => ntRef_ntCOL_SEL_CCS
                  )
        @([sx,sy]);
       
int tx_ccs = CCS_TILE_X;
int ty_ccs = CCS_TILE_Y;

int sx_ccs = tx_ccs * NUM_GRID_X;
int sy_ccs = ty_ccs * NUM_GRID_Y;

int tx_esd = ESD_PGL12G_TILE_X;
int ty_esd = ESD_PGL12G_TILE_Y;

int sx_esd = tx_esd * NUM_GRID_X;
int sy_esd = ty_esd * NUM_GRID_Y;

    connect(
                 <pin VDD11_GCLK of <device WLSR_TILE @[sx,sy]>> => <wire VDD11_GCLK of <device ESD_PGL12G_TILE @[sx_esd,sy_esd]>>,
                 <pin VGATE of <device WLSR_TILE @[sx,sy]>> => <wire NGB_VGATE of <device CCS_TILE @[sx_ccs+2,sy_ccs]>>                                                    
               );
 
}// end of function place_wlsr_tile
/********************************************************************************
********************************************************************************/
function place_uscm_tile(unsigned int tx,ty, tx_srb, ty_srb)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntCLK_USCM_T_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USCM_T[14:0] = wire *strVar[14:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_USCM_B_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USCM_B[14:0] = wire *strVar[14:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OSC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OSC_OUT[1:0] = wire *strVar[1:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntDCI_INIT_OUT_%d_%d",sx,sy);
    &wire ntRef_ntDCI_INIT_OUT = wire *strVar;
    
    sprintf(strVar,"ntCLK_USCM_0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USCM_0 = wire *strVar;

    sprintf(strVar,"ntCLK_USCM_9_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USCM_9 = wire *strVar;

    sprintf(strVar,"ntCLK_USCM_10_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USCM_10 = wire *strVar;

    sprintf(strVar,"ntCLK_USCM_14_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USCM_14 = wire *strVar;

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI = wire *strVar;

    
    sprintf(strVar, "USCM_TILE_%d_%d", sx, sy);
    
    device USCM_TILE *strVar
          port map (
                     CLK_USCM_0    => ntRef_ntCLK_USCM_0,
                     CLK_USCM_9    => ntRef_ntCLK_USCM_9,
                     CLK_USCM_10   => ntRef_ntCLK_USCM_10,
                     CLK_USCM_14   => ntRef_ntCLK_USCM_14,
                     CLK_USCM_T    => ntRef_ntCLK_USCM_T,
                     CLK_USCM_B    => ntRef_ntCLK_USCM_B,
                     TIEHI         => ntRef_ntTIEHI,
                     DCI_INIT_OUT  => ntRef_ntDCI_INIT_OUT,
                     CLK_OSC_OUT   => ntRef_ntCLK_OSC_OUT            
                   )
        @([sx,sy]);

      STRUCT inc_spec_USCM incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB;
      int sy_srb;
      int sx_srb = tx_srb * NUM_GRID_X;
      int sy_srb0 = ty_srb * NUM_GRID_Y;

      foreach incVar(inc_USCM_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;
         
          if(!loc_SRB)
          {
            sy_srb = sy_srb0;
          }
          else
          {
            sy_srb = sy_srb0 + loc_SRB*NUM_GRID_Y; 
          }
          
          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device USCM_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect(<pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> => (incVar.port_name_device=="TIEHI") ? <wire TIEHI of <device SRB_TILE@[sx_srb,sy_srb]>>
                                                                         : <wire *pin_logic_device of <device USCM_TILE @[sx,sy]>>); 
          }
      }  
       
int tx_ccs = CCS_TILE_X;
int ty_ccs = CCS_TILE_Y;

int sx_ccs = tx_ccs * NUM_GRID_X;
int sy_ccs = ty_ccs * NUM_GRID_Y;

int tx_esd = ESD_PGL12G_TILE_X;
int ty_esd = ESD_PGL12G_TILE_Y;

int sx_esd = tx_esd * NUM_GRID_X;
int sy_esd = ty_esd * NUM_GRID_Y;

    connect(
                 <pin VDD11_GCLK of <device USCM_TILE @[sx,sy]>> => <wire VDD11_GCLK of <device ESD_PGL12G_TILE @[sx_esd,sy_esd]>>,
                 <pin VGATE of <device USCM_TILE @[sx,sy]>> => <wire NGB_VGATE of <device CCS_TILE @[sx_ccs+2,sy_ccs]>>                                                    
               ); 
        
}// end of function place_uscm_tile

/********************************************************************************
********************************************************************************/
function place_wlsr2_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[7:0] = wire *strVar[7:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[7:0] = wire *strVar[7:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_USCM_BUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USCM_BUF[29:0] = wire *strVar[29:0]   /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLKG_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLKG_OUT = wire *strVar             /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;


    //GLOBAL SIGNAL

    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);    
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[27:0] = wire *strVar[27:0];

    sprintf(strVar,"ntCOL_SEL_CCS_%d_%d",sx,sy);    
    &wire ntRef_ntCOL_SEL_CCS = wire *strVar;   

    sprintf(strVar,"ntTIE_LO_1V1_%d_%d",sx,sy);    
    &wire ntRef_ntTIE_LO_1V1 = wire *strVar; 

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);    
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar,"ntCAL_DONE_OUT_%d_%d",sx,sy);    
    &wire ntRef_ntCAL_DONE_OUT = wire *strVar;

    sprintf(strVar,"ntBUS_GSEB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUT[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntBUS1_CLK_L_%d_%d",sx,sy);
    &wire ntRef_ntBUS1_CLK_L[8:0] = wire *strVar[8:0]       /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntBUS1_CLK_R_%d_%d",sx,sy);
    &wire ntRef_ntBUS1_CLK_R[8:0] = wire *strVar[8:0]       /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;


    sprintf(strVar, "WLSR2_TILE_%d_%d", sx, sy);
    
    device WLSR2_TILE *strVar
         port map (
                    CLK_OUTT         => ntRef_ntCLK_OUTT,
                    CLK_OUTB         => ntRef_ntCLK_OUTB,
                    CLK_USCM_BUF     => ntRef_ntCLK_USCM_BUF,
                    CLKG_OUT         => ntRef_ntCLKG_OUT,

                    BUS_GSEB_OUT     => ntRef_ntBUS_GSEB_OUT,
                    BUS1_CLK_L       => ntRef_ntBUS1_CLK_L,
                    BUS1_CLK_R       => ntRef_ntBUS1_CLK_R,

                    GLOGEN_OUT       => ntRef_ntGLOGEN_OUT,
                    CS_OUT           => ntRef_ntCS_OUT,
                    COL_INC_OUT      => ntRef_ntCOL_INC_OUT,
                    ADDR             => ntRef_ntADDR,
                    COL_SEL_CCS      => ntRef_ntCOL_SEL_CCS,
                    TIE_LO_1V1       => ntRef_ntTIE_LO_1V1,
                    TIEHI            => ntRef_ntTIEHI
//                    CAL_DONE_OUT     => ntRef_ntCAL_DONE_OUT
                  )
        @([sx,sy]);

int tx_ccs = CCS_TILE_X;
int ty_ccs = CCS_TILE_Y;

int sx_ccs = tx_ccs * NUM_GRID_X;
int sy_ccs = ty_ccs * NUM_GRID_Y;

int tx_esd = ESD_PGL12G_TILE_X;
int ty_esd = ESD_PGL12G_TILE_Y;

int sx_esd = tx_esd * NUM_GRID_X;
int sy_esd = ty_esd * NUM_GRID_Y;

    connect(
                 <pin VDD11_GCLK of <device WLSR2_TILE @[sx,sy]>> => <wire VDD11_GCLK of <device ESD_PGL12G_TILE @[sx_esd,sy_esd]>>,
                 <pin VGATE of <device WLSR2_TILE @[sx,sy]>> => <wire NGB_VGATE of <device CCS_TILE @[sx_ccs+2,sy_ccs]>>                                                    
               );
        
}//end of function place_wlsr2_tile
/********************************************************************************
********************************************************************************/
function place_wlsr1_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;


    sprintf(strVar,"ntCLK_GLOBAL_R_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_R[19:0] = wire *strVar[19:0]    /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_GLOBAL_L_%d_%d",sx,sy);
    &wire ntRef_ntCLK_GLOBAL_L[19:0] = wire *strVar[19:0]    /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[7:0] = wire *strVar[7:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[7:0] = wire *strVar[7:0]      /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_HRX_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_HRX_OUT[1:0] = wire *strVar[1:0]   /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_SRB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_SRB_OUT = wire *strVar             /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_ADC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC_OUT = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/; 

    sprintf(strVar,"ntCLKG_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLKG_OUT = wire *strVar       /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/; 

    //GLOBAL SIGNAL
    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntPUP_REL_N_OUT_%d_%d",sx,sy);
    &wire ntRef_ntPUP_REL_N_OUT = wire *strVar;

    sprintf(strVar,"ntTS_ALL_OUT_%d_%d",sx,sy);
    &wire ntRef_ntTS_ALL_OUT = wire *strVar;

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);    
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[27:0] = wire *strVar[27:0];

    sprintf(strVar,"ntCOL_SEL_CCS_%d_%d",sx,sy);    
    &wire ntRef_ntCOL_SEL_CCS = wire *strVar;   

    sprintf(strVar,"ntTIE_LO_1V1_%d_%d",sx,sy);    
    &wire ntRef_ntTIE_LO_1V1 = wire *strVar; 

    sprintf(strVar,"ntTIEHI_%d_%d",sx,sy);    
    &wire ntRef_ntTIEHI = wire *strVar;

    sprintf(strVar,"ntCAL_DONE_OUT_%d_%d",sx,sy);    
    &wire ntRef_ntCAL_DONE_OUT = wire *strVar;

    sprintf(strVar,"ntBUS1_CLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS1_CLK_OUT[8:0] = wire *strVar[8:0]           /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntBUS2_CLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS2_CLK_OUT[9:0] = wire *strVar[9:0]                  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntBUS_BSCAN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_BSCAN_OUT[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntBUS_GSEB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUT[5:0] = wire *strVar[5:0];

    sprintf(strVar, "WLSR1_TILE_%d_%d", sx, sy);
    
    device WLSR1_TILE *strVar
         port map ( CLK_GLOBAL_R     => ntRef_ntCLK_GLOBAL_R,
                    CLK_GLOBAL_L     => ntRef_ntCLK_GLOBAL_L,
                    CLK_OUTT         => ntRef_ntCLK_OUTT,
                    CLK_OUTB         => ntRef_ntCLK_OUTB,
                    CLK_HRX_OUT      => ntRef_ntCLK_HRX_OUT,

                    BUS_GSEB_OUT     => ntRef_ntBUS_GSEB_OUT,
                    BUS_BSCAN_OUT    => ntRef_ntBUS_BSCAN_OUT,
                    BUS1_CLK_OUT     => ntRef_ntBUS1_CLK_OUT,
                    BUS2_CLK_OUT     => ntRef_ntBUS2_CLK_OUT,
                    CLK_ADC_OUT      => ntRef_ntCLK_ADC_OUT,
 
                    CS_OUT           => ntRef_ntCS_OUT,
                    COL_INC_OUT      => ntRef_ntCOL_INC_OUT,
                    GLOGEN_OUT       => ntRef_ntGLOGEN_OUT,
                    ADDR             => ntRef_ntADDR,
                    COL_SEL_CCS      => ntRef_ntCOL_SEL_CCS,
                    TIE_LO_1V1       => ntRef_ntTIE_LO_1V1,
                    TIEHI            => ntRef_ntTIEHI,
                    CAL_DONE_OUT     => ntRef_ntCAL_DONE_OUT
                  )
        @([sx,sy]);

int tx_ccs = CCS_TILE_X;
int ty_ccs = CCS_TILE_Y;

int sx_ccs = tx_ccs * NUM_GRID_X;
int sy_ccs = ty_ccs * NUM_GRID_Y;

int tx_esd = ESD_PGL12G_TILE_X;
int ty_esd = ESD_PGL12G_TILE_Y;

int sx_esd = tx_esd * NUM_GRID_X;
int sy_esd = ty_esd * NUM_GRID_Y;

    connect(
                 <pin VDD11_GCLK of <device WLSR1_TILE @[sx,sy]>> => <wire VDD11_GCLK of <device ESD_PGL12G_TILE @[sx_esd,sy_esd]>>,
                 <pin VGATE of <device WLSR1_TILE @[sx,sy]>> => <wire NGB_VGATE of <device CCS_TILE @[sx_ccs+2,sy_ccs]>>                                                    
               );
        
}//end of function place_wlsr1_tile
/********************************************************************************
********************************************************************************/
function place_wlsra_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[7:0] = wire *strVar[7:0]    /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[7:0] = wire *strVar[7:0]    /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    //GLOBAL SIGNAL 
    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntMEM_INIT_OUT_%d_%d",sx,sy);
    &wire ntRef_ntMEM_INIT_OUT = wire *strVar;

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);    
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[23:0] = wire *strVar[23:0];

    sprintf(strVar,"ntBUS_GSEB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUT[5:0] = wire *strVar[5:0];


    sprintf(strVar, "WLSRA_TILE_%d_%d", sx, sy);
    
    device WLSRA_TILE *strVar
         port map (
                    CLK_OUTT    => ntRef_ntCLK_OUTT,
                    CLK_OUTB    => ntRef_ntCLK_OUTB,

                    BUS_GSEB_OUT => ntRef_ntBUS_GSEB_OUT,
                    GLOGEN_OUT       => ntRef_ntGLOGEN_OUT,
                    CS_OUT           => ntRef_ntCS_OUT,
                    COL_INC_OUT      => ntRef_ntCOL_INC_OUT,
                    ADDR             => ntRef_ntADDR      
                   )
        @([sx,sy]);

int tx_ccs = CCS_TILE_X;
int ty_ccs = CCS_TILE_Y;

int sx_ccs = tx_ccs * NUM_GRID_X;
int sy_ccs = ty_ccs * NUM_GRID_Y;

int tx_esd = ESD_PGL12G_TILE_X;
int ty_esd = ESD_PGL12G_TILE_Y;

int sx_esd = tx_esd * NUM_GRID_X;
int sy_esd = ty_esd * NUM_GRID_Y;

    connect(
                 <pin VDD11_GCLK of <device WLSRA_TILE @[sx,sy]>> => <wire VDD11_GCLK of <device ESD_PGL12G_TILE @[sx_esd,sy_esd]>>,
                 <pin VGATE of <device WLSRA_TILE @[sx,sy]>> => <wire NGB_VGATE of <device CCS_TILE @[sx_ccs+2,sy_ccs]>>                                                    
               );
        
}// end of function place_wlsra_tile

/********************************************************************************
********************************************************************************/
function place_wlsrd_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[7:0] = wire *strVar[7:0]    /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[7:0] = wire *strVar[7:0]    /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    //GLOBAL SIGNAL
    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);    
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[22:0] = wire *strVar[22:0];

    sprintf(strVar,"ntADDR_D_%d_%d",sx,sy);
    &wire ntRef_ntADDR_D = wire *strVar;

    sprintf(strVar,"ntREGION_INC_%d_%d",sx,sy);    
    &wire ntRef_ntREGION_INC = wire *strVar;

    sprintf(strVar,"ntCSDRM_MEM_O_%d_%d",sx,sy);    
    &wire ntRef_ntCSDRM_MEM_O = wire *strVar;

    sprintf(strVar,"ntMCE2DRM_%d_%d",sx,sy);
    &wire ntRef_ntMCE2DRM = wire *strVar;

    sprintf(strVar,"ntMCLKB2DRM_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB2DRM = wire *strVar;

    sprintf(strVar,"ntMWR2DRM_%d_%d",sx,sy);
    &wire ntRef_ntMWR2DRM = wire *strVar;

    sprintf(strVar,"ntBUS_GSEB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUT[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntCOL_SEL_CCS1_%d_%d",sx,sy);
    &wire ntRef_ntCOL_SEL_CCS1 = wire *strVar;

    sprintf(strVar,"ntCOL_SEL_CCS2_%d_%d",sx,sy);
    &wire ntRef_ntCOL_SEL_CCS2 = wire *strVar;

    sprintf(strVar, "WLSRD_TILE_%d_%d", sx, sy);
    
    device WLSRD_TILE *strVar
         port map (
                    CLK_OUTT    => ntRef_ntCLK_OUTT,
                    CLK_OUTB    => ntRef_ntCLK_OUTB,

                    BUS_GSEB_OUT     => ntRef_ntBUS_GSEB_OUT,
                    GLOGEN_OUT       => ntRef_ntGLOGEN_OUT,
                    CS_OUT           => ntRef_ntCS_OUT,
                    COL_INC_OUT      => ntRef_ntCOL_INC_OUT,
                    COL_SEL_CCS1     => ntRef_ntCOL_SEL_CCS1,
                    COL_SEL_CCS2     => ntRef_ntCOL_SEL_CCS2,

                    MCE2DRM          => ntRef_ntMCE2DRM,
                    MCLKB2DRM        => ntRef_ntMCLKB2DRM,
                    MWR2DRM          => ntRef_ntMWR2DRM,

//                    REGION_INC       => ntRef_ntREGION_INC,
                    ADDR             => ntRef_ntADDR,
                    ADDR_D           => ntRef_ntADDR_D,
                    CSDRM_MEM_O      => ntRef_ntCSDRM_MEM_O
                  )
        @([sx,sy]);

int tx_ccs = CCS_TILE_X;
int ty_ccs = CCS_TILE_Y;

int sx_ccs = tx_ccs * NUM_GRID_X;
int sy_ccs = ty_ccs * NUM_GRID_Y;

int tx_esd = ESD_PGL12G_TILE_X;
int ty_esd = ESD_PGL12G_TILE_Y;

int sx_esd = tx_esd * NUM_GRID_X;
int sy_esd = ty_esd * NUM_GRID_Y;

    connect(
                 <pin VDD11_GCLK of <device WLSRD_TILE @[sx,sy]>> => <wire VDD11_GCLK of <device ESD_PGL12G_TILE @[sx_esd,sy_esd]>>,
                 <pin VGATE of <device WLSRD_TILE @[sx,sy]>> => <wire NGB_VGATE of <device CCS_TILE @[sx_ccs+2,sy_ccs]>>                                                    
               );
        
}// end of function place_wlsrd_tile
/********************************************************************************
********************************************************************************/
function place_rlybufs5_tile(unsigned int tx,ty)
{
    int sx,sy;
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;
    sprintf(strVar,"ntCLK_OUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTT[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntCLK_OUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLK_OUTB[1:0] = wire *strVar[1:0];

    sprintf(strVar,"ntTIEH_%d_%d",sx,sy);
    &wire ntRef_ntTIEH = wire *strVar;

    sprintf(strVar,"RLYBUFS5_TILE_%d_%d",sx,sy);
    device RLYBUFS5_TILE *strVar
    port map
      (
          CLK_OUTT    => ntRef_ntCLK_OUTT,
          CLK_OUTB    => ntRef_ntCLK_OUTB,
          TIEH       => ntRef_ntTIEH
      )
      @ ([sx,sy]);    
}
/********************************************************************************
********************************************************************************/
function place_rlybufs_tile(unsigned int tx,ty)
{
    int sx,sy;
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }

    string strVar;
    sprintf(strVar,"ntCLK_PREGMUX_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PREGMUX_OUT[15:0] = wire *strVar[15:0];

    sprintf(strVar,"ntCLK_USCM_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USCM_OUT[29:0] = wire *strVar[29:0];

    sprintf(strVar,"ntCLK_ADC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_USER_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_USER_OUT = wire *strVar;

    sprintf(strVar,"ntMCLKB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntMCLKB_OUT = wire *strVar;

    sprintf(strVar,"ntDCI_INIT_OUT_%d_%d",sx,sy);
    &wire ntRef_ntDCI_INIT_OUT = wire *strVar;

    sprintf(strVar,"RLYBUFS_TILE_%d_%d",sx,sy);
    device RLYBUFS_TILE *strVar
    port map
      (
          CLK_PREGMUX_OUT    => ntRef_ntCLK_PREGMUX_OUT,
          CLK_USCM_OUT       => ntRef_ntCLK_USCM_OUT
      )
      @ ([sx,sy]);   
 
}//end of function place_rlybufs_tile
/********************************************************************************
********************************************************************************/
function place_iockgatedll_tile(unsigned int tx,ty)
{   
    unsigned int sx, sy;
    
    sx = tx * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;

    sprintf(strVar,"ntCLK_PIO_P_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_P_OUT_0 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_PIO_N_OUT_0_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_N_OUT_0 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_PIO_P_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_P_OUT_1 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_PIO_N_OUT_1_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO_N_OUT_1 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntIOCKDLY_COUT_P_1_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_P_1 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIOCKDLY_COUT_N_1_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_N_1 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIOCKDLY_COUT_P_0_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_P_0 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntIOCKDLY_COUT_N_0_%d_%d",sx,sy);
    &wire ntRef_ntIOCKDLY_COUT_N_0 = wire *strVar            /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDLL_TIHI_%d_%d",sx,sy);    
    &wire ntRef_ntDLL_TIHI = wire *strVar; 

    sprintf(strVar,"ntTIEH_%d_%d",sx,sy);    
    &wire ntRef_ntTIEH = wire *strVar; 

    sprintf(strVar,"ntCTRL_CODE_%d_%d",sx,sy);
    &wire ntRef_ntCTRL_CODE[7:0] = wire *strVar[7:0]   /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCTRL_CODE_T_%d_%d",sx,sy);
    &wire ntRef_ntCTRL_CODE_T[7:0] = wire *strVar[7:0] /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDIV_OSCCLK_T_%d_%d",sx,sy);
    &wire ntRef_ntDIV_OSCCLK_T = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntDIV_CLKIN_T_%d_%d",sx,sy);
    &wire ntRef_ntDIV_CLKIN_T = wire *strVar           /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntLOCK_%d_%d",sx,sy);
    &wire ntRef_ntLOCK = wire *strVar                  /*pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntCLK_IOCK_B_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOCK_B[1:0] = wire *strVar[1:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_IOL_C_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOL_C[1:0] = wire *strVar[1:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_IOCK_T_%d_%d",sx,sy);
    &wire ntRef_ntCLK_IOCK_T[1:0] = wire *strVar[1:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLKG_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLKG_OUT = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_ADC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_ADC_OUT = wire *strVar          /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCOL_INC_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCOL_INC_OUT = wire *strVar;

    sprintf(strVar,"ntGOUTEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGOUTEN_OUT = wire *strVar;

    sprintf(strVar,"ntCS_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCS_OUT = wire *strVar;

    sprintf(strVar,"ntREGION_INC_%d_%d",sx,sy);
    &wire ntRef_ntREGION_INC = wire *strVar;

    sprintf(strVar,"ntCLK_XTAL_%d_%d",sx,sy);
    &wire ntRef_ntCLK_XTAL = wire *strVar;

    sprintf(strVar,"ntS11_PAD_STATE_OUT_%d_%d",sx,sy);
    &wire ntRef_ntS11_PAD_STATE_OUT = wire *strVar;

    sprintf(strVar,"ntRCLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntRCLK_OUT[3:0] = wire *strVar[3:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCAL_DONE_OUT_%d_%d",sx,sy);    
    &wire ntRef_ntCAL_DONE_OUT = wire *strVar;

    sprintf(strVar,"ntCLK_A_IOL_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_A_IOL_OUT[1:0] = wire *strVar[1:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLK_PLL_EXT_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PLL_EXT_OUT = wire *strVar  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLKOUTT_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTT[7:0] = wire *strVar[7:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLKOUTB_%d_%d",sx,sy);
    &wire ntRef_ntCLKOUTB[7:0] = wire *strVar[7:0]  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntGLOGEN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_OUT = wire *strVar;

    sprintf(strVar,"ntADDR_%d_%d",sx,sy);
    &wire ntRef_ntADDR[23:0] = wire *strVar[23:0];

    sprintf(strVar,"ntBUS2_CLK_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS2_CLK_OUT[9:0] = wire *strVar[9:0]                  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntBUS_BSCAN_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_BSCAN_OUT[17:0] = wire *strVar[17:0];

    sprintf(strVar,"ntBUS_GSEB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntBUS_GSEB_OUT[5:0] = wire *strVar[5:0];

    sprintf(strVar,"ntCLK_PIO0_P_TBUF_%d_%d",sx,sy);
    &wire ntRef_ntCLK_PIO0_P_TBUF = wire *strVar  /*pragma PAP_ARC_ITC_TYPE = "GLOBAL"*/;

    sprintf(strVar,"ntCLOCK_DR_OUT_%d_%d",sx,sy);
    &wire ntRef_ntCLOCK_DR_OUT = wire *strVar;

    sprintf(strVar,"ntGLOGEN_FB_OUT_%d_%d",sx,sy);
    &wire ntRef_ntGLOGEN_FB_OUT = wire *strVar;

    sprintf(strVar,"ntDLL_TILO_%d_%d",sx,sy);
    &wire ntRef_ntDLL_TILO = wire *strVar;

    sprintf(strVar,"ntTIEHI_IBM_0_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI_IBM_0 = wire *strVar;

    sprintf(strVar,"ntTIEHI_IBM_1_%d_%d",sx,sy);
    &wire ntRef_ntTIEHI_IBM_1 = wire *strVar;

    sprintf(strVar,"ntSIG_IBM_0_OUT_%d_%d",sx,sy);
    &wire ntRef_ntSIG_IBM_0_OUT[6:0] = wire *strVar[6:0];

    sprintf(strVar,"ntSIG_IBM_1_OUT_%d_%d",sx,sy);
    &wire ntRef_ntSIG_IBM_1_OUT[17:0] = wire *strVar[17:0];

    sprintf(strVar, "IOCKGATEDLL_TILE_%d_%d", sx, sy);
    device IOCKGATEDLL_TILE *strVar
         port map(
                    BUS2_CLK_OUT     => ntRef_ntBUS2_CLK_OUT,
                    DLL_TIHI         => ntRef_ntDLL_TIHI,
                    TIEH             => ntRef_ntTIEH,
                    ADDR             => ntRef_ntADDR,

                    CTRL_CODE      => ntRef_ntCTRL_CODE,
                    CTRL_CODE_T    => ntRef_ntCTRL_CODE_T,
                    DIV_OSCCLK_T   => ntRef_ntDIV_OSCCLK_T,
                    DIV_CLKIN_T    => ntRef_ntDIV_CLKIN_T,
                    LOCK           => ntRef_ntLOCK,
                    CLK_IOCK_B      => ntRef_ntCLK_IOCK_B,
                    CLK_IOCK_T      => ntRef_ntCLK_IOCK_T,

                    CLK_PIO0_P_TBUF  => ntRef_ntCLK_PIO0_P_TBUF,
                    CLK_PIO_P_OUT_0  => ntRef_ntCLK_PIO_P_OUT_0,
                    CLK_PIO_N_OUT_0  => ntRef_ntCLK_PIO_N_OUT_0,
                    CLK_PIO_P_OUT_1  => ntRef_ntCLK_PIO_P_OUT_1,
                    CLK_PIO_N_OUT_1  => ntRef_ntCLK_PIO_N_OUT_1,
                    IOCKDLY_COUT_P_0 => ntRef_ntIOCKDLY_COUT_P_0,
                    IOCKDLY_COUT_N_0 => ntRef_ntIOCKDLY_COUT_N_0,
                    IOCKDLY_COUT_P_1 => ntRef_ntIOCKDLY_COUT_P_1,
                    IOCKDLY_COUT_N_1 => ntRef_ntIOCKDLY_COUT_N_1,

                    RCLK_OUT        => ntRef_ntRCLK_OUT,
                    CLK_PLL_EXT_OUT => ntRef_ntCLK_PLL_EXT_OUT,
                    CLKOUTT         => ntRef_ntCLKOUTT,
                    CLKOUTB         => ntRef_ntCLKOUTB,

                    BUS_BSCAN_OUT    => ntRef_ntBUS_BSCAN_OUT,
                    BUS_GSEB_OUT     => ntRef_ntBUS_GSEB_OUT,

                    CLK_ADC_OUT      => ntRef_ntCLK_ADC_OUT,
                    CLOCK_DR_OUT     => ntRef_ntCLOCK_DR_OUT,
                    GLOGEN_FB_OUT    => ntRef_ntGLOGEN_FB_OUT,
                    S11_PAD_STATE_OUT=> ntRef_ntS11_PAD_STATE_OUT,
                    GLOGEN_OUT       => ntRef_ntGLOGEN_OUT,
                    COL_INC_OUT      => ntRef_ntCOL_INC_OUT,
                    CS_OUT           => ntRef_ntCS_OUT,
                    CAL_DONE_OUT     => ntRef_ntCAL_DONE_OUT,
                    TIEHI_IBM_0     => ntRef_ntTIEHI_IBM_0,
                    TIEHI_IBM_1     => ntRef_ntTIEHI_IBM_1,
                    SIG_IBM_0_OUT     => ntRef_ntSIG_IBM_0_OUT,
                    SIG_IBM_1_OUT     => ntRef_ntSIG_IBM_1_OUT,
                    DLL_TILO         => ntRef_ntDLL_TILO
                  )
        @([sx,sy]);

      STRUCT inc_spec_IOCKGATEDLL incVar;
      string pin_SRB;
      string pin_logic_device;
      string attribute_IO;
      int loc_SRB,ty_srb;
      int sx_srb,sy_srb;

      foreach incVar(inc_IOCKGATEDLL_SRB_spec)
      {
          pin_SRB = incVar.port_name_SRB;
          pin_logic_device = incVar.port_name_device;
          attribute_IO = incVar.attribute_IO;
          loc_SRB = incVar.loc_SRB;

          ty_srb = (loc_SRB==0) ? ty : ty+2;
          sy_srb = ty_srb * NUM_GRID_Y;
          
          sx_srb = sx-2;

          if(attribute_IO =="I")
          { 
            
             connect(<pin *pin_logic_device of <device IOCKGATEDLL_TILE @[sx,sy]>> => <wire *pin_SRB of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect
            (
              <pin *pin_SRB of<device SRB_TILE@[sx_srb,sy_srb]>> => (incVar.port_name_device == "TIEHI") ? <wire TIEHI of <device SRB_TILE @ [sx_srb,sy_srb]>>
                                                                                                         : <wire *pin_logic_device of <device IOCKGATEDLL_TILE @[sx,sy]>>
            ); 
          }
      }
 
int tx_ccs = CCS_TILE_X;
int ty_ccs = CCS_TILE_Y;

int sx_ccs = tx_ccs * NUM_GRID_X;
int sy_ccs = ty_ccs * NUM_GRID_Y;

int tx_esd = ESD_PGL12G_TILE_X;
int ty_esd = ESD_PGL12G_TILE_Y;

int sx_esd = tx_esd * NUM_GRID_X;
int sy_esd = ty_esd * NUM_GRID_Y;

    connect(
                 <pin VDD11_GCLK of <device IOCKGATEDLL_TILE @[sx,sy]>> => <wire VDD11_GCLK of <device ESD_PGL12G_TILE @[sx_esd,sy_esd]>>,
                 <pin VGATE of <device IOCKGATEDLL_TILE @[sx,sy]>> => <wire NGB_VGATE of <device CCS_TILE @[sx_ccs+2,sy_ccs]>>                                                    
               );       

   connect(
                 <pin SIG_IBM_0[0] of <device IOCKGATEDLL_TILE @[sx,sy]>> => <wire TIEHI_IBM_0 of <device IOCKGATEDLL_TILE @[sx,sy]>>,
                 <pin SIG_IBM_0[1] of <device IOCKGATEDLL_TILE @[sx,sy]>> => <wire TIEHI_IBM_0 of <device IOCKGATEDLL_TILE @[sx,sy]>>,
                 <pin SIG_IBM_0[2] of <device IOCKGATEDLL_TILE @[sx,sy]>> => <wire TIEHI_IBM_0 of <device IOCKGATEDLL_TILE @[sx,sy]>>,
                 <pin SIG_IBM_0[3] of <device IOCKGATEDLL_TILE @[sx,sy]>> => <wire TIEHI_IBM_0 of <device IOCKGATEDLL_TILE @[sx,sy]>>
               );

  
                
}// end of function place_iockgatedll_tile

/********************************************************************************
********************************************************************************/
function place_hmemc_tile(unsigned int tx,ty,flag)
{   
    unsigned int sx, sy;
    
    sx = (tx+1) * NUM_GRID_X + 2;
    sy = ty * NUM_GRID_Y;
    
    unsigned int temp_ty;
    for(temp_ty = ty;temp_ty > MID_TILE_REGION;temp_ty = temp_ty - NUM_TILES_REGION)
    {
      sy = sy + NUM_GRID_WLSR_Y - NUM_GRID_Y;
    }
   
    string strVar;
    sprintf(strVar,"ntBL_%d_%d",sx,sy);
    &wire ntRef_ntBL[1079:0] = wire *strVar[1079:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntBL_N_%d_%d",sx,sy);
    &wire ntRef_ntBL_N[1079:0] = wire *strVar[1079:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntRST_DLL_%d_%d",sx,sy);
    &wire ntRef_ntRST_DLL = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntUPDATE_N_%d_%d",sx,sy);
    &wire ntRef_ntUPDATE_N = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntCLK_INPUT_%d_%d",sx,sy);
    &wire ntRef_ntCLK_INPUT = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDLL_FREEZE_%d_%d",sx,sy);
    &wire ntRef_ntDLL_FREEZE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC0_RST_DQS_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC0_RST_DQS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC0_CLK_REGIONAL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC0_CLK_REGIONAL = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC0_GATEI_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC0_GATEI = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC0_WL_STEP_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC0_WL_STEP[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC0_WL_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC0_WL_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC0_DQS_GATE_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC0_DQS_GATE_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC0_READ_CLK_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC0_READ_CLK_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC0_RDEL_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC0_RDEL_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC1_RST_DQS_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC1_RST_DQS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC1_CLK_REGIONAL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC1_CLK_REGIONAL = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC1_GATEI_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC1_GATEI = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC1_WL_STEP_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC1_WL_STEP[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC1_WL_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC1_WL_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC1_DQS_GATE_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC1_DQS_GATE_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC1_READ_CLK_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC1_READ_CLK_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC1_RDEL_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC1_RDEL_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC2_RST_DQS_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC2_RST_DQS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC2_CLK_REGIONAL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC2_CLK_REGIONAL = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC2_GATEI_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC2_GATEI = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC2_WL_STEP_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC2_WL_STEP[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC2_WL_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC2_WL_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC2_DQS_GATE_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC2_DQS_GATE_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC2_READ_CLK_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC2_READ_CLK_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC2_RDEL_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC2_RDEL_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC3_RST_DQS_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC3_RST_DQS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC3_CLK_REGIONAL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC3_CLK_REGIONAL = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC3_GATEI_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC3_GATEI = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC3_WL_STEP_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC3_WL_STEP[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC3_WL_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC3_WL_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC3_DQS_GATE_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC3_DQS_GATE_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC3_READ_CLK_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC3_READ_CLK_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC3_RDEL_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC3_RDEL_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC4_RST_DQS_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC4_RST_DQS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC4_CLK_REGIONAL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC4_CLK_REGIONAL = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC4_GATEI_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC4_GATEI = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC4_WL_STEP_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC4_WL_STEP[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC4_WL_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC4_WL_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC4_DQS_GATE_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC4_DQS_GATE_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC4_READ_CLK_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC4_READ_CLK_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntDQS_DDC4_RDEL_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC4_RDEL_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL0_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL0_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL0_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL0_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL0_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL0_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL1_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL1_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL1_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL1_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL1_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL1_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL2_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL2_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL2_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL2_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL2_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL2_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL3_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL3_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL3_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL3_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL3_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL3_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL4_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL4_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL4_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL4_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL4_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL4_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL5_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL5_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL5_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL5_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL5_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL5_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL6_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL6_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL6_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL6_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL6_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL6_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL7_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL7_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL7_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL7_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL7_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL7_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL8_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL8_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL8_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL8_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL8_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL8_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL9_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL9_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL9_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL9_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL9_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL9_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL10_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL10_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL10_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL10_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL10_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL10_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL11_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL11_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL11_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL11_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL11_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL11_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL12_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL12_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL12_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL12_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL12_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL12_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL13_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL13_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL13_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL13_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL13_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL13_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL14_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL14_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL14_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL14_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL14_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL14_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL15_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL15_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL15_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL15_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL15_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL15_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL16_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL16_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL16_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL16_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL16_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL16_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL17_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL17_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL17_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL17_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL17_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL17_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL18_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL18_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL18_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL18_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL18_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL18_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL19_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL19_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL19_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL19_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL19_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL19_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL20_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL20_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL20_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL20_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL20_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL20_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL21_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL21_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL21_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL21_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL21_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL21_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL22_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL22_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL22_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL22_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL22_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL22_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL23_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL23_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL23_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL23_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL23_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL23_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL24_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL24_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL24_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL24_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL24_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL24_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL25_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL25_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL25_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL25_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL25_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL25_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL26_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL26_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL26_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL26_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL26_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL26_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL27_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL27_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL27_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL27_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL27_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL27_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL28_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL28_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL28_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL28_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL28_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL28_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL29_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL29_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL29_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL29_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL29_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL29_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL30_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL30_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL30_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL30_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL30_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL30_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL31_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL31_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL31_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL31_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL31_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL31_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL32_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL32_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL32_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL32_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL32_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL32_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL33_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL33_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL33_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL33_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL33_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL33_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL34_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL34_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL34_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL34_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL34_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL34_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL35_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL35_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL35_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL35_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL35_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL35_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL36_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL36_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL36_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL36_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL36_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL36_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL37_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL37_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL37_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL37_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL37_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL37_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL38_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL38_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL38_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL38_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL38_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL38_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL39_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL39_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL39_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL39_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL39_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL39_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL40_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL40_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL40_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL40_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL40_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL40_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL41_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL41_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL41_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL41_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL41_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL41_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL42_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL42_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL42_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL42_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL42_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL42_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL43_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL43_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL43_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL43_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL43_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL43_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL44_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL44_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL44_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL44_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL44_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL44_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL45_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL45_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL45_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL45_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL45_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL45_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL46_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL46_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL46_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL46_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL46_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL46_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL47_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL47_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL47_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL47_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL47_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL47_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL48_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL48_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL48_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL48_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL48_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL48_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL49_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL49_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL49_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL49_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL49_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL49_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL50_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL50_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL50_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL50_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL50_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL50_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL51_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL51_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL51_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL51_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL51_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL51_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL52_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL52_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL52_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL52_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL52_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL52_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL53_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL53_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL53_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL53_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL53_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL53_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL54_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL54_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL54_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL54_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL54_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL54_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL55_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL55_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL55_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL55_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL55_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL55_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL56_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL56_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL56_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL56_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL56_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL56_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL57_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL57_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL57_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL57_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL57_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL57_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL58_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL58_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL58_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL58_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL58_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL58_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL59_IODLY_OV_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL59_IODLY_OV = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL59_RX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL59_RX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_IOL59_RX_DATA_DD_%d_%d",sx,sy);
    &wire ntRef_ntSRB_IOL59_RX_DATA_DD = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL0_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL0_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL0_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL0_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL0_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL0_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL0_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL0_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL0_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL0_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL0_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL0_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL0_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL0_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL1_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL1_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL1_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL1_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL1_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL1_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL1_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL1_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL1_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL1_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL1_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL1_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL1_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL1_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL2_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL2_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL2_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL2_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL2_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL2_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL2_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL2_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL2_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL2_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL2_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL2_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL2_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL2_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL3_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL3_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL3_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL3_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL3_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL3_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL3_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL3_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL3_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL3_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL3_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL3_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL3_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL3_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL4_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL4_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL4_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL4_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL4_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL4_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL4_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL4_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL4_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL4_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL4_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL4_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL4_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL4_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL5_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL5_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL5_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL5_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL5_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL5_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL5_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL5_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL5_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL5_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL5_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL5_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL5_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL5_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL6_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL6_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL6_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL6_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL6_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL6_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL6_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL6_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL6_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL6_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL6_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL6_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL6_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL6_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL7_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL7_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL7_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL7_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL7_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL7_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL7_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL7_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL7_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL7_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL7_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL7_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL7_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL7_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL8_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL8_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL8_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL8_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL8_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL8_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL8_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL8_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL8_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL8_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL8_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL8_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL8_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL8_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL9_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL9_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL9_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL9_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL9_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL9_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL9_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL9_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL9_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL9_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL9_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL9_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL9_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL9_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL10_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL10_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL10_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL10_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL10_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL10_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL10_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL10_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL10_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL10_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL10_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL10_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL10_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL10_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL11_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL11_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL11_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL11_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL11_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL11_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL11_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL11_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL11_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL11_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL11_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL11_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL11_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL11_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL12_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL12_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL12_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL12_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL12_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL12_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL12_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL12_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL12_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL12_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL12_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL12_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL12_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL12_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL13_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL13_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL13_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL13_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL13_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL13_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL13_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL13_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL13_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL13_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL13_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL13_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL13_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL13_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL14_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL14_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL14_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL14_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL14_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL14_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL14_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL14_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL14_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL14_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL14_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL14_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL14_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL14_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL15_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL15_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL15_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL15_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL15_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL15_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL15_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL15_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL15_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL15_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL15_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL15_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL15_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL15_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL16_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL16_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL16_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL16_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL16_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL16_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL16_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL16_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL16_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL16_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL16_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL16_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL16_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL16_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL17_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL17_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL17_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL17_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL17_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL17_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL17_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL17_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL17_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL17_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL17_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL17_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL17_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL17_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL18_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL18_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL18_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL18_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL18_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL18_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL18_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL18_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL18_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL18_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL18_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL18_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL18_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL18_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL19_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL19_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL19_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL19_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL19_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL19_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL19_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL19_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL19_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL19_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL19_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL19_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL19_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL19_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL20_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL20_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL20_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL20_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL20_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL20_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL20_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL20_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL20_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL20_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL20_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL20_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL20_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL20_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL21_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL21_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL21_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL21_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL21_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL21_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL21_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL21_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL21_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL21_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL21_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL21_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL21_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL21_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL22_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL22_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL22_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL22_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL22_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL22_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL22_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL22_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL22_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL22_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL22_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL22_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL22_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL22_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL23_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL23_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL23_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL23_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL23_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL23_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL23_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL23_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL23_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL23_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL23_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL23_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL23_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL23_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL24_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL24_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL24_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL24_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL24_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL24_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL24_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL24_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL24_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL24_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL24_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL24_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL24_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL24_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL25_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL25_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL25_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL25_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL25_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL25_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL25_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL25_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL25_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL25_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL25_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL25_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL25_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL25_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL26_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL26_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL26_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL26_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL26_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL26_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL26_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL26_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL26_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL26_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL26_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL26_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL26_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL26_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL27_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL27_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL27_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL27_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL27_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL27_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL27_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL27_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL27_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL27_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL27_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL27_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL27_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL27_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL28_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL28_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL28_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL28_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL28_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL28_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL28_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL28_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL28_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL28_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL28_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL28_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL28_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL28_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL29_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL29_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL29_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL29_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL29_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL29_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL29_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL29_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL29_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL29_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL29_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL29_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL29_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL29_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL30_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL30_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL30_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL30_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL30_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL30_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL30_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL30_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL30_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL30_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL30_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL30_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL30_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL30_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL31_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL31_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL31_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL31_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL31_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL31_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL31_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL31_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL31_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL31_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL31_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL31_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL31_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL31_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL32_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL32_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL32_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL32_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL32_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL32_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL32_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL32_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL32_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL32_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL32_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL32_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL32_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL32_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL33_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL33_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL33_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL33_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL33_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL33_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL33_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL33_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL33_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL33_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL33_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL33_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL33_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL33_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL34_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL34_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL34_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL34_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL34_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL34_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL34_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL34_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL34_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL34_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL34_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL34_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL34_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL34_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL35_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL35_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL35_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL35_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL35_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL35_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL35_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL35_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL35_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL35_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL35_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL35_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL35_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL35_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL36_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL36_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL36_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL36_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL36_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL36_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL36_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL36_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL36_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL36_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL36_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL36_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL36_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL36_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL37_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL37_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL37_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL37_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL37_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL37_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL37_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL37_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL37_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL37_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL37_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL37_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL37_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL37_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL38_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL38_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL38_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL38_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL38_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL38_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL38_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL38_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL38_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL38_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL38_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL38_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL38_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL38_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL39_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL39_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL39_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL39_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL39_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL39_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL39_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL39_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL39_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL39_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL39_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL39_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL39_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL39_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL40_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL40_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL40_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL40_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL40_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL40_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL40_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL40_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL40_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL40_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL40_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL40_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL40_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL40_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL41_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL41_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL41_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL41_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL41_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL41_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL41_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL41_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL41_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL41_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL41_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL41_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL41_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL41_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL42_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL42_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL42_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL42_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL42_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL42_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL42_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL42_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL42_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL42_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL42_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL42_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL42_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL42_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL43_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL43_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL43_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL43_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL43_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL43_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL43_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL43_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL43_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL43_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL43_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL43_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL43_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL43_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL44_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL44_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL44_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL44_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL44_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL44_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL44_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL44_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL44_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL44_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL44_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL44_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL44_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL44_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL45_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL45_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL45_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL45_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL45_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL45_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL45_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL45_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL45_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL45_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL45_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL45_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL45_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL45_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL46_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL46_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL46_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL46_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL46_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL46_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL46_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL46_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL46_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL46_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL46_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL46_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL46_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL46_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL47_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL47_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL47_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL47_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL47_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL47_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL47_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL47_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL47_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL47_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL47_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL47_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL47_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL47_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL48_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL48_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL48_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL48_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL48_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL48_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL48_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL48_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL48_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL48_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL48_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL48_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL48_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL48_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL49_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL49_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL49_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL49_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL49_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL49_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL49_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL49_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL49_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL49_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL49_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL49_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL49_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL49_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL50_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL50_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL50_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL50_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL50_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL50_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL50_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL50_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL50_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL50_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL50_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL50_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL50_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL50_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL51_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL51_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL51_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL51_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL51_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL51_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL51_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL51_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL51_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL51_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL51_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL51_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL51_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL51_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL52_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL52_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL52_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL52_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL52_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL52_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL52_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL52_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL52_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL52_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL52_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL52_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL52_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL52_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL53_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL53_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL53_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL53_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL53_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL53_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL53_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL53_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL53_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL53_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL53_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL53_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL53_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL53_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL54_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL54_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL54_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL54_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL54_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL54_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL54_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL54_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL54_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL54_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL54_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL54_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL54_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL54_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL55_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL55_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL55_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL55_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL55_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL55_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL55_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL55_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL55_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL55_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL55_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL55_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL55_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL55_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL56_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL56_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL56_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL56_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL56_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL56_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL56_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL56_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL56_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL56_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL56_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL56_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL56_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL56_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL57_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL57_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL57_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL57_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL57_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL57_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL57_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL57_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL57_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL57_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL57_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL57_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL57_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL57_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL58_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL58_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL58_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL58_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL58_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL58_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL58_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL58_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL58_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL58_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL58_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL58_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL58_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL58_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL59_CLK_SYS_%d_%d",sx,sy);
    &wire ntRef_ntIOL59_CLK_SYS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL59_CE_%d_%d",sx,sy);
    &wire ntRef_ntIOL59_CE = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL59_LRS_%d_%d",sx,sy);
    &wire ntRef_ntIOL59_LRS = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL59_TX_DATA_%d_%d",sx,sy);
    &wire ntRef_ntIOL59_TX_DATA[7:0] = wire *strVar[7:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL59_TS_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL59_TS_CTRL[3:0] = wire *strVar[3:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL59_IODLY_CTRL_%d_%d",sx,sy);
    &wire ntRef_ntIOL59_IODLY_CTRL[2:0] = wire *strVar[2:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntIOL59_MIPI_SW_DYN_I_%d_%d",sx,sy);
    &wire ntRef_ntIOL59_MIPI_SW_DYN_I = wire *strVar                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_P0_%d_%d",sx,sy);
    &wire ntRef_ntSRB_P0[19:0] = wire *strVar[19:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_P1_%d_%d",sx,sy);
    &wire ntRef_ntSRB_P1[19:0] = wire *strVar[19:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_P2_%d_%d",sx,sy);
    &wire ntRef_ntSRB_P2[19:0] = wire *strVar[19:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_P3_%d_%d",sx,sy);
    &wire ntRef_ntSRB_P3[19:0] = wire *strVar[19:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_P4_%d_%d",sx,sy);
    &wire ntRef_ntSRB_P4[19:0] = wire *strVar[19:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_P5_%d_%d",sx,sy);
    &wire ntRef_ntSRB_P5[19:0] = wire *strVar[19:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;
    
    sprintf(strVar,"ntSRB_P6_%d_%d",sx,sy);
    &wire ntRef_ntSRB_P6[19:0] = wire *strVar[19:0]                      /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_DDC0_RST_TRAINING_N_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC0_RST_TRAINING_N = wire *strVar                 /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_DDC1_RST_TRAINING_N_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC1_RST_TRAINING_N = wire *strVar                 /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_DDC2_RST_TRAINING_N_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC2_RST_TRAINING_N = wire *strVar                 /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_DDC3_RST_TRAINING_N_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC3_RST_TRAINING_N = wire *strVar                 /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    sprintf(strVar,"ntDQS_DDC4_RST_TRAINING_N_%d_%d",sx,sy);
    &wire ntRef_ntDQS_DDC4_RST_TRAINING_N = wire *strVar                 /* pragma PAP_ARC_ITC_TYPE = "LOCAL"*/;

    if(flag == 0)
    {
      sprintf(strVar, "HMEMC_TILE_%d_%d", sx, sy);
      device HMEMC_TILE *strVar
           port map ( 
                       RST_DLL                        =>  ntRef_ntRST_DLL          ,
                       UPDATE_N                       =>  ntRef_ntUPDATE_N          ,
                       CLK_INPUT                      =>  ntRef_ntCLK_INPUT          ,
                       DLL_FREEZE                     =>  ntRef_ntDLL_FREEZE          ,
//                       XTAL_EN                        =>  ntRef_ntXTAL_EN          ,
                       DQS_DDC0_RST_TRAINING_N        =>  ntRef_ntDQS_DDC0_RST_TRAINING_N,
                       DQS_DDC1_RST_TRAINING_N        =>  ntRef_ntDQS_DDC1_RST_TRAINING_N,
                       DQS_DDC2_RST_TRAINING_N        =>  ntRef_ntDQS_DDC2_RST_TRAINING_N,
                       DQS_DDC3_RST_TRAINING_N        =>  ntRef_ntDQS_DDC3_RST_TRAINING_N,
                       DQS_DDC4_RST_TRAINING_N        =>  ntRef_ntDQS_DDC4_RST_TRAINING_N,
                       DQS_DDC0_RST_DQS               =>  ntRef_ntDQS_DDC0_RST_DQS          ,
                       DQS_DDC0_CLK_REGIONAL          =>  ntRef_ntDQS_DDC0_CLK_REGIONAL          ,
                       DQS_DDC0_GATEI                 =>  ntRef_ntDQS_DDC0_GATEI          ,
                       DQS_DDC0_WL_STEP               =>  ntRef_ntDQS_DDC0_WL_STEP          ,
                       DQS_DDC0_WL_CTRL               =>  ntRef_ntDQS_DDC0_WL_CTRL          ,
                       DQS_DDC0_DQS_GATE_CTRL         =>  ntRef_ntDQS_DDC0_DQS_GATE_CTRL          ,
                       DQS_DDC0_READ_CLK_CTRL         =>  ntRef_ntDQS_DDC0_READ_CLK_CTRL          ,
                       DQS_DDC0_RDEL_CTRL             =>  ntRef_ntDQS_DDC0_RDEL_CTRL          ,
                       DQS_DDC1_RST_DQS               =>  ntRef_ntDQS_DDC1_RST_DQS          ,
                       DQS_DDC1_CLK_REGIONAL          =>  ntRef_ntDQS_DDC1_CLK_REGIONAL          ,
                       DQS_DDC1_GATEI                 =>  ntRef_ntDQS_DDC1_GATEI          ,
                       DQS_DDC1_WL_STEP               =>  ntRef_ntDQS_DDC1_WL_STEP          ,
                       DQS_DDC1_WL_CTRL               =>  ntRef_ntDQS_DDC1_WL_CTRL          ,
                       DQS_DDC1_DQS_GATE_CTRL         =>  ntRef_ntDQS_DDC1_DQS_GATE_CTRL          ,
                       DQS_DDC1_READ_CLK_CTRL         =>  ntRef_ntDQS_DDC1_READ_CLK_CTRL          ,
                       DQS_DDC1_RDEL_CTRL             =>  ntRef_ntDQS_DDC1_RDEL_CTRL          ,
                       DQS_DDC2_RST_DQS               =>  ntRef_ntDQS_DDC2_RST_DQS          ,
                       DQS_DDC2_CLK_REGIONAL          =>  ntRef_ntDQS_DDC2_CLK_REGIONAL          ,
                       DQS_DDC2_GATEI                 =>  ntRef_ntDQS_DDC2_GATEI          ,
                       DQS_DDC2_WL_STEP               =>  ntRef_ntDQS_DDC2_WL_STEP          ,
                       DQS_DDC2_WL_CTRL               =>  ntRef_ntDQS_DDC2_WL_CTRL          ,
                       DQS_DDC2_DQS_GATE_CTRL         =>  ntRef_ntDQS_DDC2_DQS_GATE_CTRL          ,
                       DQS_DDC2_READ_CLK_CTRL         =>  ntRef_ntDQS_DDC2_READ_CLK_CTRL          ,
                       DQS_DDC2_RDEL_CTRL             =>  ntRef_ntDQS_DDC2_RDEL_CTRL          ,
                       DQS_DDC3_RST_DQS               =>  ntRef_ntDQS_DDC3_RST_DQS          ,
                       DQS_DDC3_CLK_REGIONAL          =>  ntRef_ntDQS_DDC3_CLK_REGIONAL          ,
                       DQS_DDC3_GATEI                 =>  ntRef_ntDQS_DDC3_GATEI          ,
                       DQS_DDC3_WL_STEP               =>  ntRef_ntDQS_DDC3_WL_STEP          ,
                       DQS_DDC3_WL_CTRL               =>  ntRef_ntDQS_DDC3_WL_CTRL          ,
                       DQS_DDC3_DQS_GATE_CTRL         =>  ntRef_ntDQS_DDC3_DQS_GATE_CTRL          ,
                       DQS_DDC3_READ_CLK_CTRL         =>  ntRef_ntDQS_DDC3_READ_CLK_CTRL          ,
                       DQS_DDC3_RDEL_CTRL             =>  ntRef_ntDQS_DDC3_RDEL_CTRL          ,
                       DQS_DDC4_RST_DQS               =>  ntRef_ntDQS_DDC4_RST_DQS          ,
                       DQS_DDC4_CLK_REGIONAL          =>  ntRef_ntDQS_DDC4_CLK_REGIONAL          ,
                       DQS_DDC4_GATEI                 =>  ntRef_ntDQS_DDC4_GATEI          ,
                       DQS_DDC4_WL_STEP               =>  ntRef_ntDQS_DDC4_WL_STEP          ,
                       DQS_DDC4_WL_CTRL               =>  ntRef_ntDQS_DDC4_WL_CTRL          ,
                       DQS_DDC4_DQS_GATE_CTRL         =>  ntRef_ntDQS_DDC4_DQS_GATE_CTRL          ,
                       DQS_DDC4_READ_CLK_CTRL         =>  ntRef_ntDQS_DDC4_READ_CLK_CTRL          ,
                       DQS_DDC4_RDEL_CTRL             =>  ntRef_ntDQS_DDC4_RDEL_CTRL          ,
                       SRB_IOL0_IODLY_OV              =>  ntRef_ntSRB_IOL0_IODLY_OV          ,
                       SRB_IOL0_RX_DATA               =>  ntRef_ntSRB_IOL0_RX_DATA          ,
                       SRB_IOL0_RX_DATA_DD            =>  ntRef_ntSRB_IOL0_RX_DATA_DD          ,
                       SRB_IOL1_IODLY_OV              =>  ntRef_ntSRB_IOL1_IODLY_OV          ,
                       SRB_IOL1_RX_DATA               =>  ntRef_ntSRB_IOL1_RX_DATA          ,
                       SRB_IOL1_RX_DATA_DD            =>  ntRef_ntSRB_IOL1_RX_DATA_DD          ,
                       SRB_IOL2_IODLY_OV              =>  ntRef_ntSRB_IOL2_IODLY_OV          ,
                       SRB_IOL2_RX_DATA               =>  ntRef_ntSRB_IOL2_RX_DATA          ,
                       SRB_IOL2_RX_DATA_DD            =>  ntRef_ntSRB_IOL2_RX_DATA_DD          ,
                       SRB_IOL3_IODLY_OV              =>  ntRef_ntSRB_IOL3_IODLY_OV          ,
                       SRB_IOL3_RX_DATA               =>  ntRef_ntSRB_IOL3_RX_DATA          ,
                       SRB_IOL3_RX_DATA_DD            =>  ntRef_ntSRB_IOL3_RX_DATA_DD          ,
                       SRB_IOL4_IODLY_OV              =>  ntRef_ntSRB_IOL4_IODLY_OV          ,
                       SRB_IOL4_RX_DATA               =>  ntRef_ntSRB_IOL4_RX_DATA          ,
                       SRB_IOL4_RX_DATA_DD            =>  ntRef_ntSRB_IOL4_RX_DATA_DD          ,
                       SRB_IOL5_IODLY_OV              =>  ntRef_ntSRB_IOL5_IODLY_OV          ,
                       SRB_IOL5_RX_DATA               =>  ntRef_ntSRB_IOL5_RX_DATA          ,
                       SRB_IOL5_RX_DATA_DD            =>  ntRef_ntSRB_IOL5_RX_DATA_DD          ,
                       SRB_IOL6_IODLY_OV              =>  ntRef_ntSRB_IOL6_IODLY_OV          ,
                       SRB_IOL6_RX_DATA               =>  ntRef_ntSRB_IOL6_RX_DATA          ,
                       SRB_IOL6_RX_DATA_DD            =>  ntRef_ntSRB_IOL6_RX_DATA_DD          ,
                       SRB_IOL7_IODLY_OV              =>  ntRef_ntSRB_IOL7_IODLY_OV          ,
                       SRB_IOL7_RX_DATA               =>  ntRef_ntSRB_IOL7_RX_DATA          ,
                       SRB_IOL7_RX_DATA_DD            =>  ntRef_ntSRB_IOL7_RX_DATA_DD          ,
                       SRB_IOL8_IODLY_OV              =>  ntRef_ntSRB_IOL8_IODLY_OV          ,
                       SRB_IOL8_RX_DATA               =>  ntRef_ntSRB_IOL8_RX_DATA          ,
                       SRB_IOL8_RX_DATA_DD            =>  ntRef_ntSRB_IOL8_RX_DATA_DD          ,
                       SRB_IOL9_IODLY_OV              =>  ntRef_ntSRB_IOL9_IODLY_OV          ,
                       SRB_IOL9_RX_DATA               =>  ntRef_ntSRB_IOL9_RX_DATA          ,
                       SRB_IOL9_RX_DATA_DD            =>  ntRef_ntSRB_IOL9_RX_DATA_DD          ,
                       SRB_IOL10_IODLY_OV             =>  ntRef_ntSRB_IOL10_IODLY_OV          ,
                       SRB_IOL10_RX_DATA              =>  ntRef_ntSRB_IOL10_RX_DATA          ,
                       SRB_IOL10_RX_DATA_DD           =>  ntRef_ntSRB_IOL10_RX_DATA_DD          ,
                       SRB_IOL11_IODLY_OV             =>  ntRef_ntSRB_IOL11_IODLY_OV          ,
                       SRB_IOL11_RX_DATA              =>  ntRef_ntSRB_IOL11_RX_DATA          ,
                       SRB_IOL11_RX_DATA_DD           =>  ntRef_ntSRB_IOL11_RX_DATA_DD          ,
                       SRB_IOL12_IODLY_OV             =>  ntRef_ntSRB_IOL12_IODLY_OV          ,
                       SRB_IOL12_RX_DATA              =>  ntRef_ntSRB_IOL12_RX_DATA          ,
                       SRB_IOL12_RX_DATA_DD           =>  ntRef_ntSRB_IOL12_RX_DATA_DD          ,
                       SRB_IOL13_IODLY_OV             =>  ntRef_ntSRB_IOL13_IODLY_OV          ,
                       SRB_IOL13_RX_DATA              =>  ntRef_ntSRB_IOL13_RX_DATA          ,
                       SRB_IOL13_RX_DATA_DD           =>  ntRef_ntSRB_IOL13_RX_DATA_DD          ,
                       SRB_IOL14_IODLY_OV             =>  ntRef_ntSRB_IOL14_IODLY_OV          ,
                       SRB_IOL14_RX_DATA              =>  ntRef_ntSRB_IOL14_RX_DATA          ,
                       SRB_IOL14_RX_DATA_DD           =>  ntRef_ntSRB_IOL14_RX_DATA_DD          ,
                       SRB_IOL15_IODLY_OV             =>  ntRef_ntSRB_IOL15_IODLY_OV          ,
                       SRB_IOL15_RX_DATA              =>  ntRef_ntSRB_IOL15_RX_DATA          ,
                       SRB_IOL15_RX_DATA_DD           =>  ntRef_ntSRB_IOL15_RX_DATA_DD          ,
                       SRB_IOL16_IODLY_OV             =>  ntRef_ntSRB_IOL16_IODLY_OV          ,
                       SRB_IOL16_RX_DATA              =>  ntRef_ntSRB_IOL16_RX_DATA          ,
                       SRB_IOL16_RX_DATA_DD           =>  ntRef_ntSRB_IOL16_RX_DATA_DD          ,
                       SRB_IOL17_IODLY_OV             =>  ntRef_ntSRB_IOL17_IODLY_OV          ,
                       SRB_IOL17_RX_DATA              =>  ntRef_ntSRB_IOL17_RX_DATA          ,
                       SRB_IOL17_RX_DATA_DD           =>  ntRef_ntSRB_IOL17_RX_DATA_DD          ,
                       SRB_IOL18_IODLY_OV             =>  ntRef_ntSRB_IOL18_IODLY_OV          ,
                       SRB_IOL18_RX_DATA              =>  ntRef_ntSRB_IOL18_RX_DATA          ,
                       SRB_IOL18_RX_DATA_DD           =>  ntRef_ntSRB_IOL18_RX_DATA_DD          ,
                       SRB_IOL19_IODLY_OV             =>  ntRef_ntSRB_IOL19_IODLY_OV          ,
                       SRB_IOL19_RX_DATA              =>  ntRef_ntSRB_IOL19_RX_DATA          ,
                       SRB_IOL19_RX_DATA_DD           =>  ntRef_ntSRB_IOL19_RX_DATA_DD          ,
                       SRB_IOL20_IODLY_OV             =>  ntRef_ntSRB_IOL20_IODLY_OV          ,
                       SRB_IOL20_RX_DATA              =>  ntRef_ntSRB_IOL20_RX_DATA          ,
                       SRB_IOL20_RX_DATA_DD           =>  ntRef_ntSRB_IOL20_RX_DATA_DD          ,
                       SRB_IOL21_IODLY_OV             =>  ntRef_ntSRB_IOL21_IODLY_OV          ,
                       SRB_IOL21_RX_DATA              =>  ntRef_ntSRB_IOL21_RX_DATA          ,
                       SRB_IOL21_RX_DATA_DD           =>  ntRef_ntSRB_IOL21_RX_DATA_DD          ,
                       SRB_IOL22_IODLY_OV             =>  ntRef_ntSRB_IOL22_IODLY_OV          ,
                       SRB_IOL22_RX_DATA              =>  ntRef_ntSRB_IOL22_RX_DATA          ,
                       SRB_IOL22_RX_DATA_DD           =>  ntRef_ntSRB_IOL22_RX_DATA_DD          ,
                       SRB_IOL23_IODLY_OV             =>  ntRef_ntSRB_IOL23_IODLY_OV          ,
                       SRB_IOL23_RX_DATA              =>  ntRef_ntSRB_IOL23_RX_DATA          ,
                       SRB_IOL23_RX_DATA_DD           =>  ntRef_ntSRB_IOL23_RX_DATA_DD          ,
                       SRB_IOL24_IODLY_OV             =>  ntRef_ntSRB_IOL24_IODLY_OV          ,
                       SRB_IOL24_RX_DATA              =>  ntRef_ntSRB_IOL24_RX_DATA          ,
                       SRB_IOL24_RX_DATA_DD           =>  ntRef_ntSRB_IOL24_RX_DATA_DD          ,
                       SRB_IOL25_IODLY_OV             =>  ntRef_ntSRB_IOL25_IODLY_OV          ,
                       SRB_IOL25_RX_DATA              =>  ntRef_ntSRB_IOL25_RX_DATA          ,
                       SRB_IOL25_RX_DATA_DD           =>  ntRef_ntSRB_IOL25_RX_DATA_DD          ,
                       SRB_IOL26_IODLY_OV             =>  ntRef_ntSRB_IOL26_IODLY_OV          ,
                       SRB_IOL26_RX_DATA              =>  ntRef_ntSRB_IOL26_RX_DATA          ,
                       SRB_IOL26_RX_DATA_DD           =>  ntRef_ntSRB_IOL26_RX_DATA_DD          ,
                       SRB_IOL27_IODLY_OV             =>  ntRef_ntSRB_IOL27_IODLY_OV          ,
                       SRB_IOL27_RX_DATA              =>  ntRef_ntSRB_IOL27_RX_DATA          ,
                       SRB_IOL27_RX_DATA_DD           =>  ntRef_ntSRB_IOL27_RX_DATA_DD          ,
                       SRB_IOL28_IODLY_OV             =>  ntRef_ntSRB_IOL28_IODLY_OV          ,
                       SRB_IOL28_RX_DATA              =>  ntRef_ntSRB_IOL28_RX_DATA          ,
                       SRB_IOL28_RX_DATA_DD           =>  ntRef_ntSRB_IOL28_RX_DATA_DD          ,
                       SRB_IOL29_IODLY_OV             =>  ntRef_ntSRB_IOL29_IODLY_OV          ,
                       SRB_IOL29_RX_DATA              =>  ntRef_ntSRB_IOL29_RX_DATA          ,
                       SRB_IOL29_RX_DATA_DD           =>  ntRef_ntSRB_IOL29_RX_DATA_DD          ,
                       SRB_IOL30_IODLY_OV             =>  ntRef_ntSRB_IOL30_IODLY_OV          ,
                       SRB_IOL30_RX_DATA              =>  ntRef_ntSRB_IOL30_RX_DATA          ,
                       SRB_IOL30_RX_DATA_DD           =>  ntRef_ntSRB_IOL30_RX_DATA_DD          ,
                       SRB_IOL31_IODLY_OV             =>  ntRef_ntSRB_IOL31_IODLY_OV          ,
                       SRB_IOL31_RX_DATA              =>  ntRef_ntSRB_IOL31_RX_DATA          ,
                       SRB_IOL31_RX_DATA_DD           =>  ntRef_ntSRB_IOL31_RX_DATA_DD          ,
                       SRB_IOL32_IODLY_OV             =>  ntRef_ntSRB_IOL32_IODLY_OV          ,
                       SRB_IOL32_RX_DATA              =>  ntRef_ntSRB_IOL32_RX_DATA          ,
                       SRB_IOL32_RX_DATA_DD           =>  ntRef_ntSRB_IOL32_RX_DATA_DD          ,
                       SRB_IOL33_IODLY_OV             =>  ntRef_ntSRB_IOL33_IODLY_OV          ,
                       SRB_IOL33_RX_DATA              =>  ntRef_ntSRB_IOL33_RX_DATA          ,
                       SRB_IOL33_RX_DATA_DD           =>  ntRef_ntSRB_IOL33_RX_DATA_DD          ,
                       SRB_IOL34_IODLY_OV             =>  ntRef_ntSRB_IOL34_IODLY_OV          ,
                       SRB_IOL34_RX_DATA              =>  ntRef_ntSRB_IOL34_RX_DATA          ,
                       SRB_IOL34_RX_DATA_DD           =>  ntRef_ntSRB_IOL34_RX_DATA_DD          ,
                       SRB_IOL35_IODLY_OV             =>  ntRef_ntSRB_IOL35_IODLY_OV          ,
                       SRB_IOL35_RX_DATA              =>  ntRef_ntSRB_IOL35_RX_DATA          ,
                       SRB_IOL35_RX_DATA_DD           =>  ntRef_ntSRB_IOL35_RX_DATA_DD          ,
                       SRB_IOL36_IODLY_OV             =>  ntRef_ntSRB_IOL36_IODLY_OV          ,
                       SRB_IOL36_RX_DATA              =>  ntRef_ntSRB_IOL36_RX_DATA          ,
                       SRB_IOL36_RX_DATA_DD           =>  ntRef_ntSRB_IOL36_RX_DATA_DD          ,
                       SRB_IOL37_IODLY_OV             =>  ntRef_ntSRB_IOL37_IODLY_OV          ,
                       SRB_IOL37_RX_DATA              =>  ntRef_ntSRB_IOL37_RX_DATA          ,
                       SRB_IOL37_RX_DATA_DD           =>  ntRef_ntSRB_IOL37_RX_DATA_DD          ,
                       SRB_IOL38_IODLY_OV             =>  ntRef_ntSRB_IOL38_IODLY_OV          ,
                       SRB_IOL38_RX_DATA              =>  ntRef_ntSRB_IOL38_RX_DATA          ,
                       SRB_IOL38_RX_DATA_DD           =>  ntRef_ntSRB_IOL38_RX_DATA_DD          ,
                       SRB_IOL39_IODLY_OV             =>  ntRef_ntSRB_IOL39_IODLY_OV          ,
                       SRB_IOL39_RX_DATA              =>  ntRef_ntSRB_IOL39_RX_DATA          ,
                       SRB_IOL39_RX_DATA_DD           =>  ntRef_ntSRB_IOL39_RX_DATA_DD          ,
                       SRB_IOL40_IODLY_OV             =>  ntRef_ntSRB_IOL40_IODLY_OV          ,
                       SRB_IOL40_RX_DATA              =>  ntRef_ntSRB_IOL40_RX_DATA          ,
                       SRB_IOL40_RX_DATA_DD           =>  ntRef_ntSRB_IOL40_RX_DATA_DD          ,
                       SRB_IOL41_IODLY_OV             =>  ntRef_ntSRB_IOL41_IODLY_OV          ,
                       SRB_IOL41_RX_DATA              =>  ntRef_ntSRB_IOL41_RX_DATA          ,
                       SRB_IOL41_RX_DATA_DD           =>  ntRef_ntSRB_IOL41_RX_DATA_DD          ,
                       SRB_IOL42_IODLY_OV             =>  ntRef_ntSRB_IOL42_IODLY_OV          ,
                       SRB_IOL42_RX_DATA              =>  ntRef_ntSRB_IOL42_RX_DATA          ,
                       SRB_IOL42_RX_DATA_DD           =>  ntRef_ntSRB_IOL42_RX_DATA_DD          ,
                       SRB_IOL43_IODLY_OV             =>  ntRef_ntSRB_IOL43_IODLY_OV          ,
                       SRB_IOL43_RX_DATA              =>  ntRef_ntSRB_IOL43_RX_DATA          ,
                       SRB_IOL43_RX_DATA_DD           =>  ntRef_ntSRB_IOL43_RX_DATA_DD          ,
                       SRB_IOL44_IODLY_OV             =>  ntRef_ntSRB_IOL44_IODLY_OV          ,
                       SRB_IOL44_RX_DATA              =>  ntRef_ntSRB_IOL44_RX_DATA          ,
                       SRB_IOL44_RX_DATA_DD           =>  ntRef_ntSRB_IOL44_RX_DATA_DD          ,
                       SRB_IOL45_IODLY_OV             =>  ntRef_ntSRB_IOL45_IODLY_OV          ,
                       SRB_IOL45_RX_DATA              =>  ntRef_ntSRB_IOL45_RX_DATA          ,
                       SRB_IOL45_RX_DATA_DD           =>  ntRef_ntSRB_IOL45_RX_DATA_DD          ,
                       SRB_IOL46_IODLY_OV             =>  ntRef_ntSRB_IOL46_IODLY_OV          ,
                       SRB_IOL46_RX_DATA              =>  ntRef_ntSRB_IOL46_RX_DATA          ,
                       SRB_IOL46_RX_DATA_DD           =>  ntRef_ntSRB_IOL46_RX_DATA_DD          ,
                       SRB_IOL47_IODLY_OV             =>  ntRef_ntSRB_IOL47_IODLY_OV          ,
                       SRB_IOL47_RX_DATA              =>  ntRef_ntSRB_IOL47_RX_DATA          ,
                       SRB_IOL47_RX_DATA_DD           =>  ntRef_ntSRB_IOL47_RX_DATA_DD          ,
                       SRB_IOL48_IODLY_OV             =>  ntRef_ntSRB_IOL48_IODLY_OV          ,
                       SRB_IOL48_RX_DATA              =>  ntRef_ntSRB_IOL48_RX_DATA          ,
                       SRB_IOL48_RX_DATA_DD           =>  ntRef_ntSRB_IOL48_RX_DATA_DD          ,
                       SRB_IOL49_IODLY_OV             =>  ntRef_ntSRB_IOL49_IODLY_OV          ,
                       SRB_IOL49_RX_DATA              =>  ntRef_ntSRB_IOL49_RX_DATA          ,
                       SRB_IOL49_RX_DATA_DD           =>  ntRef_ntSRB_IOL49_RX_DATA_DD          ,
                       SRB_IOL50_IODLY_OV             =>  ntRef_ntSRB_IOL50_IODLY_OV          ,
                       SRB_IOL50_RX_DATA              =>  ntRef_ntSRB_IOL50_RX_DATA          ,
                       SRB_IOL50_RX_DATA_DD           =>  ntRef_ntSRB_IOL50_RX_DATA_DD          ,
                       SRB_IOL51_IODLY_OV             =>  ntRef_ntSRB_IOL51_IODLY_OV          ,
                       SRB_IOL51_RX_DATA              =>  ntRef_ntSRB_IOL51_RX_DATA          ,
                       SRB_IOL51_RX_DATA_DD           =>  ntRef_ntSRB_IOL51_RX_DATA_DD          ,
                       SRB_IOL52_IODLY_OV             =>  ntRef_ntSRB_IOL52_IODLY_OV          ,
                       SRB_IOL52_RX_DATA              =>  ntRef_ntSRB_IOL52_RX_DATA          ,
                       SRB_IOL52_RX_DATA_DD           =>  ntRef_ntSRB_IOL52_RX_DATA_DD          ,
                       SRB_IOL53_IODLY_OV             =>  ntRef_ntSRB_IOL53_IODLY_OV          ,
                       SRB_IOL53_RX_DATA              =>  ntRef_ntSRB_IOL53_RX_DATA          ,
                       SRB_IOL53_RX_DATA_DD           =>  ntRef_ntSRB_IOL53_RX_DATA_DD          ,
                       SRB_IOL54_IODLY_OV             =>  ntRef_ntSRB_IOL54_IODLY_OV          ,
                       SRB_IOL54_RX_DATA              =>  ntRef_ntSRB_IOL54_RX_DATA          ,
                       SRB_IOL54_RX_DATA_DD           =>  ntRef_ntSRB_IOL54_RX_DATA_DD          ,
                       SRB_IOL55_IODLY_OV             =>  ntRef_ntSRB_IOL55_IODLY_OV          ,
                       SRB_IOL55_RX_DATA              =>  ntRef_ntSRB_IOL55_RX_DATA          ,
                       SRB_IOL55_RX_DATA_DD           =>  ntRef_ntSRB_IOL55_RX_DATA_DD          ,
                       SRB_IOL56_IODLY_OV             =>  ntRef_ntSRB_IOL56_IODLY_OV          ,
                       SRB_IOL56_RX_DATA              =>  ntRef_ntSRB_IOL56_RX_DATA          ,
                       SRB_IOL56_RX_DATA_DD           =>  ntRef_ntSRB_IOL56_RX_DATA_DD          ,
                       SRB_IOL57_IODLY_OV             =>  ntRef_ntSRB_IOL57_IODLY_OV          ,
                       SRB_IOL57_RX_DATA              =>  ntRef_ntSRB_IOL57_RX_DATA          ,
                       SRB_IOL57_RX_DATA_DD           =>  ntRef_ntSRB_IOL57_RX_DATA_DD          ,
                       SRB_IOL58_IODLY_OV             =>  ntRef_ntSRB_IOL58_IODLY_OV          ,
                       SRB_IOL58_RX_DATA              =>  ntRef_ntSRB_IOL58_RX_DATA          ,
                       SRB_IOL58_RX_DATA_DD           =>  ntRef_ntSRB_IOL58_RX_DATA_DD          ,
                       SRB_IOL59_IODLY_OV             =>  ntRef_ntSRB_IOL59_IODLY_OV          ,
                       SRB_IOL59_RX_DATA              =>  ntRef_ntSRB_IOL59_RX_DATA          ,
                       SRB_IOL59_RX_DATA_DD           =>  ntRef_ntSRB_IOL59_RX_DATA_DD          ,
                       IOL0_CLK_SYS                   =>  ntRef_ntIOL0_CLK_SYS          ,
                       IOL0_CE                        =>  ntRef_ntIOL0_CE          ,
                       IOL0_LRS                       =>  ntRef_ntIOL0_LRS          ,
                       IOL0_TX_DATA                   =>  ntRef_ntIOL0_TX_DATA          ,
                       IOL0_TS_CTRL                   =>  ntRef_ntIOL0_TS_CTRL          ,
                       IOL0_IODLY_CTRL                =>  ntRef_ntIOL0_IODLY_CTRL          ,
                       IOL0_MIPI_SW_DYN_I             =>  ntRef_ntIOL0_MIPI_SW_DYN_I          ,
                       IOL1_CLK_SYS                   =>  ntRef_ntIOL1_CLK_SYS          ,
                       IOL1_CE                        =>  ntRef_ntIOL1_CE          ,
                       IOL1_LRS                       =>  ntRef_ntIOL1_LRS          ,
                       IOL1_TX_DATA                   =>  ntRef_ntIOL1_TX_DATA          ,
                       IOL1_TS_CTRL                   =>  ntRef_ntIOL1_TS_CTRL          ,
                       IOL1_IODLY_CTRL                =>  ntRef_ntIOL1_IODLY_CTRL          ,
                       IOL1_MIPI_SW_DYN_I             =>  ntRef_ntIOL1_MIPI_SW_DYN_I          ,
                       IOL2_CLK_SYS                   =>  ntRef_ntIOL2_CLK_SYS          ,
                       IOL2_CE                        =>  ntRef_ntIOL2_CE          ,
                       IOL2_LRS                       =>  ntRef_ntIOL2_LRS          ,
                       IOL2_TX_DATA                   =>  ntRef_ntIOL2_TX_DATA          ,
                       IOL2_TS_CTRL                   =>  ntRef_ntIOL2_TS_CTRL          ,
                       IOL2_IODLY_CTRL                =>  ntRef_ntIOL2_IODLY_CTRL          ,
                       IOL2_MIPI_SW_DYN_I             =>  ntRef_ntIOL2_MIPI_SW_DYN_I          ,
                       IOL3_CLK_SYS                   =>  ntRef_ntIOL3_CLK_SYS          ,
                       IOL3_CE                        =>  ntRef_ntIOL3_CE          ,
                       IOL3_LRS                       =>  ntRef_ntIOL3_LRS          ,
                       IOL3_TX_DATA                   =>  ntRef_ntIOL3_TX_DATA          ,
                       IOL3_TS_CTRL                   =>  ntRef_ntIOL3_TS_CTRL          ,
                       IOL3_IODLY_CTRL                =>  ntRef_ntIOL3_IODLY_CTRL          ,
                       IOL3_MIPI_SW_DYN_I             =>  ntRef_ntIOL3_MIPI_SW_DYN_I          ,
                       IOL4_CLK_SYS                   =>  ntRef_ntIOL4_CLK_SYS          ,
                       IOL4_CE                        =>  ntRef_ntIOL4_CE          ,
                       IOL4_LRS                       =>  ntRef_ntIOL4_LRS          ,
                       IOL4_TX_DATA                   =>  ntRef_ntIOL4_TX_DATA          ,
                       IOL4_TS_CTRL                   =>  ntRef_ntIOL4_TS_CTRL          ,
                       IOL4_IODLY_CTRL                =>  ntRef_ntIOL4_IODLY_CTRL          ,
                       IOL4_MIPI_SW_DYN_I             =>  ntRef_ntIOL4_MIPI_SW_DYN_I          ,
                       IOL5_CLK_SYS                   =>  ntRef_ntIOL5_CLK_SYS          ,
                       IOL5_CE                        =>  ntRef_ntIOL5_CE          ,
                       IOL5_LRS                       =>  ntRef_ntIOL5_LRS          ,
                       IOL5_TX_DATA                   =>  ntRef_ntIOL5_TX_DATA          ,
                       IOL5_TS_CTRL                   =>  ntRef_ntIOL5_TS_CTRL          ,
                       IOL5_IODLY_CTRL                =>  ntRef_ntIOL5_IODLY_CTRL          ,
                       IOL5_MIPI_SW_DYN_I             =>  ntRef_ntIOL5_MIPI_SW_DYN_I          ,
                       IOL6_CLK_SYS                   =>  ntRef_ntIOL6_CLK_SYS          ,
                       IOL6_CE                        =>  ntRef_ntIOL6_CE          ,
                       IOL6_LRS                       =>  ntRef_ntIOL6_LRS          ,
                       IOL6_TX_DATA                   =>  ntRef_ntIOL6_TX_DATA          ,
                       IOL6_TS_CTRL                   =>  ntRef_ntIOL6_TS_CTRL          ,
                       IOL6_IODLY_CTRL                =>  ntRef_ntIOL6_IODLY_CTRL          ,
                       IOL6_MIPI_SW_DYN_I             =>  ntRef_ntIOL6_MIPI_SW_DYN_I          ,
                       IOL7_CLK_SYS                   =>  ntRef_ntIOL7_CLK_SYS          ,
                       IOL7_CE                        =>  ntRef_ntIOL7_CE          ,
                       IOL7_LRS                       =>  ntRef_ntIOL7_LRS          ,
                       IOL7_TX_DATA                   =>  ntRef_ntIOL7_TX_DATA          ,
                       IOL7_TS_CTRL                   =>  ntRef_ntIOL7_TS_CTRL          ,
                       IOL7_IODLY_CTRL                =>  ntRef_ntIOL7_IODLY_CTRL          ,
                       IOL7_MIPI_SW_DYN_I             =>  ntRef_ntIOL7_MIPI_SW_DYN_I          ,
                       IOL8_CLK_SYS                   =>  ntRef_ntIOL8_CLK_SYS          ,
                       IOL8_CE                        =>  ntRef_ntIOL8_CE          ,
                       IOL8_LRS                       =>  ntRef_ntIOL8_LRS          ,
                       IOL8_TX_DATA                   =>  ntRef_ntIOL8_TX_DATA          ,
                       IOL8_TS_CTRL                   =>  ntRef_ntIOL8_TS_CTRL          ,
                       IOL8_IODLY_CTRL                =>  ntRef_ntIOL8_IODLY_CTRL          ,
                       IOL8_MIPI_SW_DYN_I             =>  ntRef_ntIOL8_MIPI_SW_DYN_I          ,
                       IOL9_CLK_SYS                   =>  ntRef_ntIOL9_CLK_SYS          ,
                       IOL9_CE                        =>  ntRef_ntIOL9_CE          ,
                       IOL9_LRS                       =>  ntRef_ntIOL9_LRS          ,
                       IOL9_TX_DATA                   =>  ntRef_ntIOL9_TX_DATA          ,
                       IOL9_TS_CTRL                   =>  ntRef_ntIOL9_TS_CTRL          ,
                       IOL9_IODLY_CTRL                =>  ntRef_ntIOL9_IODLY_CTRL          ,
                       IOL9_MIPI_SW_DYN_I             =>  ntRef_ntIOL9_MIPI_SW_DYN_I          ,
                       IOL10_CLK_SYS                  =>  ntRef_ntIOL10_CLK_SYS          ,
                       IOL10_CE                       =>  ntRef_ntIOL10_CE          ,
                       IOL10_LRS                      =>  ntRef_ntIOL10_LRS          ,
                       IOL10_TX_DATA                  =>  ntRef_ntIOL10_TX_DATA          ,
                       IOL10_TS_CTRL                  =>  ntRef_ntIOL10_TS_CTRL          ,
                       IOL10_IODLY_CTRL               =>  ntRef_ntIOL10_IODLY_CTRL          ,
                       IOL10_MIPI_SW_DYN_I            =>  ntRef_ntIOL10_MIPI_SW_DYN_I          ,
                       IOL11_CLK_SYS                  =>  ntRef_ntIOL11_CLK_SYS          ,
                       IOL11_CE                       =>  ntRef_ntIOL11_CE          ,
                       IOL11_LRS                      =>  ntRef_ntIOL11_LRS          ,
                       IOL11_TX_DATA                  =>  ntRef_ntIOL11_TX_DATA          ,
                       IOL11_TS_CTRL                  =>  ntRef_ntIOL11_TS_CTRL          ,
                       IOL11_IODLY_CTRL               =>  ntRef_ntIOL11_IODLY_CTRL          ,
                       IOL11_MIPI_SW_DYN_I            =>  ntRef_ntIOL11_MIPI_SW_DYN_I          ,
                       IOL12_CLK_SYS                  =>  ntRef_ntIOL12_CLK_SYS          ,
                       IOL12_CE                       =>  ntRef_ntIOL12_CE          ,
                       IOL12_LRS                      =>  ntRef_ntIOL12_LRS          ,
                       IOL12_TX_DATA                  =>  ntRef_ntIOL12_TX_DATA          ,
                       IOL12_TS_CTRL                  =>  ntRef_ntIOL12_TS_CTRL          ,
                       IOL12_IODLY_CTRL               =>  ntRef_ntIOL12_IODLY_CTRL          ,
                       IOL12_MIPI_SW_DYN_I            =>  ntRef_ntIOL12_MIPI_SW_DYN_I          ,
                       IOL13_CLK_SYS                  =>  ntRef_ntIOL13_CLK_SYS          ,
                       IOL13_CE                       =>  ntRef_ntIOL13_CE          ,
                       IOL13_LRS                      =>  ntRef_ntIOL13_LRS          ,
                       IOL13_TX_DATA                  =>  ntRef_ntIOL13_TX_DATA          ,
                       IOL13_TS_CTRL                  =>  ntRef_ntIOL13_TS_CTRL          ,
                       IOL13_IODLY_CTRL               =>  ntRef_ntIOL13_IODLY_CTRL          ,
                       IOL13_MIPI_SW_DYN_I            =>  ntRef_ntIOL13_MIPI_SW_DYN_I          ,
                       IOL14_CLK_SYS                  =>  ntRef_ntIOL14_CLK_SYS          ,
                       IOL14_CE                       =>  ntRef_ntIOL14_CE          ,
                       IOL14_LRS                      =>  ntRef_ntIOL14_LRS          ,
                       IOL14_TX_DATA                  =>  ntRef_ntIOL14_TX_DATA          ,
                       IOL14_TS_CTRL                  =>  ntRef_ntIOL14_TS_CTRL          ,
                       IOL14_IODLY_CTRL               =>  ntRef_ntIOL14_IODLY_CTRL          ,
                       IOL14_MIPI_SW_DYN_I            =>  ntRef_ntIOL14_MIPI_SW_DYN_I          ,
                       IOL15_CLK_SYS                  =>  ntRef_ntIOL15_CLK_SYS          ,
                       IOL15_CE                       =>  ntRef_ntIOL15_CE          ,
                       IOL15_LRS                      =>  ntRef_ntIOL15_LRS          ,
                       IOL15_TX_DATA                  =>  ntRef_ntIOL15_TX_DATA          ,
                       IOL15_TS_CTRL                  =>  ntRef_ntIOL15_TS_CTRL          ,
                       IOL15_IODLY_CTRL               =>  ntRef_ntIOL15_IODLY_CTRL          ,
                       IOL15_MIPI_SW_DYN_I            =>  ntRef_ntIOL15_MIPI_SW_DYN_I          ,
                       IOL16_CLK_SYS                  =>  ntRef_ntIOL16_CLK_SYS          ,
                       IOL16_CE                       =>  ntRef_ntIOL16_CE          ,
                       IOL16_LRS                      =>  ntRef_ntIOL16_LRS          ,
                       IOL16_TX_DATA                  =>  ntRef_ntIOL16_TX_DATA          ,
                       IOL16_TS_CTRL                  =>  ntRef_ntIOL16_TS_CTRL          ,
                       IOL16_IODLY_CTRL               =>  ntRef_ntIOL16_IODLY_CTRL          ,
                       IOL16_MIPI_SW_DYN_I            =>  ntRef_ntIOL16_MIPI_SW_DYN_I          ,
                       IOL17_CLK_SYS                  =>  ntRef_ntIOL17_CLK_SYS          ,
                       IOL17_CE                       =>  ntRef_ntIOL17_CE          ,
                       IOL17_LRS                      =>  ntRef_ntIOL17_LRS          ,
                       IOL17_TX_DATA                  =>  ntRef_ntIOL17_TX_DATA          ,
                       IOL17_TS_CTRL                  =>  ntRef_ntIOL17_TS_CTRL          ,
                       IOL17_IODLY_CTRL               =>  ntRef_ntIOL17_IODLY_CTRL          ,
                       IOL17_MIPI_SW_DYN_I            =>  ntRef_ntIOL17_MIPI_SW_DYN_I          ,
                       IOL18_CLK_SYS                  =>  ntRef_ntIOL18_CLK_SYS          ,
                       IOL18_CE                       =>  ntRef_ntIOL18_CE          ,
                       IOL18_LRS                      =>  ntRef_ntIOL18_LRS          ,
                       IOL18_TX_DATA                  =>  ntRef_ntIOL18_TX_DATA          ,
                       IOL18_TS_CTRL                  =>  ntRef_ntIOL18_TS_CTRL          ,
                       IOL18_IODLY_CTRL               =>  ntRef_ntIOL18_IODLY_CTRL          ,
                       IOL18_MIPI_SW_DYN_I            =>  ntRef_ntIOL18_MIPI_SW_DYN_I          ,
                       IOL19_CLK_SYS                  =>  ntRef_ntIOL19_CLK_SYS          ,
                       IOL19_CE                       =>  ntRef_ntIOL19_CE          ,
                       IOL19_LRS                      =>  ntRef_ntIOL19_LRS          ,
                       IOL19_TX_DATA                  =>  ntRef_ntIOL19_TX_DATA          ,
                       IOL19_TS_CTRL                  =>  ntRef_ntIOL19_TS_CTRL          ,
                       IOL19_IODLY_CTRL               =>  ntRef_ntIOL19_IODLY_CTRL          ,
                       IOL19_MIPI_SW_DYN_I            =>  ntRef_ntIOL19_MIPI_SW_DYN_I          ,
                       IOL20_CLK_SYS                  =>  ntRef_ntIOL20_CLK_SYS          ,
                       IOL20_CE                       =>  ntRef_ntIOL20_CE          ,
                       IOL20_LRS                      =>  ntRef_ntIOL20_LRS          ,
                       IOL20_TX_DATA                  =>  ntRef_ntIOL20_TX_DATA          ,
                       IOL20_TS_CTRL                  =>  ntRef_ntIOL20_TS_CTRL          ,
                       IOL20_IODLY_CTRL               =>  ntRef_ntIOL20_IODLY_CTRL          ,
                       IOL20_MIPI_SW_DYN_I            =>  ntRef_ntIOL20_MIPI_SW_DYN_I          ,
                       IOL21_CLK_SYS                  =>  ntRef_ntIOL21_CLK_SYS          ,
                       IOL21_CE                       =>  ntRef_ntIOL21_CE          ,
                       IOL21_LRS                      =>  ntRef_ntIOL21_LRS          ,
                       IOL21_TX_DATA                  =>  ntRef_ntIOL21_TX_DATA          ,
                       IOL21_TS_CTRL                  =>  ntRef_ntIOL21_TS_CTRL          ,
                       IOL21_IODLY_CTRL               =>  ntRef_ntIOL21_IODLY_CTRL          ,
                       IOL21_MIPI_SW_DYN_I            =>  ntRef_ntIOL21_MIPI_SW_DYN_I          ,
                       IOL22_CLK_SYS                  =>  ntRef_ntIOL22_CLK_SYS          ,
                       IOL22_CE                       =>  ntRef_ntIOL22_CE          ,
                       IOL22_LRS                      =>  ntRef_ntIOL22_LRS          ,
                       IOL22_TX_DATA                  =>  ntRef_ntIOL22_TX_DATA          ,
                       IOL22_TS_CTRL                  =>  ntRef_ntIOL22_TS_CTRL          ,
                       IOL22_IODLY_CTRL               =>  ntRef_ntIOL22_IODLY_CTRL          ,
                       IOL22_MIPI_SW_DYN_I            =>  ntRef_ntIOL22_MIPI_SW_DYN_I          ,
                       IOL23_CLK_SYS                  =>  ntRef_ntIOL23_CLK_SYS          ,
                       IOL23_CE                       =>  ntRef_ntIOL23_CE          ,
                       IOL23_LRS                      =>  ntRef_ntIOL23_LRS          ,
                       IOL23_TX_DATA                  =>  ntRef_ntIOL23_TX_DATA          ,
                       IOL23_TS_CTRL                  =>  ntRef_ntIOL23_TS_CTRL          ,
                       IOL23_IODLY_CTRL               =>  ntRef_ntIOL23_IODLY_CTRL          ,
                       IOL23_MIPI_SW_DYN_I            =>  ntRef_ntIOL23_MIPI_SW_DYN_I          ,
                       IOL24_CLK_SYS                  =>  ntRef_ntIOL24_CLK_SYS          ,
                       IOL24_CE                       =>  ntRef_ntIOL24_CE          ,
                       IOL24_LRS                      =>  ntRef_ntIOL24_LRS          ,
                       IOL24_TX_DATA                  =>  ntRef_ntIOL24_TX_DATA          ,
                       IOL24_TS_CTRL                  =>  ntRef_ntIOL24_TS_CTRL          ,
                       IOL24_IODLY_CTRL               =>  ntRef_ntIOL24_IODLY_CTRL          ,
                       IOL24_MIPI_SW_DYN_I            =>  ntRef_ntIOL24_MIPI_SW_DYN_I          ,
                       IOL25_CLK_SYS                  =>  ntRef_ntIOL25_CLK_SYS          ,
                       IOL25_CE                       =>  ntRef_ntIOL25_CE          ,
                       IOL25_LRS                      =>  ntRef_ntIOL25_LRS          ,
                       IOL25_TX_DATA                  =>  ntRef_ntIOL25_TX_DATA          ,
                       IOL25_TS_CTRL                  =>  ntRef_ntIOL25_TS_CTRL          ,
                       IOL25_IODLY_CTRL               =>  ntRef_ntIOL25_IODLY_CTRL          ,
                       IOL25_MIPI_SW_DYN_I            =>  ntRef_ntIOL25_MIPI_SW_DYN_I          ,
                       IOL26_CLK_SYS                  =>  ntRef_ntIOL26_CLK_SYS          ,
                       IOL26_CE                       =>  ntRef_ntIOL26_CE          ,
                       IOL26_LRS                      =>  ntRef_ntIOL26_LRS          ,
                       IOL26_TX_DATA                  =>  ntRef_ntIOL26_TX_DATA          ,
                       IOL26_TS_CTRL                  =>  ntRef_ntIOL26_TS_CTRL          ,
                       IOL26_IODLY_CTRL               =>  ntRef_ntIOL26_IODLY_CTRL          ,
                       IOL26_MIPI_SW_DYN_I            =>  ntRef_ntIOL26_MIPI_SW_DYN_I          ,
                       IOL27_CLK_SYS                  =>  ntRef_ntIOL27_CLK_SYS          ,
                       IOL27_CE                       =>  ntRef_ntIOL27_CE          ,
                       IOL27_LRS                      =>  ntRef_ntIOL27_LRS          ,
                       IOL27_TX_DATA                  =>  ntRef_ntIOL27_TX_DATA          ,
                       IOL27_TS_CTRL                  =>  ntRef_ntIOL27_TS_CTRL          ,
                       IOL27_IODLY_CTRL               =>  ntRef_ntIOL27_IODLY_CTRL          ,
                       IOL27_MIPI_SW_DYN_I            =>  ntRef_ntIOL27_MIPI_SW_DYN_I          ,
                       IOL28_CLK_SYS                  =>  ntRef_ntIOL28_CLK_SYS          ,
                       IOL28_CE                       =>  ntRef_ntIOL28_CE          ,
                       IOL28_LRS                      =>  ntRef_ntIOL28_LRS          ,
                       IOL28_TX_DATA                  =>  ntRef_ntIOL28_TX_DATA          ,
                       IOL28_TS_CTRL                  =>  ntRef_ntIOL28_TS_CTRL          ,
                       IOL28_IODLY_CTRL               =>  ntRef_ntIOL28_IODLY_CTRL          ,
                       IOL28_MIPI_SW_DYN_I            =>  ntRef_ntIOL28_MIPI_SW_DYN_I          ,
                       IOL29_CLK_SYS                  =>  ntRef_ntIOL29_CLK_SYS          ,
                       IOL29_CE                       =>  ntRef_ntIOL29_CE          ,
                       IOL29_LRS                      =>  ntRef_ntIOL29_LRS          ,
                       IOL29_TX_DATA                  =>  ntRef_ntIOL29_TX_DATA          ,
                       IOL29_TS_CTRL                  =>  ntRef_ntIOL29_TS_CTRL          ,
                       IOL29_IODLY_CTRL               =>  ntRef_ntIOL29_IODLY_CTRL          ,
                       IOL29_MIPI_SW_DYN_I            =>  ntRef_ntIOL29_MIPI_SW_DYN_I          ,
                       IOL30_CLK_SYS                  =>  ntRef_ntIOL30_CLK_SYS          ,
                       IOL30_CE                       =>  ntRef_ntIOL30_CE          ,
                       IOL30_LRS                      =>  ntRef_ntIOL30_LRS          ,
                       IOL30_TX_DATA                  =>  ntRef_ntIOL30_TX_DATA          ,
                       IOL30_TS_CTRL                  =>  ntRef_ntIOL30_TS_CTRL          ,
                       IOL30_IODLY_CTRL               =>  ntRef_ntIOL30_IODLY_CTRL          ,
                       IOL30_MIPI_SW_DYN_I            =>  ntRef_ntIOL30_MIPI_SW_DYN_I          ,
                       IOL31_CLK_SYS                  =>  ntRef_ntIOL31_CLK_SYS          ,
                       IOL31_CE                       =>  ntRef_ntIOL31_CE          ,
                       IOL31_LRS                      =>  ntRef_ntIOL31_LRS          ,
                       IOL31_TX_DATA                  =>  ntRef_ntIOL31_TX_DATA          ,
                       IOL31_TS_CTRL                  =>  ntRef_ntIOL31_TS_CTRL          ,
                       IOL31_IODLY_CTRL               =>  ntRef_ntIOL31_IODLY_CTRL          ,
                       IOL31_MIPI_SW_DYN_I            =>  ntRef_ntIOL31_MIPI_SW_DYN_I          ,
                       IOL32_CLK_SYS                  =>  ntRef_ntIOL32_CLK_SYS          ,
                       IOL32_CE                       =>  ntRef_ntIOL32_CE          ,
                       IOL32_LRS                      =>  ntRef_ntIOL32_LRS          ,
                       IOL32_TX_DATA                  =>  ntRef_ntIOL32_TX_DATA          ,
                       IOL32_TS_CTRL                  =>  ntRef_ntIOL32_TS_CTRL          ,
                       IOL32_IODLY_CTRL               =>  ntRef_ntIOL32_IODLY_CTRL          ,
                       IOL32_MIPI_SW_DYN_I            =>  ntRef_ntIOL32_MIPI_SW_DYN_I          ,
                       IOL33_CLK_SYS                  =>  ntRef_ntIOL33_CLK_SYS          ,
                       IOL33_CE                       =>  ntRef_ntIOL33_CE          ,
                       IOL33_LRS                      =>  ntRef_ntIOL33_LRS          ,
                       IOL33_TX_DATA                  =>  ntRef_ntIOL33_TX_DATA          ,
                       IOL33_TS_CTRL                  =>  ntRef_ntIOL33_TS_CTRL          ,
                       IOL33_IODLY_CTRL               =>  ntRef_ntIOL33_IODLY_CTRL          ,
                       IOL33_MIPI_SW_DYN_I            =>  ntRef_ntIOL33_MIPI_SW_DYN_I          ,
                       IOL34_CLK_SYS                  =>  ntRef_ntIOL34_CLK_SYS          ,
                       IOL34_CE                       =>  ntRef_ntIOL34_CE          ,
                       IOL34_LRS                      =>  ntRef_ntIOL34_LRS          ,
                       IOL34_TX_DATA                  =>  ntRef_ntIOL34_TX_DATA          ,
                       IOL34_TS_CTRL                  =>  ntRef_ntIOL34_TS_CTRL          ,
                       IOL34_IODLY_CTRL               =>  ntRef_ntIOL34_IODLY_CTRL          ,
                       IOL34_MIPI_SW_DYN_I            =>  ntRef_ntIOL34_MIPI_SW_DYN_I          ,
                       IOL35_CLK_SYS                  =>  ntRef_ntIOL35_CLK_SYS          ,
                       IOL35_CE                       =>  ntRef_ntIOL35_CE          ,
                       IOL35_LRS                      =>  ntRef_ntIOL35_LRS          ,
                       IOL35_TX_DATA                  =>  ntRef_ntIOL35_TX_DATA          ,
                       IOL35_TS_CTRL                  =>  ntRef_ntIOL35_TS_CTRL          ,
                       IOL35_IODLY_CTRL               =>  ntRef_ntIOL35_IODLY_CTRL          ,
                       IOL35_MIPI_SW_DYN_I            =>  ntRef_ntIOL35_MIPI_SW_DYN_I          ,
                       IOL36_CLK_SYS                  =>  ntRef_ntIOL36_CLK_SYS          ,
                       IOL36_CE                       =>  ntRef_ntIOL36_CE          ,
                       IOL36_LRS                      =>  ntRef_ntIOL36_LRS          ,
                       IOL36_TX_DATA                  =>  ntRef_ntIOL36_TX_DATA          ,
                       IOL36_TS_CTRL                  =>  ntRef_ntIOL36_TS_CTRL          ,
                       IOL36_IODLY_CTRL               =>  ntRef_ntIOL36_IODLY_CTRL          ,
                       IOL36_MIPI_SW_DYN_I            =>  ntRef_ntIOL36_MIPI_SW_DYN_I          ,
                       IOL37_CLK_SYS                  =>  ntRef_ntIOL37_CLK_SYS          ,
                       IOL37_CE                       =>  ntRef_ntIOL37_CE          ,
                       IOL37_LRS                      =>  ntRef_ntIOL37_LRS          ,
                       IOL37_TX_DATA                  =>  ntRef_ntIOL37_TX_DATA          ,
                       IOL37_TS_CTRL                  =>  ntRef_ntIOL37_TS_CTRL          ,
                       IOL37_IODLY_CTRL               =>  ntRef_ntIOL37_IODLY_CTRL          ,
                       IOL37_MIPI_SW_DYN_I            =>  ntRef_ntIOL37_MIPI_SW_DYN_I          ,
                       IOL38_CLK_SYS                  =>  ntRef_ntIOL38_CLK_SYS          ,
                       IOL38_CE                       =>  ntRef_ntIOL38_CE          ,
                       IOL38_LRS                      =>  ntRef_ntIOL38_LRS          ,
                       IOL38_TX_DATA                  =>  ntRef_ntIOL38_TX_DATA          ,
                       IOL38_TS_CTRL                  =>  ntRef_ntIOL38_TS_CTRL          ,
                       IOL38_IODLY_CTRL               =>  ntRef_ntIOL38_IODLY_CTRL          ,
                       IOL38_MIPI_SW_DYN_I            =>  ntRef_ntIOL38_MIPI_SW_DYN_I          ,
                       IOL39_CLK_SYS                  =>  ntRef_ntIOL39_CLK_SYS          ,
                       IOL39_CE                       =>  ntRef_ntIOL39_CE          ,
                       IOL39_LRS                      =>  ntRef_ntIOL39_LRS          ,
                       IOL39_TX_DATA                  =>  ntRef_ntIOL39_TX_DATA          ,
                       IOL39_TS_CTRL                  =>  ntRef_ntIOL39_TS_CTRL          ,
                       IOL39_IODLY_CTRL               =>  ntRef_ntIOL39_IODLY_CTRL          ,
                       IOL39_MIPI_SW_DYN_I            =>  ntRef_ntIOL39_MIPI_SW_DYN_I          ,
                       IOL40_CLK_SYS                  =>  ntRef_ntIOL40_CLK_SYS          ,
                       IOL40_CE                       =>  ntRef_ntIOL40_CE          ,
                       IOL40_LRS                      =>  ntRef_ntIOL40_LRS          ,
                       IOL40_TX_DATA                  =>  ntRef_ntIOL40_TX_DATA          ,
                       IOL40_TS_CTRL                  =>  ntRef_ntIOL40_TS_CTRL          ,
                       IOL40_IODLY_CTRL               =>  ntRef_ntIOL40_IODLY_CTRL          ,
                       IOL40_MIPI_SW_DYN_I            =>  ntRef_ntIOL40_MIPI_SW_DYN_I          ,
                       IOL41_CLK_SYS                  =>  ntRef_ntIOL41_CLK_SYS          ,
                       IOL41_CE                       =>  ntRef_ntIOL41_CE          ,
                       IOL41_LRS                      =>  ntRef_ntIOL41_LRS          ,
                       IOL41_TX_DATA                  =>  ntRef_ntIOL41_TX_DATA          ,
                       IOL41_TS_CTRL                  =>  ntRef_ntIOL41_TS_CTRL          ,
                       IOL41_IODLY_CTRL               =>  ntRef_ntIOL41_IODLY_CTRL          ,
                       IOL41_MIPI_SW_DYN_I            =>  ntRef_ntIOL41_MIPI_SW_DYN_I          ,
                       IOL42_CLK_SYS                  =>  ntRef_ntIOL42_CLK_SYS          ,
                       IOL42_CE                       =>  ntRef_ntIOL42_CE          ,
                       IOL42_LRS                      =>  ntRef_ntIOL42_LRS          ,
                       IOL42_TX_DATA                  =>  ntRef_ntIOL42_TX_DATA          ,
                       IOL42_TS_CTRL                  =>  ntRef_ntIOL42_TS_CTRL          ,
                       IOL42_IODLY_CTRL               =>  ntRef_ntIOL42_IODLY_CTRL          ,
                       IOL42_MIPI_SW_DYN_I            =>  ntRef_ntIOL42_MIPI_SW_DYN_I          ,
                       IOL43_CLK_SYS                  =>  ntRef_ntIOL43_CLK_SYS          ,
                       IOL43_CE                       =>  ntRef_ntIOL43_CE          ,
                       IOL43_LRS                      =>  ntRef_ntIOL43_LRS          ,
                       IOL43_TX_DATA                  =>  ntRef_ntIOL43_TX_DATA          ,
                       IOL43_TS_CTRL                  =>  ntRef_ntIOL43_TS_CTRL          ,
                       IOL43_IODLY_CTRL               =>  ntRef_ntIOL43_IODLY_CTRL          ,
                       IOL43_MIPI_SW_DYN_I            =>  ntRef_ntIOL43_MIPI_SW_DYN_I          ,
                       IOL44_CLK_SYS                  =>  ntRef_ntIOL44_CLK_SYS          ,
                       IOL44_CE                       =>  ntRef_ntIOL44_CE          ,
                       IOL44_LRS                      =>  ntRef_ntIOL44_LRS          ,
                       IOL44_TX_DATA                  =>  ntRef_ntIOL44_TX_DATA          ,
                       IOL44_TS_CTRL                  =>  ntRef_ntIOL44_TS_CTRL          ,
                       IOL44_IODLY_CTRL               =>  ntRef_ntIOL44_IODLY_CTRL          ,
                       IOL44_MIPI_SW_DYN_I            =>  ntRef_ntIOL44_MIPI_SW_DYN_I          ,
                       IOL45_CLK_SYS                  =>  ntRef_ntIOL45_CLK_SYS          ,
                       IOL45_CE                       =>  ntRef_ntIOL45_CE          ,
                       IOL45_LRS                      =>  ntRef_ntIOL45_LRS          ,
                       IOL45_TX_DATA                  =>  ntRef_ntIOL45_TX_DATA          ,
                       IOL45_TS_CTRL                  =>  ntRef_ntIOL45_TS_CTRL          ,
                       IOL45_IODLY_CTRL               =>  ntRef_ntIOL45_IODLY_CTRL          ,
                       IOL45_MIPI_SW_DYN_I            =>  ntRef_ntIOL45_MIPI_SW_DYN_I          ,
                       IOL46_CLK_SYS                  =>  ntRef_ntIOL46_CLK_SYS          ,
                       IOL46_CE                       =>  ntRef_ntIOL46_CE          ,
                       IOL46_LRS                      =>  ntRef_ntIOL46_LRS          ,
                       IOL46_TX_DATA                  =>  ntRef_ntIOL46_TX_DATA          ,
                       IOL46_TS_CTRL                  =>  ntRef_ntIOL46_TS_CTRL          ,
                       IOL46_IODLY_CTRL               =>  ntRef_ntIOL46_IODLY_CTRL          ,
                       IOL46_MIPI_SW_DYN_I            =>  ntRef_ntIOL46_MIPI_SW_DYN_I          ,
                       IOL47_CLK_SYS                  =>  ntRef_ntIOL47_CLK_SYS          ,
                       IOL47_CE                       =>  ntRef_ntIOL47_CE          ,
                       IOL47_LRS                      =>  ntRef_ntIOL47_LRS          ,
                       IOL47_TX_DATA                  =>  ntRef_ntIOL47_TX_DATA          ,
                       IOL47_TS_CTRL                  =>  ntRef_ntIOL47_TS_CTRL          ,
                       IOL47_IODLY_CTRL               =>  ntRef_ntIOL47_IODLY_CTRL          ,
                       IOL47_MIPI_SW_DYN_I            =>  ntRef_ntIOL47_MIPI_SW_DYN_I          ,
                       IOL48_CLK_SYS                  =>  ntRef_ntIOL48_CLK_SYS          ,
                       IOL48_CE                       =>  ntRef_ntIOL48_CE          ,
                       IOL48_LRS                      =>  ntRef_ntIOL48_LRS          ,
                       IOL48_TX_DATA                  =>  ntRef_ntIOL48_TX_DATA          ,
                       IOL48_TS_CTRL                  =>  ntRef_ntIOL48_TS_CTRL          ,
                       IOL48_IODLY_CTRL               =>  ntRef_ntIOL48_IODLY_CTRL          ,
                       IOL48_MIPI_SW_DYN_I            =>  ntRef_ntIOL48_MIPI_SW_DYN_I          ,
                       IOL49_CLK_SYS                  =>  ntRef_ntIOL49_CLK_SYS          ,
                       IOL49_CE                       =>  ntRef_ntIOL49_CE          ,
                       IOL49_LRS                      =>  ntRef_ntIOL49_LRS          ,
                       IOL49_TX_DATA                  =>  ntRef_ntIOL49_TX_DATA          ,
                       IOL49_TS_CTRL                  =>  ntRef_ntIOL49_TS_CTRL          ,
                       IOL49_IODLY_CTRL               =>  ntRef_ntIOL49_IODLY_CTRL          ,
                       IOL49_MIPI_SW_DYN_I            =>  ntRef_ntIOL49_MIPI_SW_DYN_I          ,
                       IOL50_CLK_SYS                  =>  ntRef_ntIOL50_CLK_SYS          ,
                       IOL50_CE                       =>  ntRef_ntIOL50_CE          ,
                       IOL50_LRS                      =>  ntRef_ntIOL50_LRS          ,
                       IOL50_TX_DATA                  =>  ntRef_ntIOL50_TX_DATA          ,
                       IOL50_TS_CTRL                  =>  ntRef_ntIOL50_TS_CTRL          ,
                       IOL50_IODLY_CTRL               =>  ntRef_ntIOL50_IODLY_CTRL          ,
                       IOL50_MIPI_SW_DYN_I            =>  ntRef_ntIOL50_MIPI_SW_DYN_I          ,
                       IOL51_CLK_SYS                  =>  ntRef_ntIOL51_CLK_SYS          ,
                       IOL51_CE                       =>  ntRef_ntIOL51_CE          ,
                       IOL51_LRS                      =>  ntRef_ntIOL51_LRS          ,
                       IOL51_TX_DATA                  =>  ntRef_ntIOL51_TX_DATA          ,
                       IOL51_TS_CTRL                  =>  ntRef_ntIOL51_TS_CTRL          ,
                       IOL51_IODLY_CTRL               =>  ntRef_ntIOL51_IODLY_CTRL          ,
                       IOL51_MIPI_SW_DYN_I            =>  ntRef_ntIOL51_MIPI_SW_DYN_I          ,
                       IOL52_CLK_SYS                  =>  ntRef_ntIOL52_CLK_SYS          ,
                       IOL52_CE                       =>  ntRef_ntIOL52_CE          ,
                       IOL52_LRS                      =>  ntRef_ntIOL52_LRS          ,
                       IOL52_TX_DATA                  =>  ntRef_ntIOL52_TX_DATA          ,
                       IOL52_TS_CTRL                  =>  ntRef_ntIOL52_TS_CTRL          ,
                       IOL52_IODLY_CTRL               =>  ntRef_ntIOL52_IODLY_CTRL          ,
                       IOL52_MIPI_SW_DYN_I            =>  ntRef_ntIOL52_MIPI_SW_DYN_I          ,
                       IOL53_CLK_SYS                  =>  ntRef_ntIOL53_CLK_SYS          ,
                       IOL53_CE                       =>  ntRef_ntIOL53_CE          ,
                       IOL53_LRS                      =>  ntRef_ntIOL53_LRS          ,
                       IOL53_TX_DATA                  =>  ntRef_ntIOL53_TX_DATA          ,
                       IOL53_TS_CTRL                  =>  ntRef_ntIOL53_TS_CTRL          ,
                       IOL53_IODLY_CTRL               =>  ntRef_ntIOL53_IODLY_CTRL          ,
                       IOL53_MIPI_SW_DYN_I            =>  ntRef_ntIOL53_MIPI_SW_DYN_I          ,
                       IOL54_CLK_SYS                  =>  ntRef_ntIOL54_CLK_SYS          ,
                       IOL54_CE                       =>  ntRef_ntIOL54_CE          ,
                       IOL54_LRS                      =>  ntRef_ntIOL54_LRS          ,
                       IOL54_TX_DATA                  =>  ntRef_ntIOL54_TX_DATA          ,
                       IOL54_TS_CTRL                  =>  ntRef_ntIOL54_TS_CTRL          ,
                       IOL54_IODLY_CTRL               =>  ntRef_ntIOL54_IODLY_CTRL          ,
                       IOL54_MIPI_SW_DYN_I            =>  ntRef_ntIOL54_MIPI_SW_DYN_I          ,
                       IOL55_CLK_SYS                  =>  ntRef_ntIOL55_CLK_SYS          ,
                       IOL55_CE                       =>  ntRef_ntIOL55_CE          ,
                       IOL55_LRS                      =>  ntRef_ntIOL55_LRS          ,
                       IOL55_TX_DATA                  =>  ntRef_ntIOL55_TX_DATA          ,
                       IOL55_TS_CTRL                  =>  ntRef_ntIOL55_TS_CTRL          ,
                       IOL55_IODLY_CTRL               =>  ntRef_ntIOL55_IODLY_CTRL          ,
                       IOL55_MIPI_SW_DYN_I            =>  ntRef_ntIOL55_MIPI_SW_DYN_I          ,
                       IOL56_CLK_SYS                  =>  ntRef_ntIOL56_CLK_SYS          ,
                       IOL56_CE                       =>  ntRef_ntIOL56_CE          ,
                       IOL56_LRS                      =>  ntRef_ntIOL56_LRS          ,
                       IOL56_TX_DATA                  =>  ntRef_ntIOL56_TX_DATA          ,
                       IOL56_TS_CTRL                  =>  ntRef_ntIOL56_TS_CTRL          ,
                       IOL56_IODLY_CTRL               =>  ntRef_ntIOL56_IODLY_CTRL          ,
                       IOL56_MIPI_SW_DYN_I            =>  ntRef_ntIOL56_MIPI_SW_DYN_I          ,
                       IOL57_CLK_SYS                  =>  ntRef_ntIOL57_CLK_SYS          ,
                       IOL57_CE                       =>  ntRef_ntIOL57_CE          ,
                       IOL57_LRS                      =>  ntRef_ntIOL57_LRS          ,
                       IOL57_TX_DATA                  =>  ntRef_ntIOL57_TX_DATA          ,
                       IOL57_TS_CTRL                  =>  ntRef_ntIOL57_TS_CTRL          ,
                       IOL57_IODLY_CTRL               =>  ntRef_ntIOL57_IODLY_CTRL          ,
                       IOL57_MIPI_SW_DYN_I            =>  ntRef_ntIOL57_MIPI_SW_DYN_I          ,
                       IOL58_CLK_SYS                  =>  ntRef_ntIOL58_CLK_SYS          ,
                       IOL58_CE                       =>  ntRef_ntIOL58_CE          ,
                       IOL58_LRS                      =>  ntRef_ntIOL58_LRS          ,
                       IOL58_TX_DATA                  =>  ntRef_ntIOL58_TX_DATA          ,
                       IOL58_TS_CTRL                  =>  ntRef_ntIOL58_TS_CTRL          ,
                       IOL58_IODLY_CTRL               =>  ntRef_ntIOL58_IODLY_CTRL          ,
                       IOL58_MIPI_SW_DYN_I            =>  ntRef_ntIOL58_MIPI_SW_DYN_I          ,
                       IOL59_CLK_SYS                  =>  ntRef_ntIOL59_CLK_SYS          ,
                       IOL59_CE                       =>  ntRef_ntIOL59_CE          ,
                       IOL59_LRS                      =>  ntRef_ntIOL59_LRS          ,
                       IOL59_TX_DATA                  =>  ntRef_ntIOL59_TX_DATA          ,
                       IOL59_TS_CTRL                  =>  ntRef_ntIOL59_TS_CTRL          ,
                       IOL59_IODLY_CTRL               =>  ntRef_ntIOL59_IODLY_CTRL          ,
                       IOL59_MIPI_SW_DYN_I            =>  ntRef_ntIOL59_MIPI_SW_DYN_I          ,
                       SRB_P0                         =>  ntRef_ntSRB_P0          ,
                       SRB_P1                         =>  ntRef_ntSRB_P1          ,
                       SRB_P2                         =>  ntRef_ntSRB_P2          ,
                       SRB_P3                         =>  ntRef_ntSRB_P3          ,
                       SRB_P4                         =>  ntRef_ntSRB_P4          ,
                       SRB_P5                         =>  ntRef_ntSRB_P5          ,
                       SRB_P6                         =>  ntRef_ntSRB_P6                                                            
                                                                                                                
                   )
          @([sx,sy]);

      STRUCT inc_spec_HMEMC incVar;
      string pin_srb;
      string pin_hmemc;
      string attribute_IO;
      int loc_srb;
      int sy_srb;
      int ty;
      int sx_srb = (tx>2) ? sx-NUM_GRID_X-2 : sx+NUM_GRID_HMEMC_X-2*NUM_GRID_X-2;

      foreach incVar(inc_HMEMC_SRB_spec)
      {
          pin_srb = incVar.port_srb;
          pin_hmemc = incVar.port_hmemc;
          attribute_IO = incVar.attribute_IO;
          loc_srb = incVar.loc_srb;    
          sy_srb = sy + loc_srb*NUM_GRID_Y; 
              
          if(attribute_IO =="I")
          { 
             connect(<pin *pin_hmemc of <device HMEMC_TILE @[sx,sy]>> => <wire *pin_srb of <device SRB_TILE@[sx_srb,sy_srb]>>);
          }
          else
          {
            connect(<pin *pin_srb of<device SRB_TILE@[sx_srb,sy_srb]>> => <wire *pin_hmemc of <device HMEMC_TILE @[sx,sy]>>); 
          }
      } 
      
    }
}// end of function place_hmemc_tile

/********************************************************************************
********************************************************************************/

}//end of package pgl_funcs_place


