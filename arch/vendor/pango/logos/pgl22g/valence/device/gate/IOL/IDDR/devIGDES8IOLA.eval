*****************************************************************

  Device    [devIGDES8IOLA]

  Author    [yqtan]

  Abstract  [devIGDES8IOLA on the TOP/RIGHT/BOTTOM of Arch.]

  Revision History:

********************************************************************************/

gate
device devIGDES8IOLA : device IOL
{
    parameter
    (
        config string CP_GRS_DIS              = "FALSE",      //"TRUE", "FALSE"
        config bit    CP_DELAY_SETTING[1:0]  := 2'b00,      //2'd0 => neither input nor output use delay unit; 2'd1 => delay unit for output; 
                                                            //2'd2 => delay unit for input; 2'd3 => illegal setting
        config bit    CP_ICLK_SEL[1:0]         = 2'b00,      //0 => ioclk; 1 => dqsi_del; 2 => clk_sys_for_input
        config string CP_INLRS_EN              = "ENABLE",  //"ENABLE"; "DISABLE"
        config string CP_LRS_POL               = "FALSE",   //"FALSE": Normal; "TRUE": Inverted
        config string CP_INCLK_POL             = "FALSE",   //"FALSE": Normal; "TRUE": Inverted
        config string CP_INCLK_EN             := "ENABLE",    //"DISABLE", "ENABLE"
        config string CP_IDDR_MODE             = "IGDES8",    //"IGDDR", "IGDES4", "IGDES7", "IGDES8",
                                                            //"IMDDR", "IMDES4", "IMDES8"
        config string CP_MIPI_EN               = "DISABLE"
    );
    port
    (
        input        DI,
        input        CLK_SYS,
        input        CLK_IO,
        input        LRS,
        input        MIPI_SW_DYN_I,
        output       MIPI_SW_DYN_O,
        output       INCK,
        output       TO,
        output       RX_DATA[7:0],
        output       RX_DATA_DD
    );

}// end of device devIGDES8IOLA

/*******************************************************************************

  Device    [devIGDES8IOLA]

  Author    []

  Abstract  [The structure netlist of devIGDES8IOLA is described in the similar fashion
             as in HDL. In unit instantiation statement, the formal pin may be
             connected to net which is declared explicitly.

             In Valence, the connection can also be made from formal pin to other
             pin or port, in which case Valence compiler shall create the net to
             fulfil the connection. The built-in naming convention is kicked in
             to name the automatically created net. However, the objects (net, instance)
             of this netlist are going to mapped from schematic. The compiler-generated
             names cause trouble for the mapping. Therefore, all wires are declared
             explicitly in the following description]

  Revision History:

********************************************************************************/
structure netlist of devIGDES8IOLA
{
    // Wires connecting to output ports
    wire ntRX_DATA_DD;
    RX_DATA_DD     <= ntRX_DATA_DD ;
    
    // Internal wires
    wire ntDIN;
    wire ntLRS_SEL;
    wire ntLRS_IN;
    wire ntCLK_SYS_FOR_INPUT;
    wire ntICLK;
    wire ntMIPI_SW_DYN_I;
    wire ntMIPI_SW_DYN_O;
    
    wire ntCLK_SYS_I;
    wire ntRX_DATA_TMP;
    
    // Wires for input ports
    wire ntCLK_SYS;
    wire ntCLK_IO;
    wire ntLRS;
    wire ntDI;
    ntCLK_SYS            <= CLK_SYS;
    ntCLK_IO             <= CLK_IO;
    ntLRS                <= LRS;
    ntDI                 <= DI; 
    ntMIPI_SW_DYN_I      <= MIPI_SW_DYN_I;
    MIPI_SW_DYN_O        <= ntMIPI_SW_DYN_O;
    
    device MUX21_EN MIPI_EN_MUX
        parameter map
        (
            CP_SEL => CP_MIPI_EN
        )
        port map
        (
            X0 => ntMIPI_SW_DYN_I,
            X1 => 1'b0,
            Y  => ntMIPI_SW_DYN_O
        );
        
    device MUX21_EN  IFF_LRS_MUX
        parameter map
        (
            CP_SEL => CP_INLRS_EN
        )
        port map
        (
            X0   => ntLRS_SEL,
            X1   => 1'b1,
            Y    => ntLRS_IN
        );
        
    device POLMUX LRS_POL_MUX
        parameter map
        (
             CP_POLARITY_INV => CP_LRS_POL
        )
        port map
        (
             X  => ntLRS,
             Y  => ntLRS_SEL
        );
        
    device MUX31 IDDR_CLK_MUX
        parameter map
        (
            CP_SEL => CP_ICLK_SEL
        )
        port map
        (
            X0   => ntCLK_IO,
            Y    => ntICLK
        );
      
    device POLMUX RCLK_POL_MUX_I
        parameter map
        (
            CP_POLARITY_INV => CP_INCLK_POL
        )
        port map
        (
            X  => ntCLK_SYS_I,
            Y  => ntCLK_SYS_FOR_INPUT
        );
    
    device MUX21_EN RCLK_EN_MUX_I 
       parameter map
       (
          CP_SEL  => CP_INCLK_EN
       )
       port map
       (
          X0 => ntCLK_SYS,
          X1 => 1'b0,
          Y  => ntCLK_SYS_I
      );
    
    device IDDR IDDR    
        parameter map
        (
            CP_GRS_DIS => CP_GRS_DIS,
            CP_IDDR_MODE => CP_IDDR_MODE
        )
        port map
        (
            LRS            => ntLRS_IN,
            RX_DATA        => {RX_DATA[7:1], ntRX_DATA_TMP},
            ICLK           => ntICLK ,
            CLK_SYS        => ntCLK_SYS_FOR_INPUT,
            DESCLK         => ntCLK_IO,
            DIN            => ntRX_DATA_DD
        );

    device MUX21_N IFF_RXDATA_SEL_MUX
        parameter map
        (
            CP_SEL => CP_IDDR_MODE
        )
        port map
        (
            X0     =>  ntRX_DATA_TMP,
            Y      =>  RX_DATA[0]
        );
        
    device MUX21  IN_DELSEL_MUX
        parameter map
        (
            CP_SEL => CP_DELAY_SETTING[1]
        )
        port map
        (
            X0   => ntDI,
            Y    => ntRX_DATA_DD
        );
}; // end of structure netlist of devIGDES8IOLA

