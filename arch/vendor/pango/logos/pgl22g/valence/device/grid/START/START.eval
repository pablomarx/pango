*****************************************************************

  Device    [START]

  Author    [guoxi]

  Abstract  [The Grid Device START]

  Revision History:

********************************************************************************/
//grid device started
grid
device START
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config string CP_GOUTEN_EN = "DISABLE",
        config string CP_GRS_N_EN = "DISABLE",
        config string CP_GWEN_EN = "DISABLE"
    );
    port
    (
// configuration_body_def_on


    config input SC_GOUTEN_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GOUTEN_EN" */,

    config input SC_GRS_N_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GRS_N_EN" */,

    config input SC_GWEN_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GWEN_EN" */,

// configuration_body_def_end

        input UCLK = 1'b1,
        input GOUTEN_I = 1'b1,
        input GRS_N_I = 1'b1,
        input GWEN_I = 1'b1,
        output WAKEUP_OVER
    );
};
//grid device end


/*******************************************************************************

  Device    [START]

  Author    []

  Abstract  [The structure netlist of START is described in the similar fashion 
             as in HDL. In unit instantiation statement, the formal pin may be 
             connected to net which is declared explicitly. 
             
             In Valence, the connection can also be made from formal pin to other 
             pin or port, in which case Valence compiler shall create the net to 
             fulfil the connection. The built-in naming convention is kicked in 
             to name the automatically created net. However, the objects (net, instance)
             of this netlist are going to mapped from schematic. The compiler-generated
             names cause trouble for the mapping. Therefore, all wires are declared
             explicitly in the following description]

  Revision History:

********************************************************************************/
//grid device structure netlist started

structure netlist of START
{

}; // end of structure netlist of START
//grid device structure netlist end


floorplan
structure fp_struct of START
{
    

}; // end of structure fp_struct of START

//grid device configure body started

configuration cfg of START
{

//initial config body0 begin
    if(CP_GOUTEN_EN == "ENABLE")
    {
        SC_GOUTEN_EN  :=  1'b1;
    }
    else if(CP_GOUTEN_EN == "DISABLE")
    {
        SC_GOUTEN_EN  :=  1'b0;
    }
    else
    {
        SC_GOUTEN_EN  :=  1'bx;
        error ("illegal setting for CP_GOUTEN_EN := %s",CP_GOUTEN_EN);
    }

//initial config body0 end


//initial config body1 begin
    if(CP_GRS_N_EN == "ENABLE")
    {
        SC_GRS_N_EN  :=  1'b1;
    }
    else if(CP_GRS_N_EN == "DISABLE")
    {
        SC_GRS_N_EN  :=  1'b0;
    }
    else
    {
        SC_GRS_N_EN  :=  1'bx;
        error ("illegal setting for CP_GRS_N_EN := %s",CP_GRS_N_EN);
    }

//initial config body1 end


//initial config body2 begin
    if(CP_GWEN_EN == "ENABLE")
    {
        SC_GWEN_EN  :=  1'b1;
    }
    else if(CP_GWEN_EN == "DISABLE")
    {
        SC_GWEN_EN  :=  1'b0;
    }
    else
    {
        SC_GWEN_EN  :=  1'bx;
        error ("illegal setting for CP_GWEN_EN := %s",CP_GWEN_EN);
    }

//initial config body2 end

};

//grid device configure body end

timing start_tnl of START
{   
   operator V_START_E1 V_START_E1
        port map
        (
            WAKEUP_OVER => WAKEUP_OVER,
            CLK         => UCLK       ,
            GOE         => GOUTEN_I   ,
            GRS_N       => GRS_N_I    ,
            GWE         => GWEN_I     
        );

    operator V_GRS V_GRS
        port map
        (
            GRS_N => GRS_N_I   
        );
};
