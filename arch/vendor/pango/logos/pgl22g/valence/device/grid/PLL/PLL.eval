*****************************************************************

  Device    [PLL]

  Author    [guoxi]

  Abstract  [The Grid Device PLL]

  Revision History:

********************************************************************************/
//grid device started
grid
device PLL
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config bit CP_VREF_TRIM[1:0] = 2'b00,
        config string CP_LDO_TEST_EN = "FALSE",
        config bit CP_LDO_TESTSEL = 1'b0,
        config bit CP_PLL_LDO_EN = 1'b1,
        config string CP_DYN_CLKMOD_SEL_EN = "FALSE",
        config bit CP_CLKIN_STASEL = 1'b0,
        config bit CP_FBDLY_CNTL[7:0] = 8'b00000000,
        config string CP_FBCK_DLY_EN = "FALSE",
        config bit CP_DYN_RATIO_IDIV_EN = 1'b0,
        config bit CP_RATIO_IDIV[9:0] = 10'b0000000001,
        config string CP_PFDENA_DISABLE = "FALSE",
        config bit CP_FREQ_LOCK[3:0] = 4'b0000,
        config string CP_FREQ_LOCKDET_EN = "TRUE",
        config string CP_PHASE_LOCKDET_EN = "TRUE",
        config string CP_LOCK_FILTER_PD = "TRUE",
        config bit CP_VCOCLK_DIV2 = 1'b0,
        config string CP_EXTRSTSYN_EN = "FALSE",
        config bit CP_DYN_RATIO_ODIV_EN[4:0] = 5'b00000,
        config bit CP_DYN_RATIO_FDIV_EN = 1'b0,
        config bit CP_RATIO_ODIV0[9:0] = 10'b0000000001,
        config bit CP_RATIO_ODIV1[9:0] = 10'b0000000001,
        config bit CP_RATIO_ODIV2[9:0] = 10'b0000000001,
        config bit CP_RATIO_ODIV3[9:0] = 10'b0000000001,
        config bit CP_RATIO_ODIV4[9:0] = 10'b0000000001,
        config bit CP_RATIO_FDIV[9:0] = 10'b0000000001,
        config bit CP_DYN_DUTY_ODIV_EN[4:0] = 5'b00000,
        config bit CP_DYN_DUTY_FDIV_EN = 1'b0,
        config bit CP_DUTY_ODIV0[9:0] = 10'b0000000001,
        config bit CP_DUTY_ODIV1[9:0] = 10'b0000000001,
        config bit CP_DUTY_ODIV2[9:0] = 10'b0000000001,
        config bit CP_DUTY_ODIV3[9:0] = 10'b0000000001,
        config bit CP_DUTY_ODIV4[9:0] = 10'b0000000001,
        config bit CP_DUTY_FDIV[9:0] = 10'b0000000001,
        config bit CP_ODIV_PHASE_EN[4:0] = 5'b00000,
        config bit CP_DYN_PHASE_ODIV_EN[4:0] = 5'b00000,
        config bit CP_DYN_PHASE_FDIV_EN = 1'b0,
        config bit CP_PHASE_ODIV0[12:0] = 13'b0000000010000,
        config bit CP_PHASE_ODIV1[12:0] = 13'b0000000010000,
        config bit CP_PHASE_ODIV2[12:0] = 13'b0000000010000,
        config bit CP_PHASE_ODIV3[12:0] = 13'b0000000010000,
        config bit CP_PHASE_ODIV4[12:0] = 13'b0000000010000,
        config bit CP_PHASE_FDIV[12:0] = 13'b0000000010000,
        config bit CP_ODIV_CAS[4:0] = 5'b00000,
        config bit CP_TS_CLK[4:0] = 5'b00000,
        config bit CP_FBDIV_SEL[2:0] = 3'b000,
        config bit CP_CLKOUT_SEL[2:0] = 3'b000,
        config string CP_BYPASS_EN = "FALSE",
        config bit CP_GATE_EN[6:0] = 7'b0000000,
        config bit CP_GATE_5MUX1_EN = 1'b0,
        config string CP_PLL_PWD_ENABLE = "FALSE",
        config string CP_PLL_GLOGEN_ENABLE = "TRUE",
        config string CP_PLL_RST_DISABLE = "FALSE",
        config string CP_ODIV_RST_ENABLE = "FALSE",
        config bit CP_ICP_BASE_TRIM = 1'b0,
        config bit CP_BW_SEL[1:0] = 2'b00,
        config string CP_DYN_ICP_EN = "FALSE",
        config string CP_DYN_LPFRES_EN = "FALSE",
        config string CP_DYN_CRIPPLE_EN = "FALSE",
        config bit CP_ICP_SEL[3:0] = 4'b0000,
        config bit CP_LPFRES_SEL[2:0] = 3'b000,
        config bit CP_CRIPPLE_SEL = 1'b0,
        config bit CP_VCO_IADJ_TRIM[2:0] = 3'b000,
        config bit CP_TEST_SEL[1:0] = 2'b00
    );
    port
    (
// configuration_body_def_on


    config input SC_VREF_TRIM[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_VREF_TRIM[1],SC_VREF_TRIM[0]" */,

    config input SC_LDO_TEST_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LDO_TEST_EN" */,

    config input SC_LDO_TESTSEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LDO_TESTSEL" */,

    config input SC_PLL_LDO_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PLL_LDO_EN" */,

    config input SC_DYN_CLKMOD_SEL_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DYN_CLKMOD_SEL_EN" */,

    config input SC_CLKIN_STASEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKIN_STASEL" */,

    config input SC_FBDLY_CNTL[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FBDLY_CNTL[7],SC_FBDLY_CNTL[6],SC_FBDLY_CNTL[5],SC_FBDLY_CNTL[4],SC_FBDLY_CNTL[3],SC_FBDLY_CNTL[2],SC_FBDLY_CNTL[1],SC_FBDLY_CNTL[0]" */,

    config input SC_FBCK_DLY_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FBCK_DLY_EN" */,

    config input SC_DYN_RATIO_IDIV_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DYN_RATIO_IDIV_EN" */,

    config input SC_RATIO_IDIV[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RATIO_IDIV[9],SC_RATIO_IDIV[8],SC_RATIO_IDIV[7],SC_RATIO_IDIV[6],SC_RATIO_IDIV[5],SC_RATIO_IDIV[4],SC_RATIO_IDIV[3],SC_RATIO_IDIV[2],SC_RATIO_IDIV[1],SC_RATIO_IDIV[0]" */,

    config input SC_PFDENA_DISABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PFDENA_DISABLE" */,

    config input SC_FREQ_LOCK[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FREQ_LOCK[3],SC_FREQ_LOCK[2],SC_FREQ_LOCK[1],SC_FREQ_LOCK[0]" */,

    config input SC_FREQ_LOCKDET_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FREQ_LOCKDET_EN" */,

    config input SC_PHASE_LOCKDET_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PHASE_LOCKDET_EN" */,

    config input SC_LOCK_FILTER_PD = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LOCK_FILTER_PD" */,

    config input SC_VCOCLK_DIV2 = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_VCOCLK_DIV2" */,

    config input SC_EXTRSTSYN_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_EXTRSTSYN_EN" */,

    config input SC_DYN_RATIO_ODIV_EN[4:0] = 5'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DYN_RATIO_ODIV_EN[4],SC_DYN_RATIO_ODIV_EN[3],SC_DYN_RATIO_ODIV_EN[2],SC_DYN_RATIO_ODIV_EN[1],SC_DYN_RATIO_ODIV_EN[0]" */,

    config input SC_DYN_RATIO_FDIV_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DYN_RATIO_FDIV_EN" */,

    config input SC_RATIO_ODIV0[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RATIO_ODIV0[9],SC_RATIO_ODIV0[8],SC_RATIO_ODIV0[7],SC_RATIO_ODIV0[6],SC_RATIO_ODIV0[5],SC_RATIO_ODIV0[4],SC_RATIO_ODIV0[3],SC_RATIO_ODIV0[2],SC_RATIO_ODIV0[1],SC_RATIO_ODIV0[0]" */,

    config input SC_RATIO_ODIV1[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RATIO_ODIV1[9],SC_RATIO_ODIV1[8],SC_RATIO_ODIV1[7],SC_RATIO_ODIV1[6],SC_RATIO_ODIV1[5],SC_RATIO_ODIV1[4],SC_RATIO_ODIV1[3],SC_RATIO_ODIV1[2],SC_RATIO_ODIV1[1],SC_RATIO_ODIV1[0]" */,

    config input SC_RATIO_ODIV2[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RATIO_ODIV2[9],SC_RATIO_ODIV2[8],SC_RATIO_ODIV2[7],SC_RATIO_ODIV2[6],SC_RATIO_ODIV2[5],SC_RATIO_ODIV2[4],SC_RATIO_ODIV2[3],SC_RATIO_ODIV2[2],SC_RATIO_ODIV2[1],SC_RATIO_ODIV2[0]" */,

    config input SC_RATIO_ODIV3[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RATIO_ODIV3[9],SC_RATIO_ODIV3[8],SC_RATIO_ODIV3[7],SC_RATIO_ODIV3[6],SC_RATIO_ODIV3[5],SC_RATIO_ODIV3[4],SC_RATIO_ODIV3[3],SC_RATIO_ODIV3[2],SC_RATIO_ODIV3[1],SC_RATIO_ODIV3[0]" */,

    config input SC_RATIO_ODIV4[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RATIO_ODIV4[9],SC_RATIO_ODIV4[8],SC_RATIO_ODIV4[7],SC_RATIO_ODIV4[6],SC_RATIO_ODIV4[5],SC_RATIO_ODIV4[4],SC_RATIO_ODIV4[3],SC_RATIO_ODIV4[2],SC_RATIO_ODIV4[1],SC_RATIO_ODIV4[0]" */,

    config input SC_RATIO_FDIV[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RATIO_FDIV[9],SC_RATIO_FDIV[8],SC_RATIO_FDIV[7],SC_RATIO_FDIV[6],SC_RATIO_FDIV[5],SC_RATIO_FDIV[4],SC_RATIO_FDIV[3],SC_RATIO_FDIV[2],SC_RATIO_FDIV[1],SC_RATIO_FDIV[0]" */,

    config input SC_DYN_DUTY_ODIV_EN[4:0] = 5'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DYN_DUTY_ODIV_EN[4],SC_DYN_DUTY_ODIV_EN[3],SC_DYN_DUTY_ODIV_EN[2],SC_DYN_DUTY_ODIV_EN[1],SC_DYN_DUTY_ODIV_EN[0]" */,

    config input SC_DYN_DUTY_FDIV_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DYN_DUTY_FDIV_EN" */,

    config input SC_DUTY_ODIV0[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DUTY_ODIV0[9],SC_DUTY_ODIV0[8],SC_DUTY_ODIV0[7],SC_DUTY_ODIV0[6],SC_DUTY_ODIV0[5],SC_DUTY_ODIV0[4],SC_DUTY_ODIV0[3],SC_DUTY_ODIV0[2],SC_DUTY_ODIV0[1],SC_DUTY_ODIV0[0]" */,

    config input SC_DUTY_ODIV1[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DUTY_ODIV1[9],SC_DUTY_ODIV1[8],SC_DUTY_ODIV1[7],SC_DUTY_ODIV1[6],SC_DUTY_ODIV1[5],SC_DUTY_ODIV1[4],SC_DUTY_ODIV1[3],SC_DUTY_ODIV1[2],SC_DUTY_ODIV1[1],SC_DUTY_ODIV1[0]" */,

    config input SC_DUTY_ODIV2[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DUTY_ODIV2[9],SC_DUTY_ODIV2[8],SC_DUTY_ODIV2[7],SC_DUTY_ODIV2[6],SC_DUTY_ODIV2[5],SC_DUTY_ODIV2[4],SC_DUTY_ODIV2[3],SC_DUTY_ODIV2[2],SC_DUTY_ODIV2[1],SC_DUTY_ODIV2[0]" */,

    config input SC_DUTY_ODIV3[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DUTY_ODIV3[9],SC_DUTY_ODIV3[8],SC_DUTY_ODIV3[7],SC_DUTY_ODIV3[6],SC_DUTY_ODIV3[5],SC_DUTY_ODIV3[4],SC_DUTY_ODIV3[3],SC_DUTY_ODIV3[2],SC_DUTY_ODIV3[1],SC_DUTY_ODIV3[0]" */,

    config input SC_DUTY_ODIV4[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DUTY_ODIV4[9],SC_DUTY_ODIV4[8],SC_DUTY_ODIV4[7],SC_DUTY_ODIV4[6],SC_DUTY_ODIV4[5],SC_DUTY_ODIV4[4],SC_DUTY_ODIV4[3],SC_DUTY_ODIV4[2],SC_DUTY_ODIV4[1],SC_DUTY_ODIV4[0]" */,

    config input SC_DUTY_FDIV[9:0] = 10'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DUTY_FDIV[9],SC_DUTY_FDIV[8],SC_DUTY_FDIV[7],SC_DUTY_FDIV[6],SC_DUTY_FDIV[5],SC_DUTY_FDIV[4],SC_DUTY_FDIV[3],SC_DUTY_FDIV[2],SC_DUTY_FDIV[1],SC_DUTY_FDIV[0]" */,

    config input SC_ODIV_PHASE_EN[4:0] = 5'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV_PHASE_EN[4],SC_ODIV_PHASE_EN[3],SC_ODIV_PHASE_EN[2],SC_ODIV_PHASE_EN[1],SC_ODIV_PHASE_EN[0]" */,

    config input SC_DYN_PHASE_ODIV_EN[4:0] = 5'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DYN_PHASE_ODIV_EN[4],SC_DYN_PHASE_ODIV_EN[3],SC_DYN_PHASE_ODIV_EN[2],SC_DYN_PHASE_ODIV_EN[1],SC_DYN_PHASE_ODIV_EN[0]" */,

    config input SC_DYN_PHASE_FDIV_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DYN_PHASE_FDIV_EN" */,

    config input SC_PHASE_ODIV0[12:0] = 13'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PHASE_ODIV0[12],SC_PHASE_ODIV0[11],SC_PHASE_ODIV0[10],SC_PHASE_ODIV0[9],SC_PHASE_ODIV0[8],SC_PHASE_ODIV0[7],SC_PHASE_ODIV0[6],SC_PHASE_ODIV0[5],SC_PHASE_ODIV0[4],SC_PHASE_ODIV0[3],SC_PHASE_ODIV0[2],SC_PHASE_ODIV0[1],SC_PHASE_ODIV0[0]" */,

    config input SC_PHASE_ODIV1[12:0] = 13'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PHASE_ODIV1[12],SC_PHASE_ODIV1[11],SC_PHASE_ODIV1[10],SC_PHASE_ODIV1[9],SC_PHASE_ODIV1[8],SC_PHASE_ODIV1[7],SC_PHASE_ODIV1[6],SC_PHASE_ODIV1[5],SC_PHASE_ODIV1[4],SC_PHASE_ODIV1[3],SC_PHASE_ODIV1[2],SC_PHASE_ODIV1[1],SC_PHASE_ODIV1[0]" */,

    config input SC_PHASE_ODIV2[12:0] = 13'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PHASE_ODIV2[12],SC_PHASE_ODIV2[11],SC_PHASE_ODIV2[10],SC_PHASE_ODIV2[9],SC_PHASE_ODIV2[8],SC_PHASE_ODIV2[7],SC_PHASE_ODIV2[6],SC_PHASE_ODIV2[5],SC_PHASE_ODIV2[4],SC_PHASE_ODIV2[3],SC_PHASE_ODIV2[2],SC_PHASE_ODIV2[1],SC_PHASE_ODIV2[0]" */,

    config input SC_PHASE_ODIV3[12:0] = 13'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PHASE_ODIV3[12],SC_PHASE_ODIV3[11],SC_PHASE_ODIV3[10],SC_PHASE_ODIV3[9],SC_PHASE_ODIV3[8],SC_PHASE_ODIV3[7],SC_PHASE_ODIV3[6],SC_PHASE_ODIV3[5],SC_PHASE_ODIV3[4],SC_PHASE_ODIV3[3],SC_PHASE_ODIV3[2],SC_PHASE_ODIV3[1],SC_PHASE_ODIV3[0]" */,

    config input SC_PHASE_ODIV4[12:0] = 13'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PHASE_ODIV4[12],SC_PHASE_ODIV4[11],SC_PHASE_ODIV4[10],SC_PHASE_ODIV4[9],SC_PHASE_ODIV4[8],SC_PHASE_ODIV4[7],SC_PHASE_ODIV4[6],SC_PHASE_ODIV4[5],SC_PHASE_ODIV4[4],SC_PHASE_ODIV4[3],SC_PHASE_ODIV4[2],SC_PHASE_ODIV4[1],SC_PHASE_ODIV4[0]" */,

    config input SC_PHASE_FDIV[12:0] = 13'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PHASE_FDIV[12],SC_PHASE_FDIV[11],SC_PHASE_FDIV[10],SC_PHASE_FDIV[9],SC_PHASE_FDIV[8],SC_PHASE_FDIV[7],SC_PHASE_FDIV[6],SC_PHASE_FDIV[5],SC_PHASE_FDIV[4],SC_PHASE_FDIV[3],SC_PHASE_FDIV[2],SC_PHASE_FDIV[1],SC_PHASE_FDIV[0]" */,

    config input SC_ODIV_CAS[4:0] = 5'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV_CAS[4],SC_ODIV_CAS[3],SC_ODIV_CAS[2],SC_ODIV_CAS[1],SC_ODIV_CAS[0]" */,

    config input SC_TS_CLK[4:0] = 5'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TS_CLK[4],SC_TS_CLK[3],SC_TS_CLK[2],SC_TS_CLK[1],SC_TS_CLK[0]" */,

    config input SC_FBDIV_SEL[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FBDIV_SEL[2],SC_FBDIV_SEL[1],SC_FBDIV_SEL[0]" */,

    config input SC_CLKOUT_SEL[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKOUT_SEL[2],SC_CLKOUT_SEL[1],SC_CLKOUT_SEL[0]" */,

    config input SC_BYPASS_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_BYPASS_EN" */,

    config input SC_GATE_EN[6:0] = 7'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GATE_EN[6],SC_GATE_EN[5],SC_GATE_EN[4],SC_GATE_EN[3],SC_GATE_EN[2],SC_GATE_EN[1],SC_GATE_EN[0]" */,

    config input SC_GATE_5MUX1_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GATE_5MUX1_EN" */,

    config input SC_PLL_PWD_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PLL_PWD_ENABLE" */,

    config input SC_PLL_GLOGEN_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PLL_GLOGEN_ENABLE" */,

    config input SC_PLL_RST_DISABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PLL_RST_DISABLE" */,

    config input SC_ODIV_RST_ENABLE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ODIV_RST_ENABLE" */,

    config input SC_ICP_BASE_TRIM = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ICP_BASE_TRIM" */,

    config input SC_BW_SEL[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_BW_SEL[1],SC_BW_SEL[0]" */,

    config input SC_DYN_ICP_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DYN_ICP_EN" */,

    config input SC_DYN_LPFRES_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DYN_LPFRES_EN" */,

    config input SC_DYN_CRIPPLE_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DYN_CRIPPLE_EN" */,

    config input SC_ICP_SEL[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ICP_SEL[3],SC_ICP_SEL[2],SC_ICP_SEL[1],SC_ICP_SEL[0]" */,

    config input SC_LPFRES_SEL[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LPFRES_SEL[2],SC_LPFRES_SEL[1],SC_LPFRES_SEL[0]" */,

    config input SC_CRIPPLE_SEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CRIPPLE_SEL" */,

    config input SC_VCO_IADJ_TRIM[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_VCO_IADJ_TRIM[2],SC_VCO_IADJ_TRIM[1],SC_VCO_IADJ_TRIM[0]" */,

    config input SC_TEST_SEL[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TEST_SEL[1],SC_TEST_SEL[0]" */,

// configuration_body_def_end

        input IDIV_RATIO_DYN[9:0] = 10'b1111_1111_11,
        input ODIV0_RATIO_DYN[9:0] = 10'b1111_1111_11,
        input ODIV1_RATIO_DYN[9:0] = 10'b1111_1111_11,
        input ODIV2_RATIO_DYN[9:0] = 10'b1111_1111_11,
        input ODIV3_RATIO_DYN[9:0] = 10'b1111_1111_11,
        input ODIV4_RATIO_DYN[9:0] = 10'b1111_1111_11,
        input FDIV_RATIO_DYN[9:0] = 10'b1111_1111_11,
        input ODIV0_DUTY_DYN[9:0] = 10'b1111_1111_11,
        input ODIV1_DUTY_DYN[9:0] = 10'b1111_1111_11,
        input ODIV2_DUTY_DYN[9:0] = 10'b1111_1111_11,
        input ODIV3_DUTY_DYN[9:0] = 10'b1111_1111_11,
        input ODIV4_DUTY_DYN[9:0] = 10'b1111_1111_11,
        input FDIV_DUTY_DYN[9:0] = 10'b1111_1111_11,
        input ODIV0_PHASE_DYN[12:0] = 13'b1111_1111_1111_1,
        input ODIV1_PHASE_DYN[12:0] = 13'b1111_1111_1111_1,
        input ODIV2_PHASE_DYN[12:0] = 13'b1111_1111_1111_1,
        input ODIV3_PHASE_DYN[12:0] = 13'b1111_1111_1111_1,
        input ODIV4_PHASE_DYN[12:0] = 13'b1111_1111_1111_1,
        input FDIV_PHASE_DYN[12:0] = 13'b1111_1111_1111_1,
        input GATE_CLKOUT[6:0] = 7'b1111_111,
        input CLK_IN0 = 1'b1,
        input CLK_IN1 = 1'b1,
        input DYNSEL_CLKIN = 1'b1,
        input DYNSEL_MANNU_EN = 1'b1,
        input CLK_FBIN = 1'b1,
        input FBDLY_LOAD = 1'b1,
        input FBDLY_MOVE = 1'b1,
        input FBDLY_DIRECTION = 1'b1,
        input PFDENA_DYN = 1'b1,
        input LOCK_CAS = 1'b1,
        input CLK_CAS = 1'b1,
        input GATE_5MUX1 = 1'b1,
        input PLL_PWRDOWN = 1'b1,
        input RST_PLL = 1'b1,
        input RST_ODIV = 1'b1,
        output FBDLY_OB,
        output CLKSWITCH_FLAG,
        output LOCK,
        output LOCK_LOCAL,
        output CLK_INT_FB,
        output CLK_OUT0,
        output CLK_OUT0_WL,
        output CLK_OUT_EXT,
        output CLK_OUT1,
        output CLK_OUT_ADC,
        output CLK_OUT2,
        output CLK_OUT3,
        output CLK_OUT4,
        output CLK_OUT4_CAS,
        output CLK_OUT_5MUX1
    );
};
//grid device end


/*******************************************************************************

  Device    [PLL]

  Author    []

  Abstract  []

  Revision History:

********************************************************************************/
//grid device structure netlist started

structure netlist of PLL
{
   

  
}; // end of structure netlist of PLL
//grid device structure netlist end


floorplan
structure fp_struct of PLL
{
              

};// end of structure fp_struct of APM

floorplan
schematic floorplan_view of PLL // pragma PAP_ARC_SHOW_BOUNDING_BOX
{
};

//grid device configure body started

configuration cfg of PLL
{

 // assign config body begin
    SC_VREF_TRIM  :=  CP_VREF_TRIM;
    SC_LDO_TESTSEL  :=  CP_LDO_TESTSEL;
    SC_PLL_LDO_EN   :=  CP_PLL_LDO_EN;
    SC_CLKIN_STASEL  :=  CP_CLKIN_STASEL;
    SC_FBDLY_CNTL    :=  CP_FBDLY_CNTL;
    SC_DYN_RATIO_IDIV_EN  :=  CP_DYN_RATIO_IDIV_EN;
    SC_RATIO_IDIV   :=  CP_RATIO_IDIV;
    SC_FREQ_LOCK    :=  CP_FREQ_LOCK;
    SC_VCOCLK_DIV2  :=  CP_VCOCLK_DIV2;
    SC_DYN_RATIO_ODIV_EN  :=  CP_DYN_RATIO_ODIV_EN;
    SC_DYN_RATIO_FDIV_EN  :=  CP_DYN_RATIO_FDIV_EN;
    SC_RATIO_ODIV0  :=  CP_RATIO_ODIV0;
    SC_RATIO_ODIV1  :=  CP_RATIO_ODIV1;
    SC_RATIO_ODIV2  :=  CP_RATIO_ODIV2;
    SC_RATIO_ODIV3  :=  CP_RATIO_ODIV3;
    SC_RATIO_ODIV4  :=  CP_RATIO_ODIV4;
    SC_RATIO_FDIV   :=  CP_RATIO_FDIV;
    SC_DYN_DUTY_ODIV_EN  :=  CP_DYN_DUTY_ODIV_EN;
    SC_DYN_DUTY_FDIV_EN  :=  CP_DYN_DUTY_FDIV_EN;
    SC_DUTY_ODIV0  :=  CP_DUTY_ODIV0;
    SC_DUTY_ODIV1  :=  CP_DUTY_ODIV1;
    SC_DUTY_ODIV2  :=  CP_DUTY_ODIV2;
    SC_DUTY_ODIV3  :=  CP_DUTY_ODIV3;
    SC_DUTY_ODIV4  :=  CP_DUTY_ODIV4;
    SC_DUTY_FDIV   :=  CP_DUTY_FDIV;
    SC_ODIV_PHASE_EN      :=  CP_ODIV_PHASE_EN;
    SC_DYN_PHASE_ODIV_EN  :=  CP_DYN_PHASE_ODIV_EN;
    SC_DYN_PHASE_FDIV_EN  :=  CP_DYN_PHASE_FDIV_EN;
    SC_PHASE_ODIV0  :=  CP_PHASE_ODIV0;
    SC_PHASE_ODIV1  :=  CP_PHASE_ODIV1;
    SC_PHASE_ODIV2  :=  CP_PHASE_ODIV2;
    SC_PHASE_ODIV3  :=  CP_PHASE_ODIV3;
    SC_PHASE_ODIV4  :=  CP_PHASE_ODIV4;
    SC_PHASE_FDIV   :=  CP_PHASE_FDIV;
    SC_ODIV_CAS  :=  CP_ODIV_CAS;
    SC_TS_CLK    :=  CP_TS_CLK;
    SC_FBDIV_SEL  :=  CP_FBDIV_SEL;
    SC_CLKOUT_SEL  :=  CP_CLKOUT_SEL;
    SC_GATE_EN     :=  CP_GATE_EN;
    SC_GATE_5MUX1_EN  :=  CP_GATE_5MUX1_EN;
    SC_ICP_BASE_TRIM  :=  CP_ICP_BASE_TRIM;
    SC_BW_SEL  :=  CP_BW_SEL;
    SC_ICP_SEL      :=  CP_ICP_SEL;
    SC_LPFRES_SEL   :=  CP_LPFRES_SEL;
    SC_CRIPPLE_SEL  :=  CP_CRIPPLE_SEL;
    SC_VCO_IADJ_TRIM  :=  CP_VCO_IADJ_TRIM;
    SC_TEST_SEL  :=  CP_TEST_SEL;
// assign config body end

//initial config body0 begin
    if(CP_LDO_TEST_EN == "FALSE")
    {
        SC_LDO_TEST_EN  :=  1'b0;
    }
    else if(CP_LDO_TEST_EN == "TRUE")
    {
        SC_LDO_TEST_EN  :=  1'b1;
    }
    else
    {
        SC_LDO_TEST_EN  :=  1'bx;
        error("illegal setting for CP_LDO_TEST_EN  :=  %s",CP_LDO_TEST_EN);
    }

//initial config body0 end


//initial config body1 begin
    if(CP_DYN_CLKMOD_SEL_EN == "FALSE")
    {
        SC_DYN_CLKMOD_SEL_EN  :=  1'b0;
    }
    else if(CP_DYN_CLKMOD_SEL_EN == "TRUE")
    {
        SC_DYN_CLKMOD_SEL_EN  :=  1'b1;
    }
    else
    {
        SC_DYN_CLKMOD_SEL_EN  :=  1'bx;
        error("illegal setting for CP_DYN_CLKMOD_SEL_EN  :=  %s",CP_DYN_CLKMOD_SEL_EN);
    }

//initial config body1 end


//initial config body2 begin
    if(CP_FBCK_DLY_EN == "FALSE")
    {
        SC_FBCK_DLY_EN  :=  1'b0;
    }
    else if(CP_FBCK_DLY_EN == "TRUE")
    {
        SC_FBCK_DLY_EN  :=  1'b1;
    }
    else
    {
        SC_FBCK_DLY_EN  :=  1'bx;
        error("illegal setting for CP_FBCK_DLY_EN  :=  %s",CP_FBCK_DLY_EN);
    }

//initial config body2 end


//initial config body3 begin
    if(CP_PFDENA_DISABLE == "FALSE")
    {
        SC_PFDENA_DISABLE  :=  1'b0;
    }
    else if(CP_PFDENA_DISABLE == "TRUE")
    {
        SC_PFDENA_DISABLE  :=  1'b1;
    }
    else
    {
        SC_PFDENA_DISABLE  :=  1'bx;
        error("illegal setting for CP_PFDENA_DISABLE  :=  %s",CP_PFDENA_DISABLE);
    }

//initial config body3 end


//initial config body4 begin
    if(CP_FREQ_LOCKDET_EN == "FALSE")
    {
        SC_FREQ_LOCKDET_EN  :=  1'b0;
    }
    else if(CP_FREQ_LOCKDET_EN == "TRUE")
    {
        SC_FREQ_LOCKDET_EN  :=  1'b1;
    }
    else
    {
        SC_FREQ_LOCKDET_EN  :=  1'bx;
        error("illegal setting for CP_FREQ_LOCKDET_EN  :=  %s",CP_FREQ_LOCKDET_EN);
    }

//initial config body4 end


//initial config body5 begin
    if(CP_PHASE_LOCKDET_EN == "FALSE")
    {
        SC_PHASE_LOCKDET_EN  :=  1'b0;
    }
    else if(CP_PHASE_LOCKDET_EN == "TRUE")
    {
        SC_PHASE_LOCKDET_EN  :=  1'b1;
    }
    else
    {
        SC_PHASE_LOCKDET_EN  :=  1'bx;
        error("illegal setting for CP_PHASE_LOCKDET_EN  :=  %s",CP_PHASE_LOCKDET_EN);
    }

//initial config body5 end


//initial config body6 begin
    if(CP_LOCK_FILTER_PD == "FALSE")
    {
        SC_LOCK_FILTER_PD  :=  1'b0;
    }
    else if(CP_LOCK_FILTER_PD == "TRUE")
    {
        SC_LOCK_FILTER_PD  :=  1'b1;
    }
    else
    {
        SC_LOCK_FILTER_PD  :=  1'bx;
        error("illegal setting for CP_LOCK_FILTER_PD  :=  %s",CP_LOCK_FILTER_PD);
    }

//initial config body6 end


//initial config body7 begin
    if(CP_EXTRSTSYN_EN == "FALSE")
    {
        SC_EXTRSTSYN_EN  :=  1'b0;
    }
    else if(CP_EXTRSTSYN_EN == "TRUE")
    {
        SC_EXTRSTSYN_EN  :=  1'b1;
    }
    else
    {
        SC_EXTRSTSYN_EN  :=  1'bx;
        error("illegal setting for CP_EXTRSTSYN_EN  :=  %s",CP_EXTRSTSYN_EN);
    }

//initial config body7 end


//initial config body8 begin
    if(CP_BYPASS_EN == "FALSE")
    {
        SC_BYPASS_EN  :=  1'b0;
    }
    else if(CP_BYPASS_EN == "TRUE")
    {
        SC_BYPASS_EN  :=  1'b1;
    }
    else
    {
        SC_BYPASS_EN  :=  1'bx;
        error("illegal setting for CP_BYPASS_EN  :=  %s",CP_BYPASS_EN);
    }

//initial config body8 end


//initial config body9 begin
    if(CP_PLL_PWD_ENABLE == "FALSE")
    {
        SC_PLL_PWD_ENABLE  :=  1'b0;
    }
    else if(CP_PLL_PWD_ENABLE == "TRUE")
    {
        SC_PLL_PWD_ENABLE  :=  1'b1;
    }
    else
    {
        SC_PLL_PWD_ENABLE  :=  1'bx;
        error("illegal setting for CP_PLL_PWD_ENABLE  :=  %s",CP_PLL_PWD_ENABLE);
    }

//initial config body9 end


//initial config body10 begin
    if(CP_PLL_GLOGEN_ENABLE == "FALSE")
    {
        SC_PLL_GLOGEN_ENABLE  :=  1'b0;
    }
    else if(CP_PLL_GLOGEN_ENABLE == "TRUE")
    {
        SC_PLL_GLOGEN_ENABLE  :=  1'b1;
    }
    else
    {
        SC_PLL_GLOGEN_ENABLE  :=  1'bx;
        error("illegal setting for CP_PLL_GLOGEN_ENABLE  :=  %s",CP_PLL_GLOGEN_ENABLE);
    }

//initial config body10 end


//initial config body11 begin
    if(CP_PLL_RST_DISABLE == "FALSE")
    {
        SC_PLL_RST_DISABLE  :=  1'b0;
    }
    else if(CP_PLL_RST_DISABLE == "TRUE")
    {
        SC_PLL_RST_DISABLE  :=  1'b1;
    }
    else
    {
        SC_PLL_RST_DISABLE  :=  1'bx;
        error("illegal setting for CP_PLL_RST_DISABLE  :=  %s",CP_PLL_RST_DISABLE);
    }

//initial config body11 end


//initial config body12 begin
    if(CP_ODIV_RST_ENABLE == "FALSE")
    {
        SC_ODIV_RST_ENABLE  :=  1'b0;
    }
    else if(CP_ODIV_RST_ENABLE == "TRUE")
    {
        SC_ODIV_RST_ENABLE  :=  1'b1;
    }
    else
    {
        SC_ODIV_RST_ENABLE  :=  1'bx;
        error("illegal setting for CP_ODIV_RST_ENABLE  :=  %s",CP_ODIV_RST_ENABLE);
    }

//initial config body12 end


//initial config body13 begin
    if(CP_DYN_ICP_EN == "FALSE")
    {
        SC_DYN_ICP_EN  :=  1'b0;
    }
    else if(CP_DYN_ICP_EN == "TRUE")
    {
        SC_DYN_ICP_EN  :=  1'b1;
    }
    else
    {
        SC_DYN_ICP_EN  :=  1'bx;
        error("illegal setting for CP_DYN_ICP_EN  :=  %s",CP_DYN_ICP_EN);
    }

//initial config body13 end


//initial config body14 begin
    if(CP_DYN_LPFRES_EN == "FALSE")
    {
        SC_DYN_LPFRES_EN  :=  1'b0;
    }
    else if(CP_DYN_LPFRES_EN == "TRUE")
    {
        SC_DYN_LPFRES_EN  :=  1'b1;
    }
    else
    {
        SC_DYN_LPFRES_EN  :=  1'bx;
        error("illegal setting for CP_DYN_LPFRES_EN  :=  %s",CP_DYN_LPFRES_EN);
    }

//initial config body14 end


//initial config body15 begin
    if(CP_DYN_CRIPPLE_EN == "FALSE")
    {
        SC_DYN_CRIPPLE_EN  :=  1'b0;
    }
    else if(CP_DYN_CRIPPLE_EN == "TRUE")
    {
        SC_DYN_CRIPPLE_EN  :=  1'b1;
    }
    else
    {
        SC_DYN_CRIPPLE_EN  :=  1'bx;
        error("illegal setting for CP_DYN_CRIPPLE_EN  :=  %s",CP_DYN_CRIPPLE_EN);
    }

//initial config body15 end

};

//grid device configure body end

timing  pll_tnl of PLL
{
    int FBDLY_CNTL    = to_integer(CP_FBDLY_CNTL );
    int STATIC_RATIOI = to_integer(CP_RATIO_IDIV );
    int STATIC_RATIO0 = to_integer(CP_RATIO_ODIV0);
    int STATIC_RATIO1 = to_integer(CP_RATIO_ODIV1);
    int STATIC_RATIO2 = to_integer(CP_RATIO_ODIV2);
    int STATIC_RATIO3 = to_integer(CP_RATIO_ODIV3);
    int STATIC_RATIO4 = to_integer(CP_RATIO_ODIV4);
    int STATIC_RATIOF = to_integer(CP_RATIO_FDIV );
    
    int STATIC_DUTY0  = to_integer(CP_DUTY_ODIV0);
    int STATIC_DUTY1  = to_integer(CP_DUTY_ODIV1);
    int STATIC_DUTY2  = to_integer(CP_DUTY_ODIV2);
    int STATIC_DUTY3  = to_integer(CP_DUTY_ODIV3);
    int STATIC_DUTY4  = to_integer(CP_DUTY_ODIV4);
    int STATIC_DUTYF  = to_integer(CP_DUTY_FDIV );

    int STATIC_FPHASE0 = to_integer(CP_PHASE_ODIV0[2:0]);
    int STATIC_FPHASE1 = to_integer(CP_PHASE_ODIV1[2:0]); 
    int STATIC_FPHASE2 = to_integer(CP_PHASE_ODIV2[2:0]); 
    int STATIC_FPHASE3 = to_integer(CP_PHASE_ODIV3[2:0]);
    int STATIC_FPHASE4 = to_integer(CP_PHASE_ODIV4[2:0]);
    int STATIC_FPHASEF = to_integer(CP_PHASE_FDIV [2:0]);
    int STATIC_CPHASE0 = to_integer(CP_PHASE_ODIV0[12:3]);
    int STATIC_CPHASE1 = to_integer(CP_PHASE_ODIV1[12:3]);
    int STATIC_CPHASE2 = to_integer(CP_PHASE_ODIV2[12:3]);
    int STATIC_CPHASE3 = to_integer(CP_PHASE_ODIV3[12:3]);
    int STATIC_CPHASE4 = to_integer(CP_PHASE_ODIV4[12:3]);
    int STATIC_CPHASEF = to_integer(CP_PHASE_FDIV [12:3]);

    //int FBDIV_SEL      = to_integer(CP_FBDIV_SEL);
    int CLKOUT5_SEL    = to_integer(CP_CLKOUT_SEL);
    int BW_SEL         = to_integer(CP_BW_SEL);
    int ICP_SEL        = to_integer(CP_ICP_SEL);
    int LPFRES_SEL     = to_integer(CP_LPFRES_SEL);
    int VCO_IADJ_TRIM  = to_integer(CP_VCO_IADJ_TRIM);
    
    operator V_PLL_E1 V_PLL_E1
        parameter map
        (
            PFDEN_EN                   => (CP_PFDENA_DISABLE == "FALSE") ? "TRUE" : "FALSE",
            VCOCLK_DIV2                =>  CP_VCOCLK_DIV2,
            DYNAMIC_RATIOI_EN          => (CP_DYN_RATIO_IDIV_EN == 1'b1) ? "TRUE" : "FALSE",
            DYNAMIC_RATIO4_EN          => (CP_DYN_RATIO_ODIV_EN[4] == 1'b1) ? "TRUE" : "FALSE",
            DYNAMIC_RATIO3_EN          => (CP_DYN_RATIO_ODIV_EN[3] == 1'b1) ? "TRUE" : "FALSE",
            DYNAMIC_RATIO2_EN          => (CP_DYN_RATIO_ODIV_EN[2] == 1'b1) ? "TRUE" : "FALSE",
            DYNAMIC_RATIO1_EN          => (CP_DYN_RATIO_ODIV_EN[1] == 1'b1) ? "TRUE" : "FALSE",
            DYNAMIC_RATIO0_EN          => (CP_DYN_RATIO_ODIV_EN[0] == 1'b1) ? "TRUE" : "FALSE",
            DYNAMIC_RATIOF_EN          => (CP_DYN_RATIO_FDIV_EN    == 1'b1) ? "TRUE" : "FALSE",
            STATIC_RATIOI              =>     STATIC_RATIOI,
            STATIC_RATIO0              =>     STATIC_RATIO0,
            STATIC_RATIO1              =>     STATIC_RATIO1,
            STATIC_RATIO2              =>     STATIC_RATIO2,
            STATIC_RATIO3              =>     STATIC_RATIO3,
            STATIC_RATIO4              =>     STATIC_RATIO4,
            STATIC_RATIOF              =>     STATIC_RATIOF,
            DYNAMIC_DUTY4_EN           => (CP_DYN_DUTY_ODIV_EN[4] == 1'b1) ? "TRUE" : "FALSE",
            DYNAMIC_DUTY3_EN           => (CP_DYN_DUTY_ODIV_EN[3] == 1'b1) ? "TRUE" : "FALSE",
            DYNAMIC_DUTY2_EN           => (CP_DYN_DUTY_ODIV_EN[2] == 1'b1) ? "TRUE" : "FALSE",
            DYNAMIC_DUTY1_EN           => (CP_DYN_DUTY_ODIV_EN[1] == 1'b1) ? "TRUE" : "FALSE",
            DYNAMIC_DUTY0_EN           => (CP_DYN_DUTY_ODIV_EN[0] == 1'b1) ? "TRUE" : "FALSE",
            DYNAMIC_DUTYF_EN           => (CP_DYN_DUTY_FDIV_EN    == 1'b1) ? "TRUE" : "FALSE",
            STATIC_DUTY0               =>     STATIC_DUTY0,
            STATIC_DUTY1               =>     STATIC_DUTY1,
            STATIC_DUTY2               =>     STATIC_DUTY2,
            STATIC_DUTY3               =>     STATIC_DUTY3,
            STATIC_DUTY4               =>     STATIC_DUTY4,
            STATIC_DUTYF               =>     STATIC_DUTYF,
            PHASE_ADJUST4_EN           => (CP_ODIV_PHASE_EN[4] == 1'b1) ? "TRUE" : "FALSE",
            PHASE_ADJUST3_EN           => (CP_ODIV_PHASE_EN[3] == 1'b1) ? "TRUE" : "FALSE",
            PHASE_ADJUST2_EN           => (CP_ODIV_PHASE_EN[2] == 1'b1) ? "TRUE" : "FALSE",
            PHASE_ADJUST1_EN           => (CP_ODIV_PHASE_EN[1] == 1'b1) ? "TRUE" : "FALSE",
            PHASE_ADJUST0_EN           => (CP_ODIV_PHASE_EN[0] == 1'b1) ? "TRUE" : "FALSE",
            DYNAMIC_PHASE4_EN          => (CP_DYN_PHASE_ODIV_EN[4] == 1'b1) ? "TRUE" : "FALSE",
            DYNAMIC_PHASE3_EN          => (CP_DYN_PHASE_ODIV_EN[3] == 1'b1) ? "TRUE" : "FALSE",
            DYNAMIC_PHASE2_EN          => (CP_DYN_PHASE_ODIV_EN[2] == 1'b1) ? "TRUE" : "FALSE",
            DYNAMIC_PHASE1_EN          => (CP_DYN_PHASE_ODIV_EN[1] == 1'b1) ? "TRUE" : "FALSE",
            DYNAMIC_PHASE0_EN          => (CP_DYN_PHASE_ODIV_EN[0] == 1'b1) ? "TRUE" : "FALSE",
            DYNAMIC_PHASEF_EN          => (CP_DYN_PHASE_FDIV_EN    == 1'b1) ? "TRUE" : "FALSE",
            STATIC_PHASE0              =>     STATIC_FPHASE0,
            STATIC_PHASE1              =>     STATIC_FPHASE1, 
            STATIC_PHASE2              =>     STATIC_FPHASE2, 
            STATIC_PHASE3              =>     STATIC_FPHASE3,
            STATIC_PHASE4              =>     STATIC_FPHASE4,
            STATIC_PHASEF              =>     STATIC_FPHASEF,
            STATIC_CPHASE0             =>     STATIC_CPHASE0,
            STATIC_CPHASE1             =>     STATIC_CPHASE1,
            STATIC_CPHASE2             =>     STATIC_CPHASE2,
            STATIC_CPHASE3             =>     STATIC_CPHASE3,
            STATIC_CPHASE4             =>     STATIC_CPHASE4,
            STATIC_CPHASEF             =>     STATIC_CPHASEF,
            CLK_CAS4_EN                => (CP_ODIV_CAS[4] == 1'b1) ? "TRUE" : "FALSE",
            CLK_CAS3_EN                => (CP_ODIV_CAS[3] == 1'b1) ? "TRUE" : "FALSE",
            CLK_CAS2_EN                => (CP_ODIV_CAS[2] == 1'b1) ? "TRUE" : "FALSE",
            CLK_CAS1_EN                => (CP_ODIV_CAS[1] == 1'b1) ? "TRUE" : "FALSE",
            CLK_CAS0_EN                => (CP_ODIV_CAS[0] == 1'b1) ? "TRUE" : "FALSE",
            INTERNAL_FB                => (CP_FBDIV_SEL == 3'b000) ? "ENABLE" : "DISABLE",
            EXTERNAL_FB                => (CP_FBDIV_SEL == 3'b001) ? "CLKOUT0" :
                                          (CP_FBDIV_SEL == 3'b010) ? "CLKOUT1" :
                                          (CP_FBDIV_SEL == 3'b011) ? "CLKOUT2" :
                                          (CP_FBDIV_SEL == 3'b100) ? "CLKOUT3" :
                                          (CP_FBDIV_SEL == 3'b101) ? "CLKOUT4" :
                                                                     "DISABLE" ,
            CLKOUT5_SEL                =>     CLKOUT5_SEL,
            CLKIN_BYPASS_EN            =>  CP_BYPASS_EN,
            CLKOUT0_EXT_SYN_EN         => (CP_GATE_EN[5] == 1'b1) ? "TRUE" : "FALSE",
            CLKOUT4_SYN_EN             => (CP_GATE_EN[4] == 1'b1) ? "TRUE" : "FALSE",
            CLKOUT3_SYN_EN             => (CP_GATE_EN[3] == 1'b1) ? "TRUE" : "FALSE",
            CLKOUT2_SYN_EN             => (CP_GATE_EN[2] == 1'b1) ? "TRUE" : "FALSE",
            CLKOUT1_SYN_EN             => (CP_GATE_EN[1] == 1'b1) ? "TRUE" : "FALSE",
            CLKOUT0_SYN_EN             => (CP_GATE_EN[0] == 1'b1) ? "TRUE" : "FALSE",
            CLKOUT5_SYN_EN             => (CP_GATE_5MUX1_EN == 1'b1) ? "TRUE" : "FALSE",
            //BANDWIDTH                  => ?
            //RST_INNER_EN               =>  (CP_PLL_RST_DISABLE == "FALSE") ? "TRUE" : "FALSE"
            RSTODIV_PHASE_EN           =>  CP_ODIV_RST_ENABLE,
            SIM_DEVICE                 => "PGL22G"
        )
        port map
        (
            CLKOUT0             =>  CLK_OUT0,
            CLKOUT0_EXT         =>  CLK_OUT_EXT,
            CLKOUT1             =>  CLK_OUT1,
            CLKOUT2             =>  CLK_OUT2,
            CLKOUT3             =>  CLK_OUT3,
            CLKOUT4             =>  CLK_OUT4,
            CLKOUT5             =>  CLK_OUT_5MUX1,
            CLKSWITCH_FLAG      =>  CLKSWITCH_FLAG,
            LOCK                =>  LOCK_LOCAL,
            CLKIN1              =>  CLK_IN0,
            CLKIN2              =>  CLK_IN1,
            CLKFB               =>  CLK_FBIN,
            CLKIN_SEL           =>  (CP_DYN_CLKMOD_SEL_EN == "TRUE") ? DYNSEL_CLKIN : 
                                    (CP_CLKIN_STASEL == 1'b0) ? 1'b0 : 1'b1,
            CLKIN_SEL_EN        =>  (CP_DYN_CLKMOD_SEL_EN == "TRUE") ? DYNSEL_MANNU_EN : 1'b1,
            PFDEN               =>  PFDENA_DYN,
            CLKOUT0_SYN         =>  GATE_CLKOUT[0],
            CLKOUT0_EXT_SYN     =>  GATE_CLKOUT[5],
            CLKOUT1_SYN         =>  GATE_CLKOUT[1],
            CLKOUT2_SYN         =>  GATE_CLKOUT[2],
            CLKOUT3_SYN         =>  GATE_CLKOUT[3],
            CLKOUT4_SYN         =>  GATE_CLKOUT[4],
            CLKOUT5_SYN         =>  GATE_5MUX1,
            RATIOI              =>  IDIV_RATIO_DYN,
            RATIO0              =>  ODIV0_RATIO_DYN,
            RATIO1              =>  ODIV1_RATIO_DYN,
            RATIO2              =>  ODIV2_RATIO_DYN,
            RATIO3              =>  ODIV3_RATIO_DYN,
            RATIO4              =>  ODIV4_RATIO_DYN,
            RATIOF              =>  FDIV_RATIO_DYN,
            DUTY0               =>  ODIV0_DUTY_DYN,
            DUTY1               =>  ODIV1_DUTY_DYN,
            DUTY2               =>  ODIV2_DUTY_DYN,
            DUTY3               =>  ODIV3_DUTY_DYN,
            DUTY4               =>  ODIV4_DUTY_DYN,
            DUTYF               =>  FDIV_DUTY_DYN,
            CPHASE0             =>  ODIV0_PHASE_DYN[12:3],
            CPHASE1             =>  ODIV1_PHASE_DYN[12:3],
            CPHASE2             =>  ODIV2_PHASE_DYN[12:3],
            CPHASE3             =>  ODIV3_PHASE_DYN[12:3],
            CPHASE4             =>  ODIV4_PHASE_DYN[12:3],
            CPHASEF             =>  FDIV_PHASE_DYN[12:3],
            PHASE0              =>  ODIV0_PHASE_DYN[2:0],
            PHASE1              =>  ODIV1_PHASE_DYN[2:0],
            PHASE2              =>  ODIV2_PHASE_DYN[2:0],
            PHASE3              =>  ODIV3_PHASE_DYN[2:0],
            PHASE4              =>  ODIV4_PHASE_DYN[2:0],
            PHASEF              =>  FDIV_PHASE_DYN[2:0],
            PLL_PWD             => (CP_PLL_PWD_ENABLE == "FALSE") ? 1'b0 : 
                                   (CP_PLL_PWD_ENABLE == "TRUE")  ? PLL_PWRDOWN : 1'bx,
            RST                 =>  RST_PLL,
            RSTODIV_PHASE       =>  RST_ODIV
        );

    CLK_OUT0_WL  <=  CLK_OUT0;
};
