*****************************************************************

  Device    [APM]

  Author    [yqtan]

  Abstract  [The Grid Device APM]

  Revision History: 2016/04/29

********************************************************************************/
//grid device started
grid
device APM
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config bit CP_XSIGNED = 1'b0,
        config bit CP_YSIGNED = 1'b0,
        config bit CP_POSTADD = 1'b0,
        config bit CP_PREADD = 1'b0,
        config bit CP_PREREG = 1'b0,
        config bit CP_XREG = 1'b0,
        config bit CP_XOREG[1:0] = 2'b00,
        config bit CP_YREG = 1'b0,
        config bit CP_ZREG = 1'b0,
        config bit CP_MREG = 1'b0,
        config bit CP_PREG = 1'b0,
        config bit CP_MODEXREG = 1'b0,
        config bit CP_MODEYREG = 1'b0,
        config bit CP_MODEZREG = 1'b0,
        config bit CP_XSEL = 1'b0,
        config bit CP_XBSEL[1:0] = 2'b00,
        config bit CP_ASYNC = 1'b0,
        config bit CP_SIMD = 1'b0,
        config bit CP_ZINIT[47:0] = 48'h000000000000,
        config bit CP_POREG = 1'b0,
        config bit CP_ACCLOW = 1'b0,
        config bit CP_PCISEL = 1'b0,
        config bit CP_XSE[7:0] = 8'b00000000,
        config bit CP_YSE[7:0] = 8'b00000000,
        config bit CP_ZSE[22:0] = 23'h000000,
        config bit CP_YCONST[17:0] = 18'h00000,
        config bit CP_YDYNSEL = 1'b0,
        config bit CP_MODEXCONST = 1'b0,
        config bit CP_MODEYCONST[2:0] = 3'b000,
        config bit CP_MODEZCONST[3:0] = 4'b0000,
        config bit CP_MODEXDYNSEL = 1'b0,
        config bit CP_MODEYDYNSEL[2:0] = 3'b000,
        config bit CP_MODEZDYNSEL[3:0] = 4'b0000,
        config bit CP_GRS_DIS = 1'b0,
        config bit CP_OR2CASECADE_EN = 1'b0,
        config bit CP_OR2CORE_EN[1:0] = 2'b00,
        config bit CP_IRX_SHFEN = 1'b0,
        config bit CP_IRZ_SHFEN = 1'b0,
        config bit CP_MULT_EN[1:0] = 2'b00
    );
    port
    (
// configuration_body_def_on


    config input SC_ASYNC = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ASYNC" */,

    config input SC_SIMD = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SIMD" */,

    config input SC_XSIGNED = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_XSIGNED" */,

    config input SC_YSIGNED = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_YSIGNED" */,

    config input SC_POSTADD = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_POSTADD" */,

    config input SC_PREADD = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PREADD" */,

    config input SC_PREREG = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PREREG" */,

    config input SC_XREG = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_XREG" */,

    config input SC_XOREG[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_XOREG[1],SC_XOREG[0]" */,

    config input SC_YREG = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_YREG" */,

    config input SC_ZREG = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ZREG" */,

    config input SC_MREG = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MREG" */,

    config input SC_PREG = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PREG" */,

    config input SC_MODEXREG = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MODEXREG" */,

    config input SC_MODEYREG = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MODEYREG" */,

    config input SC_MODEZREG = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MODEZREG" */,

    config input SC_XSEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_XSEL" */,

    config input SC_BSEL[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_BSEL[1],SC_BSEL[0]" */,

    config input SC_XBREG = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_XBREG" */,

    config input SC_ZINIT[47:0] = 48'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ZINIT[47],SC_ZINIT[46],SC_ZINIT[45],SC_ZINIT[44],SC_ZINIT[43],SC_ZINIT[42],SC_ZINIT[41],SC_ZINIT[40],SC_ZINIT[39],SC_ZINIT[38],SC_ZINIT[37],SC_ZINIT[36],SC_ZINIT[35],SC_ZINIT[34],SC_ZINIT[33],SC_ZINIT[32],SC_ZINIT[31],SC_ZINIT[30],SC_ZINIT[29],SC_ZINIT[28],SC_ZINIT[27],SC_ZINIT[26],SC_ZINIT[25],SC_ZINIT[24],SC_ZINIT[23],SC_ZINIT[22],SC_ZINIT[21],SC_ZINIT[20],SC_ZINIT[19],SC_ZINIT[18],SC_ZINIT[17],SC_ZINIT[16],SC_ZINIT[15],SC_ZINIT[14],SC_ZINIT[13],SC_ZINIT[12],SC_ZINIT[11],SC_ZINIT[10],SC_ZINIT[9],SC_ZINIT[8],SC_ZINIT[7],SC_ZINIT[6],SC_ZINIT[5],SC_ZINIT[4],SC_ZINIT[3],SC_ZINIT[2],SC_ZINIT[1],SC_ZINIT[0]" */,

    config input SC_XSE[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_XSE[7],SC_XSE[6],SC_XSE[5],SC_XSE[4],SC_XSE[3],SC_XSE[2],SC_XSE[1],SC_XSE[0]" */,

    config input SC_YSE[7:0] = 8'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_YSE[7],SC_YSE[6],SC_YSE[5],SC_YSE[4],SC_YSE[3],SC_YSE[2],SC_YSE[1],SC_YSE[0]" */,

    config input SC_ZSE[22:0] = 23'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ZSE[22],SC_ZSE[21],SC_ZSE[20],SC_ZSE[19],SC_ZSE[18],SC_ZSE[17],SC_ZSE[16],SC_ZSE[15],SC_ZSE[14],SC_ZSE[13],SC_ZSE[12],SC_ZSE[11],SC_ZSE[10],SC_ZSE[9],SC_ZSE[8],SC_ZSE[7],SC_ZSE[6],SC_ZSE[5],SC_ZSE[4],SC_ZSE[3],SC_ZSE[2],SC_ZSE[1],SC_ZSE[0]" */,

    config input SC_YCONST[17:0] = 18'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_YCONST[17],SC_YCONST[16],SC_YCONST[15],SC_YCONST[14],SC_YCONST[13],SC_YCONST[12],SC_YCONST[11],SC_YCONST[10],SC_YCONST[9],SC_YCONST[8],SC_YCONST[7],SC_YCONST[6],SC_YCONST[5],SC_YCONST[4],SC_YCONST[3],SC_YCONST[2],SC_YCONST[1],SC_YCONST[0]" */,

    config input SC_MODEXCONST = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MODEXCONST" */,

    config input SC_MODEYCONST[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MODEYCONST[2],SC_MODEYCONST[1],SC_MODEYCONST[0]" */,

    config input SC_MODEZCONST[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MODEZCONST[3],SC_MODEZCONST[2],SC_MODEZCONST[1],SC_MODEZCONST[0]" */,

    config input SC_MODEXDYNSEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MODEXDYNSEL" */,

    config input SC_MODEYDYNSEL[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MODEYDYNSEL[2],SC_MODEYDYNSEL[1],SC_MODEYDYNSEL[0]" */,

    config input SC_MODEZDYNSEL[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MODEZDYNSEL[3],SC_MODEZDYNSEL[2],SC_MODEZDYNSEL[1],SC_MODEZDYNSEL[0]" */,

    config input SC_YDYNSEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_YDYNSEL" */,

    config input SC_POREG = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_POREG" */,

    config input SC_ACCLOW = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ACCLOW" */,

    config input SC_PCISEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PCISEL" */,

    config input SC_GRS_DIS = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GRS_DIS" */,

    config input SC_OR2CASECADE_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_OR2CASECADE_EN" */,

    config input SC_OR2CORE_EN[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_OR2CORE_EN[1],SC_OR2CORE_EN[0]" */,

    config input SC_IRX_SHFEN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_IRX_SHFEN" */,

    config input SC_IRZ_SHFEN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_IRZ_SHFEN" */,

    config input SC_MULT_EN[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MULT_EN[1],SC_MULT_EN[0]" */,

// configuration_body_def_end

        input X[17:0] = 18'b1111_1111_1111_1111_11,
        input XI[17:0] = 18'b1111_1111_1111_1111_11,
        input XBI[17:0] = 18'b1111_1111_1111_1111_11,
        input Y[17:0] = 18'b1111_1111_1111_1111_11,
        input Z[47:0] = 48'b1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111,
        input PI[47:0] = 48'b1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111_1111,
        input MODEY[2:0] = 3'b111,
        input MODEZ[3:0] = 4'b1111,
        input PCI = 1'b1,
        input MODEX = 1'b1,
        input CLK = 1'b1,
        input RST_X = 1'b1,
        input CE_X = 1'b1,
        input RST_Y = 1'b1,
        input CE_Y = 1'b1,
        input RST_Z = 1'b1,
        input CE_Z = 1'b1,
        input RST_PRE = 1'b1,
        input CE_PRE = 1'b1,
        input RST_M = 1'b1,
        input CE_M = 1'b1,
        input RST_P = 1'b1,
        input CE_P = 1'b1,
        input RST_MODEX = 1'b1,
        input CE_MODEX = 1'b1,
        input RST_MODEY = 1'b1,
        input CE_MODEY = 1'b1,
        input RST_MODEZ = 1'b1,
        input CE_MODEZ = 1'b1,
        input TEST_MODE_N = 1'b1,
        input TEST_RSTN = 1'b1,
        input TEST_SE_N = 1'b1,
        input TEST_SI = 1'b1,
        output P[47:0],
        output PO[47:0],
        output XO[17:0],
        output XBO[17:0],
        output PCO,
        output TEST_SO
    );
};
//grid device end


/*******************************************************************************

  Device    [APM]

  Author    [yqtan]

  Abstract  [The structure netlist of APM is described in the similar fashion
             as in HDL. In unit instantiation statement, the formal pin may be
             connected to net which is declared explicitly.

             In Valence, the connection can also be made from formal pin to other
             pin or port, in which case Valence compiler shall create the net to
             fulfil the connection. The built-in naming convention is kicked in
             to name the automatically created net. However, the objects (net, instance)
             of this netlist are going to mapped from schematic. The compiler-generated
             names cause trouble for the mapping. Therefore, all wires are declared
             explicitly in the following description]

  Revision History:

********************************************************************************/
//grid device structure netlist started

structure netlist of APM
{
     wire ntXV[17:0];
     wire ntYV[17:0];
     wire ntZV[47:0];
     //wire ntYC[17:0];
     wire ntX1[17:0];
     wire ntYI[17:0];
     wire ntZI[47:0];
     wire ntX0SEL[17:0];
     wire ntYSIGN[17:0];
     wire ntXBR[17:0];
     wire ntNXBI[17:0];

     wire ntA[17:0];
     wire ntB[17:0];
     wire ntNXI[17:0];
     wire ntMODEXV;

     wire ntMODEYV[2:0];

     wire ntMODEZV[3:0];

     wire ntMODEXI;

     wire ntMODEYI[2:0];
     wire ntMODEZI[3:0];
     wire ntPREC[17:0];

     wire ntINAL[8:0];
     wire ntMULT_INA[17:0];

     wire ntPREI[17:0];

     wire ntMC[47:0];

     wire ntMI[47:0];

     wire ntMULT_INB[17:0];

     wire ntntPAI[47:0];
     wire ntINAT[8:0];

     wire ntPA[47:0];
     wire ntPB[47:0];

     wire ntXAA1;
     wire ntPCOR;
     wire ntPCOC;
     wire ntXA1[47:0];
     wire ntXA2[47:0];
     wire ntXB[23:0];
     wire ntXA[23:0];
     wire ntNPI[47:0];
     wire ntPR[47:0];
     wire ntPC[47:0];

     wire ntPRI[47:0];
     wire ntPAI[47:0];
     wire ntPBI[47:0];
     wire ntAND_OUT[47:0];
     wire ntADD_XOR;
     //wire ntMULTXO[17:0];
     wire ntSH_XO[17:0];

     //output nets
     //wire ntP[47:0];
     //wire ntPO[47:0];
     //wire ntXO[17:0];
     //wire ntXBO[17:0];
     wire ntPCO;

     //P   <= ntP;
     //PO  <= ntPO;
     //XO  <= ntXO;
     //XBO <= ntXBO;
     PCO <= ntPCO;

     //input nets
    //wire ntX[17:0];
    //wire ntXI[17:0];
    //wire ntXBI[17:0];
    //wire ntY[17:0];
    //wire ntZ[47:0];
    //wire ntPI[47:0];
    wire ntPCI;
    wire ntMODEX;
    //wire ntMODEY[2:0];
    //wire ntMODEZ[3:0];

    wire ntCLK;
    wire ntRST_X;
    wire ntCE_X;
    wire ntRST_Y;
    wire ntCE_Y;
    wire ntRST_Z;
    wire ntCE_Z;
    wire ntRST_PRE;
    wire ntCE_PRE;
    wire ntRST_M;
    wire ntCE_M;
    wire ntRST_P;
    wire ntCE_P;
    wire ntRST_MODEX;
    wire ntCE_MODEX;
    wire ntCE_MODEY;
    wire ntRST_MODEY;
    wire ntRST_MODEZ;
    wire ntCE_MODEZ;

    //ntX <= X;
    //ntXI <= XI;
    //ntXBI <= XBI;
    //ntY <= Y;
    //ntZ <= Z;
    //ntPI <= PI;
    ntPCI <= PCI;
    ntMODEX <= MODEX;
    //ntMODEY <= MODEY;
    //ntMODEZ <= MODEZ;

    ntCLK <= CLK;
    ntRST_X <= RST_X;
    ntCE_X <= CE_X;
    ntRST_Y <= RST_Y;
    ntCE_Y <= CE_Y;
    ntRST_Z <= RST_Z;
    ntCE_Z <= CE_Z;
    ntRST_PRE <= RST_PRE;
    ntCE_PRE <= CE_PRE;
    ntRST_M <= RST_M;
    ntCE_M <= CE_M;
    ntRST_P <= RST_P;
    ntCE_P <= CE_P;
    ntRST_MODEX <= RST_MODEX;
    ntCE_MODEX <= CE_MODEX;
    ntRST_MODEY <= RST_MODEY;
    ntCE_MODEY  <= CE_MODEY;
    ntRST_MODEZ <= RST_MODEZ;
    ntCE_MODEZ <= CE_MODEZ;


     //dummy instances for constraint editor
     device DUM_INST APM9A ;
     device DUM_INST APM9B ;

     device APM_SIGN_EXTEND_18 U_X_SIGN_EXT
         parameter map
         (
            SEL => CP_XSE //X signed extension
         )
         port map
         (
              O => ntXV,
              I => X  //ntX
         );

     device Y_SIGN_IMUX Y_SIGN_IMUX
         parameter map
         (
           CP_YDYNSEL => CP_YDYNSEL,
           CP_YCONST  => CP_YCONST
         )
         port map
         (
            I => Y, //ntY
            O => ntYSIGN
         );

     device APM_SIGN_EXTEND_18 U_Y_SIGN_EXT
         parameter map
         (
            SEL => CP_YSE //Y signed extension
         )
         port map
         (
              O => ntYV,
              I => ntYSIGN
              //SE => CP_YSE
         );

     device APM_SIGN_EXTEND_48 U_Z_SIGN_EXT
         parameter map
         (
            SEL => CP_ZSE //Z signed extension
         )
         port map
         (
              O => ntZV,
              I => Z //ntZ
              //SE => CP_ZSE
         );

     device A_MUX APM_REG_XOSEL
        parameter map
        (
            SEL => CP_IRX_SHFEN
        )
        port map
        (
           I => ntSH_XO,
           O => XO //ntXO
        );

     device  APM_REG_18_3 U_XO
         parameter map
         (
             CP_ASYNC => CP_ASYNC,
             CP_XOREG => CP_XOREG
         )
         port map
         (
            QREG => ntX1,
            Q => ntSH_XO,
            D => ntX0SEL,
            CLK => ntCLK,
            CE => ntCE_X,
            RST => ntRST_X
         );

     device APM_REG_XSEL X0_SEL
         parameter map
         (
            SEL => CP_XSEL
         )
         port map
         (
            I1 => XI,  // ntXI
            I0 => ntXV,
            O  => ntX0SEL
         );

     device APM_REG_XSEL X0_REG
         parameter map
         (
            SEL => CP_XREG
         )
         port map
         (
            I1 => ntX1,
            I0 => ntX0SEL,
            O  => ntNXI
         );

     device APM_YREG_18_1 U_YI
         parameter map
         (
            CP_ASYNC => CP_ASYNC,
            CP_YREG  => CP_YREG
         )
         port map
         (
            Q => ntYI,
            D => ntYV,
            CLK => ntCLK,
            CE => ntCE_Y,
            RST => ntRST_Y
//            REGSEL => {1'b0, CP_YREG}
         );

     device REG_ZIMUX REG_ZIMUX
         parameter map
         (
            SEL => CP_XBSEL
         )
         port map
         (
            I0 => ntZI[47:30],
            I1 => XBI, // ntXBI
            I2 => ntXBR,
            I3 => XO, // ntXO
            O  => ntNXBI[17:0]

         );

     device APM_REG_48_1 U_ZI
         parameter map
         (
            CP_ASYNC => CP_ASYNC,
            CP_ZREG  => CP_ZREG
         )
         port map
         (
            Q => ntZI,
            D => ntZV,
            CLK => ntCLK,
            CE => ntCE_Z,
            RST => ntRST_Z
         );

     device MUX_OTO MUX_1
         parameter map
         (
            SEL => CP_MODEXDYNSEL,
            SUPP_SEL => CP_MODEXCONST
         )
         port map
         (
            I => ntMODEX,
            O => ntMODEXV
         );

     device MUX_OTO MUX_2
         parameter map
         (
            SEL => CP_MODEYDYNSEL[0],
            SUPP_SEL => CP_MODEYCONST[0]
         )
         port map
         (
            I => MODEY[0],
            O => ntMODEYV[0]
         );

     device MUX_OTO MUX_3
         parameter map
         (
            SEL => CP_MODEYDYNSEL[1],
            SUPP_SEL => CP_MODEYCONST[1]
         )
         port map
         (
            I => MODEY[1],
            O => ntMODEYV[1]
         );

     device MUX_OTO MUX_4
         parameter map
         (
            SEL => CP_MODEYDYNSEL[2],
            SUPP_SEL => CP_MODEYCONST[2]
         )
         port map
         (
            I => MODEY[2],
            O => ntMODEYV[2]
         );

     device MUX_OTO MUX_5
         parameter map
         (
            SEL => CP_MODEZDYNSEL[0],
            SUPP_SEL => CP_MODEZCONST[0]
         )
         port map
         (
            I => MODEZ[0],
            O => ntMODEZV[0]
         );

     device MUX_OTO MUX_6
         parameter map
         (
            SEL => CP_MODEZDYNSEL[1],
            SUPP_SEL => CP_MODEZCONST[1]
         )
         port map
         (
            I => MODEZ[1],
            O => ntMODEZV[1]
         );

     device MUX_OTO MUX_7
         parameter map
         (
            SEL => CP_MODEZDYNSEL[2],
            SUPP_SEL => CP_MODEZCONST[2]
         )
         port map
         (
            I => MODEZ[2],
            O => ntMODEZV[2]
         );

     device MUX_OTO MUX_8
         parameter map
         (
            SEL => CP_MODEZDYNSEL[3],
            SUPP_SEL => CP_MODEZCONST[3]
         )
         port map
         (
            I => MODEZ[3],
            O => ntMODEZV[3]
         );

     device APM_REG U_MODELXI
         parameter map
         (
             CP_ASYNC => CP_ASYNC,
             CP_MODEXREG =>CP_MODEXREG
         )
         port map
         (
             Q => ntMODEXI,
             D => ntMODEXV,
             CLK => ntCLK,
             CE => ntCE_MODEX,
             RST => ntRST_MODEX
//             REGSEL => {1'b0, CP_MODEXREG}
         );

     device APM_REG_AMY U_MODELY0
         parameter map
         (
             CP_ASYNC => CP_ASYNC,
             CP_MODEYREG =>CP_MODEYREG
         )
         port map
         (
             Q => ntMODEYI[0],
             D => ntMODEYV[0],
             CLK => ntCLK,
             CE => ntCE_MODEY,
             RST => ntRST_MODEY
//             REGSEL => {1'b0, CP_MODEYREG}
         );

     device APM_REG_AMY U_MODELY1
         parameter map
         (
             CP_ASYNC => CP_ASYNC,
             CP_MODEYREG => CP_MODEYREG
         )
         port map
         (
             Q => ntMODEYI[1],
             D => ntMODEYV[1],
             CLK => ntCLK,
             CE => ntCE_MODEY,
             RST => ntRST_MODEY
//             REGSEL => {1'b0, CP_MODEYREG}
         );

     device APM_REG_AMY U_MODELY2
         parameter map
         (
             CP_ASYNC => CP_ASYNC,
             CP_MODEYREG => CP_MODEYREG
         )
         port map
         (
             Q => ntMODEYI[2],
             D => ntMODEYV[2],
             CLK => ntCLK,
             CE => ntCE_MODEY,
             RST => ntRST_MODEY
//             REGSEL => {1'b0, CP_MODEYREG}
         );

     device APM_REG_AMZ U_MODELZ0
         parameter map
         (
             CP_ASYNC => CP_ASYNC,
             CP_MODEZREG => CP_MODEZREG
         )
         port map
         (
             Q => ntMODEZI[0],
             D => ntMODEZV[0],
             CLK => ntCLK,
             CE => ntCE_MODEZ,
             RST => ntRST_MODEZ
//             REGSEL => {1'b0, CP_MODEZREG}
         );

     device APM_REG_AMZ U_MODELZ1
         parameter map
         (
             CP_ASYNC => CP_ASYNC,
             CP_MODEZREG => CP_MODEZREG
         )
         port map
         (
             Q => ntMODEZI[1],
             D => ntMODEZV[1],
             CLK => ntCLK,
             CE => ntCE_MODEZ,
             RST => ntRST_MODEZ
//             REGSEL => {1'b0, CP_MODEZREG}
         );

     device APM_REG_AMZ U_MODELZ2
         parameter map
         (
             CP_ASYNC => CP_ASYNC,
             CP_MODEZREG => CP_MODEZREG
         )
         port map
         (
             Q => ntMODEZI[2],
             D => ntMODEZV[2],
             CLK => ntCLK,
             CE => ntCE_MODEZ,
             RST => ntRST_MODEZ
//             REGSEL => {1'b0, CP_MODEZREG}
         );

     device APM_REG_AMZ U_MODELZ3
         parameter map
         (
             CP_ASYNC => CP_ASYNC,
             CP_MODEZREG => CP_MODEZREG
         )
         port map
         (
             Q => ntMODEZI[3],
             D => ntMODEZV[3],
             CLK => ntCLK,
             CE => ntCE_MODEZ,
             RST => ntRST_MODEZ
//             REGSEL => {1'b0, CP_MODEZREG}
         );

     device APM_REG_18_1 U_XR
         parameter map
         (
            CP_ASYNC => CP_ASYNC
         )
         port map
         (
             Q => ntXBR,
             D => XBI,  //ntXBI
             CLK => ntCLK,
             CE => ntCE_Z,
             RST => ntRST_Z,
//             ASYNC => CP_ASYNC,
             REGSEL => {2'b01} //latency == 1
         );

     device A_MUX A_MUX
         parameter map
         (
             SEL => CP_PREADD
         )
         port map
         (
             I => ntNXI,
             O => ntA
         );

     device A_MUX B_MUX
         parameter map
         (
           SEL => CP_PREADD
         )
         port map
         (
           I => ntNXBI[17:0],
           O => ntB
         );

     device A_MUX IRZ_SHFEN
        parameter map
        (
          SEL => CP_IRZ_SHFEN
        )
        port map
        (
          I => ntNXBI[17:0],
          O => XBO  //ntXBO
        );

     device APM_ADDSUB U_PREC
         port map
         (
             S => ntPREC,
             A => ntA , //18'b0
             B => ntB,  //18'b0,
             AS => ntMODEXI
            // SIMD => CP_SIMD
         );

     device MUX_A MUX_A
         parameter map
         (
             SEL => CP_MULT_EN[0]
         )
         port map
         (
             I => ntINAL,
             O => ntMULT_INA[8:0]
         );

     device MUX_AB MUX_AB
         parameter map
         (
             SEL => CP_PREADD
         )
         port map
         (
            I1 => ntPREI[8:0],
            I0 => ntNXI[8:0],
            O => ntINAL
         );

    device MUX_A MUX_B
        parameter map
        (
          SEL => CP_MULT_EN[1]
        )
        port map
        (
           I => ntINAT,
           O => ntMULT_INA[17:9]
        );

    device MUX_AB MUX_CD
        parameter map
        (
          SEL => CP_PREADD
        )
        port map
        (
          I1 => ntPREI[17:9],
          I0 => ntNXI[17:9],
          O => ntINAT
        );

    device MUX_A MUX_C
        parameter map
        (
          SEL => CP_MULT_EN[0]
        )
        port map
        (
           I => ntYI[8:0],
           O => ntMULT_INB[8:0]
        );

     device MUX_A MUX_D
         parameter map
         (
           SEL => CP_MULT_EN[1]
         )
         port map
         (
            I => ntYI[17:9],
            O => ntMULT_INB[17:9]
         );

    device APM_REG_18_1 U_PREI
        parameter map
        (
           CP_ASYNC  => CP_ASYNC,
           CP_PREREG => CP_PREREG

        )
        port map
        (
           Q => ntPREI,
           D => ntPREC,
           CLK => ntCLK,
           CE =>  ntCE_PRE,
           RST => ntRST_PRE
        );

    //device APM_MULT_XSEL APM_MULT_XSEL
    //   parameter map
    //   (
    //      SEL =>  CP_PREADD
    //   )
    //   port map
    //   (
    //       I0 =>  ntPREI,
    //       I1 =>  ntNXI,
    //       O  =>  ntMULTXO
    //   );

    device APM_MULT U_MULT
        parameter map
        (
//           IWIDTH => 18,
//           OWIDTH => 48,
           CP_SIMD => CP_SIMD,
           CP_XSIGNED => CP_XSIGNED,
           CP_YSIGNED => CP_YSIGNED
        )
        port map
        (
           P => ntMC,
           X => ntMULT_INA,
           Y => ntMULT_INB
//           SIMD => CP_SIMD,
//           XSIGNED => CP_XSIGNED,
//           YSIGNED => CP_YSIGNED
        );

    device APM_MREG_48_1 U_MI
        parameter map
        (
           CP_ASYNC => CP_ASYNC,
           CP_MREG  => CP_MREG
        )
        port map
        (
           Q => ntMI,
           D => ntMC,
           CLK => ntCLK,
           CE =>  ntCE_M,
           RST => ntRST_M
//           ASYNC => CP_ASYNC,
//           REGSEL => {1'b0, CP_MREG}
        );

     device PRI_MUX PRI_MUX
         parameter map
         (
             CP_ACCLOW => CP_ACCLOW
         )
         port map
         (
             I => ntPR,
             O => ntPRI
         );

    device PAI_AND PAI_AND
        port map
        (
             I0 => ntPRI,
             I1 => ntMODEYI[0],
             O  => ntAND_OUT
        );

    device PAI_MUX PAI_MUX
        parameter map
        (
            SEL => CP_POSTADD
        )
        port map
        (
            I0 => ntMI,
            I1 => ntAND_OUT,
            S  => ntMODEYI[1],
            O  => ntPAI
        );

   device PBI_MUX PBI_MUX
       parameter map
       (
           SEL => CP_ZINIT
       )
       port map
       (
           I0 => ntPRI,
           I1 => ntZI,
           I2 => PI, //ntPI
           I3 => ntMODEZI[2:0],
           O  => ntPBI
       );

     device INV_MUX INV_MUXA
         port map
         (
             I => ntPAI,
             SEL => ntMODEYI[2],
             O => ntPA
         );

     device INV_MUX INV_MUXB
         port map
         (
             I => ntPBI,
             SEL => ntMODEZI[3],
             O => ntPB
         );

     device ADD_XOR ADD_XOR
         port map
         (
            I0 => ntMODEYI[2],
            I1 => ntMODEZI[3],
            O => ntADD_XOR
         );

     wire ntCINSEL;
     device ADD_CIN_SEL ADD_CIN_SEL
       parameter map
       (
         SEL => CP_PCISEL
       )
       port map
       (
           I0 => ntPCI,
           I1 => ntADD_XOR,
           O => ntCINSEL
       );

     device APM_ADD U_ADD
         port map
         (
            CO => ntPCOC,
            S => ntPC,
            A => ntPA,
            B => ntPB,
            CIN => ntCINSEL
           // SIMD => CP_SIMD
         );

     device APM_PREG_48_1 U_PI
         parameter map
         (
            CP_ASYNC => CP_ASYNC,
            CP_PREG  => CP_PREG
         )
         port map
         (
             Q => ntNPI,
             QREG => ntPR,
             D => ntPC,
             CLK => ntCLK,
             CE =>  ntCE_P,
             RST => ntRST_P
//             ASYNC => CP_ASYNC,
//             REGSEL => {1'b0, CP_PREG}
         );

     device P_MUX P1_MUX
         parameter map
         (
             SEL => CP_OR2CORE_EN[0]
         )
         port map
         (
             I => ntXA,
             O => P[23:0] //ntP[23:0]
         );

     device PP_MUX PP1_MUX
         parameter map
         (
             SEL => CP_POSTADD
         )
         port map
         (
             I0 => ntNPI[23:0],
             I1 => ntMI[23:0],
             O  => ntXA
         );

     device P_MUX P2_MUX
         parameter map
         (
             SEL => CP_OR2CORE_EN[1]
         )
         port map
         (
             I => ntXB,
             O => P[47:24] //ntP[47:24]
         );

     device PP_MUX PP2_MUX
         parameter map
         (
             SEL => CP_POSTADD
         )
         port map
         (
             I0 => ntNPI[47:24],
             I1 => ntMI[47:24],
             O  => ntXB
         );

     device PO_MUX PO1
         parameter map
         (
             SEL => CP_OR2CASECADE_EN
         )
         port map
         (
             I => ntXA1,
             O => PO // ntPO
         );

     device POO_MUX PO2
         parameter map
         (
             SEL => CP_POSTADD
         )
         port map
         (
             I0 => ntXA2,
             I1 => ntMI,
             O => ntXA1
         );

     device POO_MUX PO3
         parameter map
         (
             SEL => CP_POREG
         )
         port map
         (
             I0 => ntPR,
             I1 => ntPC,
             O => ntXA2
         );

     device APM_REG_AP U_PCOI
         parameter map
         (
             CP_ASYNC => CP_ASYNC,
             CP_PREG  => CP_PREG
         )
         port map
         (
             QREG => ntPCOR,
             D    => ntPCOC,
             CLK  => ntCLK,
             CE   => ntCE_P,
             RST =>  ntRST_P
//             ASYNC => CP_ASYNC,
//             REGSEL => {1'b0, CP_PREG}
         );

     device PCOI_MUX MUX_A1
         parameter map
         (
             SEL => CP_OR2CASECADE_EN
         )
         port map
         (
             I => ntXAA1,
             O => ntPCO
         );

     device PCOI_2MUX MUX_A2
         parameter map
         (
             SEL => CP_POREG
         )
         port map
         (
             I0 => ntPCOR,
             I1 => ntPCOC,
             O => ntXAA1
         );

};
//grid device structure netlist end


/*******************************************************************************

  Device    [APM]

  Author    []

  Abstract  [The floorplan structure]

  Revision History:

********************************************************************************/
floorplan
structure fp_struct of APM
{
    device DUM_INST APM9A ;
    device DUM_INST APM9B ;

}; // end of structure fp_struct of APM

//grid device configure body started

configuration cfg of APM
{

 // assign config body begin
    SC_ASYNC := CP_ASYNC;
    SC_SIMD := CP_SIMD;
    SC_XSIGNED := CP_XSIGNED;
    SC_YSIGNED := CP_YSIGNED;
    SC_POSTADD := CP_POSTADD;
    SC_PREADD := CP_PREADD;
    SC_PREREG := CP_PREREG;
    SC_XREG := CP_XREG;
    SC_XOREG := CP_XOREG;
    SC_YREG := CP_YREG;
    SC_ZREG := CP_ZREG;
    SC_MREG := CP_MREG;
    SC_PREG := CP_PREG;
    SC_MODEXREG := CP_MODEXREG;
    SC_MODEYREG := CP_MODEYREG;
    SC_MODEZREG := CP_MODEZREG;
    SC_XSEL := CP_XSEL;
    SC_BSEL[1] := CP_XBSEL[1]&CP_XBSEL[0];
    SC_BSEL[0] := CP_XBSEL[1]^CP_XBSEL[0];
    SC_XBREG := CP_ZREG|(CP_XBSEL[1]&(CP_XBSEL[0] == 1'b1? 1'b0 : 1'b1));
    SC_ZINIT := CP_ZINIT;
    SC_POREG := CP_POREG;
    SC_ACCLOW := CP_ACCLOW;
    SC_PCISEL := CP_PCISEL;
    SC_XSE := CP_XSE;
    SC_YSE := CP_YSE;
    SC_ZSE := CP_ZSE;
    SC_YCONST := CP_YCONST;
    SC_YDYNSEL := CP_YDYNSEL;
    SC_MODEXCONST := CP_MODEXCONST;
    SC_MODEYCONST := CP_MODEYCONST;
    SC_MODEZCONST := CP_MODEZCONST;
    SC_MODEXDYNSEL := CP_MODEXDYNSEL;
    SC_MODEYDYNSEL := CP_MODEYDYNSEL;
    SC_MODEZDYNSEL := CP_MODEZDYNSEL;
    SC_GRS_DIS := CP_GRS_DIS;
    SC_OR2CASECADE_EN := CP_OR2CASECADE_EN;
    SC_OR2CORE_EN := CP_OR2CORE_EN;
    SC_IRX_SHFEN := CP_IRX_SHFEN;
    SC_IRZ_SHFEN := CP_IRZ_SHFEN;
    SC_MULT_EN := CP_MULT_EN;
// assign config body end
};

//grid device configure body end

timing  apm_tnl of APM
{
    //wire X_PSE[17:0];
    //wire Y_PSE[17:0];
    //wire Z_PSE[47:0];
    //
    //// X
    //X_PSE[17]   <=  X[17];
    //X_PSE[16]   <= (CP_XSE[7]) ? X[17] : X[16];
    //X_PSE[15]   <= (CP_XSE[6]) ? X[17] : X[15];
    //X_PSE[14]   <= (CP_XSE[5]) ? X[17] : X[14];
    //X_PSE[13]   <= (CP_XSE[4]) ? X[17] : X[13];
    //X_PSE[12]   <= (CP_XSE[3]) ? X[17] : X[12];
    //X_PSE[11]   <= (CP_XSE[2]) ? X[17] : X[11];
    //X_PSE[10]   <= (CP_XSE[1]) ? X[17] : X[10];
    //X_PSE[9]    <= (CP_XSE[0]) ? X[17] : X[9] ;
    //X_PSE[8:0]  <=  X[8:0];
    //
    //// Y
    //Y_PSE[17]   <=  Y[17];
    //Y_PSE[16]   <= (CP_YSE[7]) ? Y[17] : Y[16];
    //Y_PSE[15]   <= (CP_YSE[6]) ? Y[17] : Y[15];
    //Y_PSE[14]   <= (CP_YSE[5]) ? Y[17] : Y[14];
    //Y_PSE[13]   <= (CP_YSE[4]) ? Y[17] : Y[13];
    //Y_PSE[12]   <= (CP_YSE[3]) ? Y[17] : Y[12];
    //Y_PSE[11]   <= (CP_YSE[2]) ? Y[17] : Y[11];
    //Y_PSE[10]   <= (CP_YSE[1]) ? Y[17] : Y[10];
    //Y_PSE[9]    <= (CP_YSE[0]) ? Y[17] : Y[9] ;
    //Y_PSE[8:0]  <=  Y[8:0];
    //
    //// Z
    //Z_PSE[47]   <=  Z[47];
    //Z_PSE[46]   <= (CP_ZSE[22]) ? Z[47] : Z[46];
    //Z_PSE[45]   <= (CP_ZSE[21]) ? Z[47] : Z[45];
    //Z_PSE[44]   <= (CP_ZSE[20]) ? Z[47] : Z[44];
    //Z_PSE[43]   <= (CP_ZSE[19]) ? Z[47] : Z[43];
    //Z_PSE[42]   <= (CP_ZSE[18]) ? Z[47] : Z[42];
    //Z_PSE[41]   <= (CP_ZSE[17]) ? Z[47] : Z[41];
    //Z_PSE[40]   <= (CP_ZSE[16]) ? Z[47] : Z[40];
    //Z_PSE[39]   <= (CP_ZSE[15]) ? Z[47] : Z[39];
    //Z_PSE[38]   <= (CP_ZSE[14]) ? Z[47] : Z[38];
    //Z_PSE[37]   <= (CP_ZSE[13]) ? Z[47] : Z[37];
    //Z_PSE[36]   <= (CP_ZSE[12]) ? Z[47] : Z[36];
    //Z_PSE[35]   <= (CP_ZSE[11]) ? Z[47] : Z[35];
    //Z_PSE[34]   <= (CP_ZSE[10]) ? Z[47] : Z[34];
    //Z_PSE[33]   <= (CP_ZSE[9] ) ? Z[47] : Z[33];
    //Z_PSE[32]   <= (CP_ZSE[8] ) ? Z[47] : Z[32];
    //Z_PSE[31]   <= (CP_ZSE[7] ) ? Z[47] : Z[31];
    //Z_PSE[30]   <= (CP_ZSE[6] ) ? Z[47] : Z[30];
    //Z_PSE[29]   <= (CP_ZSE[5] ) ? Z[47] : Z[29];
    //Z_PSE[28]   <= (CP_ZSE[4] ) ? Z[47] : Z[28];
    //Z_PSE[27]   <= (CP_ZSE[3] ) ? Z[47] : Z[27];
    //Z_PSE[26]   <= (CP_ZSE[2] ) ? Z[47] : Z[26];
    //Z_PSE[25]   <= (CP_ZSE[1] ) ? Z[47] : Z[25];
    //Z_PSE[24]   <= (CP_ZSE[0] ) ? Z[47] : Z[24];
    //Z_PSE[23:0] <=  Z[23:0];

    operator V_APM_E1 V_APM_E1
        parameter map
        (
            GRS_EN           => (CP_GRS_DIS  == 1'b0 ) ? "TRUE" : "FALSE",
            X_SIGNED         => (CP_XSIGNED  == 1'b0 ) ? 0 : 1,
            Y_SIGNED         => (CP_YSIGNED  == 1'b0 ) ? 0 : 1,
            USE_POSTADD      => (CP_POSTADD  == 1'b0 ) ? 0 : 1,
            USE_PREADD       => (CP_PREADD   == 1'b0 ) ? 0 : 1,
            PREADD_REG       => (CP_PREREG   == 1'b0 ) ? 0 : 1,
            X_REG            => (CP_XREG     == 1'b0 ) ? 0 : 1,
            CXO_REG          => (CP_XOREG    == 2'b00) ? 0 :
                                (CP_XOREG    == 2'b01) ? 1 :
                                (CP_XOREG    == 2'b10) ? 2 : 3,
            Y_REG            => (CP_YREG     == 1'b0 ) ? 0 : 1,
            Z_REG            => (CP_ZREG     == 1'b0 ) ? 0 : 1,
            MULT_REG         => (CP_MREG     == 1'b0 ) ? 0 : 1,
            P_REG            => (CP_PREG     == 1'b0 ) ? 0 : 1,
            MODEX_REG        => (CP_MODEXREG == 1'b0 ) ? 0 : 1,
            MODEY_REG        => (CP_MODEYREG == 1'b0 ) ? 0 : 1,
            MODEZ_REG        => (CP_MODEZREG == 1'b0 ) ? 0 : 1,
            X_SEL            => (CP_XSEL     == 1'b0 ) ? 0 : 1,
            XB_SEL           => (CP_XBSEL    == 2'b00) ? 0 :
                                (CP_XBSEL    == 2'b01) ? 1 :
                                (CP_XBSEL    == 2'b10) ? 2 : 3,
            ASYNC_RST        => (CP_ASYNC    == 1'b0 ) ? 0 : 1,
            USE_SIMD         => (CP_SIMD     == 1'b0 ) ? 0 : 1,
            CPO_REG          => (CP_POREG    == 1'b0 ) ? 0 : 1,
            USE_ACCLOW       => (CP_ACCLOW   == 1'b0 ) ? 0 : 1,
            CIN_SEL          => (CP_PCISEL   == 1'b0 ) ? 0 : 1,
            Z_INIT           =>  CP_ZINIT,
            X_PSE            =>  CP_XSE,
            Y_PSE            =>  CP_YSE,
            Z_PSE            =>  CP_ZSE

            //XSE             =>  CP_XSE,
            //YSE             =>  CP_YSE,
            //ZSE             =>  CP_ZSE,
            //YCONST          =>  CP_YCONST,
            //YDYNSEL         =>  CP_YDYNSEL,
            //MODEXCONST      =>  CP_MODEXCONST,
            //MODEXDYNSEL     =>  CP_MODEXDYNSEL,
            //MODEYCONST      =>  CP_MODEYCONST,
            //MODEYDYNSEL     =>  CP_MODEYDYNSEL,
            //MODEZCONST      =>  CP_MODEZCONST,
            //MODEZDYNSEL     =>  CP_MODEZDYNSEL,
            //OR2CASECADE_EN  =>  CP_OR2CASECADE_EN,
            //OR2CORE_EN      =>  CP_OR2CORE_EN,
            //IRX_SHFEN       =>  CP_IRX_SHFEN,
            //IRZ_SHFEN       =>  CP_IRZ_SHFEN,
            //MULT_EN         =>  CP_MULT_EN
        )
        port map
        (
             P                =>  P,
             CPO              =>  PO,
             COUT             =>  PCO,
             CXO              =>  XO,
             CXBO             =>  XBO,
             X                =>  X,
             CXI              =>  XI,
             CXBI             =>  XBI,
             Y                =>  Y,
             Z                =>  Z,
             CPI              =>  PI,
             CIN              =>  PCI,
             MODEX            =>  MODEX,
             MODEY            =>  MODEY,
             MODEZ            =>  MODEZ,
             CLK              =>  CLK,
             RSTX             =>  RST_X,
             RSTY             =>  RST_Y,
             RSTZ             =>  RST_Z,
             RSTM             =>  RST_M,
             RSTP             =>  RST_P,
             RSTPRE           =>  RST_PRE  ,
             RSTMODEX         =>  RST_MODEX,
             RSTMODEY         =>  RST_MODEY,
             RSTMODEZ         =>  RST_MODEZ,
             CEX              =>  CE_X,
             CEY              =>  CE_Y,
             CEZ              =>  CE_Z,
             CEM              =>  CE_M,
             CEP              =>  CE_P,
             CEPRE            =>  CE_PRE,
             CEMODEX          =>  CE_MODEX,
             CEMODEY          =>  CE_MODEY,
             CEMODEZ          =>  CE_MODEZ
        );
};
