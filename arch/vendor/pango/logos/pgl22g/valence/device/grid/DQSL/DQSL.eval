*****************************************************************

  Device    [DQSL]

  Author    [yqtan]

  Abstract  [The Grid Device DQSL]

  Revision History:

********************************************************************************/
//grid device started
grid
device DQSL
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config string CP_DQS_MODE = "FULL_RATE",
        config string CP_IFIFO_GENERIC = "FALSE",
        config bit CP_WCLK_DEL_OFFSET[8:0] = 9'b000000000,
        config bit CP_DQSI_DEL_OFFSET[8:0] = 9'b000000000,
        config string CP_GATE_EN = "FALSE",
        config string CP_RDEL_CTRL_EN = "FALSE",
        config string CP_WL_CTRL_EN = "FALSE",
        config string CP_WL_EXTEND = "FALSE",
        config string CP_FIFOMODE_SEL = "TRUE",
        config bit CP_EN_CTRL[4:0] = 5'b00000,
        config bit CP_RST_CTRL[1:0] = 2'b00,
        config string CP_DQS_GATE_SEL = "FALSE",
        config string CP_WCLKDEL_SEL = "FALSE",
        config string CP_CLKR_SEL = "FALSE",
        config bit CP_RD_ADDR_INIT[2:0] = 3'b000
    );
    port
    (
// configuration_body_def_on


    config input SC_RD_ADDR_INIT[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RD_ADDR_INIT[2],SC_RD_ADDR_INIT[1],SC_RD_ADDR_INIT[0]" */,

    config input SC_WCLK_DEL_OFFSET[8:0] = 9'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_WCLK_DEL_OFFSET[8],SC_WCLK_DEL_OFFSET[7],SC_WCLK_DEL_OFFSET[6],SC_WCLK_DEL_OFFSET[5],SC_WCLK_DEL_OFFSET[4],SC_WCLK_DEL_OFFSET[3],SC_WCLK_DEL_OFFSET[2],SC_WCLK_DEL_OFFSET[1],SC_WCLK_DEL_OFFSET[0]" */,

    config input SC_DQSI_DEL_OFFSET[8:0] = 9'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DQSI_DEL_OFFSET[8],SC_DQSI_DEL_OFFSET[7],SC_DQSI_DEL_OFFSET[6],SC_DQSI_DEL_OFFSET[5],SC_DQSI_DEL_OFFSET[4],SC_DQSI_DEL_OFFSET[3],SC_DQSI_DEL_OFFSET[2],SC_DQSI_DEL_OFFSET[1],SC_DQSI_DEL_OFFSET[0]" */,

    config input SC_RST_CTRL[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RST_CTRL[1],SC_RST_CTRL[0]" */,

    config input SC_EN_CTRL[4:0] = 5'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_EN_CTRL[4],SC_EN_CTRL[3],SC_EN_CTRL[2],SC_EN_CTRL[1],SC_EN_CTRL[0]" */,

    config input SC_DQS_MODE[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DQS_MODE[2],SC_DQS_MODE[1],SC_DQS_MODE[0]" */,

    config input SC_IFIFO_GENERIC = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_IFIFO_GENERIC" */,

    config input SC_GATE_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GATE_EN" */,

    config input SC_RDEL_CTRL_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RDEL_CTRL_EN" */,

    config input SC_WL_CTRL_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_WL_CTRL_EN" */,

    config input SC_WL_EXTEND = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_WL_EXTEND" */,

    config input SC_FIFOMODE_SEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FIFOMODE_SEL" */,

    config input SC_DQS_GATE_SEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DQS_GATE_SEL" */,

    config input SC_WCLKDEL_SEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_WCLKDEL_SEL" */,

    config input SC_CLKR_SEL = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CLKR_SEL" */,

// configuration_body_def_end

        input DLL_STEP[7:0] = 8'b1111_1111,
        input WL_STEP[7:0] = 8'b1111_1111,
        input WL_CTRL[2:0] = 3'b111,
        input DQS_GATE_CTRL[3:0] = 4'b1111,
        input READ_CLK_CTRL[2:0] = 3'b111,
        input RDEL_CTRL[2:0] = 3'b111,
        input RST_DQS = 1'b1,
        input CLK_REGIONAL = 1'b1,
        input CLK_IO = 1'b1,
        input GATEI = 1'b1,
        input CLK_DQSI = 1'b1,
        input GATE_FROM_LOOP = 1'b1,
        input RST_TRAINING_N = 1'b1,
        output DQS_DRIFT[1:0],
        output IFIFO_WADDR[2:0],
        output IFIFO_RADDR[2:0],
        output WL_OV,
        output CLK_R,
        output CLK_W,
        output CLK_W_DEL,
        output RDEL_OV,
        output CLK_DQSI_DEL,
        output DGTS,
        output READ_VALID,
        output GATE_TO_LOOP,
        output DQS_DRIFT_STATUS,
        output DRIFT_DETECT_ERR
    );
};
//grid device end


/*******************************************************************************

  Device    [DQSL]

  Author    [yqtan]

  Abstract  [The structure netlist of DQSL is described in the similar fashion 
             as in HDL. In unit instantiation statement, the formal pin may be 
             connected to net which is declared explicitly. 
             
             In Valence, the connection can also be made from formal pin to other 
             pin or port, in which case Valence compiler shall create the net to 
             fulfil the connection. The built-in naming convention is kicked in 
             to name the automatically created net. However, the objects (net, instance)
             of this netlist are going to mapped from schematic. The compiler-generated
             names cause trouble for the mapping. Therefore, all wires are declared
             explicitly in the following description]

  Revision History:

********************************************************************************/
//grid device structure netlist started

structure netlist of DQSL
{
      
}; // end of structure netlist of DQSL}
//grid device structure netlist end


floorplan
structure fp_struct of DQSL
{
          

};

//grid device configure body started

configuration cfg of DQSL
{

 // assign config body begin
    SC_RD_ADDR_INIT  :=  CP_RD_ADDR_INIT;
    SC_WCLK_DEL_OFFSET  :=  CP_WCLK_DEL_OFFSET;
    SC_DQSI_DEL_OFFSET  :=  CP_DQSI_DEL_OFFSET;
    SC_RST_CTRL  :=  CP_RST_CTRL;
    SC_EN_CTRL   :=  CP_EN_CTRL;
// assign config body end

//initial config body0 begin
    if(CP_DQS_MODE == "FULL_RATE")
    {
        SC_DQS_MODE  :=  3'b000;
    }
    else if(CP_DQS_MODE == "HALF_RATE")
    {
        SC_DQS_MODE  :=  3'b010;
    }
    else if(CP_DQS_MODE == "QUAD_RATE")
    {
        SC_DQS_MODE  :=  3'b111;
    }
    else
    {
        SC_DQS_MODE  :=  3'bxxx;
        error ("illegal setting for CP_DQS_MODE := %s",CP_DQS_MODE);
    }

//initial config body0 end


//initial config body1 begin
    if(CP_IFIFO_GENERIC == "TRUE")
    {
        SC_IFIFO_GENERIC  :=  1'b1;
    }
    else if(CP_IFIFO_GENERIC == "FALSE")
    {
        SC_IFIFO_GENERIC  :=  1'b0;
    }
    else
    {
        SC_IFIFO_GENERIC  :=  1'bx;
        error ("illegal setting for CP_IFIFO_GENERIC := %s",CP_IFIFO_GENERIC);
    }

//initial config body1 end


//initial config body2 begin
    if(CP_GATE_EN == "FALSE")
    {
        SC_GATE_EN  :=  1'b0;
    }
    else if(CP_GATE_EN == "TRUE")
    {
        SC_GATE_EN  :=  1'b1;
    }
    else
    {
        SC_GATE_EN  :=  1'bx;
        error ("illegal setting for CP_GATE_EN := %s",CP_GATE_EN);
    }

//initial config body2 end


//initial config body3 begin
    if(CP_RDEL_CTRL_EN == "TRUE")
    {
        SC_RDEL_CTRL_EN  :=  1'b1;
    }
    else if(CP_RDEL_CTRL_EN == "FALSE")
    {
        SC_RDEL_CTRL_EN  :=  1'b0;
    }
    else
    {
        SC_RDEL_CTRL_EN  :=  1'bx;
        error ("illegal setting for CP_RDEL_CTRL_EN := %s",CP_RDEL_CTRL_EN);
    }

//initial config body3 end


//initial config body4 begin
    if(CP_WL_CTRL_EN == "TRUE")
    {
        SC_WL_CTRL_EN  :=  1'b1;
    }
    else if(CP_WL_CTRL_EN == "FALSE")
    {
        SC_WL_CTRL_EN  :=  1'b0;
    }
    else
    {
        SC_WL_CTRL_EN  :=  1'bx;
        error ("illegal setting for CP_WL_CTRL_EN := %s",CP_WL_CTRL_EN);
    }

//initial config body4 end


//initial config body5 begin
    if(CP_WL_EXTEND == "FALSE")
    {
        SC_WL_EXTEND  :=  1'b0;
    }
    else if(CP_WL_EXTEND == "TRUE")
    {
        SC_WL_EXTEND  :=  1'b1;
    }
    else
    {
        SC_WL_EXTEND  :=  1'bx;
        error ("illegal setting for CP_WL_EXTEND := %s",CP_WL_EXTEND);
    }

//initial config body5 end


//initial config body6 begin
    if(CP_FIFOMODE_SEL == "TRUE")
    {
        SC_FIFOMODE_SEL  :=  1'b1;
    }
    else if(CP_FIFOMODE_SEL == "FALSE")
    {
        SC_FIFOMODE_SEL  :=  1'b0;
    }
    else
    {
        SC_FIFOMODE_SEL  :=  1'bx;
        error ("illegal setting for CP_FIFOMODE_SEL := %s",CP_FIFOMODE_SEL);
    }

//initial config body6 end


//initial config body7 begin
    if(CP_DQS_GATE_SEL=="TRUE")
    {
        SC_DQS_GATE_SEL := 1'b1;
    }
    else if(CP_DQS_GATE_SEL=="FALSE")
    {
        SC_DQS_GATE_SEL := 1'b0;
    }
    else
    {
        SC_DQS_GATE_SEL := 1'bx;
        error ("illegal setting for CP_DQS_GATE_SEL := %s",CP_DQS_GATE_SEL);
    }

//initial config body7 end


//initial config body8 begin
    if(CP_WCLKDEL_SEL == "TRUE")
    {
        SC_WCLKDEL_SEL := 1'b1;
    }
    else if(CP_WCLKDEL_SEL == "FALSE")
    {
        SC_WCLKDEL_SEL := 1'b0;
    }
    else
    {
        SC_WCLKDEL_SEL := 1'bx;
        error ("illegal setting for CP_WCLKDEL_SEL := %s",CP_WCLKDEL_SEL);
    }

//initial config body8 end


//initial config body9 begin
    if(CP_CLKR_SEL == "TRUE")
    {
        SC_CLKR_SEL := 1'b1;
    }
    else if(CP_CLKR_SEL == "FALSE")
    {
        SC_CLKR_SEL := 1'b0;
    }
    else
    {
        SC_CLKR_SEL := 1'bx;
        error ("illegal setting for CP_CLKR_SEL := %s",CP_CLKR_SEL);
    }

//initial config body9 end

};

//grid device configure body end

timing  dqsl_tnl of DQSL
{
    operator V_DDC_E1 V_DDC_E1
        parameter map
        (
            GRS_EN              => (CP_RST_CTRL[1] == 1'b0) ? "TRUE" : "FALSE",
            CLKA_GATE_EN        =>  CP_GATE_EN,
            DDC_MODE            =>  CP_DQS_MODE,
            W_MOVE_EN           =>  CP_WL_CTRL_EN,
            WCLK_DELAY_OFFSET   =>  CP_WCLK_DEL_OFFSET,
            R_MOVE_EN           =>  CP_RDEL_CTRL_EN,
            DQSI_DELAY_OFFSET   =>  CP_DQSI_DEL_OFFSET,
            R_DELAY_STEP_EN     => (CP_EN_CTRL[4] == 1'b0) ? "TRUE" : "FALSE",
            R_EXTEND            =>  CP_WL_EXTEND,
            IFIFO_GENERIC       =>  CP_IFIFO_GENERIC,
            RADDR_INIT          =>  CP_RD_ADDR_INIT,
            GATE_SEL            =>  CP_DQS_GATE_SEL,
            WCLK_DELAY_SEL      =>  CP_WCLKDEL_SEL,
            RCLK_SEL            =>  CP_CLKR_SEL
        )
        port map
        (
            RST                =>  RST_DQS,
            CLKB               =>  CLK_REGIONAL,
            CLKA               =>  CLK_IO,
            RCLK               =>  CLK_R,
            CLKA_GATE          =>  GATEI,
            DELAY_STEP0        =>  WL_STEP,
            W_DIRECTION        =>  WL_CTRL[2],
            W_MOVE             =>  WL_CTRL[1],
            W_LOAD_N           =>  WL_CTRL[0],
            DQS_GATE_CTRL      =>  DQS_GATE_CTRL,
            READ_CLK_CTRL      =>  READ_CLK_CTRL,
            DQSI               =>  CLK_DQSI,
            R_DIRECTION        =>  RDEL_CTRL[2],
            R_MOVE             =>  RDEL_CTRL[1],
            R_LOAD_N           =>  RDEL_CTRL[0],
            WDELAY_OB          =>  WL_OV,
            WCLK               =>  CLK_W,
            WCLK_DELAY         =>  CLK_W_DEL,
            RDELAY_OB          =>  RDEL_OV,
            DQSI_DELAY         =>  CLK_DQSI_DEL,
            DGTS               =>  DGTS,
            READ_VALID         =>  READ_VALID,
            DELAY_STEP1        =>  DLL_STEP,
            GATE_IN            =>  GATE_FROM_LOOP,
            DQS_DRIFT          =>  DQS_DRIFT,
            IFIFO_RADDR        =>  IFIFO_RADDR,
            IFIFO_WADDR        =>  IFIFO_WADDR,
            GATE_OUT           =>  GATE_TO_LOOP,
            DRIFT_DETECT_ERR   =>  DRIFT_DETECT_ERR,
            DQS_DRIFT_STATUS   =>  DQS_DRIFT_STATUS,
            RST_TRAINING_N     =>  RST_TRAINING_N
        );
};
