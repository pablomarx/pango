*****************************************************************

  Device    [DRM]

  Author    [yqtan]

  Abstract  [The Grid Device DRM]

  Revision History:

********************************************************************************/
//grid device started
grid
device DRM
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config bit CP_CSA_POL[2:0] = 3'b000,
        config bit CP_CSB_POL[2:0] = 3'b000,
        config string CP_CSA2_SET = "FALSE",
        config string CP_CSB2_SET = "FALSE",
        config bit CP_MASK[1:0] = 2'b00,
        config string CP_DRM_18K = "FALSE",
        config string CP_GRS_DIS_0 = "FALSE",
        config string CP_GRS_DIS_1 = "FALSE",
        config int CP_DATA_WIDTH_A_0 = 18,
        config int CP_DATA_WIDTH_B_0 = 18,
        config string CP_WRITE_MODE_A_0 = "NORMAL_WRITE",
        config string CP_WRITE_MODE_B_0 = "NORMAL_WRITE",
        config string CP_OUTPUT_REG_A_0 = "DISABLE",
        config string CP_OUTPUT_REG_B_0 = "DISABLE",
        config string CP_RESET_TYPE_0 = "SYNC_RESET",
        config string CP_CLKA_OR_POL_INV_0 = "FALSE",
        config string CP_CLKB_OR_POL_INV_0 = "FALSE",
        config int CP_DATA_WIDTH_A_1 = 18,
        config int CP_DATA_WIDTH_B_1 = 18,
        config string CP_WRITE_MODE_A_1 = "NORMAL_WRITE",
        config string CP_WRITE_MODE_B_1 = "NORMAL_WRITE",
        config string CP_OUTPUT_REG_A_1 = "DISABLE",
        config string CP_OUTPUT_REG_B_1 = "DISABLE",
        config string CP_RESET_TYPE_1 = "SYNC_RESET",
        config string CP_CLKA_OR_POL_INV_1 = "FALSE",
        config string CP_CLKB_OR_POL_INV_1 = "FALSE",
        config bit CP_INIT_00[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_01[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_02[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_03[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_04[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_05[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_06[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_07[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_08[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_09[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_0A[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_0B[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_0C[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_0D[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_0E[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_0F[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_10[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_11[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_12[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_13[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_14[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_15[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_16[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_17[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_18[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_19[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_1A[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_1B[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_1C[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_1D[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_1E[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_1F[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_20[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_21[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_22[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_23[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_24[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_25[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_26[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_27[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_28[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_29[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_2A[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_2B[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_2C[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_2D[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_2E[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_2F[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_30[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_31[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_32[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_33[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_34[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_35[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_36[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_37[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_38[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_39[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_3A[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_3B[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_3C[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_3D[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_3E[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config bit CP_INIT_3F[287:0] = 288'h000000000000000000000000000000000000000000000000000000000000000000000000,
        config string CP_DRM_EN_0 = "FALSE",
        config string CP_PICEA_0 = "FALSE",
        config string CP_PICEB_0 = "FALSE",
        config string CP_PIWEA_0 = "FALSE",
        config string CP_PIWEB_0 = "FALSE",
        config string CP_PIOCEA_0 = "FALSE",
        config string CP_PIOCEB_0 = "FALSE",
        config string CP_PICLKA_0 = "FALSE",
        config string CP_PICLKB_0 = "FALSE",
        config string CP_PIRSTA_0 = "FALSE",
        config string CP_PIRSTB_0 = "FALSE",
        config string CP_PIBELA_0 = "FALSE",
        config string CP_PIBELB_0 = "FALSE",
        config string CP_PIBEHA_0 = "FALSE",
        config string CP_PIBEHB_0 = "FALSE",
        config string CP_BELA_SET_0 = "FALSE",
        config string CP_BELB_SET_0 = "FALSE",
        config string CP_BEHA_SET_0 = "FALSE",
        config string CP_BEHB_SET_0 = "FALSE",
        config string CP_DRM_EN_1 = "FALSE",
        config string CP_PICEA_1 = "FALSE",
        config string CP_PICEB_1 = "FALSE",
        config string CP_PIWEA_1 = "FALSE",
        config string CP_PIWEB_1 = "FALSE",
        config string CP_PIOCEA_1 = "FALSE",
        config string CP_PIOCEB_1 = "FALSE",
        config string CP_PICLKA_1 = "FALSE",
        config string CP_PICLKB_1 = "FALSE",
        config string CP_PIRSTA_1 = "FALSE",
        config string CP_PIRSTB_1 = "FALSE",
        config string CP_PIBELA_1 = "FALSE",
        config string CP_PIBELB_1 = "FALSE",
        config string CP_PIBEHA_1 = "FALSE",
        config string CP_PIBEHB_1 = "FALSE",
        config string CP_BELA_SET_1 = "FALSE",
        config string CP_BELB_SET_1 = "FALSE",
        config string CP_BEHA_SET_1 = "FALSE",
        config string CP_BEHB_SET_1 = "FALSE",
        config string CP_FIFO_EN = "FALSE",
        config bit CP_ALMOST_FULL_OFFSET[13:0] = 14'b00000000000000,
        config bit CP_ALMOST_EMPTY_OFFSET[13:0] = 14'b00000000000000,
        config string CP_REWRITE_EN = "FALSE",
        config string CP_RESEND_EN = "FALSE",
        config string CP_SYNC_FIFO = "FALSE",
        config string CP_FLAGEMPTY_EN = "FALSE",
        config string CP_FLAGFULL_EN = "FALSE"
    );
    port
    (
// configuration_body_def_on


    config input SC_AF_OFFSET[13:0] = 14'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_AF_OFFSET[13],SC_AF_OFFSET[12],SC_AF_OFFSET[11],SC_AF_OFFSET[10],SC_AF_OFFSET[9],SC_AF_OFFSET[8],SC_AF_OFFSET[7],SC_AF_OFFSET[6],SC_AF_OFFSET[5],SC_AF_OFFSET[4],SC_AF_OFFSET[3],SC_AF_OFFSET[2],SC_AF_OFFSET[1],SC_AF_OFFSET[0]" */,

    config input SC_AE_OFFSET[13:0] = 14'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_AE_OFFSET[13],SC_AE_OFFSET[12],SC_AE_OFFSET[11],SC_AE_OFFSET[10],SC_AE_OFFSET[9],SC_AE_OFFSET[8],SC_AE_OFFSET[7],SC_AE_OFFSET[6],SC_AE_OFFSET[5],SC_AE_OFFSET[4],SC_AE_OFFSET[3],SC_AE_OFFSET[2],SC_AE_OFFSET[1],SC_AE_OFFSET[0]" */,

    config input SC_FIFO_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FIFO_EN" */,

    config input SC_REWRITE_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_REWRITE_EN" */,

    config input SC_RESEND_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RESEND_EN" */,

    config input SC_SYNC_FIFO = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SYNC_FIFO" */,

    config input SC_FLAGEMPTY_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FLAGEMPTY_EN" */,

    config input SC_FLAGFULL_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FLAGFULL_EN" */,

    config input SC_DRM_18K = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DRM_18K" */,

    config input SC_CSA2_SET = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CSA2_SET" */,

    config input SC_CSB2_SET = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CSB2_SET" */,

    config input SC_PICSA[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICSA[2],SC_PICSA[1],SC_PICSA[0]" */,

    config input SC_PICSB[2:0] = 3'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICSB[2],SC_PICSB[1],SC_PICSB[0]" */,

    config input SC_DRM_EN[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DRM_EN[1],SC_DRM_EN[0]" */,

    config input SC_OREA[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_OREA[1],SC_OREA[0]" */,

    config input SC_OREB[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_OREB[1],SC_OREB[0]" */,

    config input SC_CKQA_INV[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CKQA_INV[1],SC_CKQA_INV[0]" */,

    config input SC_CKQB_INV[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CKQB_INV[1],SC_CKQB_INV[0]" */,

    config input SC_PICEA[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICEA[1],SC_PICEA[0]" */,

    config input SC_PICEB[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICEB[1],SC_PICEB[0]" */,

    config input SC_PIWEA[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIWEA[1],SC_PIWEA[0]" */,

    config input SC_PIWEB[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIWEB[1],SC_PIWEB[0]" */,

    config input SC_PIOCEA[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIOCEA[1],SC_PIOCEA[0]" */,

    config input SC_PIOCEB[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIOCEB[1],SC_PIOCEB[0]" */,

    config input SC_PICLKA[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICLKA[1],SC_PICLKA[0]" */,

    config input SC_PICLKB[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICLKB[1],SC_PICLKB[0]" */,

    config input SC_PIRSTA[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIRSTA[1],SC_PIRSTA[0]" */,

    config input SC_PIRSTB[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIRSTB[1],SC_PIRSTB[0]" */,

    config input SC_PIBELA[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIBELA[1],SC_PIBELA[0]" */,

    config input SC_PIBELB[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIBELB[1],SC_PIBELB[0]" */,

    config input SC_PIBEHA[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIBEHA[1],SC_PIBEHA[0]" */,

    config input SC_PIBEHB[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIBEHB[1],SC_PIBEHB[0]" */,

    config input SC_BELA_SET[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_BELA_SET[1],SC_BELA_SET[0]" */,

    config input SC_BELB_SET[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_BELB_SET[1],SC_BELB_SET[0]" */,

    config input SC_BEHA_SET[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_BEHA_SET[1],SC_BEHA_SET[0]" */,

    config input SC_BEHB_SET[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_BEHB_SET[1],SC_BEHB_SET[0]" */,

    config input SC_DBLWA[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DBLWA[1],SC_DBLWA[0]" */,

    config input SC_DBLWB[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DBLWB[1],SC_DBLWB[0]" */,

    config input SC_TWA[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TWA[1],SC_TWA[0]" */,

    config input SC_RBWA[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RBWA[1],SC_RBWA[0]" */,

    config input SC_TWB[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_TWB[1],SC_TWB[0]" */,

    config input SC_RBWB[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RBWB[1],SC_RBWB[0]" */,

    config input SC_GRS_DIS[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GRS_DIS[1],SC_GRS_DIS[0]" */,

    config input SC_ASYNC[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ASYNC[1],SC_ASYNC[0]" */,

    config input SC_SYNC_DIS[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SYNC_DIS[1],SC_SYNC_DIS[0]" */,

    config input SC_DWA0[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DWA0[3],SC_DWA0[2],SC_DWA0[1],SC_DWA0[0]" */,

    config input SC_DWB0[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DWB0[3],SC_DWB0[2],SC_DWB0[1],SC_DWB0[0]" */,

    config input SC_DWA1[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DWA1[3],SC_DWA1[2],SC_DWA1[1],SC_DWA1[0]" */,

    config input SC_DWB1[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DWB1[3],SC_DWB1[2],SC_DWB1[1],SC_DWB1[0]" */,

    config input SC_SAE_DEL[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SAE_DEL[3],SC_SAE_DEL[2],SC_SAE_DEL[1],SC_SAE_DEL[0]" */,

    config input SC_SAE_PW[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SAE_PW[3],SC_SAE_PW[2],SC_SAE_PW[1],SC_SAE_PW[0]" */,

    config input SC_WR_PW[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_WR_PW[3],SC_WR_PW[2],SC_WR_PW[1],SC_WR_PW[0]" */,

    config input SC_RD_PW[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RD_PW[3],SC_RD_PW[2],SC_RD_PW[1],SC_RD_PW[0]" */,

    config input SC_MASK[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MASK[1],SC_MASK[0]" */,

// configuration_body_def_end

        input ADA0[12:0] = 13'b1111_1111_1111_1,
        input ADA1[12:0] = 13'b1111_1111_1111_1,
        input ADSA[1:0] = 2'b11,
        input DA0[17:0] = 18'b1111_1111_1111_1111_11,
        input DA1[17:0] = 18'b1111_1111_1111_1111_11,
        input CSA[2:0] = 3'b111,
        input WEA[1:0] = 2'b11,
        input CLKA[1:0] = 2'b11,
        input CEA[1:0] = 2'b11,
        input OCEA[1:0] = 2'b11,
        input RSTA[1:0] = 2'b11,
        input ADB0[12:0] = 13'b1111_1111_1111_1,
        input ADB1[12:0] = 13'b1111_1111_1111_1,
        input ADSB[1:0] = 2'b11,
        input DB0[17:0] = 18'b1111_1111_1111_1111_11,
        input DB1[17:0] = 18'b1111_1111_1111_1111_11,
        input CSB[2:0] = 3'b111,
        input WEB[1:0] = 2'b11,
        input CLKB[1:0] = 2'b11,
        input CEB[1:0] = 2'b11,
        input OCEB[1:0] = 2'b11,
        input RSTB[1:0] = 2'b11,
        input ADA_CAS = 1'b1,
        input ADB_CAS = 1'b1,
        input WR_ERR = 1'b1,
        input WR_EOP = 1'b1,
        input RD_NAK = 1'b1,
        output QA0[17:0],
        output QA1[17:0],
        output QB0[17:0],
        output QB1[17:0],
        output EMPTY,
        output FULL,
        output ALMOST_EMPTY,
        output ALMOST_FULL
    );
};
//grid device end


/*******************************************************************************

  Device    [DRM]

  Author    [yqtan]

  Abstract  [The structure netlist of DRM is described in the similar fashion 
             as in HDL. In unit instantiation statement, the formal pin may be 
             connected to net which is declared explicitly. 
             
             In Valence, the connection can also be made from formal pin to other 
             pin or port, in which case Valence compiler shall create the net to 
             fulfil the connection. The built-in naming convention is kicked in 
             to name the automatically created net. However, the objects (net, instance)
             of this netlist are going to mapped from schematic. The compiler-generated
             names cause trouble for the mapping. Therefore, all wires are declared
             explicitly in the following description]

  Revision History:

********************************************************************************/
//grid device structure netlist started

structure netlist of DRM
{
    device DRM_INST DRM9A ;
    device DRM_INST DRM9B ; 
       
}; // end of structure netlist of DRM
//grid device structure netlist end


floorplan
structure fp_struct of DRM
{
    device DRM_INST DRM9A;
    device DRM_INST DRM9B;          

}; // end of structure fp_struct of DRM

//grid device configure body started

configuration cfg of DRM
{

 // assign config body begin
    SC_SAE_DEL  :=  4'b0000;
    SC_SAE_PW   :=  4'b0000;
    SC_WR_PW    :=  4'b0000;
    SC_RD_PW    :=  4'b0000;
    SC_MASK   :=  CP_MASK;
    SC_PICSA  :=  CP_CSA_POL;
    SC_PICSB  :=  CP_CSB_POL;
    SC_AF_OFFSET  :=  CP_ALMOST_FULL_OFFSET;
    SC_AE_OFFSET  :=  CP_ALMOST_EMPTY_OFFSET;
// assign config body end

//initial config body0 begin
    if (CP_DRM_18K == "TRUE")
    {
        SC_DRM_18K  :=  1'b1;
    }
    else if (CP_DRM_18K == "FALSE")
    {
        SC_DRM_18K  :=  1'b0;
    }
    else
    {
        SC_DRM_18K  :=  1'bx;
        error("18K mode EN(%s) is invalid!",CP_DRM_18K);
    }

//initial config body0 end


//initial config body1 begin
    if (CP_FIFO_EN == "TRUE")
    {
        SC_FIFO_EN  :=  1'b1;
    }
    else if (CP_FIFO_EN == "FALSE")
    {
        SC_FIFO_EN  :=  1'b0;
    }
    else
    {
        SC_FIFO_EN  :=  1'bx;
        error("FIFO EN(%s) is invalid!",CP_FIFO_EN);
    }

//initial config body1 end


//initial config body2 begin
    if (CP_REWRITE_EN == "TRUE")
    {
        SC_REWRITE_EN  :=  1'b1;
    }
    else if (CP_REWRITE_EN == "FALSE")
    {
        SC_REWRITE_EN  :=  1'b0;
    }
    else
    {
        SC_REWRITE_EN  :=  1'bx;
        error("REWRITE EN(%s) is invalid!",CP_REWRITE_EN);
    }

//initial config body2 end


//initial config body3 begin
    if (CP_RESEND_EN == "TRUE")
    {
        SC_RESEND_EN  :=  1'b1;
    }
    else if (CP_RESEND_EN == "FALSE")
    {
        SC_RESEND_EN  :=  1'b0;
    }
    else
    {
        SC_RESEND_EN  :=  1'bx;
        error("RESEND EN(%s) is invalid!",CP_RESEND_EN);
    }

//initial config body3 end


//initial config body4 begin
    if (CP_FLAGEMPTY_EN == "TRUE")
    {
        SC_FLAGEMPTY_EN  :=  1'b1;
    }
    else if (CP_FLAGEMPTY_EN == "FALSE")
    {
        SC_FLAGEMPTY_EN  :=  1'b0;
    }
    else
    {
        SC_FLAGEMPTY_EN  :=  1'bx;
        error("FLAGEMPTY EN(%s) is invalid!",CP_FLAGEMPTY_EN);
    }

//initial config body4 end


//initial config body5 begin
    if (CP_FLAGFULL_EN == "TRUE")
    {
        SC_FLAGFULL_EN  :=  1'b1;
    }
    else if (CP_FLAGFULL_EN == "FALSE")
    {
        SC_FLAGFULL_EN  :=  1'b0;
    }
    else
    {
        SC_FLAGFULL_EN  :=  1'bx;
        error("FLAGFULL EN(%s) is invalid!",CP_FLAGFULL_EN);
    }

//initial config body5 end


//initial config body6 begin
    if (CP_SYNC_FIFO == "TRUE")
    {
        SC_SYNC_FIFO  :=  1'b1;
    }
    else if (CP_SYNC_FIFO == "FALSE")
    {
        SC_SYNC_FIFO  :=  1'b0;
    }
    else
    {
        SC_SYNC_FIFO  :=  1'bx;
        error("SYNC FIFO SETTING(%s) is invalid!",CP_SYNC_FIFO);
    }

//initial config body6 end


//initial config body7 begin
    if (CP_CSA2_SET == "TRUE")
    {
        SC_CSA2_SET  :=  1'b1;
    }
    else if (CP_CSA2_SET == "FALSE")
    {
        SC_CSA2_SET  :=  1'b0;
    }
    else
    {
        SC_CSA2_SET  :=  1'bx;
        error("CSA2_SET(%s) is invalid!",CP_CSA2_SET);
    }

//initial config body7 end


//initial config body8 begin
    if (CP_CSB2_SET == "TRUE")
    {
        SC_CSB2_SET  :=  1'b1;
    }
    else if (CP_CSB2_SET == "FALSE")
    {
        SC_CSB2_SET  :=  1'b0;
    }
    else
    {
        SC_CSB2_SET  :=  1'bx;
        error("CSB2_SET(%s) is invalid!",CP_CSB2_SET);
    }

//initial config body8 end


//initial config body9 begin
    if (CP_DATA_WIDTH_A_0 == 36 || CP_DATA_WIDTH_A_0 == 32)
    {
        SC_DBLWA[0]  :=  1'b1;
        SC_DWA0  :=  4'b0000;
    }
    else if (CP_DATA_WIDTH_A_0 == 18 || CP_DATA_WIDTH_A_0 == 16)
    {
        SC_DBLWA[0]  :=  1'b0;
        SC_DWA0  :=  4'b0000;
    }
    else if (CP_DATA_WIDTH_A_0 == 9 || CP_DATA_WIDTH_A_0 == 8)
    {
        SC_DBLWA[0]  :=  1'b0;
        SC_DWA0  :=  4'b1000;
    }
    else if (CP_DATA_WIDTH_A_0 == 4)
    {
        SC_DBLWA[0]  :=  1'b0;
        SC_DWA0  :=  4'b1100;
    }
    else if (CP_DATA_WIDTH_A_0 == 2)
    {
        SC_DBLWA[0]  :=  1'b0;
        SC_DWA0  :=  4'b1110;
    }
    else if (CP_DATA_WIDTH_A_0 == 1)
    {
        SC_DBLWA[0]  :=  1'b0;
        SC_DWA0  :=  4'b1111;
    }
    else
    {
        SC_DBLWA[0]  :=  1'b0;
        SC_DWA0  :=  4'b0000;
        error("DATA WIDTH(%s) is invalid!",CP_DATA_WIDTH_A_0);
    }

//initial config body9 end


//initial config body10 begin
    if (CP_DATA_WIDTH_B_0 == 36 || CP_DATA_WIDTH_B_0 == 32)
    {
        SC_DBLWB[0]  :=  1'b1;
        SC_DWB0  :=  4'b0000;
    }
    else if (CP_DATA_WIDTH_B_0 == 18 || CP_DATA_WIDTH_B_0 == 16)
    {
        SC_DBLWB[0]  :=  1'b0;
        SC_DWB0  :=  4'b0000;
    }
    else if (CP_DATA_WIDTH_B_0 == 9 || CP_DATA_WIDTH_B_0 == 8)
    {
        SC_DBLWB[0]  :=  1'b0;
        SC_DWB0  :=  4'b1000;
    }
    else if (CP_DATA_WIDTH_B_0 == 4)
    {
        SC_DBLWB[0]  :=  1'b0;
        SC_DWB0  :=  4'b1100;
    }
    else if (CP_DATA_WIDTH_B_0 == 2)
    {
        SC_DBLWB[0]  :=  1'b0;
        SC_DWB0  :=  4'b1110;
    }
    else if (CP_DATA_WIDTH_B_0 == 1)
    {
        SC_DBLWB[0]  :=  1'b0;
        SC_DWB0  :=  4'b1111;
    }
    else
    {
        error("DATA WIDTH(%d) is invalid!",CP_DATA_WIDTH_B_0);
    }

//initial config body10 end


//initial config body11 begin
    if (CP_WRITE_MODE_A_0 == "NORMAL_WRITE")
    {
        SC_TWA[0]  :=  1'b0;
        SC_RBWA[0]  :=  1'b0;
    }
    else if (CP_WRITE_MODE_A_0 == "TRANSPARENT_WRITE")
    {
        SC_TWA[0]  :=  1'b1;
        SC_RBWA[0]  :=  1'b0;
    }
    else if (CP_WRITE_MODE_A_0 == "READ_BEFORE_WRITE")
    {
        SC_TWA[0]  :=  1'b0;
        SC_RBWA[0]  :=  1'b1;
    }
    else
    {
        SC_TWA[0]  :=  1'b0;
        SC_RBWA[0]  :=  1'b0;
        error("WRITE MODE A(%s) is invalid!",CP_WRITE_MODE_A_0);
    }

//initial config body11 end


//initial config body12 begin
    if (CP_WRITE_MODE_B_0 == "NORMAL_WRITE")
    {
        SC_TWB[0]  :=  1'b0;
        SC_RBWB[0]  :=  1'b0;
    }
    else if (CP_WRITE_MODE_B_0 == "TRANSPARENT_WRITE")
    {
        SC_TWB[0]  :=  1'b1;
        SC_RBWB[0]  :=  1'b0;
    }
    else if (CP_WRITE_MODE_B_0 == "READ_BEFORE_WRITE")
    {
        SC_TWB[0]  :=  1'b0;
        SC_RBWB[0]  :=  1'b1;
    }
    else
    {
        SC_TWB[0]  :=  1'b0;
        SC_RBWB[0]  :=  1'b0;
        error("WRITE MODE B(%s) is invalid!",CP_WRITE_MODE_B_0);
    }

//initial config body12 end


//initial config body13 begin
    if (CP_OUTPUT_REG_A_0 == "ENABLE")
    {
        SC_OREA[0]  :=  1'b1;
    }
    else if (CP_OUTPUT_REG_A_0 == "DISABLE")
    {
        SC_OREA[0]  :=  1'b0;
    }
    else
    {
        SC_OREA[0]  :=  1'bx;
        error("OUTPUT REG(%s) is invalid!",CP_OUTPUT_REG_A_0);
    }

//initial config body13 end


//initial config body14 begin
    if (CP_OUTPUT_REG_B_0 == "ENABLE")
    {
        SC_OREB[0]  :=  1'b1;
    }
    else if (CP_OUTPUT_REG_B_0 == "DISABLE")
    {
        SC_OREB[0]  :=  1'b0;
    }
    else
    {
        SC_OREB[0]  :=  1'bx;
        error("OUTPUT REG(%s) is invalid!",CP_OUTPUT_REG_B_0);
    }

//initial config body14 end


//initial config body15 begin
    if (CP_RESET_TYPE_0 == "ASYNC_RESET")
    {
        SC_ASYNC[0]  :=  1'b1;
        SC_SYNC_DIS[0]  :=  1'b1;
    }
    else if (CP_RESET_TYPE_0 == "ASYNC_RESET_SYNC_RELEASE")
    {
        SC_ASYNC[0]  :=  1'b1;
        SC_SYNC_DIS[0]  :=  1'b0;
    }
    else if (CP_RESET_TYPE_0 == "SYNC_RESET")
    {
        SC_ASYNC[0]  :=  1'b0;
        SC_SYNC_DIS[0]  :=  1'b0;
    }
    else
    {
        SC_ASYNC[0]  :=  1'b0;
        SC_SYNC_DIS[0]  :=  1'b0;
        error("RESET TYPE(%s) is invalid!",CP_RESET_TYPE_0);
    }

//initial config body15 end


//initial config body16 begin
    if (CP_CLKA_OR_POL_INV_0 == "TRUE")
    {
        SC_CKQA_INV[0]  :=  1'b1;
    }
    else if (CP_CLKA_OR_POL_INV_0 == "FALSE")
    {
        SC_CKQA_INV[0]  :=  1'b0;
    }
    else
    {
        SC_CKQA_INV[0]  :=  1'bx;
        error("CLKA OR POL INV(%s) is invalid!",CP_CLKA_OR_POL_INV_0);
    }

//initial config body16 end


//initial config body17 begin
    if (CP_CLKB_OR_POL_INV_0 == "TRUE")
    {
        SC_CKQB_INV[0]  :=  1'b1;
    }
    else if (CP_CLKB_OR_POL_INV_0 == "FALSE")
    {
        SC_CKQB_INV[0]  :=  1'b0;
    }
    else
    {
        SC_CKQB_INV[0]  :=  1'bx;
        error("CLKB OR POL INV(%s) is invalid!",CP_CLKB_OR_POL_INV_0);
    }

//initial config body17 end


//initial config body18 begin
    if (CP_DRM_EN_0 == "TRUE")
    {
        SC_DRM_EN[0]  :=  1'b1;
    }
    else if (CP_DRM_EN_0 == "FALSE")
    {
        SC_DRM_EN[0]  :=  1'b0;
    }
    else
    {
        SC_DRM_EN[0]  :=  1'bx;
        error("DRM_EN(%s) is invalid!",CP_DRM_EN_0);
    }

//initial config body18 end


//initial config body19 begin
    if (CP_PICEA_0 == "TRUE")
    {
        SC_PICEA[0]  :=  1'b1;
    }
    else if (CP_PICEA_0 == "FALSE")
    {
        SC_PICEA[0]  :=  1'b0;
    }
    else
    {
        SC_PICEA[0]  :=  1'bx;
        error("PICEA(%s) is invalid!",CP_PICEA_0);
    }

//initial config body19 end


//initial config body20 begin
    if (CP_PICEB_0 == "TRUE")
    {
        SC_PICEB[0]  :=  1'b1;
    }
    else if (CP_PICEB_0 == "FALSE")
    {
        SC_PICEB[0]  :=  1'b0;
    }
    else
    {
        SC_PICEB[0]  :=  1'bx;
        error("PICEB(%s) is invalid!",CP_PICEB_0);
    }

//initial config body20 end


//initial config body21 begin
    if (CP_PIWEA_0 == "TRUE")
    {
        SC_PIWEA[0]  :=  1'b1;
    }
    else if (CP_PIWEA_0 == "FALSE")
    {
        SC_PIWEA[0]  :=  1'b0;
    }
    else
    {
        SC_PIWEA[0]  :=  1'bx;
        error("PIWEA(%s) is invalid!",CP_PIWEA_0);
    }

//initial config body21 end


//initial config body22 begin
    if (CP_PIWEB_0 == "TRUE")
    {
        SC_PIWEB[0]  :=  1'b1;
    }
    else if (CP_PIWEB_0 == "FALSE")
    {
        SC_PIWEB[0]  :=  1'b0;
    }
    else
    {
        SC_PIWEB[0]  :=  1'bx;
        error("PIWEB(%s) is invalid!",CP_PIWEB_0);
    }

//initial config body22 end


//initial config body23 begin
    if (CP_PIOCEA_0 == "TRUE")
    {
        SC_PIOCEA[0]  :=  1'b1;
    }
    else if (CP_PIOCEA_0 == "FALSE")
    {
        SC_PIOCEA[0]  :=  1'b0;
    }
    else
    {
        SC_PIOCEA[0]  :=  1'bx;
        error("PIOCEA(%s) is invalid!",CP_PIOCEA_0);
    }

//initial config body23 end


//initial config body24 begin
    if (CP_PIOCEB_0 == "TRUE")
    {
        SC_PIOCEB[0]  :=  1'b1;
    }
    else if (CP_PIOCEB_0 == "FALSE")
    {
        SC_PIOCEB[0]  :=  1'b0;
    }
    else
    {
        SC_PIOCEB[0]  :=  1'bx;
        error("PIOCEB(%s) is invalid!",CP_PIOCEB_0);
    }

//initial config body24 end


//initial config body25 begin
    if (CP_PICLKA_0 == "TRUE")
    {
        SC_PICLKA[0]  :=  1'b1;
    }
    else if (CP_PICLKA_0 == "FALSE")
    {
        SC_PICLKA[0]  :=  1'b0;
    }
    else
    {
        SC_PICLKA[0]  :=  1'bx;
        error("PICLKA(%s) is invalid!",CP_PICLKA_0);
    }

//initial config body25 end


//initial config body26 begin
    if (CP_PICLKB_0 == "TRUE")
    {
        SC_PICLKB[0]  :=  1'b1;
    }
    else if (CP_PICLKB_0 == "FALSE")
    {
        SC_PICLKB[0]  :=  1'b0;
    }
    else
    {
        SC_PICLKB[0]  :=  1'bx;
        error("PICLKB(%s) is invalid!",CP_PICLKB_0);
    }

//initial config body26 end


//initial config body27 begin
    if (CP_PIRSTA_0 == "TRUE")
    {
        SC_PIRSTA[0]  :=  1'b1;
    }
    else if (CP_PIRSTA_0 == "FALSE")
    {
        SC_PIRSTA[0]  :=  1'b0;
    }
    else
    {
        SC_PIRSTA[0]  :=  1'bx;
        error("PIRSTA(%s) is invalid!",CP_PIRSTA_0);
    }

//initial config body27 end


//initial config body28 begin
    if (CP_PIRSTB_0 == "TRUE")
    {
        SC_PIRSTB[0]  :=  1'b1;
    }
    else if (CP_PIRSTB_0 == "FALSE")
    {
        SC_PIRSTB[0]  :=  1'b0;
    }
    else
    {
        SC_PIRSTB[0]  :=  1'bx;
        error("PIRSTB(%s) is invalid!",CP_PIRSTB_0);
    }

//initial config body28 end


//initial config body29 begin
    if (CP_PIBELA_0 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_0<16)
        {
            error("PIBELA(%s) is invalid!",CP_PIBELA_0);
        }
        else
        {
            SC_PIBELA[0]  :=  1'b1;
        }

    }
    else if (CP_PIBELA_0 == "FALSE")
    {
        SC_PIBELA[0]  :=  1'b0;
    }
    else
    {
        SC_PIBELA[0]  :=  1'bx;
        error("PIBELA(%s) is invalid!",CP_PIBELA_0);
    }

//initial config body29 end


//initial config body30 begin
    if (CP_PIBELB_0 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_0<32)
        {
            if(CP_DATA_WIDTH_B_0<16)
            {
                error("PIBELB(%s) is invalid!",CP_PIBELB_0);
            }
            else
            {
                SC_PIBELB[0]  :=  1'b1;
            }

        }
        else
        {
            SC_PIBELB[0]  :=  1'b1;
        }

    }
    else if (CP_PIBELB_0 == "FALSE")
    {
        SC_PIBELB[0]  :=  1'b0;
    }
    else
    {
        SC_PIBELB[0]  :=  1'bx;
        error("PIBELB(%s) is invalid!",CP_PIBELB_0);
    }

//initial config body30 end


//initial config body31 begin
    if (CP_PIBEHA_0 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_0<16)
        {
            error("PIBEHA(%s) is invalid!",CP_PIBEHA_0);
        }
        else
        {
            SC_PIBEHA[0]  :=  1'b1;
        }

    }
    else if (CP_PIBEHA_0 == "FALSE")
    {
        SC_PIBEHA[0]  :=  1'b0;
    }
    else
    {
        SC_PIBEHA[0]  :=  1'bx;
        error("PIBEHA(%s) is invalid!",CP_PIBEHA_0);
    }

//initial config body31 end


//initial config body32 begin
    if (CP_PIBEHB_0 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_0<32)
        {
            if(CP_DATA_WIDTH_B_0<16)
            {
                error("PIBEHB(%s) is invalid!",CP_PIBEHB_0);
            }
            else
            {
                SC_PIBEHB[0]  :=  1'b1;
            }

        }
        else
        {
            SC_PIBEHB[0]  :=  1'b1;
        }

    }
    else if (CP_PIBEHB_0 == "FALSE")
    {
        SC_PIBEHB[0]  :=  1'b0;
    }
    else
    {
        SC_PIBEHB[0]  :=  1'bx;
        error("PIBEHB(%s) is invalid!",CP_PIBEHB_0);
    }

//initial config body32 end


//initial config body33 begin
    if (CP_BEHA_SET_0 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_0<16)
        {
            error("BEHA_SET(%s) is invalid!",CP_BEHA_SET_0);
        }
        else
        {
            SC_BEHA_SET[0]  :=  1'b1;
        }

    }
    else if (CP_BEHA_SET_0 == "FALSE")
    {
        SC_BEHA_SET[0]  :=  1'b0;
    }
    else
    {
        SC_BEHA_SET[0]  :=  1'bx;
        error("BEHA_SET(%s) is invalid!",CP_BEHA_SET_0);
    }

//initial config body33 end


//initial config body34 begin
    if (CP_BEHB_SET_0 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_0<32)
        {
            if(CP_DATA_WIDTH_B_0<16)
            {
                error("BEHB_SET(%s) is invalid!",CP_BEHB_SET_0);
            }
            else
            {
                SC_BEHB_SET[0]  :=  1'b1;
            }

        }
        else
        {
            SC_BEHB_SET[0]  :=  1'b1;
        }

    }
    else if (CP_BEHB_SET_0 == "FALSE")
    {
        SC_BEHB_SET[0]  :=  1'b0;
    }
    else
    {
        SC_BEHB_SET[0]  :=  1'bx;
        error("BEHB_SET(%s) is invalid!",CP_BEHB_SET_0);
    }

//initial config body34 end


//initial config body35 begin
    if (CP_BELA_SET_0 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_0<16)
        {
            error("BELA_SET(%s) is invalid!",CP_BELA_SET_0);
        }
        else
        {
            SC_BELA_SET[0]  :=  1'b1;
        }

    }
    else if (CP_BELA_SET_0 == "FALSE")
    {
        SC_BELA_SET[0]  :=  1'b0;
    }
    else
    {
        SC_BELA_SET[0]  :=  1'bx;
        error("BELA_SET(%s) is invalid!",CP_BELA_SET_0);
    }

//initial config body35 end


//initial config body36 begin
    if (CP_BELB_SET_0 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_0<32)
        {
            if(CP_DATA_WIDTH_B_0<16)
            {
                error("BELB_SET(%s) is invalid!",CP_BELB_SET_0);
            }
            else
            {
                SC_BELB_SET[0]  :=  1'b1;
            }

        }
        else
        {
            SC_BELB_SET[0]  :=  1'b1;
        }

    }
    else if (CP_BELB_SET_0 == "FALSE")
    {
        SC_BELB_SET[0]  :=  1'b0;
    }
    else
    {
        SC_BELB_SET[0]  :=  1'bx;
        error("BELB_SET(%s) is invalid!",CP_BELB_SET_0);
    }

//initial config body36 end


//initial config body37 begin
    if (CP_GRS_DIS_0 == "TRUE")
    {
        SC_GRS_DIS[0]  :=  1'b1;
    }
    else if (CP_GRS_DIS_0 == "FALSE")
    {
        SC_GRS_DIS[0]  :=  1'b0;
    }
    else
    {
        SC_GRS_DIS[0]  :=  1'bx;
        error("GRS_DIS(%s) is invalid!",CP_GRS_DIS_0);
    }

//initial config body37 end


//initial config body38 begin
    if (CP_DATA_WIDTH_A_1 == 36 || CP_DATA_WIDTH_A_1 == 32)
    {
        SC_DBLWA[1]  :=  1'b1;
        SC_DWA1  :=  4'b0000;
    }
    else if (CP_DATA_WIDTH_A_1 == 18 || CP_DATA_WIDTH_A_1 == 16)
    {
        SC_DBLWA[1]  :=  1'b0;
        SC_DWA1  :=  4'b0000;
    }
    else if (CP_DATA_WIDTH_A_1 == 9 || CP_DATA_WIDTH_A_1 == 8)
    {
        SC_DBLWA[1]  :=  1'b0;
        SC_DWA1  :=  4'b1000;
    }
    else if (CP_DATA_WIDTH_A_1 == 4)
    {
        SC_DBLWA[1]  :=  1'b0;
        SC_DWA1  :=  4'b1100;
    }
    else if (CP_DATA_WIDTH_A_1 == 2)
    {
        SC_DBLWA[1]  :=  1'b0;
        SC_DWA1  :=  4'b1110;
    }
    else if (CP_DATA_WIDTH_A_1 == 1)
    {
        SC_DBLWA[1]  :=  1'b0;
        SC_DWA1  :=  4'b1111;
    }
    else
    {
        SC_DBLWA[1]  :=  1'b0;
        SC_DWA1  :=  4'b0000;
        error("DATA WIDTH(%s) is invalid!",CP_DATA_WIDTH_A_1);
    }

//initial config body38 end


//initial config body39 begin
    if (CP_DATA_WIDTH_B_1 == 36 || CP_DATA_WIDTH_B_1 == 32)
    {
        SC_DBLWB[1]  :=  1'b1;
        SC_DWB1  :=  4'b0000;
    }
    else if (CP_DATA_WIDTH_B_1 == 18 || CP_DATA_WIDTH_B_1 == 16)
    {
        SC_DBLWB[1]  :=  1'b0;
        SC_DWB1  :=  4'b0000;
    }
    else if (CP_DATA_WIDTH_B_1 == 9 || CP_DATA_WIDTH_B_1 == 8)
    {
        SC_DBLWB[1]  :=  1'b0;
        SC_DWB1  :=  4'b1000;
    }
    else if (CP_DATA_WIDTH_B_1 == 4)
    {
        SC_DBLWB[1]  :=  1'b0;
        SC_DWB1  :=  4'b1100;
    }
    else if (CP_DATA_WIDTH_B_1 == 2)
    {
        SC_DBLWB[1]  :=  1'b0;
        SC_DWB1  :=  4'b1110;
    }
    else if (CP_DATA_WIDTH_B_1 == 1)
    {
        SC_DBLWB[1]  :=  1'b0;
        SC_DWB1  :=  4'b1111;
    }
    else
    {
        error("DATA WIDTH(%d) is invalid!",CP_DATA_WIDTH_B_1);
    }

//initial config body39 end


//initial config body40 begin
    if (CP_WRITE_MODE_A_1 == "NORMAL_WRITE")
    {
        SC_TWA[1]  :=  1'b0;
        SC_RBWA[1]  :=  1'b0;
    }
    else if (CP_WRITE_MODE_A_1 == "TRANSPARENT_WRITE")
    {
        SC_TWA[1]  :=  1'b1;
        SC_RBWA[1]  :=  1'b0;
    }
    else if (CP_WRITE_MODE_A_1 == "READ_BEFORE_WRITE")
    {
        SC_TWA[1]  :=  1'b0;
        SC_RBWA[1]  :=  1'b1;
    }
    else
    {
        SC_TWA[1]  :=  1'b0;
        SC_RBWA[1]  :=  1'b0;
        error("WRITE MODE A(%s) is invalid!",CP_WRITE_MODE_A_1);
    }

//initial config body40 end


//initial config body41 begin
    if (CP_WRITE_MODE_B_1 == "NORMAL_WRITE")
    {
        SC_TWB[1]  :=  1'b0;
        SC_RBWB[1]  :=  1'b0;
    }
    else if (CP_WRITE_MODE_B_1 == "TRANSPARENT_WRITE")
    {
        SC_TWB[1]  :=  1'b1;
        SC_RBWB[1]  :=  1'b0;
    }
    else if (CP_WRITE_MODE_B_1 == "READ_BEFORE_WRITE")
    {
        SC_TWB[1]  :=  1'b0;
        SC_RBWB[1]  :=  1'b1;
    }
    else
    {
        SC_TWB[1]  :=  1'b0;
        SC_RBWB[1]  :=  1'b0;
        error("WRITE MODE B(%s) is invalid!",CP_WRITE_MODE_B_1);
    }

//initial config body41 end


//initial config body42 begin
    if (CP_OUTPUT_REG_A_1 == "ENABLE")
    {
        SC_OREA[1]  :=  1'b1;
    }
    else if (CP_OUTPUT_REG_A_1 == "DISABLE")
    {
        SC_OREA[1]  :=  1'b0;
    }
    else
    {
        SC_OREA[1]  :=  1'bx;
        error("OUTPUT REG(%s) is invalid!",CP_OUTPUT_REG_A_1);
    }

//initial config body42 end


//initial config body43 begin
    if (CP_OUTPUT_REG_B_1 == "ENABLE")
    {
        SC_OREB[1]  :=  1'b1;
    }
    else if (CP_OUTPUT_REG_B_1 == "DISABLE")
    {
        SC_OREB[1]  :=  1'b0;
    }
    else
    {
        SC_OREB[1]  :=  1'bx;
        error("OUTPUT REG(%s) is invalid!",CP_OUTPUT_REG_B_1);
    }

//initial config body43 end


//initial config body44 begin
    if (CP_RESET_TYPE_1 == "ASYNC_RESET")
    {
        SC_ASYNC[1]  :=  1'b1;
        SC_SYNC_DIS[1]  :=  1'b1;
    }
    else if (CP_RESET_TYPE_1 == "ASYNC_RESET_SYNC_RELEASE")
    {
        SC_ASYNC[1]  :=  1'b1;
        SC_SYNC_DIS[1]  :=  1'b0;
    }
    else if (CP_RESET_TYPE_1 == "SYNC_RESET")
    {
        SC_ASYNC[1]  :=  1'b0;
        SC_SYNC_DIS[1]  :=  1'b0;
    }
    else
    {
        SC_ASYNC[1]  :=  1'b0;
        SC_SYNC_DIS[1]  :=  1'b0;
        error("RESET TYPE(%s) is invalid!",CP_RESET_TYPE_1);
    }

//initial config body44 end


//initial config body45 begin
    if (CP_CLKA_OR_POL_INV_1 == "TRUE")
    {
        SC_CKQA_INV[1]  :=  1'b1;
    }
    else if (CP_CLKA_OR_POL_INV_1 == "FALSE")
    {
        SC_CKQA_INV[1]  :=  1'b0;
    }
    else
    {
        SC_CKQA_INV[1]  :=  1'bx;
        error("CLKA OR POL INV(%s) is invalid!",CP_CLKA_OR_POL_INV_1);
    }

//initial config body45 end


//initial config body46 begin
    if (CP_CLKB_OR_POL_INV_1 == "TRUE")
    {
        SC_CKQB_INV[1]  :=  1'b1;
    }
    else if (CP_CLKB_OR_POL_INV_1 == "FALSE")
    {
        SC_CKQB_INV[1]  :=  1'b0;
    }
    else
    {
        SC_CKQB_INV[1]  :=  1'bx;
        error("CLKB OR POL INV(%s) is invalid!",CP_CLKB_OR_POL_INV_1);
    }

//initial config body46 end


//initial config body47 begin
    if (CP_DRM_EN_1 == "TRUE")
    {
        SC_DRM_EN[1]  :=  1'b1;
    }
    else if (CP_DRM_EN_1 == "FALSE")
    {
        SC_DRM_EN[1]  :=  1'b0;
    }
    else
    {
        SC_DRM_EN[1]  :=  1'bx;
        error("DRM_EN(%s) is invalid!",CP_DRM_EN_1);
    }

//initial config body47 end


//initial config body48 begin
    if (CP_PICEA_1 == "TRUE")
    {
        SC_PICEA[1]  :=  1'b1;
    }
    else if (CP_PICEA_1 == "FALSE")
    {
        SC_PICEA[1]  :=  1'b0;
    }
    else
    {
        SC_PICEA[1]  :=  1'bx;
        error("PICEA(%s) is invalid!",CP_PICEA_1);
    }

//initial config body48 end


//initial config body49 begin
    if (CP_PICEB_1 == "TRUE")
    {
        SC_PICEB[1]  :=  1'b1;
    }
    else if (CP_PICEB_1 == "FALSE")
    {
        SC_PICEB[1]  :=  1'b0;
    }
    else
    {
        SC_PICEB[1]  :=  1'bx;
        error("PICEB(%s) is invalid!",CP_PICEB_1);
    }

//initial config body49 end


//initial config body50 begin
    if (CP_PIWEA_1 == "TRUE")
    {
        SC_PIWEA[1]  :=  1'b1;
    }
    else if (CP_PIWEA_1 == "FALSE")
    {
        SC_PIWEA[1]  :=  1'b0;
    }
    else
    {
        SC_PIWEA[1]  :=  1'bx;
        error("PIWEA(%s) is invalid!",CP_PIWEA_1);
    }

//initial config body50 end


//initial config body51 begin
    if (CP_PIWEB_1 == "TRUE")
    {
        SC_PIWEB[1]  :=  1'b1;
    }
    else if (CP_PIWEB_1 == "FALSE")
    {
        SC_PIWEB[1]  :=  1'b0;
    }
    else
    {
        SC_PIWEB[1]  :=  1'bx;
        error("PIWEB(%s) is invalid!",CP_PIWEB_1);
    }

//initial config body51 end


//initial config body52 begin
    if (CP_PIOCEA_1 == "TRUE")
    {
        SC_PIOCEA[1]  :=  1'b1;
    }
    else if (CP_PIOCEA_1 == "FALSE")
    {
        SC_PIOCEA[1]  :=  1'b0;
    }
    else
    {
        SC_PIOCEA[1]  :=  1'bx;
        error("PIOCEA(%s) is invalid!",CP_PIOCEA_1);
    }

//initial config body52 end


//initial config body53 begin
    if (CP_PIOCEB_1 == "TRUE")
    {
        SC_PIOCEB[1]  :=  1'b1;
    }
    else if (CP_PIOCEB_1 == "FALSE")
    {
        SC_PIOCEB[1]  :=  1'b0;
    }
    else
    {
        SC_PIOCEB[1]  :=  1'bx;
        error("PIOCEB(%s) is invalid!",CP_PIOCEB_1);
    }

//initial config body53 end


//initial config body54 begin
    if (CP_PICLKA_1 == "TRUE")
    {
        SC_PICLKA[1]  :=  1'b1;
    }
    else if (CP_PICLKA_1 == "FALSE")
    {
        SC_PICLKA[1]  :=  1'b0;
    }
    else
    {
        SC_PICLKA[1]  :=  1'bx;
        error("PICLKA(%s) is invalid!",CP_PICLKA_1);
    }

//initial config body54 end


//initial config body55 begin
    if (CP_PICLKB_1 == "TRUE")
    {
        SC_PICLKB[1]  :=  1'b1;
    }
    else if (CP_PICLKB_1 == "FALSE")
    {
        SC_PICLKB[1]  :=  1'b0;
    }
    else
    {
        SC_PICLKB[1]  :=  1'bx;
        error("PICLKB(%s) is invalid!",CP_PICLKB_1);
    }

//initial config body55 end


//initial config body56 begin
    if (CP_PIRSTA_1 == "TRUE")
    {
        SC_PIRSTA[1]  :=  1'b1;
    }
    else if (CP_PIRSTA_1 == "FALSE")
    {
        SC_PIRSTA[1]  :=  1'b0;
    }
    else
    {
        SC_PIRSTA[1]  :=  1'bx;
        error("PIRSTA(%s) is invalid!",CP_PIRSTA_1);
    }

//initial config body56 end


//initial config body57 begin
    if (CP_PIRSTB_1 == "TRUE")
    {
        SC_PIRSTB[1]  :=  1'b1;
    }
    else if (CP_PIRSTB_1 == "FALSE")
    {
        SC_PIRSTB[1]  :=  1'b0;
    }
    else
    {
        SC_PIRSTB[1]  :=  1'bx;
        error("PIRSTB(%s) is invalid!",CP_PIRSTB_1);
    }

//initial config body57 end


//initial config body58 begin
    if (CP_PIBELA_1 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_1<16)
        {
            error("PIBELA(%s) is invalid!",CP_PIBELA_1);
        }
        else
        {
            SC_PIBELA[1]  :=  1'b1;
        }

    }
    else if (CP_PIBELA_1 == "FALSE")
    {
        SC_PIBELA[1]  :=  1'b0;
    }
    else
    {
        SC_PIBELA[1]  :=  1'bx;
        error("PIBELA(%s) is invalid!",CP_PIBELA_1);
    }

//initial config body58 end


//initial config body59 begin
    if (CP_PIBELB_1 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_1<32)
        {
            if(CP_DATA_WIDTH_B_1<16)
            {
                error("PIBELB(%s) is invalid!",CP_PIBELB_1);
            }
            else
            {
                SC_PIBELB[1]  :=  1'b1;
            }

        }
        else
        {
            SC_PIBELB[1]  :=  1'b1;
        }

    }
    else if (CP_PIBELB_1 == "FALSE")
    {
        SC_PIBELB[1]  :=  1'b0;
    }
    else
    {
        SC_PIBELB[1]  :=  1'bx;
        error("PIBELB(%s) is invalid!",CP_PIBELB_1);
    }

//initial config body59 end


//initial config body60 begin
    if (CP_PIBEHA_1 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_1<16)
        {
            error("PIBEHA(%s) is invalid!",CP_PIBEHA_1);
        }
        else
        {
            SC_PIBEHA[1]  :=  1'b1;
        }

    }
    else if (CP_PIBEHA_1 == "FALSE")
    {
        SC_PIBEHA[1]  :=  1'b0;
    }
    else
    {
        SC_PIBEHA[1]  :=  1'bx;
        error("PIBEHA(%s) is invalid!",CP_PIBEHA_1);
    }

//initial config body60 end


//initial config body61 begin
    if (CP_PIBEHB_1 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_1<32)
        {
            if(CP_DATA_WIDTH_B_1<16)
            {
                error("PIBEHB(%s) is invalid!",CP_PIBEHB_1);
            }
            else
            {
                SC_PIBEHB[1]  :=  1'b1;
            }

        }
        else
        {
            SC_PIBEHB[1]  :=  1'b1;
        }

    }
    else if (CP_PIBEHB_1 == "FALSE")
    {
        SC_PIBEHB[1]  :=  1'b0;
    }
    else
    {
        SC_PIBEHB[1]  :=  1'bx;
        error("PIBEHB(%s) is invalid!",CP_PIBEHB_1);
    }

//initial config body61 end


//initial config body62 begin
    if (CP_BEHA_SET_1 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_1<16)
        {
            error("BEHA_SET(%s) is invalid!",CP_BEHA_SET_1);
        }
        else
        {
            SC_BEHA_SET[1]  :=  1'b1;
        }

    }
    else if (CP_BEHA_SET_1 == "FALSE")
    {
        SC_BEHA_SET[1]  :=  1'b0;
    }
    else
    {
        SC_BEHA_SET[1]  :=  1'bx;
        error("BEHA_SET(%s) is invalid!",CP_BEHA_SET_1);
    }

//initial config body62 end


//initial config body63 begin
    if (CP_BEHB_SET_1 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_1<32)
        {
            if(CP_DATA_WIDTH_B_1<16)
            {
                error("BEHB_SET(%s) is invalid!",CP_BEHB_SET_1);
            }
            else
            {
                SC_BEHB_SET[1]  :=  1'b1;
            }

        }
        else
        {
            SC_BEHB_SET[1]  :=  1'b1;
        }

    }
    else if (CP_BEHB_SET_1 == "FALSE")
    {
        SC_BEHB_SET[1]  :=  1'b0;
    }
    else
    {
        SC_BEHB_SET[1]  :=  1'bx;
        error("BEHB_SET(%s) is invalid!",CP_BEHB_SET_1);
    }

//initial config body63 end


//initial config body64 begin
    if (CP_BELA_SET_1 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_1<16)
        {
            error("BELA_SET(%s) is invalid!",CP_BELA_SET_1);
        }
        else
        {
            SC_BELA_SET[1]  :=  1'b1;
        }

    }
    else if (CP_BELA_SET_1 == "FALSE")
    {
        SC_BELA_SET[1]  :=  1'b0;
    }
    else
    {
        SC_BELA_SET[1]  :=  1'bx;
        error("BELA_SET(%s) is invalid!",CP_BELA_SET_1);
    }

//initial config body64 end


//initial config body65 begin
    if (CP_BELB_SET_1 == "TRUE")
    {
        if(CP_DATA_WIDTH_A_1<32)
        {
            if(CP_DATA_WIDTH_B_1<16)
            {
                error("BELB_SET(%s) is invalid!",CP_BELB_SET_1);
            }
            else
            {
                SC_BELB_SET[1]  :=  1'b1;
            }

        }
        else
        {
            SC_BELB_SET[1]  :=  1'b1;
        }

    }
    else if (CP_BELB_SET_1 == "FALSE")
    {
        SC_BELB_SET[1]  :=  1'b0;
    }
    else
    {
        SC_BELB_SET[1]  :=  1'bx;
        error("BELB_SET(%s) is invalid!",CP_BELB_SET_1);
    }

//initial config body65 end


//initial config body66 begin
    if (CP_GRS_DIS_1 == "TRUE")
    {
        SC_GRS_DIS[1]  :=  1'b1;
    }
    else if (CP_GRS_DIS_1 == "FALSE")
    {
        SC_GRS_DIS[1]  :=  1'b0;
    }
    else
    {
        SC_GRS_DIS[1]  :=  1'bx;
        error("GRS_DIS(%s) is invalid!",CP_GRS_DIS_1);
    }

//initial config body66 end

};

//grid device configure body end

timing  drm_tnl of DRM  
{
    wire ntCLKA_0, ntCLKA_1, ntCLKB_0, ntCLKB_1;
    wire ntWEA_0, ntWEA_1, ntWEB_0, ntWEB_1;
    wire ntCEA_0, ntCEA_1, ntCEB_0, ntCEB_1;
    wire ntOCEA_0, ntOCEA_1, ntOCEB_0, ntOCEB_1;
    wire ntRSTA_0, ntRSTA_1, ntRSTB_0, ntRSTB_1;

    // CLK
    if (CP_PICLKA_0 == "TRUE")
    {
        operator V_INV V_CLKA_0_INV
            port map 
            (
                 I => CLKA[0],
                 Z => ntCLKA_0
            );
    }
    if (CP_PICLKA_1 == "TRUE")
    {
        operator V_INV V_CLKA_1_INV
            port map 
            (
                 I => CLKA[1],
                 Z => ntCLKA_1
            );
    }
    if (CP_PICLKB_0 == "TRUE")
    {
        operator V_INV V_CLKB_0_INV
            port map 
            (
                 I => CLKB[0],
                 Z => ntCLKB_0
            );
    }
    if (CP_PICLKB_1 == "TRUE")
    {
        operator V_INV V_CLKB_1_INV
            port map 
            (
                 I => CLKB[1],
                 Z => ntCLKB_1
            );
    }
    // END OF CLK

    // WE
    if (CP_PIWEA_0 == "TRUE")
    {
        operator V_INV V_WEA_0_INV
            port map 
            (
                 I => WEA[0],
                 Z => ntWEA_0
            );
    }
    if (CP_PIWEA_1 == "TRUE")
    {
        operator V_INV V_WEA_1_INV
            port map 
            (
                 I => WEA[1],
                 Z => ntWEA_1
            );
    }
    if (CP_PIWEB_0 == "TRUE")
    {
        operator V_INV V_WEB_0_INV
            port map 
            (
                 I => WEB[0],
                 Z => ntWEB_0
            );
    }
    if (CP_PIWEB_1 == "TRUE")
    {
        operator V_INV V_WEB_1_INV
            port map 
            (
                 I => WEB[1],
                 Z => ntWEB_1
            );
    }
    // END OF WE

    // CE
    if (CP_PICEA_0  == "TRUE")
    {
        operator V_INV V_CEA_0_INV
            port map 
            (
                 I => CEA[0],
                 Z => ntCEA_0
            );
    }
    if (CP_PICEA_1  == "TRUE")
    {
        operator V_INV V_CEA_1_INV
            port map 
            (
                 I => CEA[1],
                 Z => ntCEA_1
            );
    }
    if (CP_PICEB_0  == "TRUE")
    {
        operator V_INV V_CEB_0_INV
            port map 
            (
                 I => CEB[0],
                 Z => ntCEB_0
            );
    }
    if (CP_PICEB_1  == "TRUE")
    {
        operator V_INV V_CEB_1_INV
            port map 
            (
                 I => CEB[1],
                 Z => ntCEB_1
            );
    }
    // END OF CE

    // OCE
    if (CP_PIOCEA_0 == "TRUE")
    {
        operator V_INV V_OCEA_0_INV
            port map 
            (
                 I => OCEA[0],
                 Z => ntOCEA_0
            );
    }
    if (CP_PIOCEA_1 == "TRUE")
    {
        operator V_INV V_OCEA_1_INV
            port map 
            (
                 I => OCEA[1],
                 Z => ntOCEA_1
            );
    }
    if (CP_PIOCEB_0 == "TRUE")
    {
        operator V_INV V_OCEB_0_INV
            port map 
            (
                 I => OCEB[0],
                 Z => ntOCEB_0
            );
    }
    if (CP_PIOCEB_1 == "TRUE")
    {
        operator V_INV V_OCEB_1_INV
            port map 
            (
                 I => OCEB[1],
                 Z => ntOCEB_1
            );
    }
    // END OF OCE

    // RST
    if (CP_PIRSTA_0 == "TRUE")
    {
        operator V_INV V_RSTA_0_INV
            port map 
            (
                 I => RSTA[0],
                 Z => ntRSTA_0
            );
    }
    if (CP_PIRSTA_1 == "TRUE")
    {
        operator V_INV V_RSTA_1_INV
            port map 
            (
                 I => RSTA[1],
                 Z => ntRSTA_1
            );
    }
    if (CP_PIRSTB_0 == "TRUE")
    {
        operator V_INV V_RSTB_0_INV
            port map 
            (
                 I => RSTB[0],
                 Z => ntRSTB_0
            );
    }
    if (CP_PIRSTB_1 == "TRUE")
    {
        operator V_INV V_RSTB_1_INV
            port map 
            (
                 I => RSTB[1],
                 Z => ntRSTB_1
            );
    }
    // END OF RST

    // DRM CORE
    if (CP_DRM_18K == "TRUE")
    {
        if (CP_FIFO_EN == "TRUE")
        {
             if (CP_DATA_WIDTH_A_0 > 18)
             {
                 operator V_FIFO18K V_FIFO18K
                     parameter map
                     (
                         DATA_WIDTH          =>  CP_DATA_WIDTH_A_0,
                         ALMOST_FULL_OFFSET  =>  CP_ALMOST_FULL_OFFSET,
                         ALMOST_EMPTY_OFFSET =>  CP_ALMOST_EMPTY_OFFSET,
                         REWRITE_EN          =>  CP_REWRITE_EN,
                         RESEND_EN           =>  CP_RESEND_EN,
                         SYNC_FIFO           =>  CP_SYNC_FIFO,
                         USE_EMPTY           => (CP_FLAGEMPTY_EN   == "TRUE"  ) ? 1 : 0,
                         USE_FULL            => (CP_FLAGFULL_EN    == "TRUE"  ) ? 1 : 0,
                         GRS_EN              => (CP_GRS_DIS_0      == "TRUE"  ) ? "FALSE" : "TRUE",
                         DO_REG              => (CP_OUTPUT_REG_B_0 == "ENABLE") ? 1 : 0
                     )
                     port map
                     (
                         ORCE                => (CP_PIOCEB_0 == "FALSE") ? OCEB[0] : ntOCEB_0,
                         EMPTY               =>  EMPTY                                       ,
                         FULL                =>  FULL                                        ,
                         ALMOST_EMPTY        =>  ALMOST_EMPTY                                ,
                         ALMOST_FULL         =>  ALMOST_FULL                                 , 
                         DO[35:18]           =>  QB0[17:0]                                   ,
                         DO[17:0]            =>  QA0[17:0]                                   ,
                         DI[35:18]           =>  DB0[17:0]                                   ,
                         DI[17:0]            =>  DA0[17:0]                                   ,
                         WCLK                => (CP_PICLKA_0 == "FALSE") ? CLKA[0] : ntCLKA_0,
                         RCLK                => (CP_PICLKB_0 == "FALSE") ? CLKB[0] : ntCLKB_0,
                         WCE                 => (CP_PICEA_0  == "FALSE") ? CEA[0]  : ntCEA_0 ,
                         RCE                 => (CP_PICEB_0  == "FALSE") ? CEB[0]  : ntCEB_0 ,
                         RST                 => (CP_PIRSTA_0 == "FALSE") ? RSTA[0] : ntRSTA_0,
                         WERR                =>  WR_ERR                                      ,
                         WEOP                =>  WR_EOP                                      ,
                         RNAK                =>  RD_NAK
                     );
             }
             else
             {
                 operator V_FIFO18K V_FIFO18K
                     parameter map
                     (
                         DATA_WIDTH          =>  CP_DATA_WIDTH_A_0,
                         ALMOST_FULL_OFFSET  =>  CP_ALMOST_FULL_OFFSET,
                         ALMOST_EMPTY_OFFSET =>  CP_ALMOST_EMPTY_OFFSET,
                         REWRITE_EN          =>  CP_REWRITE_EN,
                         RESEND_EN           =>  CP_RESEND_EN,
                         SYNC_FIFO           =>  CP_SYNC_FIFO,
                         USE_EMPTY           => (CP_FLAGEMPTY_EN   == "TRUE"  ) ? 1 : 0,
                         USE_FULL            => (CP_FLAGFULL_EN    == "TRUE"  ) ? 1 : 0,
                         GRS_EN              => (CP_GRS_DIS_0      == "TRUE"  ) ? "FALSE" : "TRUE",
                         DO_REG              => (CP_OUTPUT_REG_B_0 == "ENABLE") ? 1 : 0
                     )
                     port map
                     (
                         ORCE                => (CP_PIOCEB_0 == "FALSE") ? OCEB[0] : ntOCEB_0,
                         EMPTY               =>  EMPTY                                       ,
                         FULL                =>  FULL                                        ,
                         ALMOST_EMPTY        =>  ALMOST_EMPTY                                ,
                         ALMOST_FULL         =>  ALMOST_FULL                                 , 
                         DO[17:0]            =>  QB0[17:0]                                   ,
                         DI[17:0]            =>  DA0[17:0]                                   ,
                         WCLK                => (CP_PICLKA_0 == "FALSE") ? CLKA[0] : ntCLKA_0,
                         RCLK                => (CP_PICLKB_0 == "FALSE") ? CLKB[0] : ntCLKB_0,
                         WCE                 => (CP_PICEA_0  == "FALSE") ? CEA[0]  : ntCEA_0 ,
                         RCE                 => (CP_PICEB_0  == "FALSE") ? CEB[0]  : ntCEB_0 ,
                         RST                 => (CP_PIRSTA_0 == "FALSE") ? RSTA[0] : ntRSTA_0,
                         WERR                =>  WR_ERR                                      ,
                         WEOP                =>  WR_EOP                                      ,
                         RNAK                =>  RD_NAK
                     );
             }
        }
        else if (CP_FIFO_EN == "FALSE")
        {
            operator V_DRM18K V_DRM18K
                parameter map
                (
                    // RAM_MODE => (CP_MASK == 2'b00) ? 
                    RAM_MODE       => (CP_DATA_WIDTH_A_0 > 18 || CP_DATA_WIDTH_B_0 > 18) ? "SIMPLE_DUAL_PORT" : "TRUE_DUAL_PORT",
                    RST_TYPE       => (CP_RESET_TYPE_0 == "SYNC_RESET") ? "SYNC" :
                                      (CP_RESET_TYPE_0 == "ASYNC_RESET") ? "ASYNC" : "ASYNC_SYNC_RELEASE",
                    GRS_EN         => (CP_GRS_DIS_0 == "TRUE") ? "FALSE" : "TRUE",
                    CSA_MASK       => {CP_CSA_POL[2] ? 1'b0 : 1'b1, CP_CSA_POL[1] ? 1'b0 : 1'b1, CP_CSA_POL[0] ? 1'b0 : 1'b1},
                    CSB_MASK       => {CP_CSB_POL[2] ? 1'b0 : 1'b1, CP_CSB_POL[1] ? 1'b0 : 1'b1, CP_CSB_POL[0] ? 1'b0 : 1'b1},
                    DATA_WIDTH_A   =>  CP_DATA_WIDTH_A_0,
                    DATA_WIDTH_B   =>  CP_DATA_WIDTH_B_0,
                    DOA_REG        => (CP_OUTPUT_REG_A_0 == "ENABLE") ? 1 : 0,
                    DOB_REG        => (CP_OUTPUT_REG_B_0 == "ENABLE") ? 1 : 0,
                    DOA_REG_CLKINV => (CP_CLKA_OR_POL_INV_0 == "TRUE") ? 1 : 0,
                    DOB_REG_CLKINV => (CP_CLKB_OR_POL_INV_0 == "TRUE") ? 1 : 0,
                    WRITE_MODE_A   =>  CP_WRITE_MODE_A_0,
                    WRITE_MODE_B   =>  CP_WRITE_MODE_B_0,
                    SIM_DEVICE     => "PGL22G", 
                    INIT_00        =>  CP_INIT_00,
                    INIT_01        =>  CP_INIT_01,
                    INIT_02        =>  CP_INIT_02,
                    INIT_03        =>  CP_INIT_03,
                    INIT_04        =>  CP_INIT_04,
                    INIT_05        =>  CP_INIT_05,
                    INIT_06        =>  CP_INIT_06,
                    INIT_07        =>  CP_INIT_07,
                    INIT_08        =>  CP_INIT_08,
                    INIT_09        =>  CP_INIT_09,
                    INIT_0A        =>  CP_INIT_0A,
                    INIT_0B        =>  CP_INIT_0B,
                    INIT_0C        =>  CP_INIT_0C,
                    INIT_0D        =>  CP_INIT_0D,
                    INIT_0E        =>  CP_INIT_0E,
                    INIT_0F        =>  CP_INIT_0F,
                    INIT_10        =>  CP_INIT_10,
                    INIT_11        =>  CP_INIT_11,
                    INIT_12        =>  CP_INIT_12,
                    INIT_13        =>  CP_INIT_13,
                    INIT_14        =>  CP_INIT_14,
                    INIT_15        =>  CP_INIT_15,
                    INIT_16        =>  CP_INIT_16,
                    INIT_17        =>  CP_INIT_17,
                    INIT_18        =>  CP_INIT_18,
                    INIT_19        =>  CP_INIT_19,
                    INIT_1A        =>  CP_INIT_1A,
                    INIT_1B        =>  CP_INIT_1B,
                    INIT_1C        =>  CP_INIT_1C,
                    INIT_1D        =>  CP_INIT_1D,
                    INIT_1E        =>  CP_INIT_1E,
                    INIT_1F        =>  CP_INIT_1F,
                    INIT_20        =>  CP_INIT_20,
                    INIT_21        =>  CP_INIT_21,
                    INIT_22        =>  CP_INIT_22,
                    INIT_23        =>  CP_INIT_23,
                    INIT_24        =>  CP_INIT_24,
                    INIT_25        =>  CP_INIT_25,
                    INIT_26        =>  CP_INIT_26,
                    INIT_27        =>  CP_INIT_27,
                    INIT_28        =>  CP_INIT_28,
                    INIT_29        =>  CP_INIT_29,
                    INIT_2A        =>  CP_INIT_2A,
                    INIT_2B        =>  CP_INIT_2B,
                    INIT_2C        =>  CP_INIT_2C,
                    INIT_2D        =>  CP_INIT_2D,
                    INIT_2E        =>  CP_INIT_2E,
                    INIT_2F        =>  CP_INIT_2F,
                    INIT_30        =>  CP_INIT_30,
                    INIT_31        =>  CP_INIT_31,
                    INIT_32        =>  CP_INIT_32,
                    INIT_33        =>  CP_INIT_33,
                    INIT_34        =>  CP_INIT_34,
                    INIT_35        =>  CP_INIT_35,
                    INIT_36        =>  CP_INIT_36,
                    INIT_37        =>  CP_INIT_37,
                    INIT_38        =>  CP_INIT_38,
                    INIT_39        =>  CP_INIT_39,
                    INIT_3A        =>  CP_INIT_3A,
                    INIT_3B        =>  CP_INIT_3B,
                    INIT_3C        =>  CP_INIT_3C,
                    INIT_3D        =>  CP_INIT_3D,
                    INIT_3E        =>  CP_INIT_3E,
                    INIT_3F        =>  CP_INIT_3F
                )
                port map
                (        
                    CLKA           => (CP_PICLKA_0 == "FALSE") ? CLKA[0] : ntCLKA_0,
                    CEA            => (CP_PICEA_0  == "FALSE") ? CEA[0]  : ntCEA_0 ,
                    CSA            =>  CSA                                         ,
                    ADDRA[12:0]    =>  ADA0                                        ,
                    ADDRA[13]      =>  ADA_CAS                                     ,
                    ADDRA_HOLD     =>  ADSA[0]                                     ,
                    DIA            =>  DA0                                         ,
                    WEA            => (CP_PIWEA_0  == "FALSE") ? WEA[0]  : ntWEA_0 ,
                    ORCEA          => (CP_PIOCEA_0 == "FALSE") ? OCEA[0] : ntOCEA_0,
                    RSTA           => (CP_PIRSTA_0 == "FALSE") ? RSTA[0] : ntRSTA_0,
                    CLKB           => (CP_PICLKB_0 == "FALSE") ? CLKB[0] : ntCLKB_0,
                    CEB            => (CP_PICEB_0  == "FALSE") ? CEB[0]  : ntCEB_0 ,
                    CSB            =>  CSB                                         ,
                    ADDRB[12:0]    =>  ADB0                                        ,
                    ADDRB[13]      =>  ADB_CAS                                     ,
                    ADDRB_HOLD     =>  ADSB[0]                                     ,
                    DIB            =>  DB0                                         ,
                    WEB            => (CP_PIWEB_0  == "FALSE") ? WEB[0]  : ntWEB_0 ,
                    ORCEB          => (CP_PIOCEB_0 == "FALSE") ? OCEB[0] : ntOCEB_0,
                    RSTB           => (CP_PIRSTB_0 == "FALSE") ? RSTB[0] : ntRSTB_0,
                    DOA            =>  QA0                                         ,
                    DOB            =>  QB0
                );
        }
    }
    else
    {
        if (CP_DRM_EN_0 == "TRUE")
        {
            operator V_DRM9K V_DRM9K_0
                parameter map
                (
                    RAM_MODE       => (CP_DATA_WIDTH_A_0 > 18 || CP_DATA_WIDTH_B_0 > 18) ? "SIMPLE_DUAL_PORT" : "TRUE_DUAL_PORT",
                    DATA_WIDTH_A   =>  CP_DATA_WIDTH_A_0,
                    DATA_WIDTH_B   =>  CP_DATA_WIDTH_B_0,
                    WRITE_MODE_A   =>  CP_WRITE_MODE_A_0,
                    WRITE_MODE_B   =>  CP_WRITE_MODE_B_0,
                    DOA_REG        => (CP_OUTPUT_REG_A_0 == "ENABLE") ? 1 : 0,
                    DOB_REG        => (CP_OUTPUT_REG_B_0 == "ENABLE") ? 1 : 0,
                    RST_TYPE       => (CP_RESET_TYPE_0 == "SYNC_RESET") ? "SYNC" :
                                      (CP_RESET_TYPE_0 == "ASYNC_RESET") ? "ASYNC" : "ASYNC_SYNC_RELEASE",
                    GRS_EN         => (CP_GRS_DIS_0 == "TRUE") ? "FALSE" : "TRUE",
                    DOA_REG_CLKINV => (CP_CLKA_OR_POL_INV_0 == "TRUE") ? 1 : 0,
                    DOB_REG_CLKINV => (CP_CLKB_OR_POL_INV_0 == "TRUE") ? 1 : 0,
                    SIM_DEVICE     => "PGL22G", 
                    INIT_00        =>  CP_INIT_00,
                    INIT_01        =>  CP_INIT_01,
                    INIT_02        =>  CP_INIT_02,
                    INIT_03        =>  CP_INIT_03,
                    INIT_04        =>  CP_INIT_04,
                    INIT_05        =>  CP_INIT_05,
                    INIT_06        =>  CP_INIT_06,
                    INIT_07        =>  CP_INIT_07,
                    INIT_08        =>  CP_INIT_08,
                    INIT_09        =>  CP_INIT_09,
                    INIT_0A        =>  CP_INIT_0A,
                    INIT_0B        =>  CP_INIT_0B,
                    INIT_0C        =>  CP_INIT_0C,
                    INIT_0D        =>  CP_INIT_0D,
                    INIT_0E        =>  CP_INIT_0E,
                    INIT_0F        =>  CP_INIT_0F,
                    INIT_10        =>  CP_INIT_10,
                    INIT_11        =>  CP_INIT_11,
                    INIT_12        =>  CP_INIT_12,
                    INIT_13        =>  CP_INIT_13,
                    INIT_14        =>  CP_INIT_14,
                    INIT_15        =>  CP_INIT_15,
                    INIT_16        =>  CP_INIT_16,
                    INIT_17        =>  CP_INIT_17,
                    INIT_18        =>  CP_INIT_18,
                    INIT_19        =>  CP_INIT_19,
                    INIT_1A        =>  CP_INIT_1A,
                    INIT_1B        =>  CP_INIT_1B,
                    INIT_1C        =>  CP_INIT_1C,
                    INIT_1D        =>  CP_INIT_1D,
                    INIT_1E        =>  CP_INIT_1E,
                    INIT_1F        =>  CP_INIT_1F
                )
                port map
                (
                    ADDRA          =>  ADA0                                        ,
                    ADDRA_HOLD     =>  ADSA[0]                                     ,
                    DIA            =>  DA0                                         ,
                    WEA            => (CP_PIWEA_0  == "FALSE") ? WEA[0]  : ntWEA_0 ,
                    CLKA           => (CP_PICLKA_0 == "FALSE") ? CLKA[0] : ntCLKA_0,
                    CEA            => (CP_PICEA_0  == "FALSE") ? CEA[0]  : ntCEA_0 ,
                    ORCEA          => (CP_PIOCEA_0 == "FALSE") ? OCEA[0] : ntOCEA_0,
                    RSTA           => (CP_PIRSTA_0 == "FALSE") ? RSTA[0] : ntRSTA_0,
                    DOA            =>  QA0                                         ,
                    ADDRB          =>  ADB0                                        ,
                    ADDRB_HOLD     =>  ADSB[0]                                     ,
                    DIB            =>  DB0                                         ,
                    WEB            => (CP_PIWEB_0  == "FALSE") ? WEB[0]  : ntWEB_0 ,
                    CLKB           => (CP_PICLKB_0 == "FALSE") ? CLKB[0] : ntCLKB_0,
                    CEB            => (CP_PICEB_0  == "FALSE") ? CEB[0]  : ntCEB_0 ,
                    ORCEB          => (CP_PIOCEB_0 == "FALSE") ? OCEB[0] : ntOCEB_0,
                    RSTB           => (CP_PIRSTB_0 == "FALSE") ? RSTB[0] : ntRSTB_0,
                    DOB            =>  QB0
                );
        }

        if (CP_DRM_EN_1 == "TRUE")
        {
            operator V_DRM9K V_DRM9K_1
                parameter map
                (
                    RAM_MODE       => (CP_DATA_WIDTH_A_1 > 18 || CP_DATA_WIDTH_B_1 > 18) ? "SIMPLE_DUAL_PORT" : "TRUE_DUAL_PORT",
                    DATA_WIDTH_A   =>  CP_DATA_WIDTH_A_1,
                    DATA_WIDTH_B   =>  CP_DATA_WIDTH_B_1,
                    WRITE_MODE_A   =>  CP_WRITE_MODE_A_1,
                    WRITE_MODE_B   =>  CP_WRITE_MODE_B_1,
                    DOA_REG        => (CP_OUTPUT_REG_A_1 == "ENABLE") ? 1 : 0,
                    DOB_REG        => (CP_OUTPUT_REG_B_1 == "ENABLE") ? 1 : 0,
                    RST_TYPE       => (CP_RESET_TYPE_1 == "SYNC_RESET") ? "SYNC" :
                                      (CP_RESET_TYPE_1 == "ASYNC_RESET") ? "ASYNC" : "ASYNC_SYNC_RELEASE",
                    GRS_EN         => (CP_GRS_DIS_1 == "TRUE") ? "FALSE" : "TRUE",
                    DOA_REG_CLKINV => (CP_CLKA_OR_POL_INV_1 == "TRUE") ? 1 : 0,
                    DOB_REG_CLKINV => (CP_CLKB_OR_POL_INV_1 == "TRUE") ? 1 : 0,
                    SIM_DEVICE     => "PGL22G", 
                    INIT_00        =>  CP_INIT_20,
                    INIT_01        =>  CP_INIT_21,
                    INIT_02        =>  CP_INIT_22,
                    INIT_03        =>  CP_INIT_23,
                    INIT_04        =>  CP_INIT_24,
                    INIT_05        =>  CP_INIT_25,
                    INIT_06        =>  CP_INIT_26,
                    INIT_07        =>  CP_INIT_27,
                    INIT_08        =>  CP_INIT_28,
                    INIT_09        =>  CP_INIT_29,
                    INIT_0A        =>  CP_INIT_2A,
                    INIT_0B        =>  CP_INIT_2B,
                    INIT_0C        =>  CP_INIT_2C,
                    INIT_0D        =>  CP_INIT_2D,
                    INIT_0E        =>  CP_INIT_2E,
                    INIT_0F        =>  CP_INIT_2F,
                    INIT_10        =>  CP_INIT_30,
                    INIT_11        =>  CP_INIT_31,
                    INIT_12        =>  CP_INIT_32,
                    INIT_13        =>  CP_INIT_33,
                    INIT_14        =>  CP_INIT_34,
                    INIT_15        =>  CP_INIT_35,
                    INIT_16        =>  CP_INIT_36,
                    INIT_17        =>  CP_INIT_37,
                    INIT_18        =>  CP_INIT_38,
                    INIT_19        =>  CP_INIT_39,
                    INIT_1A        =>  CP_INIT_3A,
                    INIT_1B        =>  CP_INIT_3B,
                    INIT_1C        =>  CP_INIT_3C,
                    INIT_1D        =>  CP_INIT_3D,
                    INIT_1E        =>  CP_INIT_3E,
                    INIT_1F        =>  CP_INIT_3F
                )
                port map
                (
                    ADDRA          =>  ADA1                                        ,
                    ADDRA_HOLD     =>  ADSA[1]                                     ,
                    DIA            =>  DA1                                         ,
                    WEA            => (CP_PIWEA_1  == "FALSE") ? WEA[1]  : ntWEA_1 ,
                    CLKA           => (CP_PICLKA_1 == "FALSE") ? CLKA[1] : ntCLKA_1,
                    CEA            => (CP_PICEA_1  == "FALSE") ? CEA[1]  : ntCEA_1 ,
                    ORCEA          => (CP_PIOCEA_1 == "FALSE") ? OCEA[1] : ntOCEA_1,
                    RSTA           => (CP_PIRSTA_1 == "FALSE") ? RSTA[1] : ntRSTA_1,
                    DOA            =>  QA1                                         ,
                    ADDRB          =>  ADB1                                        ,
                    ADDRB_HOLD     =>  ADSB[1]                                     ,
                    DIB            =>  DB1                                         ,
                    WEB            => (CP_PIWEB_1  == "FALSE") ? WEB[1]  : ntWEB_1 ,
                    CLKB           => (CP_PICLKB_1 == "FALSE") ? CLKB[1] : ntCLKB_1,
                    CEB            => (CP_PICEB_1  == "FALSE") ? CEB[1]  : ntCEB_1 ,
                    ORCEB          => (CP_PIOCEB_1 == "FALSE") ? OCEB[1] : ntOCEB_1,
                    RSTB           => (CP_PIRSTB_1 == "FALSE") ? RSTB[1] : ntRSTB_1,
                    DOB            =>  QB1
                );
        }
    }
    // END OF DRM CORE
};
