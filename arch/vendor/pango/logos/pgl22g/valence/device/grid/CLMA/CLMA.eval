*******************************************************************

  Device    [CLMA]

  Author    [liujiao]

  Abstract  [grid device]

  Revision History:

********************************************************************************/
//grid device started
grid
device CLMA
{
    // grid_property_def_start
    // grid_property_def_end

    parameter
    (
        config bit CP_INITA[31:0] = 32'hFFFFFFFF,
        config bit CP_INITB[31:0] = 32'hFFFFFFFF,
        config bit CP_INITC[31:0] = 32'hFFFFFFFF,
        config bit CP_INITD[31:0] = 32'hFFFFFFFF,
        config string CP_MODEA = "COMP",
        config string CP_MODEB = "COMP",
        config string CP_MODEC = "COMP",
        config string CP_MODED = "COMP",
        config string CP_Y0MUX_SEL = "FX",
        config string CP_Y1MUX_SEL = "FX",
        config string CP_Y2MUX_SEL = "FX",
        config string CP_Y3MUX_SEL = "FX",
        config string CP_Q0MUX_SEL = "YX",
        config string CP_Q1MUX_SEL = "YX",
        config string CP_Q2MUX_SEL = "YX",
        config string CP_Q3MUX_SEL = "YX",
        config string CP_QABMUX_SEL = "Y6",
        config string CP_QCDMUX_SEL = "Y6",
        config string CP_ABPMUX_SEL = "X0D",
        config string CP_CDPMUX_SEL = "X0D",
        config string CP_CEMUX_SEL = "LOCAL",
        config string CP_RSMUX_SEL = "LOCAL",
        config string CP_CLK_POL = "FALSE",
        config string CP_LCE_POL = "FALSE",
        config string CP_LRS_POL = "FALSE",
        config string CP_LCE_EN = "FALSE",
        config string CP_LRS_EN = "FALSE",
        config string CP_GRS_EN = "TRUE",
        config string CP_RS_MODE = "SYNC",
        config string CP_FF0_RS = "SET",
        config string CP_FF1_RS = "SET",
        config string CP_FF2_RS = "SET",
        config string CP_FF3_RS = "SET",
        config string CP_FFAB_RS = "SET",
        config string CP_FFCD_RS = "SET"
    );
    port
    (
// configuration_body_def_on


    config input SC_Q_0[31:0] = 32'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_Q_0[31],SC_Q_0[30],SC_Q_0[29],SC_Q_0[28],SC_Q_0[27],SC_Q_0[26],SC_Q_0[25],SC_Q_0[24],SC_Q_0[23],SC_Q_0[22],SC_Q_0[21],SC_Q_0[20],SC_Q_0[19],SC_Q_0[18],SC_Q_0[17],SC_Q_0[16],SC_Q_0[15],SC_Q_0[14],SC_Q_0[13],SC_Q_0[12],SC_Q_0[11],SC_Q_0[10],SC_Q_0[9],SC_Q_0[8],SC_Q_0[7],SC_Q_0[6],SC_Q_0[5],SC_Q_0[4],SC_Q_0[3],SC_Q_0[2],SC_Q_0[1],SC_Q_0[0]" */,

    config input SC_Q_1[31:0] = 32'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_Q_1[31],SC_Q_1[30],SC_Q_1[29],SC_Q_1[28],SC_Q_1[27],SC_Q_1[26],SC_Q_1[25],SC_Q_1[24],SC_Q_1[23],SC_Q_1[22],SC_Q_1[21],SC_Q_1[20],SC_Q_1[19],SC_Q_1[18],SC_Q_1[17],SC_Q_1[16],SC_Q_1[15],SC_Q_1[14],SC_Q_1[13],SC_Q_1[12],SC_Q_1[11],SC_Q_1[10],SC_Q_1[9],SC_Q_1[8],SC_Q_1[7],SC_Q_1[6],SC_Q_1[5],SC_Q_1[4],SC_Q_1[3],SC_Q_1[2],SC_Q_1[1],SC_Q_1[0]" */,

    config input SC_Q_2[31:0] = 32'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_Q_2[31],SC_Q_2[30],SC_Q_2[29],SC_Q_2[28],SC_Q_2[27],SC_Q_2[26],SC_Q_2[25],SC_Q_2[24],SC_Q_2[23],SC_Q_2[22],SC_Q_2[21],SC_Q_2[20],SC_Q_2[19],SC_Q_2[18],SC_Q_2[17],SC_Q_2[16],SC_Q_2[15],SC_Q_2[14],SC_Q_2[13],SC_Q_2[12],SC_Q_2[11],SC_Q_2[10],SC_Q_2[9],SC_Q_2[8],SC_Q_2[7],SC_Q_2[6],SC_Q_2[5],SC_Q_2[4],SC_Q_2[3],SC_Q_2[2],SC_Q_2[1],SC_Q_2[0]" */,

    config input SC_Q_3[31:0] = 32'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_Q_3[31],SC_Q_3[30],SC_Q_3[29],SC_Q_3[28],SC_Q_3[27],SC_Q_3[26],SC_Q_3[25],SC_Q_3[24],SC_Q_3[23],SC_Q_3[22],SC_Q_3[21],SC_Q_3[20],SC_Q_3[19],SC_Q_3[18],SC_Q_3[17],SC_Q_3[16],SC_Q_3[15],SC_Q_3[14],SC_Q_3[13],SC_Q_3[12],SC_Q_3[11],SC_Q_3[10],SC_Q_3[9],SC_Q_3[8],SC_Q_3[7],SC_Q_3[6],SC_Q_3[5],SC_Q_3[4],SC_Q_3[3],SC_Q_3[2],SC_Q_3[1],SC_Q_3[0]" */,

    config input SC_CARRY[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CARRY[3],SC_CARRY[2],SC_CARRY[1],SC_CARRY[0]" */,

    config input SC_I0ID[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_I0ID[3],SC_I0ID[2],SC_I0ID[1],SC_I0ID[0]" */,

    config input SC_I5CONST[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_I5CONST[3],SC_I5CONST[2],SC_I5CONST[1],SC_I5CONST[0]" */,

    config input SC_MATH[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MATH[3],SC_MATH[2],SC_MATH[1],SC_MATH[0]" */,

    config input SC_FDI[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_FDI[3],SC_FDI[2],SC_FDI[1],SC_FDI[0]" */,

    config input SC_CDI[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CDI[3],SC_CDI[2],SC_CDI[1],SC_CDI[0]" */,

    config input SC_XDI[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_XDI[3],SC_XDI[2],SC_XDI[1],SC_XDI[0]" */,

    config input SC_SREN[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SREN[3],SC_SREN[2],SC_SREN[1],SC_SREN[0]" */,

    config input SC_MDI[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MDI[3],SC_MDI[2],SC_MDI[1],SC_MDI[0]" */,

    config input SC_MDI_APP[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_MDI_APP[1],SC_MDI_APP[0]" */,

    config input SC_SREN_APP[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_SREN_APP[1],SC_SREN_APP[0]" */,

    config input SC_DDIS_APP[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_DDIS_APP[1],SC_DDIS_APP[0]" */,

    config input SC_CECHAIN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_CECHAIN" */,

    config input SC_RSCHAIN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RSCHAIN" */,

    config input SC_PICLK = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICLK" */,

    config input SC_PICE = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PICE" */,

    config input SC_PIRS = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_PIRS" */,

    config input SC_ASYNC = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_ASYNC" */,

    config input SC_RSS[3:0] = 4'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RSS[3],SC_RSS[2],SC_RSS[1],SC_RSS[0]" */,

    config input SC_RSS_APP[1:0] = 2'h0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_RSS_APP[1],SC_RSS_APP[0]" */,

    config input SC_LCE_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LCE_EN" */,

    config input SC_LRS_EN = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_LRS_EN" */,

    config input SC_GRS_DIS = 1'b0
    /* pragma  PAP_CFG_BIT_NAME  = "SC_GRS_DIS" */,

// configuration_body_def_end

        input A4 = 1'b1,
        input A3 = 1'b1,
        input A2 = 1'b1,
        input A1 = 1'b1,
        input A0 = 1'b1,
        input B4 = 1'b1,
        input B3 = 1'b1,
        input B2 = 1'b1,
        input B1 = 1'b1,
        input B0 = 1'b1,
        input C4 = 1'b1,
        input C3 = 1'b1,
        input C2 = 1'b1,
        input C1 = 1'b1,
        input C0 = 1'b1,
        input D4 = 1'b1,
        input D3 = 1'b1,
        input D2 = 1'b1,
        input D1 = 1'b1,
        input D0 = 1'b1,
        input AD = 1'b1,
        input BD = 1'b1,
        input CD = 1'b1,
        input DD = 1'b1,
        input M3 = 1'b1,
        input M2 = 1'b1,
        input M1 = 1'b1,
        input M0 = 1'b1,
        input RS = 1'b1,
        input CE = 1'b1,
        input CLK = 1'b1,
        input L7IN = 1'b1,
        input CIN = 1'b1,
        input RSCI = 1'b1,
        input CECI = 1'b1,
        input SRCI = 1'b1,
        output Y3,
        output Y2,
        output Y1,
        output Y0,
        output Y6AB,
        output Y6CD,
        output Q3,
        output Q2,
        output Q1,
        output Q0,
        output L7OUT,
        output COUT,
        output RSCO,
        output CECO,
        output SRCO,
        output CLKCO
    );
};
//grid device end


/*******************************************************************************

  Device    [CLMA]

  Author    [liujiao]

  Abstract  [The structure netlist of CLMA is described in the similar fashion 
             as in HDL. In unit instantiation statement,the formal pin may be 
             connected to net which is declared explicitly. 
             
             In Valence,the connection can also be made from formal pin to other 
             pin or port,in which case Valence compiler shall create the net to 
             fulfil the connection. The built-in naming convention is kicked in 
             to name the automatically created net. However,the objects (net,instance)
             of this netlist are going to mapped from schematic. The compiler-generated
             names cause trouble for the mapping. Therefore,all wires are declared
             explicitly in the following description]

  Revision History:

********************************************************************************/
//grid device structure netlist started

structure netlist of CLMA
{
    // Wires for input ports
    wire ntCYA, ntCYB, ntCYC;
    wire ntL5A, ntL5B, ntL5C, ntL5D;
    wire ntL8;
    wire ntQP0, ntQP1;
    wire ntQD0, ntDP0, ntQD1, ntQD2, ntDP1, ntQD3;
    wire ntDP0_DI, ntDP1_DI;
    wire ntRS_W;
    
    wire ntA0, ntA1, ntA2, ntA3, ntA4, ntAD;
    wire ntB0, ntB1, ntB2, ntB3, ntB4, ntBD;
    wire ntC0, ntC1, ntC2, ntC3, ntC4, ntCD;
    wire ntD0, ntD1, ntD2, ntD3, ntD4, ntDD;
    wire ntM0, ntM1, ntM2, ntM3;
    wire ntRS, ntCE, ntCLK;
    wire ntL7IN, ntCIN, ntRSCI, ntCECI, ntSRCI;
    wire ntY0, ntY1, ntY2, ntY3;
    wire ntY6AB, ntY6CD;
    wire ntQ0, ntQ1, ntQ2, ntQ3;
    wire ntL7OUT, ntCOUT, ntRSCO, ntCECO, ntSRCO;
    wire ntCLKCO;
    wire ntCLKR;
    
    wire ntCE_P;
    wire ntRS_P;
    wire ntK0;
    wire ntG0;
    wire ntK2;
    wire ntG2;

    //
    // Connection to ports
    //
    ntD0      <= D0;
    ntD1      <= D1;
    ntD2      <= D2;
    ntD3      <= D3;
    ntD4      <= D4; 
    ntDD      <= DD;
 
    ntC0      <= C0;
    ntC1      <= C1;
    ntC2      <= C2;
    ntC3      <= C3;
    ntC4      <= C4;
    ntCD      <= CD;
 
    ntB0      <= B0;
    ntB1      <= B1; 
    ntB2      <= B2;
    ntB3      <= B3;
    ntB4      <= B4;
    ntBD      <= BD;
 
    ntA0      <= A0;
    ntA1      <= A1;
    ntA2      <= A2;
    ntA3      <= A3;
    ntA4      <= A4;
    ntAD      <= AD;
 
    ntM1      <= M1;
    ntM3      <= M3;
    ntM0      <= M0;
    ntM2      <= M2;

    ntRS      <= RS;
    ntCE      <= CE;
    ntCLK     <= CLK;
    ntCIN     <= CIN;
    ntL7IN    <= L7IN;
    ntSRCI    <= SRCI;
    ntRSCI    <= RSCI;
    ntCECI    <= CECI;

    Y3        <= ntY3;
    Q3        <= ntQ3;
    Y2        <= ntY2;
    Q2        <= ntQ2;
    Y1        <= ntY1;
    Q1        <= ntQ1;
    Y0        <= ntY0;
    Q0        <= ntQ0;
    Y6CD      <= ntY6CD;
    Y6AB      <= ntY6AB;    
    COUT      <= ntCOUT;
    L7OUT     <= ntL7OUT;
    RSCO      <= ntRSCO;
    CECO      <= ntCECO;
    SRCO      <= ntQ3;
    CLKCO     <= ntCLKCO;
    
    //
    // Instances. FGD section
    //
    device FY FYA 
        parameter map
        (
            CP_INIT => CP_INITA,
            CP_MODE => CP_MODEA
        )
        port map 
        (
            A0  => ntA0,
            A1  => ntA1,
            A2  => ntA2,
            A3  => ntA3,
            A4  => ntA4,
            AD  => ntAD,
            CIN => ntCIN,
            COUT => ntCYA,
            K    => ntK0,
            G    => ntG0,
            L5   => ntL5A 
        );
        
    device FYC FYB 
        parameter map
        (
            CP_INIT => CP_INITB,
            CP_MODE => CP_MODEB
        )
        port map 
        (
            A0  => ntB0,
            A1  => ntB1,
            A2  => ntB2,
            A3  => ntB3,
            A4  => ntB4,
            AD  => ntBD,
            CIN => ntCYA,
            K   => ntK0,
            G   => ntG0,
            FCIN => ntCIN,
            COUT => ntCYB,
            L5   => ntL5B 
        );
        
    device FY FYC 
        parameter map
        (
            CP_INIT => CP_INITC,
            CP_MODE => CP_MODEC
        )
        port map 
        (
            A0   => ntC0,
            A1   => ntC1,
            A2   => ntC2,
            A3   => ntC3,
            A4   => ntC4,
            AD   => ntCD,
            K    => ntK2,
            G    => ntG2,
            CIN  => ntCYB,
            COUT => ntCYC,
            L5   => ntL5C 
        );        

    device FYC FYD 
        parameter map
        (
            CP_INIT => CP_INITD,
            CP_MODE => CP_MODED
        )
        port map 
        (
            A0  => ntD0,
            A1  => ntD1,
            A2  => ntD2,
            A3  => ntD3,
            A4  => ntD4,
            AD  => ntDD,
            CIN => ntCYC,
            K    => ntK2,
            G    => ntG2,  
            FCIN => ntCYB,
            COUT => ntCOUT,
            L5   => ntL5D 
        );

    device MUX2 L6ABMUX
        port map
        (
            DI0  => ntL5A,
            DI1  => ntL5B,
            SEL  => ntM0,
            DOUT => ntY6AB
        );
        
    device MUX2 L6CDMUX
        port map
        (
            DI0   => ntL5C,
            DI1   => ntL5D,
            SEL   => ntM1,
            DOUT  => ntY6CD
        );    
    
    device MUX2 L7MUX
        port map
        (
            DI0  => ntY6AB,
            DI1  => ntY6CD,
            SEL  => ntM2,
            DOUT => ntL7OUT
        );
    
    device MUX2 L8MUX
        port map
        (
            DI0  => ntL7OUT,
            DI1  => ntL7IN,
            SEL  => ntM3,
            DOUT => ntL8
        );
    
    device CLK_POLMUX CLKPOLMUX
        parameter map
        (
            CP_CLK_POL  => CP_CLK_POL
        )      
        port map
        (
            IN   => ntCLK,
            Y    => ntCLKR
        ); 
    
    device LCE_POLMUX LCEPOLMUX
        parameter map
        (
            CP_LCE_EN   => CP_LCE_EN,
            CP_LCE_POL  => CP_LCE_POL
        )     
        port map
        (
            IN  => ntCE,
            Y   => ntCE_P
        );
    
    device LRS_POLMUX LRSPOLMUX
        parameter map
        (
            CP_LRS_EN   => CP_LRS_EN,
            CP_LRS_POL  => CP_LRS_POL
        )     
        port map
        (
            IN  => ntRS,
            Y   => ntRS_P
        );
    
    device MUX2_P CEMUX
        parameter map
        (
            SEL  => CP_CEMUX_SEL
        )     
        port map
        (
            DI1  => ntCECI,
            DI0  => ntCE_P,
            DOUT => ntCECO
        );
    
    device MUX2_P RSMUX
        parameter map
        (
            SEL  => CP_RSMUX_SEL
        )     
        port map
        (
            DI1  => ntRSCI,
            DI0  => ntRS_P,
            DOUT => ntRSCO
        );
                
    device YMUX Y3MUX
        parameter map
        (
            CP_OUT_SEL  => CP_Y3MUX_SEL
        )
        port map
        (
            MF  => ntL8,
            FX  => ntL5D,
            CYX => ntCOUT,
            Y   => ntY3
        );
    
    device YMUX Y2MUX
        parameter map
        (
            CP_OUT_SEL  => CP_Y2MUX_SEL
        )    
        port map
        (
            MF  => ntQP1,
            FX  => ntL5C,
            CYX => ntCYC,
            Y   => ntY2
        );
    
    device YMUX Y1MUX
        parameter map
        (
            CP_OUT_SEL  => CP_Y1MUX_SEL
        )       
        port map
        (
            MF  => ntL7OUT,
            FX  => ntL5B,
            CYX => ntCYB,
            Y   => ntY1
        );
    
    device YMUX Y0MUX
        parameter map
        (
            CP_OUT_SEL  => CP_Y0MUX_SEL
        ) 
        port map
        (
            MF  => ntQP0,
            FX  => ntL5A,
            CYX => ntCYA,
            Y   => ntY0
        );
                
    device QMUX Q3MUX
        parameter map
        (
            CP_OUT_SEL  => CP_Q3MUX_SEL
        )    
        port map
        (
            YX  => ntY3,
            SRQ => ntQP1,
            MX  => ntM3,
            Q   => ntQD3
        );
    
    device QMUX Q2MUX
        parameter map
        (
            CP_OUT_SEL  => CP_Q2MUX_SEL
        )      
        port map
        (
            YX  => ntY2,
            SRQ => ntQ1,
            MX  => ntM1,
            Q   => ntQD2
        );
        
    device QMUX Q1MUX
        parameter map
        (
            CP_OUT_SEL  => CP_Q1MUX_SEL
        )      
        port map
        (
            YX  => ntY1,
            SRQ => ntQP0,
            MX  => ntM2,
            Q   => ntQD1
        );    
    
    device QMUX Q0MUX
        parameter map
        (
            CP_OUT_SEL  => CP_Q0MUX_SEL
        ) 
        port map
        (
            YX  => ntY0,
            SRQ => ntSRCI,
            MX  => ntM0,
            Q   => ntQD0
        );
    
    device PMUX ABPMUX
        parameter map
        (
            CP_OUT_SEL  => CP_ABPMUX_SEL
        )     
        port map
        (  
            X1D => ntBD,
            X0D => ntAD,
            Y   => ntDP0_DI
        );
    
    device PMUX CDPMUX
        parameter map
        (
            CP_OUT_SEL  => CP_CDPMUX_SEL
        )   
        port map
        (  
            X1D  => ntDD,
            X0D  => ntCD,
            Y    => ntDP1_DI
        );
    
    device APPQMUX QABMUX
        parameter map
        (
            CP_OUT_SEL  => CP_QABMUX_SEL
        )      
        port map
        (  
            Y6  => ntY6AB,
            PY  => ntDP0_DI,
            SRQ => ntQ0,
            Q   => ntDP0
        );
        
    device APPQMUX QCDMUX
        parameter map
        (
            CP_OUT_SEL  => CP_QCDMUX_SEL
        )      
        port map
        ( 
            Y6  => ntY6CD,
            PY  =>ntDP1_DI,
            SRQ => ntQ2,
            Q   => ntDP1
        );                       
    
    device FF FF0
        parameter map
        (
            CP_GRS_EN  => CP_GRS_EN,
            CP_RS_MODE => CP_RS_MODE,
            CP_FF_RS   => CP_FF0_RS
        )
        port map
        (
            D  => ntQD0,
            RS => ntRSCO,
            CE => ntCECO,
            CLK => ntCLKR,
            Q   => ntQ0
        );
        
    device FF FFAB
        parameter map
        (
            CP_GRS_EN  => CP_GRS_EN,
            CP_RS_MODE => CP_RS_MODE,
            CP_FF_RS   => CP_FFAB_RS
        )
        port map
        (
            D  => ntDP0,
            RS => ntRSCO,
            CE => ntCECO,
            CLK => ntCLKR,
            Q   => ntQP0
        );
        
    device FF FF1
        parameter map
        (
            CP_GRS_EN  => CP_GRS_EN,
            CP_RS_MODE => CP_RS_MODE,
            CP_FF_RS   => CP_FF1_RS
        )
        port map
        (
            D  => ntQD1,
            RS => ntRSCO,
            CE => ntCECO,
            CLK => ntCLKR,
            Q   => ntQ1
        );
        
     device FF FF2
         parameter map
         (
             CP_GRS_EN  => CP_GRS_EN,
             CP_RS_MODE => CP_RS_MODE,
             CP_FF_RS   => CP_FF2_RS
         )
         port map
         (
             D  => ntQD2,
             RS => ntRSCO,
             CE => ntCECO,
             CLK => ntCLKR,
             Q   => ntQ2
         );   
        
    device FF FFCD
        parameter map
        (
            CP_GRS_EN  => CP_GRS_EN,
            CP_RS_MODE => CP_RS_MODE,
            CP_FF_RS   => CP_FFCD_RS
        )
        port map
        (
            D  => ntDP1,
            RS => ntRSCO,
            CE => ntCECO,
            CLK => ntCLKR,
            Q   => ntQP1
        );  
        
    device FF FF3
        parameter map
        (
            CP_GRS_EN  => CP_GRS_EN,
            CP_RS_MODE => CP_RS_MODE,
            CP_FF_RS   => CP_FF3_RS
        )
        port map
        (
            D   => ntQD3,
            RS  => ntRSCO,
            CE  => ntCECO,
            CLK => ntCLKR,
            Q   => ntQ3
        );  

    device RAM_RS U0_NOT
        port map
        (
            IN  => ntCLKR,
            OUT => ntCLKCO
        );

}; // end of structure netlist of CLMA
//grid device structure netlist end


/*******************************************************************************

  Device    [CLMA]

  Author    []

  Abstract  [The floorplan structure]

  Revision History:

********************************************************************************/
floorplan
structure fp_struct of CLMA
{
    device FY FYA ;
    device FY FYB ;
    device FY FYC ;
    device FY FYD ;            
    device MUX2  L6ABMUX ;   
    device MUX2  L7MUX ;   
    device MUX2 L6CDMUX ;
    device MUX2 L8MUX ;   
    device FF  FF0 ;   
    device FF  FFAB ;       
    device FF  FF1;
    device FF  FF2;    
    device FF  FFCD;    
    device FF  FF3;   

}; // end of structure fp_struct of CLMA



/*******************************************************************************

  Device    [CLMA]

  Author    []

  Abstract  [Configure the configuration bits based on the value of config parameter]

  Revision History:

********************************************************************************/

//grid device configure body started

configuration cfg of CLMA
{

 // assign config body begin
    SC_Q_0[0]    :=    (CP_INITA[3] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[1]    :=    (CP_INITA[11] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[2]    :=    (CP_INITA[7] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[3]    :=    (CP_INITA[15] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[4]    :=    (CP_INITA[1] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[5]    :=    (CP_INITA[9] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[6]    :=    (CP_INITA[5] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[7]    :=    (CP_INITA[13] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[8]    :=    (CP_INITA[2] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[9]    :=    (CP_INITA[10] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[10]   :=    (CP_INITA[6] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[11]   :=    (CP_INITA[14] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[12]   :=    (CP_INITA[0] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[13]   :=    (CP_INITA[8] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[14]   :=    (CP_INITA[4] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[15]   :=    (CP_INITA[12] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[16]   :=    (CP_INITA[19] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[17]   :=    (CP_INITA[27] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[18]   :=    (CP_INITA[23] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[19]   :=    (CP_INITA[31] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[20]   :=    (CP_INITA[17] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[21]   :=    (CP_INITA[25] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[22]   :=    (CP_INITA[21] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[23]   :=    (CP_INITA[29] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[24]   :=    (CP_INITA[18] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[25]   :=    (CP_INITA[26] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[26]   :=    (CP_INITA[22] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[27]   :=    (CP_INITA[30] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[28]   :=    (CP_INITA[16] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[29]   :=    (CP_INITA[24] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[30]   :=    (CP_INITA[20] == 1'b1? 1'b0 : 1'b1);
    SC_Q_0[31]   :=    (CP_INITA[28] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[0]    :=    (CP_INITB[3] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[1]    :=    (CP_INITB[11] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[2]    :=    (CP_INITB[7] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[3]    :=    (CP_INITB[15] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[4]    :=    (CP_INITB[1] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[5]    :=    (CP_INITB[9] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[6]    :=    (CP_INITB[5] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[7]    :=    (CP_INITB[13] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[8]    :=    (CP_INITB[2] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[9]    :=    (CP_INITB[10] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[10]   :=    (CP_INITB[6] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[11]   :=    (CP_INITB[14] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[12]   :=    (CP_INITB[0] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[13]   :=    (CP_INITB[8] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[14]   :=    (CP_INITB[4] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[15]   :=    (CP_INITB[12] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[16]   :=    (CP_INITB[19] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[17]   :=    (CP_INITB[27] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[18]   :=    (CP_INITB[23] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[19]   :=    (CP_INITB[31] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[20]   :=    (CP_INITB[17] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[21]   :=    (CP_INITB[25] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[22]   :=    (CP_INITB[21] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[23]   :=    (CP_INITB[29] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[24]   :=    (CP_INITB[18] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[25]   :=    (CP_INITB[26] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[26]   :=    (CP_INITB[22] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[27]   :=    (CP_INITB[30] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[28]   :=    (CP_INITB[16] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[29]   :=    (CP_INITB[24] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[30]   :=    (CP_INITB[20] == 1'b1? 1'b0 : 1'b1);
    SC_Q_1[31]   :=    (CP_INITB[28] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[0]    :=    (CP_INITC[3] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[1]    :=    (CP_INITC[11] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[2]    :=    (CP_INITC[7] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[3]    :=    (CP_INITC[15] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[4]    :=    (CP_INITC[1] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[5]    :=    (CP_INITC[9] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[6]    :=    (CP_INITC[5] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[7]    :=    (CP_INITC[13] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[8]    :=    (CP_INITC[2] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[9]    :=    (CP_INITC[10] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[10]   :=    (CP_INITC[6] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[11]   :=    (CP_INITC[14] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[12]   :=    (CP_INITC[0] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[13]   :=    (CP_INITC[8] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[14]   :=    (CP_INITC[4] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[15]   :=    (CP_INITC[12] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[16]   :=    (CP_INITC[19] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[17]   :=    (CP_INITC[27] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[18]   :=    (CP_INITC[23] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[19]   :=    (CP_INITC[31] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[20]   :=    (CP_INITC[17] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[21]   :=    (CP_INITC[25] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[22]   :=    (CP_INITC[21] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[23]   :=    (CP_INITC[29] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[24]   :=    (CP_INITC[18] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[25]   :=    (CP_INITC[26] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[26]   :=    (CP_INITC[22] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[27]   :=    (CP_INITC[30] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[28]   :=    (CP_INITC[16] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[29]   :=    (CP_INITC[24] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[30]   :=    (CP_INITC[20] == 1'b1? 1'b0 : 1'b1);
    SC_Q_2[31]   :=    (CP_INITC[28] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[0]    :=    (CP_INITD[3] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[1]    :=    (CP_INITD[11] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[2]    :=    (CP_INITD[7] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[3]    :=    (CP_INITD[15] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[4]    :=    (CP_INITD[1] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[5]    :=    (CP_INITD[9] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[6]    :=    (CP_INITD[5] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[7]    :=    (CP_INITD[13] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[8]    :=    (CP_INITD[2] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[9]    :=    (CP_INITD[10] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[10]   :=    (CP_INITD[6] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[11]   :=    (CP_INITD[14] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[12]   :=    (CP_INITD[0] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[13]   :=    (CP_INITD[8] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[14]   :=    (CP_INITD[4] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[15]   :=    (CP_INITD[12] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[16]   :=    (CP_INITD[19] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[17]   :=    (CP_INITD[27] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[18]   :=    (CP_INITD[23] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[19]   :=    (CP_INITD[31] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[20]   :=    (CP_INITD[17] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[21]   :=    (CP_INITD[25] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[22]   :=    (CP_INITD[21] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[23]   :=    (CP_INITD[29] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[24]   :=    (CP_INITD[18] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[25]   :=    (CP_INITD[26] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[26]   :=    (CP_INITD[22] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[27]   :=    (CP_INITD[30] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[28]   :=    (CP_INITD[16] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[29]   :=    (CP_INITD[24] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[30]   :=    (CP_INITD[20] == 1'b1? 1'b0 : 1'b1);
    SC_Q_3[31]   :=    (CP_INITD[28] == 1'b1? 1'b0 : 1'b1);
// assign config body end

//initial config body0 begin
    if (CP_MODEA == "LUT5" ||  CP_MODEA == "ROM" ||  CP_MODEA == "WAND" ||  CP_MODEA == "PRIENC" || CP_MODEA == "LATCH")
    {
        SC_I5CONST[0]  :=  1'b0;
        SC_CARRY[0]  :=  1'b1;
        SC_MATH[0]  :=  1'b0;
        SC_I0ID[0]  :=  1'b0;
    }
    else if(CP_MODEA == "MUX4" || CP_MODEA == "LUT5M")
    {
        SC_I5CONST[0]  :=  1'b0;
        SC_CARRY[0]  :=  1'b0;
        SC_MATH[0]  :=  1'b0;
        SC_I0ID[0]  :=  1'b1;
    }
    else if(CP_MODEA == "ARITH")
    {
        SC_I5CONST[0]  :=  1'b1;
        SC_CARRY[0]  :=  1'b0;
        SC_MATH[0]  :=  1'b1;
        SC_I0ID[0]  :=  1'b0;
    }
    else if(CP_MODEA == "XOR")
    {
        SC_I5CONST[0]  :=  1'b1;
        SC_CARRY[0]  :=  1'b1;
        SC_MATH[0]  :=  1'b1;
        SC_I0ID[0]  :=  1'b0;
    }
    else if(CP_MODEA == "COMP")
    {
        SC_I5CONST[0]  :=  1'b0;
        SC_CARRY[0]  :=  1'b0;
        SC_MATH[0]  :=  1'b0;
        SC_I0ID[0]  :=  1'b0;
    }
    else if(CP_MODEA == "ARITH1")
    {
        SC_I5CONST[0]  :=  1'b0;
        SC_CARRY[0]  :=  1'b0;
        SC_MATH[0]  :=  1'b1;
        SC_I0ID[0]  :=  1'b0;
    }
    else if(CP_MODEA == "ARITH2")
    {
        SC_I5CONST[0]  :=  1'b0;
        SC_CARRY[0]  :=  1'b0;
        SC_MATH[0]  :=  1'b1;
        SC_I0ID[0]  :=  1'b1;
    }
    else if(CP_MODEA == "ARITH3")
    {
        SC_I5CONST[0]  :=  1'b0;
        SC_CARRY[0]  :=  1'b1;
        SC_MATH[0]  :=  1'b0;
        SC_I0ID[0]  :=  1'b1;
    }
    else if(CP_MODEA == "ARITH4")
    {
        SC_I5CONST[0]  :=  1'b0;
        SC_CARRY[0]  :=  1'b1;
        SC_MATH[0]  :=  1'b1;
        SC_I0ID[0]  :=  1'b0;
    }
    else if(CP_MODEA == "ARITH5")
    {
        SC_I5CONST[0]  :=  1'b0;
        SC_CARRY[0]  :=  1'b1;
        SC_MATH[0]  :=  1'b1;
        SC_I0ID[0]  :=  1'b1;
    }
    else if(CP_MODEA == "ARITH6")
    {
        SC_I5CONST[0]  :=  1'b1;
        SC_CARRY[0]  :=  1'b0;
        SC_MATH[0]  :=  1'b0;
        SC_I0ID[0]  :=  1'b0;
    }
    else if(CP_MODEA == "ARITH7")
    {
        SC_I5CONST[0]  :=  1'b1;
        SC_CARRY[0]  :=  1'b0;
        SC_MATH[0]  :=  1'b0;
        SC_I0ID[0]  :=  1'b1;
    }
    else if(CP_MODEA == "ARITH8")
    {
        SC_I5CONST[0]  :=  1'b1;
        SC_CARRY[0]  :=  1'b0;
        SC_MATH[0]  :=  1'b1;
        SC_I0ID[0]  :=  1'b1;
    }
    else if(CP_MODEA == "ARITH9")
    {
        SC_I5CONST[0]  :=  1'b1;
        SC_CARRY[0]  :=  1'b1;
        SC_MATH[0]  :=  1'b0;
        SC_I0ID[0]  :=  1'b0;
    }
    else if(CP_MODEA == "ARITH10")
    {
        SC_I5CONST[0]  :=  1'b1;
        SC_CARRY[0]  :=  1'b1;
        SC_MATH[0]  :=  1'b0;
        SC_I0ID[0]  :=  1'b1;
    }
    else if(CP_MODEA == "ARITH11")
    {
        SC_I5CONST[0]  :=  1'b1;
        SC_CARRY[0]  :=  1'b1;
        SC_MATH[0]  :=  1'b1;
        SC_I0ID[0]  :=  1'b1;
    }
    else
    {
        SC_I0ID[0]  :=  1'b0;
        SC_MATH[0]  :=  1'b0;
        SC_CARRY[0]  :=  1'b0;
        SC_I5CONST[0]  :=  1'b0;
        error("MODE(%s) is not support!",CP_MODEA);
    }

//initial config body0 end


//initial config body1 begin
    if (CP_MODEB == "LUT5" ||  CP_MODEB == "ROM" ||  CP_MODEB == "WAND" ||  CP_MODEB == "PRIENC" || CP_MODEB == "LATCH")
    {
        SC_I5CONST[1]  :=  1'b0;
        SC_CARRY[1]  :=  1'b1;
        SC_MATH[1]  :=  1'b0;
        SC_I0ID[1]  :=  1'b0;
    }
    else if(CP_MODEB == "MUX4" || CP_MODEB == "LUT5M")
    {
        SC_I5CONST[1]  :=  1'b0;
        SC_CARRY[1]  :=  1'b0;
        SC_MATH[1]  :=  1'b0;
        SC_I0ID[1]  :=  1'b1;
    }
    else if(CP_MODEB == "ARITH")
    {
        SC_I5CONST[1]  :=  1'b1;
        SC_CARRY[1]  :=  1'b0;
        SC_MATH[1]  :=  1'b1;
        SC_I0ID[1]  :=  1'b0;
    }
    else if(CP_MODEB == "XOR")
    {
        SC_I5CONST[1]  :=  1'b1;
        SC_CARRY[1]  :=  1'b1;
        SC_MATH[1]  :=  1'b1;
        SC_I0ID[1]  :=  1'b0;
    }
    else if(CP_MODEB == "COMP")
    {
        SC_I0ID[1]  :=  1'b0;
        SC_MATH[1]  :=  1'b0;
        SC_CARRY[1]  :=  1'b0;
        SC_I5CONST[1]  :=  1'b0;
    }
    else if(CP_MODEB == "ARITH1")
    {
        SC_I5CONST[1]  :=  1'b0;
        SC_CARRY[1]  :=  1'b0;
        SC_MATH[1]  :=  1'b1;
        SC_I0ID[1]  :=  1'b0;
    }
    else if(CP_MODEB == "ARITH2")
    {
        SC_I5CONST[1]  :=  1'b0;
        SC_CARRY[1]  :=  1'b0;
        SC_MATH[1]  :=  1'b1;
        SC_I0ID[1]  :=  1'b1;
    }
    else if(CP_MODEB == "ARITH3")
    {
        SC_I5CONST[1]  :=  1'b0;
        SC_CARRY[1]  :=  1'b1;
        SC_MATH[1]  :=  1'b0;
        SC_I0ID[1]  :=  1'b1;
    }
    else if(CP_MODEB == "ARITH4")
    {
        SC_I5CONST[1]  :=  1'b0;
        SC_CARRY[1]  :=  1'b1;
        SC_MATH[1]  :=  1'b1;
        SC_I0ID[1]  :=  1'b0;
    }
    else if(CP_MODEB == "ARITH5")
    {
        SC_I5CONST[1]  :=  1'b0;
        SC_CARRY[1]  :=  1'b1;
        SC_MATH[1]  :=  1'b1;
        SC_I0ID[1]  :=  1'b1;
    }
    else if(CP_MODEB == "ARITH6")
    {
        SC_I5CONST[1]  :=  1'b1;
        SC_CARRY[1]  :=  1'b0;
        SC_MATH[1]  :=  1'b0;
        SC_I0ID[1]  :=  1'b0;
    }
    else if(CP_MODEB == "ARITH7")
    {
        SC_I5CONST[1]  :=  1'b1;
        SC_CARRY[1]  :=  1'b0;
        SC_MATH[1]  :=  1'b0;
        SC_I0ID[1]  :=  1'b1;
    }
    else if(CP_MODEB == "ARITH8")
    {
        SC_I5CONST[1]  :=  1'b1;
        SC_CARRY[1]  :=  1'b0;
        SC_MATH[1]  :=  1'b1;
        SC_I0ID[1]  :=  1'b1;
    }
    else if(CP_MODEB == "ARITH9")
    {
        SC_I5CONST[1]  :=  1'b1;
        SC_CARRY[1]  :=  1'b1;
        SC_MATH[1]  :=  1'b0;
        SC_I0ID[1]  :=  1'b0;
    }
    else if(CP_MODEB == "ARITH10")
    {
        SC_I5CONST[1]  :=  1'b1;
        SC_CARRY[1]  :=  1'b1;
        SC_MATH[1]  :=  1'b0;
        SC_I0ID[1]  :=  1'b1;
    }
    else if(CP_MODEB == "ARITH11")
    {
        SC_I5CONST[1]  :=  1'b1;
        SC_CARRY[1]  :=  1'b1;
        SC_MATH[1]  :=  1'b1;
        SC_I0ID[1]  :=  1'b1;
    }
    else
    {
        SC_I0ID[1]  :=  1'b0;
        SC_MATH[1]  :=  1'b0;
        SC_CARRY[1]  :=  1'b0;
        SC_I5CONST[1]  :=  1'b0;
        error("MODE(%s) is not support!",CP_MODEB);
    }

//initial config body1 end


//initial config body2 begin
    if (CP_MODEC == "LUT5" ||  CP_MODEC == "ROM" ||  CP_MODEC == "WAND" ||  CP_MODEC == "PRIENC" || CP_MODEC == "LATCH")
    {
        SC_I5CONST[2]  :=  1'b0;
        SC_CARRY[2]  :=  1'b1;
        SC_MATH[2]  :=  1'b0;
        SC_I0ID[2]  :=  1'b0;
    }
    else if(CP_MODEC == "MUX4" || CP_MODEC == "LUT5M")
    {
        SC_I5CONST[2]  :=  1'b0;
        SC_CARRY[2]  :=  1'b0;
        SC_MATH[2]  :=  1'b0;
        SC_I0ID[2]  :=  1'b1;
    }
    else if(CP_MODEC == "ARITH")
    {
        SC_I5CONST[2]  :=  1'b1;
        SC_CARRY[2]  :=  1'b0;
        SC_MATH[2]  :=  1'b1;
        SC_I0ID[2]  :=  1'b0;
    }
    else if(CP_MODEC == "XOR")
    {
        SC_I5CONST[2]  :=  1'b1;
        SC_CARRY[2]  :=  1'b1;
        SC_MATH[2]  :=  1'b1;
        SC_I0ID[2]  :=  1'b0;
    }
    else if(CP_MODEC == "COMP")
    {
        SC_I0ID[2]  :=  1'b0;
        SC_MATH[2]  :=  1'b0;
        SC_CARRY[2]  :=  1'b0;
        SC_I5CONST[2]  :=  1'b0;
    }
    else if(CP_MODEC == "ARITH1")
    {
        SC_I5CONST[2]  :=  1'b0;
        SC_CARRY[2]  :=  1'b0;
        SC_MATH[2]  :=  1'b1;
        SC_I0ID[2]  :=  1'b0;
    }
    else if(CP_MODEC == "ARITH2")
    {
        SC_I5CONST[2]  :=  1'b0;
        SC_CARRY[2]  :=  1'b0;
        SC_MATH[2]  :=  1'b1;
        SC_I0ID[2]  :=  1'b1;
    }
    else if(CP_MODEC == "ARITH3")
    {
        SC_I5CONST[2]  :=  1'b0;
        SC_CARRY[2]  :=  1'b1;
        SC_MATH[2]  :=  1'b0;
        SC_I0ID[2]  :=  1'b1;
    }
    else if(CP_MODEC == "ARITH4")
    {
        SC_I5CONST[2]  :=  1'b0;
        SC_CARRY[2]  :=  1'b1;
        SC_MATH[2]  :=  1'b1;
        SC_I0ID[2]  :=  1'b0;
    }
    else if(CP_MODEC == "ARITH5")
    {
        SC_I5CONST[2]  :=  1'b0;
        SC_CARRY[2]  :=  1'b1;
        SC_MATH[2]  :=  1'b1;
        SC_I0ID[2]  :=  1'b1;
    }
    else if(CP_MODEC == "ARITH6")
    {
        SC_I5CONST[2]  :=  1'b1;
        SC_CARRY[2]  :=  1'b0;
        SC_MATH[2]  :=  1'b0;
        SC_I0ID[2]  :=  1'b0;
    }
    else if(CP_MODEC == "ARITH7")
    {
        SC_I5CONST[2]  :=  1'b1;
        SC_CARRY[2]  :=  1'b0;
        SC_MATH[2]  :=  1'b0;
        SC_I0ID[2]  :=  1'b1;
    }
    else if(CP_MODEC == "ARITH8")
    {
        SC_I5CONST[2]  :=  1'b1;
        SC_CARRY[2]  :=  1'b0;
        SC_MATH[2]  :=  1'b1;
        SC_I0ID[2]  :=  1'b1;
    }
    else if(CP_MODEC == "ARITH9")
    {
        SC_I5CONST[2]  :=  1'b1;
        SC_CARRY[2]  :=  1'b1;
        SC_MATH[2]  :=  1'b0;
        SC_I0ID[2]  :=  1'b0;
    }
    else if(CP_MODEC == "ARITH10")
    {
        SC_I5CONST[2]  :=  1'b1;
        SC_CARRY[2]  :=  1'b1;
        SC_MATH[2]  :=  1'b0;
        SC_I0ID[2]  :=  1'b1;
    }
    else if(CP_MODEC == "ARITH11")
    {
        SC_I5CONST[2]  :=  1'b1;
        SC_CARRY[2]  :=  1'b1;
        SC_MATH[2]  :=  1'b1;
        SC_I0ID[2]  :=  1'b1;
    }
    else
    {
        SC_I0ID[2]  :=  1'b0;
        SC_MATH[2]  :=  1'b0;
        SC_CARRY[2]  :=  1'b0;
        SC_I5CONST[2]  :=  1'b0;
        error("MODE(%s) is not support!",CP_MODEC);
    }

//initial config body2 end


//initial config body3 begin
    if (CP_MODED == "LUT5" ||  CP_MODED == "ROM" ||  CP_MODED == "WAND" ||  CP_MODED == "PRIENC" || CP_MODED == "LATCH")
    {
        SC_I5CONST[3]  :=  1'b0;
        SC_CARRY[3]  :=  1'b1;
        SC_MATH[3]  :=  1'b0;
        SC_I0ID[3]  :=  1'b0;
    }
    else if(CP_MODED == "MUX4" || CP_MODED == "LUT5M")
    {
        SC_I5CONST[3]  :=  1'b0;
        SC_CARRY[3]  :=  1'b0;
        SC_MATH[3]  :=  1'b0;
        SC_I0ID[3]  :=  1'b1;
    }
    else if(CP_MODED == "ARITH")
    {
        SC_I5CONST[3]  :=  1'b1;
        SC_CARRY[3]  :=  1'b0;
        SC_MATH[3]  :=  1'b1;
        SC_I0ID[3]  :=  1'b0;
    }
    else if(CP_MODED == "XOR")
    {
        SC_I5CONST[3]  :=  1'b1;
        SC_CARRY[3]  :=  1'b1;
        SC_MATH[3]  :=  1'b1;
        SC_I0ID[3]  :=  1'b0;
    }
    else if(CP_MODED == "COMP")
    {
        SC_I0ID[3]  :=  1'b0;
        SC_MATH[3]  :=  1'b0;
        SC_CARRY[3]  :=  1'b0;
        SC_I5CONST[3]  :=  1'b0;
    }
    else if(CP_MODED == "ARITH1")
    {
        SC_I5CONST[3]  :=  1'b0;
        SC_CARRY[3]  :=  1'b0;
        SC_MATH[3]  :=  1'b1;
        SC_I0ID[3]  :=  1'b0;
    }
    else if(CP_MODED == "ARITH2")
    {
        SC_I5CONST[3]  :=  1'b0;
        SC_CARRY[3]  :=  1'b0;
        SC_MATH[3]  :=  1'b1;
        SC_I0ID[3]  :=  1'b1;
    }
    else if(CP_MODED == "ARITH3")
    {
        SC_I5CONST[3]  :=  1'b0;
        SC_CARRY[3]  :=  1'b1;
        SC_MATH[3]  :=  1'b0;
        SC_I0ID[3]  :=  1'b1;
    }
    else if(CP_MODED == "ARITH4")
    {
        SC_I5CONST[3]  :=  1'b0;
        SC_CARRY[3]  :=  1'b1;
        SC_MATH[3]  :=  1'b1;
        SC_I0ID[3]  :=  1'b0;
    }
    else if(CP_MODED == "ARITH5")
    {
        SC_I5CONST[3]  :=  1'b0;
        SC_CARRY[3]  :=  1'b1;
        SC_MATH[3]  :=  1'b1;
        SC_I0ID[3]  :=  1'b1;
    }
    else if(CP_MODED == "ARITH6")
    {
        SC_I5CONST[3]  :=  1'b1;
        SC_CARRY[3]  :=  1'b0;
        SC_MATH[3]  :=  1'b0;
        SC_I0ID[3]  :=  1'b0;
    }
    else if(CP_MODED == "ARITH7")
    {
        SC_I5CONST[3]  :=  1'b1;
        SC_CARRY[3]  :=  1'b0;
        SC_MATH[3]  :=  1'b0;
        SC_I0ID[3]  :=  1'b1;
    }
    else if(CP_MODED == "ARITH8")
    {
        SC_I5CONST[3]  :=  1'b1;
        SC_CARRY[3]  :=  1'b0;
        SC_MATH[3]  :=  1'b1;
        SC_I0ID[3]  :=  1'b1;
    }
    else if(CP_MODED == "ARITH9")
    {
        SC_I5CONST[3]  :=  1'b1;
        SC_CARRY[3]  :=  1'b1;
        SC_MATH[3]  :=  1'b0;
        SC_I0ID[3]  :=  1'b0;
    }
    else if(CP_MODED == "ARITH10")
    {
        SC_I5CONST[3]  :=  1'b1;
        SC_CARRY[3]  :=  1'b1;
        SC_MATH[3]  :=  1'b0;
        SC_I0ID[3]  :=  1'b1;
    }
    else if(CP_MODED == "ARITH11")
    {
        SC_I5CONST[3]  :=  1'b1;
        SC_CARRY[3]  :=  1'b1;
        SC_MATH[3]  :=  1'b1;
        SC_I0ID[3]  :=  1'b1;
    }
    else
    {
        SC_I0ID[3]  :=  1'b0;
        SC_MATH[3]  :=  1'b0;
        SC_CARRY[3]  :=  1'b0;
        SC_I5CONST[3]  :=  1'b0;
        error("MODE(%s) is not support!",CP_MODED);
    }

//initial config body3 end


//initial config body4 begin
    if (CP_Y0MUX_SEL == "FX")
    {
        SC_XDI[0]  :=  1'b0;
        SC_FDI[0]  :=  1'b0;
        SC_CDI[0]  :=  1'b0;
    }
    else if(CP_Y0MUX_SEL == "CYX")
    {
        SC_XDI[0]  :=  1'b0;
        SC_FDI[0]  :=  1'b1;
        SC_CDI[0]  :=  1'b1;
    }
    else if(CP_Y0MUX_SEL == "MF")
    {
        SC_XDI[0]  :=  1'b1;
        SC_FDI[0]  :=  1'b1;
        SC_CDI[0]  :=  1'b0;
    }
    else
    {
        SC_XDI[0]  :=  1'b0;
        SC_FDI[0]  :=  1'b0;
        SC_CDI[0]  :=  1'b0;
        error("YMUX SEL(%s) is not support!",CP_Y0MUX_SEL);
    }

//initial config body4 end


//initial config body5 begin
    if (CP_Y1MUX_SEL == "FX")
    {
        SC_XDI[1]  :=  1'b0;
        SC_FDI[1]  :=  1'b0;
        SC_CDI[1]  :=  1'b0;
    }
    else if(CP_Y1MUX_SEL == "CYX")
    {
        SC_XDI[1]  :=  1'b0;
        SC_FDI[1]  :=  1'b1;
        SC_CDI[1]  :=  1'b1;
    }
    else if(CP_Y1MUX_SEL == "MF")
    {
        SC_XDI[1]  :=  1'b1;
        SC_FDI[1]  :=  1'b1;
        SC_CDI[1]  :=  1'b0;
    }
    else
    {
        SC_XDI[1]  :=  1'b0;
        SC_FDI[1]  :=  1'b0;
        SC_CDI[1]  :=  1'b0;
        error("YMUX SEL(%s) is not support!",CP_Y1MUX_SEL);
    }

//initial config body5 end


//initial config body6 begin
    if (CP_Y2MUX_SEL == "FX")
    {
        SC_XDI[2]  :=  1'b0;
        SC_FDI[2]  :=  1'b0;
        SC_CDI[2]  :=  1'b0;
    }
    else if(CP_Y2MUX_SEL == "CYX")
    {
        SC_XDI[2]  :=  1'b0;
        SC_FDI[2]  :=  1'b1;
        SC_CDI[2]  :=  1'b1;
    }
    else if(CP_Y2MUX_SEL == "MF")
    {
        SC_XDI[2]  :=  1'b1;
        SC_FDI[2]  :=  1'b1;
        SC_CDI[2]  :=  1'b0;
    }
    else
    {
        SC_XDI[2]  :=  1'b0;
        SC_FDI[2]  :=  1'b0;
        SC_CDI[2]  :=  1'b0;
        error("YMUX SEL(%s) is not support!",CP_Y2MUX_SEL);
    }

//initial config body6 end


//initial config body7 begin
    if (CP_Y3MUX_SEL == "FX")
    {
        SC_XDI[3]  :=  1'b0;
        SC_FDI[3]  :=  1'b0;
        SC_CDI[3]  :=  1'b0;
    }
    else if(CP_Y3MUX_SEL == "CYX")
    {
        SC_XDI[3]  :=  1'b0;
        SC_FDI[3]  :=  1'b1;
        SC_CDI[3]  :=  1'b1;
    }
    else if(CP_Y3MUX_SEL == "MF")
    {
        SC_XDI[3]  :=  1'b1;
        SC_FDI[3]  :=  1'b1;
        SC_CDI[3]  :=  1'b0;
    }
    else
    {
        SC_XDI[3]  :=  1'b0;
        SC_FDI[3]  :=  1'b0;
        SC_CDI[3]  :=  1'b0;
        error("YMUX SEL(%s) is not support!",CP_Y3MUX_SEL);
    }

//initial config body7 end


//initial config body8 begin
    if (CP_Q0MUX_SEL == "YX")
    {
        SC_SREN[0]  :=  1'b0;
        SC_MDI[0]  :=  1'b0;
    }
    else if(CP_Q0MUX_SEL == "MX")
    {
        SC_SREN[0]  :=  1'b0;
        SC_MDI[0]  :=  1'b1;
    }
    else if(CP_Q0MUX_SEL == "SRQ")
    {
        SC_SREN[0]  :=  1'b1;
        SC_MDI[0]  :=  1'b0;
    }
    else
    {
        SC_SREN[0]  :=  1'b0;
        SC_MDI[0]  :=  1'b0;
        error("QMUX SEL(%s) is not support!",CP_Q0MUX_SEL);
    }

//initial config body8 end


//initial config body9 begin
    if (CP_Q1MUX_SEL == "YX")
    {
        SC_SREN[1]  :=  1'b0;
        SC_MDI[1]  :=  1'b0;
    }
    else if(CP_Q1MUX_SEL == "MX")
    {
        SC_SREN[1]  :=  1'b0;
        SC_MDI[1]  :=  1'b1;
    }
    else if(CP_Q1MUX_SEL == "SRQ")
    {
        SC_SREN[1]  :=  1'b1;
        SC_MDI[1]  :=  1'b0;
    }
    else
    {
        SC_SREN[1]  :=  1'b0;
        SC_MDI[1]  :=  1'b0;
        error("QMUX SEL(%s) is not support!",CP_Q1MUX_SEL);
    }

//initial config body9 end


//initial config body10 begin
    if (CP_Q2MUX_SEL == "YX")
    {
        SC_SREN[2]  :=  1'b0;
        SC_MDI[2]  :=  1'b0;
    }
    else if(CP_Q2MUX_SEL == "MX")
    {
        SC_SREN[2]  :=  1'b0;
        SC_MDI[2]  :=  1'b1;
    }
    else if(CP_Q2MUX_SEL == "SRQ")
    {
        SC_SREN[2]  :=  1'b1;
        SC_MDI[2]  :=  1'b0;
    }
    else
    {
        SC_SREN[2]  :=  1'b0;
        SC_MDI[2]  :=  1'b0;
        error("QMUX SEL(%s) is not support!",CP_Q2MUX_SEL);
    }

//initial config body10 end


//initial config body11 begin
    if (CP_Q3MUX_SEL == "YX")
    {
        SC_SREN[3]  :=  1'b0;
        SC_MDI[3]  :=  1'b0;
    }
    else if(CP_Q3MUX_SEL == "MX")
    {
        SC_SREN[3]  :=  1'b0;
        SC_MDI[3]  :=  1'b1;
    }
    else if(CP_Q3MUX_SEL == "SRQ")
    {
        SC_SREN[3]  :=  1'b1;
        SC_MDI[3]  :=  1'b0;
    }
    else
    {
        SC_SREN[3]  :=  1'b0;
        SC_MDI[3]  :=  1'b0;
        error("QMUX SEL(%s) is not support!",CP_Q3MUX_SEL);
    }

//initial config body11 end


//initial config body12 begin
    if (CP_QABMUX_SEL == "Y6")
    {
        SC_SREN_APP[0]  :=  1'b0;
        SC_MDI_APP[0]  :=  1'b0;
    }
    else if(CP_QABMUX_SEL == "PY")
    {
        SC_SREN_APP[0]  :=  1'b0;
        SC_MDI_APP[0]  :=  1'b1;
    }
    else if(CP_QABMUX_SEL == "SRQ")
    {
        SC_SREN_APP[0]  :=  1'b1;
        SC_MDI_APP[0]  :=  1'b0;
    }
    else
    {
        SC_SREN_APP[0]  :=  1'b0;
        SC_MDI_APP[0]  :=  1'b0;
        error("QABMUX SEL(%s) is not support!",CP_QABMUX_SEL);
    }

//initial config body12 end


//initial config body13 begin
    if (CP_QCDMUX_SEL == "Y6")
    {
        SC_SREN_APP[1]  :=  1'b0;
        SC_MDI_APP[1]  :=  1'b0;
    }
    else if(CP_QCDMUX_SEL == "PY")
    {
        SC_SREN_APP[1]  :=  1'b0;
        SC_MDI_APP[1]  :=  1'b1;
    }
    else if(CP_QCDMUX_SEL == "SRQ")
    {
        SC_SREN_APP[1]  :=  1'b1;
        SC_MDI_APP[1]  :=  1'b0;
    }
    else
    {
        SC_SREN_APP[0]  :=  1'b0;
        SC_MDI_APP[0]  :=  1'b0;
        error("QCDMUX SEL(%s) is not support!",CP_QCDMUX_SEL);
    }

//initial config body13 end


//initial config body14 begin
    if (CP_ABPMUX_SEL == "X0D")
    {
        SC_DDIS_APP[0]  :=  1'b0;
    }
    else if(CP_ABPMUX_SEL == "X1D")
    {
        SC_DDIS_APP[0]  :=  1'b1;
    }
    else
    {
        SC_DDIS_APP[0]  :=  1'b0;
        error("ABPMUX SEL(%s) is not support!",CP_ABPMUX_SEL);
    }

//initial config body14 end


//initial config body15 begin
    if (CP_CDPMUX_SEL == "X0D")
    {
        SC_DDIS_APP[1]  :=  1'b0;
    }
    else if(CP_CDPMUX_SEL == "X1D")
    {
        SC_DDIS_APP[1]  :=  1'b1;
    }
    else
    {
        SC_DDIS_APP[1]  :=  1'b0;
        error("CDPMUX SEL(%s) is not support!",CP_CDPMUX_SEL);
    }

//initial config body15 end


//initial config body16 begin
    if (CP_CEMUX_SEL == "LOCAL")
    {
        SC_CECHAIN  :=  1'b0;
    }
    else if(CP_CEMUX_SEL == "CHAIN")
    {
        SC_CECHAIN  :=  1'b1;
    }
    else
    {
        SC_CECHAIN  :=  1'b0;
        error("CEMUX SEL(%s) is not support!",CP_CEMUX_SEL);
    }

//initial config body16 end


//initial config body17 begin
    if (CP_RSMUX_SEL == "LOCAL")
    {
        SC_RSCHAIN  :=  1'b0;
    }
    else if(CP_RSMUX_SEL == "CHAIN")
    {
        SC_RSCHAIN  :=  1'b1;
    }
    else
    {
        SC_RSCHAIN  :=  1'b0;
        error("RSMUX SEL(%s) is not support!",CP_RSMUX_SEL);
    }

//initial config body17 end


//initial config body18 begin
    if (CP_CLK_POL == "FALSE")
    {
        SC_PICLK  :=  1'b0;
    }
    else if(CP_CLK_POL == "TRUE")
    {
        SC_PICLK  :=  1'b1;
    }
    else
    {
        SC_PICLK  :=  1'b0;
        error("CLK POL(%s) is not support!",CP_CLK_POL);
    }

//initial config body18 end


//initial config body19 begin
    if (CP_LCE_POL == "FALSE")
    {
        SC_PICE  :=  1'b0;
    }
    else if(CP_LCE_POL == "TRUE")
    {
        SC_PICE  :=  1'b1;
    }
    else
    {
        SC_PICE  :=  1'b0;
        error("LCE POL(%s) is not support!",CP_LCE_POL);
    }

//initial config body19 end


//initial config body20 begin
    if (CP_LRS_POL == "FALSE")
    {
        SC_PIRS  :=  1'b0;
    }
    else if(CP_LRS_POL == "TRUE")
    {
        SC_PIRS  :=  1'b1;
    }
    else
    {
        SC_PIRS  :=  1'b0;
        error("LRS POL(%s) is not support!",CP_LRS_POL);
    }

//initial config body20 end


//initial config body21 begin
    if (CP_LCE_EN == "FALSE")
    {
        SC_LCE_EN  :=  1'b0;
    }
    else if(CP_LCE_EN == "TRUE")
    {
        SC_LCE_EN  :=  1'b1;
    }
    else
    {
        SC_LCE_EN  :=  1'b0;
        error("LCE EN(%s) is not support!",CP_LCE_EN);
    }

//initial config body21 end


//initial config body22 begin
    if (CP_LRS_EN == "FALSE")
    {
        SC_LRS_EN  :=  1'b0;
    }
    else if(CP_LRS_EN == "TRUE")
    {
        SC_LRS_EN  :=  1'b1;
    }
    else
    {
        SC_LRS_EN  :=  1'b0;
        error("LRS EN(%s) is not support!",CP_LRS_EN);
    }

//initial config body22 end


//initial config body23 begin
    if (CP_RS_MODE == "SYNC")
    {
        SC_ASYNC  :=  1'b0;
    }
    else if(CP_RS_MODE == "ASYNC")
    {
        SC_ASYNC  :=  1'b1;
    }
    else
    {
        SC_ASYNC  :=  1'b0;
        error("RS MODE(%s) is not support!",CP_RS_MODE);
    }

//initial config body23 end


//initial config body24 begin
    if (CP_FF0_RS == "SET")
    {
        SC_RSS[0]  :=  1'b0;
    }
    else if(CP_FF0_RS == "RESET")
    {
        SC_RSS[0]  :=  1'b1;
    }
    else
    {
        SC_RSS[0]  :=  1'b0;
        error("FF0 RS(%s) is not support!",CP_FF0_RS);
    }

//initial config body24 end


//initial config body25 begin
    if (CP_FF1_RS == "SET")
    {
        SC_RSS[1]  :=  1'b0;
    }
    else if(CP_FF1_RS == "RESET")
    {
        SC_RSS[1]  :=  1'b1;
    }
    else
    {
        SC_RSS[1]  :=  1'b0;
        error("FF1 RS(%s) is not support!",CP_FF1_RS);
    }

//initial config body25 end


//initial config body26 begin
    if (CP_FF2_RS == "SET")
    {
        SC_RSS[2]  :=  1'b0;
    }
    else if(CP_FF2_RS == "RESET")
    {
        SC_RSS[2]  :=  1'b1;
    }
    else
    {
        SC_RSS[2]  :=  1'b0;
        error("FF2 RS(%s) is not support!",CP_FF2_RS);
    }

//initial config body26 end


//initial config body27 begin
    if (CP_FF3_RS == "SET")
    {
        SC_RSS[3]  :=  1'b0;
    }
    else if(CP_FF3_RS == "RESET")
    {
        SC_RSS[3]  :=  1'b1;
    }
    else
    {
        SC_RSS[3]  :=  1'b0;
        error("FF3 RS(%s) is not support!",CP_FF3_RS);
    }

//initial config body27 end


//initial config body28 begin
    if (CP_FFAB_RS == "SET")
    {
        SC_RSS_APP[0]  :=  1'b0;
    }
    else if(CP_FFAB_RS == "RESET")
    {
        SC_RSS_APP[0]  :=  1'b1;
    }
    else
    {
        SC_RSS_APP[0]  :=  1'b0;
        error("FFAB RS(%s) is not support!",CP_FFAB_RS);
    }

//initial config body28 end


//initial config body29 begin
    if (CP_FFCD_RS == "SET")
    {
        SC_RSS_APP[1]  :=  1'b0;
    }
    else if(CP_FFCD_RS == "RESET")
    {
        SC_RSS_APP[1]  :=  1'b1;
    }
    else
    {
        SC_RSS_APP[1]  :=  1'b0;
        error("FFCD RS(%s) is not support!",CP_FFCD_RS);
    }

//initial config body29 end


//initial config body30 begin
    if (CP_GRS_EN == "FALSE")
    {
        SC_GRS_DIS  :=  1'b1;
    }
    else if(CP_GRS_EN == "TRUE")
    {
        SC_GRS_DIS  :=  1'b0;
    }
    else
    {
        SC_GRS_DIS  :=  1'b1;
        error("GRS_EN(%s) is not support!",CP_GRS_EN);
    }

//initial config body30 end

};

//grid device configure body end


//timing  clma_tnl of CLMA
//{
//    wire ntL5A, ntL5B, ntL5C, ntL5D;
//    wire ntCYA, ntCYB, ntCYC, ntCYD;
//    wire ntY6AB, ntY6CD, ntL7OUT, ntL8;
//    wire ntCLK;
//    wire ntY0, ntY1, ntY2, ntY3;
//    wire ntQ0, ntQ1, ntQ2, ntQ3, ntQP0, ntQP1;
/////////////////////
/////////////////////
/////////////////////
/////////////////////
//    if (CP_MODEA != "LUT5" && CP_MODEA != "ROM"   && CP_MODEA != "WAND" && CP_MODEA != "PRIENC" && 
//        CP_MODEA != "MUX4" && CP_MODEA != "ARITH" && CP_MODEA != "XOR"  && CP_MODEA != "COMP")
//    {
//        error("Illegal configuration to generate timing model MODE : %s", CP_MODEA);
//    }
//    if (CP_MODEB != "LUT5" && CP_MODEB != "ROM"   && CP_MODEB != "WAND" && CP_MODEB != "PRIENC" && 
//        CP_MODEB != "MUX4" && CP_MODEB != "ARITH" && CP_MODEB != "XOR"  && CP_MODEB != "COMP")
//    {
//        error("Illegal configuration to generate timing model MODE : %s", CP_MODEB);
//    }
//    if (CP_MODEC != "LUT5" && CP_MODEC != "ROM"   && CP_MODEC != "WAND" && CP_MODEC != "PRIENC" && 
//        CP_MODEC != "MUX4" && CP_MODEC != "ARITH" && CP_MODEC != "XOR"  && CP_MODEC != "COMP")
//    {
//        error("Illegal configuration to generate timing model MODE : %s", CP_MODEC);
//    }
//    if (CP_MODED != "LUT5" && CP_MODED != "ROM"   && CP_MODED != "WAND" && CP_MODED != "PRIENC" && 
//        CP_MODED != "MUX4" && CP_MODED != "ARITH" && CP_MODED != "XOR"  && CP_MODED != "COMP")
//    {
//        error("Illegal configuration to generate timing model MODE : %s", CP_MODED);
//    }
//
//    if(CP_MODEA == "LUT5" ||  CP_MODEA == "ROM" ||  CP_MODEA == "WAND" ||  CP_MODEA == "PRIENC")
//    {
//        if (CP_INITA == 32'hAAAA_AAAA || CP_INITA == 32'hCCCC_CCCC || CP_INITA == 32'hF0F0_F0F0 || CP_INITA == 32'hFF00_FF00 || CP_INITA == 32'hFFFF_0000 || CP_INITA == 32'h0000_0000 || CP_INITA == 32'hFFFF_FFFF)
//        {
//            ntL5A <= (CP_INITA == 32'hAAAA_AAAA) ? A0 : 
//                     (CP_INITA == 32'hCCCC_CCCC) ? A1 :
//                     (CP_INITA == 32'hF0F0_F0F0) ? A2 :
//                     (CP_INITA == 32'hFF00_FF00) ? A3 :
//                     (CP_INITA == 32'hFFFF_0000) ? A4 :
//                     (CP_INITA == 32'hFFFF_FFFF) ? 1'b1 : 1'b0;
//        }
//        else if (CP_INITA == 32'h5555_5555 || CP_INITA == 32'h3333_3333 || CP_INITA == 32'h0F0F_0F0F || CP_INITA == 32'h00FF_00FF || CP_INITA == 32'h0000_FFFF)
//        {
//            operator V_INV FYAINV
//                port map
//                (
//                    I => (CP_INITA == 32'h5555_5555) ? A0 : 
//                         (CP_INITA == 32'h3333_3333) ? A1 :
//                         (CP_INITA == 32'h0F0F_0F0F) ? A2 :
//                         (CP_INITA == 32'h00FF_00FF) ? A3 :
//                                                       A4 ,
//                    Z => ntL5A
//                );
//        }
//        else
//        {
//            operator V_LUT5 FYA
//               parameter map
//               (
//                   INIT => CP_INITA
//               )
//               port map
//               (
//                   I0 => A0,
//                   I1 => A1,
//                   I2 => A2,
//                   I3 => A3,
//                   I4 => A4,
//                   Y  => ntL5A
//               );
//        }
//    }
//    else if(CP_MODEA == "MUX4")
//    {
//        operator V_LUT5M FYA
//            parameter map
//            (
//                INIT => CP_INITA
//            )
//            port map
//            (
//                I0  => A0,
//                ID  => AD,
//                I1  => A1,
//                I2  => A2,
//                I3  => A3,
//                I4  => A4,
//                Z   => ntL5A
//            );
//    }
//    else if (CP_MODEA == "ARITH" || CP_MODEA == "XOR" || CP_MODEA == "COMP")
//    {
//        operator V_LUT5CARRY FYA
//            parameter map
//            (
//                INIT        =>  CP_INITA,
//                ID_TO_LUT   => "FALSE",
//                CIN_TO_LUT  => (CP_MODEA == "XOR" || CP_MODEA == "ARITH")  ? "TRUE": "FALSE",
//                I4_TO_CARRY => (CP_MODEA == "ARITH" || CP_MODEA == "COMP") ? "TRUE": "FALSE",
//                I4_TO_LUT   => (CP_MODEA == "COMP") ? "TRUE": "FALSE"
//            )
//            port map
//            (
//               CIN  => CIN,
//               I0   => A0,
//               I1   => A1,
//               I2   => A2,
//               I3   => A3,
//               I4   => A4,
//               ID   => AD,
//               COUT => ntCYA,
//               S    => ntL5A
//            );
//    }
//
//    if(CP_MODEB == "LUT5" ||  CP_MODEB == "ROM" ||  CP_MODEB == "WAND" ||  CP_MODEB == "PRIENC")
//    {
//        if (CP_INITB == 32'hAAAA_AAAA || CP_INITB == 32'hCCCC_CCCC || CP_INITB == 32'hF0F0_F0F0 || CP_INITB == 32'hFF00_FF00 || CP_INITB == 32'hFFFF_0000 || CP_INITB == 32'h0000_0000 || CP_INITB == 32'hFFFF_FFFF)
//        {
//            ntL5B <= (CP_INITB == 32'hAAAA_AAAA) ? B0 : 
//                     (CP_INITB == 32'hCCCC_CCCC) ? B1 :
//                     (CP_INITB == 32'hF0F0_F0F0) ? B2 :
//                     (CP_INITB == 32'hFF00_FF00) ? B3 : 
//                     (CP_INITB == 32'hFFFF_0000) ? B4 : 
//                     (CP_INITB == 32'hFFFF_FFFF) ? 1'b1 : 1'b0;
//        }
//        else if (CP_INITB == 32'h5555_5555 || CP_INITB == 32'h3333_3333 || CP_INITB == 32'h0F0F_0F0F || CP_INITB == 32'h00FF_00FF || CP_INITB == 32'h0000_FFFF)
//        {
//            operator V_INV FYBINV
//                port map
//                (
//                    I => (CP_INITB == 32'h5555_5555) ? B0 : 
//                         (CP_INITB == 32'h3333_3333) ? B1 :
//                         (CP_INITB == 32'h0F0F_0F0F) ? B2 :
//                         (CP_INITB == 32'h00FF_00FF) ? B3 :
//                                                       B4 ,
//                    Z => ntL5B
//                );
//        }
//        else
//        {
//            operator V_LUT5 FYB
//               parameter map
//               (
//                   INIT => CP_INITB
//               )
//               port map
//               (
//                   I0 => B0,
//                   I1 => B1,
//                   I2 => B2,
//                   I3 => B3,
//                   I4 => B4,
//                   Y  => ntL5B
//               );
//        }
//    }
//    else if(CP_MODEB == "MUX4")
//    {
//        operator V_LUT5M FYB
//            parameter map
//            (
//                INIT => CP_INITB
//            )
//            port map
//            (
//                I0  => B0,
//                ID  => BD,
//                I1  => B1,
//                I2  => B2,
//                I3  => B3,
//                I4  => B4,
//                Z   => ntL5B
//            );
//    }
//    else if (CP_MODEB == "ARITH" || CP_MODEB == "XOR" || CP_MODEB == "COMP")
//    {
//        operator V_LUT5CARRY FYB
//            parameter map
//            (
//                INIT        =>  CP_INITB,
//                ID_TO_LUT   => "FALSE",
//                CIN_TO_LUT  => (CP_MODEB == "XOR" || CP_MODEB == "ARITH")  ? "TRUE": "FALSE",
//                I4_TO_CARRY => (CP_MODEB == "ARITH" || CP_MODEB == "COMP") ? "TRUE": "FALSE",
//                I4_TO_LUT   => (CP_MODEB == "COMP") ? "TRUE": "FALSE"
//            )
//            port map
//            (
//               CIN  => ntCYA,
//               I0   => B0,
//               I1   => B1,
//               I2   => B2,
//               I3   => B3,
//               I4   => B4,
//               ID   => BD,
//               COUT => ntCYB,
//               S    => ntL5B
//            );
//    }
//
//    if(CP_MODEC == "LUT5" ||  CP_MODEC == "ROM" ||  CP_MODEC == "WAND" ||  CP_MODEC == "PRIENC")
//    {
//        if (CP_INITC == 32'hAAAA_AAAA || CP_INITC == 32'hCCCC_CCCC || CP_INITC == 32'hF0F0_F0F0 || CP_INITC == 32'hFF00_FF00 || CP_INITC == 32'hFFFF_0000 || CP_INITC == 32'h0000_0000 || CP_INITC == 32'hFFFF_FFFF)
//        {
//            ntL5C <= (CP_INITC == 32'hAAAA_AAAA) ? C0 : 
//                     (CP_INITC == 32'hCCCC_CCCC) ? C1 :
//                     (CP_INITC == 32'hF0F0_F0F0) ? C2 :
//                     (CP_INITC == 32'hFF00_FF00) ? C3 : 
//                     (CP_INITC == 32'hFFFF_0000) ? C4 : 
//                     (CP_INITC == 32'hFFFF_FFFF) ? 1'b1 : 1'b0;
//        }
//        else if (CP_INITC == 32'h5555_5555 || CP_INITC == 32'h3333_3333 || CP_INITC == 32'h0F0F_0F0F || CP_INITC == 32'h00FF_00FF || CP_INITC == 32'h0000_FFFF)
//        {
//            operator V_INV FYCINV
//                port map
//                (
//                    I => (CP_INITC == 32'h5555_5555) ? C0 :
//                         (CP_INITC == 32'h3333_3333) ? C1 :
//                         (CP_INITC == 32'h0F0F_0F0F) ? C2 :
//                         (CP_INITC == 32'h00FF_00FF) ? C3 :
//                                                       C4 ,
//                    Z => ntL5C
//                );
//        }
//        else
//        {
//            operator V_LUT5 FYC
//               parameter map
//               (
//                   INIT => CP_INITC
//               )
//               port map
//               (
//                   I0 => C0,
//                   I1 => C1,
//                   I2 => C2,
//                   I3 => C3,
//                   I4 => C4,
//                   Y  => ntL5C
//               );
//        }
//    }
//    else if(CP_MODEC == "MUX4")
//    {
//        operator V_LUT5M FYC
//            parameter map
//            (
//                INIT => CP_INITC
//            )
//            port map
//            (
//                I0  => C0,
//                ID  => CD,
//                I1  => C1,
//                I2  => C2,
//                I3  => C3,
//                I4  => C4,
//                Z   => ntL5C
//            );
//    }
//    else if (CP_MODEC == "ARITH" || CP_MODEC == "XOR" || CP_MODEC == "COMP")
//    {
//        operator V_LUT5CARRY FYC
//            parameter map
//            (
//                INIT        =>  CP_INITC,
//                ID_TO_LUT   => "FALSE",
//                CIN_TO_LUT  => (CP_MODEC == "XOR" || CP_MODEC == "ARITH")  ? "TRUE": "FALSE",
//                I4_TO_CARRY => (CP_MODEC == "ARITH" || CP_MODEC == "COMP") ? "TRUE": "FALSE",
//                I4_TO_LUT   => (CP_MODEC == "COMP") ? "TRUE": "FALSE"
//            )
//            port map
//            (
//               CIN  => ntCYB,
//               I0   => C0,
//               I1   => C1,
//               I2   => C2,
//               I3   => C3,
//               I4   => C4,
//               ID   => CD,
//               COUT => ntCYC,
//               S    => ntL5C
//            );
//    }
//
//    if(CP_MODED == "LUT5" ||  CP_MODED == "ROM" ||  CP_MODED == "WAND" ||  CP_MODED == "PRIENC")
//    {
//        if (CP_INITD == 32'hAAAA_AAAA || CP_INITD == 32'hCCCC_CCCC || CP_INITD == 32'hF0F0_F0F0 || CP_INITD == 32'hFF00_FF00 || CP_INITD == 32'hFFFF_0000 || CP_INITD == 32'h0000_0000 || CP_INITD == 32'hFFFF_FFFF)
//        {
//            ntL5D <= (CP_INITD == 32'hAAAA_AAAA) ? D0 :
//                     (CP_INITD == 32'hCCCC_CCCC) ? D1 :
//                     (CP_INITD == 32'hF0F0_F0F0) ? D2 :
//                     (CP_INITD == 32'hFF00_FF00) ? D3 : 
//                     (CP_INITD == 32'hFFFF_0000) ? D4 : 
//                     (CP_INITD == 32'hFFFF_FFFF) ? 1'b1 : 1'b0;
//        }
//        else if (CP_INITD == 32'h5555_5555 || CP_INITD == 32'h3333_3333 || CP_INITD == 32'h0F0F_0F0F || CP_INITD == 32'h00FF_00FF || CP_INITD == 32'h0000_FFFF)
//        {
//            operator V_INV FYCINV
//                port map
//                (
//                    I => (CP_INITD == 32'h5555_5555) ? D0 :
//                         (CP_INITD == 32'h3333_3333) ? D1 :
//                         (CP_INITD == 32'h0F0F_0F0F) ? D2 :
//                         (CP_INITD == 32'h00FF_00FF) ? D3 :
//                                                       D4 ,
//                    Z => ntL5D
//                );
//        }
//        else
//        {
//            operator V_LUT5 FYC
//               parameter map
//               (
//                   INIT => CP_INITD
//               )
//               port map
//               (
//                   I0 => D0,
//                   I1 => D1,
//                   I2 => D2,
//                   I3 => D3,
//                   I4 => D4,
//                   Y  => ntL5D
//               );
//        }
//    }
//    else if(CP_MODED == "MUX4")
//    {
//        operator V_LUT5M FYC
//            parameter map
//            (
//                INIT => CP_INITD
//            )
//            port map
//            (
//                I0  => D0,
//                ID  => DD,
//                I1  => D1,
//                I2  => D2,
//                I3  => D3,
//                I4  => D4,
//                Z   => ntL5D
//            );
//    }
//    else if (CP_MODED == "ARITH" || CP_MODED == "XOR" || CP_MODED == "COMP")
//    {
//        operator V_LUT5CARRY FYC
//            parameter map
//            (
//                INIT        =>  CP_INITD,
//                ID_TO_LUT   => "FALSE",
//                CIN_TO_LUT  => (CP_MODED == "XOR" || CP_MODED == "ARITH")  ? "TRUE": "FALSE",
//                I4_TO_CARRY => (CP_MODED == "ARITH" || CP_MODED == "COMP") ? "TRUE": "FALSE",
//                I4_TO_LUT   => (CP_MODED == "COMP") ? "TRUE": "FALSE"
//            )
//            port map
//            (
//               CIN  => ntCYC,
//               I0   => D0,
//               I1   => D1,
//               I2   => D2,
//               I3   => D3,
//               I4   => D4,
//               ID   => DD,
//               COUT => ntCYD,
//               S    => ntL5D
//            );
//    }
///////////////////
///////////////////
///////////////////
///////////////////
//    operator V_MUX2  L6ABMUX
//       port map
//       (
//           I0  =>  ntL5A,
//           I1  =>  ntL5B,
//           SEL =>  M0,
//           Z   =>  ntY6AB
//       );
//
//    operator V_MUX2  L6CDMUX
//       port map
//       (
//           I0  =>  ntL5C,
//           I1  =>  ntL5D,
//           SEL =>  M1,
//           Z   =>  ntY6CD
//       );
//
//    operator V_MUX2  L7MUX
//       port map
//       (
//           I0  =>  ntY6AB,
//           I1  =>  ntY6CD,
//           SEL =>  M2,
//           Z   =>  ntL7OUT
//       );
//
//    operator V_MUX2  L8MUX
//       port map
//       (
//           I0  =>  ntL7OUT,
//           I1  =>  L7IN,
//           SEL =>  M3,
//           Z   =>  ntL8
//       );
//////////////////
//////////////////
//////////////////
//////////////////
//    if (CP_CLK_POL == "FALSE")
//    {
//        ntCLK <= CLK;
//    }
//    else
//    {
//        operator V_INV CLKINV
//            port map
//            (
//                I => CLK,
//                Z => ntCLK
//            );
//    }
//
//    string CP_LCE_TYPE = (CP_CEMUX_SEL == "CHAIN") ? "CHAIN" :
//                         (CP_LCE_EN == "TRUE" && CP_LCE_POL == "FALSE") ? "BUF" :
//                         (CP_LCE_EN == "TRUE" && CP_LCE_POL == "TRUE") ? "INV" :
//                         (CP_LCE_EN == "FALSE") ? "DISABLE" : "FALSE";
//
//    string CP_LRS_TYPE = (CP_RSMUX_SEL == "CHAIN") ? "CHAIN" :
//                         (CP_LRS_EN == "TRUE" && CP_LRS_POL == "FALSE") ? "BUF" :
//                         (CP_LRS_EN == "TRUE" && CP_LRS_POL == "TRUE")  ? "INV" :
//                         (CP_LRS_EN == "FALSE") ? "DISABLE" : "FALSE";
//
//    wire ntRSINV, ntCEINV;
//    operator V_INV CEINV
//        port map
//        (
//            I => CE,
//            Z => ntCEINV
//        );
//
//   operator V_INV RSINV
//       port map
//       (
//           I => RS,
//           Z => ntCEINV
//       );
/////////////////////
/////////////////////
/////////////////////
/////////////////////
//    ntY0 <= (CP_Y0MUX_SEL == "FX")  ? ntL5A :
//            (CP_Y0MUX_SEL == "CYX") ? ntCYA :
//            (CP_Y0MUX_SEL == "MF")  ? ntQP0 : 1'bx;
//
//    ntY1 <= (CP_Y1MUX_SEL == "FX")  ? ntL5B :
//            (CP_Y1MUX_SEL == "CYX") ? ntCYB :
//            (CP_Y1MUX_SEL == "MF")  ? ntL7OUT : 1'bx;
//
//    ntY2 <= (CP_Y2MUX_SEL == "FX")  ? ntL5C :
//            (CP_Y2MUX_SEL == "CYX") ? ntCYC :
//            (CP_Y2MUX_SEL == "MF")  ? ntQP1 : 1'bx;
//
//    ntY3 <= (CP_Y3MUX_SEL == "FX")  ? ntL5D :
//            (CP_Y3MUX_SEL == "CYX") ? ntCYD :
//            (CP_Y3MUX_SEL == "MF")  ? ntL8 : 1'bx;
/////////////////////
/////////////////////
/////////////////////
/////////////////////
//    if(CP_RS_MODE == "SYNC")
//    {
//        operator V_FFSYN FF0
//            parameter map 
//            (
//                GRS_EN    => CP_GRS_EN,
//                SET_RESET => CP_FF0_RS,
//                LRS_EN    => "TRUE"
//            )
//            port map 
//            (
//               Q  => ntQ0,
//               D  => (CP_Q0MUX_SEL == "YX")  ? ntY0 :
//                     (CP_Q0MUX_SEL == "MX")  ? M0 :
//                     (CP_Q0MUX_SEL == "SRQ") ? SRCI : 1'bx, 
//               SR => (CP_LRS_TYPE == "CHAIN") ? RSCI :
//                     (CP_LRS_TYPE == "BUF"  ) ? RS :
//                     (CP_LRS_TYPE == "INV"  ) ? ntRSINV :
//                     (CP_LRS_TYPE == "DISABLE"  ) ? 1'b0 : 1'bx, 
//               CK => ntCLK, 
//               CE => (CP_LCE_TYPE == "CHAIN") ? CECI :
//                     (CP_LCE_TYPE == "BUF"  ) ? CE :
//                     (CP_LCE_TYPE == "INV"  ) ? ntCEINV :
//                     (CP_LCE_TYPE == "DISABLE"  ) ? 1'b1 : 1'bx
//            );
//        operator V_FFSYN FFAB
//            parameter map 
//            (
//                GRS_EN    => CP_GRS_EN,
//                SET_RESET => CP_FFAB_RS,
//                LRS_EN    => "TRUE"
//            )
//            port map 
//            (
//               Q  => ntQP0,
//               D  => (CP_QABMUX_SEL == "Y6")  ? ntY6AB :
//                     (CP_QABMUX_SEL == "PY")  ? ((CP_ABPMUX_SEL == "X0D") ? AD :
//                                                 (CP_ABPMUX_SEL == "X1D") ? BD : 1'bx) :
//                     (CP_QABMUX_SEL == "SRQ") ? ntQ0 : 1'bx, 
//               SR => (CP_LRS_TYPE == "CHAIN") ? RSCI :
//                     (CP_LRS_TYPE == "BUF"  ) ? RS :
//                     (CP_LRS_TYPE == "INV"  ) ? ntRSINV :
//                     (CP_LRS_TYPE == "DISABLE"  ) ? 1'b0 : 1'bx, 
//               CK => ntCLK, 
//               CE => (CP_LCE_TYPE == "CHAIN") ? CECI :
//                     (CP_LCE_TYPE == "BUF"  ) ? CE :
//                     (CP_LCE_TYPE == "INV"  ) ? ntCEINV :
//                     (CP_LCE_TYPE == "DISABLE"  ) ? 1'b1 : 1'bx
//            );
//        operator V_FFSYN FF1
//            parameter map 
//            (
//                GRS_EN    => CP_GRS_EN,
//                SET_RESET => CP_FF1_RS,
//                LRS_EN    => "TRUE"
//            )
//            port map 
//            (
//               Q  => ntQ1,
//               D  => (CP_Q1MUX_SEL == "YX")  ? ntY1 :
//                     (CP_Q1MUX_SEL == "MX")  ? M2 :
//                     (CP_Q1MUX_SEL == "SRQ") ? ntQP0 : 1'bx, 
//               SR => (CP_LRS_TYPE == "CHAIN") ? RSCI :
//                     (CP_LRS_TYPE == "BUF"  ) ? RS :
//                     (CP_LRS_TYPE == "INV"  ) ? ntRSINV :
//                     (CP_LRS_TYPE == "DISABLE"  ) ? 1'b0 : 1'bx, 
//               CK => ntCLK, 
//               CE => (CP_LCE_TYPE == "CHAIN") ? CECI :
//                     (CP_LCE_TYPE == "BUF"  ) ? CE :
//                     (CP_LCE_TYPE == "INV"  ) ? ntCEINV :
//                     (CP_LCE_TYPE == "DISABLE"  ) ? 1'b1 : 1'bx
//            );
//        operator V_FFSYN FF2
//            parameter map 
//            (
//                GRS_EN    => CP_GRS_EN,
//                SET_RESET => CP_FF2_RS,
//                LRS_EN    => "TRUE"
//            )
//            port map 
//            (
//               Q  => ntQ2,
//               D  => (CP_Q2MUX_SEL == "YX")  ? ntY2 :
//                     (CP_Q2MUX_SEL == "MX")  ? M1 :
//                     (CP_Q2MUX_SEL == "SRQ") ? ntQ1 : 1'bx, 
//               SR => (CP_LRS_TYPE == "CHAIN") ? RSCI :
//                     (CP_LRS_TYPE == "BUF"  ) ? RS :
//                     (CP_LRS_TYPE == "INV"  ) ? ntRSINV :
//                     (CP_LRS_TYPE == "DISABLE"  ) ? 1'b0 : 1'bx, 
//               CK => ntCLK, 
//               CE => (CP_LCE_TYPE == "CHAIN") ? CECI :
//                     (CP_LCE_TYPE == "BUF"  ) ? CE :
//                     (CP_LCE_TYPE == "INV"  ) ? ntCEINV :
//                     (CP_LCE_TYPE == "DISABLE"  ) ? 1'b1 : 1'bx
//            );
//        operator V_FFSYN FFCD
//            parameter map 
//            (
//                GRS_EN    => CP_GRS_EN,
//                SET_RESET => CP_FFCD_RS,
//                LRS_EN    => "TRUE"
//            )
//            port map 
//            (
//               Q  => ntQP1,
//               D  => (CP_QCDMUX_SEL == "Y6")  ? ntY6CD :
//                     (CP_QCDMUX_SEL == "PY")  ? ((CP_CDPMUX_SEL == "X0D") ? CD :
//                                                 (CP_CDPMUX_SEL == "X1D") ? DD : 1'bx) :
//                     (CP_QCDMUX_SEL == "SRQ") ? ntQ2 : 1'bx, 
//               SR => (CP_LRS_TYPE == "CHAIN") ? RSCI :
//                     (CP_LRS_TYPE == "BUF"  ) ? RS :
//                     (CP_LRS_TYPE == "INV"  ) ? ntRSINV :
//                     (CP_LRS_TYPE == "DISABLE"  ) ? 1'b0 : 1'bx, 
//               CK => ntCLK, 
//               CE => (CP_LCE_TYPE == "CHAIN") ? CECI :
//                     (CP_LCE_TYPE == "BUF"  ) ? CE :
//                     (CP_LCE_TYPE == "INV"  ) ? ntCEINV :
//                     (CP_LCE_TYPE == "DISABLE"  ) ? 1'b1 : 1'bx
//            );
//        operator V_FFSYN FF3
//            parameter map 
//            (
//                GRS_EN    => CP_GRS_EN,
//                SET_RESET => CP_FF3_RS,
//                LRS_EN    => "TRUE"
//            )
//            port map 
//            (
//               Q  => ntQ3,
//               D  => (CP_Q3MUX_SEL == "YX")  ? ntY3 :
//                     (CP_Q3MUX_SEL == "MX")  ? M3 :
//                     (CP_Q3MUX_SEL == "SRQ") ? ntQP1 : 1'bx, 
//               SR => (CP_LRS_TYPE == "CHAIN") ? RSCI :
//                     (CP_LRS_TYPE == "BUF"  ) ? RS :
//                     (CP_LRS_TYPE == "INV"  ) ? ntRSINV :
//                     (CP_LRS_TYPE == "DISABLE"  ) ? 1'b0 : 1'bx, 
//               CK => ntCLK, 
//               CE => (CP_LCE_TYPE == "CHAIN") ? CECI :
//                     (CP_LCE_TYPE == "BUF"  ) ? CE :
//                     (CP_LCE_TYPE == "INV"  ) ? ntCEINV :
//                     (CP_LCE_TYPE == "DISABLE"  ) ? 1'b1 : 1'bx
//            );
//    }
//    else if(CP_RS_MODE == "ASYNC")
//    {
//        operator V_FFASYN FF0
//            parameter map 
//            (
//                GRS_EN    => CP_GRS_EN,
//                SET_RESET => CP_FF0_RS,
//                LRS_EN    => "TRUE"
//            )
//            port map 
//            (
//               Q  => ntQ0,
//               D  => (CP_Q0MUX_SEL == "YX")  ? ntY0 :
//                     (CP_Q0MUX_SEL == "MX")  ? M0 :
//                     (CP_Q0MUX_SEL == "SRQ") ? SRCI : 1'bx,
//               SR => (CP_LRS_TYPE == "CHAIN") ? RSCI :
//                     (CP_LRS_TYPE == "BUF"  ) ? RS :
//                     (CP_LRS_TYPE == "INV"  ) ? ntRSINV :
//                     (CP_LRS_TYPE == "DISABLE"  ) ? 1'b0 : 1'bx, 
//               CK => ntCLK, 
//               CE => (CP_LCE_TYPE == "CHAIN") ? CECI :
//                     (CP_LCE_TYPE == "BUF"  ) ? CE :
//                     (CP_LCE_TYPE == "INV"  ) ? ntCEINV :
//                     (CP_LCE_TYPE == "DISABLE"  ) ? 1'b1 : 1'bx
//            );
//        operator V_FFASYN FFAB
//            parameter map 
//            (
//                GRS_EN    => CP_GRS_EN,
//                SET_RESET => CP_FFAB_RS,
//                LRS_EN    => "TRUE"
//            )
//            port map 
//            (
//               Q  => ntQP0,
//               D  => (CP_QABMUX_SEL == "Y6")  ? ntY6AB :
//                     (CP_QABMUX_SEL == "PY")  ? ((CP_ABPMUX_SEL == "X0D") ? AD :
//                                                 (CP_ABPMUX_SEL == "X1D") ? BD : 1'bx) :
//                     (CP_QABMUX_SEL == "SRQ") ? ntQ0 : 1'bx, 
//               SR => (CP_LRS_TYPE == "CHAIN") ? RSCI :
//                     (CP_LRS_TYPE == "BUF"  ) ? RS :
//                     (CP_LRS_TYPE == "INV"  ) ? ntRSINV :
//                     (CP_LRS_TYPE == "DISABLE"  ) ? 1'b0 : 1'bx, 
//               CK => ntCLK, 
//               CE => (CP_LCE_TYPE == "CHAIN") ? CECI :
//                     (CP_LCE_TYPE == "BUF"  ) ? CE :
//                     (CP_LCE_TYPE == "INV"  ) ? ntCEINV :
//                     (CP_LCE_TYPE == "DISABLE"  ) ? 1'b1 : 1'bx
//            );
//        operator V_FFASYN FF1
//            parameter map 
//            (
//                GRS_EN    => CP_GRS_EN,
//                SET_RESET => CP_FF1_RS,
//                LRS_EN    => "TRUE"
//            )
//            port map 
//            (
//               Q  => ntQ1,
//               D  => (CP_Q1MUX_SEL == "YX")  ? ntY1 :
//                     (CP_Q1MUX_SEL == "MX")  ? M2 :
//                     (CP_Q1MUX_SEL == "SRQ") ? ntQP0 : 1'bx, 
//               SR => (CP_LRS_TYPE == "CHAIN") ? RSCI :
//                     (CP_LRS_TYPE == "BUF"  ) ? RS :
//                     (CP_LRS_TYPE == "INV"  ) ? ntRSINV :
//                     (CP_LRS_TYPE == "DISABLE"  ) ? 1'b0 : 1'bx, 
//               CK => ntCLK, 
//               CE => (CP_LCE_TYPE == "CHAIN") ? CECI :
//                     (CP_LCE_TYPE == "BUF"  ) ? CE :
//                     (CP_LCE_TYPE == "INV"  ) ? ntCEINV :
//                     (CP_LCE_TYPE == "DISABLE"  ) ? 1'b1 : 1'bx
//            );
//        operator V_FFASYN FF2
//            parameter map 
//            (
//                GRS_EN    => CP_GRS_EN,
//                SET_RESET => CP_FF2_RS,
//                LRS_EN    => "TRUE"
//            )
//            port map 
//            (
//               Q  => ntQ2,
//               D  => (CP_Q2MUX_SEL == "YX")  ? ntY2 :
//                     (CP_Q2MUX_SEL == "MX")  ? M1 :
//                     (CP_Q2MUX_SEL == "SRQ") ? ntQ1 : 1'bx, 
//               SR => (CP_LRS_TYPE == "CHAIN") ? RSCI :
//                     (CP_LRS_TYPE == "BUF"  ) ? RS :
//                     (CP_LRS_TYPE == "INV"  ) ? ntRSINV :
//                     (CP_LRS_TYPE == "DISABLE"  ) ? 1'b0 : 1'bx, 
//               CK => ntCLK, 
//               CE => (CP_LCE_TYPE == "CHAIN") ? CECI :
//                     (CP_LCE_TYPE == "BUF"  ) ? CE :
//                     (CP_LCE_TYPE == "INV"  ) ? ntCEINV :
//                     (CP_LCE_TYPE == "DISABLE"  ) ? 1'b1 : 1'bx
//            );
//        operator V_FFASYN FFCD
//            parameter map 
//            (
//                GRS_EN    => CP_GRS_EN,
//                SET_RESET => CP_FFCD_RS,
//                LRS_EN    => "TRUE"
//            )
//            port map 
//            (
//               Q  => ntQP1,
//               D  => (CP_QCDMUX_SEL == "Y6")  ? ntY6CD :
//                     (CP_QCDMUX_SEL == "PY")  ? ((CP_CDPMUX_SEL == "X0D") ? CD :
//                                                 (CP_CDPMUX_SEL == "X1D") ? DD : 1'bx) :
//                     (CP_QCDMUX_SEL == "SRQ") ? ntQ2 : 1'bx, 
//               SR => (CP_LRS_TYPE == "CHAIN") ? RSCI :
//                     (CP_LRS_TYPE == "BUF"  ) ? RS :
//                     (CP_LRS_TYPE == "INV"  ) ? ntRSINV :
//                     (CP_LRS_TYPE == "DISABLE"  ) ? 1'b0 : 1'bx, 
//               CK => ntCLK, 
//               CE => (CP_LCE_TYPE == "CHAIN") ? CECI :
//                     (CP_LCE_TYPE == "BUF"  ) ? CE :
//                     (CP_LCE_TYPE == "INV"  ) ? ntCEINV :
//                     (CP_LCE_TYPE == "DISABLE"  ) ? 1'b1 : 1'bx
//            );
//        operator V_FFASYN FF3
//            parameter map 
//            (
//                GRS_EN    => CP_GRS_EN,
//                SET_RESET => CP_FF3_RS,
//                LRS_EN    => "TRUE"
//            )
//            port map 
//            (
//               Q  => ntQ3,
//               D  => (CP_Q3MUX_SEL == "YX")  ? ntY3 :
//                     (CP_Q3MUX_SEL == "MX")  ? M3 :
//                     (CP_Q3MUX_SEL == "SRQ") ? ntQP1 : 1'bx, 
//               SR => (CP_LRS_TYPE == "CHAIN") ? RSCI :
//                     (CP_LRS_TYPE == "BUF"  ) ? RS :
//                     (CP_LRS_TYPE == "INV"  ) ? ntRSINV :
//                     (CP_LRS_TYPE == "DISABLE"  ) ? 1'b0 : 1'bx, 
//               CK => ntCLK, 
//               CE => (CP_LCE_TYPE == "CHAIN") ? CECI :
//                     (CP_LCE_TYPE == "BUF"  ) ? CE :
//                     (CP_LCE_TYPE == "INV"  ) ? ntCEINV :
//                     (CP_LCE_TYPE == "DISABLE"  ) ? 1'b1 : 1'bx
//            );
//    } 
//    else
//    {
//        error("Illegal configuration to generate timing model");
//    }
/////////////////
/////////////////
/////////////////
/////////////////
//    operator V_INV CLKCOINV
//        port map
//        (
//            I => ntCLK,
//            Z => CLKCO
//        );
//
//    SRCO <= ntQ3;
//////////////////
//////////////////
//////////////////
//////////////////
//    Y0 <= ntY0;
//    Y1 <= ntY1;
//    Y2 <= ntY2;
//    Y3 <= ntY3;
//    Y6AB <= ntY6AB;
//    Y6CD <= ntY6CD;
//    Q0 <= ntQ0;
//    Q1 <= ntQ1;
//    Q2 <= ntQ2;
//    Q3 <= ntQ3;
//    L7OUT <= ntL7OUT;
//    COUT <= ntCYD;
//    RSCO <= (CP_LRS_TYPE == "CHAIN") ? RSCI :
//            (CP_LRS_TYPE == "BUF"  ) ? RS :
//            (CP_LRS_TYPE == "INV"  ) ? ntRSINV :
//            (CP_LRS_TYPE == "DISABLE"  ) ? 1'b0 : 1'bx;
//    CECO <= (CP_LCE_TYPE == "CHAIN") ? CECI :
//            (CP_LCE_TYPE == "BUF"  ) ? CE :
//            (CP_LCE_TYPE == "INV"  ) ? ntCEINV :
//            (CP_LCE_TYPE == "DISABLE"  ) ? 1'b1 : 1'bx;
//};
