*****************************************************************

  Operator   [GTP_BUF]

  Author      []

  Abstract    []

  Copyright 2017 (c). SHENZHEN PANGO MICROSYSTEMS CO.,LTD.
  All Right Reserved.

  Revision History:
     06/27/17 - Initial version.

********************************************************************************/
implementation impl of GTP_ADC_E1
{
    bit GAVERAGE[1:0] = 2'b00;
    if (AVERAGE == "1")
    { 
        GAVERAGE = 2'b00;
    }
    else if (AVERAGE == "16")
    {
        GAVERAGE = 2'b01;
    }
    else if (AVERAGE == "64")
    {
        GAVERAGE = 2'b10;
    }
    else if (AVERAGE == "256")
    {
        GAVERAGE = 2'b11;
    }
    
    bit GCALIB[1:0] = 2'b00;
    if (CALIB == "NONE")
    {
        GCALIB = 2'b00;
    }
    else if (CALIB == "OFFSET")
    {
        GCALIB = 2'b01;
    }
    else if (CALIB == "OFFSET_GAIN")
    {
        GCALIB = 2'b11;
    }
    
    bit GREFERENCE = 1'b0;
    if (REFERENCE == "INTERNAL")
    {
        GREFERENCE = 1'b0;
    }
    else if (REFERENCE == "EXTERNAL")
    {
        GREFERENCE = 1'b1;
    }
    
    bit GCALIB_REFERENCE = 1'b0;
    if (CALIB_REFERENCE == "INTERNAL")
    {
        GCALIB_REFERENCE = 1'b0;
    }
    else if (CALIB_REFERENCE == "EXTERNAL")
    {
        GCALIB_REFERENCE = 1'b1;
    }
    
    bit GFULL_SWING[2:0] = 3'b000;
    if (FULL_SWING == "0.5V")
    {
        GFULL_SWING = 3'b000;
    }
    else if (FULL_SWING == "0.6V")
    {
        GFULL_SWING = 3'b001;
    }
    else if (FULL_SWING == "0.7V")
    {
        GFULL_SWING = 3'b010;
    }
    else if (FULL_SWING == "0.8V")
    {
        GFULL_SWING = 3'b011;
    }
    else if (FULL_SWING == "0.9V")
    {
        GFULL_SWING = 3'b100;
    }
    else if (FULL_SWING == "1.0V")
    {
        GFULL_SWING = 3'b101;
    }
    else if (FULL_SWING == "1.1V")
    {
        GFULL_SWING = 3'b110;
    }
    else if (FULL_SWING == "1.2V")
    {
        GFULL_SWING = 3'b111;
    }
    
    bit GVCM[2:0] = 3'b000;
    if (VCM == "0.8V")
    {
        GVCM = 3'b000;
    }
    else if (VCM == "0.9V")
    {
        GVCM = 3'b001;
    }
    else if (VCM == "1.0V")
    {
        GVCM = 3'b010;
    }
    else if (VCM == "1.1V")
    {
        GVCM = 3'b011;
    }
    else if (VCM == "1.2V")
    {
        GVCM = 3'b100;
    }
    else if (VCM == "1.3V")
    {
        GVCM = 3'b101;
    }
    else if (VCM == "1.4V")
    {
        GVCM = 3'b110;
    }
    else if (VCM == "1.5V")
    {
        GVCM = 3'b111;
    }
    
    bit GDIVIDER[3:0] = 4'b0000;
    if (DIVIDER == "2")
    {
        GDIVIDER = 4'b0001;
    }
    else if (DIVIDER == "3")
    {
        GDIVIDER = 4'b0010;
    }
    else if (DIVIDER == "4")
    {
        GDIVIDER = 4'b0011;
    }
    else if (DIVIDER == "5")
    {
        GDIVIDER = 4'b0100;
    }
    else if (DIVIDER == "6")
    {
        GDIVIDER = 4'b0101;
    }
    else if (DIVIDER == "7")
    {
        GDIVIDER = 4'b0110;
    }
    else if (DIVIDER == "8")
    {
        GDIVIDER = 4'b0111;
    }
    else if (DIVIDER == "9")
    {
        GDIVIDER = 4'b1000;
    }
    else if (DIVIDER == "10")
    {
        GDIVIDER = 4'b1001;
    }
    else if (DIVIDER == "11")
    {
        GDIVIDER = 4'b1010;
    }
    else if (DIVIDER == "12")
    {
        GDIVIDER = 4'b1011;
    }
    else if (DIVIDER == "13")
    {
        GDIVIDER = 4'b1100;
    }
    else if (DIVIDER == "14")
    {
        GDIVIDER = 4'b1101;
    }
    else if (DIVIDER == "15")
    {
        GDIVIDER = 4'b1110;
    }
    else if (DIVIDER == "16")
    {
        GDIVIDER = 4'b1111;
    }
    
    
    bit GADC_MODE[1:0] = 2'b00;
    bit GEVENT_DRIVE = 1'b0;
    bit GADC_MODE_1MSPS = 1'b0;
    bit GCLKSWITCH = 1'b0;
    bit GINTERNAL_VOL_SEL[1:0] = 2'b00;
    bit GSINGLE_CH_SEL[3:0] = 4'b0000;
    bit GSINGLE_CH_IN[1:0] = 2'b00;
    
    if (ADC_MODE == "DEFAULT")
    {
        GADC_MODE = 2'b00;
    }
    else if (ADC_MODE == "SINGLE_PASS")
    {
        GADC_MODE = 2'b01;
    }
    else if (ADC_MODE == "CONTINUE_SEQ")
    {
        GADC_MODE = 2'b10;
    }
    else if (ADC_MODE == "SINGLE_CHANNEL")
    {
        GADC_MODE = 2'b11;
    }
    
    if (EVENT_DRIVE == "FALSE")
    {
        GEVENT_DRIVE = 1'b0;
    }
    else if (EVENT_DRIVE == "TRUE")
    {
        GEVENT_DRIVE = 1'b1;
    }
    
    if (ADC_MODE_1MSPS == "FALSE")
    {
        GADC_MODE_1MSPS = 1'b0;
    }
    else if (ADC_MODE_1MSPS == "TRUE")
    {
        GADC_MODE_1MSPS = 1'b1;
    }
    
    if (CLKSWITCH == "FALSE")
    {
        GCLKSWITCH = 1'b0;
    }
    else if (CLKSWITCH == "TRUE")
    {
        GCLKSWITCH = 1'b1;
    }
    
    if (INTERNAL_VOL_SEL == "VDD33")
    {
        GINTERNAL_VOL_SEL = 2'b01;
    }
    else if (INTERNAL_VOL_SEL == "VDD11")
    {
        GINTERNAL_VOL_SEL = 2'b10;
    }
    else if (INTERNAL_VOL_SEL == "VDDM")
    {
        GINTERNAL_VOL_SEL = 2'b11;
    }
    
    if (SINGLE_CH_SEL == "0")
    {
        GSINGLE_CH_SEL = 4'b0000;
    }
    else if (SINGLE_CH_SEL == "1")
    {
        GSINGLE_CH_SEL = 4'b0001;
    }
    else if (SINGLE_CH_SEL == "2")
    {
        GSINGLE_CH_SEL = 4'b0010;
    }
    else if (SINGLE_CH_SEL == "3")
    {
        GSINGLE_CH_SEL = 4'b0011;
    }
    else if (SINGLE_CH_SEL == "4")
    {
        GSINGLE_CH_SEL = 4'b0100;
    }
    else if (SINGLE_CH_SEL == "5")
    {
        GSINGLE_CH_SEL = 4'b0101;
    }
    else if (SINGLE_CH_SEL == "6")
    {
        GSINGLE_CH_SEL = 4'b0110;
    }
    else if (SINGLE_CH_SEL == "7")
    {
        GSINGLE_CH_SEL = 4'b0111;
    }
    else if (SINGLE_CH_SEL == "8")
    {
        GSINGLE_CH_SEL = 4'b1000;
    }
    else if (SINGLE_CH_SEL == "9")
    {
        GSINGLE_CH_SEL = 4'b1001;
    }
    else if (SINGLE_CH_SEL == "10")
    {
        GSINGLE_CH_SEL = 4'b1010;
    }
    else if (SINGLE_CH_SEL == "11")
    {
        GSINGLE_CH_SEL = 4'b1011;
    }
    else if (SINGLE_CH_SEL == "12")
    {
        GSINGLE_CH_SEL = 4'b1100;
    }
    else if (SINGLE_CH_SEL == "13")
    {
        GSINGLE_CH_SEL = 4'b1101;
    }
    else if (SINGLE_CH_SEL == "14")
    {
        GSINGLE_CH_SEL = 4'b1110;
    }
    else if (SINGLE_CH_SEL == "15")
    {
        GSINGLE_CH_SEL = 4'b1111;
    }
    
    if (SINGLE_CH_IN == "SINGLE_END")
    {
        GSINGLE_CH_IN = 2'b00;
    }
    else if (SINGLE_CH_IN == "UNIPOLAR")
    {
        GSINGLE_CH_IN = 2'b01;
    }
    else if (SINGLE_CH_IN == "BIPOLAR")
    {
        GSINGLE_CH_IN = 2'b11;
    }
    
    bit GSEQ_CH11_10_SEL[1:0] = 2'b00;
    bit GSEQ_CH9_8_SEL[1:0] = 2'b00;
    bit GSEQ_CH7_6_SEL[1:0] = 2'b00;
    bit GSEQ_CH5_4_SEL[1:0] = 2'b00;
    bit GSEQ_CH3_2_SEL[1:0] = 2'b00;
    bit GSEQ_CH1_0_SEL[1:0] = 2'b00;
    if (SEQ_CH11_10_SEL == "NONE")
    {
        GSEQ_CH11_10_SEL = 2'b00;
    }
    else if (SEQ_CH11_10_SEL == "CH10")
    {
        GSEQ_CH11_10_SEL = 2'b01;
    }
    else if (SEQ_CH11_10_SEL == "CH11")
    {
        GSEQ_CH11_10_SEL = 2'b10;
    }
    else if (SEQ_CH11_10_SEL == "ALL")
    {
        GSEQ_CH11_10_SEL = 2'b11;
    }
    
    if (SEQ_CH9_8_SEL == "NONE")
    {
        GSEQ_CH9_8_SEL = 2'b00;
    }
    else if (SEQ_CH9_8_SEL == "CH8")
    {
        GSEQ_CH9_8_SEL = 2'b01;
    }
    else if (SEQ_CH9_8_SEL == "CH9")
    {
        GSEQ_CH9_8_SEL = 2'b10;
    }
    else if (SEQ_CH9_8_SEL == "ALL")
    {
        GSEQ_CH9_8_SEL = 2'b11;
    }
    
    if (SEQ_CH7_6_SEL == "NONE")
    {
        GSEQ_CH7_6_SEL = 2'b00;
    }
    else if (SEQ_CH7_6_SEL == "CH6")
    {
        GSEQ_CH7_6_SEL = 2'b01;
    }
    else if (SEQ_CH7_6_SEL == "CH7")
    {
        GSEQ_CH7_6_SEL = 2'b10;
    }
    else if (SEQ_CH7_6_SEL == "ALL")
    {
        GSEQ_CH7_6_SEL = 2'b11;
    }
    
    if (SEQ_CH5_4_SEL == "NONE")
    {
        GSEQ_CH5_4_SEL = 2'b00;
    }
    else if (SEQ_CH5_4_SEL == "CH4")
    {
        GSEQ_CH5_4_SEL = 2'b01;
    }
    else if (SEQ_CH5_4_SEL == "CH5")
    {
        GSEQ_CH5_4_SEL = 2'b10;
    }
    else if (SEQ_CH5_4_SEL == "ALL")
    {
        GSEQ_CH5_4_SEL = 2'b11;
    }
    
    if (SEQ_CH3_2_SEL == "NONE")
    {
        GSEQ_CH3_2_SEL = 2'b00;
    }
    else if (SEQ_CH3_2_SEL == "CH2")
    {
        GSEQ_CH3_2_SEL = 2'b01;
    }
    else if (SEQ_CH3_2_SEL == "CH3")
    {
        GSEQ_CH3_2_SEL = 2'b10;
    }
    else if (SEQ_CH3_2_SEL == "ALL")
    {
        GSEQ_CH3_2_SEL = 2'b11;
    }
    
    if (SEQ_CH1_0_SEL == "NONE")
    {
        GSEQ_CH1_0_SEL = 2'b00;
    }
    else if (SEQ_CH1_0_SEL == "CH0")
    {
        GSEQ_CH1_0_SEL = 2'b01;
    }
    else if (SEQ_CH1_0_SEL == "CH1")
    {
        GSEQ_CH1_0_SEL = 2'b10;
    }
    else if (SEQ_CH1_0_SEL == "ALL")
    {
        GSEQ_CH1_0_SEL = 2'b11;
    }
    
    bit GSEQ_CH11_10_IN[1:0] = 2'b00;
    bit GSEQ_CH9_8_IN[1:0] = 2'b00;
    bit GSEQ_CH7_6_IN[1:0] = 2'b00;
    bit GSEQ_CH5_4_IN[1:0] = 2'b00;
    bit GSEQ_CH3_2_IN[1:0] = 2'b00;
    bit GSEQ_CH1_0_IN[1:0] = 2'b00;
    if (SEQ_CH11_10_IN == "SINGLE_END")
    {
        GSEQ_CH11_10_IN = 2'b00;
    }
    else if (SEQ_CH11_10_IN == "UNIPOLAR")
    {
        GSEQ_CH11_10_IN = 2'b01;
    }
    else if (SEQ_CH11_10_IN == "BIPOLAR")
    {
        GSEQ_CH11_10_IN = 2'b11;
    }
    
    if (SEQ_CH9_8_IN == "SINGLE_END")
    {
        GSEQ_CH9_8_IN = 2'b00;
    }
    else if (SEQ_CH9_8_IN == "UNIPOLAR")
    {
        GSEQ_CH9_8_IN = 2'b01;
    }
    else if (SEQ_CH9_8_IN == "BIPOLAR")
    {
        GSEQ_CH9_8_IN = 2'b11;
    }
    
    if (SEQ_CH7_6_IN == "SINGLE_END")
    {
        GSEQ_CH7_6_IN = 2'b00;
    }
    else if (SEQ_CH7_6_IN == "UNIPOLAR")
    {
        GSEQ_CH7_6_IN = 2'b01;
    }
    else if (SEQ_CH7_6_IN == "BIPOLAR")
    {
        GSEQ_CH7_6_IN = 2'b11;
    }
    
    if (SEQ_CH5_4_IN == "SINGLE_END")
    {
        GSEQ_CH5_4_IN = 2'b00;
    }
    else if (SEQ_CH5_4_IN == "UNIPOLAR")
    {
        GSEQ_CH5_4_IN = 2'b01;
    }
    else if (SEQ_CH5_4_IN == "BIPOLAR")
    {
        GSEQ_CH5_4_IN = 2'b11;
    }
    
    if (SEQ_CH3_2_IN == "SINGLE_END")
    {
        GSEQ_CH3_2_IN = 2'b00;
    }
    else if (SEQ_CH3_2_IN == "UNIPOLAR")
    {
        GSEQ_CH3_2_IN = 2'b01;
    }
    else if (SEQ_CH3_2_IN == "BIPOLAR")
    {
        GSEQ_CH3_2_IN = 2'b11;
    }
    
    if (SEQ_CH1_0_IN == "SINGLE_END")
    {
        GSEQ_CH1_0_IN = 2'b00;
    }
    else if (SEQ_CH1_0_IN == "UNIPOLAR")
    {
        GSEQ_CH1_0_IN = 2'b01;
    }
    else if (SEQ_CH1_0_IN == "BIPOLAR")
    {
        GSEQ_CH1_0_IN = 2'b11;
    }
    
    bit GTEMP_SENSOR_HIGH[7:0] = to_unsigned(TEMP_SENSOR_HIGH, 8);
    bit GTEMP_SENSOR_LOW[7:0] = to_unsigned(TEMP_SENSOR_LOW, 8);
    
    operator gopADC gateadc
        parameter map 
        ( 
            CP_REG0         => {GAVERAGE, GCALIB, GREFERENCE, GCALIB_REFERENCE, GFULL_SWING, GVCM, GDIVIDER},
            CP_REG1         => {GADC_MODE, GEVENT_DRIVE, GADC_MODE_1MSPS, GCLKSWITCH, 3'b000, GINTERNAL_VOL_SEL, GSINGLE_CH_SEL, GSINGLE_CH_IN},
            CP_REG2         => {4'b0000, GSEQ_CH11_10_SEL, GSEQ_CH9_8_SEL, GSEQ_CH7_6_SEL, GSEQ_CH5_4_SEL, GSEQ_CH3_2_SEL, GSEQ_CH1_0_SEL},
            CP_REG3         => {4'b0000, GSEQ_CH11_10_IN, GSEQ_CH9_8_IN, GSEQ_CH7_6_IN, GSEQ_CH5_4_IN, GSEQ_CH3_2_IN, GSEQ_CH1_0_IN},
            CP_REG4         => {GTEMP_SENSOR_HIGH, GTEMP_SENSOR_LOW},
            CP_AD_EN_ENABLE => ADC_EN_ENABLE
        )
        port map
        (
            VAUX        =>  VAUX      ,
            VA          =>  VA        ,
            RST_N       =>  RST_N     ,
            LOADN_SC    =>  LOADSC_N  ,
            DCLK        =>  DCLK      ,
            DEN         =>  DEN       ,
            DI          =>  DI        ,
            DWE         =>  DWE       ,
            DADDR       =>  DADDR     ,
            CONVST      =>  CONVST    ,
            DBUSY       =>  DBUSY     ,
            AD_EN       =>  ADC_EN    ,
            DO          =>  DO        ,
            DRDY        =>  DRDY      ,
            DMODIFIED   =>  DMODIFIED ,
            LOGIC_DONE  =>  LOGIC_DONE,
            OVER_TEMP   =>  OVER_TEMP
        );

};
